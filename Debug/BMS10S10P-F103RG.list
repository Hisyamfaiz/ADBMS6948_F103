
BMS10S10P-F103RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe2c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  08010018  08010018  00020018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801091c  0801091c  00030220  2**0
                  CONTENTS
  4 .ARM          00000000  0801091c  0801091c  00030220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801091c  0801091c  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801091c  0801091c  0002091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010920  08010920  00020920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08010924  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000220  08010b44  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  08010b44  000308f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7c8  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b94  00000000  00000000  0004da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000515a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00052870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eeb1  00000000  00000000  00053998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a525  00000000  00000000  00072849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa781  00000000  00000000  0008cd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001374ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ec  00000000  00000000  00137544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000220 	.word	0x20000220
 8000204:	00000000 	.word	0x00000000
 8000208:	0800fffc 	.word	0x0800fffc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000224 	.word	0x20000224
 8000224:	0800fffc 	.word	0x0800fffc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4605      	mov	r5, r0
 800127a:	4621      	mov	r1, r4
 800127c:	4628      	mov	r0, r5
 800127e:	2200      	movs	r2, #0
 8001280:	2300      	movs	r3, #0
 8001282:	f7ff fc07 	bl	8000a94 <__aeabi_dcmplt>
 8001286:	b928      	cbnz	r0, 8001294 <__aeabi_d2lz+0x20>
 8001288:	4628      	mov	r0, r5
 800128a:	4621      	mov	r1, r4
 800128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001290:	f000 b80a 	b.w	80012a8 <__aeabi_d2ulz>
 8001294:	4628      	mov	r0, r5
 8001296:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800129a:	f000 f805 	bl	80012a8 <__aeabi_d2ulz>
 800129e:	4240      	negs	r0, r0
 80012a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	bf00      	nop

080012a8 <__aeabi_d2ulz>:
 80012a8:	b5d0      	push	{r4, r6, r7, lr}
 80012aa:	2200      	movs	r2, #0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__aeabi_d2ulz+0x34>)
 80012ae:	4606      	mov	r6, r0
 80012b0:	460f      	mov	r7, r1
 80012b2:	f7ff f97d 	bl	80005b0 <__aeabi_dmul>
 80012b6:	f7ff fc53 	bl	8000b60 <__aeabi_d2uiz>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_ui2d>
 80012c0:	2200      	movs	r2, #0
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <__aeabi_d2ulz+0x38>)
 80012c4:	f7ff f974 	bl	80005b0 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4630      	mov	r0, r6
 80012ce:	4639      	mov	r1, r7
 80012d0:	f7fe ffb6 	bl	8000240 <__aeabi_dsub>
 80012d4:	f7ff fc44 	bl	8000b60 <__aeabi_d2uiz>
 80012d8:	4621      	mov	r1, r4
 80012da:	bdd0      	pop	{r4, r6, r7, pc}
 80012dc:	3df00000 	.word	0x3df00000
 80012e0:	41f00000 	.word	0x41f00000

080012e4 <Batt_Discharge_Mode>:
extern float Pack_SOC, Delta_VCell,Bat_Pow_Out, Pack_Cap;
extern uint16_t LifeTime;
extern uint8_t BATT_State;

void Batt_Discharge_Mode(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <Batt_Discharge_Mode+0x98>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d024      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_overtemperature==ON||
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <Batt_Discharge_Mode+0x9c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d020      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_undertemperature==ON||
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <Batt_Discharge_Mode+0xa0>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d01c      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_overcurrentdischarge==ON||
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <Batt_Discharge_Mode+0xa4>)
 8001302:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 8001304:	2b01      	cmp	r3, #1
 8001306:	d018      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_SOCOverDischarge==ON||
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <Batt_Discharge_Mode+0xa8>)
 800130a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 800130c:	2b01      	cmp	r3, #1
 800130e:	d014      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_shortcircuit==ON||
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <Batt_Discharge_Mode+0xac>)
 8001312:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 8001314:	2b01      	cmp	r3, #1
 8001316:	d010      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_unbalance==ON||
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <Batt_Discharge_Mode+0xb0>)
 800131a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 800131c:	2b01      	cmp	r3, #1
 800131e:	d00c      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_systemfailure==ON||
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <Batt_Discharge_Mode+0xb4>)
 8001322:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 8001324:	2b01      	cmp	r3, #1
 8001326:	d008      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			VBATT < 30)
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <Batt_Discharge_Mode+0xb8>)
 800132a:	681b      	ldr	r3, [r3, #0]
			flag_trip_systemfailure==ON||
 800132c:	491c      	ldr	r1, [pc, #112]	; (80013a0 <Batt_Discharge_Mode+0xbc>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff32 	bl	8001198 <__aeabi_fcmplt>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <Batt_Discharge_Mode+0x5c>
	{
		Batt_Open_Mode();
 800133a:	f000 f923 	bl	8001584 <Batt_Open_Mode>
 800133e:	e01b      	b.n	8001378 <Batt_Discharge_Mode+0x94>
	}
	else
	{
		HAL_GPIO_WritePin(BATT_CUTH_GPIO_Port, BATT_CUTH_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001346:	4817      	ldr	r0, [pc, #92]	; (80013a4 <Batt_Discharge_Mode+0xc0>)
 8001348:	f007 fce5 	bl	8008d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BATT_CUTL_GPIO_Port, BATT_CUTL_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <Batt_Discharge_Mode+0xc4>)
 8001354:	f007 fcdf 	bl	8008d16 <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <Batt_Discharge_Mode+0xc8>)
 800135a:	2202      	movs	r2, #2
 800135c:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <Batt_Discharge_Mode+0xcc>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <Batt_Discharge_Mode+0xd0>)
 8001366:	2201      	movs	r2, #1
 8001368:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <Batt_Discharge_Mode+0xd4>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <Batt_Discharge_Mode+0xd8>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
	}


}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200002fd 	.word	0x200002fd
 8001380:	2000027c 	.word	0x2000027c
 8001384:	200002fc 	.word	0x200002fc
 8001388:	2000030c 	.word	0x2000030c
 800138c:	20000328 	.word	0x20000328
 8001390:	2000025f 	.word	0x2000025f
 8001394:	2000025c 	.word	0x2000025c
 8001398:	20000268 	.word	0x20000268
 800139c:	20000280 	.word	0x20000280
 80013a0:	41f00000 	.word	0x41f00000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40011000 	.word	0x40011000
 80013ac:	2000067c 	.word	0x2000067c
 80013b0:	20000338 	.word	0x20000338
 80013b4:	20000288 	.word	0x20000288
 80013b8:	2000037c 	.word	0x2000037c
 80013bc:	20000254 	.word	0x20000254

080013c0 <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <Batt_Charge_Mode+0xa0>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d017      	beq.n	80013fc <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 80013cc:	4b25      	ldr	r3, [pc, #148]	; (8001464 <Batt_Charge_Mode+0xa4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d013      	beq.n	80013fc <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 80013d4:	4b24      	ldr	r3, [pc, #144]	; (8001468 <Batt_Charge_Mode+0xa8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d00f      	beq.n	80013fc <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 80013dc:	4b23      	ldr	r3, [pc, #140]	; (800146c <Batt_Charge_Mode+0xac>)
 80013de:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d00b      	beq.n	80013fc <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <Batt_Charge_Mode+0xb0>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d007      	beq.n	80013fc <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <Batt_Charge_Mode+0xb4>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d003      	beq.n	80013fc <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <Batt_Charge_Mode+0xb8>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d102      	bne.n	8001402 <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 80013fc:	f000 f8c2 	bl	8001584 <Batt_Open_Mode>
			EEPROM_WriteData(11, cycle);
			flag_write_cycle = 1;
		}
	}

}
 8001400:	e02c      	b.n	800145c <Batt_Charge_Mode+0x9c>
		HAL_GPIO_WritePin(BATT_CUTH_GPIO_Port, BATT_CUTH_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001408:	481c      	ldr	r0, [pc, #112]	; (800147c <Batt_Charge_Mode+0xbc>)
 800140a:	f007 fc84 	bl	8008d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BATT_CUTL_GPIO_Port, BATT_CUTL_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001414:	481a      	ldr	r0, [pc, #104]	; (8001480 <Batt_Charge_Mode+0xc0>)
 8001416:	f007 fc7e 	bl	8008d16 <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <Batt_Charge_Mode+0xc4>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <Batt_Charge_Mode+0xc8>)
 8001422:	2201      	movs	r2, #1
 8001424:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <Batt_Charge_Mode+0xcc>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <Batt_Charge_Mode+0xd0>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
		if (flag_write_cycle == 0){
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <Batt_Charge_Mode+0xd4>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d110      	bne.n	800145c <Batt_Charge_Mode+0x9c>
			cycle = EEPROM_ReadData(11) + 1;
 800143a:	200b      	movs	r0, #11
 800143c:	f000 fae4 	bl	8001a08 <EEPROM_ReadData>
 8001440:	4603      	mov	r3, r0
 8001442:	3301      	adds	r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <Batt_Charge_Mode+0xd8>)
 8001448:	701a      	strb	r2, [r3, #0]
			EEPROM_WriteData(11, cycle);
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <Batt_Charge_Mode+0xd8>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	200b      	movs	r0, #11
 8001452:	f000 fabb 	bl	80019cc <EEPROM_WriteData>
			flag_write_cycle = 1;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <Batt_Charge_Mode+0xd4>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000374 	.word	0x20000374
 8001464:	2000027c 	.word	0x2000027c
 8001468:	200002fc 	.word	0x200002fc
 800146c:	20000322 	.word	0x20000322
 8001470:	2000025d 	.word	0x2000025d
 8001474:	2000025f 	.word	0x2000025f
 8001478:	20000268 	.word	0x20000268
 800147c:	40010800 	.word	0x40010800
 8001480:	40011000 	.word	0x40011000
 8001484:	2000067c 	.word	0x2000067c
 8001488:	20000338 	.word	0x20000338
 800148c:	20000288 	.word	0x20000288
 8001490:	2000037c 	.word	0x2000037c
 8001494:	20000254 	.word	0x20000254
 8001498:	2000024c 	.word	0x2000024c

0800149c <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <Batt_Full_CD_Mode+0xa0>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d027      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <Batt_Full_CD_Mode+0xa4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d023      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <Batt_Full_CD_Mode+0xa8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d01f      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <Batt_Full_CD_Mode+0xac>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d01b      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <Batt_Full_CD_Mode+0xb0>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d017      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <Batt_Full_CD_Mode+0xb4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d013      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <Batt_Full_CD_Mode+0xb8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d00f      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <Batt_Full_CD_Mode+0xbc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d00b      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <Batt_Full_CD_Mode+0xc0>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d007      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <Batt_Full_CD_Mode+0xc4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <Batt_Full_CD_Mode+0xc8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d102      	bne.n	80014fe <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 80014f8:	f000 f844 	bl	8001584 <Batt_Open_Mode>
 80014fc:	e01b      	b.n	8001536 <Batt_Full_CD_Mode+0x9a>
	}
	else
	{
		HAL_GPIO_WritePin(BATT_CUTH_GPIO_Port, BATT_CUTH_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001504:	4818      	ldr	r0, [pc, #96]	; (8001568 <Batt_Full_CD_Mode+0xcc>)
 8001506:	f007 fc06 	bl	8008d16 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BATT_CUTL_GPIO_Port, BATT_CUTL_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001510:	4816      	ldr	r0, [pc, #88]	; (800156c <Batt_Full_CD_Mode+0xd0>)
 8001512:	f007 fc00 	bl	8008d16 <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <Batt_Full_CD_Mode+0xd4>)
 8001518:	2203      	movs	r2, #3
 800151a:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <Batt_Full_CD_Mode+0xd8>)
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <Batt_Full_CD_Mode+0xdc>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <Batt_Full_CD_Mode+0xe0>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <Batt_Full_CD_Mode+0xe4>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
	}
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200002fd 	.word	0x200002fd
 8001540:	20000374 	.word	0x20000374
 8001544:	2000027c 	.word	0x2000027c
 8001548:	200002fc 	.word	0x200002fc
 800154c:	2000030c 	.word	0x2000030c
 8001550:	20000322 	.word	0x20000322
 8001554:	20000328 	.word	0x20000328
 8001558:	2000025d 	.word	0x2000025d
 800155c:	2000025f 	.word	0x2000025f
 8001560:	2000025c 	.word	0x2000025c
 8001564:	20000268 	.word	0x20000268
 8001568:	40010800 	.word	0x40010800
 800156c:	40011000 	.word	0x40011000
 8001570:	2000067c 	.word	0x2000067c
 8001574:	20000338 	.word	0x20000338
 8001578:	20000288 	.word	0x20000288
 800157c:	2000037c 	.word	0x2000037c
 8001580:	20000254 	.word	0x20000254

08001584 <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BATT_CUTH_GPIO_Port, BATT_CUTH_Pin, GPIO_PIN_RESET);
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	480f      	ldr	r0, [pc, #60]	; (80015cc <Batt_Open_Mode+0x48>)
 8001590:	f007 fbc1 	bl	8008d16 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BATT_CUTL_GPIO_Port, BATT_CUTL_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <Batt_Open_Mode+0x4c>)
 800159c:	f007 fbbb 	bl	8008d16 <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <Batt_Open_Mode+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <Batt_Open_Mode+0x54>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <Batt_Open_Mode+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <Batt_Open_Mode+0x5c>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <Batt_Open_Mode+0x4c>)
 80015c0:	f007 fba9 	bl	8008d16 <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 80015c4:	f000 f810 	bl	80015e8 <check_SOC_Based_OCV>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010800 	.word	0x40010800
 80015d0:	40011000 	.word	0x40011000
 80015d4:	2000067c 	.word	0x2000067c
 80015d8:	20000338 	.word	0x20000338
 80015dc:	20000288 	.word	0x20000288
 80015e0:	2000037c 	.word	0x2000037c
 80015e4:	00000000 	.word	0x00000000

080015e8 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 80015e8:	b5b0      	push	{r4, r5, r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 80015ec:	4b66      	ldr	r3, [pc, #408]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff85 	bl	8000500 <__aeabi_f2d>
 80015f6:	a354      	add	r3, pc, #336	; (adr r3, 8001748 <check_SOC_Based_OCV+0x160>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff fa54 	bl	8000aa8 <__aeabi_dcmple>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d025      	beq.n	8001652 <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 8001606:	4b60      	ldr	r3, [pc, #384]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff78 	bl	8000500 <__aeabi_f2d>
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	4b5d      	ldr	r3, [pc, #372]	; (800178c <check_SOC_Based_OCV+0x1a4>)
 8001616:	f7ff f8f5 	bl	8000804 <__aeabi_ddiv>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a34b      	add	r3, pc, #300	; (adr r3, 8001750 <check_SOC_Based_OCV+0x168>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffc2 	bl	80005b0 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	a348      	add	r3, pc, #288	; (adr r3, 8001758 <check_SOC_Based_OCV+0x170>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe fe01 	bl	8000240 <__aeabi_dsub>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff faab 	bl	8000ba0 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	4a50      	ldr	r2, [pc, #320]	; (8001790 <check_SOC_Based_OCV+0x1a8>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	e0d4      	b.n	80017fc <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ff52 	bl	8000500 <__aeabi_f2d>
 800165c:	a33a      	add	r3, pc, #232	; (adr r3, 8001748 <check_SOC_Based_OCV+0x160>)
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7ff fa35 	bl	8000ad0 <__aeabi_dcmpgt>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d02e      	beq.n	80016ca <check_SOC_Based_OCV+0xe2>
 800166c:	4b46      	ldr	r3, [pc, #280]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4948      	ldr	r1, [pc, #288]	; (8001794 <check_SOC_Based_OCV+0x1ac>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fd9a 	bl	80011ac <__aeabi_fcmple>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d025      	beq.n	80016ca <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 800167e:	4b42      	ldr	r3, [pc, #264]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff3c 	bl	8000500 <__aeabi_f2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <check_SOC_Based_OCV+0x1a4>)
 800168e:	f7ff f8b9 	bl	8000804 <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	a331      	add	r3, pc, #196	; (adr r3, 8001760 <check_SOC_Based_OCV+0x178>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff86 	bl	80005b0 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	a32e      	add	r3, pc, #184	; (adr r3, 8001768 <check_SOC_Based_OCV+0x180>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe fdc5 	bl	8000240 <__aeabi_dsub>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f7ff fa6f 	bl	8000ba0 <__aeabi_d2f>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a32      	ldr	r2, [pc, #200]	; (8001790 <check_SOC_Based_OCV+0x1a8>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e098      	b.n	80017fc <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4931      	ldr	r1, [pc, #196]	; (8001794 <check_SOC_Based_OCV+0x1ac>)
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd7f 	bl	80011d4 <__aeabi_fcmpgt>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d05d      	beq.n	8001798 <check_SOC_Based_OCV+0x1b0>
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe ff0d 	bl	8000500 <__aeabi_f2d>
 80016e6:	a322      	add	r3, pc, #136	; (adr r3, 8001770 <check_SOC_Based_OCV+0x188>)
 80016e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ec:	f7ff f9dc 	bl	8000aa8 <__aeabi_dcmple>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d050      	beq.n	8001798 <check_SOC_Based_OCV+0x1b0>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 80016f6:	4b24      	ldr	r3, [pc, #144]	; (8001788 <check_SOC_Based_OCV+0x1a0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff00 	bl	8000500 <__aeabi_f2d>
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <check_SOC_Based_OCV+0x1a4>)
 8001706:	f7ff f87d 	bl	8000804 <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	a319      	add	r3, pc, #100	; (adr r3, 8001778 <check_SOC_Based_OCV+0x190>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff4a 	bl	80005b0 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	a316      	add	r3, pc, #88	; (adr r3, 8001780 <check_SOC_Based_OCV+0x198>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe fd89 	bl	8000240 <__aeabi_dsub>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fa33 	bl	8000ba0 <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <check_SOC_Based_OCV+0x1a8>)
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e05c      	b.n	80017fc <check_SOC_Based_OCV+0x214>
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	66666666 	.word	0x66666666
 800174c:	4049a666 	.word	0x4049a666
 8001750:	9d89d6ed 	.word	0x9d89d6ed
 8001754:	403809d8 	.word	0x403809d8
 8001758:	00000000 	.word	0x00000000
 800175c:	40534c00 	.word	0x40534c00
 8001760:	26317911 	.word	0x26317911
 8001764:	4060e88b 	.word	0x4060e88b
 8001768:	a5947ec7 	.word	0xa5947ec7
 800176c:	407ca45a 	.word	0x407ca45a
 8001770:	9999999a 	.word	0x9999999a
 8001774:	404b5999 	.word	0x404b5999
 8001778:	f989b8e3 	.word	0xf989b8e3
 800177c:	4074ce1a 	.word	0x4074ce1a
 8001780:	e9c08a8b 	.word	0xe9c08a8b
 8001784:	409227ee 	.word	0x409227ee
 8001788:	20000280 	.word	0x20000280
 800178c:	402e0000 	.word	0x402e0000
 8001790:	20000370 	.word	0x20000370
 8001794:	42560000 	.word	0x42560000
	}
	else if(VBATT > 54.7){
 8001798:	4b73      	ldr	r3, [pc, #460]	; (8001968 <check_SOC_Based_OCV+0x380>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe feaf 	bl	8000500 <__aeabi_f2d>
 80017a2:	a365      	add	r3, pc, #404	; (adr r3, 8001938 <check_SOC_Based_OCV+0x350>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7ff f992 	bl	8000ad0 <__aeabi_dcmpgt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d024      	beq.n	80017fc <check_SOC_Based_OCV+0x214>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 80017b2:	4b6d      	ldr	r3, [pc, #436]	; (8001968 <check_SOC_Based_OCV+0x380>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fea2 	bl	8000500 <__aeabi_f2d>
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b6a      	ldr	r3, [pc, #424]	; (800196c <check_SOC_Based_OCV+0x384>)
 80017c2:	f7ff f81f 	bl	8000804 <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4610      	mov	r0, r2
 80017cc:	4619      	mov	r1, r3
 80017ce:	a35c      	add	r3, pc, #368	; (adr r3, 8001940 <check_SOC_Based_OCV+0x358>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe feec 	bl	80005b0 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	a359      	add	r3, pc, #356	; (adr r3, 8001948 <check_SOC_Based_OCV+0x360>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe fd2b 	bl	8000240 <__aeabi_dsub>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f9d5 	bl	8000ba0 <__aeabi_d2f>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a5d      	ldr	r2, [pc, #372]	; (8001970 <check_SOC_Based_OCV+0x388>)
 80017fa:	6013      	str	r3, [r2, #0]
	}

	Pack_SOC=(0.4884934490 * VBATT * VBATT) - (26.2875616013 * VBATT) + 348.6849534722;   //Persamaan Baterai INR 21700
 80017fc:	4b5a      	ldr	r3, [pc, #360]	; (8001968 <check_SOC_Based_OCV+0x380>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe7d 	bl	8000500 <__aeabi_f2d>
 8001806:	a352      	add	r3, pc, #328	; (adr r3, 8001950 <check_SOC_Based_OCV+0x368>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fed0 	bl	80005b0 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4614      	mov	r4, r2
 8001816:	461d      	mov	r5, r3
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <check_SOC_Based_OCV+0x380>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe6f 	bl	8000500 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fec1 	bl	80005b0 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4614      	mov	r4, r2
 8001834:	461d      	mov	r5, r3
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <check_SOC_Based_OCV+0x380>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fe60 	bl	8000500 <__aeabi_f2d>
 8001840:	a345      	add	r3, pc, #276	; (adr r3, 8001958 <check_SOC_Based_OCV+0x370>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe feb3 	bl	80005b0 <__aeabi_dmul>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fcf5 	bl	8000240 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	a340      	add	r3, pc, #256	; (adr r3, 8001960 <check_SOC_Based_OCV+0x378>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fcee 	bl	8000244 <__adddf3>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f996 	bl	8000ba0 <__aeabi_d2f>
 8001874:	4603      	mov	r3, r0
 8001876:	4a3e      	ldr	r2, [pc, #248]	; (8001970 <check_SOC_Based_OCV+0x388>)
 8001878:	6013      	str	r3, [r2, #0]
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <check_SOC_Based_OCV+0x38c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <check_SOC_Based_OCV+0x390>)
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff f9df 	bl	8000c48 <__aeabi_fsub>
 800188a:	4603      	mov	r3, r0
 800188c:	4619      	mov	r1, r3
 800188e:	483b      	ldr	r0, [pc, #236]	; (800197c <check_SOC_Based_OCV+0x394>)
 8001890:	f7ff fb98 	bl	8000fc4 <__aeabi_fdiv>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	4b39      	ldr	r3, [pc, #228]	; (8001980 <check_SOC_Based_OCV+0x398>)
 800189a:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 800189c:	4b38      	ldr	r3, [pc, #224]	; (8001980 <check_SOC_Based_OCV+0x398>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a35      	ldr	r2, [pc, #212]	; (8001978 <check_SOC_Based_OCV+0x390>)
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fad8 	bl	8000e5c <__aeabi_fmul>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	4a34      	ldr	r2, [pc, #208]	; (8001984 <check_SOC_Based_OCV+0x39c>)
 80018b4:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <check_SOC_Based_OCV+0x398>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <check_SOC_Based_OCV+0x388>)
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff facb 	bl	8000e5c <__aeabi_fmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <check_SOC_Based_OCV+0x39c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4610      	mov	r0, r2
 80018d2:	f7ff f9bb 	bl	8000c4c <__addsf3>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <check_SOC_Based_OCV+0x3a0>)
 80018dc:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <check_SOC_Based_OCV+0x388>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	492a      	ldr	r1, [pc, #168]	; (800198c <check_SOC_Based_OCV+0x3a4>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fc75 	bl	80011d4 <__aeabi_fcmpgt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <check_SOC_Based_OCV+0x310>
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <check_SOC_Based_OCV+0x388>)
 80018f2:	4a22      	ldr	r2, [pc, #136]	; (800197c <check_SOC_Based_OCV+0x394>)
 80018f4:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 80018f6:	e01b      	b.n	8001930 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC>100) Pack_SOC=100;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <check_SOC_Based_OCV+0x388>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	491f      	ldr	r1, [pc, #124]	; (800197c <check_SOC_Based_OCV+0x394>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fc68 	bl	80011d4 <__aeabi_fcmpgt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <check_SOC_Based_OCV+0x32a>
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <check_SOC_Based_OCV+0x388>)
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <check_SOC_Based_OCV+0x394>)
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	e00e      	b.n	8001930 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001912:	4b17      	ldr	r3, [pc, #92]	; (8001970 <check_SOC_Based_OCV+0x388>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fc3c 	bl	8001198 <__aeabi_fcmplt>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d100      	bne.n	8001928 <check_SOC_Based_OCV+0x340>
}
 8001926:	e003      	b.n	8001930 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <check_SOC_Based_OCV+0x388>)
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	bdb0      	pop	{r4, r5, r7, pc}
 8001934:	f3af 8000 	nop.w
 8001938:	9999999a 	.word	0x9999999a
 800193c:	404b5999 	.word	0x404b5999
 8001940:	99fc263d 	.word	0x99fc263d
 8001944:	405bdb4c 	.word	0x405bdb4c
 8001948:	be4fd9fa 	.word	0xbe4fd9fa
 800194c:	40761dc4 	.word	0x40761dc4
 8001950:	06f0f9c2 	.word	0x06f0f9c2
 8001954:	3fdf437a 	.word	0x3fdf437a
 8001958:	a3192b3c 	.word	0xa3192b3c
 800195c:	403a499d 	.word	0x403a499d
 8001960:	91c5a617 	.word	0x91c5a617
 8001964:	4075caf5 	.word	0x4075caf5
 8001968:	20000280 	.word	0x20000280
 800196c:	402e0000 	.word	0x402e0000
 8001970:	20000370 	.word	0x20000370
 8001974:	20000250 	.word	0x20000250
 8001978:	20000308 	.word	0x20000308
 800197c:	42c80000 	.word	0x42c80000
 8001980:	20000310 	.word	0x20000310
 8001984:	2000028c 	.word	0x2000028c
 8001988:	2000031c 	.word	0x2000031c
 800198c:	43020000 	.word	0x43020000

08001990 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c2, addr, 3, 100)!=HAL_OK){
 800199a:	88f9      	ldrh	r1, [r7, #6]
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	2203      	movs	r2, #3
 80019a0:	4808      	ldr	r0, [pc, #32]	; (80019c4 <EEPROM_isDeviceReady+0x34>)
 80019a2:	f007 fe8f 	bl	80096c4 <HAL_I2C_IsDeviceReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80019ac:	2140      	movs	r1, #64	; 0x40
 80019ae:	4806      	ldr	r0, [pc, #24]	; (80019c8 <EEPROM_isDeviceReady+0x38>)
 80019b0:	f007 f9c9 	bl	8008d46 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80019b4:	2064      	movs	r0, #100	; 0x64
 80019b6:	f005 f901 	bl	8006bbc <HAL_Delay>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80019ba:	e7f7      	b.n	80019ac <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200005f4 	.word	0x200005f4
 80019c8:	40011000 	.word	0x40011000

080019cc <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	4603      	mov	r3, r0
 80019d4:	460a      	mov	r2, r1
 80019d6:	80fb      	strh	r3, [r7, #6]
 80019d8:	4613      	mov	r3, r2
 80019da:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2,EEPROM_ADDRESS,addr,64,&data,1,10);
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	230a      	movs	r3, #10
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	2301      	movs	r3, #1
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	1d7b      	adds	r3, r7, #5
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2340      	movs	r3, #64	; 0x40
 80019ec:	21a0      	movs	r1, #160	; 0xa0
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <EEPROM_WriteData+0x38>)
 80019f0:	f007 fb06 	bl	8009000 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80019f4:	2064      	movs	r0, #100	; 0x64
 80019f6:	f005 f8e1 	bl	8006bbc <HAL_Delay>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200005f4 	.word	0x200005f4

08001a08 <EEPROM_ReadData>:

uint8_t EEPROM_ReadData(uint16_t addr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af04      	add	r7, sp, #16
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	uint8_t EEPROM_data;
	HAL_I2C_Mem_Read(&hi2c2,0xA0,addr,64,&EEPROM_data,1,10);
 8001a12:	88fa      	ldrh	r2, [r7, #6]
 8001a14:	230a      	movs	r3, #10
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	f107 030f 	add.w	r3, r7, #15
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2340      	movs	r3, #64	; 0x40
 8001a24:	21a0      	movs	r1, #160	; 0xa0
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <EEPROM_ReadData+0x34>)
 8001a28:	f007 fbe4 	bl	80091f4 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f005 f8c5 	bl	8006bbc <HAL_Delay>
	return EEPROM_data;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200005f4 	.word	0x200005f4

08001a40 <ltc6804_GPIO_Config>:

float Cell_Voltage_Lowest;
float minus_offset[15]={500,840,-40,-40,-100,540,830,20,-130,-120,560,880,-30,-110,-140}; //modul B

void ltc6804_GPIO_Config(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b2a      	ldr	r3, [pc, #168]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a29      	ldr	r2, [pc, #164]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6193      	str	r3, [r2, #24]
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <ltc6804_GPIO_Config+0xb0>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6804_CS_PIN;
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_CS_PORT, &GPIO_InitStructure);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4813      	ldr	r0, [pc, #76]	; (8001af4 <ltc6804_GPIO_Config+0xb4>)
 8001aa8:	f006 ff8a 	bl	80089c0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_SCK_PIN;
 8001aac:	2308      	movs	r3, #8
 8001aae:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_SCK_PORT, &GPIO_InitStructure);
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4810      	ldr	r0, [pc, #64]	; (8001af8 <ltc6804_GPIO_Config+0xb8>)
 8001ab8:	f006 ff82 	bl	80089c0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_MOSI_PIN;
 8001abc:	2320      	movs	r3, #32
 8001abe:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_MOSI_PORT, &GPIO_InitStructure);
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480c      	ldr	r0, [pc, #48]	; (8001af8 <ltc6804_GPIO_Config+0xb8>)
 8001ac8:	f006 ff7a 	bl	80089c0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin       = ltc6804_MISO_PIN;
 8001acc:	2310      	movs	r3, #16
 8001ace:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_MISO_PORT, &GPIO_InitStructure);
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <ltc6804_GPIO_Config+0xb8>)
 8001ae4:	f006 ff6c 	bl	80089c0 <HAL_GPIO_Init>
}
 8001ae8:	bf00      	nop
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40011000 	.word	0x40011000
 8001af8:	40010c00 	.word	0x40010c00

08001afc <ltc6804_SPIInit>:

void ltc6804_SPIInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b06:	482d      	ldr	r0, [pc, #180]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b08:	f007 f905 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_RESET_HIGH;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b12:	482a      	ldr	r0, [pc, #168]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b14:	f007 f8ff 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f000 f851 	bl	8001bc0 <ltc6804_Delay>
	ltc6804_RESET_LOW;
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b24:	4825      	ldr	r0, [pc, #148]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b26:	f007 f8f6 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(2000);
 8001b2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b2e:	f000 f847 	bl	8001bc0 <ltc6804_Delay>
	ltc6804_RESET_HIGH;
 8001b32:	2201      	movs	r2, #1
 8001b34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b38:	4820      	ldr	r0, [pc, #128]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b3a:	f007 f8ec 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001b3e:	200a      	movs	r0, #10
 8001b40:	f000 f83e 	bl	8001bc0 <ltc6804_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4a:	481c      	ldr	r0, [pc, #112]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b4c:	f007 f8e3 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b50:	2064      	movs	r0, #100	; 0x64
 8001b52:	f000 f835 	bl	8001bc0 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b5c:	4817      	ldr	r0, [pc, #92]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b5e:	f007 f8da 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b62:	2064      	movs	r0, #100	; 0x64
 8001b64:	f000 f82c 	bl	8001bc0 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4813      	ldr	r0, [pc, #76]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b70:	f007 f8d1 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b74:	2064      	movs	r0, #100	; 0x64
 8001b76:	f000 f823 	bl	8001bc0 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b80:	480e      	ldr	r0, [pc, #56]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b82:	f007 f8c8 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b86:	2064      	movs	r0, #100	; 0x64
 8001b88:	f000 f81a 	bl	8001bc0 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001b94:	f007 f8bf 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b98:	2064      	movs	r0, #100	; 0x64
 8001b9a:	f000 f811 	bl	8001bc0 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <ltc6804_SPIInit+0xc0>)
 8001ba6:	f007 f8b6 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001baa:	2064      	movs	r0, #100	; 0x64
 8001bac:	f000 f808 	bl	8001bc0 <ltc6804_Delay>

	ltc6804_Delay(20000);
 8001bb0:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001bb4:	f000 f804 	bl	8001bc0 <ltc6804_Delay>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40011000 	.word	0x40011000

08001bc0 <ltc6804_Delay>:

void ltc6804_Delay(volatile uint32_t nCount)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8001bc8:	e002      	b.n	8001bd0 <ltc6804_Delay+0x10>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f9      	bne.n	8001bca <ltc6804_Delay+0xa>
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
	...

08001be4 <ltc6804_Write8>:

void ltc6804_Write8(uint8_t out)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6804_CS_SET(CS_Pin);
	//ltc6804_MOSI_RESET;
	ltc6804_SCK_RESET;
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	481b      	ldr	r0, [pc, #108]	; (8001c60 <ltc6804_Write8+0x7c>)
 8001bf4:	f007 f88f 	bl	8008d16 <HAL_GPIO_WritePin>
	//ltc6804_CS_RESET(CS_Pin);
	//ltc6804_Delay(10);
	for (i = 0; i < 8; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e027      	b.n	8001c4e <ltc6804_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	fa42 f303 	asr.w	r3, r2, r3
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <ltc6804_Write8+0x3a>
			ltc6804_MOSI_SET;
 8001c12:	2201      	movs	r2, #1
 8001c14:	2120      	movs	r1, #32
 8001c16:	4812      	ldr	r0, [pc, #72]	; (8001c60 <ltc6804_Write8+0x7c>)
 8001c18:	f007 f87d 	bl	8008d16 <HAL_GPIO_WritePin>
 8001c1c:	e004      	b.n	8001c28 <ltc6804_Write8+0x44>
		} else {
			ltc6804_MOSI_RESET;
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2120      	movs	r1, #32
 8001c22:	480f      	ldr	r0, [pc, #60]	; (8001c60 <ltc6804_Write8+0x7c>)
 8001c24:	f007 f877 	bl	8008d16 <HAL_GPIO_WritePin>
		}
		ltc6804_Delay(10);
 8001c28:	200a      	movs	r0, #10
 8001c2a:	f7ff ffc9 	bl	8001bc0 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2108      	movs	r1, #8
 8001c32:	480b      	ldr	r0, [pc, #44]	; (8001c60 <ltc6804_Write8+0x7c>)
 8001c34:	f007 f86f 	bl	8008d16 <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f7ff ffc1 	bl	8001bc0 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2108      	movs	r1, #8
 8001c42:	4807      	ldr	r0, [pc, #28]	; (8001c60 <ltc6804_Write8+0x7c>)
 8001c44:	f007 f867 	bl	8008d16 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b07      	cmp	r3, #7
 8001c52:	d9d4      	bls.n	8001bfe <ltc6804_Write8+0x1a>
	}
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40010c00 	.word	0x40010c00

08001c64 <ltc6804_Read8>:
		ltc6804_SCK_SET;
	}
}

uint8_t ltc6804_Read8()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	71bb      	strb	r3, [r7, #6]
	//ltc6804_Delay(10);
	//ltc6804_CS_RESET(CS_Pin);
	ltc6804_MOSI_RESET;
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2120      	movs	r1, #32
 8001c72:	481e      	ldr	r0, [pc, #120]	; (8001cec <ltc6804_Read8+0x88>)
 8001c74:	f007 f84f 	bl	8008d16 <HAL_GPIO_WritePin>
	ltc6804_SCK_RESET;
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	481b      	ldr	r0, [pc, #108]	; (8001cec <ltc6804_Read8+0x88>)
 8001c7e:	f007 f84a 	bl	8008d16 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	e028      	b.n	8001cda <ltc6804_Read8+0x76>
		ltc6804_Delay(10);
 8001c88:	200a      	movs	r0, #10
 8001c8a:	f7ff ff99 	bl	8001bc0 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2108      	movs	r1, #8
 8001c92:	4816      	ldr	r0, [pc, #88]	; (8001cec <ltc6804_Read8+0x88>)
 8001c94:	f007 f83f 	bl	8008d16 <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f7ff ff91 	bl	8001bc0 <ltc6804_Delay>
		if (ltc6804_MISO == GPIO_PIN_SET) {
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	4812      	ldr	r0, [pc, #72]	; (8001cec <ltc6804_Read8+0x88>)
 8001ca2:	f007 f821 	bl	8008ce8 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d10b      	bne.n	8001cc4 <ltc6804_Read8+0x60>
			temp |= (1 << (7-i));
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	b25a      	sxtb	r2, r3
 8001cba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b25b      	sxtb	r3, r3
 8001cc2:	71bb      	strb	r3, [r7, #6]
		}
		ltc6804_Delay(10);
 8001cc4:	200a      	movs	r0, #10
 8001cc6:	f7ff ff7b 	bl	8001bc0 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2108      	movs	r1, #8
 8001cce:	4807      	ldr	r0, [pc, #28]	; (8001cec <ltc6804_Read8+0x88>)
 8001cd0:	f007 f821 	bl	8008d16 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	71fb      	strb	r3, [r7, #7]
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b07      	cmp	r3, #7
 8001cde:	d9d3      	bls.n	8001c88 <ltc6804_Read8+0x24>
	}
	//ltc6804_CS_SET(CS_Pin);

	return temp;
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40010c00 	.word	0x40010c00

08001cf0 <set_adc>:
void set_adc(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH, //Cell Channels to be measured
		uint8_t CHG //GPIO Channels to be measured
)
{
 8001cf0:	b490      	push	{r4, r7}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4623      	mov	r3, r4
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	4603      	mov	r3, r0
 8001d04:	71bb      	strb	r3, [r7, #6]
 8001d06:	460b      	mov	r3, r1
 8001d08:	717b      	strb	r3, [r7, #5]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	105b      	asrs	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <set_adc+0x8c>)
 8001d22:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	01db      	lsls	r3, r3, #7
 8001d28:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	4413      	add	r3, r2
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	797b      	ldrb	r3, [r7, #5]
 8001d38:	4413      	add	r3, r2
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	3360      	adds	r3, #96	; 0x60
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <set_adc+0x8c>)
 8001d42:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	105b      	asrs	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	3304      	adds	r3, #4
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <set_adc+0x90>)
 8001d58:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	01db      	lsls	r3, r3, #7
 8001d5e:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG ;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	793b      	ldrb	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3360      	adds	r3, #96	; 0x60
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <set_adc+0x90>)
 8001d6e:	705a      	strb	r2, [r3, #1]

}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc90      	pop	{r4, r7}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000380 	.word	0x20000380
 8001d80:	20000424 	.word	0x20000424

08001d84 <LTC6804_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adcv()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADCV[0];
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <LTC6804_adcv+0x5c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <LTC6804_adcv+0x5c>)
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	707b      	strb	r3, [r7, #1]

	//2
	temp_pec = pec15_calc(2, ADCV);
 8001d96:	4912      	ldr	r1, [pc, #72]	; (8001de0 <LTC6804_adcv+0x5c>)
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f000 fb25 	bl	80023e8 <pec15_calc>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	70fb      	strb	r3, [r7, #3]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001db2:	f000 fb03 	bl	80023bc <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <LTC6804_adcv+0x60>)
 8001dbe:	f006 ffaa 	bl	8008d16 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	2004      	movs	r0, #4
 8001dc8:	f000 fb40 	bl	800244c <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd2:	4804      	ldr	r0, [pc, #16]	; (8001de4 <LTC6804_adcv+0x60>)
 8001dd4:	f006 ff9f 	bl	8008d16 <HAL_GPIO_WritePin>

}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000380 	.word	0x20000380
 8001de4:	40011000 	.word	0x40011000

08001de8 <LTC6804_adstat>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adstat()
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	uint8_t ADSTAT[2];

	//1
	cmd[0] = 0x05;
 8001dee:	2305      	movs	r3, #5
 8001df0:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0xE9;
 8001df2:	23e9      	movs	r3, #233	; 0xe9
 8001df4:	727b      	strb	r3, [r7, #9]

	ADSTAT[0] = cmd[0];
 8001df6:	7a3b      	ldrb	r3, [r7, #8]
 8001df8:	713b      	strb	r3, [r7, #4]
	ADSTAT[1] = cmd[1];
 8001dfa:	7a7b      	ldrb	r3, [r7, #9]
 8001dfc:	717b      	strb	r3, [r7, #5]

	//2
	temp_pec = pec15_calc(2, ADSTAT);
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	2002      	movs	r0, #2
 8001e04:	f000 faf0 	bl	80023e8 <pec15_calc>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001e0c:	89fb      	ldrh	r3, [r7, #14]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(temp_pec);
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	72fb      	strb	r3, [r7, #11]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001e1c:	f000 face 	bl	80023bc <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <LTC6804_adstat+0x64>)
 8001e28:	f006 ff75 	bl	8008d16 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001e2c:	f107 0308 	add.w	r3, r7, #8
 8001e30:	4619      	mov	r1, r3
 8001e32:	2004      	movs	r0, #4
 8001e34:	f000 fb0a 	bl	800244c <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e3e:	4803      	ldr	r0, [pc, #12]	; (8001e4c <LTC6804_adstat+0x64>)
 8001e40:	f006 ff69 	bl	8008d16 <HAL_GPIO_WritePin>

}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40011000 	.word	0x40011000

08001e50 <LTC6804_rdcv>:
 *************************************************/
uint8_t LTC6804_rdcv(uint8_t reg,
		uint8_t total_ic,
		uint16_t cell_codes[][12]
)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	603a      	str	r2, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	71bb      	strb	r3, [r7, #6]

	const uint8_t NUM_RX_BYT = 8;
 8001e60:	2308      	movs	r3, #8
 8001e62:	763b      	strb	r3, [r7, #24]
	const uint8_t BYT_IN_REG = 6;
 8001e64:	2306      	movs	r3, #6
 8001e66:	75fb      	strb	r3, [r7, #23]
	const uint8_t CELL_IN_REG = 3;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	75bb      	strb	r3, [r7, #22]

	uint8_t *cell_data;
	int8_t pec_error = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0; //data counter
 8001e70:	2300      	movs	r3, #0
 8001e72:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001e74:	7e3b      	ldrb	r3, [r7, #24]
 8001e76:	79ba      	ldrb	r2, [r7, #6]
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f009 fa73 	bl	800b368 <malloc>
 8001e82:	4603      	mov	r3, r0
 8001e84:	613b      	str	r3, [r7, #16]
	//1.a
	if (reg == 0)
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d16f      	bne.n	8001f6c <LTC6804_rdcv+0x11c>
	{
		//a.i
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	777b      	strb	r3, [r7, #29]
 8001e90:	e068      	b.n	8001f64 <LTC6804_rdcv+0x114>
		{
			data_counter = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	77bb      	strb	r3, [r7, #30]
			LTC6804_rdcv_reg(cell_reg, total_ic,cell_data);
 8001e96:	79b9      	ldrb	r1, [r7, #6]
 8001e98:	7f7b      	ldrb	r3, [r7, #29]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f8cf 	bl	8002040 <LTC6804_rdcv_reg>
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	773b      	strb	r3, [r7, #28]
 8001ea6:	e056      	b.n	8001f56 <LTC6804_rdcv+0x106>
			{
				// current_ic is used as an IC counter
				//a.ii
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	76fb      	strb	r3, [r7, #27]
 8001eac:	e026      	b.n	8001efc <LTC6804_rdcv+0xac>
				{
					// once for each cell voltages in the register
					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);
 8001eae:	7fbb      	ldrb	r3, [r7, #30]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	7fbb      	ldrb	r3, [r7, #30]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	440b      	add	r3, r1
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	817b      	strh	r3, [r7, #10]
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001ecc:	7f3a      	ldrb	r2, [r7, #28]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	7ef9      	ldrb	r1, [r7, #27]
 8001ede:	7f7a      	ldrb	r2, [r7, #29]
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	7db8      	ldrb	r0, [r7, #22]
 8001ee4:	fb00 f202 	mul.w	r2, r0, r2
 8001ee8:	440a      	add	r2, r1
 8001eea:	8979      	ldrh	r1, [r7, #10]
 8001eec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;
 8001ef0:	7fbb      	ldrb	r3, [r7, #30]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	77bb      	strb	r3, [r7, #30]
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001ef6:	7efb      	ldrb	r3, [r7, #27]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	76fb      	strb	r3, [r7, #27]
 8001efc:	7efa      	ldrb	r2, [r7, #27]
 8001efe:	7dbb      	ldrb	r3, [r7, #22]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d3d4      	bcc.n	8001eae <LTC6804_rdcv+0x5e>
				}
				//a.iii
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];
 8001f04:	7fbb      	ldrb	r3, [r7, #30]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	7fbb      	ldrb	r3, [r7, #30]
 8001f14:	3301      	adds	r3, #1
 8001f16:	6939      	ldr	r1, [r7, #16]
 8001f18:	440b      	add	r3, r1
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	81fb      	strh	r3, [r7, #14]
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT ]);
 8001f22:	7f3b      	ldrb	r3, [r7, #28]
 8001f24:	7e3a      	ldrb	r2, [r7, #24]
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	441a      	add	r2, r3
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	4611      	mov	r1, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fa57 	bl	80023e8 <pec15_calc>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	81bb      	strh	r3, [r7, #12]
				if (received_pec != data_pec)
 8001f3e:	89fa      	ldrh	r2, [r7, #14]
 8001f40:	89bb      	ldrh	r3, [r7, #12]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d001      	beq.n	8001f4a <LTC6804_rdcv+0xfa>
				{
					pec_error = -1;
 8001f46:	23ff      	movs	r3, #255	; 0xff
 8001f48:	77fb      	strb	r3, [r7, #31]
				}
				data_counter=data_counter+2;
 8001f4a:	7fbb      	ldrb	r3, [r7, #30]
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001f50:	7f3b      	ldrb	r3, [r7, #28]
 8001f52:	3301      	adds	r3, #1
 8001f54:	773b      	strb	r3, [r7, #28]
 8001f56:	7f3a      	ldrb	r2, [r7, #28]
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3a4      	bcc.n	8001ea8 <LTC6804_rdcv+0x58>
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001f5e:	7f7b      	ldrb	r3, [r7, #29]
 8001f60:	3301      	adds	r3, #1
 8001f62:	777b      	strb	r3, [r7, #29]
 8001f64:	7f7b      	ldrb	r3, [r7, #29]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d993      	bls.n	8001e92 <LTC6804_rdcv+0x42>
 8001f6a:	e060      	b.n	800202e <LTC6804_rdcv+0x1de>
	//1.b
	else
	{
		//b.i

		LTC6804_rdcv_reg(reg, total_ic,cell_data);
 8001f6c:	79b9      	ldrb	r1, [r7, #6]
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f864 	bl	8002040 <LTC6804_rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001f78:	2300      	movs	r3, #0
 8001f7a:	76bb      	strb	r3, [r7, #26]
 8001f7c:	e053      	b.n	8002026 <LTC6804_rdcv+0x1d6>
		{
			// current_ic is used as an IC counter
			//b.ii
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001f7e:	2300      	movs	r3, #0
 8001f80:	767b      	strb	r3, [r7, #25]
 8001f82:	e026      	b.n	8001fd2 <LTC6804_rdcv+0x182>
			{
				// once for each cell voltage in the register
				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);
 8001f84:	7fbb      	ldrb	r3, [r7, #30]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	7fbb      	ldrb	r3, [r7, #30]
 8001f90:	3301      	adds	r3, #1
 8001f92:	6939      	ldr	r1, [r7, #16]
 8001f94:	440b      	add	r3, r1
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	817b      	strh	r3, [r7, #10]
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8001fa2:	7eba      	ldrb	r2, [r7, #26]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	461a      	mov	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	7e79      	ldrb	r1, [r7, #25]
 8001fb4:	79fa      	ldrb	r2, [r7, #7]
 8001fb6:	3a01      	subs	r2, #1
 8001fb8:	7db8      	ldrb	r0, [r7, #22]
 8001fba:	fb00 f202 	mul.w	r2, r0, r2
 8001fbe:	440a      	add	r2, r1
 8001fc0:	8979      	ldrh	r1, [r7, #10]
 8001fc2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;
 8001fc6:	7fbb      	ldrb	r3, [r7, #30]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001fcc:	7e7b      	ldrb	r3, [r7, #25]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	767b      	strb	r3, [r7, #25]
 8001fd2:	7e7a      	ldrb	r2, [r7, #25]
 8001fd4:	7dbb      	ldrb	r3, [r7, #22]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d3d4      	bcc.n	8001f84 <LTC6804_rdcv+0x134>
			}
			//b.iii
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];
 8001fda:	7fbb      	ldrb	r3, [r7, #30]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	7fbb      	ldrb	r3, [r7, #30]
 8001fea:	3301      	adds	r3, #1
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	440b      	add	r3, r1
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001ff8:	7ebb      	ldrb	r3, [r7, #26]
 8001ffa:	7e3a      	ldrb	r2, [r7, #24]
 8001ffc:	fb02 f303 	mul.w	r3, r2, r3
 8002000:	461a      	mov	r2, r3
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	441a      	add	r2, r3
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f9ec 	bl	80023e8 <pec15_calc>
 8002010:	4603      	mov	r3, r0
 8002012:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 8002014:	89fa      	ldrh	r2, [r7, #14]
 8002016:	89bb      	ldrh	r3, [r7, #12]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <LTC6804_rdcv+0x1d0>
			{
				pec_error = -1;
 800201c:	23ff      	movs	r3, #255	; 0xff
 800201e:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8002020:	7ebb      	ldrb	r3, [r7, #26]
 8002022:	3301      	adds	r3, #1
 8002024:	76bb      	strb	r3, [r7, #26]
 8002026:	7eba      	ldrb	r2, [r7, #26]
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3a7      	bcc.n	8001f7e <LTC6804_rdcv+0x12e>
			}
		}
	}
	free(cell_data);
 800202e:	6938      	ldr	r0, [r7, #16]
 8002030:	f009 f9a2 	bl	800b378 <free>
	//2
	return(pec_error);
 8002034:	7ffb      	ldrb	r3, [r7, #31]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3720      	adds	r7, #32
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <LTC6804_rdcv_reg>:
 *************************************************/
void LTC6804_rdcv_reg(uint8_t reg,
		uint8_t total_ic,
		uint8_t *data
)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	603a      	str	r2, [r7, #0]
 800204a:	71fb      	strb	r3, [r7, #7]
 800204c:	460b      	mov	r3, r1
 800204e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	if (reg == 1)
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d104      	bne.n	8002060 <LTC6804_rdcv_reg+0x20>
	{
		cmd[1] = 0x04;
 8002056:	2304      	movs	r3, #4
 8002058:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800205a:	2300      	movs	r3, #0
 800205c:	733b      	strb	r3, [r7, #12]
 800205e:	e016      	b.n	800208e <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 2)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d104      	bne.n	8002070 <LTC6804_rdcv_reg+0x30>
	{
		cmd[1] = 0x06;
 8002066:	2306      	movs	r3, #6
 8002068:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	733b      	strb	r3, [r7, #12]
 800206e:	e00e      	b.n	800208e <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 3)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d104      	bne.n	8002080 <LTC6804_rdcv_reg+0x40>
	{
		cmd[1] = 0x08;
 8002076:	2308      	movs	r3, #8
 8002078:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800207a:	2300      	movs	r3, #0
 800207c:	733b      	strb	r3, [r7, #12]
 800207e:	e006      	b.n	800208e <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 4)
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b04      	cmp	r3, #4
 8002084:	d103      	bne.n	800208e <LTC6804_rdcv_reg+0x4e>
	{
		cmd[1] = 0x0A;
 8002086:	230a      	movs	r3, #10
 8002088:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	733b      	strb	r3, [r7, #12]

	//2


	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800208e:	f000 f995 	bl	80023bc <wakeup_idle>

	//4
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e030      	b.n	80020fa <LTC6804_rdcv_reg+0xba>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	3b80      	subs	r3, #128	; 0x80
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	733b      	strb	r3, [r7, #12]
		temp_pec = pec15_calc(2, cmd);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	2002      	movs	r0, #2
 80020ae:	f000 f99b 	bl	80023e8 <pec15_calc>
 80020b2:	4603      	mov	r3, r0
 80020b4:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 80020b6:	8a7b      	ldrh	r3, [r7, #18]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	73bb      	strb	r3, [r7, #14]
		cmd[3] = (uint8_t)(temp_pec);
 80020c0:	8a7b      	ldrh	r3, [r7, #18]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	73fb      	strb	r3, [r7, #15]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	480f      	ldr	r0, [pc, #60]	; (800210c <LTC6804_rdcv_reg+0xcc>)
 80020ce:	f006 fe22 	bl	8008d16 <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&data[current_ic*8],8);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	461a      	mov	r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	441a      	add	r2, r3
 80020dc:	f107 000c 	add.w	r0, r7, #12
 80020e0:	2308      	movs	r3, #8
 80020e2:	2104      	movs	r1, #4
 80020e4:	f000 f9ce 	bl	8002484 <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 80020e8:	2201      	movs	r2, #1
 80020ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ee:	4807      	ldr	r0, [pc, #28]	; (800210c <LTC6804_rdcv_reg+0xcc>)
 80020f0:	f006 fe11 	bl	8008d16 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	3301      	adds	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	429a      	cmp	r2, r3
 8002100:	dbca      	blt.n	8002098 <LTC6804_rdcv_reg+0x58>
	}
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40011000 	.word	0x40011000

08002110 <LTC6804_wrcfg>:

 The function will calculate the needed PEC codes for the write data
 and then transmit data to the ICs on a stack.
 ********************************************************/
void LTC6804_wrcfg(uint8_t total_ic,uint8_t config[][6])
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 800211c:	2306      	movs	r3, #6
 800211e:	75fb      	strb	r3, [r7, #23]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3304      	adds	r3, #4
 8002128:	75bb      	strb	r3, [r7, #22]
	uint8_t *cmd;
	uint16_t temp_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 800212a:	7dbb      	ldrb	r3, [r7, #22]
 800212c:	4618      	mov	r0, r3
 800212e:	f009 f91b 	bl	800b368 <malloc>
 8002132:	4603      	mov	r3, r0
 8002134:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	3301      	adds	r3, #1
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x3d;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	3302      	adds	r3, #2
 8002148:	223d      	movs	r2, #61	; 0x3d
 800214a:	701a      	strb	r2, [r3, #0]
	cmd[3] = 0x6e;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	3303      	adds	r3, #3
 8002150:	226e      	movs	r2, #110	; 0x6e
 8002152:	701a      	strb	r2, [r3, #0]

	//2
	cmd_index = 4;
 8002154:	2304      	movs	r3, #4
 8002156:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 8002158:	2300      	movs	r3, #0
 800215a:	77bb      	strb	r3, [r7, #30]
 800215c:	e03f      	b.n	80021de <LTC6804_wrcfg+0xce>
	{
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 800215e:	2300      	movs	r3, #0
 8002160:	777b      	strb	r3, [r7, #29]
 8002162:	e013      	b.n	800218c <LTC6804_wrcfg+0x7c>
		{
			// i is the byte counter

			cmd[cmd_index] = config[current_ic][current_byte];    //adding the config data to the array to be sent
 8002164:	7fba      	ldrb	r2, [r7, #30]
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	461a      	mov	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	1899      	adds	r1, r3, r2
 8002174:	7f7a      	ldrb	r2, [r7, #29]
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	6938      	ldr	r0, [r7, #16]
 800217a:	4403      	add	r3, r0
 800217c:	5c8a      	ldrb	r2, [r1, r2]
 800217e:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002180:	7ffb      	ldrb	r3, [r7, #31]
 8002182:	3301      	adds	r3, #1
 8002184:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 8002186:	7f7b      	ldrb	r3, [r7, #29]
 8002188:	3301      	adds	r3, #1
 800218a:	777b      	strb	r3, [r7, #29]
 800218c:	7f7a      	ldrb	r2, [r7, #29]
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	429a      	cmp	r2, r3
 8002192:	d3e7      	bcc.n	8002164 <LTC6804_wrcfg+0x54>
		}
		//3
		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);// calculating the PEC for each board
 8002194:	7fba      	ldrb	r2, [r7, #30]
 8002196:	4613      	mov	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	461a      	mov	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	461a      	mov	r2, r3
 80021a6:	7dfb      	ldrb	r3, [r7, #23]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 f91c 	bl	80023e8 <pec15_calc>
 80021b0:	4603      	mov	r3, r0
 80021b2:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(temp_pec >> 8);
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b299      	uxth	r1, r3
 80021ba:	7ffb      	ldrb	r3, [r7, #31]
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4413      	add	r3, r2
 80021c0:	b2ca      	uxtb	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)temp_pec;
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
 80021c6:	3301      	adds	r3, #1
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4413      	add	r3, r2
 80021cc:	89fa      	ldrh	r2, [r7, #14]
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 80021d2:	7ffb      	ldrb	r3, [r7, #31]
 80021d4:	3302      	adds	r3, #2
 80021d6:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 80021d8:	7fbb      	ldrb	r3, [r7, #30]
 80021da:	3301      	adds	r3, #1
 80021dc:	77bb      	strb	r3, [r7, #30]
 80021de:	7fba      	ldrb	r2, [r7, #30]
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d3bb      	bcc.n	800215e <LTC6804_wrcfg+0x4e>
	}

	//4
	wakeup_idle ();                                //This will guarantee that the LTC6804 isoSPI port is awake.This command can be removed.
 80021e6:	f000 f8e9 	bl	80023bc <wakeup_idle>
	//5
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	e036      	b.n	800225e <LTC6804_wrcfg+0x14e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3b80      	subs	r3, #128	; 0x80
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	701a      	strb	r2, [r3, #0]
		temp_pec = pec15_calc(2, cmd);
 8002200:	6939      	ldr	r1, [r7, #16]
 8002202:	2002      	movs	r0, #2
 8002204:	f000 f8f0 	bl	80023e8 <pec15_calc>
 8002208:	4603      	mov	r3, r0
 800220a:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29a      	uxth	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	3302      	adds	r3, #2
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
		cmd[3] = (uint8_t)(temp_pec);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	3303      	adds	r3, #3
 800221e:	89fa      	ldrh	r2, [r7, #14]
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222a:	4812      	ldr	r0, [pc, #72]	; (8002274 <LTC6804_wrcfg+0x164>)
 800222c:	f006 fd73 	bl	8008d16 <HAL_GPIO_WritePin>
		spi_write_array(4,cmd);
 8002230:	6939      	ldr	r1, [r7, #16]
 8002232:	2004      	movs	r0, #4
 8002234:	f000 f90a 	bl	800244c <spi_write_array>
		spi_write_array(8,&cmd[4+(8*current_ic)]);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	3304      	adds	r3, #4
 800223e:	461a      	mov	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	4619      	mov	r1, r3
 8002246:	2008      	movs	r0, #8
 8002248:	f000 f900 	bl	800244c <spi_write_array>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 800224c:	2201      	movs	r2, #1
 800224e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002252:	4808      	ldr	r0, [pc, #32]	; (8002274 <LTC6804_wrcfg+0x164>)
 8002254:	f006 fd5f 	bl	8008d16 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	3301      	adds	r3, #1
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	429a      	cmp	r2, r3
 8002264:	dbc4      	blt.n	80021f0 <LTC6804_wrcfg+0xe0>
	}
	free(cmd);
 8002266:	6938      	ldr	r0, [r7, #16]
 8002268:	f009 f886 	bl	800b378 <free>
}
 800226c:	bf00      	nop
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40011000 	.word	0x40011000

08002278 <LTC6804_rdstata>:
  0: Data read back has matching PEC

  -1: Data read back has incorrect PEC
 ********************************************************/
int8_t LTC6804_rdstata(uint8_t total_ic, uint8_t r_config[][8])
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	6039      	str	r1, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 8;
 8002284:	2308      	movs	r3, #8
 8002286:	757b      	strb	r3, [r7, #21]

	uint8_t cmd[4];
	uint8_t *rx_data;
	int8_t pec_error = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
	uint16_t data_pec;
	uint16_t received_pec;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 800228c:	79fb      	ldrb	r3, [r7, #7]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4618      	mov	r0, r3
 8002292:	f009 f869 	bl	800b368 <malloc>
 8002296:	4603      	mov	r3, r0
 8002298:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 800229a:	2300      	movs	r3, #0
 800229c:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x10;
 800229e:	2310      	movs	r3, #16
 80022a0:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 80022a2:	232b      	movs	r3, #43	; 0x2b
 80022a4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0A;
 80022a6:	230a      	movs	r3, #10
 80022a8:	72fb      	strb	r3, [r7, #11]

	//2
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 80022aa:	f000 f887 	bl	80023bc <wakeup_idle>
	//3
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e030      	b.n	8002316 <LTC6804_rdstata+0x9e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3b80      	subs	r3, #128	; 0x80
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	723b      	strb	r3, [r7, #8]
		data_pec = pec15_calc(2, cmd);
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	2002      	movs	r0, #2
 80022ca:	f000 f88d 	bl	80023e8 <pec15_calc>
 80022ce:	4603      	mov	r3, r0
 80022d0:	81bb      	strh	r3, [r7, #12]
		cmd[2] = (uint8_t)(data_pec >> 8);
 80022d2:	89bb      	ldrh	r3, [r7, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(data_pec);
 80022dc:	89bb      	ldrh	r3, [r7, #12]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	72fb      	strb	r3, [r7, #11]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e8:	4833      	ldr	r0, [pc, #204]	; (80023b8 <LTC6804_rdstata+0x140>)
 80022ea:	f006 fd14 	bl	8008d16 <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&rx_data[current_ic*8],8);
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	461a      	mov	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	441a      	add	r2, r3
 80022f8:	f107 0008 	add.w	r0, r7, #8
 80022fc:	2308      	movs	r3, #8
 80022fe:	2104      	movs	r1, #4
 8002300:	f000 f8c0 	bl	8002484 <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800230a:	482b      	ldr	r0, [pc, #172]	; (80023b8 <LTC6804_rdstata+0x140>)
 800230c:	f006 fd03 	bl	8008d16 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	3301      	adds	r3, #1
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	429a      	cmp	r2, r3
 800231c:	dbca      	blt.n	80022b4 <LTC6804_rdstata+0x3c>
	}

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
 8002322:	e03c      	b.n	800239e <LTC6804_rdstata+0x126>
	{
		//4.a
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8002324:	2300      	movs	r3, #0
 8002326:	75bb      	strb	r3, [r7, #22]
 8002328:	e012      	b.n	8002350 <LTC6804_rdstata+0xd8>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 800232a:	7dba      	ldrb	r2, [r7, #22]
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	7d79      	ldrb	r1, [r7, #21]
 8002330:	fb01 f303 	mul.w	r3, r1, r3
 8002334:	4413      	add	r3, r2
 8002336:	461a      	mov	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1899      	adds	r1, r3, r2
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	441a      	add	r2, r3
 8002344:	7dbb      	ldrb	r3, [r7, #22]
 8002346:	7809      	ldrb	r1, [r1, #0]
 8002348:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	3301      	adds	r3, #1
 800234e:	75bb      	strb	r3, [r7, #22]
 8002350:	7dba      	ldrb	r2, [r7, #22]
 8002352:	7d7b      	ldrb	r3, [r7, #21]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3e8      	bcc.n	800232a <LTC6804_rdstata+0xb2>
		}
		//4.b
		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	4413      	add	r3, r2
 8002360:	799b      	ldrb	r3, [r3, #6]
 8002362:	b29b      	uxth	r3, r3
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	b29a      	uxth	r2, r3
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	6839      	ldr	r1, [r7, #0]
 800236e:	440b      	add	r3, r1
 8002370:	79db      	ldrb	r3, [r3, #7]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4413      	add	r3, r2
 8002376:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4619      	mov	r1, r3
 8002382:	2006      	movs	r0, #6
 8002384:	f000 f830 	bl	80023e8 <pec15_calc>
 8002388:	4603      	mov	r3, r0
 800238a:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 800238c:	89fa      	ldrh	r2, [r7, #14]
 800238e:	89bb      	ldrh	r3, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <LTC6804_rdstata+0x120>
		{
			pec_error = -1;
 8002394:	23ff      	movs	r3, #255	; 0xff
 8002396:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	3301      	adds	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
 800239e:	7dfa      	ldrb	r2, [r7, #23]
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d3be      	bcc.n	8002324 <LTC6804_rdstata+0xac>
		}
	}
	free(rx_data);
 80023a6:	6938      	ldr	r0, [r7, #16]
 80023a8:	f008 ffe6 	bl	800b378 <free>
	//5
	return(pec_error);
 80023ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40011000 	.word	0x40011000

080023bc <wakeup_idle>:
/*!****************************************************
  \brief Wake isoSPI up from idle state
 Generic wakeup commannd to wake isoSPI up out of idle
 *****************************************************/
void wakeup_idle()
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 80023c0:	2200      	movs	r2, #0
 80023c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023c6:	4807      	ldr	r0, [pc, #28]	; (80023e4 <wakeup_idle+0x28>)
 80023c8:	f006 fca5 	bl	8008d16 <HAL_GPIO_WritePin>
	HAL_Delay(1); //Guarantees the isoSPI will be in ready mode
 80023cc:	2001      	movs	r0, #1
 80023ce:	f004 fbf5 	bl	8006bbc <HAL_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <wakeup_idle+0x28>)
 80023da:	f006 fc9c 	bl	8008d16 <HAL_GPIO_WritePin>
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40011000 	.word	0x40011000

080023e8 <pec15_calc>:


@return  The calculated pec15 as an unsigned int16_t
 ***********************************************************/
uint16_t pec15_calc(uint8_t len, uint8_t *data)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	6039      	str	r1, [r7, #0]
 80023f2:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 80023f4:	2310      	movs	r3, #16
 80023f6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80023f8:	2300      	movs	r3, #0
 80023fa:	737b      	strb	r3, [r7, #13]
 80023fc:	e018      	b.n	8002430 <pec15_calc+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	09db      	lsrs	r3, r3, #7
 8002402:	b29a      	uxth	r2, r3
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	440b      	add	r3, r1
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	4053      	eors	r3, r2
 8002410:	b29b      	uxth	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	b29a      	uxth	r2, r3
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	490a      	ldr	r1, [pc, #40]	; (8002448 <pec15_calc+0x60>)
 8002420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002424:	b29b      	uxth	r3, r3
 8002426:	4053      	eors	r3, r2
 8002428:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 800242a:	7b7b      	ldrb	r3, [r7, #13]
 800242c:	3301      	adds	r3, #1
 800242e:	737b      	strb	r3, [r7, #13]
 8002430:	7b7a      	ldrb	r2, [r7, #13]
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	429a      	cmp	r2, r3
 8002436:	d3e2      	bcc.n	80023fe <pec15_calc+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8002438:	89fb      	ldrh	r3, [r7, #14]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	b29b      	uxth	r3, r3
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	08010028 	.word	0x08010028

0800244c <spi_write_array>:

 */
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++)
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e009      	b.n	8002472 <spi_write_array+0x26>
	{
		ltc6804_Write8((char)data[i]);
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fbbc 	bl	8001be4 <ltc6804_Write8>
	for (uint8_t i = 0; i < len; i++)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	3301      	adds	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	429a      	cmp	r2, r3
 8002478:	d3f1      	bcc.n	800245e <spi_write_array+0x12>
	}
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data arry
		uint8_t *rx_data,//Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	460b      	mov	r3, r1
 8002492:	72fb      	strb	r3, [r7, #11]
 8002494:	4613      	mov	r3, r2
 8002496:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < tx_len; i++)
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]
 800249c:	e009      	b.n	80024b2 <spi_write_read+0x2e>
	{
		ltc6804_Write8(tx_Data[i]);
 800249e:	7dfb      	ldrb	r3, [r7, #23]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fb9c 	bl	8001be4 <ltc6804_Write8>
	for (uint8_t i = 0; i < tx_len; i++)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	3301      	adds	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
 80024b2:	7dfa      	ldrb	r2, [r7, #23]
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d3f1      	bcc.n	800249e <spi_write_read+0x1a>

	}

	for (uint8_t i = 0; i < rx_len; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	75bb      	strb	r3, [r7, #22]
 80024be:	e00a      	b.n	80024d6 <spi_write_read+0x52>
	{
		rx_data[i] = (uint8_t)ltc6804_Read8(0xFF);
 80024c0:	7dbb      	ldrb	r3, [r7, #22]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	18d4      	adds	r4, r2, r3
 80024c6:	20ff      	movs	r0, #255	; 0xff
 80024c8:	f7ff fbcc 	bl	8001c64 <ltc6804_Read8>
 80024cc:	4603      	mov	r3, r0
 80024ce:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < rx_len; i++)
 80024d0:	7dbb      	ldrb	r3, [r7, #22]
 80024d2:	3301      	adds	r3, #1
 80024d4:	75bb      	strb	r3, [r7, #22]
 80024d6:	7dba      	ldrb	r2, [r7, #22]
 80024d8:	7abb      	ldrb	r3, [r7, #10]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d3f0      	bcc.n	80024c0 <spi_write_read+0x3c>
	}

}
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}

080024e8 <read_voltage_percell>:

void read_voltage_percell(void)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
	uint16_t	cellvoltage_16bit[1][12];

	LTC6804_adcv();
 80024ee:	f7ff fc49 	bl	8001d84 <LTC6804_adcv>
	HAL_Delay(300);
 80024f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024f6:	f004 fb61 	bl	8006bbc <HAL_Delay>

	LTC6804_rdcv(0, 1, cellvoltage_16bit);
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	461a      	mov	r2, r3
 80024fe:	2101      	movs	r1, #1
 8002500:	2000      	movs	r0, #0
 8002502:	f7ff fca5 	bl	8001e50 <LTC6804_rdcv>
	HAL_Delay(10);
 8002506:	200a      	movs	r0, #10
 8002508:	f004 fb58 	bl	8006bbc <HAL_Delay>
	state = 1;
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <read_voltage_percell+0xc0>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
	for(uint8_t ik=0;ik<11;ik++) {
 8002512:	2300      	movs	r3, #0
 8002514:	77fb      	strb	r3, [r7, #31]
 8002516:	e03b      	b.n	8002590 <read_voltage_percell+0xa8>
		if(ik >= 5)
 8002518:	7ffb      	ldrb	r3, [r7, #31]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d91b      	bls.n	8002556 <read_voltage_percell+0x6e>
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik+1] / 10000.0);
 800251e:	7ffb      	ldrb	r3, [r7, #31]
 8002520:	3301      	adds	r3, #1
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	f107 0220 	add.w	r2, r7, #32
 8002528:	4413      	add	r3, r2
 800252a:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd ffd4 	bl	80004dc <__aeabi_i2d>
 8002534:	a31a      	add	r3, pc, #104	; (adr r3, 80025a0 <read_voltage_percell+0xb8>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe f963 	bl	8000804 <__aeabi_ddiv>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	7ffc      	ldrb	r4, [r7, #31]
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fb2a 	bl	8000ba0 <__aeabi_d2f>
 800254c:	4603      	mov	r3, r0
 800254e:	4a17      	ldr	r2, [pc, #92]	; (80025ac <read_voltage_percell+0xc4>)
 8002550:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002554:	e019      	b.n	800258a <read_voltage_percell+0xa2>
		else
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik] / 10000.0);
 8002556:	7ffb      	ldrb	r3, [r7, #31]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	f107 0220 	add.w	r2, r7, #32
 800255e:	4413      	add	r3, r2
 8002560:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ffb9 	bl	80004dc <__aeabi_i2d>
 800256a:	a30d      	add	r3, pc, #52	; (adr r3, 80025a0 <read_voltage_percell+0xb8>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe f948 	bl	8000804 <__aeabi_ddiv>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	7ffc      	ldrb	r4, [r7, #31]
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f7fe fb0f 	bl	8000ba0 <__aeabi_d2f>
 8002582:	4603      	mov	r3, r0
 8002584:	4a09      	ldr	r2, [pc, #36]	; (80025ac <read_voltage_percell+0xc4>)
 8002586:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t ik=0;ik<11;ik++) {
 800258a:	7ffb      	ldrb	r3, [r7, #31]
 800258c:	3301      	adds	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
 8002590:	7ffb      	ldrb	r3, [r7, #31]
 8002592:	2b0a      	cmp	r3, #10
 8002594:	d9c0      	bls.n	8002518 <read_voltage_percell+0x30>
	}
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	3724      	adds	r7, #36	; 0x24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd90      	pop	{r4, r7, pc}
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40c38800 	.word	0x40c38800
 80025a8:	200002e0 	.word	0x200002e0
 80025ac:	200003c0 	.word	0x200003c0

080025b0 <read_sumvoltage>:

void read_sumvoltage(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	LTC6804_adstat();
 80025b4:	f7ff fc18 	bl	8001de8 <LTC6804_adstat>
	HAL_Delay(200);
 80025b8:	20c8      	movs	r0, #200	; 0xc8
 80025ba:	f004 faff 	bl	8006bbc <HAL_Delay>

	LTC6804_rdstata(1, rd_config);
 80025be:	491a      	ldr	r1, [pc, #104]	; (8002628 <read_sumvoltage+0x78>)
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff fe59 	bl	8002278 <LTC6804_rdstata>
	HAL_Delay(10);
 80025c6:	200a      	movs	r0, #10
 80025c8:	f004 faf8 	bl	8006bbc <HAL_Delay>

	sum_voltage = (rd_config[0][0] | (rd_config[0][1] << 8)) * 20 * 0.1 / 1000.0;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <read_sumvoltage+0x78>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <read_sumvoltage+0x78>)
 80025d4:	785b      	ldrb	r3, [r3, #1]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	431a      	orrs	r2, r3
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff7a 	bl	80004dc <__aeabi_i2d>
 80025e8:	a30d      	add	r3, pc, #52	; (adr r3, 8002620 <read_sumvoltage+0x70>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f7fd ffdf 	bl	80005b0 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <read_sumvoltage+0x7c>)
 8002600:	f7fe f900 	bl	8000804 <__aeabi_ddiv>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f7fe fac8 	bl	8000ba0 <__aeabi_d2f>
 8002610:	4603      	mov	r3, r0
 8002612:	4a07      	ldr	r2, [pc, #28]	; (8002630 <read_sumvoltage+0x80>)
 8002614:	6013      	str	r3, [r2, #0]
	state=2;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <read_sumvoltage+0x84>)
 8002618:	2202      	movs	r2, #2
 800261a:	701a      	strb	r2, [r3, #0]
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	9999999a 	.word	0x9999999a
 8002624:	3fb99999 	.word	0x3fb99999
 8002628:	2000034c 	.word	0x2000034c
 800262c:	408f4000 	.word	0x408f4000
 8002630:	2000041c 	.word	0x2000041c
 8002634:	200002e0 	.word	0x200002e0

08002638 <get_balance_status>:


uint16_t get_balance_status(float Cell_Voltage_10data[10])
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	uint16_t balance_status;
	Cell_Voltage_Lowest=4.2;
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <get_balance_status+0x148>)
 8002642:	4a50      	ldr	r2, [pc, #320]	; (8002784 <get_balance_status+0x14c>)
 8002644:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 8002646:	2300      	movs	r3, #0
 8002648:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_dat;
	float buffer_imbalance;

	for(int ik=0;ik<10;ik++) {
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e017      	b.n	8002680 <get_balance_status+0x48>
		if(Cell_Voltage_10data[ik]<Cell_Voltage_Lowest) Cell_Voltage_Lowest=Cell_Voltage_10data[ik];
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a49      	ldr	r2, [pc, #292]	; (8002780 <get_balance_status+0x148>)
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fd99 	bl	8001198 <__aeabi_fcmplt>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d006      	beq.n	800267a <get_balance_status+0x42>
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a42      	ldr	r2, [pc, #264]	; (8002780 <get_balance_status+0x148>)
 8002678:	6013      	str	r3, [r2, #0]
	for(int ik=0;ik<10;ik++) {
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b09      	cmp	r3, #9
 8002684:	dde4      	ble.n	8002650 <get_balance_status+0x18>
	}

	for(int ik=0;ik<10;ik++) {
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e047      	b.n	800271c <get_balance_status+0xe4>
		delta_vbatt[ik] = Cell_Voltage_10data[ik] - Cell_Voltage_Lowest;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <get_balance_status+0x148>)
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fad3 	bl	8000c48 <__aeabi_fsub>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4619      	mov	r1, r3
 80026a6:	4a38      	ldr	r2, [pc, #224]	; (8002788 <get_balance_status+0x150>)
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		buffer_imbalance+=delta_vbatt[ik];
 80026ae:	4a36      	ldr	r2, [pc, #216]	; (8002788 <get_balance_status+0x150>)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	4619      	mov	r1, r3
 80026b8:	69b8      	ldr	r0, [r7, #24]
 80026ba:	f7fe fac7 	bl	8000c4c <__addsf3>
 80026be:	4603      	mov	r3, r0
 80026c0:	61bb      	str	r3, [r7, #24]

		if(delta_vbatt[ik]> 0.025 && Cell_Voltage_10data[ik]>VCELL_BALANCE_PERMITTED) {
 80026c2:	4a31      	ldr	r2, [pc, #196]	; (8002788 <get_balance_status+0x150>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff18 	bl	8000500 <__aeabi_f2d>
 80026d0:	a327      	add	r3, pc, #156	; (adr r3, 8002770 <get_balance_status+0x138>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fe f9fb 	bl	8000ad0 <__aeabi_dcmpgt>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01a      	beq.n	8002716 <get_balance_status+0xde>
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fd ff08 	bl	8000500 <__aeabi_f2d>
 80026f0:	a321      	add	r3, pc, #132	; (adr r3, 8002778 <get_balance_status+0x140>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fe f9eb 	bl	8000ad0 <__aeabi_dcmpgt>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <get_balance_status+0xde>
			temp_dat = 0x01;
 8002700:	2301      	movs	r3, #1
 8002702:	81fb      	strh	r3, [r7, #14]
			temp_dat = temp_dat << ik;
 8002704:	89fa      	ldrh	r2, [r7, #14]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	81fb      	strh	r3, [r7, #14]
			balance_status= balance_status+temp_dat;
 800270e:	8bfa      	ldrh	r2, [r7, #30]
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	4413      	add	r3, r2
 8002714:	83fb      	strh	r3, [r7, #30]
	for(int ik=0;ik<10;ik++) {
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	3301      	adds	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	2b09      	cmp	r3, #9
 8002720:	ddb4      	ble.n	800268c <get_balance_status+0x54>
		}
	}
	persen_imbalance=buffer_imbalance*100/9.0/1.2;
 8002722:	491a      	ldr	r1, [pc, #104]	; (800278c <get_balance_status+0x154>)
 8002724:	69b8      	ldr	r0, [r7, #24]
 8002726:	f7fe fb99 	bl	8000e5c <__aeabi_fmul>
 800272a:	4603      	mov	r3, r0
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fee7 	bl	8000500 <__aeabi_f2d>
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <get_balance_status+0x158>)
 8002738:	f7fe f864 	bl	8000804 <__aeabi_ddiv>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <get_balance_status+0x15c>)
 800274a:	f7fe f85b 	bl	8000804 <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe fa23 	bl	8000ba0 <__aeabi_d2f>
 800275a:	4603      	mov	r3, r0
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <get_balance_status+0x160>)
 800275e:	6013      	str	r3, [r2, #0]
	return(balance_status);
 8002760:	8bfb      	ldrh	r3, [r7, #30]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	f3af 8000 	nop.w
 8002770:	9999999a 	.word	0x9999999a
 8002774:	3f999999 	.word	0x3f999999
 8002778:	66666666 	.word	0x66666666
 800277c:	400a6666 	.word	0x400a6666
 8002780:	20000428 	.word	0x20000428
 8002784:	40866666 	.word	0x40866666
 8002788:	200003f4 	.word	0x200003f4
 800278c:	42c80000 	.word	0x42c80000
 8002790:	40220000 	.word	0x40220000
 8002794:	3ff33333 	.word	0x3ff33333
 8002798:	20000330 	.word	0x20000330

0800279c <LTC681x_balance_cell>:

void LTC681x_balance_cell(uint16_t cell_to_balance)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
//	uint8_t	 wr_config[1][6];
	uint8_t  cell_balance_status;
	uint16_t temp_var;
	uint8_t lm;

	wr_config[0][4] = 0;
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <LTC681x_balance_cell+0xa4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	711a      	strb	r2, [r3, #4]
	wr_config[0][5] = 0;
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <LTC681x_balance_cell+0xa4>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	715a      	strb	r2, [r3, #5]

	for(lm=0;lm<10;lm++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	737b      	strb	r3, [r7, #13]
 80027b6:	e035      	b.n	8002824 <LTC681x_balance_cell+0x88>
	{
		cell_balance_status = cell_to_balance >> lm & 0x01;
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	fa42 f303 	asr.w	r3, r2, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	733b      	strb	r3, [r7, #12]
		if(lm < 8)
 80027c8:	7b7b      	ldrb	r3, [r7, #13]
 80027ca:	2b07      	cmp	r3, #7
 80027cc:	d817      	bhi.n	80027fe <LTC681x_balance_cell+0x62>
		{
			if(lm < 5)
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d805      	bhi.n	80027e0 <LTC681x_balance_cell+0x44>
				temp_var = cell_balance_status << lm;
 80027d4:	7b3a      	ldrb	r2, [r7, #12]
 80027d6:	7b7b      	ldrb	r3, [r7, #13]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	81fb      	strh	r3, [r7, #14]
 80027de:	e005      	b.n	80027ec <LTC681x_balance_cell+0x50>
			else
				temp_var = cell_balance_status << (lm+1);
 80027e0:	7b3a      	ldrb	r2, [r7, #12]
 80027e2:	7b7b      	ldrb	r3, [r7, #13]
 80027e4:	3301      	adds	r3, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	81fb      	strh	r3, [r7, #14]

			wr_config[0][4] += temp_var;
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <LTC681x_balance_cell+0xa4>)
 80027ee:	791a      	ldrb	r2, [r3, #4]
 80027f0:	89fb      	ldrh	r3, [r7, #14]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <LTC681x_balance_cell+0xa4>)
 80027fa:	711a      	strb	r2, [r3, #4]
 80027fc:	e00d      	b.n	800281a <LTC681x_balance_cell+0x7e>
		}
		else
		{
			temp_var = cell_balance_status << (lm-8);
 80027fe:	7b3a      	ldrb	r2, [r7, #12]
 8002800:	7b7b      	ldrb	r3, [r7, #13]
 8002802:	3b08      	subs	r3, #8
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	81fb      	strh	r3, [r7, #14]
			wr_config[0][5] += temp_var;
 800280a:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <LTC681x_balance_cell+0xa4>)
 800280c:	795a      	ldrb	r2, [r3, #5]
 800280e:	89fb      	ldrh	r3, [r7, #14]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4413      	add	r3, r2
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <LTC681x_balance_cell+0xa4>)
 8002818:	715a      	strb	r2, [r3, #5]
		}

		temp_var=0;
 800281a:	2300      	movs	r3, #0
 800281c:	81fb      	strh	r3, [r7, #14]
	for(lm=0;lm<10;lm++)
 800281e:	7b7b      	ldrb	r3, [r7, #13]
 8002820:	3301      	adds	r3, #1
 8002822:	737b      	strb	r3, [r7, #13]
 8002824:	7b7b      	ldrb	r3, [r7, #13]
 8002826:	2b09      	cmp	r3, #9
 8002828:	d9c6      	bls.n	80027b8 <LTC681x_balance_cell+0x1c>
	}
	LTC6804_wrcfg(1, wr_config);
 800282a:	4905      	ldr	r1, [pc, #20]	; (8002840 <LTC681x_balance_cell+0xa4>)
 800282c:	2001      	movs	r0, #1
 800282e:	f7ff fc6f 	bl	8002110 <LTC6804_wrcfg>
	HAL_Delay(10);
 8002832:	200a      	movs	r0, #10
 8002834:	f004 f9c2 	bl	8006bbc <HAL_Delay>
}
 8002838:	bf00      	nop
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200003e8 	.word	0x200003e8

08002844 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <MX_ADC1_Init+0xe8>)
 8002856:	4a36      	ldr	r2, [pc, #216]	; (8002930 <MX_ADC1_Init+0xec>)
 8002858:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <MX_ADC1_Init+0xe8>)
 800285c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002860:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <MX_ADC1_Init+0xe8>)
 8002864:	2201      	movs	r2, #1
 8002866:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <MX_ADC1_Init+0xe8>)
 800286a:	2200      	movs	r2, #0
 800286c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <MX_ADC1_Init+0xe8>)
 8002870:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <MX_ADC1_Init+0xe8>)
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 800287c:	4b2b      	ldr	r3, [pc, #172]	; (800292c <MX_ADC1_Init+0xe8>)
 800287e:	2205      	movs	r2, #5
 8002880:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002882:	482a      	ldr	r0, [pc, #168]	; (800292c <MX_ADC1_Init+0xe8>)
 8002884:	f004 f9be 	bl	8006c04 <HAL_ADC_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800288e:	f001 f9d9 	bl	8003c44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002892:	2301      	movs	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002896:	2301      	movs	r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800289a:	2307      	movs	r3, #7
 800289c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4822      	ldr	r0, [pc, #136]	; (800292c <MX_ADC1_Init+0xe8>)
 80028a4:	f004 fb92 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80028ae:	f001 f9c9 	bl	8003c44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80028b2:	2302      	movs	r3, #2
 80028b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028b6:	2302      	movs	r3, #2
 80028b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	481b      	ldr	r0, [pc, #108]	; (800292c <MX_ADC1_Init+0xe8>)
 80028c0:	f004 fb84 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80028ca:	f001 f9bb 	bl	8003c44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80028ce:	2303      	movs	r3, #3
 80028d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028d2:	2303      	movs	r3, #3
 80028d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4814      	ldr	r0, [pc, #80]	; (800292c <MX_ADC1_Init+0xe8>)
 80028dc:	f004 fb76 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80028e6:	f001 f9ad 	bl	8003c44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028ea:	2304      	movs	r3, #4
 80028ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028ee:	2304      	movs	r3, #4
 80028f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	480d      	ldr	r0, [pc, #52]	; (800292c <MX_ADC1_Init+0xe8>)
 80028f8:	f004 fb68 	bl	8006fcc <HAL_ADC_ConfigChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002902:	f001 f99f 	bl	8003c44 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002906:	2305      	movs	r3, #5
 8002908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800290a:	2305      	movs	r3, #5
 800290c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	4619      	mov	r1, r3
 8002912:	4806      	ldr	r0, [pc, #24]	; (800292c <MX_ADC1_Init+0xe8>)
 8002914:	f004 fb5a 	bl	8006fcc <HAL_ADC_ConfigChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800291e:	f001 f991 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000042c 	.word	0x2000042c
 8002930:	40012400 	.word	0x40012400

08002934 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0310 	add.w	r3, r7, #16
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a28      	ldr	r2, [pc, #160]	; (80029f0 <HAL_ADC_MspInit+0xbc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d149      	bne.n	80029e8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_ADC_MspInit+0xc0>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_ADC_MspInit+0xc0>)
 800295a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_ADC_MspInit+0xc0>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <HAL_ADC_MspInit+0xc0>)
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	4a20      	ldr	r2, [pc, #128]	; (80029f4 <HAL_ADC_MspInit+0xc0>)
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	6193      	str	r3, [r2, #24]
 8002978:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <HAL_ADC_MspInit+0xc0>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8002984:	233e      	movs	r3, #62	; 0x3e
 8002986:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002988:	2303      	movs	r3, #3
 800298a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	4619      	mov	r1, r3
 8002992:	4819      	ldr	r0, [pc, #100]	; (80029f8 <HAL_ADC_MspInit+0xc4>)
 8002994:	f006 f814 	bl	80089c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_ADC_MspInit+0xcc>)
 800299c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029c0:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029c2:	2220      	movs	r2, #32
 80029c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029cc:	480b      	ldr	r0, [pc, #44]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029ce:	f005 fcb7 	bl	8008340 <HAL_DMA_Init>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80029d8:	f001 f934 	bl	8003c44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029e0:	621a      	str	r2, [r3, #32]
 80029e2:	4a06      	ldr	r2, [pc, #24]	; (80029fc <HAL_ADC_MspInit+0xc8>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029e8:	bf00      	nop
 80029ea:	3720      	adds	r7, #32
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40012400 	.word	0x40012400
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40010800 	.word	0x40010800
 80029fc:	2000045c 	.word	0x2000045c
 8002a00:	40020008 	.word	0x40020008

08002a04 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <MX_CAN_Init+0x68>)
 8002a0c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a10:	2208      	movs	r2, #8
 8002a12:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a22:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002a26:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a2e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a54:	4804      	ldr	r0, [pc, #16]	; (8002a68 <MX_CAN_Init+0x64>)
 8002a56:	f004 fcb2 	bl	80073be <HAL_CAN_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002a60:	f001 f8f0 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	200004bc 	.word	0x200004bc
 8002a6c:	40006400 	.word	0x40006400

08002a70 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <HAL_CAN_MspInit+0xc0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d14b      	bne.n	8002b28 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a90:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_CAN_MspInit+0xc4>)
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <HAL_CAN_MspInit+0xc4>)
 8002a96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	61d3      	str	r3, [r2, #28]
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_CAN_MspInit+0xc4>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa8:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_CAN_MspInit+0xc4>)
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_CAN_MspInit+0xc4>)
 8002aae:	f043 0308 	orr.w	r3, r3, #8
 8002ab2:	6193      	str	r3, [r2, #24]
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <HAL_CAN_MspInit+0xc4>)
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4818      	ldr	r0, [pc, #96]	; (8002b38 <HAL_CAN_MspInit+0xc8>)
 8002ad6:	f005 ff73 	bl	80089c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 0314 	add.w	r3, r7, #20
 8002aec:	4619      	mov	r1, r3
 8002aee:	4812      	ldr	r0, [pc, #72]	; (8002b38 <HAL_CAN_MspInit+0xc8>)
 8002af0:	f005 ff66 	bl	80089c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_CAN_MspInit+0xcc>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_CAN_MspInit+0xcc>)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	2014      	movs	r0, #20
 8002b1e:	f005 fbd8 	bl	80082d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002b22:	2014      	movs	r0, #20
 8002b24:	f005 fbf1 	bl	800830a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40006400 	.word	0x40006400
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010c00 	.word	0x40010c00
 8002b3c:	40010000 	.word	0x40010000

08002b40 <CANTX_BattParameter>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CANTX_BattParameter() {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;

	Batt_voltage.m_uint16_t	= VBATT*100;
 8002b46:	4b84      	ldr	r3, [pc, #528]	; (8002d58 <CANTX_BattParameter+0x218>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4984      	ldr	r1, [pc, #528]	; (8002d5c <CANTX_BattParameter+0x21c>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe f985 	bl	8000e5c <__aeabi_fmul>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fb6d 	bl	8001234 <__aeabi_f2uiz>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	4b80      	ldr	r3, [pc, #512]	; (8002d60 <CANTX_BattParameter+0x220>)
 8002b60:	801a      	strh	r2, [r3, #0]
	Batt_current.m_uint16_t	= fabs(IBATT)*10;
 8002b62:	4b80      	ldr	r3, [pc, #512]	; (8002d64 <CANTX_BattParameter+0x224>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fcc8 	bl	8000500 <__aeabi_f2d>
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <CANTX_BattParameter+0x228>)
 8002b76:	f7fd fd1b 	bl	80005b0 <__aeabi_dmul>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ffed 	bl	8000b60 <__aeabi_d2uiz>
 8002b86:	4603      	mov	r3, r0
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <CANTX_BattParameter+0x22c>)
 8002b8c:	801a      	strh	r2, [r3, #0]
	Batt_SOC.m_uint16_t		= (int)Pack_SOC;
 8002b8e:	4b78      	ldr	r3, [pc, #480]	; (8002d70 <CANTX_BattParameter+0x230>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe fb28 	bl	80011e8 <__aeabi_f2iz>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <CANTX_BattParameter+0x234>)
 8002b9e:	801a      	strh	r2, [r3, #0]

	Tmax=Suhu_T1;
 8002ba0:	4b75      	ldr	r3, [pc, #468]	; (8002d78 <CANTX_BattParameter+0x238>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a75      	ldr	r2, [pc, #468]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002ba6:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8002ba8:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a74      	ldr	r2, [pc, #464]	; (8002d80 <CANTX_BattParameter+0x240>)
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe faf0 	bl	8001198 <__aeabi_fcmplt>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <CANTX_BattParameter+0x86>
 8002bbe:	4b70      	ldr	r3, [pc, #448]	; (8002d80 <CANTX_BattParameter+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002bc4:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 8002bc6:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a6e      	ldr	r2, [pc, #440]	; (8002d84 <CANTX_BattParameter+0x244>)
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe fae1 	bl	8001198 <__aeabi_fcmplt>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d003      	beq.n	8002be4 <CANTX_BattParameter+0xa4>
 8002bdc:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <CANTX_BattParameter+0x244>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a66      	ldr	r2, [pc, #408]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002be2:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 8002be4:	4b65      	ldr	r3, [pc, #404]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a67      	ldr	r2, [pc, #412]	; (8002d88 <CANTX_BattParameter+0x248>)
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fad2 	bl	8001198 <__aeabi_fcmplt>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <CANTX_BattParameter+0xc2>
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <CANTX_BattParameter+0x248>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5f      	ldr	r2, [pc, #380]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002c00:	6013      	str	r3, [r2, #0]

	Batt_temp.m_uint16_t		= Tmax+40;
 8002c02:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4961      	ldr	r1, [pc, #388]	; (8002d8c <CANTX_BattParameter+0x24c>)
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fe f81f 	bl	8000c4c <__addsf3>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fb0f 	bl	8001234 <__aeabi_f2uiz>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <CANTX_BattParameter+0x250>)
 8002c1c:	801a      	strh	r2, [r3, #0]
	Batt_capacity.m_uint16_t	= Pack_Cap*10;
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	; (8002d94 <CANTX_BattParameter+0x254>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	495d      	ldr	r1, [pc, #372]	; (8002d98 <CANTX_BattParameter+0x258>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f919 	bl	8000e5c <__aeabi_fmul>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fb01 	bl	8001234 <__aeabi_f2uiz>
 8002c32:	4603      	mov	r3, r0
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <CANTX_BattParameter+0x25c>)
 8002c38:	801a      	strh	r2, [r3, #0]
	Batt_SOH.m_uint16_t			= SOH_batt;
 8002c3a:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <CANTX_BattParameter+0x260>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	4b58      	ldr	r3, [pc, #352]	; (8002da4 <CANTX_BattParameter+0x264>)
 8002c42:	801a      	strh	r2, [r3, #0]
	Batt_cycle.m_uint16_t		= cycle;
 8002c44:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <CANTX_BattParameter+0x268>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b58      	ldr	r3, [pc, #352]	; (8002dac <CANTX_BattParameter+0x26c>)
 8002c4c:	801a      	strh	r2, [r3, #0]
	max_voltage.m_uint16_t 		= 63;
 8002c4e:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <CANTX_BattParameter+0x270>)
 8002c50:	223f      	movs	r2, #63	; 0x3f
 8002c52:	801a      	strh	r2, [r3, #0]

	max_chargevoltage.m_uint16_t = VBATT*1.3;
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <CANTX_BattParameter+0x218>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc51 	bl	8000500 <__aeabi_f2d>
 8002c5e:	a33c      	add	r3, pc, #240	; (adr r3, 8002d50 <CANTX_BattParameter+0x210>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd fca4 	bl	80005b0 <__aeabi_dmul>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7fd ff76 	bl	8000b60 <__aeabi_d2uiz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <CANTX_BattParameter+0x274>)
 8002c7a:	801a      	strh	r2, [r3, #0]
	max_chargecurrent.m_uint16_t = VBATT-20;
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <CANTX_BattParameter+0x218>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	494d      	ldr	r1, [pc, #308]	; (8002db8 <CANTX_BattParameter+0x278>)
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd ffe0 	bl	8000c48 <__aeabi_fsub>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fad2 	bl	8001234 <__aeabi_f2uiz>
 8002c90:	4603      	mov	r3, r0
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <CANTX_BattParameter+0x27c>)
 8002c96:	801a      	strh	r2, [r3, #0]

	// *********************** GENERAL CAN COMMUNICATION ******************************
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8002c98:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <CANTX_BattParameter+0x280>)
 8002c9a:	2204      	movs	r2, #4
 8002c9c:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);
 8002c9e:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <CANTX_BattParameter+0x280>)
 8002ca0:	4a48      	ldr	r2, [pc, #288]	; (8002dc4 <CANTX_BattParameter+0x284>)
 8002ca2:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = Batt_voltage.m_bytes[0];
 8002ca4:	4b2e      	ldr	r3, [pc, #184]	; (8002d60 <CANTX_BattParameter+0x220>)
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002caa:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_voltage.m_bytes[1];
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <CANTX_BattParameter+0x220>)
 8002cae:	785a      	ldrb	r2, [r3, #1]
 8002cb0:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002cb2:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_current.m_bytes[0];
 8002cb4:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <CANTX_BattParameter+0x22c>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b43      	ldr	r3, [pc, #268]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002cba:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_current.m_bytes[1];
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <CANTX_BattParameter+0x22c>)
 8002cbe:	785a      	ldrb	r2, [r3, #1]
 8002cc0:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002cc2:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_SOC.m_bytes[0];
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	; (8002d74 <CANTX_BattParameter+0x234>)
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002cca:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_SOC.m_bytes[1];
 8002ccc:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <CANTX_BattParameter+0x234>)
 8002cce:	785a      	ldrb	r2, [r3, #1]
 8002cd0:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002cd2:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = Tmax+40;
 8002cd4:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <CANTX_BattParameter+0x23c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	492c      	ldr	r1, [pc, #176]	; (8002d8c <CANTX_BattParameter+0x24c>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd ffb6 	bl	8000c4c <__addsf3>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe faa6 	bl	8001234 <__aeabi_f2uiz>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	4b36      	ldr	r3, [pc, #216]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002cee:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 1;
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	71da      	strb	r2, [r3, #7]
	//		Tx_data[6] = Batt_temp.m_bytes[1];
	//		Tx_data[7] = Batt_temp.m_bytes[0];

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 8002cf6:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <CANTX_BattParameter+0x280>)
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002cfc:	e00f      	b.n	8002d1e <CANTX_BattParameter+0x1de>
		if(delay_mailboxcheck > 1000){
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d04:	dd08      	ble.n	8002d18 <CANTX_BattParameter+0x1d8>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002d06:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <CANTX_BattParameter+0x28c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4830      	ldr	r0, [pc, #192]	; (8002dd0 <CANTX_BattParameter+0x290>)
 8002d0e:	f004 fe38 	bl	8007982 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	607b      	str	r3, [r7, #4]
			break;
 8002d16:	e008      	b.n	8002d2a <CANTX_BattParameter+0x1ea>
		}
		delay_mailboxcheck++;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002d1e:	482c      	ldr	r0, [pc, #176]	; (8002dd0 <CANTX_BattParameter+0x290>)
 8002d20:	f004 fe73 	bl	8007a0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0e9      	beq.n	8002cfe <CANTX_BattParameter+0x1be>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002d2a:	4b28      	ldr	r3, [pc, #160]	; (8002dcc <CANTX_BattParameter+0x28c>)
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <CANTX_BattParameter+0x288>)
 8002d2e:	4924      	ldr	r1, [pc, #144]	; (8002dc0 <CANTX_BattParameter+0x280>)
 8002d30:	4827      	ldr	r0, [pc, #156]	; (8002dd0 <CANTX_BattParameter+0x290>)
 8002d32:	f004 fd4c 	bl	80077ce <HAL_CAN_AddTxMessage>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <CANTX_BattParameter+0x20a>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <CANTX_BattParameter+0x28c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4619      	mov	r1, r3
 8002d42:	4823      	ldr	r0, [pc, #140]	; (8002dd0 <CANTX_BattParameter+0x290>)
 8002d44:	f004 fe1d 	bl	8007982 <HAL_CAN_AbortTxRequest>
		return;
 8002d48:	bf00      	nop
//		Error_Handler();
	}

}
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	cccccccd 	.word	0xcccccccd
 8002d54:	3ff4cccc 	.word	0x3ff4cccc
 8002d58:	20000280 	.word	0x20000280
 8002d5c:	42c80000 	.word	0x42c80000
 8002d60:	2000059c 	.word	0x2000059c
 8002d64:	200002f4 	.word	0x200002f4
 8002d68:	40240000 	.word	0x40240000
 8002d6c:	200004f8 	.word	0x200004f8
 8002d70:	20000370 	.word	0x20000370
 8002d74:	20000500 	.word	0x20000500
 8002d78:	20000304 	.word	0x20000304
 8002d7c:	20000548 	.word	0x20000548
 8002d80:	20000378 	.word	0x20000378
 8002d84:	20000284 	.word	0x20000284
 8002d88:	20000334 	.word	0x20000334
 8002d8c:	42200000 	.word	0x42200000
 8002d90:	20000544 	.word	0x20000544
 8002d94:	2000000c 	.word	0x2000000c
 8002d98:	41200000 	.word	0x41200000
 8002d9c:	20000594 	.word	0x20000594
 8002da0:	20000000 	.word	0x20000000
 8002da4:	200004a8 	.word	0x200004a8
 8002da8:	2000024c 	.word	0x2000024c
 8002dac:	200004f0 	.word	0x200004f0
 8002db0:	20000570 	.word	0x20000570
 8002db4:	20000590 	.word	0x20000590
 8002db8:	41a00000 	.word	0x41a00000
 8002dbc:	200004ac 	.word	0x200004ac
 8002dc0:	20000578 	.word	0x20000578
 8002dc4:	0b000a22 	.word	0x0b000a22
 8002dc8:	200004b4 	.word	0x200004b4
 8002dcc:	20000568 	.word	0x20000568
 8002dd0:	200004bc 	.word	0x200004bc

08002dd4 <CANTX_BattProtection>:

void CANTX_BattProtection() {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 8002dda:	4b8c      	ldr	r3, [pc, #560]	; (800300c <CANTX_BattProtection+0x238>)
 8002ddc:	2204      	movs	r2, #4
 8002dde:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code);
 8002de0:	4b8a      	ldr	r3, [pc, #552]	; (800300c <CANTX_BattProtection+0x238>)
 8002de2:	4a8b      	ldr	r2, [pc, #556]	; (8003010 <CANTX_BattProtection+0x23c>)
 8002de4:	605a      	str	r2, [r3, #4]
	//CAN Data #2
	Tx_data[0] = Batt_capacity.m_bytes[0];
 8002de6:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <CANTX_BattProtection+0x240>)
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <CANTX_BattProtection+0x244>)
 8002dec:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_capacity.m_bytes[1];
 8002dee:	4b89      	ldr	r3, [pc, #548]	; (8003014 <CANTX_BattProtection+0x240>)
 8002df0:	785a      	ldrb	r2, [r3, #1]
 8002df2:	4b89      	ldr	r3, [pc, #548]	; (8003018 <CANTX_BattProtection+0x244>)
 8002df4:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_SOH.m_bytes[0];
 8002df6:	4b89      	ldr	r3, [pc, #548]	; (800301c <CANTX_BattProtection+0x248>)
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	4b87      	ldr	r3, [pc, #540]	; (8003018 <CANTX_BattProtection+0x244>)
 8002dfc:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_SOH.m_bytes[1];
 8002dfe:	4b87      	ldr	r3, [pc, #540]	; (800301c <CANTX_BattProtection+0x248>)
 8002e00:	785a      	ldrb	r2, [r3, #1]
 8002e02:	4b85      	ldr	r3, [pc, #532]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e04:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_cycle.m_bytes[0];
 8002e06:	4b86      	ldr	r3, [pc, #536]	; (8003020 <CANTX_BattProtection+0x24c>)
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	4b83      	ldr	r3, [pc, #524]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e0c:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_cycle.m_bytes[1];
 8002e0e:	4b84      	ldr	r3, [pc, #528]	; (8003020 <CANTX_BattProtection+0x24c>)
 8002e10:	785a      	ldrb	r2, [r3, #1]
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e14:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = flag_trip_overcurrentdischarge&0x01;
 8002e16:	4b83      	ldr	r3, [pc, #524]	; (8003024 <CANTX_BattProtection+0x250>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e22:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<1;
 8002e24:	4b7c      	ldr	r3, [pc, #496]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e26:	799b      	ldrb	r3, [r3, #6]
 8002e28:	b25a      	sxtb	r2, r3
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <CANTX_BattProtection+0x254>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	b25b      	sxtb	r3, r3
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b76      	ldr	r3, [pc, #472]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e40:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_shortcircuit&0x01)<<2;
 8002e42:	4b75      	ldr	r3, [pc, #468]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e44:	799b      	ldrb	r3, [r3, #6]
 8002e46:	b25a      	sxtb	r2, r3
 8002e48:	4b78      	ldr	r3, [pc, #480]	; (800302c <CANTX_BattProtection+0x258>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	b25b      	sxtb	r3, r3
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b6e      	ldr	r3, [pc, #440]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e5e:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 8002e60:	4b6d      	ldr	r3, [pc, #436]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e62:	799b      	ldrb	r3, [r3, #6]
 8002e64:	b25a      	sxtb	r2, r3
 8002e66:	4b72      	ldr	r3, [pc, #456]	; (8003030 <CANTX_BattProtection+0x25c>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	b25b      	sxtb	r3, r3
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b25b      	sxtb	r3, r3
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e7c:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8002e7e:	4b66      	ldr	r3, [pc, #408]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e80:	799b      	ldrb	r3, [r3, #6]
 8002e82:	b25a      	sxtb	r2, r3
 8002e84:	4b6b      	ldr	r3, [pc, #428]	; (8003034 <CANTX_BattProtection+0x260>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	b25b      	sxtb	r3, r3
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	4313      	orrs	r3, r2
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b5f      	ldr	r3, [pc, #380]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e9a:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8002e9c:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <CANTX_BattProtection+0x244>)
 8002e9e:	799b      	ldrb	r3, [r3, #6]
 8002ea0:	b25a      	sxtb	r2, r3
 8002ea2:	4b63      	ldr	r3, [pc, #396]	; (8003030 <CANTX_BattProtection+0x25c>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	015b      	lsls	r3, r3, #5
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	b25b      	sxtb	r3, r3
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <CANTX_BattProtection+0x244>)
 8002eb8:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <CANTX_BattProtection+0x244>)
 8002ebc:	799b      	ldrb	r3, [r3, #6]
 8002ebe:	b25a      	sxtb	r2, r3
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <CANTX_BattProtection+0x260>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	b25b      	sxtb	r3, r3
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <CANTX_BattProtection+0x244>)
 8002ed6:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |=  (flag_trip_undervoltage&0x01)<<7;
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <CANTX_BattProtection+0x244>)
 8002eda:	799b      	ldrb	r3, [r3, #6]
 8002edc:	b25a      	sxtb	r2, r3
 8002ede:	4b56      	ldr	r3, [pc, #344]	; (8003038 <CANTX_BattProtection+0x264>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	b25b      	sxtb	r3, r3
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <CANTX_BattProtection+0x244>)
 8002eee:	719a      	strb	r2, [r3, #6]

	Tx_data[7] = (flag_trip_overvoltage&0x01);
 8002ef0:	4b52      	ldr	r3, [pc, #328]	; (800303c <CANTX_BattProtection+0x268>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <CANTX_BattProtection+0x244>)
 8002efc:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<1;
 8002efe:	4b46      	ldr	r3, [pc, #280]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f00:	79db      	ldrb	r3, [r3, #7]
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <CANTX_BattProtection+0x26c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	b25b      	sxtb	r3, r3
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	4313      	orrs	r3, r2
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f1a:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_unbalance&0x01)<<2;
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f1e:	79db      	ldrb	r3, [r3, #7]
 8002f20:	b25a      	sxtb	r2, r3
 8002f22:	4b48      	ldr	r3, [pc, #288]	; (8003044 <CANTX_BattProtection+0x270>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	b25b      	sxtb	r3, r3
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	4313      	orrs	r3, r2
 8002f32:	b25b      	sxtb	r3, r3
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f38:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 8002f3a:	4b37      	ldr	r3, [pc, #220]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f3c:	79db      	ldrb	r3, [r3, #7]
 8002f3e:	b25a      	sxtb	r2, r3
 8002f40:	4b41      	ldr	r3, [pc, #260]	; (8003048 <CANTX_BattProtection+0x274>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	b25b      	sxtb	r3, r3
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	4b30      	ldr	r3, [pc, #192]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f56:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (charge_state&0x01)<<4;
 8002f58:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f5a:	79db      	ldrb	r3, [r3, #7]
 8002f5c:	b25a      	sxtb	r2, r3
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	; (800304c <CANTX_BattProtection+0x278>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b29      	ldr	r3, [pc, #164]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f74:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (discharge_state&0x01)<<5;
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f78:	79db      	ldrb	r3, [r3, #7]
 8002f7a:	b25a      	sxtb	r2, r3
 8002f7c:	4b34      	ldr	r3, [pc, #208]	; (8003050 <CANTX_BattProtection+0x27c>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	015b      	lsls	r3, r3, #5
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f92:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (sleep_state&0x01)<<6;
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <CANTX_BattProtection+0x244>)
 8002f96:	79db      	ldrb	r3, [r3, #7]
 8002f98:	b25a      	sxtb	r2, r3
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <CANTX_BattProtection+0x280>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	019b      	lsls	r3, r3, #6
 8002fa0:	b25b      	sxtb	r3, r3
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	b25b      	sxtb	r3, r3
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b1a      	ldr	r3, [pc, #104]	; (8003018 <CANTX_BattProtection+0x244>)
 8002fb0:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <CANTX_BattProtection+0x238>)
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002fb8:	e00f      	b.n	8002fda <CANTX_BattProtection+0x206>
		if(delay_mailboxcheck > 1000){
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc0:	dd08      	ble.n	8002fd4 <CANTX_BattProtection+0x200>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <CANTX_BattProtection+0x284>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4824      	ldr	r0, [pc, #144]	; (800305c <CANTX_BattProtection+0x288>)
 8002fca:	f004 fcda 	bl	8007982 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
			break;
 8002fd2:	e008      	b.n	8002fe6 <CANTX_BattProtection+0x212>
		}
		delay_mailboxcheck++;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002fda:	4820      	ldr	r0, [pc, #128]	; (800305c <CANTX_BattProtection+0x288>)
 8002fdc:	f004 fd15 	bl	8007a0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0e9      	beq.n	8002fba <CANTX_BattProtection+0x1e6>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <CANTX_BattProtection+0x284>)
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <CANTX_BattProtection+0x244>)
 8002fea:	4908      	ldr	r1, [pc, #32]	; (800300c <CANTX_BattProtection+0x238>)
 8002fec:	481b      	ldr	r0, [pc, #108]	; (800305c <CANTX_BattProtection+0x288>)
 8002fee:	f004 fbee 	bl	80077ce <HAL_CAN_AddTxMessage>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <CANTX_BattProtection+0x232>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002ff8:	4b17      	ldr	r3, [pc, #92]	; (8003058 <CANTX_BattProtection+0x284>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4817      	ldr	r0, [pc, #92]	; (800305c <CANTX_BattProtection+0x288>)
 8003000:	f004 fcbf 	bl	8007982 <HAL_CAN_AbortTxRequest>
		return;
 8003004:	bf00      	nop
//		Error_Handler();
	}
}
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000578 	.word	0x20000578
 8003010:	0b100a22 	.word	0x0b100a22
 8003014:	20000594 	.word	0x20000594
 8003018:	200004b4 	.word	0x200004b4
 800301c:	200004a8 	.word	0x200004a8
 8003020:	200004f0 	.word	0x200004f0
 8003024:	2000030c 	.word	0x2000030c
 8003028:	20000322 	.word	0x20000322
 800302c:	2000025f 	.word	0x2000025f
 8003030:	2000027c 	.word	0x2000027c
 8003034:	200002fc 	.word	0x200002fc
 8003038:	200002fd 	.word	0x200002fd
 800303c:	20000374 	.word	0x20000374
 8003040:	20000328 	.word	0x20000328
 8003044:	2000025c 	.word	0x2000025c
 8003048:	20000268 	.word	0x20000268
 800304c:	20000338 	.word	0x20000338
 8003050:	20000288 	.word	0x20000288
 8003054:	2000037c 	.word	0x2000037c
 8003058:	20000568 	.word	0x20000568
 800305c:	200004bc 	.word	0x200004bc

08003060 <CANTX_ReportToCharger>:

void CANTX_ReportToCharger() {
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
	// *********************** CHARGING CAN COMMUNICATION ******************************
	int delay_mailboxcheck;
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8003066:	4b30      	ldr	r3, [pc, #192]	; (8003128 <CANTX_ReportToCharger+0xc8>)
 8003068:	2204      	movs	r2, #4
 800306a:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code);
 800306c:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <CANTX_ReportToCharger+0xc8>)
 800306e:	4a2f      	ldr	r2, [pc, #188]	; (800312c <CANTX_ReportToCharger+0xcc>)
 8003070:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = max_chargevoltage.m_bytes[0];
 8003072:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <CANTX_ReportToCharger+0xd0>)
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	4b2f      	ldr	r3, [pc, #188]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 8003078:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = max_chargevoltage.m_bytes[1];
 800307a:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <CANTX_ReportToCharger+0xd0>)
 800307c:	785a      	ldrb	r2, [r3, #1]
 800307e:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 8003080:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = max_chargecurrent.m_bytes[0];
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <CANTX_ReportToCharger+0xd8>)
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 8003088:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = max_chargecurrent.m_bytes[1];
 800308a:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <CANTX_ReportToCharger+0xd8>)
 800308c:	785a      	ldrb	r2, [r3, #1]
 800308e:	4b29      	ldr	r3, [pc, #164]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 8003090:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = charge_state;
 8003092:	4b2a      	ldr	r3, [pc, #168]	; (800313c <CANTX_ReportToCharger+0xdc>)
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 8003098:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = 0;
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 800309c:	2200      	movs	r2, #0
 800309e:	715a      	strb	r2, [r3, #5]

	if(BMS_mode == 0) handshake_recognition = 0x55;
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <CANTX_ReportToCharger+0xe0>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <CANTX_ReportToCharger+0x50>
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <CANTX_ReportToCharger+0xe4>)
 80030aa:	2255      	movs	r2, #85	; 0x55
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	e006      	b.n	80030be <CANTX_ReportToCharger+0x5e>
	else if(BMS_mode == 2) handshake_recognition = 0xAA;
 80030b0:	4b23      	ldr	r3, [pc, #140]	; (8003140 <CANTX_ReportToCharger+0xe0>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d102      	bne.n	80030be <CANTX_ReportToCharger+0x5e>
 80030b8:	4b22      	ldr	r3, [pc, #136]	; (8003144 <CANTX_ReportToCharger+0xe4>)
 80030ba:	22aa      	movs	r2, #170	; 0xaa
 80030bc:	801a      	strh	r2, [r3, #0]

	Tx_data[6] = handshake_recognition;
 80030be:	4b21      	ldr	r3, [pc, #132]	; (8003144 <CANTX_ReportToCharger+0xe4>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 80030c6:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 80030c8:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <CANTX_ReportToCharger+0xc8>)
 80030d0:	2208      	movs	r2, #8
 80030d2:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80030d4:	e00f      	b.n	80030f6 <CANTX_ReportToCharger+0x96>
		if(delay_mailboxcheck > 1000){
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030dc:	dd08      	ble.n	80030f0 <CANTX_ReportToCharger+0x90>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80030de:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <CANTX_ReportToCharger+0xe8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4619      	mov	r1, r3
 80030e4:	4819      	ldr	r0, [pc, #100]	; (800314c <CANTX_ReportToCharger+0xec>)
 80030e6:	f004 fc4c 	bl	8007982 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
			break;
 80030ee:	e008      	b.n	8003102 <CANTX_ReportToCharger+0xa2>
		}
		delay_mailboxcheck++;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3301      	adds	r3, #1
 80030f4:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80030f6:	4815      	ldr	r0, [pc, #84]	; (800314c <CANTX_ReportToCharger+0xec>)
 80030f8:	f004 fc87 	bl	8007a0a <HAL_CAN_GetTxMailboxesFreeLevel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0e9      	beq.n	80030d6 <CANTX_ReportToCharger+0x76>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <CANTX_ReportToCharger+0xe8>)
 8003104:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <CANTX_ReportToCharger+0xd4>)
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <CANTX_ReportToCharger+0xc8>)
 8003108:	4810      	ldr	r0, [pc, #64]	; (800314c <CANTX_ReportToCharger+0xec>)
 800310a:	f004 fb60 	bl	80077ce <HAL_CAN_AddTxMessage>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <CANTX_ReportToCharger+0xc2>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <CANTX_ReportToCharger+0xe8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	480c      	ldr	r0, [pc, #48]	; (800314c <CANTX_ReportToCharger+0xec>)
 800311c:	f004 fc31 	bl	8007982 <HAL_CAN_AbortTxRequest>
		return;
 8003120:	bf00      	nop
//		Error_Handler();
	}
}
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000578 	.word	0x20000578
 800312c:	0e000a22 	.word	0x0e000a22
 8003130:	20000590 	.word	0x20000590
 8003134:	200004b4 	.word	0x200004b4
 8003138:	200004ac 	.word	0x200004ac
 800313c:	20000338 	.word	0x20000338
 8003140:	2000036c 	.word	0x2000036c
 8003144:	200004a0 	.word	0x200004a0
 8003148:	20000568 	.word	0x20000568
 800314c:	200004bc 	.word	0x200004bc

08003150 <CANTX_BattId>:

void CANTX_BattId() {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <CANTX_BattId+0x9c>)
 8003158:	2204      	movs	r2, #4
 800315a:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E1<<20|UNIQUE_Code);
 800315c:	4b23      	ldr	r3, [pc, #140]	; (80031ec <CANTX_BattId+0x9c>)
 800315e:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <CANTX_BattId+0xa0>)
 8003160:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = 0;
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <CANTX_BattId+0xa4>)
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = 0;
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <CANTX_BattId+0xa4>)
 800316a:	2200      	movs	r2, #0
 800316c:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = 0x21;
 800316e:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <CANTX_BattId+0xa4>)
 8003170:	2221      	movs	r2, #33	; 0x21
 8003172:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = 0x04;
 8003174:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <CANTX_BattId+0xa4>)
 8003176:	2204      	movs	r2, #4
 8003178:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = UNIQUE_Code >> 16;
 800317a:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <CANTX_BattId+0xa4>)
 800317c:	2200      	movs	r2, #0
 800317e:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = UNIQUE_Code >> 8;
 8003180:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <CANTX_BattId+0xa4>)
 8003182:	220a      	movs	r2, #10
 8003184:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = UNIQUE_Code;
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <CANTX_BattId+0xa4>)
 8003188:	2222      	movs	r2, #34	; 0x22
 800318a:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <CANTX_BattId+0xa4>)
 800318e:	2200      	movs	r2, #0
 8003190:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <CANTX_BattId+0x9c>)
 8003194:	2208      	movs	r2, #8
 8003196:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8003198:	e00f      	b.n	80031ba <CANTX_BattId+0x6a>
		if(delay_mailboxcheck > 1000){
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031a0:	dd08      	ble.n	80031b4 <CANTX_BattId+0x64>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <CANTX_BattId+0xa8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4619      	mov	r1, r3
 80031a8:	4814      	ldr	r0, [pc, #80]	; (80031fc <CANTX_BattId+0xac>)
 80031aa:	f004 fbea 	bl	8007982 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
			break;
 80031b2:	e008      	b.n	80031c6 <CANTX_BattId+0x76>
		}
		delay_mailboxcheck++;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3301      	adds	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80031ba:	4810      	ldr	r0, [pc, #64]	; (80031fc <CANTX_BattId+0xac>)
 80031bc:	f004 fc25 	bl	8007a0a <HAL_CAN_GetTxMailboxesFreeLevel>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0e9      	beq.n	800319a <CANTX_BattId+0x4a>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <CANTX_BattId+0xa8>)
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <CANTX_BattId+0xa4>)
 80031ca:	4908      	ldr	r1, [pc, #32]	; (80031ec <CANTX_BattId+0x9c>)
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <CANTX_BattId+0xac>)
 80031ce:	f004 fafe 	bl	80077ce <HAL_CAN_AddTxMessage>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <CANTX_BattId+0x96>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <CANTX_BattId+0xa8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	4807      	ldr	r0, [pc, #28]	; (80031fc <CANTX_BattId+0xac>)
 80031e0:	f004 fbcf 	bl	8007982 <HAL_CAN_AbortTxRequest>
		return;
 80031e4:	bf00      	nop
//		Error_Handler();
	}
}
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000578 	.word	0x20000578
 80031f0:	0e100a22 	.word	0x0e100a22
 80031f4:	200004b4 	.word	0x200004b4
 80031f8:	20000568 	.word	0x20000568
 80031fc:	200004bc 	.word	0x200004bc

08003200 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data) == HAL_OK) {
 8003208:	4b60      	ldr	r3, [pc, #384]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800320a:	4a61      	ldr	r2, [pc, #388]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800320c:	2100      	movs	r1, #0
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f004 fc2f 	bl	8007a72 <HAL_CAN_GetRxMessage>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 80b3 	bne.w	8003382 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		if(Rx_Header.ExtId == 0x1B2){
 800321c:	4b5c      	ldr	r3, [pc, #368]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8003224:	d134      	bne.n	8003290 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			flag_start_shutdown=Rx_data[0]&0x01;
 8003226:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	4b58      	ldr	r3, [pc, #352]	; (8003394 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8003232:	701a      	strb	r2, [r3, #0]
			BMS_mode=(Rx_data[0]>>1)&0x03;
 8003234:	4b55      	ldr	r3, [pc, #340]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8003244:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 8003246:	4b51      	ldr	r3, [pc, #324]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bf14      	ite	ne
 8003252:	2301      	movne	r3, #1
 8003254:	2300      	moveq	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800325c:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 800325e:	4b4b      	ldr	r3, [pc, #300]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	4b4b      	ldr	r3, [pc, #300]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8003274:	701a      	strb	r2, [r3, #0]

			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 8003276:	f003 fc97 	bl	8006ba8 <HAL_GetTick>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	4b49      	ldr	r3, [pc, #292]	; (80033a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003280:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8003282:	f003 fc91 	bl	8006ba8 <HAL_GetTick>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e06d      	b.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(((Rx_Header.ExtId & 0xFFF00000) == 0x0E300000) && (flag_get_UNIQUECODE < 3) ) {
 8003290:	4b3f      	ldr	r3, [pc, #252]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0d1b      	lsrs	r3, r3, #20
 8003296:	051b      	lsls	r3, r3, #20
 8003298:	f1b3 6f63 	cmp.w	r3, #238026752	; 0xe300000
 800329c:	d11c      	bne.n	80032d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 800329e:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d818      	bhi.n	80032d8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
			flag_start_shutdown = 1;
 80032a6:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	701a      	strb	r2, [r3, #0]
			BMS_mode = 0;
 80032ac:	4b3a      	ldr	r3, [pc, #232]	; (8003398 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
			flag_get_UNIQUECODE++;
 80032b2:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b3c      	ldr	r3, [pc, #240]	; (80033ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80032bc:	701a      	strb	r2, [r3, #0]
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 80032be:	f003 fc73 	bl	8006ba8 <HAL_GetTick>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b37      	ldr	r3, [pc, #220]	; (80033a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80032c8:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 80032ca:	f003 fc6d 	bl	8006ba8 <HAL_GetTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e049      	b.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.ExtId == (0x0E3<<20|UNIQUE_Code)){
 80032d8:	4b2d      	ldr	r3, [pc, #180]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d121      	bne.n	8003326 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
			if(Rx_data[5] == 0x55){
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80032e4:	795b      	ldrb	r3, [r3, #5]
 80032e6:	2b55      	cmp	r3, #85	; 0x55
 80032e8:	d106      	bne.n	80032f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				BMS_mode = 0;
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
				charge_state = 0;
 80032f0:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e009      	b.n	800330c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			}
			else if(Rx_data[5] == 0xAA){
 80032f8:	4b24      	ldr	r3, [pc, #144]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80032fa:	795b      	ldrb	r3, [r3, #5]
 80032fc:	2baa      	cmp	r3, #170	; 0xaa
 80032fe:	d105      	bne.n	800330c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
				BMS_mode = 2;
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8003302:	2202      	movs	r2, #2
 8003304:	701a      	strb	r2, [r3, #0]
				charge_state = 1;
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
			}
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 800330c:	f003 fc4c 	bl	8006ba8 <HAL_GetTick>
 8003310:	4603      	mov	r3, r0
 8003312:	461a      	mov	r2, r3
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003316:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8003318:	f003 fc46 	bl	8006ba8 <HAL_GetTick>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e022      	b.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.RTR == 2){
 8003326:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d11e      	bne.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			if(Rx_Header.StdId == 0x0B4) dataRTR = 4;
 800332e:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2bb4      	cmp	r3, #180	; 0xb4
 8003334:	d103      	bne.n	800333e <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003338:	2204      	movs	r2, #4
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e016      	b.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B5) dataRTR = 5;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2bb5      	cmp	r3, #181	; 0xb5
 8003344:	d103      	bne.n	800334e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003348:	2205      	movs	r2, #5
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e00e      	b.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B6) dataRTR = 6;
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2bb6      	cmp	r3, #182	; 0xb6
 8003354:	d103      	bne.n	800335e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003358:	2206      	movs	r2, #6
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e006      	b.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B7) dataRTR = 7;
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2bb7      	cmp	r3, #183	; 0xb7
 8003364:	d102      	bne.n	800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003368:	2207      	movs	r2, #7
 800336a:	701a      	strb	r2, [r3, #0]
		}

		Rx_Header.ExtId = 0;
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800336e:	2200      	movs	r2, #0
 8003370:	605a      	str	r2, [r3, #4]
		Rx_Header.StdId = 0;
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8003378:	2208      	movs	r2, #8
 800337a:	2100      	movs	r1, #0
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800337e:	f008 f803 	bl	800b388 <memset>
	}
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200004e4 	.word	0x200004e4
 8003390:	2000054c 	.word	0x2000054c
 8003394:	2000027d 	.word	0x2000027d
 8003398:	2000036c 	.word	0x2000036c
 800339c:	20000290 	.word	0x20000290
 80033a0:	20000348 	.word	0x20000348
 80033a4:	20000324 	.word	0x20000324
 80033a8:	20000354 	.word	0x20000354
 80033ac:	20000260 	.word	0x20000260
 80033b0:	0e300a22 	.word	0x0e300a22
 80033b4:	20000338 	.word	0x20000338
 80033b8:	2000023c 	.word	0x2000023c

080033bc <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80033ca:	2301      	movs	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80033ce:	2300      	movs	r3, #0
 80033d0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80033e6:	230e      	movs	r3, #14
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 80033ea:	463b      	mov	r3, r7
 80033ec:	4619      	mov	r1, r3
 80033ee:	4810      	ldr	r0, [pc, #64]	; (8003430 <BMS_CAN_Config+0x74>)
 80033f0:	f004 f8e0 	bl	80075b4 <HAL_CAN_ConfigFilter>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <BMS_CAN_Config+0x42>
 80033fa:	f000 fc23 	bl	8003c44 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 80033fe:	480c      	ldr	r0, [pc, #48]	; (8003430 <BMS_CAN_Config+0x74>)
 8003400:	f004 f9a1 	bl	8007746 <HAL_CAN_Start>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <BMS_CAN_Config+0x52>
 800340a:	f000 fc1b 	bl	8003c44 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800340e:	2102      	movs	r1, #2
 8003410:	4807      	ldr	r0, [pc, #28]	; (8003430 <BMS_CAN_Config+0x74>)
 8003412:	f004 fc3f 	bl	8007c94 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <BMS_CAN_Config+0x78>)
 8003418:	2200      	movs	r2, #0
 800341a:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <BMS_CAN_Config+0x78>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <BMS_CAN_Config+0x78>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
}
 8003428:	bf00      	nop
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	200004bc 	.word	0x200004bc
 8003434:	20000578 	.word	0x20000578

08003438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <MX_DMA_Init+0x38>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <MX_DMA_Init+0x38>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6153      	str	r3, [r2, #20]
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <MX_DMA_Init+0x38>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	2100      	movs	r1, #0
 800345a:	200b      	movs	r0, #11
 800345c:	f004 ff39 	bl	80082d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003460:	200b      	movs	r0, #11
 8003462:	f004 ff52 	bl	800830a <HAL_NVIC_EnableIRQ>

}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000

08003474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003488:	4b41      	ldr	r3, [pc, #260]	; (8003590 <MX_GPIO_Init+0x11c>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a40      	ldr	r2, [pc, #256]	; (8003590 <MX_GPIO_Init+0x11c>)
 800348e:	f043 0310 	orr.w	r3, r3, #16
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b3e      	ldr	r3, [pc, #248]	; (8003590 <MX_GPIO_Init+0x11c>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <MX_GPIO_Init+0x11c>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <MX_GPIO_Init+0x11c>)
 80034a6:	f043 0304 	orr.w	r3, r3, #4
 80034aa:	6193      	str	r3, [r2, #24]
 80034ac:	4b38      	ldr	r3, [pc, #224]	; (8003590 <MX_GPIO_Init+0x11c>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <MX_GPIO_Init+0x11c>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a34      	ldr	r2, [pc, #208]	; (8003590 <MX_GPIO_Init+0x11c>)
 80034be:	f043 0308 	orr.w	r3, r3, #8
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <MX_GPIO_Init+0x11c>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|LED_Pin|BATT_CUTL_Pin|CSBI_Pin, GPIO_PIN_RESET);
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 5149 	mov.w	r1, #12864	; 0x3240
 80034d6:	482f      	ldr	r0, [pc, #188]	; (8003594 <MX_GPIO_Init+0x120>)
 80034d8:	f005 fc1d 	bl	8008d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EEPROM_WP_Pin|BMS_SHUTDOWN_Pin|SCK_Pin|SDO_Pin
 80034dc:	2200      	movs	r2, #0
 80034de:	f249 0138 	movw	r1, #36920	; 0x9038
 80034e2:	482d      	ldr	r0, [pc, #180]	; (8003598 <MX_GPIO_Init+0x124>)
 80034e4:	f005 fc17 	bl	8008d16 <HAL_GPIO_WritePin>
                          |SDI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BATT_CUTH_GPIO_Port, BATT_CUTH_Pin, GPIO_PIN_RESET);
 80034e8:	2200      	movs	r2, #0
 80034ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034ee:	482b      	ldr	r0, [pc, #172]	; (800359c <MX_GPIO_Init+0x128>)
 80034f0:	f005 fc11 	bl	8008d16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80034f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fa:	2301      	movs	r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034fe:	2302      	movs	r3, #2
 8003500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003502:	2302      	movs	r3, #2
 8003504:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 0310 	add.w	r3, r7, #16
 800350a:	4619      	mov	r1, r3
 800350c:	4821      	ldr	r0, [pc, #132]	; (8003594 <MX_GPIO_Init+0x120>)
 800350e:	f005 fa57 	bl	80089c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = EEPROM_WP_Pin|BMS_SHUTDOWN_Pin|SCK_Pin|SDO_Pin
 8003512:	f249 0338 	movw	r3, #36920	; 0x9038
 8003516:	613b      	str	r3, [r7, #16]
                          |SDI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003518:	2301      	movs	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003520:	2302      	movs	r3, #2
 8003522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003524:	f107 0310 	add.w	r3, r7, #16
 8003528:	4619      	mov	r1, r3
 800352a:	481b      	ldr	r0, [pc, #108]	; (8003598 <MX_GPIO_Init+0x124>)
 800352c:	f005 fa48 	bl	80089c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|BATT_CUTL_Pin|CSBI_Pin;
 8003530:	f44f 5392 	mov.w	r3, #4672	; 0x1240
 8003534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003536:	2301      	movs	r3, #1
 8003538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2302      	movs	r3, #2
 8003540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	4619      	mov	r1, r3
 8003548:	4812      	ldr	r0, [pc, #72]	; (8003594 <MX_GPIO_Init+0x120>)
 800354a:	f005 fa39 	bl	80089c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BATT_CUTH_Pin;
 800354e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003554:	2301      	movs	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2302      	movs	r3, #2
 800355e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BATT_CUTH_GPIO_Port, &GPIO_InitStruct);
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	4619      	mov	r1, r3
 8003566:	480d      	ldr	r0, [pc, #52]	; (800359c <MX_GPIO_Init+0x128>)
 8003568:	f005 fa2a 	bl	80089c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800356c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f107 0310 	add.w	r3, r7, #16
 800357e:	4619      	mov	r1, r3
 8003580:	4806      	ldr	r0, [pc, #24]	; (800359c <MX_GPIO_Init+0x128>)
 8003582:	f005 fa1d 	bl	80089c0 <HAL_GPIO_Init>

}
 8003586:	bf00      	nop
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	40011000 	.word	0x40011000
 8003598:	40010c00 	.word	0x40010c00
 800359c:	40010800 	.word	0x40010800

080035a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035a6:	4a13      	ldr	r2, [pc, #76]	; (80035f4 <MX_I2C1_Init+0x54>)
 80035a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <MX_I2C1_Init+0x58>)
 80035ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035b6:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035d8:	2200      	movs	r2, #0
 80035da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035dc:	4804      	ldr	r0, [pc, #16]	; (80035f0 <MX_I2C1_Init+0x50>)
 80035de:	f005 fbcb 	bl	8008d78 <HAL_I2C_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035e8:	f000 fb2c 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200005a0 	.word	0x200005a0
 80035f4:	40005400 	.word	0x40005400
 80035f8:	00061a80 	.word	0x00061a80

080035fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003600:	4b12      	ldr	r3, [pc, #72]	; (800364c <MX_I2C2_Init+0x50>)
 8003602:	4a13      	ldr	r2, [pc, #76]	; (8003650 <MX_I2C2_Init+0x54>)
 8003604:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <MX_I2C2_Init+0x50>)
 8003608:	4a12      	ldr	r2, [pc, #72]	; (8003654 <MX_I2C2_Init+0x58>)
 800360a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <MX_I2C2_Init+0x50>)
 800360e:	2200      	movs	r2, #0
 8003610:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <MX_I2C2_Init+0x50>)
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <MX_I2C2_Init+0x50>)
 800361a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800361e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <MX_I2C2_Init+0x50>)
 8003622:	2200      	movs	r2, #0
 8003624:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <MX_I2C2_Init+0x50>)
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800362c:	4b07      	ldr	r3, [pc, #28]	; (800364c <MX_I2C2_Init+0x50>)
 800362e:	2200      	movs	r2, #0
 8003630:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <MX_I2C2_Init+0x50>)
 8003634:	2200      	movs	r2, #0
 8003636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003638:	4804      	ldr	r0, [pc, #16]	; (800364c <MX_I2C2_Init+0x50>)
 800363a:	f005 fb9d 	bl	8008d78 <HAL_I2C_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003644:	f000 fafe 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200005f4 	.word	0x200005f4
 8003650:	40005800 	.word	0x40005800
 8003654:	000186a0 	.word	0x000186a0

08003658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	; 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 0318 	add.w	r3, r7, #24
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2b      	ldr	r2, [pc, #172]	; (8003720 <HAL_I2C_MspInit+0xc8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d124      	bne.n	80036c2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	4a29      	ldr	r2, [pc, #164]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 800367e:	f043 0308 	orr.w	r3, r3, #8
 8003682:	6193      	str	r3, [r2, #24]
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003690:	23c0      	movs	r3, #192	; 0xc0
 8003692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003694:	2312      	movs	r3, #18
 8003696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369c:	f107 0318 	add.w	r3, r7, #24
 80036a0:	4619      	mov	r1, r3
 80036a2:	4821      	ldr	r0, [pc, #132]	; (8003728 <HAL_I2C_MspInit+0xd0>)
 80036a4:	f005 f98c 	bl	80089c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a8:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	4a1d      	ldr	r2, [pc, #116]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 80036ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036b2:	61d3      	str	r3, [r2, #28]
 80036b4:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80036c0:	e029      	b.n	8003716 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a19      	ldr	r2, [pc, #100]	; (800372c <HAL_I2C_MspInit+0xd4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d124      	bne.n	8003716 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 80036d2:	f043 0308 	orr.w	r3, r3, #8
 80036d6:	6193      	str	r3, [r2, #24]
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036ea:	2312      	movs	r3, #18
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 0318 	add.w	r3, r7, #24
 80036f6:	4619      	mov	r1, r3
 80036f8:	480b      	ldr	r0, [pc, #44]	; (8003728 <HAL_I2C_MspInit+0xd0>)
 80036fa:	f005 f961 	bl	80089c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 8003704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003708:	61d3      	str	r3, [r2, #28]
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_I2C_MspInit+0xcc>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
}
 8003716:	bf00      	nop
 8003718:	3728      	adds	r7, #40	; 0x28
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40005400 	.word	0x40005400
 8003724:	40021000 	.word	0x40021000
 8003728:	40010c00 	.word	0x40010c00
 800372c:	40005800 	.word	0x40005800

08003730 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <MX_IWDG_Init+0x2c>)
 8003736:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <MX_IWDG_Init+0x30>)
 8003738:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <MX_IWDG_Init+0x2c>)
 800373c:	2206      	movs	r2, #6
 800373e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <MX_IWDG_Init+0x2c>)
 8003742:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003746:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003748:	4804      	ldr	r0, [pc, #16]	; (800375c <MX_IWDG_Init+0x2c>)
 800374a:	f006 fc43 	bl	8009fd4 <HAL_IWDG_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003754:	f000 fa76 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000648 	.word	0x20000648
 8003760:	40003000 	.word	0x40003000
 8003764:	00000000 	.word	0x00000000

08003768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800376c:	f003 f9c4 	bl	8006af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003770:	f000 f87a 	bl	8003868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003774:	f7ff fe7e 	bl	8003474 <MX_GPIO_Init>
  MX_DMA_Init();
 8003778:	f7ff fe5e 	bl	8003438 <MX_DMA_Init>
  MX_ADC1_Init();
 800377c:	f7ff f862 	bl	8002844 <MX_ADC1_Init>
  MX_CAN_Init();
 8003780:	f7ff f940 	bl	8002a04 <MX_CAN_Init>
  MX_I2C1_Init();
 8003784:	f7ff ff0c 	bl	80035a0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8003788:	f003 f8b4 	bl	80068f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800378c:	f003 f900 	bl	8006990 <MX_TIM3_Init>
  MX_I2C2_Init();
 8003790:	f7ff ff34 	bl	80035fc <MX_I2C2_Init>
  MX_IWDG_Init();
 8003794:	f7ff ffcc 	bl	8003730 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  BMS_Init();
 8003798:	f000 f8c2 	bl	8003920 <BMS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read voltage per-cell and total voltage
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037a2:	4827      	ldr	r0, [pc, #156]	; (8003840 <main+0xd8>)
 80037a4:	f005 fab7 	bl	8008d16 <HAL_GPIO_WritePin>
	  read_voltage_percell();
 80037a8:	f7fe fe9e 	bl	80024e8 <read_voltage_percell>
	  read_sumvoltage();
 80037ac:	f7fe ff00 	bl	80025b0 <read_sumvoltage>
	  ltc6804_CS_SET(ltc6804_CS_PIN);
 80037b0:	2201      	movs	r2, #1
 80037b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037b6:	4822      	ldr	r0, [pc, #136]	; (8003840 <main+0xd8>)
 80037b8:	f005 faad 	bl	8008d16 <HAL_GPIO_WritePin>

	  //comparing cell voltage to get
	  unbalance_cell = get_balance_status(cellvoltage_float);
 80037bc:	4821      	ldr	r0, [pc, #132]	; (8003844 <main+0xdc>)
 80037be:	f7fe ff3b 	bl	8002638 <get_balance_status>
 80037c2:	4603      	mov	r3, r0
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <main+0xe0>)
 80037c8:	801a      	strh	r2, [r3, #0]

	  // Balancing Process
	  if(BMS_mode == 2 && IBATT < -0.1 && (VBATT > VBATT_BALANCE_START))     //arus charging 0.1 tidak perlu di balancing
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <main+0xe4>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d11b      	bne.n	800380a <main+0xa2>
 80037d2:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <main+0xe8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fc fe92 	bl	8000500 <__aeabi_f2d>
 80037dc:	a316      	add	r3, pc, #88	; (adr r3, 8003838 <main+0xd0>)
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f7fd f957 	bl	8000a94 <__aeabi_dcmplt>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00e      	beq.n	800380a <main+0xa2>
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <main+0xec>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4919      	ldr	r1, [pc, #100]	; (8003858 <main+0xf0>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd fcee 	bl	80011d4 <__aeabi_fcmpgt>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <main+0xa2>
	  {
		  LTC681x_balance_cell(balance_status);
 80037fe:	4b17      	ldr	r3, [pc, #92]	; (800385c <main+0xf4>)
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe ffca 	bl	800279c <LTC681x_balance_cell>
 8003808:	e005      	b.n	8003816 <main+0xae>
	  }
	  else
	  {
		  balance_status = 0;
 800380a:	4b14      	ldr	r3, [pc, #80]	; (800385c <main+0xf4>)
 800380c:	2200      	movs	r2, #0
 800380e:	801a      	strh	r2, [r3, #0]
		  LTC681x_balance_cell(0);
 8003810:	2000      	movs	r0, #0
 8003812:	f7fe ffc3 	bl	800279c <LTC681x_balance_cell>
	  }

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003816:	2140      	movs	r1, #64	; 0x40
 8003818:	4809      	ldr	r0, [pc, #36]	; (8003840 <main+0xd8>)
 800381a:	f005 fa94 	bl	8008d46 <HAL_GPIO_TogglePin>

//	  //test turn off system
//	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
//		  HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);

	  BMS_ScreenMode_RUN();
 800381e:	f000 f925 	bl	8003a6c <BMS_ScreenMode_RUN>
	  HAL_IWDG_Refresh(&hiwdg);
 8003822:	480f      	ldr	r0, [pc, #60]	; (8003860 <main+0xf8>)
 8003824:	f006 fc18 	bl	800a058 <HAL_IWDG_Refresh>
	  test++;
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <main+0xfc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <main+0xfc>)
 8003830:	6013      	str	r3, [r2, #0]
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 8003832:	e7b3      	b.n	800379c <main+0x34>
 8003834:	f3af 8000 	nop.w
 8003838:	9999999a 	.word	0x9999999a
 800383c:	bfb99999 	.word	0xbfb99999
 8003840:	40011000 	.word	0x40011000
 8003844:	200003c0 	.word	0x200003c0
 8003848:	20000292 	.word	0x20000292
 800384c:	2000036c 	.word	0x2000036c
 8003850:	200002f4 	.word	0x200002f4
 8003854:	20000280 	.word	0x20000280
 8003858:	42040000 	.word	0x42040000
 800385c:	20000320 	.word	0x20000320
 8003860:	20000648 	.word	0x20000648
 8003864:	20000678 	.word	0x20000678

08003868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b096      	sub	sp, #88	; 0x58
 800386c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800386e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003872:	2228      	movs	r2, #40	; 0x28
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f007 fd86 	bl	800b388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800387c:	f107 031c 	add.w	r3, r7, #28
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	611a      	str	r2, [r3, #16]
 800389a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800389c:	230a      	movs	r3, #10
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038a0:	2301      	movs	r3, #1
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038a4:	2310      	movs	r3, #16
 80038a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80038a8:	2301      	movs	r3, #1
 80038aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ac:	2302      	movs	r3, #2
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80038b0:	2300      	movs	r3, #0
 80038b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80038b4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80038b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038be:	4618      	mov	r0, r3
 80038c0:	f006 fbda 	bl	800a078 <HAL_RCC_OscConfig>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80038ca:	f000 f9bb 	bl	8003c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038ce:	230f      	movs	r3, #15
 80038d0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038d2:	2302      	movs	r3, #2
 80038d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038e4:	f107 031c 	add.w	r3, r7, #28
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f006 fe44 	bl	800a578 <HAL_RCC_ClockConfig>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80038f6:	f000 f9a5 	bl	8003c44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80038fa:	2302      	movs	r3, #2
 80038fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80038fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003902:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	4618      	mov	r0, r3
 8003908:	f006 ffbc 	bl	800a884 <HAL_RCCEx_PeriphCLKConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003912:	f000 f997 	bl	8003c44 <Error_Handler>
  }
}
 8003916:	bf00      	nop
 8003918:	3758      	adds	r7, #88	; 0x58
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <BMS_Init>:

/* USER CODE BEGIN 4 */
void BMS_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 8003926:	2210      	movs	r2, #16
 8003928:	4945      	ldr	r1, [pc, #276]	; (8003a40 <BMS_Init+0x120>)
 800392a:	f640 2022 	movw	r0, #2594	; 0xa22
 800392e:	f007 fd19 	bl	800b364 <itoa>
	int ii=0;
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8003936:	e01a      	b.n	800396e <BMS_Init+0x4e>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8003938:	4a41      	ldr	r2, [pc, #260]	; (8003a40 <BMS_Init+0x120>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	70fb      	strb	r3, [r7, #3]
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	3301      	adds	r3, #1
 8003946:	4a3f      	ldr	r2, [pc, #252]	; (8003a44 <BMS_Init+0x124>)
 8003948:	4413      	add	r3, r2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d102      	bne.n	800395a <BMS_Init+0x3a>
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	3b20      	subs	r3, #32
 8003958:	e000      	b.n	800395c <BMS_Init+0x3c>
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	b2d9      	uxtb	r1, r3
 800395e:	4a3a      	ldr	r2, [pc, #232]	; (8003a48 <BMS_Init+0x128>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	460a      	mov	r2, r1
 8003966:	701a      	strb	r2, [r3, #0]
		ii++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3301      	adds	r3, #1
 800396c:	607b      	str	r3, [r7, #4]
	while(ii<6){
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b05      	cmp	r3, #5
 8003972:	dde1      	ble.n	8003938 <BMS_Init+0x18>
	}

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8003974:	2201      	movs	r2, #1
 8003976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800397a:	4834      	ldr	r0, [pc, #208]	; (8003a4c <BMS_Init+0x12c>)
 800397c:	f005 f9cb 	bl	8008d16 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003984:	f003 f91a 	bl	8006bbc <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800398c:	482f      	ldr	r0, [pc, #188]	; (8003a4c <BMS_Init+0x12c>)
 800398e:	f005 f9da 	bl	8008d46 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8003992:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003996:	f003 f911 	bl	8006bbc <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800399a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800399e:	482b      	ldr	r0, [pc, #172]	; (8003a4c <BMS_Init+0x12c>)
 80039a0:	f005 f9d1 	bl	8008d46 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80039a4:	2064      	movs	r0, #100	; 0x64
 80039a6:	f003 f909 	bl	8006bbc <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80039aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039ae:	4827      	ldr	r0, [pc, #156]	; (8003a4c <BMS_Init+0x12c>)
 80039b0:	f005 f9c9 	bl	8008d46 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80039b4:	2064      	movs	r0, #100	; 0x64
 80039b6:	f003 f901 	bl	8006bbc <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80039ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039be:	4823      	ldr	r0, [pc, #140]	; (8003a4c <BMS_Init+0x12c>)
 80039c0:	f005 f9c1 	bl	8008d46 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80039c4:	2064      	movs	r0, #100	; 0x64
 80039c6:	f003 f8f9 	bl	8006bbc <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039d0:	481e      	ldr	r0, [pc, #120]	; (8003a4c <BMS_Init+0x12c>)
 80039d2:	f005 f9a0 	bl	8008d16 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80039d6:	2064      	movs	r0, #100	; 0x64
 80039d8:	f003 f8f0 	bl	8006bbc <HAL_Delay>
	SSD1306_Puts ("10S13P", &Font_7x10, 1);
	SSD1306_UpdateScreen(); //display
	SSD1306_Fill (0);
*/

	ltc6804_GPIO_Config();
 80039dc:	f7fe f830 	bl	8001a40 <ltc6804_GPIO_Config>
	ltc6804_SPIInit();
 80039e0:	f7fe f88c 	bl	8001afc <ltc6804_SPIInit>

	set_adc(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL); //ADC Setting
 80039e4:	2300      	movs	r3, #0
 80039e6:	2200      	movs	r2, #0
 80039e8:	2100      	movs	r1, #0
 80039ea:	2003      	movs	r0, #3
 80039ec:	f7fe f980 	bl	8001cf0 <set_adc>
	HAL_Delay(10);
 80039f0:	200a      	movs	r0, #10
 80039f2:	f003 f8e3 	bl	8006bbc <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_value, 5);
 80039f6:	2205      	movs	r2, #5
 80039f8:	4915      	ldr	r1, [pc, #84]	; (8003a50 <BMS_Init+0x130>)
 80039fa:	4816      	ldr	r0, [pc, #88]	; (8003a54 <BMS_Init+0x134>)
 80039fc:	f003 f9ec 	bl	8006dd8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8003a00:	4815      	ldr	r0, [pc, #84]	; (8003a58 <BMS_Init+0x138>)
 8003a02:	f007 f845 	bl	800aa90 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8003a06:	4815      	ldr	r0, [pc, #84]	; (8003a5c <BMS_Init+0x13c>)
 8003a08:	f007 f842 	bl	800aa90 <HAL_TIM_Base_Start_IT>

	BATT_State=STATE_STANDBY;
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <BMS_Init+0x140>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8003a12:	f7fd fdb7 	bl	8001584 <Batt_Open_Mode>
	BATT_Start_Up = 1;
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <BMS_Init+0x144>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
	flag_start_shutdown = 0;
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <BMS_Init+0x148>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8003a22:	2032      	movs	r0, #50	; 0x32
 8003a24:	f003 f8ca 	bl	8006bbc <HAL_Delay>
	EEPROM_isDeviceReady(0xA0);
 8003a28:	20a0      	movs	r0, #160	; 0xa0
 8003a2a:	f7fd ffb1 	bl	8001990 <EEPROM_isDeviceReady>
	BMS_CAN_Config();
 8003a2e:	f7ff fcc5 	bl	80033bc <BMS_CAN_Config>
	HAL_Delay(100);
 8003a32:	2064      	movs	r0, #100	; 0x64
 8003a34:	f003 f8c2 	bl	8006bbc <HAL_Delay>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	20000670 	.word	0x20000670
 8003a44:	08010440 	.word	0x08010440
 8003a48:	20000668 	.word	0x20000668
 8003a4c:	40011000 	.word	0x40011000
 8003a50:	200002e8 	.word	0x200002e8
 8003a54:	2000042c 	.word	0x2000042c
 8003a58:	20000898 	.word	0x20000898
 8003a5c:	20000850 	.word	0x20000850
 8003a60:	2000067c 	.word	0x2000067c
 8003a64:	2000023d 	.word	0x2000023d
 8003a68:	2000027d 	.word	0x2000027d

08003a6c <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	if(flag_start_shutdown == 0)
 8003a70:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <BMS_ScreenMode_RUN+0x174>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d17a      	bne.n	8003b6e <BMS_ScreenMode_RUN+0x102>
		SSD1306_GotoXY(25,38);
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_UpdateScreen();
		*/

		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8003a78:	4b5a      	ldr	r3, [pc, #360]	; (8003be4 <BMS_ScreenMode_RUN+0x178>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5a      	ldr	r2, [pc, #360]	; (8003be8 <BMS_ScreenMode_RUN+0x17c>)
 8003a7e:	6013      	str	r3, [r2, #0]
		Batt_Open_Mode();
 8003a80:	f7fd fd80 	bl	8001584 <Batt_Open_Mode>

		flag_trip_overtemperature=OFF;
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <BMS_ScreenMode_RUN+0x180>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
		flag_trip_undertemperature=OFF;
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <BMS_ScreenMode_RUN+0x184>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverDischarge=OFF;
 8003a90:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <BMS_ScreenMode_RUN+0x188>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8003a96:	4b58      	ldr	r3, [pc, #352]	; (8003bf8 <BMS_ScreenMode_RUN+0x18c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
		flag_trip_undervoltage=OFF;
 8003a9c:	4b57      	ldr	r3, [pc, #348]	; (8003bfc <BMS_ScreenMode_RUN+0x190>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=OFF;
 8003aa2:	4b57      	ldr	r3, [pc, #348]	; (8003c00 <BMS_ScreenMode_RUN+0x194>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentdischarge=OFF;
 8003aa8:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <BMS_ScreenMode_RUN+0x198>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentcharge=OFF;
 8003aae:	4b56      	ldr	r3, [pc, #344]	; (8003c08 <BMS_ScreenMode_RUN+0x19c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
		flag_trip_shortcircuit=OFF;
 8003ab4:	4b55      	ldr	r3, [pc, #340]	; (8003c0c <BMS_ScreenMode_RUN+0x1a0>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
		flag_trip_systemfailure=OFF;
 8003aba:	4b55      	ldr	r3, [pc, #340]	; (8003c10 <BMS_ScreenMode_RUN+0x1a4>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
		flag_trip_unbalance=OFF;
 8003ac0:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <BMS_ScreenMode_RUN+0x1a8>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
		flag_get_UNIQUECODE=OFF;
 8003ac6:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <BMS_ScreenMode_RUN+0x1ac>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8003acc:	4b45      	ldr	r3, [pc, #276]	; (8003be4 <BMS_ScreenMode_RUN+0x178>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a45      	ldr	r2, [pc, #276]	; (8003be8 <BMS_ScreenMode_RUN+0x17c>)
 8003ad2:	6013      	str	r3, [r2, #0]

		if(last_flag_start_shutdown==1) Shutdown_time_last = HAL_GetTick();
 8003ad4:	4b51      	ldr	r3, [pc, #324]	; (8003c1c <BMS_ScreenMode_RUN+0x1b0>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <BMS_ScreenMode_RUN+0x7c>
 8003adc:	f003 f864 	bl	8006ba8 <HAL_GetTick>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b4e      	ldr	r3, [pc, #312]	; (8003c20 <BMS_ScreenMode_RUN+0x1b4>)
 8003ae6:	601a      	str	r2, [r3, #0]

		// Automatic sleep after 30s without receive CAN
		Shutdown_time=HAL_GetTick();
 8003ae8:	f003 f85e 	bl	8006ba8 <HAL_GetTick>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	4b4c      	ldr	r3, [pc, #304]	; (8003c24 <BMS_ScreenMode_RUN+0x1b8>)
 8003af2:	601a      	str	r2, [r3, #0]
		if(Shutdown_time-Shutdown_time_last>Shutdown_tick)
 8003af4:	4b4b      	ldr	r3, [pc, #300]	; (8003c24 <BMS_ScreenMode_RUN+0x1b8>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4b49      	ldr	r3, [pc, #292]	; (8003c20 <BMS_ScreenMode_RUN+0x1b4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	1ad2      	subs	r2, r2, r3
 8003afe:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <BMS_ScreenMode_RUN+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	dd2f      	ble.n	8003b66 <BMS_ScreenMode_RUN+0xfa>
		{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003b06:	2201      	movs	r2, #1
 8003b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b0c:	4847      	ldr	r0, [pc, #284]	; (8003c2c <BMS_ScreenMode_RUN+0x1c0>)
 8003b0e:	f005 f902 	bl	8008d16 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8003b12:	2064      	movs	r0, #100	; 0x64
 8003b14:	f003 f852 	bl	8006bbc <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b1c:	4843      	ldr	r0, [pc, #268]	; (8003c2c <BMS_ScreenMode_RUN+0x1c0>)
 8003b1e:	f005 f912 	bl	8008d46 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003b22:	2064      	movs	r0, #100	; 0x64
 8003b24:	f003 f84a 	bl	8006bbc <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003b28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b2c:	483f      	ldr	r0, [pc, #252]	; (8003c2c <BMS_ScreenMode_RUN+0x1c0>)
 8003b2e:	f005 f90a 	bl	8008d46 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003b32:	2064      	movs	r0, #100	; 0x64
 8003b34:	f003 f842 	bl	8006bbc <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b3c:	483b      	ldr	r0, [pc, #236]	; (8003c2c <BMS_ScreenMode_RUN+0x1c0>)
 8003b3e:	f005 f902 	bl	8008d46 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003b42:	2064      	movs	r0, #100	; 0x64
 8003b44:	f003 f83a 	bl	8006bbc <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b4c:	4837      	ldr	r0, [pc, #220]	; (8003c2c <BMS_ScreenMode_RUN+0x1c0>)
 8003b4e:	f005 f8fa 	bl	8008d46 <HAL_GPIO_TogglePin>
			HAL_Delay(750);
 8003b52:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003b56:	f003 f831 	bl	8006bbc <HAL_Delay>
			HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b60:	4833      	ldr	r0, [pc, #204]	; (8003c30 <BMS_ScreenMode_RUN+0x1c4>)
 8003b62:	f005 f8d8 	bl	8008d16 <HAL_GPIO_WritePin>
		}

		last_flag_start_shutdown = 0;
 8003b66:	4b2d      	ldr	r3, [pc, #180]	; (8003c1c <BMS_ScreenMode_RUN+0x1b0>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e032      	b.n	8003bd4 <BMS_ScreenMode_RUN+0x168>
		SSD1306_GotoXY(0,50);
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);

		SSD1306_UpdateScreen();
*/
		if(BMS_mode==0) Batt_Open_Mode();
 8003b6e:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <BMS_ScreenMode_RUN+0x1c8>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <BMS_ScreenMode_RUN+0x110>
 8003b76:	f7fd fd05 	bl	8001584 <Batt_Open_Mode>
 8003b7a:	e013      	b.n	8003ba4 <BMS_ScreenMode_RUN+0x138>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <BMS_ScreenMode_RUN+0x1c8>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <BMS_ScreenMode_RUN+0x11e>
 8003b84:	f7fd fbae 	bl	80012e4 <Batt_Discharge_Mode>
 8003b88:	e00c      	b.n	8003ba4 <BMS_ScreenMode_RUN+0x138>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <BMS_ScreenMode_RUN+0x1c8>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d102      	bne.n	8003b98 <BMS_ScreenMode_RUN+0x12c>
 8003b92:	f7fd fc15 	bl	80013c0 <Batt_Charge_Mode>
 8003b96:	e005      	b.n	8003ba4 <BMS_ScreenMode_RUN+0x138>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8003b98:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <BMS_ScreenMode_RUN+0x1c8>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d101      	bne.n	8003ba4 <BMS_ScreenMode_RUN+0x138>
 8003ba0:	f7fd fc7c 	bl	800149c <Batt_Full_CD_Mode>

	//  Automatically sleep after 30s without receive CAN
		Sleep_time=HAL_GetTick();
 8003ba4:	f003 f800 	bl	8006ba8 <HAL_GetTick>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <BMS_ScreenMode_RUN+0x1cc>)
 8003bae:	601a      	str	r2, [r3, #0]
		if(Sleep_time-Active_time_last>Sleep_tick)
 8003bb0:	4b21      	ldr	r3, [pc, #132]	; (8003c38 <BMS_ScreenMode_RUN+0x1cc>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <BMS_ScreenMode_RUN+0x1d0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1ad2      	subs	r2, r2, r3
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <BMS_ScreenMode_RUN+0x1d4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	dd05      	ble.n	8003bce <BMS_ScreenMode_RUN+0x162>
		{
			BMS_mode=0;
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <BMS_ScreenMode_RUN+0x1c8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
			flag_start_shutdown=0;
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <BMS_ScreenMode_RUN+0x174>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
		}
		last_flag_start_shutdown = 1;
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <BMS_ScreenMode_RUN+0x1b0>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f002 fff1 	bl	8006bbc <HAL_Delay>
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000027d 	.word	0x2000027d
 8003be4:	20000368 	.word	0x20000368
 8003be8:	20000360 	.word	0x20000360
 8003bec:	2000027c 	.word	0x2000027c
 8003bf0:	200002fc 	.word	0x200002fc
 8003bf4:	20000328 	.word	0x20000328
 8003bf8:	2000025d 	.word	0x2000025d
 8003bfc:	200002fd 	.word	0x200002fd
 8003c00:	20000374 	.word	0x20000374
 8003c04:	2000030c 	.word	0x2000030c
 8003c08:	20000322 	.word	0x20000322
 8003c0c:	2000025f 	.word	0x2000025f
 8003c10:	20000268 	.word	0x20000268
 8003c14:	2000025c 	.word	0x2000025c
 8003c18:	20000260 	.word	0x20000260
 8003c1c:	2000035c 	.word	0x2000035c
 8003c20:	20000354 	.word	0x20000354
 8003c24:	20000344 	.word	0x20000344
 8003c28:	20000008 	.word	0x20000008
 8003c2c:	40011000 	.word	0x40011000
 8003c30:	40010c00 	.word	0x40010c00
 8003c34:	2000036c 	.word	0x2000036c
 8003c38:	20000270 	.word	0x20000270
 8003c3c:	20000324 	.word	0x20000324
 8003c40:	20000004 	.word	0x20000004

08003c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c48:	b672      	cpsid	i
}
 8003c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c4c:	e7fe      	b.n	8003c4c <Error_Handler+0x8>
	...

08003c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_MspInit+0x5c>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_MspInit+0x5c>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6193      	str	r3, [r2, #24]
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_MspInit+0x5c>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_MspInit+0x5c>)
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	4a0e      	ldr	r2, [pc, #56]	; (8003cac <HAL_MspInit+0x5c>)
 8003c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c78:	61d3      	str	r3, [r2, #28]
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <HAL_MspInit+0x5c>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_MspInit+0x60>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_MspInit+0x60>)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	40010000 	.word	0x40010000

08003cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cb8:	e7fe      	b.n	8003cb8 <NMI_Handler+0x4>

08003cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cbe:	e7fe      	b.n	8003cbe <HardFault_Handler+0x4>

08003cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <MemManage_Handler+0x4>

08003cc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cca:	e7fe      	b.n	8003cca <BusFault_Handler+0x4>

08003ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cd0:	e7fe      	b.n	8003cd0 <UsageFault_Handler+0x4>

08003cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr

08003cde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cfa:	f002 ff43 	bl	8006b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <DMA1_Channel1_IRQHandler+0x10>)
 8003d0a:	f004 fbef 	bl	80084ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2000045c 	.word	0x2000045c

08003d18 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003d1c:	4802      	ldr	r0, [pc, #8]	; (8003d28 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003d1e:	f003 ffde 	bl	8007cde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200004bc 	.word	0x200004bc
 8003d2c:	00000000 	.word	0x00000000

08003d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d34:	48b8      	ldr	r0, [pc, #736]	; (8004018 <TIM2_IRQHandler+0x2e8>)
 8003d36:	f006 ff19 	bl	800ab6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  hitung_suhu++;
 8003d3a:	4bb8      	ldr	r3, [pc, #736]	; (800401c <TIM2_IRQHandler+0x2ec>)
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	4bb6      	ldr	r3, [pc, #728]	; (800401c <TIM2_IRQHandler+0x2ec>)
 8003d44:	801a      	strh	r2, [r3, #0]
  test_tim2++;
 8003d46:	4bb6      	ldr	r3, [pc, #728]	; (8004020 <TIM2_IRQHandler+0x2f0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4ab4      	ldr	r2, [pc, #720]	; (8004020 <TIM2_IRQHandler+0x2f0>)
 8003d4e:	6013      	str	r3, [r2, #0]

  //Moving Average
  sumI=sumI-i_arrdata[i];		//menghapus sample data pertama/data lama
 8003d50:	4bb4      	ldr	r3, [pc, #720]	; (8004024 <TIM2_IRQHandler+0x2f4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4ab4      	ldr	r2, [pc, #720]	; (8004028 <TIM2_IRQHandler+0x2f8>)
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	49b4      	ldr	r1, [pc, #720]	; (800402c <TIM2_IRQHandler+0x2fc>)
 8003d5a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	4ab0      	ldr	r2, [pc, #704]	; (8004024 <TIM2_IRQHandler+0x2f4>)
 8003d62:	6013      	str	r3, [r2, #0]
  i_arrdata[i]=adc_value[0];	//save nilai ADC dari variable DMA
 8003d64:	4bb0      	ldr	r3, [pc, #704]	; (8004028 <TIM2_IRQHandler+0x2f8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4ab1      	ldr	r2, [pc, #708]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003d6a:	8811      	ldrh	r1, [r2, #0]
 8003d6c:	4aaf      	ldr	r2, [pc, #700]	; (800402c <TIM2_IRQHandler+0x2fc>)
 8003d6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  sumI=sumI+i_arrdata[i];		//menambahkan sample data paling baru
 8003d72:	4bad      	ldr	r3, [pc, #692]	; (8004028 <TIM2_IRQHandler+0x2f8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4aad      	ldr	r2, [pc, #692]	; (800402c <TIM2_IRQHandler+0x2fc>)
 8003d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4ba9      	ldr	r3, [pc, #676]	; (8004024 <TIM2_IRQHandler+0x2f4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4413      	add	r3, r2
 8003d84:	4aa7      	ldr	r2, [pc, #668]	; (8004024 <TIM2_IRQHandler+0x2f4>)
 8003d86:	6013      	str	r3, [r2, #0]
  i_datadigi=sumI/maxdata;	//menghitung rata-rata
 8003d88:	4ba6      	ldr	r3, [pc, #664]	; (8004024 <TIM2_IRQHandler+0x2f4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4aa9      	ldr	r2, [pc, #676]	; (8004034 <TIM2_IRQHandler+0x304>)
 8003d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d92:	1192      	asrs	r2, r2, #6
 8003d94:	17db      	asrs	r3, r3, #31
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd f80b 	bl	8000db4 <__aeabi_i2f>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4aa5      	ldr	r2, [pc, #660]	; (8004038 <TIM2_IRQHandler+0x308>)
 8003da2:	6013      	str	r3, [r2, #0]

  sum_datadigi_suhu1+=adc_value[1];
 8003da4:	4ba2      	ldr	r3, [pc, #648]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003da6:	885b      	ldrh	r3, [r3, #2]
 8003da8:	461a      	mov	r2, r3
 8003daa:	4ba4      	ldr	r3, [pc, #656]	; (800403c <TIM2_IRQHandler+0x30c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4413      	add	r3, r2
 8003db0:	4aa2      	ldr	r2, [pc, #648]	; (800403c <TIM2_IRQHandler+0x30c>)
 8003db2:	6013      	str	r3, [r2, #0]
  sum_datadigi_suhu2+=adc_value[2];
 8003db4:	4b9e      	ldr	r3, [pc, #632]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003db6:	889b      	ldrh	r3, [r3, #4]
 8003db8:	461a      	mov	r2, r3
 8003dba:	4ba1      	ldr	r3, [pc, #644]	; (8004040 <TIM2_IRQHandler+0x310>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a9f      	ldr	r2, [pc, #636]	; (8004040 <TIM2_IRQHandler+0x310>)
 8003dc2:	6013      	str	r3, [r2, #0]
  sum_datadigi_suhu3+=adc_value[3];
 8003dc4:	4b9a      	ldr	r3, [pc, #616]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003dc6:	88db      	ldrh	r3, [r3, #6]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b9e      	ldr	r3, [pc, #632]	; (8004044 <TIM2_IRQHandler+0x314>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4413      	add	r3, r2
 8003dd0:	4a9c      	ldr	r2, [pc, #624]	; (8004044 <TIM2_IRQHandler+0x314>)
 8003dd2:	6013      	str	r3, [r2, #0]
  sum_datadigi_suhu4+=adc_value[4];
 8003dd4:	4b96      	ldr	r3, [pc, #600]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003dd6:	891b      	ldrh	r3, [r3, #8]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4b9b      	ldr	r3, [pc, #620]	; (8004048 <TIM2_IRQHandler+0x318>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4413      	add	r3, r2
 8003de0:	4a99      	ldr	r2, [pc, #612]	; (8004048 <TIM2_IRQHandler+0x318>)
 8003de2:	6013      	str	r3, [r2, #0]
  // *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

  VBATT = sum_voltage;
 8003de4:	4b99      	ldr	r3, [pc, #612]	; (800404c <TIM2_IRQHandler+0x31c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a99      	ldr	r2, [pc, #612]	; (8004050 <TIM2_IRQHandler+0x320>)
 8003dea:	6013      	str	r3, [r2, #0]
  if(VBATT<0) VBATT=-1;
 8003dec:	4b98      	ldr	r3, [pc, #608]	; (8004050 <TIM2_IRQHandler+0x320>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f04f 0100 	mov.w	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fd f9cf 	bl	8001198 <__aeabi_fcmplt>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <TIM2_IRQHandler+0xd6>
 8003e00:	4b93      	ldr	r3, [pc, #588]	; (8004050 <TIM2_IRQHandler+0x320>)
 8003e02:	4a94      	ldr	r2, [pc, #592]	; (8004054 <TIM2_IRQHandler+0x324>)
 8003e04:	601a      	str	r2, [r3, #0]
	  IBATT = 0.062151574718308*i_datadigi - 121.796885042846 - OFFSET_SENSOR_ARUS; // Modul B fix
	  IBATT_for_offset_cal= 0.062151574718308*i_datadigi - 121.796885042846;
  }

  else if (UNIQUE_Code == 0x00A22) {
	  IBATT = 0.0635607965300084*i_datadigi - 125.923575896323 - OFFSET_SENSOR_ARUS; // Modul B fix
 8003e06:	4b8c      	ldr	r3, [pc, #560]	; (8004038 <TIM2_IRQHandler+0x308>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc fb78 	bl	8000500 <__aeabi_f2d>
 8003e10:	a379      	add	r3, pc, #484	; (adr r3, 8003ff8 <TIM2_IRQHandler+0x2c8>)
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f7fc fbcb 	bl	80005b0 <__aeabi_dmul>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	a377      	add	r3, pc, #476	; (adr r3, 8004000 <TIM2_IRQHandler+0x2d0>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc fa0a 	bl	8000240 <__aeabi_dsub>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4614      	mov	r4, r2
 8003e32:	461d      	mov	r5, r3
 8003e34:	4b88      	ldr	r3, [pc, #544]	; (8004058 <TIM2_IRQHandler+0x328>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fc fb61 	bl	8000500 <__aeabi_f2d>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	f7fc f9fb 	bl	8000240 <__aeabi_dsub>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	f7fc fea5 	bl	8000ba0 <__aeabi_d2f>
 8003e56:	4603      	mov	r3, r0
 8003e58:	4a80      	ldr	r2, [pc, #512]	; (800405c <TIM2_IRQHandler+0x32c>)
 8003e5a:	6013      	str	r3, [r2, #0]
	  IBATT_for_offset_cal= 0.0635607965300084*i_datadigi - 125.923575896323;
 8003e5c:	4b76      	ldr	r3, [pc, #472]	; (8004038 <TIM2_IRQHandler+0x308>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fb4d 	bl	8000500 <__aeabi_f2d>
 8003e66:	a364      	add	r3, pc, #400	; (adr r3, 8003ff8 <TIM2_IRQHandler+0x2c8>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f7fc fba0 	bl	80005b0 <__aeabi_dmul>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	a361      	add	r3, pc, #388	; (adr r3, 8004000 <TIM2_IRQHandler+0x2d0>)
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f7fc f9df 	bl	8000240 <__aeabi_dsub>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4610      	mov	r0, r2
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f7fc fe89 	bl	8000ba0 <__aeabi_d2f>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4a73      	ldr	r2, [pc, #460]	; (8004060 <TIM2_IRQHandler+0x330>)
 8003e92:	6013      	str	r3, [r2, #0]
  }

  if(hitung_suhu >= interval_hitungsuhu) {
 8003e94:	4b61      	ldr	r3, [pc, #388]	; (800401c <TIM2_IRQHandler+0x2ec>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	2bc7      	cmp	r3, #199	; 0xc7
 8003e9a:	f240 8167 	bls.w	800416c <TIM2_IRQHandler+0x43c>

	  Res_T1=sum_datadigi_suhu1/hitung_suhu*10000/(3900-adc_value[1]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8003e9e:	4b67      	ldr	r3, [pc, #412]	; (800403c <TIM2_IRQHandler+0x30c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5e      	ldr	r2, [pc, #376]	; (800401c <TIM2_IRQHandler+0x2ec>)
 8003ea4:	8812      	ldrh	r2, [r2, #0]
 8003ea6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eaa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eae:	fb02 f203 	mul.w	r2, r2, r3
 8003eb2:	4b5f      	ldr	r3, [pc, #380]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003eb4:	885b      	ldrh	r3, [r3, #2]
 8003eb6:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003eba:	330c      	adds	r3, #12
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fc ff73 	bl	8000dac <__aeabi_ui2f>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4a66      	ldr	r2, [pc, #408]	; (8004064 <TIM2_IRQHandler+0x334>)
 8003eca:	6013      	str	r3, [r2, #0]
	  Suhu_T1= -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003ecc:	4b65      	ldr	r3, [pc, #404]	; (8004064 <TIM2_IRQHandler+0x334>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fb15 	bl	8000500 <__aeabi_f2d>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	f00b fe9f 	bl	800fc20 <log>
 8003ee2:	a349      	add	r3, pc, #292	; (adr r3, 8004008 <TIM2_IRQHandler+0x2d8>)
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f7fc fb62 	bl	80005b0 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	a346      	add	r3, pc, #280	; (adr r3, 8004010 <TIM2_IRQHandler+0x2e0>)
 8003ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efa:	f7fc f9a3 	bl	8000244 <__adddf3>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7fc fe4b 	bl	8000ba0 <__aeabi_d2f>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4a56      	ldr	r2, [pc, #344]	; (8004068 <TIM2_IRQHandler+0x338>)
 8003f0e:	6013      	str	r3, [r2, #0]
	  Res_T2=sum_datadigi_suhu2/hitung_suhu*10000/(3900-adc_value[2]);
 8003f10:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <TIM2_IRQHandler+0x310>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a41      	ldr	r2, [pc, #260]	; (800401c <TIM2_IRQHandler+0x2ec>)
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f20:	fb02 f203 	mul.w	r2, r2, r3
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003f26:	889b      	ldrh	r3, [r3, #4]
 8003f28:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc ff3a 	bl	8000dac <__aeabi_ui2f>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4a4c      	ldr	r2, [pc, #304]	; (800406c <TIM2_IRQHandler+0x33c>)
 8003f3c:	6013      	str	r3, [r2, #0]
	  Suhu_T2= -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003f3e:	4b4b      	ldr	r3, [pc, #300]	; (800406c <TIM2_IRQHandler+0x33c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc fadc 	bl	8000500 <__aeabi_f2d>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	f00b fe66 	bl	800fc20 <log>
 8003f54:	a32c      	add	r3, pc, #176	; (adr r3, 8004008 <TIM2_IRQHandler+0x2d8>)
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	f7fc fb29 	bl	80005b0 <__aeabi_dmul>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	a32a      	add	r3, pc, #168	; (adr r3, 8004010 <TIM2_IRQHandler+0x2e0>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc f96a 	bl	8000244 <__adddf3>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	f7fc fe12 	bl	8000ba0 <__aeabi_d2f>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4a3c      	ldr	r2, [pc, #240]	; (8004070 <TIM2_IRQHandler+0x340>)
 8003f80:	6013      	str	r3, [r2, #0]
	  Res_T3=sum_datadigi_suhu3/hitung_suhu*10000/(3900-adc_value[3]);
 8003f82:	4b30      	ldr	r3, [pc, #192]	; (8004044 <TIM2_IRQHandler+0x314>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a25      	ldr	r2, [pc, #148]	; (800401c <TIM2_IRQHandler+0x2ec>)
 8003f88:	8812      	ldrh	r2, [r2, #0]
 8003f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f92:	fb02 f203 	mul.w	r2, r2, r3
 8003f96:	4b26      	ldr	r3, [pc, #152]	; (8004030 <TIM2_IRQHandler+0x300>)
 8003f98:	88db      	ldrh	r3, [r3, #6]
 8003f9a:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc ff01 	bl	8000dac <__aeabi_ui2f>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4a31      	ldr	r2, [pc, #196]	; (8004074 <TIM2_IRQHandler+0x344>)
 8003fae:	6013      	str	r3, [r2, #0]
	  Suhu_T3= -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003fb0:	4b30      	ldr	r3, [pc, #192]	; (8004074 <TIM2_IRQHandler+0x344>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fc faa3 	bl	8000500 <__aeabi_f2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f00b fe2d 	bl	800fc20 <log>
 8003fc6:	a310      	add	r3, pc, #64	; (adr r3, 8004008 <TIM2_IRQHandler+0x2d8>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc faf0 	bl	80005b0 <__aeabi_dmul>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	a30d      	add	r3, pc, #52	; (adr r3, 8004010 <TIM2_IRQHandler+0x2e0>)
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f7fc f931 	bl	8000244 <__adddf3>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7fc fdd9 	bl	8000ba0 <__aeabi_d2f>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	e042      	b.n	8004078 <TIM2_IRQHandler+0x348>
 8003ff2:	bf00      	nop
 8003ff4:	f3af 8000 	nop.w
 8003ff8:	366772dc 	.word	0x366772dc
 8003ffc:	3fb04585 	.word	0x3fb04585
 8004000:	de138532 	.word	0xde138532
 8004004:	405f7b1b 	.word	0x405f7b1b
 8004008:	cccccccd 	.word	0xcccccccd
 800400c:	c0380ccc 	.word	0xc0380ccc
 8004010:	b851eb85 	.word	0xb851eb85
 8004014:	406ecd1e 	.word	0x406ecd1e
 8004018:	20000898 	.word	0x20000898
 800401c:	20000840 	.word	0x20000840
 8004020:	20000364 	.word	0x20000364
 8004024:	2000083c 	.word	0x2000083c
 8004028:	20000828 	.word	0x20000828
 800402c:	20000680 	.word	0x20000680
 8004030:	200002e8 	.word	0x200002e8
 8004034:	51eb851f 	.word	0x51eb851f
 8004038:	20000278 	.word	0x20000278
 800403c:	20000838 	.word	0x20000838
 8004040:	20000820 	.word	0x20000820
 8004044:	20000818 	.word	0x20000818
 8004048:	20000844 	.word	0x20000844
 800404c:	2000041c 	.word	0x2000041c
 8004050:	20000280 	.word	0x20000280
 8004054:	bf800000 	.word	0xbf800000
 8004058:	20000360 	.word	0x20000360
 800405c:	200002f4 	.word	0x200002f4
 8004060:	20000368 	.word	0x20000368
 8004064:	200002e4 	.word	0x200002e4
 8004068:	20000304 	.word	0x20000304
 800406c:	2000032c 	.word	0x2000032c
 8004070:	20000378 	.word	0x20000378
 8004074:	20000358 	.word	0x20000358
 8004078:	4a47      	ldr	r2, [pc, #284]	; (8004198 <TIM2_IRQHandler+0x468>)
 800407a:	6013      	str	r3, [r2, #0]
	  Res_T4=sum_datadigi_suhu4/hitung_suhu*10000/(3900-adc_value[4]);
 800407c:	4b47      	ldr	r3, [pc, #284]	; (800419c <TIM2_IRQHandler+0x46c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a47      	ldr	r2, [pc, #284]	; (80041a0 <TIM2_IRQHandler+0x470>)
 8004082:	8812      	ldrh	r2, [r2, #0]
 8004084:	fbb3 f3f2 	udiv	r3, r3, r2
 8004088:	f242 7210 	movw	r2, #10000	; 0x2710
 800408c:	fb02 f203 	mul.w	r2, r2, r3
 8004090:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <TIM2_IRQHandler+0x474>)
 8004092:	891b      	ldrh	r3, [r3, #8]
 8004094:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004098:	330c      	adds	r3, #12
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fc fe84 	bl	8000dac <__aeabi_ui2f>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4a40      	ldr	r2, [pc, #256]	; (80041a8 <TIM2_IRQHandler+0x478>)
 80040a8:	6013      	str	r3, [r2, #0]
	  Suhu_T4= -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80040aa:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <TIM2_IRQHandler+0x478>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fc fa26 	bl	8000500 <__aeabi_f2d>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	f00b fdb0 	bl	800fc20 <log>
 80040c0:	a331      	add	r3, pc, #196	; (adr r3, 8004188 <TIM2_IRQHandler+0x458>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc fa73 	bl	80005b0 <__aeabi_dmul>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	a32f      	add	r3, pc, #188	; (adr r3, 8004190 <TIM2_IRQHandler+0x460>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc f8b4 	bl	8000244 <__adddf3>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7fc fd5c 	bl	8000ba0 <__aeabi_d2f>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4a30      	ldr	r2, [pc, #192]	; (80041ac <TIM2_IRQHandler+0x47c>)
 80040ec:	6013      	str	r3, [r2, #0]

	  if(Suhu_T1>=130) Suhu_T1 = 130;
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <TIM2_IRQHandler+0x480>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4930      	ldr	r1, [pc, #192]	; (80041b4 <TIM2_IRQHandler+0x484>)
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fd f863 	bl	80011c0 <__aeabi_fcmpge>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <TIM2_IRQHandler+0x3d6>
 8004100:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <TIM2_IRQHandler+0x480>)
 8004102:	4a2c      	ldr	r2, [pc, #176]	; (80041b4 <TIM2_IRQHandler+0x484>)
 8004104:	601a      	str	r2, [r3, #0]
	  if(Suhu_T2>=130) Suhu_T2 = 130;
 8004106:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <TIM2_IRQHandler+0x488>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	492a      	ldr	r1, [pc, #168]	; (80041b4 <TIM2_IRQHandler+0x484>)
 800410c:	4618      	mov	r0, r3
 800410e:	f7fd f857 	bl	80011c0 <__aeabi_fcmpge>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <TIM2_IRQHandler+0x3ee>
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <TIM2_IRQHandler+0x488>)
 800411a:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <TIM2_IRQHandler+0x484>)
 800411c:	601a      	str	r2, [r3, #0]
	  if(Suhu_T3>=130) Suhu_T3 = 130;
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <TIM2_IRQHandler+0x468>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4924      	ldr	r1, [pc, #144]	; (80041b4 <TIM2_IRQHandler+0x484>)
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd f84b 	bl	80011c0 <__aeabi_fcmpge>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <TIM2_IRQHandler+0x406>
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <TIM2_IRQHandler+0x468>)
 8004132:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <TIM2_IRQHandler+0x484>)
 8004134:	601a      	str	r2, [r3, #0]
	  if(Suhu_T4>=130) Suhu_T4 = 130;
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <TIM2_IRQHandler+0x47c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	491e      	ldr	r1, [pc, #120]	; (80041b4 <TIM2_IRQHandler+0x484>)
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd f83f 	bl	80011c0 <__aeabi_fcmpge>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d002      	beq.n	800414e <TIM2_IRQHandler+0x41e>
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <TIM2_IRQHandler+0x47c>)
 800414a:	4a1a      	ldr	r2, [pc, #104]	; (80041b4 <TIM2_IRQHandler+0x484>)
 800414c:	601a      	str	r2, [r3, #0]

	  sum_datadigi_suhu1=0;
 800414e:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <TIM2_IRQHandler+0x48c>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
	  sum_datadigi_suhu2=0;
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <TIM2_IRQHandler+0x490>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
	  sum_datadigi_suhu3=0;
 800415a:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <TIM2_IRQHandler+0x494>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
	  sum_datadigi_suhu4=0;
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <TIM2_IRQHandler+0x46c>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
	  hitung_suhu=0;
 8004166:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <TIM2_IRQHandler+0x470>)
 8004168:	2200      	movs	r2, #0
 800416a:	801a      	strh	r2, [r3, #0]
  }

  if(BATT_Start_Up==1)
 800416c:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <TIM2_IRQHandler+0x498>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	f040 80d4 	bne.w	800431e <TIM2_IRQHandler+0x5ee>
  {
	  if(BATT_State == STATE_DISCHARGE){
 8004176:	4b15      	ldr	r3, [pc, #84]	; (80041cc <TIM2_IRQHandler+0x49c>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d128      	bne.n	80041d0 <TIM2_IRQHandler+0x4a0>
		  Batt_Protection_when_discharge();
 800417e:	f000 fa23 	bl	80045c8 <Batt_Protection_when_discharge>
 8004182:	e02b      	b.n	80041dc <TIM2_IRQHandler+0x4ac>
 8004184:	f3af 8000 	nop.w
 8004188:	cccccccd 	.word	0xcccccccd
 800418c:	c0380ccc 	.word	0xc0380ccc
 8004190:	b851eb85 	.word	0xb851eb85
 8004194:	406ecd1e 	.word	0x406ecd1e
 8004198:	20000284 	.word	0x20000284
 800419c:	20000844 	.word	0x20000844
 80041a0:	20000840 	.word	0x20000840
 80041a4:	200002e8 	.word	0x200002e8
 80041a8:	200002f8 	.word	0x200002f8
 80041ac:	20000334 	.word	0x20000334
 80041b0:	20000304 	.word	0x20000304
 80041b4:	43020000 	.word	0x43020000
 80041b8:	20000378 	.word	0x20000378
 80041bc:	20000838 	.word	0x20000838
 80041c0:	20000820 	.word	0x20000820
 80041c4:	20000818 	.word	0x20000818
 80041c8:	2000023d 	.word	0x2000023d
 80041cc:	2000067c 	.word	0x2000067c
	  }
	  else if(BATT_State == STATE_CHARGE){
 80041d0:	4ba5      	ldr	r3, [pc, #660]	; (8004468 <TIM2_IRQHandler+0x738>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <TIM2_IRQHandler+0x4ac>
		  Batt_Protection_when_charge();
 80041d8:	f001 f882 	bl	80052e0 <Batt_Protection_when_charge>
	  }
	  if(BATT_State == STATE_FULL_CHARGE_DISCHARGE){
 80041dc:	4ba2      	ldr	r3, [pc, #648]	; (8004468 <TIM2_IRQHandler+0x738>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d101      	bne.n	80041e8 <TIM2_IRQHandler+0x4b8>
		  Batt_Protection_when_chargedischarge();
 80041e4:	f001 fc90 	bl	8005b08 <Batt_Protection_when_chargedischarge>
	  }

	  //********************* Clearing protection status *****************************////
	  // ---> Clearing UnderVoltage
	  if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON){
 80041e8:	4ba0      	ldr	r3, [pc, #640]	; (800446c <TIM2_IRQHandler+0x73c>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d008      	beq.n	8004202 <TIM2_IRQHandler+0x4d2>
 80041f0:	4b9f      	ldr	r3, [pc, #636]	; (8004470 <TIM2_IRQHandler+0x740>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	499f      	ldr	r1, [pc, #636]	; (8004474 <TIM2_IRQHandler+0x744>)
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc ffec 	bl	80011d4 <__aeabi_fcmpgt>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d009      	beq.n	8004216 <TIM2_IRQHandler+0x4e6>
 8004202:	4b9d      	ldr	r3, [pc, #628]	; (8004478 <TIM2_IRQHandler+0x748>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <TIM2_IRQHandler+0x4e6>
		  flag_trip_undervoltage=OFF;
 800420a:	4b9b      	ldr	r3, [pc, #620]	; (8004478 <TIM2_IRQHandler+0x748>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_undervoltage=0;
 8004210:	4b96      	ldr	r3, [pc, #600]	; (800446c <TIM2_IRQHandler+0x73c>)
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCurrent Discharge
	  if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1){
 8004216:	4b99      	ldr	r3, [pc, #612]	; (800447c <TIM2_IRQHandler+0x74c>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d109      	bne.n	8004232 <TIM2_IRQHandler+0x502>
 800421e:	4b98      	ldr	r3, [pc, #608]	; (8004480 <TIM2_IRQHandler+0x750>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <TIM2_IRQHandler+0x502>
		  flag_trip_overcurrentdischarge=OFF;
 8004226:	4b95      	ldr	r3, [pc, #596]	; (800447c <TIM2_IRQHandler+0x74c>)
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_overcurrentdischarge=0;
 800422c:	4b94      	ldr	r3, [pc, #592]	; (8004480 <TIM2_IRQHandler+0x750>)
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverTemperature
	  if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50)){
 8004232:	4b94      	ldr	r3, [pc, #592]	; (8004484 <TIM2_IRQHandler+0x754>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d126      	bne.n	8004288 <TIM2_IRQHandler+0x558>
 800423a:	4b93      	ldr	r3, [pc, #588]	; (8004488 <TIM2_IRQHandler+0x758>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4993      	ldr	r1, [pc, #588]	; (800448c <TIM2_IRQHandler+0x75c>)
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc ffa9 	bl	8001198 <__aeabi_fcmplt>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01d      	beq.n	8004288 <TIM2_IRQHandler+0x558>
 800424c:	4b90      	ldr	r3, [pc, #576]	; (8004490 <TIM2_IRQHandler+0x760>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4990      	ldr	r1, [pc, #576]	; (8004494 <TIM2_IRQHandler+0x764>)
 8004252:	4618      	mov	r0, r3
 8004254:	f7fc ffa0 	bl	8001198 <__aeabi_fcmplt>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d014      	beq.n	8004288 <TIM2_IRQHandler+0x558>
 800425e:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <TIM2_IRQHandler+0x768>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	498a      	ldr	r1, [pc, #552]	; (800448c <TIM2_IRQHandler+0x75c>)
 8004264:	4618      	mov	r0, r3
 8004266:	f7fc ff97 	bl	8001198 <__aeabi_fcmplt>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <TIM2_IRQHandler+0x558>
 8004270:	4b8a      	ldr	r3, [pc, #552]	; (800449c <TIM2_IRQHandler+0x76c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4987      	ldr	r1, [pc, #540]	; (8004494 <TIM2_IRQHandler+0x764>)
 8004276:	4618      	mov	r0, r3
 8004278:	f7fc ff8e 	bl	8001198 <__aeabi_fcmplt>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <TIM2_IRQHandler+0x558>
		  flag_trip_overtemperature=OFF;
 8004282:	4b80      	ldr	r3, [pc, #512]	; (8004484 <TIM2_IRQHandler+0x754>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing UnderTemperature
	  if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20)){
 8004288:	4b85      	ldr	r3, [pc, #532]	; (80044a0 <TIM2_IRQHandler+0x770>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d126      	bne.n	80042de <TIM2_IRQHandler+0x5ae>
 8004290:	4b7d      	ldr	r3, [pc, #500]	; (8004488 <TIM2_IRQHandler+0x758>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4983      	ldr	r1, [pc, #524]	; (80044a4 <TIM2_IRQHandler+0x774>)
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc ff9c 	bl	80011d4 <__aeabi_fcmpgt>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01d      	beq.n	80042de <TIM2_IRQHandler+0x5ae>
 80042a2:	4b7b      	ldr	r3, [pc, #492]	; (8004490 <TIM2_IRQHandler+0x760>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	497f      	ldr	r1, [pc, #508]	; (80044a4 <TIM2_IRQHandler+0x774>)
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fc ff93 	bl	80011d4 <__aeabi_fcmpgt>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d014      	beq.n	80042de <TIM2_IRQHandler+0x5ae>
 80042b4:	4b78      	ldr	r3, [pc, #480]	; (8004498 <TIM2_IRQHandler+0x768>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	497a      	ldr	r1, [pc, #488]	; (80044a4 <TIM2_IRQHandler+0x774>)
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fc ff8a 	bl	80011d4 <__aeabi_fcmpgt>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <TIM2_IRQHandler+0x5ae>
 80042c6:	4b75      	ldr	r3, [pc, #468]	; (800449c <TIM2_IRQHandler+0x76c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4976      	ldr	r1, [pc, #472]	; (80044a4 <TIM2_IRQHandler+0x774>)
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fc ff81 	bl	80011d4 <__aeabi_fcmpgt>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <TIM2_IRQHandler+0x5ae>
		  flag_trip_undertemperature=OFF;
 80042d8:	4b71      	ldr	r3, [pc, #452]	; (80044a0 <TIM2_IRQHandler+0x770>)
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverDischarge
	  if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20){
 80042de:	4b72      	ldr	r3, [pc, #456]	; (80044a8 <TIM2_IRQHandler+0x778>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10b      	bne.n	80042fe <TIM2_IRQHandler+0x5ce>
 80042e6:	4b71      	ldr	r3, [pc, #452]	; (80044ac <TIM2_IRQHandler+0x77c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	496e      	ldr	r1, [pc, #440]	; (80044a4 <TIM2_IRQHandler+0x774>)
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fc ff71 	bl	80011d4 <__aeabi_fcmpgt>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <TIM2_IRQHandler+0x5ce>
		  flag_trip_SOCOverDischarge=OFF;
 80042f8:	4b6b      	ldr	r3, [pc, #428]	; (80044a8 <TIM2_IRQHandler+0x778>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCharge
	  if(flag_trip_SOCOverCharge==ON && Pack_SOC<70){
 80042fe:	4b6c      	ldr	r3, [pc, #432]	; (80044b0 <TIM2_IRQHandler+0x780>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10b      	bne.n	800431e <TIM2_IRQHandler+0x5ee>
 8004306:	4b69      	ldr	r3, [pc, #420]	; (80044ac <TIM2_IRQHandler+0x77c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	496a      	ldr	r1, [pc, #424]	; (80044b4 <TIM2_IRQHandler+0x784>)
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc ff43 	bl	8001198 <__aeabi_fcmplt>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <TIM2_IRQHandler+0x5ee>
		  flag_trip_SOCOverCharge=OFF;
 8004318:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <TIM2_IRQHandler+0x780>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
	  }
  }

  i++;
 800431e:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <TIM2_IRQHandler+0x788>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a64      	ldr	r2, [pc, #400]	; (80044b8 <TIM2_IRQHandler+0x788>)
 8004326:	6013      	str	r3, [r2, #0]
  i=i%maxdata;
 8004328:	4b63      	ldr	r3, [pc, #396]	; (80044b8 <TIM2_IRQHandler+0x788>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b63      	ldr	r3, [pc, #396]	; (80044bc <TIM2_IRQHandler+0x78c>)
 800432e:	fb83 1302 	smull	r1, r3, r3, r2
 8004332:	1199      	asrs	r1, r3, #6
 8004334:	17d3      	asrs	r3, r2, #31
 8004336:	1acb      	subs	r3, r1, r3
 8004338:	21c8      	movs	r1, #200	; 0xc8
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	4a5d      	ldr	r2, [pc, #372]	; (80044b8 <TIM2_IRQHandler+0x788>)
 8004342:	6013      	str	r3, [r2, #0]

  //////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
  if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8004344:	4b48      	ldr	r3, [pc, #288]	; (8004468 <TIM2_IRQHandler+0x738>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d008      	beq.n	800435e <TIM2_IRQHandler+0x62e>
 800434c:	4b46      	ldr	r3, [pc, #280]	; (8004468 <TIM2_IRQHandler+0x738>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d004      	beq.n	800435e <TIM2_IRQHandler+0x62e>
 8004354:	4b44      	ldr	r3, [pc, #272]	; (8004468 <TIM2_IRQHandler+0x738>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b03      	cmp	r3, #3
 800435a:	f040 80e0 	bne.w	800451e <TIM2_IRQHandler+0x7ee>
  {
	  time_soc++;
 800435e:	4b58      	ldr	r3, [pc, #352]	; (80044c0 <TIM2_IRQHandler+0x790>)
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	4b56      	ldr	r3, [pc, #344]	; (80044c0 <TIM2_IRQHandler+0x790>)
 8004368:	801a      	strh	r2, [r3, #0]
	  sum_current+=IBATT;
 800436a:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <TIM2_IRQHandler+0x794>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a56      	ldr	r2, [pc, #344]	; (80044c8 <TIM2_IRQHandler+0x798>)
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f7fc fc69 	bl	8000c4c <__addsf3>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	4b51      	ldr	r3, [pc, #324]	; (80044c4 <TIM2_IRQHandler+0x794>)
 8004380:	601a      	str	r2, [r3, #0]
	  if(time_soc>99)
 8004382:	4b4f      	ldr	r3, [pc, #316]	; (80044c0 <TIM2_IRQHandler+0x790>)
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	2b63      	cmp	r3, #99	; 0x63
 8004388:	f240 80c9 	bls.w	800451e <TIM2_IRQHandler+0x7ee>
	  {
		  AH_Consumption = (-1*sum_current/100*(1.0/3600.0))/Pack_Cap*100-(4e-5); //Konsumsi System 4e-5
 800438c:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <TIM2_IRQHandler+0x794>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004394:	494d      	ldr	r1, [pc, #308]	; (80044cc <TIM2_IRQHandler+0x79c>)
 8004396:	4618      	mov	r0, r3
 8004398:	f7fc fe14 	bl	8000fc4 <__aeabi_fdiv>
 800439c:	4603      	mov	r3, r0
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc f8ae 	bl	8000500 <__aeabi_f2d>
 80043a4:	a32c      	add	r3, pc, #176	; (adr r3, 8004458 <TIM2_IRQHandler+0x728>)
 80043a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043aa:	f7fc f901 	bl	80005b0 <__aeabi_dmul>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4614      	mov	r4, r2
 80043b4:	461d      	mov	r5, r3
 80043b6:	4b46      	ldr	r3, [pc, #280]	; (80044d0 <TIM2_IRQHandler+0x7a0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc f8a0 	bl	8000500 <__aeabi_f2d>
 80043c0:	4602      	mov	r2, r0
 80043c2:	460b      	mov	r3, r1
 80043c4:	4620      	mov	r0, r4
 80043c6:	4629      	mov	r1, r5
 80043c8:	f7fc fa1c 	bl	8000804 <__aeabi_ddiv>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <TIM2_IRQHandler+0x7a4>)
 80043da:	f7fc f8e9 	bl	80005b0 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	a31e      	add	r3, pc, #120	; (adr r3, 8004460 <TIM2_IRQHandler+0x730>)
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f7fb ff28 	bl	8000240 <__aeabi_dsub>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	f7fc fbd2 	bl	8000ba0 <__aeabi_d2f>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4a36      	ldr	r2, [pc, #216]	; (80044d8 <TIM2_IRQHandler+0x7a8>)
 8004400:	6013      	str	r3, [r2, #0]
		  Pack_SOC=Pack_SOC+AH_Consumption;
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <TIM2_IRQHandler+0x77c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a34      	ldr	r2, [pc, #208]	; (80044d8 <TIM2_IRQHandler+0x7a8>)
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc fc1d 	bl	8000c4c <__addsf3>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	4b25      	ldr	r3, [pc, #148]	; (80044ac <TIM2_IRQHandler+0x77c>)
 8004418:	601a      	str	r2, [r3, #0]
		  time_soc=0;
 800441a:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <TIM2_IRQHandler+0x790>)
 800441c:	2200      	movs	r2, #0
 800441e:	801a      	strh	r2, [r3, #0]
		  sum_current=0;
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <TIM2_IRQHandler+0x794>)
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

		  grad=(100-0)/(batas_atas-batas_bawah);
 8004428:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <TIM2_IRQHandler+0x7ac>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2c      	ldr	r2, [pc, #176]	; (80044e0 <TIM2_IRQHandler+0x7b0>)
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc fc08 	bl	8000c48 <__aeabi_fsub>
 8004438:	4603      	mov	r3, r0
 800443a:	4619      	mov	r1, r3
 800443c:	4823      	ldr	r0, [pc, #140]	; (80044cc <TIM2_IRQHandler+0x79c>)
 800443e:	f7fc fdc1 	bl	8000fc4 <__aeabi_fdiv>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <TIM2_IRQHandler+0x7b4>)
 8004448:	601a      	str	r2, [r3, #0]
		  constanta=grad*batas_bawah*(-1);
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <TIM2_IRQHandler+0x7b4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <TIM2_IRQHandler+0x7b0>)
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	e047      	b.n	80044e8 <TIM2_IRQHandler+0x7b8>
 8004458:	789abcdf 	.word	0x789abcdf
 800445c:	3f323456 	.word	0x3f323456
 8004460:	88e368f1 	.word	0x88e368f1
 8004464:	3f04f8b5 	.word	0x3f04f8b5
 8004468:	2000067c 	.word	0x2000067c
 800446c:	20000348 	.word	0x20000348
 8004470:	20000280 	.word	0x20000280
 8004474:	42580000 	.word	0x42580000
 8004478:	200002fd 	.word	0x200002fd
 800447c:	2000030c 	.word	0x2000030c
 8004480:	20000290 	.word	0x20000290
 8004484:	2000027c 	.word	0x2000027c
 8004488:	20000304 	.word	0x20000304
 800448c:	42200000 	.word	0x42200000
 8004490:	20000378 	.word	0x20000378
 8004494:	42480000 	.word	0x42480000
 8004498:	20000284 	.word	0x20000284
 800449c:	20000334 	.word	0x20000334
 80044a0:	200002fc 	.word	0x200002fc
 80044a4:	41a00000 	.word	0x41a00000
 80044a8:	20000328 	.word	0x20000328
 80044ac:	20000370 	.word	0x20000370
 80044b0:	2000025d 	.word	0x2000025d
 80044b4:	428c0000 	.word	0x428c0000
 80044b8:	20000828 	.word	0x20000828
 80044bc:	51eb851f 	.word	0x51eb851f
 80044c0:	2000081c 	.word	0x2000081c
 80044c4:	2000084c 	.word	0x2000084c
 80044c8:	200002f4 	.word	0x200002f4
 80044cc:	42c80000 	.word	0x42c80000
 80044d0:	2000000c 	.word	0x2000000c
 80044d4:	40590000 	.word	0x40590000
 80044d8:	20000264 	.word	0x20000264
 80044dc:	20000250 	.word	0x20000250
 80044e0:	20000308 	.word	0x20000308
 80044e4:	20000310 	.word	0x20000310
 80044e8:	f7fc fcb8 	bl	8000e5c <__aeabi_fmul>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044f2:	4a0c      	ldr	r2, [pc, #48]	; (8004524 <TIM2_IRQHandler+0x7f4>)
 80044f4:	6013      	str	r3, [r2, #0]
		  SOC_manipulasi=grad*Pack_SOC+constanta;
 80044f6:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <TIM2_IRQHandler+0x7f8>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a0c      	ldr	r2, [pc, #48]	; (800452c <TIM2_IRQHandler+0x7fc>)
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	4611      	mov	r1, r2
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc fcab 	bl	8000e5c <__aeabi_fmul>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <TIM2_IRQHandler+0x7f4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fc fb9b 	bl	8000c4c <__addsf3>
 8004516:	4603      	mov	r3, r0
 8004518:	461a      	mov	r2, r3
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <TIM2_IRQHandler+0x800>)
 800451c:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bdb0      	pop	{r4, r5, r7, pc}
 8004522:	bf00      	nop
 8004524:	2000028c 	.word	0x2000028c
 8004528:	20000310 	.word	0x20000310
 800452c:	20000370 	.word	0x20000370
 8004530:	2000031c 	.word	0x2000031c

08004534 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004538:	481d      	ldr	r0, [pc, #116]	; (80045b0 <TIM3_IRQHandler+0x7c>)
 800453a:	f006 fb17 	bl	800ab6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  testtim3++;
 800453e:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <TIM3_IRQHandler+0x80>)
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <TIM3_IRQHandler+0x80>)
 8004548:	801a      	strh	r2, [r3, #0]
  if(flag_start_shutdown==1){
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <TIM3_IRQHandler+0x84>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d12b      	bne.n	80045aa <TIM3_IRQHandler+0x76>
	  if(Tick_33ms == 1) CANTX_BattParameter();
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <TIM3_IRQHandler+0x88>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d102      	bne.n	8004560 <TIM3_IRQHandler+0x2c>
 800455a:	f7fe faf1 	bl	8002b40 <CANTX_BattParameter>
 800455e:	e00f      	b.n	8004580 <TIM3_IRQHandler+0x4c>
	  else if(Tick_33ms == 2) CANTX_BattProtection();
 8004560:	4b16      	ldr	r3, [pc, #88]	; (80045bc <TIM3_IRQHandler+0x88>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d102      	bne.n	800456e <TIM3_IRQHandler+0x3a>
 8004568:	f7fe fc34 	bl	8002dd4 <CANTX_BattProtection>
 800456c:	e008      	b.n	8004580 <TIM3_IRQHandler+0x4c>
	  else if(Tick_33ms == 3) {
 800456e:	4b13      	ldr	r3, [pc, #76]	; (80045bc <TIM3_IRQHandler+0x88>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d104      	bne.n	8004580 <TIM3_IRQHandler+0x4c>
		  CANTX_ReportToCharger();
 8004576:	f7fe fd73 	bl	8003060 <CANTX_ReportToCharger>
		  Tick_33ms = 0;
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <TIM3_IRQHandler+0x88>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
	  }
	  if(Tick_BattId > 30) {
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <TIM3_IRQHandler+0x8c>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b1e      	cmp	r3, #30
 8004586:	d904      	bls.n	8004592 <TIM3_IRQHandler+0x5e>
		  CANTX_BattId();
 8004588:	f7fe fde2 	bl	8003150 <CANTX_BattId>
		  Tick_BattId = 0;
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <TIM3_IRQHandler+0x8c>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
	  }
	  Tick_33ms++;
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <TIM3_IRQHandler+0x88>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	b2da      	uxtb	r2, r3
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <TIM3_IRQHandler+0x88>)
 800459c:	701a      	strb	r2, [r3, #0]
	  Tick_BattId++;
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <TIM3_IRQHandler+0x8c>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <TIM3_IRQHandler+0x8c>)
 80045a8:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000850 	.word	0x20000850
 80045b4:	20000842 	.word	0x20000842
 80045b8:	2000027d 	.word	0x2000027d
 80045bc:	20000836 	.word	0x20000836
 80045c0:	20000830 	.word	0x20000830
 80045c4:	00000000 	.word	0x00000000

080045c8 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void) {
 80045c8:	b5b0      	push	{r4, r5, r7, lr}
 80045ca:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT/0.5)) {
 80045cc:	4b84      	ldr	r3, [pc, #528]	; (80047e0 <Batt_Protection_when_discharge+0x218>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ff95 	bl	8000500 <__aeabi_f2d>
 80045d6:	4604      	mov	r4, r0
 80045d8:	460d      	mov	r5, r1
 80045da:	4b82      	ldr	r3, [pc, #520]	; (80047e4 <Batt_Protection_when_discharge+0x21c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fb ff8e 	bl	8000500 <__aeabi_f2d>
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	4b7f      	ldr	r3, [pc, #508]	; (80047e8 <Batt_Protection_when_discharge+0x220>)
 80045ea:	f7fc f90b 	bl	8000804 <__aeabi_ddiv>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fc fa6b 	bl	8000ad0 <__aeabi_dcmpgt>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d017      	beq.n	8004630 <Batt_Protection_when_discharge+0x68>
		Isc = IBATT;
 8004600:	4b77      	ldr	r3, [pc, #476]	; (80047e0 <Batt_Protection_when_discharge+0x218>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a79      	ldr	r2, [pc, #484]	; (80047ec <Batt_Protection_when_discharge+0x224>)
 8004606:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 8004608:	4b76      	ldr	r3, [pc, #472]	; (80047e4 <Batt_Protection_when_discharge+0x21c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a78      	ldr	r2, [pc, #480]	; (80047f0 <Batt_Protection_when_discharge+0x228>)
 800460e:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8004610:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <Batt_Protection_when_discharge+0x22c>)
 8004612:	220c      	movs	r2, #12
 8004614:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8004616:	f7fc ffb5 	bl	8001584 <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 800461a:	4b77      	ldr	r3, [pc, #476]	; (80047f8 <Batt_Protection_when_discharge+0x230>)
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004626:	4875      	ldr	r0, [pc, #468]	; (80047fc <Batt_Protection_when_discharge+0x234>)
 8004628:	f004 fb75 	bl	8008d16 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 800462c:	f000 be44 	b.w	80052b8 <Batt_Protection_when_discharge+0xcf0>
	else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 8004630:	4b6c      	ldr	r3, [pc, #432]	; (80047e4 <Batt_Protection_when_discharge+0x21c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a72      	ldr	r2, [pc, #456]	; (8004800 <Batt_Protection_when_discharge+0x238>)
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f7fc fdac 	bl	8001198 <__aeabi_fcmplt>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 80f0 	beq.w	8004828 <Batt_Protection_when_discharge+0x260>
 8004648:	4b6e      	ldr	r3, [pc, #440]	; (8004804 <Batt_Protection_when_discharge+0x23c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 80eb 	bne.w	8004828 <Batt_Protection_when_discharge+0x260>
		fault_code=1;
 8004652:	4b68      	ldr	r3, [pc, #416]	; (80047f4 <Batt_Protection_when_discharge+0x22c>)
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8004658:	4b6b      	ldr	r3, [pc, #428]	; (8004808 <Batt_Protection_when_discharge+0x240>)
 800465a:	681c      	ldr	r4, [r3, #0]
 800465c:	4b61      	ldr	r3, [pc, #388]	; (80047e4 <Batt_Protection_when_discharge+0x21c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a67      	ldr	r2, [pc, #412]	; (8004800 <Batt_Protection_when_discharge+0x238>)
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	4611      	mov	r1, r2
 8004666:	4618      	mov	r0, r3
 8004668:	f7fc fcac 	bl	8000fc4 <__aeabi_fdiv>
 800466c:	4603      	mov	r3, r0
 800466e:	4619      	mov	r1, r3
 8004670:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004674:	f7fc fae8 	bl	8000c48 <__aeabi_fsub>
 8004678:	4603      	mov	r3, r0
 800467a:	4619      	mov	r1, r3
 800467c:	4620      	mov	r0, r4
 800467e:	f7fc fca1 	bl	8000fc4 <__aeabi_fdiv>
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	4b61      	ldr	r3, [pc, #388]	; (800480c <Batt_Protection_when_discharge+0x244>)
 8004688:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 800468a:	4b61      	ldr	r3, [pc, #388]	; (8004810 <Batt_Protection_when_discharge+0x248>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb ff36 	bl	8000500 <__aeabi_f2d>
 8004694:	a350      	add	r3, pc, #320	; (adr r3, 80047d8 <Batt_Protection_when_discharge+0x210>)
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f7fb fdd3 	bl	8000244 <__adddf3>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	f7fc fa7b 	bl	8000ba0 <__aeabi_d2f>
 80046aa:	4603      	mov	r3, r0
 80046ac:	4a58      	ldr	r2, [pc, #352]	; (8004810 <Batt_Protection_when_discharge+0x248>)
 80046ae:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 80046b0:	4b57      	ldr	r3, [pc, #348]	; (8004810 <Batt_Protection_when_discharge+0x248>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a55      	ldr	r2, [pc, #340]	; (800480c <Batt_Protection_when_discharge+0x244>)
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fd8a 	bl	80011d4 <__aeabi_fcmpgt>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d012      	beq.n	80046ec <Batt_Protection_when_discharge+0x124>
 80046c6:	4b4f      	ldr	r3, [pc, #316]	; (8004804 <Batt_Protection_when_discharge+0x23c>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10e      	bne.n	80046ec <Batt_Protection_when_discharge+0x124>
			Batt_Open_Mode();
 80046ce:	f7fc ff59 	bl	8001584 <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 80046d2:	4b4e      	ldr	r3, [pc, #312]	; (800480c <Batt_Protection_when_discharge+0x244>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4e      	ldr	r2, [pc, #312]	; (8004810 <Batt_Protection_when_discharge+0x248>)
 80046d8:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 80046da:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <Batt_Protection_when_discharge+0x23c>)
 80046dc:	2201      	movs	r2, #1
 80046de:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BATT_CUTL_GPIO_Port, BATT_CUTL_Pin, GPIO_PIN_RESET);
 80046e0:	2200      	movs	r2, #0
 80046e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046e6:	4845      	ldr	r0, [pc, #276]	; (80047fc <Batt_Protection_when_discharge+0x234>)
 80046e8:	f004 fb15 	bl	8008d16 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 80046ec:	4b45      	ldr	r3, [pc, #276]	; (8004804 <Batt_Protection_when_discharge+0x23c>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 85de 	bne.w	80052b2 <Batt_Protection_when_discharge+0xcea>
			if(T_Under_trip-T_trip_cycle>15) {
 80046f6:	4b45      	ldr	r3, [pc, #276]	; (800480c <Batt_Protection_when_discharge+0x244>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a45      	ldr	r2, [pc, #276]	; (8004810 <Batt_Protection_when_discharge+0x248>)
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f7fc faa1 	bl	8000c48 <__aeabi_fsub>
 8004706:	4603      	mov	r3, r0
 8004708:	4942      	ldr	r1, [pc, #264]	; (8004814 <Batt_Protection_when_discharge+0x24c>)
 800470a:	4618      	mov	r0, r3
 800470c:	f7fc fd62 	bl	80011d4 <__aeabi_fcmpgt>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d019      	beq.n	800474a <Batt_Protection_when_discharge+0x182>
				if((test_tim2%1000)==0) {
 8004716:	4b40      	ldr	r3, [pc, #256]	; (8004818 <Batt_Protection_when_discharge+0x250>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b40      	ldr	r3, [pc, #256]	; (800481c <Batt_Protection_when_discharge+0x254>)
 800471c:	fb83 1302 	smull	r1, r3, r3, r2
 8004720:	1199      	asrs	r1, r3, #6
 8004722:	17d3      	asrs	r3, r2, #31
 8004724:	1acb      	subs	r3, r1, r3
 8004726:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 85be 	bne.w	80052b2 <Batt_Protection_when_discharge+0xcea>
					BUZZ_Toggle;
 8004736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800473a:	4830      	ldr	r0, [pc, #192]	; (80047fc <Batt_Protection_when_discharge+0x234>)
 800473c:	f004 fb03 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004740:	4b35      	ldr	r3, [pc, #212]	; (8004818 <Batt_Protection_when_discharge+0x250>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 8004746:	f000 bdb4 	b.w	80052b2 <Batt_Protection_when_discharge+0xcea>
			else if(T_Under_trip-T_trip_cycle>10) {
 800474a:	4b30      	ldr	r3, [pc, #192]	; (800480c <Batt_Protection_when_discharge+0x244>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a30      	ldr	r2, [pc, #192]	; (8004810 <Batt_Protection_when_discharge+0x248>)
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	4611      	mov	r1, r2
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fa77 	bl	8000c48 <__aeabi_fsub>
 800475a:	4603      	mov	r3, r0
 800475c:	4930      	ldr	r1, [pc, #192]	; (8004820 <Batt_Protection_when_discharge+0x258>)
 800475e:	4618      	mov	r0, r3
 8004760:	f7fc fd38 	bl	80011d4 <__aeabi_fcmpgt>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <Batt_Protection_when_discharge+0x1d4>
				if((test_tim2%100)==0) {
 800476a:	4b2b      	ldr	r3, [pc, #172]	; (8004818 <Batt_Protection_when_discharge+0x250>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b2d      	ldr	r3, [pc, #180]	; (8004824 <Batt_Protection_when_discharge+0x25c>)
 8004770:	fb83 1302 	smull	r1, r3, r3, r2
 8004774:	1159      	asrs	r1, r3, #5
 8004776:	17d3      	asrs	r3, r2, #31
 8004778:	1acb      	subs	r3, r1, r3
 800477a:	2164      	movs	r1, #100	; 0x64
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 8595 	bne.w	80052b2 <Batt_Protection_when_discharge+0xcea>
					BUZZ_Toggle;
 8004788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800478c:	481b      	ldr	r0, [pc, #108]	; (80047fc <Batt_Protection_when_discharge+0x234>)
 800478e:	f004 fada 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004792:	4b21      	ldr	r3, [pc, #132]	; (8004818 <Batt_Protection_when_discharge+0x250>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 8004798:	f000 bd8b 	b.w	80052b2 <Batt_Protection_when_discharge+0xcea>
			else if(T_Under_trip-T_trip_cycle>1) {
 800479c:	4b1b      	ldr	r3, [pc, #108]	; (800480c <Batt_Protection_when_discharge+0x244>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <Batt_Protection_when_discharge+0x248>)
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fc fa4e 	bl	8000c48 <__aeabi_fsub>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fc fd0e 	bl	80011d4 <__aeabi_fcmpgt>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <Batt_Protection_when_discharge+0x1fa>
		if(flag_trip_undervoltage==OFF) {
 80047be:	f000 bd78 	b.w	80052b2 <Batt_Protection_when_discharge+0xcea>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80047c2:	2201      	movs	r2, #1
 80047c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047c8:	480c      	ldr	r0, [pc, #48]	; (80047fc <Batt_Protection_when_discharge+0x234>)
 80047ca:	f004 faa4 	bl	8008d16 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 80047ce:	f000 bd70 	b.w	80052b2 <Batt_Protection_when_discharge+0xcea>
 80047d2:	bf00      	nop
 80047d4:	f3af 8000 	nop.w
 80047d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80047dc:	3f50624d 	.word	0x3f50624d
 80047e0:	200002f4 	.word	0x200002f4
 80047e4:	20000280 	.word	0x20000280
 80047e8:	3fe00000 	.word	0x3fe00000
 80047ec:	200002dc 	.word	0x200002dc
 80047f0:	20000318 	.word	0x20000318
 80047f4:	20000302 	.word	0x20000302
 80047f8:	2000025f 	.word	0x2000025f
 80047fc:	40011000 	.word	0x40011000
 8004800:	20000028 	.word	0x20000028
 8004804:	200002fd 	.word	0x200002fd
 8004808:	20000034 	.word	0x20000034
 800480c:	20000810 	.word	0x20000810
 8004810:	2000082c 	.word	0x2000082c
 8004814:	41700000 	.word	0x41700000
 8004818:	20000364 	.word	0x20000364
 800481c:	10624dd3 	.word	0x10624dd3
 8004820:	41200000 	.word	0x41200000
 8004824:	51eb851f 	.word	0x51eb851f
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {   //Indikasi terjadi Over Current
 8004828:	4b93      	ldr	r3, [pc, #588]	; (8004a78 <Batt_Protection_when_discharge+0x4b0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a93      	ldr	r2, [pc, #588]	; (8004a7c <Batt_Protection_when_discharge+0x4b4>)
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	4611      	mov	r1, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f7fc fa08 	bl	8000c48 <__aeabi_fsub>
 8004838:	4603      	mov	r3, r0
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc fcc8 	bl	80011d4 <__aeabi_fcmpgt>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8136 	beq.w	8004ab8 <Batt_Protection_when_discharge+0x4f0>
 800484c:	4b8c      	ldr	r3, [pc, #560]	; (8004a80 <Batt_Protection_when_discharge+0x4b8>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 8131 	bne.w	8004ab8 <Batt_Protection_when_discharge+0x4f0>
		fault_code=2;
 8004856:	4b8b      	ldr	r3, [pc, #556]	; (8004a84 <Batt_Protection_when_discharge+0x4bc>)
 8004858:	2202      	movs	r2, #2
 800485a:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=50/(((IBATT/6.9)*(IBATT/6.9))-1);
 800485c:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <Batt_Protection_when_discharge+0x4b0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f7fb fe4d 	bl	8000500 <__aeabi_f2d>
 8004866:	a380      	add	r3, pc, #512	; (adr r3, 8004a68 <Batt_Protection_when_discharge+0x4a0>)
 8004868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486c:	f7fb ffca 	bl	8000804 <__aeabi_ddiv>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	4b7f      	ldr	r3, [pc, #508]	; (8004a78 <Batt_Protection_when_discharge+0x4b0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7fb fe3f 	bl	8000500 <__aeabi_f2d>
 8004882:	a379      	add	r3, pc, #484	; (adr r3, 8004a68 <Batt_Protection_when_discharge+0x4a0>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fb ffbc 	bl	8000804 <__aeabi_ddiv>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4620      	mov	r0, r4
 8004892:	4629      	mov	r1, r5
 8004894:	f7fb fe8c 	bl	80005b0 <__aeabi_dmul>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	4b78      	ldr	r3, [pc, #480]	; (8004a88 <Batt_Protection_when_discharge+0x4c0>)
 80048a6:	f7fb fccb 	bl	8000240 <__aeabi_dsub>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	f04f 0000 	mov.w	r0, #0
 80048b2:	4976      	ldr	r1, [pc, #472]	; (8004a8c <Batt_Protection_when_discharge+0x4c4>)
 80048b4:	f7fb ffa6 	bl	8000804 <__aeabi_ddiv>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4610      	mov	r0, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	f7fc f96e 	bl	8000ba0 <__aeabi_d2f>
 80048c4:	4603      	mov	r3, r0
 80048c6:	4a72      	ldr	r2, [pc, #456]	; (8004a90 <Batt_Protection_when_discharge+0x4c8>)
 80048c8:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 80048ca:	4b72      	ldr	r3, [pc, #456]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fe16 	bl	8000500 <__aeabi_f2d>
 80048d4:	a366      	add	r3, pc, #408	; (adr r3, 8004a70 <Batt_Protection_when_discharge+0x4a8>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	f7fb fcb3 	bl	8000244 <__adddf3>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	f7fc f95b 	bl	8000ba0 <__aeabi_d2f>
 80048ea:	4603      	mov	r3, r0
 80048ec:	4a69      	ldr	r2, [pc, #420]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 80048ee:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 80048f0:	4b68      	ldr	r3, [pc, #416]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a66      	ldr	r2, [pc, #408]	; (8004a90 <Batt_Protection_when_discharge+0x4c8>)
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fc fc6a 	bl	80011d4 <__aeabi_fcmpgt>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d012      	beq.n	800492c <Batt_Protection_when_discharge+0x364>
 8004906:	4b5e      	ldr	r3, [pc, #376]	; (8004a80 <Batt_Protection_when_discharge+0x4b8>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10e      	bne.n	800492c <Batt_Protection_when_discharge+0x364>
			Batt_Open_Mode();
 800490e:	f7fc fe39 	bl	8001584 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8004912:	4b5f      	ldr	r3, [pc, #380]	; (8004a90 <Batt_Protection_when_discharge+0x4c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a5f      	ldr	r2, [pc, #380]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 8004918:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 800491a:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <Batt_Protection_when_discharge+0x4b8>)
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004920:	2200      	movs	r2, #0
 8004922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004926:	485c      	ldr	r0, [pc, #368]	; (8004a98 <Batt_Protection_when_discharge+0x4d0>)
 8004928:	f004 f9f5 	bl	8008d16 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 800492c:	4b54      	ldr	r3, [pc, #336]	; (8004a80 <Batt_Protection_when_discharge+0x4b8>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f040 84c0 	bne.w	80052b6 <Batt_Protection_when_discharge+0xcee>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8004936:	4b56      	ldr	r3, [pc, #344]	; (8004a90 <Batt_Protection_when_discharge+0x4c8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a56      	ldr	r2, [pc, #344]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f7fc f981 	bl	8000c48 <__aeabi_fsub>
 8004946:	4603      	mov	r3, r0
 8004948:	4954      	ldr	r1, [pc, #336]	; (8004a9c <Batt_Protection_when_discharge+0x4d4>)
 800494a:	4618      	mov	r0, r3
 800494c:	f7fc fc42 	bl	80011d4 <__aeabi_fcmpgt>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d019      	beq.n	800498a <Batt_Protection_when_discharge+0x3c2>
				if((test_tim2%1000)==0) {
 8004956:	4b52      	ldr	r3, [pc, #328]	; (8004aa0 <Batt_Protection_when_discharge+0x4d8>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b52      	ldr	r3, [pc, #328]	; (8004aa4 <Batt_Protection_when_discharge+0x4dc>)
 800495c:	fb83 1302 	smull	r1, r3, r3, r2
 8004960:	1199      	asrs	r1, r3, #6
 8004962:	17d3      	asrs	r3, r2, #31
 8004964:	1acb      	subs	r3, r1, r3
 8004966:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 84a0 	bne.w	80052b6 <Batt_Protection_when_discharge+0xcee>
					BUZZ_Toggle;
 8004976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800497a:	4847      	ldr	r0, [pc, #284]	; (8004a98 <Batt_Protection_when_discharge+0x4d0>)
 800497c:	f004 f9e3 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004980:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <Batt_Protection_when_discharge+0x4d8>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8004986:	f000 bc96 	b.w	80052b6 <Batt_Protection_when_discharge+0xcee>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10){
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <Batt_Protection_when_discharge+0x4c8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a41      	ldr	r2, [pc, #260]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f7fc f957 	bl	8000c48 <__aeabi_fsub>
 800499a:	4603      	mov	r3, r0
 800499c:	4942      	ldr	r1, [pc, #264]	; (8004aa8 <Batt_Protection_when_discharge+0x4e0>)
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc fc18 	bl	80011d4 <__aeabi_fcmpgt>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d018      	beq.n	80049dc <Batt_Protection_when_discharge+0x414>
				if((test_tim2%100)==0){
 80049aa:	4b3d      	ldr	r3, [pc, #244]	; (8004aa0 <Batt_Protection_when_discharge+0x4d8>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b3f      	ldr	r3, [pc, #252]	; (8004aac <Batt_Protection_when_discharge+0x4e4>)
 80049b0:	fb83 1302 	smull	r1, r3, r3, r2
 80049b4:	1159      	asrs	r1, r3, #5
 80049b6:	17d3      	asrs	r3, r2, #31
 80049b8:	1acb      	subs	r3, r1, r3
 80049ba:	2164      	movs	r1, #100	; 0x64
 80049bc:	fb01 f303 	mul.w	r3, r1, r3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 8477 	bne.w	80052b6 <Batt_Protection_when_discharge+0xcee>
					BUZZ_Toggle;
 80049c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049cc:	4832      	ldr	r0, [pc, #200]	; (8004a98 <Batt_Protection_when_discharge+0x4d0>)
 80049ce:	f004 f9ba 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80049d2:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <Batt_Protection_when_discharge+0x4d8>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 80049d8:	f000 bc6d 	b.w	80052b6 <Batt_Protection_when_discharge+0xcee>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3){
 80049dc:	4b2c      	ldr	r3, [pc, #176]	; (8004a90 <Batt_Protection_when_discharge+0x4c8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a2c      	ldr	r2, [pc, #176]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fc f92e 	bl	8000c48 <__aeabi_fsub>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4930      	ldr	r1, [pc, #192]	; (8004ab0 <Batt_Protection_when_discharge+0x4e8>)
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fc fbef 	bl	80011d4 <__aeabi_fcmpgt>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d019      	beq.n	8004a30 <Batt_Protection_when_discharge+0x468>
				if((test_tim2%10)==0){
 80049fc:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <Batt_Protection_when_discharge+0x4d8>)
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	4b2c      	ldr	r3, [pc, #176]	; (8004ab4 <Batt_Protection_when_discharge+0x4ec>)
 8004a02:	fb83 2301 	smull	r2, r3, r3, r1
 8004a06:	109a      	asrs	r2, r3, #2
 8004a08:	17cb      	asrs	r3, r1, #31
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	1aca      	subs	r2, r1, r3
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	f040 844d 	bne.w	80052b6 <Batt_Protection_when_discharge+0xcee>
					BUZZ_Toggle;
 8004a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a20:	481d      	ldr	r0, [pc, #116]	; (8004a98 <Batt_Protection_when_discharge+0x4d0>)
 8004a22:	f004 f990 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <Batt_Protection_when_discharge+0x4d8>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8004a2c:	f000 bc43 	b.w	80052b6 <Batt_Protection_when_discharge+0xcee>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1){
 8004a30:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <Batt_Protection_when_discharge+0x4c8>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <Batt_Protection_when_discharge+0x4cc>)
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fc f904 	bl	8000c48 <__aeabi_fsub>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc fbc4 	bl	80011d4 <__aeabi_fcmpgt>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <Batt_Protection_when_discharge+0x48e>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004a52:	f000 bc30 	b.w	80052b6 <Batt_Protection_when_discharge+0xcee>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004a56:	2201      	movs	r2, #1
 8004a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a5c:	480e      	ldr	r0, [pc, #56]	; (8004a98 <Batt_Protection_when_discharge+0x4d0>)
 8004a5e:	f004 f95a 	bl	8008d16 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004a62:	f000 bc28 	b.w	80052b6 <Batt_Protection_when_discharge+0xcee>
 8004a66:	bf00      	nop
 8004a68:	9999999a 	.word	0x9999999a
 8004a6c:	401b9999 	.word	0x401b9999
 8004a70:	47ae147b 	.word	0x47ae147b
 8004a74:	3f847ae1 	.word	0x3f847ae1
 8004a78:	200002f4 	.word	0x200002f4
 8004a7c:	20000010 	.word	0x20000010
 8004a80:	2000030c 	.word	0x2000030c
 8004a84:	20000302 	.word	0x20000302
 8004a88:	3ff00000 	.word	0x3ff00000
 8004a8c:	40490000 	.word	0x40490000
 8004a90:	2000026c 	.word	0x2000026c
 8004a94:	2000033c 	.word	0x2000033c
 8004a98:	40011000 	.word	0x40011000
 8004a9c:	41700000 	.word	0x41700000
 8004aa0:	20000364 	.word	0x20000364
 8004aa4:	10624dd3 	.word	0x10624dd3
 8004aa8:	41200000 	.word	0x41200000
 8004aac:	51eb851f 	.word	0x51eb851f
 8004ab0:	40400000 	.word	0x40400000
 8004ab4:	66666667 	.word	0x66666667
	else if(((70-Suhu_T1<10)||(50-Suhu_T2<10)||(50-Suhu_T3<10)||(50-Suhu_T4<10)) && flag_trip_overtemperature==OFF) {
 8004ab8:	4b8e      	ldr	r3, [pc, #568]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4619      	mov	r1, r3
 8004abe:	488e      	ldr	r0, [pc, #568]	; (8004cf8 <Batt_Protection_when_discharge+0x730>)
 8004ac0:	f7fc f8c2 	bl	8000c48 <__aeabi_fsub>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	498d      	ldr	r1, [pc, #564]	; (8004cfc <Batt_Protection_when_discharge+0x734>)
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fc fb65 	bl	8001198 <__aeabi_fcmplt>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d12a      	bne.n	8004b2a <Batt_Protection_when_discharge+0x562>
 8004ad4:	4b8a      	ldr	r3, [pc, #552]	; (8004d00 <Batt_Protection_when_discharge+0x738>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	488a      	ldr	r0, [pc, #552]	; (8004d04 <Batt_Protection_when_discharge+0x73c>)
 8004adc:	f7fc f8b4 	bl	8000c48 <__aeabi_fsub>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4986      	ldr	r1, [pc, #536]	; (8004cfc <Batt_Protection_when_discharge+0x734>)
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fc fb57 	bl	8001198 <__aeabi_fcmplt>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11c      	bne.n	8004b2a <Batt_Protection_when_discharge+0x562>
 8004af0:	4b85      	ldr	r3, [pc, #532]	; (8004d08 <Batt_Protection_when_discharge+0x740>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	4883      	ldr	r0, [pc, #524]	; (8004d04 <Batt_Protection_when_discharge+0x73c>)
 8004af8:	f7fc f8a6 	bl	8000c48 <__aeabi_fsub>
 8004afc:	4603      	mov	r3, r0
 8004afe:	497f      	ldr	r1, [pc, #508]	; (8004cfc <Batt_Protection_when_discharge+0x734>)
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fc fb49 	bl	8001198 <__aeabi_fcmplt>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10e      	bne.n	8004b2a <Batt_Protection_when_discharge+0x562>
 8004b0c:	4b7f      	ldr	r3, [pc, #508]	; (8004d0c <Batt_Protection_when_discharge+0x744>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4619      	mov	r1, r3
 8004b12:	487c      	ldr	r0, [pc, #496]	; (8004d04 <Batt_Protection_when_discharge+0x73c>)
 8004b14:	f7fc f898 	bl	8000c48 <__aeabi_fsub>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4978      	ldr	r1, [pc, #480]	; (8004cfc <Batt_Protection_when_discharge+0x734>)
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fc fb3b 	bl	8001198 <__aeabi_fcmplt>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8103 	beq.w	8004d30 <Batt_Protection_when_discharge+0x768>
 8004b2a:	4b79      	ldr	r3, [pc, #484]	; (8004d10 <Batt_Protection_when_discharge+0x748>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 80fe 	bne.w	8004d30 <Batt_Protection_when_discharge+0x768>
		fault_code=3;
 8004b34:	4b77      	ldr	r3, [pc, #476]	; (8004d14 <Batt_Protection_when_discharge+0x74c>)
 8004b36:	2203      	movs	r2, #3
 8004b38:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8004b3a:	4b77      	ldr	r3, [pc, #476]	; (8004d18 <Batt_Protection_when_discharge+0x750>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	496f      	ldr	r1, [pc, #444]	; (8004cfc <Batt_Protection_when_discharge+0x734>)
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc f881 	bl	8000c48 <__aeabi_fsub>
 8004b46:	4603      	mov	r3, r0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4b6a      	ldr	r3, [pc, #424]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f7fc fb21 	bl	8001198 <__aeabi_fcmplt>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d029      	beq.n	8004bb0 <Batt_Protection_when_discharge+0x5e8>
 8004b5c:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <Batt_Protection_when_discharge+0x750>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	496e      	ldr	r1, [pc, #440]	; (8004d1c <Batt_Protection_when_discharge+0x754>)
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc f870 	bl	8000c48 <__aeabi_fsub>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4b61      	ldr	r3, [pc, #388]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f7fc fb24 	bl	80011c0 <__aeabi_fcmpge>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d018      	beq.n	8004bb0 <Batt_Protection_when_discharge+0x5e8>
			if((test_tim2%1000)==0) {
 8004b7e:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <Batt_Protection_when_discharge+0x758>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b68      	ldr	r3, [pc, #416]	; (8004d24 <Batt_Protection_when_discharge+0x75c>)
 8004b84:	fb83 1302 	smull	r1, r3, r3, r2
 8004b88:	1199      	asrs	r1, r3, #6
 8004b8a:	17d3      	asrs	r3, r2, #31
 8004b8c:	1acb      	subs	r3, r1, r3
 8004b8e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f040 80aa 	bne.w	8004cf2 <Batt_Protection_when_discharge+0x72a>
				BUZZ_Toggle;
 8004b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba2:	4861      	ldr	r0, [pc, #388]	; (8004d28 <Batt_Protection_when_discharge+0x760>)
 8004ba4:	f004 f8cf 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004ba8:	4b5d      	ldr	r3, [pc, #372]	; (8004d20 <Batt_Protection_when_discharge+0x758>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8004bae:	e0a0      	b.n	8004cf2 <Batt_Protection_when_discharge+0x72a>
		else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2){
 8004bb0:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <Batt_Protection_when_discharge+0x750>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4959      	ldr	r1, [pc, #356]	; (8004d1c <Batt_Protection_when_discharge+0x754>)
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fc f846 	bl	8000c48 <__aeabi_fsub>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f7fc fae6 	bl	8001198 <__aeabi_fcmplt>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d029      	beq.n	8004c26 <Batt_Protection_when_discharge+0x65e>
 8004bd2:	4b51      	ldr	r3, [pc, #324]	; (8004d18 <Batt_Protection_when_discharge+0x750>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc f834 	bl	8000c48 <__aeabi_fsub>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f7fc fae8 	bl	80011c0 <__aeabi_fcmpge>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d017      	beq.n	8004c26 <Batt_Protection_when_discharge+0x65e>
			if((test_tim2%500)==0){
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <Batt_Protection_when_discharge+0x758>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <Batt_Protection_when_discharge+0x75c>)
 8004bfc:	fb83 1302 	smull	r1, r3, r3, r2
 8004c00:	1159      	asrs	r1, r3, #5
 8004c02:	17d3      	asrs	r3, r2, #31
 8004c04:	1acb      	subs	r3, r1, r3
 8004c06:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c0a:	fb01 f303 	mul.w	r3, r1, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d16e      	bne.n	8004cf2 <Batt_Protection_when_discharge+0x72a>
				BUZZ_Toggle;
 8004c14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c18:	4843      	ldr	r0, [pc, #268]	; (8004d28 <Batt_Protection_when_discharge+0x760>)
 8004c1a:	f004 f894 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004c1e:	4b40      	ldr	r3, [pc, #256]	; (8004d20 <Batt_Protection_when_discharge+0x758>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004c24:	e065      	b.n	8004cf2 <Batt_Protection_when_discharge+0x72a>
		else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set){
 8004c26:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <Batt_Protection_when_discharge+0x750>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fc f80a 	bl	8000c48 <__aeabi_fsub>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f7fc faaa 	bl	8001198 <__aeabi_fcmplt>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d022      	beq.n	8004c90 <Batt_Protection_when_discharge+0x6c8>
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a32      	ldr	r2, [pc, #200]	; (8004d18 <Batt_Protection_when_discharge+0x750>)
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc faa9 	bl	80011ac <__aeabi_fcmple>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d017      	beq.n	8004c90 <Batt_Protection_when_discharge+0x6c8>
			if((test_tim2%500)==0){
 8004c60:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <Batt_Protection_when_discharge+0x758>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <Batt_Protection_when_discharge+0x75c>)
 8004c66:	fb83 1302 	smull	r1, r3, r3, r2
 8004c6a:	1159      	asrs	r1, r3, #5
 8004c6c:	17d3      	asrs	r3, r2, #31
 8004c6e:	1acb      	subs	r3, r1, r3
 8004c70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d139      	bne.n	8004cf2 <Batt_Protection_when_discharge+0x72a>
				BUZZ_Toggle;
 8004c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c82:	4829      	ldr	r0, [pc, #164]	; (8004d28 <Batt_Protection_when_discharge+0x760>)
 8004c84:	f004 f85f 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004c88:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <Batt_Protection_when_discharge+0x758>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004c8e:	e030      	b.n	8004cf2 <Batt_Protection_when_discharge+0x72a>
		else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85){
 8004c90:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <Batt_Protection_when_discharge+0x72c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	491b      	ldr	r1, [pc, #108]	; (8004d04 <Batt_Protection_when_discharge+0x73c>)
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fc fa9c 	bl	80011d4 <__aeabi_fcmpgt>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11b      	bne.n	8004cda <Batt_Protection_when_discharge+0x712>
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <Batt_Protection_when_discharge+0x738>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4921      	ldr	r1, [pc, #132]	; (8004d2c <Batt_Protection_when_discharge+0x764>)
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fc fa93 	bl	80011d4 <__aeabi_fcmpgt>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d112      	bne.n	8004cda <Batt_Protection_when_discharge+0x712>
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <Batt_Protection_when_discharge+0x740>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4912      	ldr	r1, [pc, #72]	; (8004d04 <Batt_Protection_when_discharge+0x73c>)
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fa8a 	bl	80011d4 <__aeabi_fcmpgt>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <Batt_Protection_when_discharge+0x712>
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <Batt_Protection_when_discharge+0x744>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4918      	ldr	r1, [pc, #96]	; (8004d2c <Batt_Protection_when_discharge+0x764>)
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fc fa81 	bl	80011d4 <__aeabi_fcmpgt>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d100      	bne.n	8004cda <Batt_Protection_when_discharge+0x712>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8004cd8:	e2ee      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
			Batt_Open_Mode();
 8004cda:	f7fc fc53 	bl	8001584 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8004cde:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <Batt_Protection_when_discharge+0x748>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cea:	480f      	ldr	r0, [pc, #60]	; (8004d28 <Batt_Protection_when_discharge+0x760>)
 8004cec:	f004 f813 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8004cf0:	e2e2      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
 8004cf2:	e2e1      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
 8004cf4:	20000304 	.word	0x20000304
 8004cf8:	428c0000 	.word	0x428c0000
 8004cfc:	41200000 	.word	0x41200000
 8004d00:	20000378 	.word	0x20000378
 8004d04:	42480000 	.word	0x42480000
 8004d08:	20000284 	.word	0x20000284
 8004d0c:	20000334 	.word	0x20000334
 8004d10:	2000027c 	.word	0x2000027c
 8004d14:	20000302 	.word	0x20000302
 8004d18:	20000018 	.word	0x20000018
 8004d1c:	40a00000 	.word	0x40a00000
 8004d20:	20000364 	.word	0x20000364
 8004d24:	10624dd3 	.word	0x10624dd3
 8004d28:	40011000 	.word	0x40011000
 8004d2c:	42aa0000 	.word	0x42aa0000
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8004d30:	4b96      	ldr	r3, [pc, #600]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a96      	ldr	r2, [pc, #600]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	4611      	mov	r1, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fb ff84 	bl	8000c48 <__aeabi_fsub>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4994      	ldr	r1, [pc, #592]	; (8004f94 <Batt_Protection_when_discharge+0x9cc>)
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fc fa31 	bl	80011ac <__aeabi_fcmple>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d130      	bne.n	8004db2 <Batt_Protection_when_discharge+0x7ea>
 8004d50:	4b91      	ldr	r3, [pc, #580]	; (8004f98 <Batt_Protection_when_discharge+0x9d0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a8e      	ldr	r2, [pc, #568]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb ff74 	bl	8000c48 <__aeabi_fsub>
 8004d60:	4603      	mov	r3, r0
 8004d62:	498c      	ldr	r1, [pc, #560]	; (8004f94 <Batt_Protection_when_discharge+0x9cc>)
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc fa21 	bl	80011ac <__aeabi_fcmple>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d120      	bne.n	8004db2 <Batt_Protection_when_discharge+0x7ea>
 8004d70:	4b8a      	ldr	r3, [pc, #552]	; (8004f9c <Batt_Protection_when_discharge+0x9d4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a86      	ldr	r2, [pc, #536]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb ff64 	bl	8000c48 <__aeabi_fsub>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4984      	ldr	r1, [pc, #528]	; (8004f94 <Batt_Protection_when_discharge+0x9cc>)
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fc fa11 	bl	80011ac <__aeabi_fcmple>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d110      	bne.n	8004db2 <Batt_Protection_when_discharge+0x7ea>
 8004d90:	4b83      	ldr	r3, [pc, #524]	; (8004fa0 <Batt_Protection_when_discharge+0x9d8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a7e      	ldr	r2, [pc, #504]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb ff54 	bl	8000c48 <__aeabi_fsub>
 8004da0:	4603      	mov	r3, r0
 8004da2:	497c      	ldr	r1, [pc, #496]	; (8004f94 <Batt_Protection_when_discharge+0x9cc>)
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fc fa01 	bl	80011ac <__aeabi_fcmple>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8105 	beq.w	8004fbc <Batt_Protection_when_discharge+0x9f4>
 8004db2:	4b7c      	ldr	r3, [pc, #496]	; (8004fa4 <Batt_Protection_when_discharge+0x9dc>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8100 	bne.w	8004fbc <Batt_Protection_when_discharge+0x9f4>
		fault_code=4;
 8004dbc:	4b7a      	ldr	r3, [pc, #488]	; (8004fa8 <Batt_Protection_when_discharge+0x9e0>)
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004dc2:	4b73      	ldr	r3, [pc, #460]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4973      	ldr	r1, [pc, #460]	; (8004f94 <Batt_Protection_when_discharge+0x9cc>)
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fb ff3f 	bl	8000c4c <__addsf3>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fc f9f1 	bl	80011c0 <__aeabi_fcmpge>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d029      	beq.n	8004e38 <Batt_Protection_when_discharge+0x870>
 8004de4:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4970      	ldr	r1, [pc, #448]	; (8004fac <Batt_Protection_when_discharge+0x9e4>)
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fb ff2e 	bl	8000c4c <__addsf3>
 8004df0:	4603      	mov	r3, r0
 8004df2:	461a      	mov	r2, r3
 8004df4:	4b65      	ldr	r3, [pc, #404]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fc f9cc 	bl	8001198 <__aeabi_fcmplt>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d018      	beq.n	8004e38 <Batt_Protection_when_discharge+0x870>
			if((test_tim2%1000)==0){
 8004e06:	4b6a      	ldr	r3, [pc, #424]	; (8004fb0 <Batt_Protection_when_discharge+0x9e8>)
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	4b6a      	ldr	r3, [pc, #424]	; (8004fb4 <Batt_Protection_when_discharge+0x9ec>)
 8004e0c:	fb83 1302 	smull	r1, r3, r3, r2
 8004e10:	1199      	asrs	r1, r3, #6
 8004e12:	17d3      	asrs	r3, r2, #31
 8004e14:	1acb      	subs	r3, r1, r3
 8004e16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e1a:	fb01 f303 	mul.w	r3, r1, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f040 80b2 	bne.w	8004f8a <Batt_Protection_when_discharge+0x9c2>
				BUZZ_Toggle;
 8004e26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e2a:	4863      	ldr	r0, [pc, #396]	; (8004fb8 <Batt_Protection_when_discharge+0x9f0>)
 8004e2c:	f003 ff8b 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004e30:	4b5f      	ldr	r3, [pc, #380]	; (8004fb0 <Batt_Protection_when_discharge+0x9e8>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8004e36:	e0a8      	b.n	8004f8a <Batt_Protection_when_discharge+0x9c2>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8004e38:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	495b      	ldr	r1, [pc, #364]	; (8004fac <Batt_Protection_when_discharge+0x9e4>)
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fb ff04 	bl	8000c4c <__addsf3>
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	4b50      	ldr	r3, [pc, #320]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	f7fc f9b6 	bl	80011c0 <__aeabi_fcmpge>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d029      	beq.n	8004eae <Batt_Protection_when_discharge+0x8e6>
 8004e5a:	4b4d      	ldr	r3, [pc, #308]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fef2 	bl	8000c4c <__addsf3>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7fc f990 	bl	8001198 <__aeabi_fcmplt>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d017      	beq.n	8004eae <Batt_Protection_when_discharge+0x8e6>
			if((test_tim2%500)==0){
 8004e7e:	4b4c      	ldr	r3, [pc, #304]	; (8004fb0 <Batt_Protection_when_discharge+0x9e8>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4b4c      	ldr	r3, [pc, #304]	; (8004fb4 <Batt_Protection_when_discharge+0x9ec>)
 8004e84:	fb83 1302 	smull	r1, r3, r3, r2
 8004e88:	1159      	asrs	r1, r3, #5
 8004e8a:	17d3      	asrs	r3, r2, #31
 8004e8c:	1acb      	subs	r3, r1, r3
 8004e8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004e92:	fb01 f303 	mul.w	r3, r1, r3
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d176      	bne.n	8004f8a <Batt_Protection_when_discharge+0x9c2>
				BUZZ_Toggle;
 8004e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ea0:	4845      	ldr	r0, [pc, #276]	; (8004fb8 <Batt_Protection_when_discharge+0x9f0>)
 8004ea2:	f003 ff50 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004ea6:	4b42      	ldr	r3, [pc, #264]	; (8004fb0 <Batt_Protection_when_discharge+0x9e8>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004eac:	e06d      	b.n	8004f8a <Batt_Protection_when_discharge+0x9c2>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 8004eae:	4b38      	ldr	r3, [pc, #224]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fb fec8 	bl	8000c4c <__addsf3>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4b32      	ldr	r3, [pc, #200]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f7fc f984 	bl	80011d4 <__aeabi_fcmpgt>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d022      	beq.n	8004f18 <Batt_Protection_when_discharge+0x950>
 8004ed2:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	4611      	mov	r1, r2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fc f96f 	bl	80011c0 <__aeabi_fcmpge>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <Batt_Protection_when_discharge+0x950>
			if((test_tim2%500)==0){
 8004ee8:	4b31      	ldr	r3, [pc, #196]	; (8004fb0 <Batt_Protection_when_discharge+0x9e8>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <Batt_Protection_when_discharge+0x9ec>)
 8004eee:	fb83 1302 	smull	r1, r3, r3, r2
 8004ef2:	1159      	asrs	r1, r3, #5
 8004ef4:	17d3      	asrs	r3, r2, #31
 8004ef6:	1acb      	subs	r3, r1, r3
 8004ef8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d141      	bne.n	8004f8a <Batt_Protection_when_discharge+0x9c2>
				BUZZ_Toggle;
 8004f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f0a:	482b      	ldr	r0, [pc, #172]	; (8004fb8 <Batt_Protection_when_discharge+0x9f0>)
 8004f0c:	f003 ff1b 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <Batt_Protection_when_discharge+0x9e8>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004f16:	e038      	b.n	8004f8a <Batt_Protection_when_discharge+0x9c2>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 8004f18:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <Batt_Protection_when_discharge+0x9c4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc f938 	bl	8001198 <__aeabi_fcmplt>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d121      	bne.n	8004f72 <Batt_Protection_when_discharge+0x9aa>
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <Batt_Protection_when_discharge+0x9d0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	4611      	mov	r1, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fc f92d 	bl	8001198 <__aeabi_fcmplt>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d116      	bne.n	8004f72 <Batt_Protection_when_discharge+0x9aa>
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <Batt_Protection_when_discharge+0x9d4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc f922 	bl	8001198 <__aeabi_fcmplt>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10b      	bne.n	8004f72 <Batt_Protection_when_discharge+0x9aa>
 8004f5a:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <Batt_Protection_when_discharge+0x9d8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <Batt_Protection_when_discharge+0x9c8>)
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fc f917 	bl	8001198 <__aeabi_fcmplt>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d100      	bne.n	8004f72 <Batt_Protection_when_discharge+0x9aa>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004f70:	e1a2      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
			Batt_Open_Mode();
 8004f72:	f7fc fb07 	bl	8001584 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <Batt_Protection_when_discharge+0x9dc>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f82:	480d      	ldr	r0, [pc, #52]	; (8004fb8 <Batt_Protection_when_discharge+0x9f0>)
 8004f84:	f003 fec7 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004f88:	e196      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
 8004f8a:	e195      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
 8004f8c:	20000304 	.word	0x20000304
 8004f90:	2000001c 	.word	0x2000001c
 8004f94:	41200000 	.word	0x41200000
 8004f98:	20000378 	.word	0x20000378
 8004f9c:	20000284 	.word	0x20000284
 8004fa0:	20000334 	.word	0x20000334
 8004fa4:	200002fc 	.word	0x200002fc
 8004fa8:	20000302 	.word	0x20000302
 8004fac:	40a00000 	.word	0x40a00000
 8004fb0:	20000364 	.word	0x20000364
 8004fb4:	10624dd3 	.word	0x10624dd3
 8004fb8:	40011000 	.word	0x40011000
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8004fbc:	4b83      	ldr	r3, [pc, #524]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a83      	ldr	r2, [pc, #524]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fb fe3e 	bl	8000c48 <__aeabi_fsub>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4981      	ldr	r1, [pc, #516]	; (80051d4 <Batt_Protection_when_discharge+0xc0c>)
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fc f8eb 	bl	80011ac <__aeabi_fcmple>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80d1 	beq.w	8005180 <Batt_Protection_when_discharge+0xbb8>
 8004fde:	4b7e      	ldr	r3, [pc, #504]	; (80051d8 <Batt_Protection_when_discharge+0xc10>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f040 80cc 	bne.w	8005180 <Batt_Protection_when_discharge+0xbb8>
 8004fe8:	4b7c      	ldr	r3, [pc, #496]	; (80051dc <Batt_Protection_when_discharge+0xc14>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	f040 80c7 	bne.w	8005180 <Batt_Protection_when_discharge+0xbb8>
		fault_code=5;
 8004ff2:	4b7b      	ldr	r3, [pc, #492]	; (80051e0 <Batt_Protection_when_discharge+0xc18>)
 8004ff4:	2205      	movs	r2, #5
 8004ff6:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5){
 8004ff8:	4b75      	ldr	r3, [pc, #468]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4975      	ldr	r1, [pc, #468]	; (80051d4 <Batt_Protection_when_discharge+0xc0c>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fe24 	bl	8000c4c <__addsf3>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	4b70      	ldr	r3, [pc, #448]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7fc f8d6 	bl	80011c0 <__aeabi_fcmpge>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d029      	beq.n	800506e <Batt_Protection_when_discharge+0xaa6>
 800501a:	4b6d      	ldr	r3, [pc, #436]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4971      	ldr	r1, [pc, #452]	; (80051e4 <Batt_Protection_when_discharge+0xc1c>)
 8005020:	4618      	mov	r0, r3
 8005022:	f7fb fe13 	bl	8000c4c <__addsf3>
 8005026:	4603      	mov	r3, r0
 8005028:	461a      	mov	r2, r3
 800502a:	4b68      	ldr	r3, [pc, #416]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fc f8b1 	bl	8001198 <__aeabi_fcmplt>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d018      	beq.n	800506e <Batt_Protection_when_discharge+0xaa6>
			if((test_tim2%1000)==0){
 800503c:	4b6a      	ldr	r3, [pc, #424]	; (80051e8 <Batt_Protection_when_discharge+0xc20>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <Batt_Protection_when_discharge+0xc24>)
 8005042:	fb83 1302 	smull	r1, r3, r3, r2
 8005046:	1199      	asrs	r1, r3, #6
 8005048:	17d3      	asrs	r3, r2, #31
 800504a:	1acb      	subs	r3, r1, r3
 800504c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 8091 	bne.w	800517e <Batt_Protection_when_discharge+0xbb6>
				BUZZ_Toggle;
 800505c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005060:	4863      	ldr	r0, [pc, #396]	; (80051f0 <Batt_Protection_when_discharge+0xc28>)
 8005062:	f003 fe70 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005066:	4b60      	ldr	r3, [pc, #384]	; (80051e8 <Batt_Protection_when_discharge+0xc20>)
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 800506c:	e087      	b.n	800517e <Batt_Protection_when_discharge+0xbb6>
		else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2){
 800506e:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	495c      	ldr	r1, [pc, #368]	; (80051e4 <Batt_Protection_when_discharge+0xc1c>)
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb fde9 	bl	8000c4c <__addsf3>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	4b53      	ldr	r3, [pc, #332]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f7fc f89b 	bl	80011c0 <__aeabi_fcmpge>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d029      	beq.n	80050e4 <Batt_Protection_when_discharge+0xb1c>
 8005090:	4b4f      	ldr	r3, [pc, #316]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005098:	4618      	mov	r0, r3
 800509a:	f7fb fdd7 	bl	8000c4c <__addsf3>
 800509e:	4603      	mov	r3, r0
 80050a0:	461a      	mov	r2, r3
 80050a2:	4b4a      	ldr	r3, [pc, #296]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4619      	mov	r1, r3
 80050a8:	4610      	mov	r0, r2
 80050aa:	f7fc f875 	bl	8001198 <__aeabi_fcmplt>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d017      	beq.n	80050e4 <Batt_Protection_when_discharge+0xb1c>
			if((test_tim2%500)==0){
 80050b4:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <Batt_Protection_when_discharge+0xc20>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	4b4c      	ldr	r3, [pc, #304]	; (80051ec <Batt_Protection_when_discharge+0xc24>)
 80050ba:	fb83 1302 	smull	r1, r3, r3, r2
 80050be:	1159      	asrs	r1, r3, #5
 80050c0:	17d3      	asrs	r3, r2, #31
 80050c2:	1acb      	subs	r3, r1, r3
 80050c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d155      	bne.n	800517e <Batt_Protection_when_discharge+0xbb6>
				BUZZ_Toggle;
 80050d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050d6:	4846      	ldr	r0, [pc, #280]	; (80051f0 <Batt_Protection_when_discharge+0xc28>)
 80050d8:	f003 fe35 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80050dc:	4b42      	ldr	r3, [pc, #264]	; (80051e8 <Batt_Protection_when_discharge+0xc20>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80050e2:	e04c      	b.n	800517e <Batt_Protection_when_discharge+0xbb6>
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set){
 80050e4:	4b3a      	ldr	r3, [pc, #232]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb fdad 	bl	8000c4c <__addsf3>
 80050f2:	4603      	mov	r3, r0
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b35      	ldr	r3, [pc, #212]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fc f869 	bl	80011d4 <__aeabi_fcmpgt>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d022      	beq.n	800514e <Batt_Protection_when_discharge+0xb86>
 8005108:	4b30      	ldr	r3, [pc, #192]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a30      	ldr	r2, [pc, #192]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	4611      	mov	r1, r2
 8005112:	4618      	mov	r0, r3
 8005114:	f7fc f854 	bl	80011c0 <__aeabi_fcmpge>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d017      	beq.n	800514e <Batt_Protection_when_discharge+0xb86>
			if((test_tim2%500)==0){
 800511e:	4b32      	ldr	r3, [pc, #200]	; (80051e8 <Batt_Protection_when_discharge+0xc20>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b32      	ldr	r3, [pc, #200]	; (80051ec <Batt_Protection_when_discharge+0xc24>)
 8005124:	fb83 1302 	smull	r1, r3, r3, r2
 8005128:	1159      	asrs	r1, r3, #5
 800512a:	17d3      	asrs	r3, r2, #31
 800512c:	1acb      	subs	r3, r1, r3
 800512e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d120      	bne.n	800517e <Batt_Protection_when_discharge+0xbb6>
				BUZZ_Toggle;
 800513c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005140:	482b      	ldr	r0, [pc, #172]	; (80051f0 <Batt_Protection_when_discharge+0xc28>)
 8005142:	f003 fe00 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005146:	4b28      	ldr	r3, [pc, #160]	; (80051e8 <Batt_Protection_when_discharge+0xc20>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800514c:	e017      	b.n	800517e <Batt_Protection_when_discharge+0xbb6>
		else if(Pack_SOC<SOC_Under_Set){
 800514e:	4b1f      	ldr	r3, [pc, #124]	; (80051cc <Batt_Protection_when_discharge+0xc04>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <Batt_Protection_when_discharge+0xc08>)
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	4611      	mov	r1, r2
 8005158:	4618      	mov	r0, r3
 800515a:	f7fc f81d 	bl	8001198 <__aeabi_fcmplt>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d100      	bne.n	8005166 <Batt_Protection_when_discharge+0xb9e>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5){
 8005164:	e0a8      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
			Batt_Open_Mode();
 8005166:	f7fc fa0d 	bl	8001584 <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <Batt_Protection_when_discharge+0xc10>)
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005170:	2200      	movs	r2, #0
 8005172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005176:	481e      	ldr	r0, [pc, #120]	; (80051f0 <Batt_Protection_when_discharge+0xc28>)
 8005178:	f003 fdcd 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5){
 800517c:	e09c      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
 800517e:	e09b      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 8005180:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <Batt_Protection_when_discharge+0xc2c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1c      	ldr	r2, [pc, #112]	; (80051f8 <Batt_Protection_when_discharge+0xc30>)
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb fd5c 	bl	8000c48 <__aeabi_fsub>
 8005190:	4603      	mov	r3, r0
 8005192:	4910      	ldr	r1, [pc, #64]	; (80051d4 <Batt_Protection_when_discharge+0xc0c>)
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb ffff 	bl	8001198 <__aeabi_fcmplt>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02f      	beq.n	8005200 <Batt_Protection_when_discharge+0xc38>
		fault_code=6;
 80051a0:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <Batt_Protection_when_discharge+0xc18>)
 80051a2:	2206      	movs	r2, #6
 80051a4:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance>Persen_Imbalance_Set)
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <Batt_Protection_when_discharge+0xc30>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <Batt_Protection_when_discharge+0xc2c>)
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fc f80f 	bl	80011d4 <__aeabi_fcmpgt>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d100      	bne.n	80051be <Batt_Protection_when_discharge+0xbf6>
}
 80051bc:	e07c      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
			flag_trip_unbalance=ON;
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <Batt_Protection_when_discharge+0xc34>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 80051c4:	f7fc f9de 	bl	8001584 <Batt_Open_Mode>
}
 80051c8:	e076      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
 80051ca:	bf00      	nop
 80051cc:	20000370 	.word	0x20000370
 80051d0:	20000020 	.word	0x20000020
 80051d4:	41200000 	.word	0x41200000
 80051d8:	20000328 	.word	0x20000328
 80051dc:	2000067c 	.word	0x2000067c
 80051e0:	20000302 	.word	0x20000302
 80051e4:	40a00000 	.word	0x40a00000
 80051e8:	20000364 	.word	0x20000364
 80051ec:	10624dd3 	.word	0x10624dd3
 80051f0:	40011000 	.word	0x40011000
 80051f4:	20000030 	.word	0x20000030
 80051f8:	20000330 	.word	0x20000330
 80051fc:	2000025c 	.word	0x2000025c
		if(fault_code!=0)
 8005200:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <Batt_Protection_when_discharge+0xd00>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <Batt_Protection_when_discharge+0xc48>
			last_fault_code=fault_code;
 8005208:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <Batt_Protection_when_discharge+0xd00>)
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	4b2f      	ldr	r3, [pc, #188]	; (80052cc <Batt_Protection_when_discharge+0xd04>)
 800520e:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005210:	4b2d      	ldr	r3, [pc, #180]	; (80052c8 <Batt_Protection_when_discharge+0xd00>)
 8005212:	2200      	movs	r2, #0
 8005214:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005216:	2200      	movs	r2, #0
 8005218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800521c:	482c      	ldr	r0, [pc, #176]	; (80052d0 <Batt_Protection_when_discharge+0xd08>)
 800521e:	f003 fd7a 	bl	8008d16 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8005222:	4b2c      	ldr	r3, [pc, #176]	; (80052d4 <Batt_Protection_when_discharge+0xd0c>)
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 800522a:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <Batt_Protection_when_discharge+0xd10>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fb f966 	bl	8000500 <__aeabi_f2d>
 8005234:	a322      	add	r3, pc, #136	; (adr r3, 80052c0 <Batt_Protection_when_discharge+0xcf8>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb f801 	bl	8000240 <__aeabi_dsub>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	f7fb fcab 	bl	8000ba0 <__aeabi_d2f>
 800524a:	4603      	mov	r3, r0
 800524c:	4a22      	ldr	r2, [pc, #136]	; (80052d8 <Batt_Protection_when_discharge+0xd10>)
 800524e:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005250:	4b22      	ldr	r3, [pc, #136]	; (80052dc <Batt_Protection_when_discharge+0xd14>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fb f953 	bl	8000500 <__aeabi_f2d>
 800525a:	a319      	add	r3, pc, #100	; (adr r3, 80052c0 <Batt_Protection_when_discharge+0xcf8>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f7fa ffee 	bl	8000240 <__aeabi_dsub>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	4610      	mov	r0, r2
 800526a:	4619      	mov	r1, r3
 800526c:	f7fb fc98 	bl	8000ba0 <__aeabi_d2f>
 8005270:	4603      	mov	r3, r0
 8005272:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <Batt_Protection_when_discharge+0xd14>)
 8005274:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <Batt_Protection_when_discharge+0xd10>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f04f 0100 	mov.w	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f7fb ff8a 	bl	8001198 <__aeabi_fcmplt>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <Batt_Protection_when_discharge+0xcca>
			T_trip_cycle=0;
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <Batt_Protection_when_discharge+0xd10>)
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <Batt_Protection_when_discharge+0xd14>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f04f 0100 	mov.w	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f7fb ff7c 	bl	8001198 <__aeabi_fcmplt>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d100      	bne.n	80052a8 <Batt_Protection_when_discharge+0xce0>
}
 80052a6:	e007      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
			T_I_Over_trip_cycle=0;
 80052a8:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <Batt_Protection_when_discharge+0xd14>)
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
}
 80052b0:	e002      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
		if(flag_trip_undervoltage==OFF) {
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <Batt_Protection_when_discharge+0xcf0>
		if(flag_trip_overcurrentdischarge==OFF) {
 80052b6:	bf00      	nop
}
 80052b8:	bf00      	nop
 80052ba:	bdb0      	pop	{r4, r5, r7, pc}
 80052bc:	f3af 8000 	nop.w
 80052c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80052c4:	3f50624d 	.word	0x3f50624d
 80052c8:	20000302 	.word	0x20000302
 80052cc:	2000036d 	.word	0x2000036d
 80052d0:	40011000 	.word	0x40011000
 80052d4:	20000810 	.word	0x20000810
 80052d8:	2000082c 	.word	0x2000082c
 80052dc:	2000033c 	.word	0x2000033c

080052e0 <Batt_Protection_when_charge>:

void Batt_Protection_when_charge(void){
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 80052e4:	4ba2      	ldr	r3, [pc, #648]	; (8005570 <Batt_Protection_when_charge+0x290>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4aa2      	ldr	r2, [pc, #648]	; (8005574 <Batt_Protection_when_charge+0x294>)
 80052ea:	6812      	ldr	r2, [r2, #0]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb ff70 	bl	80011d4 <__aeabi_fcmpgt>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <Batt_Protection_when_charge+0x48>
		Isc = IBATT;
 80052fa:	4b9d      	ldr	r3, [pc, #628]	; (8005570 <Batt_Protection_when_charge+0x290>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a9e      	ldr	r2, [pc, #632]	; (8005578 <Batt_Protection_when_charge+0x298>)
 8005300:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 8005302:	4b9c      	ldr	r3, [pc, #624]	; (8005574 <Batt_Protection_when_charge+0x294>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a9d      	ldr	r2, [pc, #628]	; (800557c <Batt_Protection_when_charge+0x29c>)
 8005308:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 800530a:	4b9d      	ldr	r3, [pc, #628]	; (8005580 <Batt_Protection_when_charge+0x2a0>)
 800530c:	220c      	movs	r2, #12
 800530e:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005310:	f7fc f938 	bl	8001584 <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 8005314:	4b9b      	ldr	r3, [pc, #620]	; (8005584 <Batt_Protection_when_charge+0x2a4>)
 8005316:	2201      	movs	r2, #1
 8005318:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800531a:	2200      	movs	r2, #0
 800531c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005320:	4899      	ldr	r0, [pc, #612]	; (8005588 <Batt_Protection_when_charge+0x2a8>)
 8005322:	f003 fcf8 	bl	8008d16 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 8005326:	e3db      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
	else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF) {
 8005328:	4b98      	ldr	r3, [pc, #608]	; (800558c <Batt_Protection_when_charge+0x2ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a98      	ldr	r2, [pc, #608]	; (8005590 <Batt_Protection_when_charge+0x2b0>)
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	4611      	mov	r1, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f7fb fc88 	bl	8000c48 <__aeabi_fsub>
 8005338:	4603      	mov	r3, r0
 800533a:	4996      	ldr	r1, [pc, #600]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb ff35 	bl	80011ac <__aeabi_fcmple>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01e      	beq.n	8005386 <Batt_Protection_when_charge+0xa6>
 8005348:	4b93      	ldr	r3, [pc, #588]	; (8005598 <Batt_Protection_when_charge+0x2b8>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d11a      	bne.n	8005386 <Batt_Protection_when_charge+0xa6>
		fault_code=7;
 8005350:	4b8b      	ldr	r3, [pc, #556]	; (8005580 <Batt_Protection_when_charge+0x2a0>)
 8005352:	2207      	movs	r2, #7
 8005354:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 8005356:	4b8e      	ldr	r3, [pc, #568]	; (8005590 <Batt_Protection_when_charge+0x2b0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a8c      	ldr	r2, [pc, #560]	; (800558c <Batt_Protection_when_charge+0x2ac>)
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f7fb ff37 	bl	80011d4 <__aeabi_fcmpgt>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 83b9 	beq.w	8005ae0 <Batt_Protection_when_charge+0x800>
			Batt_Open_Mode();
 800536e:	f7fc f909 	bl	8001584 <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 8005372:	4b89      	ldr	r3, [pc, #548]	; (8005598 <Batt_Protection_when_charge+0x2b8>)
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005378:	2200      	movs	r2, #0
 800537a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800537e:	4882      	ldr	r0, [pc, #520]	; (8005588 <Batt_Protection_when_charge+0x2a8>)
 8005380:	f003 fcc9 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 8005384:	e3ac      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
	else if(((65-Suhu_T1<10)||(50-Suhu_T2<10)||(50-Suhu_T3<10)||(50-Suhu_T4<10)) && (flag_trip_overtemperature==OFF)) { // Warning Over Temperature Charge 40 65 40 65
 8005386:	4b85      	ldr	r3, [pc, #532]	; (800559c <Batt_Protection_when_charge+0x2bc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	4884      	ldr	r0, [pc, #528]	; (80055a0 <Batt_Protection_when_charge+0x2c0>)
 800538e:	f7fb fc5b 	bl	8000c48 <__aeabi_fsub>
 8005392:	4603      	mov	r3, r0
 8005394:	497f      	ldr	r1, [pc, #508]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 8005396:	4618      	mov	r0, r3
 8005398:	f7fb fefe 	bl	8001198 <__aeabi_fcmplt>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d129      	bne.n	80053f6 <Batt_Protection_when_charge+0x116>
 80053a2:	4b80      	ldr	r3, [pc, #512]	; (80055a4 <Batt_Protection_when_charge+0x2c4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4619      	mov	r1, r3
 80053a8:	487f      	ldr	r0, [pc, #508]	; (80055a8 <Batt_Protection_when_charge+0x2c8>)
 80053aa:	f7fb fc4d 	bl	8000c48 <__aeabi_fsub>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4978      	ldr	r1, [pc, #480]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fb fef0 	bl	8001198 <__aeabi_fcmplt>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d11b      	bne.n	80053f6 <Batt_Protection_when_charge+0x116>
 80053be:	4b7b      	ldr	r3, [pc, #492]	; (80055ac <Batt_Protection_when_charge+0x2cc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	4878      	ldr	r0, [pc, #480]	; (80055a8 <Batt_Protection_when_charge+0x2c8>)
 80053c6:	f7fb fc3f 	bl	8000c48 <__aeabi_fsub>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4971      	ldr	r1, [pc, #452]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fb fee2 	bl	8001198 <__aeabi_fcmplt>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10d      	bne.n	80053f6 <Batt_Protection_when_charge+0x116>
 80053da:	4b75      	ldr	r3, [pc, #468]	; (80055b0 <Batt_Protection_when_charge+0x2d0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4619      	mov	r1, r3
 80053e0:	4871      	ldr	r0, [pc, #452]	; (80055a8 <Batt_Protection_when_charge+0x2c8>)
 80053e2:	f7fb fc31 	bl	8000c48 <__aeabi_fsub>
 80053e6:	4603      	mov	r3, r0
 80053e8:	496a      	ldr	r1, [pc, #424]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fb fed4 	bl	8001198 <__aeabi_fcmplt>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d037      	beq.n	8005466 <Batt_Protection_when_charge+0x186>
 80053f6:	4b6f      	ldr	r3, [pc, #444]	; (80055b4 <Batt_Protection_when_charge+0x2d4>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d133      	bne.n	8005466 <Batt_Protection_when_charge+0x186>
		fault_code=8;
 80053fe:	4b60      	ldr	r3, [pc, #384]	; (8005580 <Batt_Protection_when_charge+0x2a0>)
 8005400:	2208      	movs	r2, #8
 8005402:	701a      	strb	r2, [r3, #0]
		if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80)) {
 8005404:	4b65      	ldr	r3, [pc, #404]	; (800559c <Batt_Protection_when_charge+0x2bc>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	496b      	ldr	r1, [pc, #428]	; (80055b8 <Batt_Protection_when_charge+0x2d8>)
 800540a:	4618      	mov	r0, r3
 800540c:	f7fb fee2 	bl	80011d4 <__aeabi_fcmpgt>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d11b      	bne.n	800544e <Batt_Protection_when_charge+0x16e>
 8005416:	4b63      	ldr	r3, [pc, #396]	; (80055a4 <Batt_Protection_when_charge+0x2c4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4968      	ldr	r1, [pc, #416]	; (80055bc <Batt_Protection_when_charge+0x2dc>)
 800541c:	4618      	mov	r0, r3
 800541e:	f7fb fed9 	bl	80011d4 <__aeabi_fcmpgt>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d112      	bne.n	800544e <Batt_Protection_when_charge+0x16e>
 8005428:	4b60      	ldr	r3, [pc, #384]	; (80055ac <Batt_Protection_when_charge+0x2cc>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4962      	ldr	r1, [pc, #392]	; (80055b8 <Batt_Protection_when_charge+0x2d8>)
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb fed0 	bl	80011d4 <__aeabi_fcmpgt>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d109      	bne.n	800544e <Batt_Protection_when_charge+0x16e>
 800543a:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <Batt_Protection_when_charge+0x2d0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	495f      	ldr	r1, [pc, #380]	; (80055bc <Batt_Protection_when_charge+0x2dc>)
 8005440:	4618      	mov	r0, r3
 8005442:	f7fb fec7 	bl	80011d4 <__aeabi_fcmpgt>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d100      	bne.n	800544e <Batt_Protection_when_charge+0x16e>
 800544c:	e348      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
			Batt_Open_Mode();
 800544e:	f7fc f899 	bl	8001584 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8005452:	4b58      	ldr	r3, [pc, #352]	; (80055b4 <Batt_Protection_when_charge+0x2d4>)
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800545e:	484a      	ldr	r0, [pc, #296]	; (8005588 <Batt_Protection_when_charge+0x2a8>)
 8005460:	f003 fc59 	bl	8008d16 <HAL_GPIO_WritePin>
		if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80)) {
 8005464:	e33c      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8005466:	4b4d      	ldr	r3, [pc, #308]	; (800559c <Batt_Protection_when_charge+0x2bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a55      	ldr	r2, [pc, #340]	; (80055c0 <Batt_Protection_when_charge+0x2e0>)
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f7fb fbe9 	bl	8000c48 <__aeabi_fsub>
 8005476:	4603      	mov	r3, r0
 8005478:	4946      	ldr	r1, [pc, #280]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 800547a:	4618      	mov	r0, r3
 800547c:	f7fb fe96 	bl	80011ac <__aeabi_fcmple>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d130      	bne.n	80054e8 <Batt_Protection_when_charge+0x208>
 8005486:	4b47      	ldr	r3, [pc, #284]	; (80055a4 <Batt_Protection_when_charge+0x2c4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a4d      	ldr	r2, [pc, #308]	; (80055c0 <Batt_Protection_when_charge+0x2e0>)
 800548c:	6812      	ldr	r2, [r2, #0]
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f7fb fbd9 	bl	8000c48 <__aeabi_fsub>
 8005496:	4603      	mov	r3, r0
 8005498:	493e      	ldr	r1, [pc, #248]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 800549a:	4618      	mov	r0, r3
 800549c:	f7fb fe86 	bl	80011ac <__aeabi_fcmple>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d120      	bne.n	80054e8 <Batt_Protection_when_charge+0x208>
 80054a6:	4b41      	ldr	r3, [pc, #260]	; (80055ac <Batt_Protection_when_charge+0x2cc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a45      	ldr	r2, [pc, #276]	; (80055c0 <Batt_Protection_when_charge+0x2e0>)
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fb fbc9 	bl	8000c48 <__aeabi_fsub>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4936      	ldr	r1, [pc, #216]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fb fe76 	bl	80011ac <__aeabi_fcmple>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d110      	bne.n	80054e8 <Batt_Protection_when_charge+0x208>
 80054c6:	4b3a      	ldr	r3, [pc, #232]	; (80055b0 <Batt_Protection_when_charge+0x2d0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a3d      	ldr	r2, [pc, #244]	; (80055c0 <Batt_Protection_when_charge+0x2e0>)
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	4611      	mov	r1, r2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fb fbb9 	bl	8000c48 <__aeabi_fsub>
 80054d6:	4603      	mov	r3, r0
 80054d8:	492e      	ldr	r1, [pc, #184]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fb fe66 	bl	80011ac <__aeabi_fcmple>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8134 	beq.w	8005750 <Batt_Protection_when_charge+0x470>
 80054e8:	4b36      	ldr	r3, [pc, #216]	; (80055c4 <Batt_Protection_when_charge+0x2e4>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f040 812f 	bne.w	8005750 <Batt_Protection_when_charge+0x470>
		fault_code=9;
 80054f2:	4b23      	ldr	r3, [pc, #140]	; (8005580 <Batt_Protection_when_charge+0x2a0>)
 80054f4:	2209      	movs	r2, #9
 80054f6:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80054f8:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <Batt_Protection_when_charge+0x2e0>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4925      	ldr	r1, [pc, #148]	; (8005594 <Batt_Protection_when_charge+0x2b4>)
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fb fba4 	bl	8000c4c <__addsf3>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	4b24      	ldr	r3, [pc, #144]	; (800559c <Batt_Protection_when_charge+0x2bc>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f7fb fe56 	bl	80011c0 <__aeabi_fcmpge>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d05c      	beq.n	80055d4 <Batt_Protection_when_charge+0x2f4>
 800551a:	4b29      	ldr	r3, [pc, #164]	; (80055c0 <Batt_Protection_when_charge+0x2e0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	492a      	ldr	r1, [pc, #168]	; (80055c8 <Batt_Protection_when_charge+0x2e8>)
 8005520:	4618      	mov	r0, r3
 8005522:	f7fb fb93 	bl	8000c4c <__addsf3>
 8005526:	4603      	mov	r3, r0
 8005528:	461a      	mov	r2, r3
 800552a:	4b1c      	ldr	r3, [pc, #112]	; (800559c <Batt_Protection_when_charge+0x2bc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7fb fe31 	bl	8001198 <__aeabi_fcmplt>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d04b      	beq.n	80055d4 <Batt_Protection_when_charge+0x2f4>
			if((test_tim2%1000)==0) {
 800553c:	4b23      	ldr	r3, [pc, #140]	; (80055cc <Batt_Protection_when_charge+0x2ec>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <Batt_Protection_when_charge+0x2f0>)
 8005542:	fb83 1302 	smull	r1, r3, r3, r2
 8005546:	1199      	asrs	r1, r3, #6
 8005548:	17d3      	asrs	r3, r2, #31
 800554a:	1acb      	subs	r3, r1, r3
 800554c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 80e5 	bne.w	8005726 <Batt_Protection_when_charge+0x446>
				BUZZ_Toggle;
 800555c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <Batt_Protection_when_charge+0x2a8>)
 8005562:	f003 fbf0 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005566:	4b19      	ldr	r3, [pc, #100]	; (80055cc <Batt_Protection_when_charge+0x2ec>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 800556c:	e0db      	b.n	8005726 <Batt_Protection_when_charge+0x446>
 800556e:	bf00      	nop
 8005570:	200002f4 	.word	0x200002f4
 8005574:	20000280 	.word	0x20000280
 8005578:	200002dc 	.word	0x200002dc
 800557c:	20000318 	.word	0x20000318
 8005580:	20000302 	.word	0x20000302
 8005584:	2000025f 	.word	0x2000025f
 8005588:	40011000 	.word	0x40011000
 800558c:	20000024 	.word	0x20000024
 8005590:	20000370 	.word	0x20000370
 8005594:	41200000 	.word	0x41200000
 8005598:	2000025d 	.word	0x2000025d
 800559c:	20000304 	.word	0x20000304
 80055a0:	42820000 	.word	0x42820000
 80055a4:	20000378 	.word	0x20000378
 80055a8:	42480000 	.word	0x42480000
 80055ac:	20000284 	.word	0x20000284
 80055b0:	20000334 	.word	0x20000334
 80055b4:	2000027c 	.word	0x2000027c
 80055b8:	42340000 	.word	0x42340000
 80055bc:	42a00000 	.word	0x42a00000
 80055c0:	2000001c 	.word	0x2000001c
 80055c4:	200002fc 	.word	0x200002fc
 80055c8:	40a00000 	.word	0x40a00000
 80055cc:	20000364 	.word	0x20000364
 80055d0:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 80055d4:	4b54      	ldr	r3, [pc, #336]	; (8005728 <Batt_Protection_when_charge+0x448>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4954      	ldr	r1, [pc, #336]	; (800572c <Batt_Protection_when_charge+0x44c>)
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fb fb36 	bl	8000c4c <__addsf3>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b52      	ldr	r3, [pc, #328]	; (8005730 <Batt_Protection_when_charge+0x450>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fb fde8 	bl	80011c0 <__aeabi_fcmpge>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d029      	beq.n	800564a <Batt_Protection_when_charge+0x36a>
 80055f6:	4b4c      	ldr	r3, [pc, #304]	; (8005728 <Batt_Protection_when_charge+0x448>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fb fb24 	bl	8000c4c <__addsf3>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	4b49      	ldr	r3, [pc, #292]	; (8005730 <Batt_Protection_when_charge+0x450>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fb fdc2 	bl	8001198 <__aeabi_fcmplt>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d017      	beq.n	800564a <Batt_Protection_when_charge+0x36a>
			if((test_tim2%500)==0) {
 800561a:	4b46      	ldr	r3, [pc, #280]	; (8005734 <Batt_Protection_when_charge+0x454>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b46      	ldr	r3, [pc, #280]	; (8005738 <Batt_Protection_when_charge+0x458>)
 8005620:	fb83 1302 	smull	r1, r3, r3, r2
 8005624:	1159      	asrs	r1, r3, #5
 8005626:	17d3      	asrs	r3, r2, #31
 8005628:	1acb      	subs	r3, r1, r3
 800562a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800562e:	fb01 f303 	mul.w	r3, r1, r3
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d176      	bne.n	8005726 <Batt_Protection_when_charge+0x446>
				BUZZ_Toggle;
 8005638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800563c:	483f      	ldr	r0, [pc, #252]	; (800573c <Batt_Protection_when_charge+0x45c>)
 800563e:	f003 fb82 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005642:	4b3c      	ldr	r3, [pc, #240]	; (8005734 <Batt_Protection_when_charge+0x454>)
 8005644:	2200      	movs	r2, #0
 8005646:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8005648:	e06d      	b.n	8005726 <Batt_Protection_when_charge+0x446>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <Batt_Protection_when_charge+0x448>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005652:	4618      	mov	r0, r3
 8005654:	f7fb fafa 	bl	8000c4c <__addsf3>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	4b34      	ldr	r3, [pc, #208]	; (8005730 <Batt_Protection_when_charge+0x450>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f7fb fdb6 	bl	80011d4 <__aeabi_fcmpgt>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d022      	beq.n	80056b4 <Batt_Protection_when_charge+0x3d4>
 800566e:	4b30      	ldr	r3, [pc, #192]	; (8005730 <Batt_Protection_when_charge+0x450>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2d      	ldr	r2, [pc, #180]	; (8005728 <Batt_Protection_when_charge+0x448>)
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7fb fda1 	bl	80011c0 <__aeabi_fcmpge>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d017      	beq.n	80056b4 <Batt_Protection_when_charge+0x3d4>
			if((test_tim2%500)==0) {
 8005684:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <Batt_Protection_when_charge+0x454>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <Batt_Protection_when_charge+0x458>)
 800568a:	fb83 1302 	smull	r1, r3, r3, r2
 800568e:	1159      	asrs	r1, r3, #5
 8005690:	17d3      	asrs	r3, r2, #31
 8005692:	1acb      	subs	r3, r1, r3
 8005694:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d141      	bne.n	8005726 <Batt_Protection_when_charge+0x446>
				BUZZ_Toggle;
 80056a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056a6:	4825      	ldr	r0, [pc, #148]	; (800573c <Batt_Protection_when_charge+0x45c>)
 80056a8:	f003 fb4d 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80056ac:	4b21      	ldr	r3, [pc, #132]	; (8005734 <Batt_Protection_when_charge+0x454>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 80056b2:	e038      	b.n	8005726 <Batt_Protection_when_charge+0x446>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 80056b4:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <Batt_Protection_when_charge+0x450>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <Batt_Protection_when_charge+0x448>)
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fb fd6a 	bl	8001198 <__aeabi_fcmplt>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d121      	bne.n	800570e <Batt_Protection_when_charge+0x42e>
 80056ca:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <Batt_Protection_when_charge+0x460>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a16      	ldr	r2, [pc, #88]	; (8005728 <Batt_Protection_when_charge+0x448>)
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fb fd5f 	bl	8001198 <__aeabi_fcmplt>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d116      	bne.n	800570e <Batt_Protection_when_charge+0x42e>
 80056e0:	4b18      	ldr	r3, [pc, #96]	; (8005744 <Batt_Protection_when_charge+0x464>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a10      	ldr	r2, [pc, #64]	; (8005728 <Batt_Protection_when_charge+0x448>)
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fb fd54 	bl	8001198 <__aeabi_fcmplt>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <Batt_Protection_when_charge+0x42e>
 80056f6:	4b14      	ldr	r3, [pc, #80]	; (8005748 <Batt_Protection_when_charge+0x468>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <Batt_Protection_when_charge+0x448>)
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f7fb fd49 	bl	8001198 <__aeabi_fcmplt>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d100      	bne.n	800570e <Batt_Protection_when_charge+0x42e>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 800570c:	e1e8      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
			Batt_Open_Mode();
 800570e:	f7fb ff39 	bl	8001584 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <Batt_Protection_when_charge+0x46c>)
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005718:	2200      	movs	r2, #0
 800571a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800571e:	4807      	ldr	r0, [pc, #28]	; (800573c <Batt_Protection_when_charge+0x45c>)
 8005720:	f003 faf9 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8005724:	e1dc      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
 8005726:	e1db      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
 8005728:	2000001c 	.word	0x2000001c
 800572c:	40a00000 	.word	0x40a00000
 8005730:	20000304 	.word	0x20000304
 8005734:	20000364 	.word	0x20000364
 8005738:	10624dd3 	.word	0x10624dd3
 800573c:	40011000 	.word	0x40011000
 8005740:	20000378 	.word	0x20000378
 8005744:	20000284 	.word	0x20000284
 8005748:	20000334 	.word	0x20000334
 800574c:	200002fc 	.word	0x200002fc
	else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 8005750:	4ba3      	ldr	r3, [pc, #652]	; (80059e0 <Batt_Protection_when_charge+0x700>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005758:	4618      	mov	r0, r3
 800575a:	f7fa fed1 	bl	8000500 <__aeabi_f2d>
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	4ba0      	ldr	r3, [pc, #640]	; (80059e4 <Batt_Protection_when_charge+0x704>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7fa feca 	bl	8000500 <__aeabi_f2d>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4620      	mov	r0, r4
 8005772:	4629      	mov	r1, r5
 8005774:	f7fa fd64 	bl	8000240 <__aeabi_dsub>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	f04f 0200 	mov.w	r2, #0
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	f7fb f9a2 	bl	8000ad0 <__aeabi_dcmpgt>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8108 	beq.w	80059a4 <Batt_Protection_when_charge+0x6c4>
 8005794:	4b94      	ldr	r3, [pc, #592]	; (80059e8 <Batt_Protection_when_charge+0x708>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 8103 	bne.w	80059a4 <Batt_Protection_when_charge+0x6c4>
		fault_code=10;
 800579e:	4b93      	ldr	r3, [pc, #588]	; (80059ec <Batt_Protection_when_charge+0x70c>)
 80057a0:	220a      	movs	r2, #10
 80057a2:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 80057a4:	4b8e      	ldr	r3, [pc, #568]	; (80059e0 <Batt_Protection_when_charge+0x700>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fa fea9 	bl	8000500 <__aeabi_f2d>
 80057ae:	a388      	add	r3, pc, #544	; (adr r3, 80059d0 <Batt_Protection_when_charge+0x6f0>)
 80057b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b4:	f7fb f826 	bl	8000804 <__aeabi_ddiv>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4614      	mov	r4, r2
 80057be:	461d      	mov	r5, r3
 80057c0:	4b87      	ldr	r3, [pc, #540]	; (80059e0 <Batt_Protection_when_charge+0x700>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fa fe9b 	bl	8000500 <__aeabi_f2d>
 80057ca:	a381      	add	r3, pc, #516	; (adr r3, 80059d0 <Batt_Protection_when_charge+0x6f0>)
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f7fb f818 	bl	8000804 <__aeabi_ddiv>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4620      	mov	r0, r4
 80057da:	4629      	mov	r1, r5
 80057dc:	f7fa fee8 	bl	80005b0 <__aeabi_dmul>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	f04f 0200 	mov.w	r2, #0
 80057ec:	4b80      	ldr	r3, [pc, #512]	; (80059f0 <Batt_Protection_when_charge+0x710>)
 80057ee:	f7fa fd27 	bl	8000240 <__aeabi_dsub>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	f04f 0000 	mov.w	r0, #0
 80057fa:	497e      	ldr	r1, [pc, #504]	; (80059f4 <Batt_Protection_when_charge+0x714>)
 80057fc:	f7fb f802 	bl	8000804 <__aeabi_ddiv>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	f7fb f9ca 	bl	8000ba0 <__aeabi_d2f>
 800580c:	4603      	mov	r3, r0
 800580e:	4a7a      	ldr	r2, [pc, #488]	; (80059f8 <Batt_Protection_when_charge+0x718>)
 8005810:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 8005812:	4b7a      	ldr	r3, [pc, #488]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fa fe72 	bl	8000500 <__aeabi_f2d>
 800581c:	a36e      	add	r3, pc, #440	; (adr r3, 80059d8 <Batt_Protection_when_charge+0x6f8>)
 800581e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005822:	f7fa fd0f 	bl	8000244 <__adddf3>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4610      	mov	r0, r2
 800582c:	4619      	mov	r1, r3
 800582e:	f7fb f9b7 	bl	8000ba0 <__aeabi_d2f>
 8005832:	4603      	mov	r3, r0
 8005834:	4a71      	ldr	r2, [pc, #452]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 8005836:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 8005838:	4b70      	ldr	r3, [pc, #448]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a6e      	ldr	r2, [pc, #440]	; (80059f8 <Batt_Protection_when_charge+0x718>)
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f7fb fcc6 	bl	80011d4 <__aeabi_fcmpgt>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d012      	beq.n	8005874 <Batt_Protection_when_charge+0x594>
 800584e:	4b66      	ldr	r3, [pc, #408]	; (80059e8 <Batt_Protection_when_charge+0x708>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10e      	bne.n	8005874 <Batt_Protection_when_charge+0x594>
			Batt_Open_Mode();
 8005856:	f7fb fe95 	bl	8001584 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 800585a:	4b67      	ldr	r3, [pc, #412]	; (80059f8 <Batt_Protection_when_charge+0x718>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a67      	ldr	r2, [pc, #412]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 8005860:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentcharge=ON;
 8005862:	4b61      	ldr	r3, [pc, #388]	; (80059e8 <Batt_Protection_when_charge+0x708>)
 8005864:	2201      	movs	r2, #1
 8005866:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005868:	2200      	movs	r2, #0
 800586a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800586e:	4864      	ldr	r0, [pc, #400]	; (8005a00 <Batt_Protection_when_charge+0x720>)
 8005870:	f003 fa51 	bl	8008d16 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 8005874:	4b5c      	ldr	r3, [pc, #368]	; (80059e8 <Batt_Protection_when_charge+0x708>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f040 8130 	bne.w	8005ade <Batt_Protection_when_charge+0x7fe>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 800587e:	4b5e      	ldr	r3, [pc, #376]	; (80059f8 <Batt_Protection_when_charge+0x718>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a5e      	ldr	r2, [pc, #376]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	4611      	mov	r1, r2
 8005888:	4618      	mov	r0, r3
 800588a:	f7fb f9dd 	bl	8000c48 <__aeabi_fsub>
 800588e:	4603      	mov	r3, r0
 8005890:	495c      	ldr	r1, [pc, #368]	; (8005a04 <Batt_Protection_when_charge+0x724>)
 8005892:	4618      	mov	r0, r3
 8005894:	f7fb fc9e 	bl	80011d4 <__aeabi_fcmpgt>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d018      	beq.n	80058d0 <Batt_Protection_when_charge+0x5f0>
				if((test_tim2%1000)==0) {
 800589e:	4b5a      	ldr	r3, [pc, #360]	; (8005a08 <Batt_Protection_when_charge+0x728>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b5a      	ldr	r3, [pc, #360]	; (8005a0c <Batt_Protection_when_charge+0x72c>)
 80058a4:	fb83 1302 	smull	r1, r3, r3, r2
 80058a8:	1199      	asrs	r1, r3, #6
 80058aa:	17d3      	asrs	r3, r2, #31
 80058ac:	1acb      	subs	r3, r1, r3
 80058ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f040 8110 	bne.w	8005ade <Batt_Protection_when_charge+0x7fe>
					BUZZ_Toggle;
 80058be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058c2:	484f      	ldr	r0, [pc, #316]	; (8005a00 <Batt_Protection_when_charge+0x720>)
 80058c4:	f003 fa3f 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80058c8:	4b4f      	ldr	r3, [pc, #316]	; (8005a08 <Batt_Protection_when_charge+0x728>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 80058ce:	e106      	b.n	8005ade <Batt_Protection_when_charge+0x7fe>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 80058d0:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <Batt_Protection_when_charge+0x718>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a49      	ldr	r2, [pc, #292]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fb f9b4 	bl	8000c48 <__aeabi_fsub>
 80058e0:	4603      	mov	r3, r0
 80058e2:	494b      	ldr	r1, [pc, #300]	; (8005a10 <Batt_Protection_when_charge+0x730>)
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fb fc75 	bl	80011d4 <__aeabi_fcmpgt>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <Batt_Protection_when_charge+0x640>
				if((test_tim2%100)==0) {
 80058f0:	4b45      	ldr	r3, [pc, #276]	; (8005a08 <Batt_Protection_when_charge+0x728>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4b47      	ldr	r3, [pc, #284]	; (8005a14 <Batt_Protection_when_charge+0x734>)
 80058f6:	fb83 1302 	smull	r1, r3, r3, r2
 80058fa:	1159      	asrs	r1, r3, #5
 80058fc:	17d3      	asrs	r3, r2, #31
 80058fe:	1acb      	subs	r3, r1, r3
 8005900:	2164      	movs	r1, #100	; 0x64
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	f040 80e8 	bne.w	8005ade <Batt_Protection_when_charge+0x7fe>
					BUZZ_Toggle;
 800590e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005912:	483b      	ldr	r0, [pc, #236]	; (8005a00 <Batt_Protection_when_charge+0x720>)
 8005914:	f003 fa17 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005918:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <Batt_Protection_when_charge+0x728>)
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 800591e:	e0de      	b.n	8005ade <Batt_Protection_when_charge+0x7fe>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 8005920:	4b35      	ldr	r3, [pc, #212]	; (80059f8 <Batt_Protection_when_charge+0x718>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a35      	ldr	r2, [pc, #212]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f7fb f98c 	bl	8000c48 <__aeabi_fsub>
 8005930:	4603      	mov	r3, r0
 8005932:	4939      	ldr	r1, [pc, #228]	; (8005a18 <Batt_Protection_when_charge+0x738>)
 8005934:	4618      	mov	r0, r3
 8005936:	f7fb fc4d 	bl	80011d4 <__aeabi_fcmpgt>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d018      	beq.n	8005972 <Batt_Protection_when_charge+0x692>
				if((test_tim2%10)==0) {
 8005940:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <Batt_Protection_when_charge+0x728>)
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	4b35      	ldr	r3, [pc, #212]	; (8005a1c <Batt_Protection_when_charge+0x73c>)
 8005946:	fb83 2301 	smull	r2, r3, r3, r1
 800594a:	109a      	asrs	r2, r3, #2
 800594c:	17cb      	asrs	r3, r1, #31
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	1aca      	subs	r2, r1, r3
 800595a:	2a00      	cmp	r2, #0
 800595c:	f040 80bf 	bne.w	8005ade <Batt_Protection_when_charge+0x7fe>
					BUZZ_Toggle;
 8005960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005964:	4826      	ldr	r0, [pc, #152]	; (8005a00 <Batt_Protection_when_charge+0x720>)
 8005966:	f003 f9ee 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800596a:	4b27      	ldr	r3, [pc, #156]	; (8005a08 <Batt_Protection_when_charge+0x728>)
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005970:	e0b5      	b.n	8005ade <Batt_Protection_when_charge+0x7fe>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8005972:	4b21      	ldr	r3, [pc, #132]	; (80059f8 <Batt_Protection_when_charge+0x718>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a21      	ldr	r2, [pc, #132]	; (80059fc <Batt_Protection_when_charge+0x71c>)
 8005978:	6812      	ldr	r2, [r2, #0]
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f7fb f963 	bl	8000c48 <__aeabi_fsub>
 8005982:	4603      	mov	r3, r0
 8005984:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005988:	4618      	mov	r0, r3
 800598a:	f7fb fc23 	bl	80011d4 <__aeabi_fcmpgt>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d100      	bne.n	8005996 <Batt_Protection_when_charge+0x6b6>
		if(flag_trip_overcurrentcharge==OFF) {
 8005994:	e0a3      	b.n	8005ade <Batt_Protection_when_charge+0x7fe>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005996:	2201      	movs	r2, #1
 8005998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800599c:	4818      	ldr	r0, [pc, #96]	; (8005a00 <Batt_Protection_when_charge+0x720>)
 800599e:	f003 f9ba 	bl	8008d16 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 80059a2:	e09c      	b.n	8005ade <Batt_Protection_when_charge+0x7fe>
	else if(VBATT>V_Over_Set) {
 80059a4:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <Batt_Protection_when_charge+0x740>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <Batt_Protection_when_charge+0x744>)
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	4611      	mov	r1, r2
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fc10 	bl	80011d4 <__aeabi_fcmpgt>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d038      	beq.n	8005a2c <Batt_Protection_when_charge+0x74c>
		fault_code=11;
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <Batt_Protection_when_charge+0x70c>)
 80059bc:	220b      	movs	r2, #11
 80059be:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=ON;
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <Batt_Protection_when_charge+0x748>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80059c6:	f7fb fddd 	bl	8001584 <Batt_Open_Mode>
}
 80059ca:	e089      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
 80059cc:	f3af 8000 	nop.w
 80059d0:	9999999a 	.word	0x9999999a
 80059d4:	401b9999 	.word	0x401b9999
 80059d8:	47ae147b 	.word	0x47ae147b
 80059dc:	3f847ae1 	.word	0x3f847ae1
 80059e0:	200002f4 	.word	0x200002f4
 80059e4:	20000014 	.word	0x20000014
 80059e8:	20000322 	.word	0x20000322
 80059ec:	20000302 	.word	0x20000302
 80059f0:	3ff00000 	.word	0x3ff00000
 80059f4:	40200000 	.word	0x40200000
 80059f8:	2000026c 	.word	0x2000026c
 80059fc:	2000033c 	.word	0x2000033c
 8005a00:	40011000 	.word	0x40011000
 8005a04:	41700000 	.word	0x41700000
 8005a08:	20000364 	.word	0x20000364
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	41200000 	.word	0x41200000
 8005a14:	51eb851f 	.word	0x51eb851f
 8005a18:	40400000 	.word	0x40400000
 8005a1c:	66666667 	.word	0x66666667
 8005a20:	20000280 	.word	0x20000280
 8005a24:	2000002c 	.word	0x2000002c
 8005a28:	20000374 	.word	0x20000374
		if(fault_code!=0)
 8005a2c:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <Batt_Protection_when_charge+0x810>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <Batt_Protection_when_charge+0x75c>
			last_fault_code=fault_code;
 8005a34:	4b2e      	ldr	r3, [pc, #184]	; (8005af0 <Batt_Protection_when_charge+0x810>)
 8005a36:	781a      	ldrb	r2, [r3, #0]
 8005a38:	4b2e      	ldr	r3, [pc, #184]	; (8005af4 <Batt_Protection_when_charge+0x814>)
 8005a3a:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005a3c:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <Batt_Protection_when_charge+0x810>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005a42:	2200      	movs	r2, #0
 8005a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a48:	482b      	ldr	r0, [pc, #172]	; (8005af8 <Batt_Protection_when_charge+0x818>)
 8005a4a:	f003 f964 	bl	8008d16 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8005a4e:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <Batt_Protection_when_charge+0x81c>)
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8005a56:	4b2a      	ldr	r3, [pc, #168]	; (8005b00 <Batt_Protection_when_charge+0x820>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fa fd50 	bl	8000500 <__aeabi_f2d>
 8005a60:	a321      	add	r3, pc, #132	; (adr r3, 8005ae8 <Batt_Protection_when_charge+0x808>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fbeb 	bl	8000240 <__aeabi_dsub>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7fb f895 	bl	8000ba0 <__aeabi_d2f>
 8005a76:	4603      	mov	r3, r0
 8005a78:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <Batt_Protection_when_charge+0x820>)
 8005a7a:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005a7c:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <Batt_Protection_when_charge+0x824>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fa fd3d 	bl	8000500 <__aeabi_f2d>
 8005a86:	a318      	add	r3, pc, #96	; (adr r3, 8005ae8 <Batt_Protection_when_charge+0x808>)
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f7fa fbd8 	bl	8000240 <__aeabi_dsub>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4610      	mov	r0, r2
 8005a96:	4619      	mov	r1, r3
 8005a98:	f7fb f882 	bl	8000ba0 <__aeabi_d2f>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <Batt_Protection_when_charge+0x824>)
 8005aa0:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 8005aa2:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <Batt_Protection_when_charge+0x820>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f04f 0100 	mov.w	r1, #0
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fb fb74 	bl	8001198 <__aeabi_fcmplt>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <Batt_Protection_when_charge+0x7de>
			T_trip_cycle=0;
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <Batt_Protection_when_charge+0x820>)
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <Batt_Protection_when_charge+0x824>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fb fb66 	bl	8001198 <__aeabi_fcmplt>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d100      	bne.n	8005ad4 <Batt_Protection_when_charge+0x7f4>
}
 8005ad2:	e005      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
			T_I_Over_trip_cycle=0;
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <Batt_Protection_when_charge+0x824>)
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
}
 8005adc:	e000      	b.n	8005ae0 <Batt_Protection_when_charge+0x800>
		if(flag_trip_overcurrentcharge==OFF) {
 8005ade:	bf00      	nop
}
 8005ae0:	bf00      	nop
 8005ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005aec:	3f50624d 	.word	0x3f50624d
 8005af0:	20000302 	.word	0x20000302
 8005af4:	2000036d 	.word	0x2000036d
 8005af8:	40011000 	.word	0x40011000
 8005afc:	20000810 	.word	0x20000810
 8005b00:	2000082c 	.word	0x2000082c
 8005b04:	2000033c 	.word	0x2000033c

08005b08 <Batt_Protection_when_chargedischarge>:

void Batt_Protection_when_chargedischarge(void) {
 8005b08:	b5b0      	push	{r4, r5, r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
	// Short circuit protection
	if(IBATT > (VBATT/0.9)) {
 8005b0c:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <Batt_Protection_when_chargedischarge+0x1e0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fa fcf5 	bl	8000500 <__aeabi_f2d>
 8005b16:	4604      	mov	r4, r0
 8005b18:	460d      	mov	r5, r1
 8005b1a:	4b74      	ldr	r3, [pc, #464]	; (8005cec <Batt_Protection_when_chargedischarge+0x1e4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fa fcee 	bl	8000500 <__aeabi_f2d>
 8005b24:	a36c      	add	r3, pc, #432	; (adr r3, 8005cd8 <Batt_Protection_when_chargedischarge+0x1d0>)
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f7fa fe6b 	bl	8000804 <__aeabi_ddiv>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4620      	mov	r0, r4
 8005b34:	4629      	mov	r1, r5
 8005b36:	f7fa ffcb 	bl	8000ad0 <__aeabi_dcmpgt>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d016      	beq.n	8005b6e <Batt_Protection_when_chargedischarge+0x66>
		Isc=IBATT;
 8005b40:	4b69      	ldr	r3, [pc, #420]	; (8005ce8 <Batt_Protection_when_chargedischarge+0x1e0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a6a      	ldr	r2, [pc, #424]	; (8005cf0 <Batt_Protection_when_chargedischarge+0x1e8>)
 8005b46:	6013      	str	r3, [r2, #0]
		Vsc=VBATT;
 8005b48:	4b68      	ldr	r3, [pc, #416]	; (8005cec <Batt_Protection_when_chargedischarge+0x1e4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a69      	ldr	r2, [pc, #420]	; (8005cf4 <Batt_Protection_when_chargedischarge+0x1ec>)
 8005b4e:	6013      	str	r3, [r2, #0]
		fault_code=12;
 8005b50:	4b69      	ldr	r3, [pc, #420]	; (8005cf8 <Batt_Protection_when_chargedischarge+0x1f0>)
 8005b52:	220c      	movs	r2, #12
 8005b54:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005b56:	f7fb fd15 	bl	8001584 <Batt_Open_Mode>
		flag_trip_shortcircuit=ON;
 8005b5a:	4b68      	ldr	r3, [pc, #416]	; (8005cfc <Batt_Protection_when_chargedischarge+0x1f4>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b66:	4866      	ldr	r0, [pc, #408]	; (8005d00 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005b68:	f003 f8d5 	bl	8008d16 <HAL_GPIO_WritePin>
 8005b6c:	e0f5      	b.n	8005d5a <Batt_Protection_when_chargedischarge+0x252>
	}

	// Under Voltage protection
	else if(VBATT < V_Under_Set && flag_trip_undervoltage == OFF ) { //Indikasi terjadi Undervoltage
 8005b6e:	4b5f      	ldr	r3, [pc, #380]	; (8005cec <Batt_Protection_when_chargedischarge+0x1e4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a64      	ldr	r2, [pc, #400]	; (8005d04 <Batt_Protection_when_chargedischarge+0x1fc>)
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fb fb0d 	bl	8001198 <__aeabi_fcmplt>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 80ea 	beq.w	8005d5a <Batt_Protection_when_chargedischarge+0x252>
 8005b86:	4b60      	ldr	r3, [pc, #384]	; (8005d08 <Batt_Protection_when_chargedischarge+0x200>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f040 80e5 	bne.w	8005d5a <Batt_Protection_when_chargedischarge+0x252>
		fault_code=1;
 8005b90:	4b59      	ldr	r3, [pc, #356]	; (8005cf8 <Batt_Protection_when_chargedischarge+0x1f0>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8005b96:	4b5d      	ldr	r3, [pc, #372]	; (8005d0c <Batt_Protection_when_chargedischarge+0x204>)
 8005b98:	681c      	ldr	r4, [r3, #0]
 8005b9a:	4b54      	ldr	r3, [pc, #336]	; (8005cec <Batt_Protection_when_chargedischarge+0x1e4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a59      	ldr	r2, [pc, #356]	; (8005d04 <Batt_Protection_when_chargedischarge+0x1fc>)
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fb fa0d 	bl	8000fc4 <__aeabi_fdiv>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4619      	mov	r1, r3
 8005bae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005bb2:	f7fb f849 	bl	8000c48 <__aeabi_fsub>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f7fb fa02 	bl	8000fc4 <__aeabi_fdiv>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4b52      	ldr	r3, [pc, #328]	; (8005d10 <Batt_Protection_when_chargedischarge+0x208>)
 8005bc6:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8005bc8:	4b52      	ldr	r3, [pc, #328]	; (8005d14 <Batt_Protection_when_chargedischarge+0x20c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fa fc97 	bl	8000500 <__aeabi_f2d>
 8005bd2:	a343      	add	r3, pc, #268	; (adr r3, 8005ce0 <Batt_Protection_when_chargedischarge+0x1d8>)
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f7fa fb34 	bl	8000244 <__adddf3>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7fa ffdc 	bl	8000ba0 <__aeabi_d2f>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4a4a      	ldr	r2, [pc, #296]	; (8005d14 <Batt_Protection_when_chargedischarge+0x20c>)
 8005bec:	6013      	str	r3, [r2, #0]

		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8005bee:	4b49      	ldr	r3, [pc, #292]	; (8005d14 <Batt_Protection_when_chargedischarge+0x20c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a47      	ldr	r2, [pc, #284]	; (8005d10 <Batt_Protection_when_chargedischarge+0x208>)
 8005bf4:	6812      	ldr	r2, [r2, #0]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fb faeb 	bl	80011d4 <__aeabi_fcmpgt>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d012      	beq.n	8005c2a <Batt_Protection_when_chargedischarge+0x122>
 8005c04:	4b40      	ldr	r3, [pc, #256]	; (8005d08 <Batt_Protection_when_chargedischarge+0x200>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10e      	bne.n	8005c2a <Batt_Protection_when_chargedischarge+0x122>
			Batt_Open_Mode();
 8005c0c:	f7fb fcba 	bl	8001584 <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8005c10:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <Batt_Protection_when_chargedischarge+0x208>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a3f      	ldr	r2, [pc, #252]	; (8005d14 <Batt_Protection_when_chargedischarge+0x20c>)
 8005c16:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 8005c18:	4b3b      	ldr	r3, [pc, #236]	; (8005d08 <Batt_Protection_when_chargedischarge+0x200>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c24:	4836      	ldr	r0, [pc, #216]	; (8005d00 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005c26:	f003 f876 	bl	8008d16 <HAL_GPIO_WritePin>
		}

		if(flag_trip_undervoltage==OFF) {
 8005c2a:	4b37      	ldr	r3, [pc, #220]	; (8005d08 <Batt_Protection_when_chargedischarge+0x200>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f040 8093 	bne.w	8005d5a <Batt_Protection_when_chargedischarge+0x252>
			if(T_Under_trip-T_trip_cycle>15) {
 8005c34:	4b36      	ldr	r3, [pc, #216]	; (8005d10 <Batt_Protection_when_chargedischarge+0x208>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a36      	ldr	r2, [pc, #216]	; (8005d14 <Batt_Protection_when_chargedischarge+0x20c>)
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fb f802 	bl	8000c48 <__aeabi_fsub>
 8005c44:	4603      	mov	r3, r0
 8005c46:	4934      	ldr	r1, [pc, #208]	; (8005d18 <Batt_Protection_when_chargedischarge+0x210>)
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fb fac3 	bl	80011d4 <__aeabi_fcmpgt>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <Batt_Protection_when_chargedischarge+0x17c>
				if((test_tim2%1000)==0) {
 8005c54:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <Batt_Protection_when_chargedischarge+0x214>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <Batt_Protection_when_chargedischarge+0x218>)
 8005c5a:	fb83 1302 	smull	r1, r3, r3, r2
 8005c5e:	1199      	asrs	r1, r3, #6
 8005c60:	17d3      	asrs	r3, r2, #31
 8005c62:	1acb      	subs	r3, r1, r3
 8005c64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d173      	bne.n	8005d5a <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 8005c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c76:	4822      	ldr	r0, [pc, #136]	; (8005d00 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005c78:	f003 f865 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <Batt_Protection_when_chargedischarge+0x214>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	e06a      	b.n	8005d5a <Batt_Protection_when_chargedischarge+0x252>
				}
			}
			else if(T_Under_trip-T_trip_cycle>10) {
 8005c84:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <Batt_Protection_when_chargedischarge+0x208>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a22      	ldr	r2, [pc, #136]	; (8005d14 <Batt_Protection_when_chargedischarge+0x20c>)
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fa ffda 	bl	8000c48 <__aeabi_fsub>
 8005c94:	4603      	mov	r3, r0
 8005c96:	4923      	ldr	r1, [pc, #140]	; (8005d24 <Batt_Protection_when_chargedischarge+0x21c>)
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fb fa9b 	bl	80011d4 <__aeabi_fcmpgt>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d043      	beq.n	8005d2c <Batt_Protection_when_chargedischarge+0x224>
				if((test_tim2%100)==0) {
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <Batt_Protection_when_chargedischarge+0x214>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	4b1f      	ldr	r3, [pc, #124]	; (8005d28 <Batt_Protection_when_chargedischarge+0x220>)
 8005caa:	fb83 1302 	smull	r1, r3, r3, r2
 8005cae:	1159      	asrs	r1, r3, #5
 8005cb0:	17d3      	asrs	r3, r2, #31
 8005cb2:	1acb      	subs	r3, r1, r3
 8005cb4:	2164      	movs	r1, #100	; 0x64
 8005cb6:	fb01 f303 	mul.w	r3, r1, r3
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d14c      	bne.n	8005d5a <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 8005cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cc4:	480e      	ldr	r0, [pc, #56]	; (8005d00 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005cc6:	f003 f83e 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005cca:	4b14      	ldr	r3, [pc, #80]	; (8005d1c <Batt_Protection_when_chargedischarge+0x214>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e043      	b.n	8005d5a <Batt_Protection_when_chargedischarge+0x252>
 8005cd2:	bf00      	nop
 8005cd4:	f3af 8000 	nop.w
 8005cd8:	cccccccd 	.word	0xcccccccd
 8005cdc:	3feccccc 	.word	0x3feccccc
 8005ce0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ce4:	3f50624d 	.word	0x3f50624d
 8005ce8:	200002f4 	.word	0x200002f4
 8005cec:	20000280 	.word	0x20000280
 8005cf0:	200002dc 	.word	0x200002dc
 8005cf4:	20000318 	.word	0x20000318
 8005cf8:	20000302 	.word	0x20000302
 8005cfc:	2000025f 	.word	0x2000025f
 8005d00:	40011000 	.word	0x40011000
 8005d04:	20000028 	.word	0x20000028
 8005d08:	200002fd 	.word	0x200002fd
 8005d0c:	20000034 	.word	0x20000034
 8005d10:	20000810 	.word	0x20000810
 8005d14:	2000082c 	.word	0x2000082c
 8005d18:	41700000 	.word	0x41700000
 8005d1c:	20000364 	.word	0x20000364
 8005d20:	10624dd3 	.word	0x10624dd3
 8005d24:	41200000 	.word	0x41200000
 8005d28:	51eb851f 	.word	0x51eb851f
				}
			}
			else if(T_Under_trip-T_trip_cycle>1) {
 8005d2c:	4b78      	ldr	r3, [pc, #480]	; (8005f10 <Batt_Protection_when_chargedischarge+0x408>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a78      	ldr	r2, [pc, #480]	; (8005f14 <Batt_Protection_when_chargedischarge+0x40c>)
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	4611      	mov	r1, r2
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fa ff86 	bl	8000c48 <__aeabi_fsub>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fb fa46 	bl	80011d4 <__aeabi_fcmpgt>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <Batt_Protection_when_chargedischarge+0x252>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d54:	4870      	ldr	r0, [pc, #448]	; (8005f18 <Batt_Protection_when_chargedischarge+0x410>)
 8005d56:	f002 ffde 	bl	8008d16 <HAL_GPIO_WritePin>
			}
		}
	}

	// Over Current Protection
	if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {  //Indikasi terjadi Over Current
 8005d5a:	4b70      	ldr	r3, [pc, #448]	; (8005f1c <Batt_Protection_when_chargedischarge+0x414>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a70      	ldr	r2, [pc, #448]	; (8005f20 <Batt_Protection_when_chargedischarge+0x418>)
 8005d60:	6812      	ldr	r2, [r2, #0]
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fa ff6f 	bl	8000c48 <__aeabi_fsub>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f04f 0100 	mov.w	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fb fa2f 	bl	80011d4 <__aeabi_fcmpgt>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80e7 	beq.w	8005f4c <Batt_Protection_when_chargedischarge+0x444>
 8005d7e:	4b69      	ldr	r3, [pc, #420]	; (8005f24 <Batt_Protection_when_chargedischarge+0x41c>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f040 80e2 	bne.w	8005f4c <Batt_Protection_when_chargedischarge+0x444>
		fault_code=2;
 8005d88:	4b67      	ldr	r3, [pc, #412]	; (8005f28 <Batt_Protection_when_chargedischarge+0x420>)
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 8005d8e:	4b67      	ldr	r3, [pc, #412]	; (8005f2c <Batt_Protection_when_chargedischarge+0x424>)
 8005d90:	681c      	ldr	r4, [r3, #0]
 8005d92:	4b62      	ldr	r3, [pc, #392]	; (8005f1c <Batt_Protection_when_chargedischarge+0x414>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a62      	ldr	r2, [pc, #392]	; (8005f20 <Batt_Protection_when_chargedischarge+0x418>)
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fb f911 	bl	8000fc4 <__aeabi_fdiv>
 8005da2:	4603      	mov	r3, r0
 8005da4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa ff4d 	bl	8000c48 <__aeabi_fsub>
 8005dae:	4603      	mov	r3, r0
 8005db0:	4619      	mov	r1, r3
 8005db2:	4620      	mov	r0, r4
 8005db4:	f7fb f906 	bl	8000fc4 <__aeabi_fdiv>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	4b5c      	ldr	r3, [pc, #368]	; (8005f30 <Batt_Protection_when_chargedischarge+0x428>)
 8005dbe:	601a      	str	r2, [r3, #0]
		T_I_Over_trip_cycle+=0.001;
 8005dc0:	4b5c      	ldr	r3, [pc, #368]	; (8005f34 <Batt_Protection_when_chargedischarge+0x42c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fa fb9b 	bl	8000500 <__aeabi_f2d>
 8005dca:	a34f      	add	r3, pc, #316	; (adr r3, 8005f08 <Batt_Protection_when_chargedischarge+0x400>)
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f7fa fa38 	bl	8000244 <__adddf3>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4610      	mov	r0, r2
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f7fa fee0 	bl	8000ba0 <__aeabi_d2f>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4a54      	ldr	r2, [pc, #336]	; (8005f34 <Batt_Protection_when_chargedischarge+0x42c>)
 8005de4:	6013      	str	r3, [r2, #0]

		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 8005de6:	4b53      	ldr	r3, [pc, #332]	; (8005f34 <Batt_Protection_when_chargedischarge+0x42c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a51      	ldr	r2, [pc, #324]	; (8005f30 <Batt_Protection_when_chargedischarge+0x428>)
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	4611      	mov	r1, r2
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7fb f9ef 	bl	80011d4 <__aeabi_fcmpgt>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d012      	beq.n	8005e22 <Batt_Protection_when_chargedischarge+0x31a>
 8005dfc:	4b49      	ldr	r3, [pc, #292]	; (8005f24 <Batt_Protection_when_chargedischarge+0x41c>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10e      	bne.n	8005e22 <Batt_Protection_when_chargedischarge+0x31a>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8005e04:	4b4a      	ldr	r3, [pc, #296]	; (8005f30 <Batt_Protection_when_chargedischarge+0x428>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a4a      	ldr	r2, [pc, #296]	; (8005f34 <Batt_Protection_when_chargedischarge+0x42c>)
 8005e0a:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 8005e0c:	4b45      	ldr	r3, [pc, #276]	; (8005f24 <Batt_Protection_when_chargedischarge+0x41c>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8005e12:	f7fb fbb7 	bl	8001584 <Batt_Open_Mode>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005e16:	2200      	movs	r2, #0
 8005e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e1c:	483e      	ldr	r0, [pc, #248]	; (8005f18 <Batt_Protection_when_chargedischarge+0x410>)
 8005e1e:	f002 ff7a 	bl	8008d16 <HAL_GPIO_WritePin>
		}
		if(flag_trip_overcurrentdischarge==OFF) {
 8005e22:	4b40      	ldr	r3, [pc, #256]	; (8005f24 <Batt_Protection_when_chargedischarge+0x41c>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 848b 	bne.w	8006742 <Batt_Protection_when_chargedischarge+0xc3a>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005e2c:	4b40      	ldr	r3, [pc, #256]	; (8005f30 <Batt_Protection_when_chargedischarge+0x428>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a40      	ldr	r2, [pc, #256]	; (8005f34 <Batt_Protection_when_chargedischarge+0x42c>)
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fa ff06 	bl	8000c48 <__aeabi_fsub>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	493e      	ldr	r1, [pc, #248]	; (8005f38 <Batt_Protection_when_chargedischarge+0x430>)
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fb f9c7 	bl	80011d4 <__aeabi_fcmpgt>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d019      	beq.n	8005e80 <Batt_Protection_when_chargedischarge+0x378>
				if((test_tim2%1000)==0) {
 8005e4c:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <Batt_Protection_when_chargedischarge+0x434>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b3b      	ldr	r3, [pc, #236]	; (8005f40 <Batt_Protection_when_chargedischarge+0x438>)
 8005e52:	fb83 1302 	smull	r1, r3, r3, r2
 8005e56:	1199      	asrs	r1, r3, #6
 8005e58:	17d3      	asrs	r3, r2, #31
 8005e5a:	1acb      	subs	r3, r1, r3
 8005e5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 846b 	bne.w	8006742 <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 8005e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e70:	4829      	ldr	r0, [pc, #164]	; (8005f18 <Batt_Protection_when_chargedischarge+0x410>)
 8005e72:	f002 ff68 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005e76:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <Batt_Protection_when_chargedischarge+0x434>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8005e7c:	f000 bc61 	b.w	8006742 <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8005e80:	4b2b      	ldr	r3, [pc, #172]	; (8005f30 <Batt_Protection_when_chargedischarge+0x428>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2b      	ldr	r2, [pc, #172]	; (8005f34 <Batt_Protection_when_chargedischarge+0x42c>)
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fa fedc 	bl	8000c48 <__aeabi_fsub>
 8005e90:	4603      	mov	r3, r0
 8005e92:	492c      	ldr	r1, [pc, #176]	; (8005f44 <Batt_Protection_when_chargedischarge+0x43c>)
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fb f99d 	bl	80011d4 <__aeabi_fcmpgt>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d018      	beq.n	8005ed2 <Batt_Protection_when_chargedischarge+0x3ca>
				if((test_tim2%100)==0) {
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <Batt_Protection_when_chargedischarge+0x434>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <Batt_Protection_when_chargedischarge+0x440>)
 8005ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8005eaa:	1159      	asrs	r1, r3, #5
 8005eac:	17d3      	asrs	r3, r2, #31
 8005eae:	1acb      	subs	r3, r1, r3
 8005eb0:	2164      	movs	r1, #100	; 0x64
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 8442 	bne.w	8006742 <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 8005ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ec2:	4815      	ldr	r0, [pc, #84]	; (8005f18 <Batt_Protection_when_chargedischarge+0x410>)
 8005ec4:	f002 ff3f 	bl	8008d46 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005ec8:	4b1c      	ldr	r3, [pc, #112]	; (8005f3c <Batt_Protection_when_chargedischarge+0x434>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8005ece:	f000 bc38 	b.w	8006742 <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <Batt_Protection_when_chargedischarge+0x428>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a17      	ldr	r2, [pc, #92]	; (8005f34 <Batt_Protection_when_chargedischarge+0x42c>)
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fa feb3 	bl	8000c48 <__aeabi_fsub>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fb f973 	bl	80011d4 <__aeabi_fcmpgt>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <Batt_Protection_when_chargedischarge+0x3f0>
		if(flag_trip_overcurrentdischarge==OFF) {
 8005ef4:	f000 bc25 	b.w	8006742 <Batt_Protection_when_chargedischarge+0xc3a>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005efe:	4806      	ldr	r0, [pc, #24]	; (8005f18 <Batt_Protection_when_chargedischarge+0x410>)
 8005f00:	f002 ff09 	bl	8008d16 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8005f04:	f000 bc1d 	b.w	8006742 <Batt_Protection_when_chargedischarge+0xc3a>
 8005f08:	d2f1a9fc 	.word	0xd2f1a9fc
 8005f0c:	3f50624d 	.word	0x3f50624d
 8005f10:	20000810 	.word	0x20000810
 8005f14:	2000082c 	.word	0x2000082c
 8005f18:	40011000 	.word	0x40011000
 8005f1c:	200002f4 	.word	0x200002f4
 8005f20:	20000010 	.word	0x20000010
 8005f24:	2000030c 	.word	0x2000030c
 8005f28:	20000302 	.word	0x20000302
 8005f2c:	20000038 	.word	0x20000038
 8005f30:	2000026c 	.word	0x2000026c
 8005f34:	2000033c 	.word	0x2000033c
 8005f38:	41700000 	.word	0x41700000
 8005f3c:	20000364 	.word	0x20000364
 8005f40:	10624dd3 	.word	0x10624dd3
 8005f44:	41200000 	.word	0x41200000
 8005f48:	51eb851f 	.word	0x51eb851f
			}
		}
	}

	// Over Temperature protection
	else if(((50-Suhu_T1 < 10)||(85-Suhu_T2 < 10)||(50-Suhu_T3 < 10)||(85-Suhu_T4 < 10)) && flag_trip_overtemperature==OFF) {
 8005f4c:	4b8e      	ldr	r3, [pc, #568]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4619      	mov	r1, r3
 8005f52:	488e      	ldr	r0, [pc, #568]	; (800618c <Batt_Protection_when_chargedischarge+0x684>)
 8005f54:	f7fa fe78 	bl	8000c48 <__aeabi_fsub>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	498d      	ldr	r1, [pc, #564]	; (8006190 <Batt_Protection_when_chargedischarge+0x688>)
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fb f91b 	bl	8001198 <__aeabi_fcmplt>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d12a      	bne.n	8005fbe <Batt_Protection_when_chargedischarge+0x4b6>
 8005f68:	4b8a      	ldr	r3, [pc, #552]	; (8006194 <Batt_Protection_when_chargedischarge+0x68c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	488a      	ldr	r0, [pc, #552]	; (8006198 <Batt_Protection_when_chargedischarge+0x690>)
 8005f70:	f7fa fe6a 	bl	8000c48 <__aeabi_fsub>
 8005f74:	4603      	mov	r3, r0
 8005f76:	4986      	ldr	r1, [pc, #536]	; (8006190 <Batt_Protection_when_chargedischarge+0x688>)
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fb f90d 	bl	8001198 <__aeabi_fcmplt>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11c      	bne.n	8005fbe <Batt_Protection_when_chargedischarge+0x4b6>
 8005f84:	4b85      	ldr	r3, [pc, #532]	; (800619c <Batt_Protection_when_chargedischarge+0x694>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4880      	ldr	r0, [pc, #512]	; (800618c <Batt_Protection_when_chargedischarge+0x684>)
 8005f8c:	f7fa fe5c 	bl	8000c48 <__aeabi_fsub>
 8005f90:	4603      	mov	r3, r0
 8005f92:	497f      	ldr	r1, [pc, #508]	; (8006190 <Batt_Protection_when_chargedischarge+0x688>)
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fb f8ff 	bl	8001198 <__aeabi_fcmplt>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10e      	bne.n	8005fbe <Batt_Protection_when_chargedischarge+0x4b6>
 8005fa0:	4b7f      	ldr	r3, [pc, #508]	; (80061a0 <Batt_Protection_when_chargedischarge+0x698>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	487c      	ldr	r0, [pc, #496]	; (8006198 <Batt_Protection_when_chargedischarge+0x690>)
 8005fa8:	f7fa fe4e 	bl	8000c48 <__aeabi_fsub>
 8005fac:	4603      	mov	r3, r0
 8005fae:	4978      	ldr	r1, [pc, #480]	; (8006190 <Batt_Protection_when_chargedischarge+0x688>)
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fb f8f1 	bl	8001198 <__aeabi_fcmplt>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8101 	beq.w	80061c0 <Batt_Protection_when_chargedischarge+0x6b8>
 8005fbe:	4b79      	ldr	r3, [pc, #484]	; (80061a4 <Batt_Protection_when_chargedischarge+0x69c>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f040 80fc 	bne.w	80061c0 <Batt_Protection_when_chargedischarge+0x6b8>
		fault_code=3;
 8005fc8:	4b77      	ldr	r3, [pc, #476]	; (80061a8 <Batt_Protection_when_chargedischarge+0x6a0>)
 8005fca:	2203      	movs	r2, #3
 8005fcc:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8005fce:	4b77      	ldr	r3, [pc, #476]	; (80061ac <Batt_Protection_when_chargedischarge+0x6a4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	496f      	ldr	r1, [pc, #444]	; (8006190 <Batt_Protection_when_chargedischarge+0x688>)
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fa fe37 	bl	8000c48 <__aeabi_fsub>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4b6a      	ldr	r3, [pc, #424]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f7fb f8d7 	bl	8001198 <__aeabi_fcmplt>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d029      	beq.n	8006044 <Batt_Protection_when_chargedischarge+0x53c>
 8005ff0:	4b6e      	ldr	r3, [pc, #440]	; (80061ac <Batt_Protection_when_chargedischarge+0x6a4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	496e      	ldr	r1, [pc, #440]	; (80061b0 <Batt_Protection_when_chargedischarge+0x6a8>)
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fa fe26 	bl	8000c48 <__aeabi_fsub>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	461a      	mov	r2, r3
 8006000:	4b61      	ldr	r3, [pc, #388]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fb f8da 	bl	80011c0 <__aeabi_fcmpge>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <Batt_Protection_when_chargedischarge+0x53c>
			if((test_tim2%1000)==0) {
 8006012:	4b68      	ldr	r3, [pc, #416]	; (80061b4 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b68      	ldr	r3, [pc, #416]	; (80061b8 <Batt_Protection_when_chargedischarge+0x6b0>)
 8006018:	fb83 1302 	smull	r1, r3, r3, r2
 800601c:	1199      	asrs	r1, r3, #6
 800601e:	17d3      	asrs	r3, r2, #31
 8006020:	1acb      	subs	r3, r1, r3
 8006022:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006026:	fb01 f303 	mul.w	r3, r1, r3
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 80aa 	bne.w	8006186 <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 8006032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006036:	4861      	ldr	r0, [pc, #388]	; (80061bc <Batt_Protection_when_chargedischarge+0x6b4>)
 8006038:	f002 fe85 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800603c:	4b5d      	ldr	r3, [pc, #372]	; (80061b4 <Batt_Protection_when_chargedischarge+0x6ac>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8006042:	e0a0      	b.n	8006186 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2){
 8006044:	4b59      	ldr	r3, [pc, #356]	; (80061ac <Batt_Protection_when_chargedischarge+0x6a4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4959      	ldr	r1, [pc, #356]	; (80061b0 <Batt_Protection_when_chargedischarge+0x6a8>)
 800604a:	4618      	mov	r0, r3
 800604c:	f7fa fdfc 	bl	8000c48 <__aeabi_fsub>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	4b4c      	ldr	r3, [pc, #304]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f7fb f89c 	bl	8001198 <__aeabi_fcmplt>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d029      	beq.n	80060ba <Batt_Protection_when_chargedischarge+0x5b2>
 8006066:	4b51      	ldr	r3, [pc, #324]	; (80061ac <Batt_Protection_when_chargedischarge+0x6a4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800606e:	4618      	mov	r0, r3
 8006070:	f7fa fdea 	bl	8000c48 <__aeabi_fsub>
 8006074:	4603      	mov	r3, r0
 8006076:	461a      	mov	r2, r3
 8006078:	4b43      	ldr	r3, [pc, #268]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f7fb f89e 	bl	80011c0 <__aeabi_fcmpge>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <Batt_Protection_when_chargedischarge+0x5b2>
			if((test_tim2%500)==0) {
 800608a:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <Batt_Protection_when_chargedischarge+0x6ac>)
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	4b4a      	ldr	r3, [pc, #296]	; (80061b8 <Batt_Protection_when_chargedischarge+0x6b0>)
 8006090:	fb83 1302 	smull	r1, r3, r3, r2
 8006094:	1159      	asrs	r1, r3, #5
 8006096:	17d3      	asrs	r3, r2, #31
 8006098:	1acb      	subs	r3, r1, r3
 800609a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d16e      	bne.n	8006186 <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 80060a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ac:	4843      	ldr	r0, [pc, #268]	; (80061bc <Batt_Protection_when_chargedischarge+0x6b4>)
 80060ae:	f002 fe4a 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80060b2:	4b40      	ldr	r3, [pc, #256]	; (80061b4 <Batt_Protection_when_chargedischarge+0x6ac>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 80060b8:	e065      	b.n	8006186 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set) {
 80060ba:	4b3c      	ldr	r3, [pc, #240]	; (80061ac <Batt_Protection_when_chargedischarge+0x6a4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa fdc0 	bl	8000c48 <__aeabi_fsub>
 80060c8:	4603      	mov	r3, r0
 80060ca:	461a      	mov	r2, r3
 80060cc:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fb f860 	bl	8001198 <__aeabi_fcmplt>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d022      	beq.n	8006124 <Batt_Protection_when_chargedischarge+0x61c>
 80060de:	4b2a      	ldr	r3, [pc, #168]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a32      	ldr	r2, [pc, #200]	; (80061ac <Batt_Protection_when_chargedischarge+0x6a4>)
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	4611      	mov	r1, r2
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fb f85f 	bl	80011ac <__aeabi_fcmple>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d017      	beq.n	8006124 <Batt_Protection_when_chargedischarge+0x61c>
			if((test_tim2%500)==0)
 80060f4:	4b2f      	ldr	r3, [pc, #188]	; (80061b4 <Batt_Protection_when_chargedischarge+0x6ac>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <Batt_Protection_when_chargedischarge+0x6b0>)
 80060fa:	fb83 1302 	smull	r1, r3, r3, r2
 80060fe:	1159      	asrs	r1, r3, #5
 8006100:	17d3      	asrs	r3, r2, #31
 8006102:	1acb      	subs	r3, r1, r3
 8006104:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d139      	bne.n	8006186 <Batt_Protection_when_chargedischarge+0x67e>
			{
				BUZZ_Toggle;
 8006112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006116:	4829      	ldr	r0, [pc, #164]	; (80061bc <Batt_Protection_when_chargedischarge+0x6b4>)
 8006118:	f002 fe15 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <Batt_Protection_when_chargedischarge+0x6ac>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0)
 8006122:	e030      	b.n	8006186 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85) {
 8006124:	4b18      	ldr	r3, [pc, #96]	; (8006188 <Batt_Protection_when_chargedischarge+0x680>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4918      	ldr	r1, [pc, #96]	; (800618c <Batt_Protection_when_chargedischarge+0x684>)
 800612a:	4618      	mov	r0, r3
 800612c:	f7fb f852 	bl	80011d4 <__aeabi_fcmpgt>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d11b      	bne.n	800616e <Batt_Protection_when_chargedischarge+0x666>
 8006136:	4b17      	ldr	r3, [pc, #92]	; (8006194 <Batt_Protection_when_chargedischarge+0x68c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4917      	ldr	r1, [pc, #92]	; (8006198 <Batt_Protection_when_chargedischarge+0x690>)
 800613c:	4618      	mov	r0, r3
 800613e:	f7fb f849 	bl	80011d4 <__aeabi_fcmpgt>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d112      	bne.n	800616e <Batt_Protection_when_chargedischarge+0x666>
 8006148:	4b14      	ldr	r3, [pc, #80]	; (800619c <Batt_Protection_when_chargedischarge+0x694>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	490f      	ldr	r1, [pc, #60]	; (800618c <Batt_Protection_when_chargedischarge+0x684>)
 800614e:	4618      	mov	r0, r3
 8006150:	f7fb f840 	bl	80011d4 <__aeabi_fcmpgt>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <Batt_Protection_when_chargedischarge+0x666>
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <Batt_Protection_when_chargedischarge+0x698>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	490e      	ldr	r1, [pc, #56]	; (8006198 <Batt_Protection_when_chargedischarge+0x690>)
 8006160:	4618      	mov	r0, r3
 8006162:	f7fb f837 	bl	80011d4 <__aeabi_fcmpgt>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d100      	bne.n	800616e <Batt_Protection_when_chargedischarge+0x666>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 800616c:	e2ea      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 800616e:	f7fb fa09 	bl	8001584 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8006172:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <Batt_Protection_when_chargedischarge+0x69c>)
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006178:	2200      	movs	r2, #0
 800617a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800617e:	480f      	ldr	r0, [pc, #60]	; (80061bc <Batt_Protection_when_chargedischarge+0x6b4>)
 8006180:	f002 fdc9 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8006184:	e2de      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
 8006186:	e2dd      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
 8006188:	20000304 	.word	0x20000304
 800618c:	42480000 	.word	0x42480000
 8006190:	41200000 	.word	0x41200000
 8006194:	20000378 	.word	0x20000378
 8006198:	42aa0000 	.word	0x42aa0000
 800619c:	20000284 	.word	0x20000284
 80061a0:	20000334 	.word	0x20000334
 80061a4:	2000027c 	.word	0x2000027c
 80061a8:	20000302 	.word	0x20000302
 80061ac:	20000018 	.word	0x20000018
 80061b0:	40a00000 	.word	0x40a00000
 80061b4:	20000364 	.word	0x20000364
 80061b8:	10624dd3 	.word	0x10624dd3
 80061bc:	40011000 	.word	0x40011000
		}
	}

	// Under Temperature protection
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 80061c0:	4b96      	ldr	r3, [pc, #600]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a96      	ldr	r2, [pc, #600]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fa fd3c 	bl	8000c48 <__aeabi_fsub>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4994      	ldr	r1, [pc, #592]	; (8006424 <Batt_Protection_when_chargedischarge+0x91c>)
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fa ffe9 	bl	80011ac <__aeabi_fcmple>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d130      	bne.n	8006242 <Batt_Protection_when_chargedischarge+0x73a>
 80061e0:	4b91      	ldr	r3, [pc, #580]	; (8006428 <Batt_Protection_when_chargedischarge+0x920>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a8e      	ldr	r2, [pc, #568]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80061e6:	6812      	ldr	r2, [r2, #0]
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fa fd2c 	bl	8000c48 <__aeabi_fsub>
 80061f0:	4603      	mov	r3, r0
 80061f2:	498c      	ldr	r1, [pc, #560]	; (8006424 <Batt_Protection_when_chargedischarge+0x91c>)
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fa ffd9 	bl	80011ac <__aeabi_fcmple>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d120      	bne.n	8006242 <Batt_Protection_when_chargedischarge+0x73a>
 8006200:	4b8a      	ldr	r3, [pc, #552]	; (800642c <Batt_Protection_when_chargedischarge+0x924>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a86      	ldr	r2, [pc, #536]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f7fa fd1c 	bl	8000c48 <__aeabi_fsub>
 8006210:	4603      	mov	r3, r0
 8006212:	4984      	ldr	r1, [pc, #528]	; (8006424 <Batt_Protection_when_chargedischarge+0x91c>)
 8006214:	4618      	mov	r0, r3
 8006216:	f7fa ffc9 	bl	80011ac <__aeabi_fcmple>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d110      	bne.n	8006242 <Batt_Protection_when_chargedischarge+0x73a>
 8006220:	4b83      	ldr	r3, [pc, #524]	; (8006430 <Batt_Protection_when_chargedischarge+0x928>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a7e      	ldr	r2, [pc, #504]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	4611      	mov	r1, r2
 800622a:	4618      	mov	r0, r3
 800622c:	f7fa fd0c 	bl	8000c48 <__aeabi_fsub>
 8006230:	4603      	mov	r3, r0
 8006232:	497c      	ldr	r1, [pc, #496]	; (8006424 <Batt_Protection_when_chargedischarge+0x91c>)
 8006234:	4618      	mov	r0, r3
 8006236:	f7fa ffb9 	bl	80011ac <__aeabi_fcmple>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 8105 	beq.w	800644c <Batt_Protection_when_chargedischarge+0x944>
 8006242:	4b7c      	ldr	r3, [pc, #496]	; (8006434 <Batt_Protection_when_chargedischarge+0x92c>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 8100 	bne.w	800644c <Batt_Protection_when_chargedischarge+0x944>
		fault_code=4;
 800624c:	4b7a      	ldr	r3, [pc, #488]	; (8006438 <Batt_Protection_when_chargedischarge+0x930>)
 800624e:	2204      	movs	r2, #4
 8006250:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006252:	4b73      	ldr	r3, [pc, #460]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4973      	ldr	r1, [pc, #460]	; (8006424 <Batt_Protection_when_chargedischarge+0x91c>)
 8006258:	4618      	mov	r0, r3
 800625a:	f7fa fcf7 	bl	8000c4c <__addsf3>
 800625e:	4603      	mov	r3, r0
 8006260:	461a      	mov	r2, r3
 8006262:	4b6e      	ldr	r3, [pc, #440]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f7fa ffa9 	bl	80011c0 <__aeabi_fcmpge>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d029      	beq.n	80062c8 <Batt_Protection_when_chargedischarge+0x7c0>
 8006274:	4b6a      	ldr	r3, [pc, #424]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4970      	ldr	r1, [pc, #448]	; (800643c <Batt_Protection_when_chargedischarge+0x934>)
 800627a:	4618      	mov	r0, r3
 800627c:	f7fa fce6 	bl	8000c4c <__addsf3>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	4b65      	ldr	r3, [pc, #404]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f7fa ff84 	bl	8001198 <__aeabi_fcmplt>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d018      	beq.n	80062c8 <Batt_Protection_when_chargedischarge+0x7c0>
			if((test_tim2%1000)==0) {
 8006296:	4b6a      	ldr	r3, [pc, #424]	; (8006440 <Batt_Protection_when_chargedischarge+0x938>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b6a      	ldr	r3, [pc, #424]	; (8006444 <Batt_Protection_when_chargedischarge+0x93c>)
 800629c:	fb83 1302 	smull	r1, r3, r3, r2
 80062a0:	1199      	asrs	r1, r3, #6
 80062a2:	17d3      	asrs	r3, r2, #31
 80062a4:	1acb      	subs	r3, r1, r3
 80062a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 80b2 	bne.w	800641a <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 80062b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062ba:	4863      	ldr	r0, [pc, #396]	; (8006448 <Batt_Protection_when_chargedischarge+0x940>)
 80062bc:	f002 fd43 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80062c0:	4b5f      	ldr	r3, [pc, #380]	; (8006440 <Batt_Protection_when_chargedischarge+0x938>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 80062c6:	e0a8      	b.n	800641a <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 80062c8:	4b55      	ldr	r3, [pc, #340]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	495b      	ldr	r1, [pc, #364]	; (800643c <Batt_Protection_when_chargedischarge+0x934>)
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fa fcbc 	bl	8000c4c <__addsf3>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461a      	mov	r2, r3
 80062d8:	4b50      	ldr	r3, [pc, #320]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7fa ff6e 	bl	80011c0 <__aeabi_fcmpge>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d029      	beq.n	800633e <Batt_Protection_when_chargedischarge+0x836>
 80062ea:	4b4d      	ldr	r3, [pc, #308]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fa fcaa 	bl	8000c4c <__addsf3>
 80062f8:	4603      	mov	r3, r0
 80062fa:	461a      	mov	r2, r3
 80062fc:	4b47      	ldr	r3, [pc, #284]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f7fa ff48 	bl	8001198 <__aeabi_fcmplt>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <Batt_Protection_when_chargedischarge+0x836>
			if((test_tim2%500)==0) {
 800630e:	4b4c      	ldr	r3, [pc, #304]	; (8006440 <Batt_Protection_when_chargedischarge+0x938>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b4c      	ldr	r3, [pc, #304]	; (8006444 <Batt_Protection_when_chargedischarge+0x93c>)
 8006314:	fb83 1302 	smull	r1, r3, r3, r2
 8006318:	1159      	asrs	r1, r3, #5
 800631a:	17d3      	asrs	r3, r2, #31
 800631c:	1acb      	subs	r3, r1, r3
 800631e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d176      	bne.n	800641a <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 800632c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006330:	4845      	ldr	r0, [pc, #276]	; (8006448 <Batt_Protection_when_chargedischarge+0x940>)
 8006332:	f002 fd08 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006336:	4b42      	ldr	r3, [pc, #264]	; (8006440 <Batt_Protection_when_chargedischarge+0x938>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 800633c:	e06d      	b.n	800641a <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 800633e:	4b38      	ldr	r3, [pc, #224]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006346:	4618      	mov	r0, r3
 8006348:	f7fa fc80 	bl	8000c4c <__addsf3>
 800634c:	4603      	mov	r3, r0
 800634e:	461a      	mov	r2, r3
 8006350:	4b32      	ldr	r3, [pc, #200]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4619      	mov	r1, r3
 8006356:	4610      	mov	r0, r2
 8006358:	f7fa ff3c 	bl	80011d4 <__aeabi_fcmpgt>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d022      	beq.n	80063a8 <Batt_Protection_when_chargedischarge+0x8a0>
 8006362:	4b2e      	ldr	r3, [pc, #184]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a2e      	ldr	r2, [pc, #184]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	4611      	mov	r1, r2
 800636c:	4618      	mov	r0, r3
 800636e:	f7fa ff27 	bl	80011c0 <__aeabi_fcmpge>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d017      	beq.n	80063a8 <Batt_Protection_when_chargedischarge+0x8a0>
			if((test_tim2%500)==0) {
 8006378:	4b31      	ldr	r3, [pc, #196]	; (8006440 <Batt_Protection_when_chargedischarge+0x938>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b31      	ldr	r3, [pc, #196]	; (8006444 <Batt_Protection_when_chargedischarge+0x93c>)
 800637e:	fb83 1302 	smull	r1, r3, r3, r2
 8006382:	1159      	asrs	r1, r3, #5
 8006384:	17d3      	asrs	r3, r2, #31
 8006386:	1acb      	subs	r3, r1, r3
 8006388:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d141      	bne.n	800641a <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 8006396:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800639a:	482b      	ldr	r0, [pc, #172]	; (8006448 <Batt_Protection_when_chargedischarge+0x940>)
 800639c:	f002 fcd3 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80063a0:	4b27      	ldr	r3, [pc, #156]	; (8006440 <Batt_Protection_when_chargedischarge+0x938>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 80063a6:	e038      	b.n	800641a <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 80063a8:	4b1c      	ldr	r3, [pc, #112]	; (800641c <Batt_Protection_when_chargedischarge+0x914>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1c      	ldr	r2, [pc, #112]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80063ae:	6812      	ldr	r2, [r2, #0]
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa fef0 	bl	8001198 <__aeabi_fcmplt>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d121      	bne.n	8006402 <Batt_Protection_when_chargedischarge+0x8fa>
 80063be:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <Batt_Protection_when_chargedischarge+0x920>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a17      	ldr	r2, [pc, #92]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80063c4:	6812      	ldr	r2, [r2, #0]
 80063c6:	4611      	mov	r1, r2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fa fee5 	bl	8001198 <__aeabi_fcmplt>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d116      	bne.n	8006402 <Batt_Protection_when_chargedischarge+0x8fa>
 80063d4:	4b15      	ldr	r3, [pc, #84]	; (800642c <Batt_Protection_when_chargedischarge+0x924>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a11      	ldr	r2, [pc, #68]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	4611      	mov	r1, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fa feda 	bl	8001198 <__aeabi_fcmplt>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10b      	bne.n	8006402 <Batt_Protection_when_chargedischarge+0x8fa>
 80063ea:	4b11      	ldr	r3, [pc, #68]	; (8006430 <Batt_Protection_when_chargedischarge+0x928>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a0c      	ldr	r2, [pc, #48]	; (8006420 <Batt_Protection_when_chargedischarge+0x918>)
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	4611      	mov	r1, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fa fecf 	bl	8001198 <__aeabi_fcmplt>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d100      	bne.n	8006402 <Batt_Protection_when_chargedischarge+0x8fa>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006400:	e1a0      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 8006402:	f7fb f8bf 	bl	8001584 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8006406:	4b0b      	ldr	r3, [pc, #44]	; (8006434 <Batt_Protection_when_chargedischarge+0x92c>)
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800640c:	2200      	movs	r2, #0
 800640e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006412:	480d      	ldr	r0, [pc, #52]	; (8006448 <Batt_Protection_when_chargedischarge+0x940>)
 8006414:	f002 fc7f 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006418:	e194      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
 800641a:	e193      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
 800641c:	20000304 	.word	0x20000304
 8006420:	2000001c 	.word	0x2000001c
 8006424:	41200000 	.word	0x41200000
 8006428:	20000378 	.word	0x20000378
 800642c:	20000284 	.word	0x20000284
 8006430:	20000334 	.word	0x20000334
 8006434:	200002fc 	.word	0x200002fc
 8006438:	20000302 	.word	0x20000302
 800643c:	40a00000 	.word	0x40a00000
 8006440:	20000364 	.word	0x20000364
 8006444:	10624dd3 	.word	0x10624dd3
 8006448:	40011000 	.word	0x40011000
		}
	}

	// SOC OverDischarge protection
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 800644c:	4b83      	ldr	r3, [pc, #524]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a83      	ldr	r2, [pc, #524]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f7fa fbf6 	bl	8000c48 <__aeabi_fsub>
 800645c:	4603      	mov	r3, r0
 800645e:	4981      	ldr	r1, [pc, #516]	; (8006664 <Batt_Protection_when_chargedischarge+0xb5c>)
 8006460:	4618      	mov	r0, r3
 8006462:	f7fa fea3 	bl	80011ac <__aeabi_fcmple>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 80d1 	beq.w	8006610 <Batt_Protection_when_chargedischarge+0xb08>
 800646e:	4b7e      	ldr	r3, [pc, #504]	; (8006668 <Batt_Protection_when_chargedischarge+0xb60>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f040 80cc 	bne.w	8006610 <Batt_Protection_when_chargedischarge+0xb08>
 8006478:	4b7c      	ldr	r3, [pc, #496]	; (800666c <Batt_Protection_when_chargedischarge+0xb64>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b02      	cmp	r3, #2
 800647e:	f040 80c7 	bne.w	8006610 <Batt_Protection_when_chargedischarge+0xb08>
		fault_code=5;
 8006482:	4b7b      	ldr	r3, [pc, #492]	; (8006670 <Batt_Protection_when_chargedischarge+0xb68>)
 8006484:	2205      	movs	r2, #5
 8006486:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 8006488:	4b75      	ldr	r3, [pc, #468]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4975      	ldr	r1, [pc, #468]	; (8006664 <Batt_Protection_when_chargedischarge+0xb5c>)
 800648e:	4618      	mov	r0, r3
 8006490:	f7fa fbdc 	bl	8000c4c <__addsf3>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	4b70      	ldr	r3, [pc, #448]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fa fe8e 	bl	80011c0 <__aeabi_fcmpge>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d029      	beq.n	80064fe <Batt_Protection_when_chargedischarge+0x9f6>
 80064aa:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4971      	ldr	r1, [pc, #452]	; (8006674 <Batt_Protection_when_chargedischarge+0xb6c>)
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fa fbcb 	bl	8000c4c <__addsf3>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	4b68      	ldr	r3, [pc, #416]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f7fa fe69 	bl	8001198 <__aeabi_fcmplt>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d018      	beq.n	80064fe <Batt_Protection_when_chargedischarge+0x9f6>
			if((test_tim2%1000)==0) {
 80064cc:	4b6a      	ldr	r3, [pc, #424]	; (8006678 <Batt_Protection_when_chargedischarge+0xb70>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4b6a      	ldr	r3, [pc, #424]	; (800667c <Batt_Protection_when_chargedischarge+0xb74>)
 80064d2:	fb83 1302 	smull	r1, r3, r3, r2
 80064d6:	1199      	asrs	r1, r3, #6
 80064d8:	17d3      	asrs	r3, r2, #31
 80064da:	1acb      	subs	r3, r1, r3
 80064dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 8091 	bne.w	800660e <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 80064ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064f0:	4863      	ldr	r0, [pc, #396]	; (8006680 <Batt_Protection_when_chargedischarge+0xb78>)
 80064f2:	f002 fc28 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80064f6:	4b60      	ldr	r3, [pc, #384]	; (8006678 <Batt_Protection_when_chargedischarge+0xb70>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 80064fc:	e087      	b.n	800660e <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2) {
 80064fe:	4b58      	ldr	r3, [pc, #352]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	495c      	ldr	r1, [pc, #368]	; (8006674 <Batt_Protection_when_chargedischarge+0xb6c>)
 8006504:	4618      	mov	r0, r3
 8006506:	f7fa fba1 	bl	8000c4c <__addsf3>
 800650a:	4603      	mov	r3, r0
 800650c:	461a      	mov	r2, r3
 800650e:	4b53      	ldr	r3, [pc, #332]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fa fe53 	bl	80011c0 <__aeabi_fcmpge>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d029      	beq.n	8006574 <Batt_Protection_when_chargedischarge+0xa6c>
 8006520:	4b4f      	ldr	r3, [pc, #316]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006528:	4618      	mov	r0, r3
 800652a:	f7fa fb8f 	bl	8000c4c <__addsf3>
 800652e:	4603      	mov	r3, r0
 8006530:	461a      	mov	r2, r3
 8006532:	4b4a      	ldr	r3, [pc, #296]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fa fe2d 	bl	8001198 <__aeabi_fcmplt>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d017      	beq.n	8006574 <Batt_Protection_when_chargedischarge+0xa6c>
			if((test_tim2%500)==0) {
 8006544:	4b4c      	ldr	r3, [pc, #304]	; (8006678 <Batt_Protection_when_chargedischarge+0xb70>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	4b4c      	ldr	r3, [pc, #304]	; (800667c <Batt_Protection_when_chargedischarge+0xb74>)
 800654a:	fb83 1302 	smull	r1, r3, r3, r2
 800654e:	1159      	asrs	r1, r3, #5
 8006550:	17d3      	asrs	r3, r2, #31
 8006552:	1acb      	subs	r3, r1, r3
 8006554:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d155      	bne.n	800660e <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 8006562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006566:	4846      	ldr	r0, [pc, #280]	; (8006680 <Batt_Protection_when_chargedischarge+0xb78>)
 8006568:	f002 fbed 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800656c:	4b42      	ldr	r3, [pc, #264]	; (8006678 <Batt_Protection_when_chargedischarge+0xb70>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006572:	e04c      	b.n	800660e <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set) {
 8006574:	4b3a      	ldr	r3, [pc, #232]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800657c:	4618      	mov	r0, r3
 800657e:	f7fa fb65 	bl	8000c4c <__addsf3>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	4b35      	ldr	r3, [pc, #212]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f7fa fe21 	bl	80011d4 <__aeabi_fcmpgt>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d022      	beq.n	80065de <Batt_Protection_when_chargedischarge+0xad6>
 8006598:	4b30      	ldr	r3, [pc, #192]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a30      	ldr	r2, [pc, #192]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 800659e:	6812      	ldr	r2, [r2, #0]
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fa fe0c 	bl	80011c0 <__aeabi_fcmpge>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d017      	beq.n	80065de <Batt_Protection_when_chargedischarge+0xad6>
			if((test_tim2%500)==0){
 80065ae:	4b32      	ldr	r3, [pc, #200]	; (8006678 <Batt_Protection_when_chargedischarge+0xb70>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b32      	ldr	r3, [pc, #200]	; (800667c <Batt_Protection_when_chargedischarge+0xb74>)
 80065b4:	fb83 1302 	smull	r1, r3, r3, r2
 80065b8:	1159      	asrs	r1, r3, #5
 80065ba:	17d3      	asrs	r3, r2, #31
 80065bc:	1acb      	subs	r3, r1, r3
 80065be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d120      	bne.n	800660e <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 80065cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065d0:	482b      	ldr	r0, [pc, #172]	; (8006680 <Batt_Protection_when_chargedischarge+0xb78>)
 80065d2:	f002 fbb8 	bl	8008d46 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80065d6:	4b28      	ldr	r3, [pc, #160]	; (8006678 <Batt_Protection_when_chargedischarge+0xb70>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80065dc:	e017      	b.n	800660e <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set) {
 80065de:	4b1f      	ldr	r3, [pc, #124]	; (800665c <Batt_Protection_when_chargedischarge+0xb54>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <Batt_Protection_when_chargedischarge+0xb58>)
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fa fdd5 	bl	8001198 <__aeabi_fcmplt>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d100      	bne.n	80065f6 <Batt_Protection_when_chargedischarge+0xaee>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 80065f4:	e0a6      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 80065f6:	f7fa ffc5 	bl	8001584 <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 80065fa:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <Batt_Protection_when_chargedischarge+0xb60>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006600:	2200      	movs	r2, #0
 8006602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006606:	481e      	ldr	r0, [pc, #120]	; (8006680 <Batt_Protection_when_chargedischarge+0xb78>)
 8006608:	f002 fb85 	bl	8008d16 <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 800660c:	e09a      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
 800660e:	e099      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
		}
	}

	// Imbalance Protection
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 8006610:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <Batt_Protection_when_chargedischarge+0xb7c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <Batt_Protection_when_chargedischarge+0xb80>)
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f7fa fb14 	bl	8000c48 <__aeabi_fsub>
 8006620:	4603      	mov	r3, r0
 8006622:	4910      	ldr	r1, [pc, #64]	; (8006664 <Batt_Protection_when_chargedischarge+0xb5c>)
 8006624:	4618      	mov	r0, r3
 8006626:	f7fa fdb7 	bl	8001198 <__aeabi_fcmplt>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02f      	beq.n	8006690 <Batt_Protection_when_chargedischarge+0xb88>
	{
		fault_code=6;
 8006630:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <Batt_Protection_when_chargedischarge+0xb68>)
 8006632:	2206      	movs	r2, #6
 8006634:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance>Persen_Imbalance_Set)
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <Batt_Protection_when_chargedischarge+0xb80>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a12      	ldr	r2, [pc, #72]	; (8006684 <Batt_Protection_when_chargedischarge+0xb7c>)
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7fa fdc7 	bl	80011d4 <__aeabi_fcmpgt>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d100      	bne.n	800664e <Batt_Protection_when_chargedischarge+0xb46>
		if(T_trip_cycle < 0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle < 0)
			T_I_Over_trip_cycle=0;
	}
}
 800664c:	e07a      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
			flag_trip_unbalance=ON;
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <Batt_Protection_when_chargedischarge+0xb84>)
 8006650:	2201      	movs	r2, #1
 8006652:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8006654:	f7fa ff96 	bl	8001584 <Batt_Open_Mode>
}
 8006658:	e074      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
 800665a:	bf00      	nop
 800665c:	20000370 	.word	0x20000370
 8006660:	20000020 	.word	0x20000020
 8006664:	41200000 	.word	0x41200000
 8006668:	20000328 	.word	0x20000328
 800666c:	2000067c 	.word	0x2000067c
 8006670:	20000302 	.word	0x20000302
 8006674:	40a00000 	.word	0x40a00000
 8006678:	20000364 	.word	0x20000364
 800667c:	10624dd3 	.word	0x10624dd3
 8006680:	40011000 	.word	0x40011000
 8006684:	20000030 	.word	0x20000030
 8006688:	20000330 	.word	0x20000330
 800668c:	2000025c 	.word	0x2000025c
		if(fault_code!=0)
 8006690:	4b2f      	ldr	r3, [pc, #188]	; (8006750 <Batt_Protection_when_chargedischarge+0xc48>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <Batt_Protection_when_chargedischarge+0xb98>
			last_fault_code=fault_code;
 8006698:	4b2d      	ldr	r3, [pc, #180]	; (8006750 <Batt_Protection_when_chargedischarge+0xc48>)
 800669a:	781a      	ldrb	r2, [r3, #0]
 800669c:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <Batt_Protection_when_chargedischarge+0xc4c>)
 800669e:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 80066a0:	4b2b      	ldr	r3, [pc, #172]	; (8006750 <Batt_Protection_when_chargedischarge+0xc48>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80066a6:	2200      	movs	r2, #0
 80066a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066ac:	482a      	ldr	r0, [pc, #168]	; (8006758 <Batt_Protection_when_chargedischarge+0xc50>)
 80066ae:	f002 fb32 	bl	8008d16 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <Batt_Protection_when_chargedischarge+0xc54>)
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 80066ba:	4b29      	ldr	r3, [pc, #164]	; (8006760 <Batt_Protection_when_chargedischarge+0xc58>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7f9 ff1e 	bl	8000500 <__aeabi_f2d>
 80066c4:	a320      	add	r3, pc, #128	; (adr r3, 8006748 <Batt_Protection_when_chargedischarge+0xc40>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f7f9 fdb9 	bl	8000240 <__aeabi_dsub>
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	f7fa fa63 	bl	8000ba0 <__aeabi_d2f>
 80066da:	4603      	mov	r3, r0
 80066dc:	4a20      	ldr	r2, [pc, #128]	; (8006760 <Batt_Protection_when_chargedischarge+0xc58>)
 80066de:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 80066e0:	4b20      	ldr	r3, [pc, #128]	; (8006764 <Batt_Protection_when_chargedischarge+0xc5c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7f9 ff0b 	bl	8000500 <__aeabi_f2d>
 80066ea:	a317      	add	r3, pc, #92	; (adr r3, 8006748 <Batt_Protection_when_chargedischarge+0xc40>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 fda6 	bl	8000240 <__aeabi_dsub>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	f7fa fa50 	bl	8000ba0 <__aeabi_d2f>
 8006700:	4603      	mov	r3, r0
 8006702:	4a18      	ldr	r2, [pc, #96]	; (8006764 <Batt_Protection_when_chargedischarge+0xc5c>)
 8006704:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle < 0)
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <Batt_Protection_when_chargedischarge+0xc58>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f04f 0100 	mov.w	r1, #0
 800670e:	4618      	mov	r0, r3
 8006710:	f7fa fd42 	bl	8001198 <__aeabi_fcmplt>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <Batt_Protection_when_chargedischarge+0xc1a>
			T_trip_cycle=0;
 800671a:	4b11      	ldr	r3, [pc, #68]	; (8006760 <Batt_Protection_when_chargedischarge+0xc58>)
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle < 0)
 8006722:	4b10      	ldr	r3, [pc, #64]	; (8006764 <Batt_Protection_when_chargedischarge+0xc5c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f04f 0100 	mov.w	r1, #0
 800672a:	4618      	mov	r0, r3
 800672c:	f7fa fd34 	bl	8001198 <__aeabi_fcmplt>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d100      	bne.n	8006738 <Batt_Protection_when_chargedischarge+0xc30>
}
 8006736:	e005      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
			T_I_Over_trip_cycle=0;
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <Batt_Protection_when_chargedischarge+0xc5c>)
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	e000      	b.n	8006744 <Batt_Protection_when_chargedischarge+0xc3c>
		if(flag_trip_overcurrentdischarge==OFF) {
 8006742:	bf00      	nop
}
 8006744:	bf00      	nop
 8006746:	bdb0      	pop	{r4, r5, r7, pc}
 8006748:	d2f1a9fc 	.word	0xd2f1a9fc
 800674c:	3f50624d 	.word	0x3f50624d
 8006750:	20000302 	.word	0x20000302
 8006754:	2000036d 	.word	0x2000036d
 8006758:	40011000 	.word	0x40011000
 800675c:	20000810 	.word	0x20000810
 8006760:	2000082c 	.word	0x2000082c
 8006764:	2000033c 	.word	0x2000033c

08006768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006768:	b480      	push	{r7}
 800676a:	af00      	add	r7, sp, #0
	return 1;
 800676c:	2301      	movs	r3, #1
}
 800676e:	4618      	mov	r0, r3
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <_kill>:

int _kill(int pid, int sig)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b082      	sub	sp, #8
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006780:	f004 fdae 	bl	800b2e0 <__errno>
 8006784:	4603      	mov	r3, r0
 8006786:	2216      	movs	r2, #22
 8006788:	601a      	str	r2, [r3, #0]
	return -1;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <_exit>:

void _exit (int status)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800679e:	f04f 31ff 	mov.w	r1, #4294967295
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ffe7 	bl	8006776 <_kill>
	while (1) {}		/* Make sure we hang here */
 80067a8:	e7fe      	b.n	80067a8 <_exit+0x12>

080067aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b086      	sub	sp, #24
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	617b      	str	r3, [r7, #20]
 80067ba:	e00a      	b.n	80067d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80067bc:	f3af 8000 	nop.w
 80067c0:	4601      	mov	r1, r0
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	60ba      	str	r2, [r7, #8]
 80067c8:	b2ca      	uxtb	r2, r1
 80067ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	dbf0      	blt.n	80067bc <_read+0x12>
	}

return len;
 80067da:	687b      	ldr	r3, [r7, #4]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067f0:	2300      	movs	r3, #0
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e009      	b.n	800680a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	60ba      	str	r2, [r7, #8]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3301      	adds	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	dbf1      	blt.n	80067f6 <_write+0x12>
	}
	return len;
 8006812:	687b      	ldr	r3, [r7, #4]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <_close>:

int _close(int file)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	return -1;
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006842:	605a      	str	r2, [r3, #4]
	return 0;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	bc80      	pop	{r7}
 800684e:	4770      	bx	lr

08006850 <_isatty>:

int _isatty(int file)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	return 1;
 8006858:	2301      	movs	r3, #1
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	bc80      	pop	{r7}
 8006862:	4770      	bx	lr

08006864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	return 0;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006884:	4a14      	ldr	r2, [pc, #80]	; (80068d8 <_sbrk+0x5c>)
 8006886:	4b15      	ldr	r3, [pc, #84]	; (80068dc <_sbrk+0x60>)
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <_sbrk+0x64>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006898:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <_sbrk+0x64>)
 800689a:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <_sbrk+0x68>)
 800689c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800689e:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <_sbrk+0x64>)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d207      	bcs.n	80068bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068ac:	f004 fd18 	bl	800b2e0 <__errno>
 80068b0:	4603      	mov	r3, r0
 80068b2:	220c      	movs	r2, #12
 80068b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068b6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ba:	e009      	b.n	80068d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068bc:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <_sbrk+0x64>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068c2:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <_sbrk+0x64>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	4a05      	ldr	r2, [pc, #20]	; (80068e0 <_sbrk+0x64>)
 80068cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20018000 	.word	0x20018000
 80068dc:	00000400 	.word	0x00000400
 80068e0:	20000240 	.word	0x20000240
 80068e4:	200008f8 	.word	0x200008f8

080068e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068ec:	bf00      	nop
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068fa:	f107 0308 	add.w	r3, r7, #8
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	605a      	str	r2, [r3, #4]
 8006904:	609a      	str	r2, [r3, #8]
 8006906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006908:	463b      	mov	r3, r7
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006910:	4b1e      	ldr	r3, [pc, #120]	; (800698c <MX_TIM2_Init+0x98>)
 8006912:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006916:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <MX_TIM2_Init+0x98>)
 800691a:	f240 227f 	movw	r2, #639	; 0x27f
 800691e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006920:	4b1a      	ldr	r3, [pc, #104]	; (800698c <MX_TIM2_Init+0x98>)
 8006922:	2200      	movs	r2, #0
 8006924:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006926:	4b19      	ldr	r3, [pc, #100]	; (800698c <MX_TIM2_Init+0x98>)
 8006928:	f240 32e7 	movw	r2, #999	; 0x3e7
 800692c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800692e:	4b17      	ldr	r3, [pc, #92]	; (800698c <MX_TIM2_Init+0x98>)
 8006930:	2200      	movs	r2, #0
 8006932:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006934:	4b15      	ldr	r3, [pc, #84]	; (800698c <MX_TIM2_Init+0x98>)
 8006936:	2200      	movs	r2, #0
 8006938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800693a:	4814      	ldr	r0, [pc, #80]	; (800698c <MX_TIM2_Init+0x98>)
 800693c:	f004 f858 	bl	800a9f0 <HAL_TIM_Base_Init>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006946:	f7fd f97d 	bl	8003c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800694a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800694e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006950:	f107 0308 	add.w	r3, r7, #8
 8006954:	4619      	mov	r1, r3
 8006956:	480d      	ldr	r0, [pc, #52]	; (800698c <MX_TIM2_Init+0x98>)
 8006958:	f004 fa10 	bl	800ad7c <HAL_TIM_ConfigClockSource>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006962:	f7fd f96f 	bl	8003c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006966:	2300      	movs	r3, #0
 8006968:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800696a:	2300      	movs	r3, #0
 800696c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800696e:	463b      	mov	r3, r7
 8006970:	4619      	mov	r1, r3
 8006972:	4806      	ldr	r0, [pc, #24]	; (800698c <MX_TIM2_Init+0x98>)
 8006974:	f004 fc28 	bl	800b1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800697e:	f7fd f961 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006982:	bf00      	nop
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000898 	.word	0x20000898

08006990 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006996:	f107 0308 	add.w	r3, r7, #8
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	605a      	str	r2, [r3, #4]
 80069a0:	609a      	str	r2, [r3, #8]
 80069a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069a4:	463b      	mov	r3, r7
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80069ac:	4b1d      	ldr	r3, [pc, #116]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069ae:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <MX_TIM3_Init+0x98>)
 80069b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069b4:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80069b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069ba:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069bc:	2200      	movs	r2, #0
 80069be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 333;
 80069c0:	4b18      	ldr	r3, [pc, #96]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069c2:	f240 124d 	movw	r2, #333	; 0x14d
 80069c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069c8:	4b16      	ldr	r3, [pc, #88]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80069d4:	4813      	ldr	r0, [pc, #76]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069d6:	f004 f80b 	bl	800a9f0 <HAL_TIM_Base_Init>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80069e0:	f7fd f930 	bl	8003c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80069e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80069ea:	f107 0308 	add.w	r3, r7, #8
 80069ee:	4619      	mov	r1, r3
 80069f0:	480c      	ldr	r0, [pc, #48]	; (8006a24 <MX_TIM3_Init+0x94>)
 80069f2:	f004 f9c3 	bl	800ad7c <HAL_TIM_ConfigClockSource>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80069fc:	f7fd f922 	bl	8003c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a00:	2300      	movs	r3, #0
 8006a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006a08:	463b      	mov	r3, r7
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4805      	ldr	r0, [pc, #20]	; (8006a24 <MX_TIM3_Init+0x94>)
 8006a0e:	f004 fbdb 	bl	800b1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006a18:	f7fd f914 	bl	8003c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	20000850 	.word	0x20000850
 8006a28:	40000400 	.word	0x40000400

08006a2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d114      	bne.n	8006a68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006a3e:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <HAL_TIM_Base_MspInit+0x78>)
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4a18      	ldr	r2, [pc, #96]	; (8006aa4 <HAL_TIM_Base_MspInit+0x78>)
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	61d3      	str	r3, [r2, #28]
 8006a4a:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <HAL_TIM_Base_MspInit+0x78>)
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006a56:	2200      	movs	r2, #0
 8006a58:	2100      	movs	r1, #0
 8006a5a:	201c      	movs	r0, #28
 8006a5c:	f001 fc39 	bl	80082d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a60:	201c      	movs	r0, #28
 8006a62:	f001 fc52 	bl	800830a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006a66:	e018      	b.n	8006a9a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <HAL_TIM_Base_MspInit+0x7c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d113      	bne.n	8006a9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a72:	4b0c      	ldr	r3, [pc, #48]	; (8006aa4 <HAL_TIM_Base_MspInit+0x78>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <HAL_TIM_Base_MspInit+0x78>)
 8006a78:	f043 0302 	orr.w	r3, r3, #2
 8006a7c:	61d3      	str	r3, [r2, #28]
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <HAL_TIM_Base_MspInit+0x78>)
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	201d      	movs	r0, #29
 8006a90:	f001 fc1f 	bl	80082d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a94:	201d      	movs	r0, #29
 8006a96:	f001 fc38 	bl	800830a <HAL_NVIC_EnableIRQ>
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	40000400 	.word	0x40000400

08006aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006aac:	480c      	ldr	r0, [pc, #48]	; (8006ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006aae:	490d      	ldr	r1, [pc, #52]	; (8006ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006ab0:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006ab4:	e002      	b.n	8006abc <LoopCopyDataInit>

08006ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006aba:	3304      	adds	r3, #4

08006abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ac0:	d3f9      	bcc.n	8006ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ac2:	4a0a      	ldr	r2, [pc, #40]	; (8006aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006ac4:	4c0a      	ldr	r4, [pc, #40]	; (8006af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ac8:	e001      	b.n	8006ace <LoopFillZerobss>

08006aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006acc:	3204      	adds	r2, #4

08006ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ad0:	d3fb      	bcc.n	8006aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006ad2:	f7ff ff09 	bl	80068e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006ad6:	f004 fc09 	bl	800b2ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006ada:	f7fc fe45 	bl	8003768 <main>
  bx lr
 8006ade:	4770      	bx	lr
  ldr r0, =_sdata
 8006ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ae4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8006ae8:	08010924 	.word	0x08010924
  ldr r2, =_sbss
 8006aec:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006af0:	200008f4 	.word	0x200008f4

08006af4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006af4:	e7fe      	b.n	8006af4 <ADC1_2_IRQHandler>
	...

08006af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006afc:	4b08      	ldr	r3, [pc, #32]	; (8006b20 <HAL_Init+0x28>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a07      	ldr	r2, [pc, #28]	; (8006b20 <HAL_Init+0x28>)
 8006b02:	f043 0310 	orr.w	r3, r3, #16
 8006b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b08:	2003      	movs	r0, #3
 8006b0a:	f001 fbd7 	bl	80082bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b0e:	200f      	movs	r0, #15
 8006b10:	f000 f808 	bl	8006b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b14:	f7fd f89c 	bl	8003c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40022000 	.word	0x40022000

08006b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <HAL_InitTick+0x54>)
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <HAL_InitTick+0x58>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b42:	4618      	mov	r0, r3
 8006b44:	f001 fbef 	bl	8008326 <HAL_SYSTICK_Config>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e00e      	b.n	8006b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b0f      	cmp	r3, #15
 8006b56:	d80a      	bhi.n	8006b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	f001 fbb7 	bl	80082d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b64:	4a06      	ldr	r2, [pc, #24]	; (8006b80 <HAL_InitTick+0x5c>)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e000      	b.n	8006b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	2000003c 	.word	0x2000003c
 8006b7c:	20000044 	.word	0x20000044
 8006b80:	20000040 	.word	0x20000040

08006b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <HAL_IncTick+0x1c>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_IncTick+0x20>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4413      	add	r3, r2
 8006b94:	4a03      	ldr	r2, [pc, #12]	; (8006ba4 <HAL_IncTick+0x20>)
 8006b96:	6013      	str	r3, [r2, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr
 8006ba0:	20000044 	.word	0x20000044
 8006ba4:	200008e0 	.word	0x200008e0

08006ba8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	af00      	add	r7, sp, #0
  return uwTick;
 8006bac:	4b02      	ldr	r3, [pc, #8]	; (8006bb8 <HAL_GetTick+0x10>)
 8006bae:	681b      	ldr	r3, [r3, #0]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr
 8006bb8:	200008e0 	.word	0x200008e0

08006bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bc4:	f7ff fff0 	bl	8006ba8 <HAL_GetTick>
 8006bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d005      	beq.n	8006be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <HAL_Delay+0x44>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006be2:	bf00      	nop
 8006be4:	f7ff ffe0 	bl	8006ba8 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d8f7      	bhi.n	8006be4 <HAL_Delay+0x28>
  {
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	bf00      	nop
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20000044 	.word	0x20000044

08006c04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e0ce      	b.n	8006dc4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fb fe76 	bl	8002934 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fb11 	bl	8007270 <ADC_ConversionStop_Disable>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c56:	f003 0310 	and.w	r3, r3, #16
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f040 80a9 	bne.w	8006db2 <HAL_ADC_Init+0x1ae>
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 80a5 	bne.w	8006db2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c70:	f023 0302 	bic.w	r3, r3, #2
 8006c74:	f043 0202 	orr.w	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4951      	ldr	r1, [pc, #324]	; (8006dcc <HAL_ADC_Init+0x1c8>)
 8006c86:	428b      	cmp	r3, r1
 8006c88:	d10a      	bne.n	8006ca0 <HAL_ADC_Init+0x9c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c92:	d002      	beq.n	8006c9a <HAL_ADC_Init+0x96>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	e004      	b.n	8006ca4 <HAL_ADC_Init+0xa0>
 8006c9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c9e:	e001      	b.n	8006ca4 <HAL_ADC_Init+0xa0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006ca4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7b1b      	ldrb	r3, [r3, #12]
 8006caa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006cac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cbc:	d003      	beq.n	8006cc6 <HAL_ADC_Init+0xc2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d102      	bne.n	8006ccc <HAL_ADC_Init+0xc8>
 8006cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cca:	e000      	b.n	8006cce <HAL_ADC_Init+0xca>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	7d1b      	ldrb	r3, [r3, #20]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d119      	bne.n	8006d10 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	035a      	lsls	r2, r3, #13
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cf4:	613b      	str	r3, [r7, #16]
 8006cf6:	e00b      	b.n	8006d10 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfc:	f043 0220 	orr.w	r2, r3, #32
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	f043 0201 	orr.w	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689a      	ldr	r2, [r3, #8]
 8006d2a:	4b29      	ldr	r3, [pc, #164]	; (8006dd0 <HAL_ADC_Init+0x1cc>)
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6812      	ldr	r2, [r2, #0]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	430b      	orrs	r3, r1
 8006d36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d40:	d003      	beq.n	8006d4a <HAL_ADC_Init+0x146>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d104      	bne.n	8006d54 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	051b      	lsls	r3, r3, #20
 8006d52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <HAL_ADC_Init+0x1d0>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d10b      	bne.n	8006d90 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f023 0303 	bic.w	r3, r3, #3
 8006d86:	f043 0201 	orr.w	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d8e:	e018      	b.n	8006dc2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d94:	f023 0312 	bic.w	r3, r3, #18
 8006d98:	f043 0210 	orr.w	r2, r3, #16
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	f043 0201 	orr.w	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006db0:	e007      	b.n	8006dc2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db6:	f043 0210 	orr.w	r2, r3, #16
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40013c00 	.word	0x40013c00
 8006dd0:	ffe1f7fd 	.word	0xffe1f7fd
 8006dd4:	ff1f0efe 	.word	0xff1f0efe

08006dd8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a64      	ldr	r2, [pc, #400]	; (8006f80 <HAL_ADC_Start_DMA+0x1a8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_ADC_Start_DMA+0x24>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a63      	ldr	r2, [pc, #396]	; (8006f84 <HAL_ADC_Start_DMA+0x1ac>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d106      	bne.n	8006e0a <HAL_ADC_Start_DMA+0x32>
 8006dfc:	4b60      	ldr	r3, [pc, #384]	; (8006f80 <HAL_ADC_Start_DMA+0x1a8>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f040 80b3 	bne.w	8006f70 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_ADC_Start_DMA+0x40>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e0ae      	b.n	8006f76 <HAL_ADC_Start_DMA+0x19e>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f9cb 	bl	80071bc <ADC_Enable>
 8006e26:	4603      	mov	r3, r0
 8006e28:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f040 809a 	bne.w	8006f66 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e3a:	f023 0301 	bic.w	r3, r3, #1
 8006e3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a4e      	ldr	r2, [pc, #312]	; (8006f84 <HAL_ADC_Start_DMA+0x1ac>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d105      	bne.n	8006e5c <HAL_ADC_Start_DMA+0x84>
 8006e50:	4b4b      	ldr	r3, [pc, #300]	; (8006f80 <HAL_ADC_Start_DMA+0x1a8>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d115      	bne.n	8006e88 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d026      	beq.n	8006ec4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e86:	e01d      	b.n	8006ec4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a39      	ldr	r2, [pc, #228]	; (8006f80 <HAL_ADC_Start_DMA+0x1a8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d004      	beq.n	8006ea8 <HAL_ADC_Start_DMA+0xd0>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a38      	ldr	r2, [pc, #224]	; (8006f84 <HAL_ADC_Start_DMA+0x1ac>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d10d      	bne.n	8006ec4 <HAL_ADC_Start_DMA+0xec>
 8006ea8:	4b35      	ldr	r3, [pc, #212]	; (8006f80 <HAL_ADC_Start_DMA+0x1a8>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ebc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d006      	beq.n	8006ede <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	f023 0206 	bic.w	r2, r3, #6
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8006edc:	e002      	b.n	8006ee4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	4a25      	ldr	r2, [pc, #148]	; (8006f88 <HAL_ADC_Start_DMA+0x1b0>)
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	4a24      	ldr	r2, [pc, #144]	; (8006f8c <HAL_ADC_Start_DMA+0x1b4>)
 8006efa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	4a23      	ldr	r2, [pc, #140]	; (8006f90 <HAL_ADC_Start_DMA+0x1b8>)
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0202 	mvn.w	r2, #2
 8006f0c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f1c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a18      	ldr	r0, [r3, #32]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	334c      	adds	r3, #76	; 0x4c
 8006f28:	4619      	mov	r1, r3
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f001 fa7d 	bl	800842c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006f3c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006f40:	d108      	bne.n	8006f54 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006f50:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006f52:	e00f      	b.n	8006f74 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f62:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006f64:	e006      	b.n	8006f74 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8006f6e:	e001      	b.n	8006f74 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40012400 	.word	0x40012400
 8006f84:	40012800 	.word	0x40012800
 8006f88:	080072f3 	.word	0x080072f3
 8006f8c:	0800736f 	.word	0x0800736f
 8006f90:	0800738b 	.word	0x0800738b

08006f94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bc80      	pop	{r7}
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr
	...

08006fcc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_ADC_ConfigChannel+0x20>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e0dc      	b.n	80071a6 <HAL_ADC_ConfigChannel+0x1da>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	2b06      	cmp	r3, #6
 8006ffa:	d81c      	bhi.n	8007036 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	3b05      	subs	r3, #5
 800700e:	221f      	movs	r2, #31
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	43db      	mvns	r3, r3
 8007016:	4019      	ands	r1, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	3b05      	subs	r3, #5
 8007028:	fa00 f203 	lsl.w	r2, r0, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	635a      	str	r2, [r3, #52]	; 0x34
 8007034:	e03c      	b.n	80070b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b0c      	cmp	r3, #12
 800703c:	d81c      	bhi.n	8007078 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	3b23      	subs	r3, #35	; 0x23
 8007050:	221f      	movs	r2, #31
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	43db      	mvns	r3, r3
 8007058:	4019      	ands	r1, r3
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	3b23      	subs	r3, #35	; 0x23
 800706a:	fa00 f203 	lsl.w	r2, r0, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
 8007076:	e01b      	b.n	80070b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	3b41      	subs	r3, #65	; 0x41
 800708a:	221f      	movs	r2, #31
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	43db      	mvns	r3, r3
 8007092:	4019      	ands	r1, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	3b41      	subs	r3, #65	; 0x41
 80070a4:	fa00 f203 	lsl.w	r2, r0, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b09      	cmp	r3, #9
 80070b6:	d91c      	bls.n	80070f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68d9      	ldr	r1, [r3, #12]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	3b1e      	subs	r3, #30
 80070ca:	2207      	movs	r2, #7
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	43db      	mvns	r3, r3
 80070d2:	4019      	ands	r1, r3
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6898      	ldr	r0, [r3, #8]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4413      	add	r3, r2
 80070e2:	3b1e      	subs	r3, #30
 80070e4:	fa00 f203 	lsl.w	r2, r0, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	60da      	str	r2, [r3, #12]
 80070f0:	e019      	b.n	8007126 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6919      	ldr	r1, [r3, #16]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	4413      	add	r3, r2
 8007102:	2207      	movs	r2, #7
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	43db      	mvns	r3, r3
 800710a:	4019      	ands	r1, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6898      	ldr	r0, [r3, #8]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4613      	mov	r3, r2
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	4413      	add	r3, r2
 800711a:	fa00 f203 	lsl.w	r2, r0, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b10      	cmp	r3, #16
 800712c:	d003      	beq.n	8007136 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007132:	2b11      	cmp	r3, #17
 8007134:	d132      	bne.n	800719c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a1d      	ldr	r2, [pc, #116]	; (80071b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d125      	bne.n	800718c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d126      	bne.n	800719c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800715c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b10      	cmp	r3, #16
 8007164:	d11a      	bne.n	800719c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	0c9a      	lsrs	r2, r3, #18
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800717c:	e002      	b.n	8007184 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	3b01      	subs	r3, #1
 8007182:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f9      	bne.n	800717e <HAL_ADC_ConfigChannel+0x1b2>
 800718a:	e007      	b.n	800719c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007190:	f043 0220 	orr.w	r2, r3, #32
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr
 80071b0:	40012400 	.word	0x40012400
 80071b4:	2000003c 	.word	0x2000003c
 80071b8:	431bde83 	.word	0x431bde83

080071bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d040      	beq.n	800725c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0201 	orr.w	r2, r2, #1
 80071e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80071ea:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <ADC_Enable+0xac>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1f      	ldr	r2, [pc, #124]	; (800726c <ADC_Enable+0xb0>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	0c9b      	lsrs	r3, r3, #18
 80071f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80071f8:	e002      	b.n	8007200 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f9      	bne.n	80071fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007206:	f7ff fccf 	bl	8006ba8 <HAL_GetTick>
 800720a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800720c:	e01f      	b.n	800724e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800720e:	f7ff fccb 	bl	8006ba8 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d918      	bls.n	800724e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b01      	cmp	r3, #1
 8007228:	d011      	beq.n	800724e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	f043 0210 	orr.w	r2, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	f043 0201 	orr.w	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e007      	b.n	800725e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d1d8      	bne.n	800720e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	2000003c 	.word	0x2000003c
 800726c:	431bde83 	.word	0x431bde83

08007270 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	d12e      	bne.n	80072e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800729a:	f7ff fc85 	bl	8006ba8 <HAL_GetTick>
 800729e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80072a0:	e01b      	b.n	80072da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80072a2:	f7ff fc81 	bl	8006ba8 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d914      	bls.n	80072da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d10d      	bne.n	80072da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f043 0210 	orr.w	r2, r3, #16
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ce:	f043 0201 	orr.w	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e007      	b.n	80072ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d0dc      	beq.n	80072a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007308:	2b00      	cmp	r3, #0
 800730a:	d127      	bne.n	800735c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007322:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007326:	d115      	bne.n	8007354 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800732c:	2b00      	cmp	r3, #0
 800732e:	d111      	bne.n	8007354 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d105      	bne.n	8007354 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734c:	f043 0201 	orr.w	r2, r3, #1
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fe1d 	bl	8006f94 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800735a:	e004      	b.n	8007366 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	4798      	blx	r3
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f7ff fe12 	bl	8006fa6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007396:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f043 0204 	orr.w	r2, r3, #4
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f7ff fe01 	bl	8006fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0ed      	b.n	80075ac <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7fb fb47 	bl	8002a70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f042 0201 	orr.w	r2, r2, #1
 80073f0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073f2:	f7ff fbd9 	bl	8006ba8 <HAL_GetTick>
 80073f6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80073f8:	e012      	b.n	8007420 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80073fa:	f7ff fbd5 	bl	8006ba8 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b0a      	cmp	r3, #10
 8007406:	d90b      	bls.n	8007420 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2205      	movs	r2, #5
 8007418:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0c5      	b.n	80075ac <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0e5      	beq.n	80073fa <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0202 	bic.w	r2, r2, #2
 800743c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800743e:	f7ff fbb3 	bl	8006ba8 <HAL_GetTick>
 8007442:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007444:	e012      	b.n	800746c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007446:	f7ff fbaf 	bl	8006ba8 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b0a      	cmp	r3, #10
 8007452:	d90b      	bls.n	800746c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2205      	movs	r2, #5
 8007464:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e09f      	b.n	80075ac <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e5      	bne.n	8007446 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7e1b      	ldrb	r3, [r3, #24]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d108      	bne.n	8007494 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e007      	b.n	80074a4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	7e5b      	ldrb	r3, [r3, #25]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d108      	bne.n	80074be <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	e007      	b.n	80074ce <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	7e9b      	ldrb	r3, [r3, #26]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d108      	bne.n	80074e8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0220 	orr.w	r2, r2, #32
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	e007      	b.n	80074f8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0220 	bic.w	r2, r2, #32
 80074f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	7edb      	ldrb	r3, [r3, #27]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d108      	bne.n	8007512 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0210 	bic.w	r2, r2, #16
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e007      	b.n	8007522 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0210 	orr.w	r2, r2, #16
 8007520:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	7f1b      	ldrb	r3, [r3, #28]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d108      	bne.n	800753c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f042 0208 	orr.w	r2, r2, #8
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e007      	b.n	800754c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0208 	bic.w	r2, r2, #8
 800754a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	7f5b      	ldrb	r3, [r3, #29]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d108      	bne.n	8007566 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0204 	orr.w	r2, r2, #4
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	e007      	b.n	8007576 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0204 	bic.w	r2, r2, #4
 8007574:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	431a      	orrs	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	ea42 0103 	orr.w	r1, r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	1e5a      	subs	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d003      	beq.n	80075da <HAL_CAN_ConfigFilter+0x26>
 80075d2:	7cfb      	ldrb	r3, [r7, #19]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	f040 80aa 	bne.w	800772e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80075e0:	f043 0201 	orr.w	r2, r3, #1
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2201      	movs	r2, #1
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	43db      	mvns	r3, r3
 8007604:	401a      	ands	r2, r3
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d123      	bne.n	800765c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	43db      	mvns	r3, r3
 800761e:	401a      	ands	r2, r3
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007636:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	3248      	adds	r2, #72	; 0x48
 800763c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007650:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007652:	6979      	ldr	r1, [r7, #20]
 8007654:	3348      	adds	r3, #72	; 0x48
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	440b      	add	r3, r1
 800765a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d122      	bne.n	80076aa <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	431a      	orrs	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007684:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	3248      	adds	r2, #72	; 0x48
 800768a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800769e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80076a0:	6979      	ldr	r1, [r7, #20]
 80076a2:	3348      	adds	r3, #72	; 0x48
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	440b      	add	r3, r1
 80076a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	43db      	mvns	r3, r3
 80076bc:	401a      	ands	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80076c4:	e007      	b.n	80076d6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d109      	bne.n	80076f2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	43db      	mvns	r3, r3
 80076e8:	401a      	ands	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80076f0:	e007      	b.n	8007702 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d107      	bne.n	800771a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	431a      	orrs	r2, r3
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007720:	f023 0201 	bic.w	r2, r3, #1
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	e006      	b.n	800773c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
  }
}
 800773c:	4618      	mov	r0, r3
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d12e      	bne.n	80077b8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0201 	bic.w	r2, r2, #1
 8007770:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007772:	f7ff fa19 	bl	8006ba8 <HAL_GetTick>
 8007776:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007778:	e012      	b.n	80077a0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800777a:	f7ff fa15 	bl	8006ba8 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b0a      	cmp	r3, #10
 8007786:	d90b      	bls.n	80077a0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2205      	movs	r2, #5
 8007798:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e012      	b.n	80077c6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e5      	bne.n	800777a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	e006      	b.n	80077c6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
  }
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b089      	sub	sp, #36	; 0x24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80077ec:	7ffb      	ldrb	r3, [r7, #31]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d003      	beq.n	80077fa <HAL_CAN_AddTxMessage+0x2c>
 80077f2:	7ffb      	ldrb	r3, [r7, #31]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	f040 80b8 	bne.w	800796a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800780a:	2b00      	cmp	r3, #0
 800780c:	d105      	bne.n	800781a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80a0 	beq.w	800795a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	0e1b      	lsrs	r3, r3, #24
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d907      	bls.n	800783a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e09e      	b.n	8007978 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800783a:	2201      	movs	r2, #1
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	409a      	lsls	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10d      	bne.n	8007868 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007856:	68f9      	ldr	r1, [r7, #12]
 8007858:	6809      	ldr	r1, [r1, #0]
 800785a:	431a      	orrs	r2, r3
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	3318      	adds	r3, #24
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	440b      	add	r3, r1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e00f      	b.n	8007888 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007872:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007878:	68f9      	ldr	r1, [r7, #12]
 800787a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800787c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	3318      	adds	r3, #24
 8007882:	011b      	lsls	r3, r3, #4
 8007884:	440b      	add	r3, r1
 8007886:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6819      	ldr	r1, [r3, #0]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	3318      	adds	r3, #24
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	440b      	add	r3, r1
 8007898:	3304      	adds	r3, #4
 800789a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	7d1b      	ldrb	r3, [r3, #20]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d111      	bne.n	80078c8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3318      	adds	r3, #24
 80078ac:	011b      	lsls	r3, r3, #4
 80078ae:	4413      	add	r3, r2
 80078b0:	3304      	adds	r3, #4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	6811      	ldr	r1, [r2, #0]
 80078b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	3318      	adds	r3, #24
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	440b      	add	r3, r1
 80078c4:	3304      	adds	r3, #4
 80078c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	3307      	adds	r3, #7
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	061a      	lsls	r2, r3, #24
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3306      	adds	r3, #6
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	041b      	lsls	r3, r3, #16
 80078d8:	431a      	orrs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3305      	adds	r3, #5
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	4313      	orrs	r3, r2
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	3204      	adds	r2, #4
 80078e8:	7812      	ldrb	r2, [r2, #0]
 80078ea:	4610      	mov	r0, r2
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	6811      	ldr	r1, [r2, #0]
 80078f0:	ea43 0200 	orr.w	r2, r3, r0
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	440b      	add	r3, r1
 80078fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80078fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3303      	adds	r3, #3
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	061a      	lsls	r2, r3, #24
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3302      	adds	r3, #2
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3301      	adds	r3, #1
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	4313      	orrs	r3, r2
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7812      	ldrb	r2, [r2, #0]
 8007920:	4610      	mov	r0, r2
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	6811      	ldr	r1, [r2, #0]
 8007926:	ea43 0200 	orr.w	r2, r3, r0
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	440b      	add	r3, r1
 8007930:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007934:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	3318      	adds	r3, #24
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	4413      	add	r3, r2
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	6811      	ldr	r1, [r2, #0]
 8007948:	f043 0201 	orr.w	r2, r3, #1
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3318      	adds	r3, #24
 8007950:	011b      	lsls	r3, r3, #4
 8007952:	440b      	add	r3, r1
 8007954:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e00e      	b.n	8007978 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e006      	b.n	8007978 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
  }
}
 8007978:	4618      	mov	r0, r3
 800797a:	3724      	adds	r7, #36	; 0x24
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr

08007982 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007992:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d002      	beq.n	80079a0 <HAL_CAN_AbortTxRequest+0x1e>
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d128      	bne.n	80079f2 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d007      	beq.n	80079ba <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079b8:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d007      	beq.n	80079d4 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d2:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80079ec:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e006      	b.n	8007a00 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
  }
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr

08007a0a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a1c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d002      	beq.n	8007a2a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d11d      	bne.n	8007a66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3301      	adds	r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr

08007a72 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007a72:	b480      	push	{r7}
 8007a74:	b087      	sub	sp, #28
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	60f8      	str	r0, [r7, #12]
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	607a      	str	r2, [r7, #4]
 8007a7e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a86:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d003      	beq.n	8007a96 <HAL_CAN_GetRxMessage+0x24>
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	f040 80f3 	bne.w	8007c7c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10e      	bne.n	8007aba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d116      	bne.n	8007ad8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e0e7      	b.n	8007c8a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d107      	bne.n	8007ad8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e0d8      	b.n	8007c8a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	331b      	adds	r3, #27
 8007ae0:	011b      	lsls	r3, r3, #4
 8007ae2:	4413      	add	r3, r2
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0204 	and.w	r2, r3, #4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10c      	bne.n	8007b10 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	331b      	adds	r3, #27
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4413      	add	r3, r2
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	0d5b      	lsrs	r3, r3, #21
 8007b06:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	e00b      	b.n	8007b28 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	331b      	adds	r3, #27
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	4413      	add	r3, r2
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	08db      	lsrs	r3, r3, #3
 8007b20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	331b      	adds	r3, #27
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	4413      	add	r3, r2
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0202 	and.w	r2, r3, #2
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	331b      	adds	r3, #27
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 020f 	and.w	r2, r3, #15
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	331b      	adds	r3, #27
 8007b5e:	011b      	lsls	r3, r3, #4
 8007b60:	4413      	add	r3, r2
 8007b62:	3304      	adds	r3, #4
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	0a1b      	lsrs	r3, r3, #8
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	331b      	adds	r3, #27
 8007b76:	011b      	lsls	r3, r3, #4
 8007b78:	4413      	add	r3, r2
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	0c1b      	lsrs	r3, r3, #16
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	011b      	lsls	r3, r3, #4
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	0a1a      	lsrs	r2, r3, #8
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	0c1a      	lsrs	r2, r3, #16
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	3302      	adds	r3, #2
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	0e1a      	lsrs	r2, r3, #24
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	3303      	adds	r3, #3
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	b2d2      	uxtb	r2, r2
 8007c00:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	0a1a      	lsrs	r2, r3, #8
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	3305      	adds	r3, #5
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	011b      	lsls	r3, r3, #4
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	0c1a      	lsrs	r2, r3, #16
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	3306      	adds	r3, #6
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	0e1a      	lsrs	r2, r3, #24
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	3307      	adds	r3, #7
 8007c4c:	b2d2      	uxtb	r2, r2
 8007c4e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d108      	bne.n	8007c68 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0220 	orr.w	r2, r2, #32
 8007c64:	60da      	str	r2, [r3, #12]
 8007c66:	e007      	b.n	8007c78 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0220 	orr.w	r2, r2, #32
 8007c76:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e006      	b.n	8007c8a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
  }
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr

08007c94 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ca4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d002      	beq.n	8007cb2 <HAL_CAN_ActivateNotification+0x1e>
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d109      	bne.n	8007cc6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6959      	ldr	r1, [r3, #20]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e006      	b.n	8007cd4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
  }
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr

08007cde <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b08a      	sub	sp, #40	; 0x28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d07c      	beq.n	8007e1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d023      	beq.n	8007d76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2201      	movs	r2, #1
 8007d34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f983 	bl	800804c <HAL_CAN_TxMailbox0CompleteCallback>
 8007d46:	e016      	b.n	8007d76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d004      	beq.n	8007d5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5a:	e00c      	b.n	8007d76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d6e:	e002      	b.n	8007d76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f986 	bl	8008082 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d024      	beq.n	8007dca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f962 	bl	800805e <HAL_CAN_TxMailbox1CompleteCallback>
 8007d9a:	e016      	b.n	8007dca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d004      	beq.n	8007db0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
 8007dae:	e00c      	b.n	8007dca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d004      	beq.n	8007dc4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc2:	e002      	b.n	8007dca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f965 	bl	8008094 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d024      	beq.n	8007e1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f941 	bl	8008070 <HAL_CAN_TxMailbox2CompleteCallback>
 8007dee:	e016      	b.n	8007e1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24
 8007e02:	e00c      	b.n	8007e1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
 8007e16:	e002      	b.n	8007e1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f944 	bl	80080a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00c      	beq.n	8007e42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d007      	beq.n	8007e42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2210      	movs	r2, #16
 8007e40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d006      	beq.n	8007e64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f92a 	bl	80080b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fb f9bf 	bl	8003200 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00c      	beq.n	8007ea6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f003 0320 	and.w	r3, r3, #32
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f003 0308 	and.w	r3, r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d006      	beq.n	8007ec8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2208      	movs	r2, #8
 8007ec0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f90a 	bl	80080dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f8f2 	bl	80080ca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f003 0310 	and.w	r3, r3, #16
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2210      	movs	r2, #16
 8007f00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f8f3 	bl	80080ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d006      	beq.n	8007f2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2208      	movs	r2, #8
 8007f22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f8eb 	bl	8008100 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d07b      	beq.n	800802c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d072      	beq.n	8008024 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d008      	beq.n	8007f5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	f043 0301 	orr.w	r3, r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	f043 0302 	orr.w	r3, r3, #2
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	f043 0304 	orr.w	r3, r3, #4
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d043      	beq.n	8008024 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d03e      	beq.n	8008024 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fac:	2b60      	cmp	r3, #96	; 0x60
 8007fae:	d02b      	beq.n	8008008 <HAL_CAN_IRQHandler+0x32a>
 8007fb0:	2b60      	cmp	r3, #96	; 0x60
 8007fb2:	d82e      	bhi.n	8008012 <HAL_CAN_IRQHandler+0x334>
 8007fb4:	2b50      	cmp	r3, #80	; 0x50
 8007fb6:	d022      	beq.n	8007ffe <HAL_CAN_IRQHandler+0x320>
 8007fb8:	2b50      	cmp	r3, #80	; 0x50
 8007fba:	d82a      	bhi.n	8008012 <HAL_CAN_IRQHandler+0x334>
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d019      	beq.n	8007ff4 <HAL_CAN_IRQHandler+0x316>
 8007fc0:	2b40      	cmp	r3, #64	; 0x40
 8007fc2:	d826      	bhi.n	8008012 <HAL_CAN_IRQHandler+0x334>
 8007fc4:	2b30      	cmp	r3, #48	; 0x30
 8007fc6:	d010      	beq.n	8007fea <HAL_CAN_IRQHandler+0x30c>
 8007fc8:	2b30      	cmp	r3, #48	; 0x30
 8007fca:	d822      	bhi.n	8008012 <HAL_CAN_IRQHandler+0x334>
 8007fcc:	2b10      	cmp	r3, #16
 8007fce:	d002      	beq.n	8007fd6 <HAL_CAN_IRQHandler+0x2f8>
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d005      	beq.n	8007fe0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007fd4:	e01d      	b.n	8008012 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	f043 0308 	orr.w	r3, r3, #8
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fde:	e019      	b.n	8008014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	f043 0310 	orr.w	r3, r3, #16
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fe8:	e014      	b.n	8008014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	f043 0320 	orr.w	r3, r3, #32
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ff2:	e00f      	b.n	8008014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ffc:	e00a      	b.n	8008014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008006:	e005      	b.n	8008014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008010:	e000      	b.n	8008014 <HAL_CAN_IRQHandler+0x336>
            break;
 8008012:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008022:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2204      	movs	r2, #4
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d008      	beq.n	8008044 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f867 	bl	8008112 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008044:	bf00      	nop
 8008046:	3728      	adds	r7, #40	; 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr

080080b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr

080080ca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bc80      	pop	{r7}
 80080ec:	4770      	bx	lr

080080ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr

08008112 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr

08008124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008134:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <__NVIC_SetPriorityGrouping+0x44>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008140:	4013      	ands	r3, r2
 8008142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800814c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008156:	4a04      	ldr	r2, [pc, #16]	; (8008168 <__NVIC_SetPriorityGrouping+0x44>)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	60d3      	str	r3, [r2, #12]
}
 800815c:	bf00      	nop
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	e000ed00 	.word	0xe000ed00

0800816c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008170:	4b04      	ldr	r3, [pc, #16]	; (8008184 <__NVIC_GetPriorityGrouping+0x18>)
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	0a1b      	lsrs	r3, r3, #8
 8008176:	f003 0307 	and.w	r3, r3, #7
}
 800817a:	4618      	mov	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	e000ed00 	.word	0xe000ed00

08008188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008196:	2b00      	cmp	r3, #0
 8008198:	db0b      	blt.n	80081b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	f003 021f 	and.w	r2, r3, #31
 80081a0:	4906      	ldr	r1, [pc, #24]	; (80081bc <__NVIC_EnableIRQ+0x34>)
 80081a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a6:	095b      	lsrs	r3, r3, #5
 80081a8:	2001      	movs	r0, #1
 80081aa:	fa00 f202 	lsl.w	r2, r0, r2
 80081ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr
 80081bc:	e000e100 	.word	0xe000e100

080081c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	6039      	str	r1, [r7, #0]
 80081ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	db0a      	blt.n	80081ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	490c      	ldr	r1, [pc, #48]	; (800820c <__NVIC_SetPriority+0x4c>)
 80081da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081de:	0112      	lsls	r2, r2, #4
 80081e0:	b2d2      	uxtb	r2, r2
 80081e2:	440b      	add	r3, r1
 80081e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081e8:	e00a      	b.n	8008200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	4908      	ldr	r1, [pc, #32]	; (8008210 <__NVIC_SetPriority+0x50>)
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	3b04      	subs	r3, #4
 80081f8:	0112      	lsls	r2, r2, #4
 80081fa:	b2d2      	uxtb	r2, r2
 80081fc:	440b      	add	r3, r1
 80081fe:	761a      	strb	r2, [r3, #24]
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	bc80      	pop	{r7}
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	e000e100 	.word	0xe000e100
 8008210:	e000ed00 	.word	0xe000ed00

08008214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008214:	b480      	push	{r7}
 8008216:	b089      	sub	sp, #36	; 0x24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f1c3 0307 	rsb	r3, r3, #7
 800822e:	2b04      	cmp	r3, #4
 8008230:	bf28      	it	cs
 8008232:	2304      	movcs	r3, #4
 8008234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	3304      	adds	r3, #4
 800823a:	2b06      	cmp	r3, #6
 800823c:	d902      	bls.n	8008244 <NVIC_EncodePriority+0x30>
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	3b03      	subs	r3, #3
 8008242:	e000      	b.n	8008246 <NVIC_EncodePriority+0x32>
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008248:	f04f 32ff 	mov.w	r2, #4294967295
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	43da      	mvns	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	401a      	ands	r2, r3
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800825c:	f04f 31ff 	mov.w	r1, #4294967295
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	fa01 f303 	lsl.w	r3, r1, r3
 8008266:	43d9      	mvns	r1, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800826c:	4313      	orrs	r3, r2
         );
}
 800826e:	4618      	mov	r0, r3
 8008270:	3724      	adds	r7, #36	; 0x24
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr

08008278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3b01      	subs	r3, #1
 8008284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008288:	d301      	bcc.n	800828e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800828a:	2301      	movs	r3, #1
 800828c:	e00f      	b.n	80082ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800828e:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <SysTick_Config+0x40>)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3b01      	subs	r3, #1
 8008294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008296:	210f      	movs	r1, #15
 8008298:	f04f 30ff 	mov.w	r0, #4294967295
 800829c:	f7ff ff90 	bl	80081c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <SysTick_Config+0x40>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80082a6:	4b04      	ldr	r3, [pc, #16]	; (80082b8 <SysTick_Config+0x40>)
 80082a8:	2207      	movs	r2, #7
 80082aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	e000e010 	.word	0xe000e010

080082bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff ff2d 	bl	8008124 <__NVIC_SetPriorityGrouping>
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b086      	sub	sp, #24
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	4603      	mov	r3, r0
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	607a      	str	r2, [r7, #4]
 80082de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80082e4:	f7ff ff42 	bl	800816c <__NVIC_GetPriorityGrouping>
 80082e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	6978      	ldr	r0, [r7, #20]
 80082f0:	f7ff ff90 	bl	8008214 <NVIC_EncodePriority>
 80082f4:	4602      	mov	r2, r0
 80082f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082fa:	4611      	mov	r1, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff ff5f 	bl	80081c0 <__NVIC_SetPriority>
}
 8008302:	bf00      	nop
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	4603      	mov	r3, r0
 8008312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff ff35 	bl	8008188 <__NVIC_EnableIRQ>
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff ffa2 	bl	8008278 <SysTick_Config>
 8008334:	4603      	mov	r3, r0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e059      	b.n	800840a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	4b2d      	ldr	r3, [pc, #180]	; (8008414 <HAL_DMA_Init+0xd4>)
 800835e:	429a      	cmp	r2, r3
 8008360:	d80f      	bhi.n	8008382 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	4b2b      	ldr	r3, [pc, #172]	; (8008418 <HAL_DMA_Init+0xd8>)
 800836a:	4413      	add	r3, r2
 800836c:	4a2b      	ldr	r2, [pc, #172]	; (800841c <HAL_DMA_Init+0xdc>)
 800836e:	fba2 2303 	umull	r2, r3, r2, r3
 8008372:	091b      	lsrs	r3, r3, #4
 8008374:	009a      	lsls	r2, r3, #2
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a28      	ldr	r2, [pc, #160]	; (8008420 <HAL_DMA_Init+0xe0>)
 800837e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008380:	e00e      	b.n	80083a0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	4b26      	ldr	r3, [pc, #152]	; (8008424 <HAL_DMA_Init+0xe4>)
 800838a:	4413      	add	r3, r2
 800838c:	4a23      	ldr	r2, [pc, #140]	; (800841c <HAL_DMA_Init+0xdc>)
 800838e:	fba2 2303 	umull	r2, r3, r2, r3
 8008392:	091b      	lsrs	r3, r3, #4
 8008394:	009a      	lsls	r2, r3, #2
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a22      	ldr	r2, [pc, #136]	; (8008428 <HAL_DMA_Init+0xe8>)
 800839e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80083b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80083ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80083c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr
 8008414:	40020407 	.word	0x40020407
 8008418:	bffdfff8 	.word	0xbffdfff8
 800841c:	cccccccd 	.word	0xcccccccd
 8008420:	40020000 	.word	0x40020000
 8008424:	bffdfbf8 	.word	0xbffdfbf8
 8008428:	40020400 	.word	0x40020400

0800842c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d101      	bne.n	800844c <HAL_DMA_Start_IT+0x20>
 8008448:	2302      	movs	r3, #2
 800844a:	e04a      	b.n	80084e2 <HAL_DMA_Start_IT+0xb6>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800845a:	2b01      	cmp	r3, #1
 800845c:	d13a      	bne.n	80084d4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2202      	movs	r2, #2
 8008462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2200      	movs	r2, #0
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0201 	bic.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fa6e 	bl	8008964 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d008      	beq.n	80084a2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 020e 	orr.w	r2, r2, #14
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	e00f      	b.n	80084c2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0204 	bic.w	r2, r2, #4
 80084b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 020a 	orr.w	r2, r2, #10
 80084c0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0201 	orr.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	e005      	b.n	80084e0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80084dc:	2302      	movs	r3, #2
 80084de:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	2204      	movs	r2, #4
 800850a:	409a      	lsls	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4013      	ands	r3, r2
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 80d6 	beq.w	80086c2 <HAL_DMA_IRQHandler+0x1d6>
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f003 0304 	and.w	r3, r3, #4
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80d0 	beq.w	80086c2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b00      	cmp	r3, #0
 800852e:	d107      	bne.n	8008540 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0204 	bic.w	r2, r2, #4
 800853e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	4b9b      	ldr	r3, [pc, #620]	; (80087b4 <HAL_DMA_IRQHandler+0x2c8>)
 8008548:	429a      	cmp	r2, r3
 800854a:	d958      	bls.n	80085fe <HAL_DMA_IRQHandler+0x112>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a99      	ldr	r2, [pc, #612]	; (80087b8 <HAL_DMA_IRQHandler+0x2cc>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d04f      	beq.n	80085f6 <HAL_DMA_IRQHandler+0x10a>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a98      	ldr	r2, [pc, #608]	; (80087bc <HAL_DMA_IRQHandler+0x2d0>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d048      	beq.n	80085f2 <HAL_DMA_IRQHandler+0x106>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a96      	ldr	r2, [pc, #600]	; (80087c0 <HAL_DMA_IRQHandler+0x2d4>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d040      	beq.n	80085ec <HAL_DMA_IRQHandler+0x100>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a95      	ldr	r2, [pc, #596]	; (80087c4 <HAL_DMA_IRQHandler+0x2d8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d038      	beq.n	80085e6 <HAL_DMA_IRQHandler+0xfa>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a93      	ldr	r2, [pc, #588]	; (80087c8 <HAL_DMA_IRQHandler+0x2dc>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d030      	beq.n	80085e0 <HAL_DMA_IRQHandler+0xf4>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a92      	ldr	r2, [pc, #584]	; (80087cc <HAL_DMA_IRQHandler+0x2e0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d028      	beq.n	80085da <HAL_DMA_IRQHandler+0xee>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a89      	ldr	r2, [pc, #548]	; (80087b4 <HAL_DMA_IRQHandler+0x2c8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d020      	beq.n	80085d4 <HAL_DMA_IRQHandler+0xe8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a8e      	ldr	r2, [pc, #568]	; (80087d0 <HAL_DMA_IRQHandler+0x2e4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d019      	beq.n	80085d0 <HAL_DMA_IRQHandler+0xe4>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a8c      	ldr	r2, [pc, #560]	; (80087d4 <HAL_DMA_IRQHandler+0x2e8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d012      	beq.n	80085cc <HAL_DMA_IRQHandler+0xe0>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a8b      	ldr	r2, [pc, #556]	; (80087d8 <HAL_DMA_IRQHandler+0x2ec>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00a      	beq.n	80085c6 <HAL_DMA_IRQHandler+0xda>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a89      	ldr	r2, [pc, #548]	; (80087dc <HAL_DMA_IRQHandler+0x2f0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d102      	bne.n	80085c0 <HAL_DMA_IRQHandler+0xd4>
 80085ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085be:	e01b      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80085c4:	e018      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ca:	e015      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085cc:	2340      	movs	r3, #64	; 0x40
 80085ce:	e013      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085d0:	2304      	movs	r3, #4
 80085d2:	e011      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80085d8:	e00e      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085de:	e00b      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80085e4:	e008      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085ea:	e005      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085f0:	e002      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085f2:	2340      	movs	r3, #64	; 0x40
 80085f4:	e000      	b.n	80085f8 <HAL_DMA_IRQHandler+0x10c>
 80085f6:	2304      	movs	r3, #4
 80085f8:	4a79      	ldr	r2, [pc, #484]	; (80087e0 <HAL_DMA_IRQHandler+0x2f4>)
 80085fa:	6053      	str	r3, [r2, #4]
 80085fc:	e057      	b.n	80086ae <HAL_DMA_IRQHandler+0x1c2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a6d      	ldr	r2, [pc, #436]	; (80087b8 <HAL_DMA_IRQHandler+0x2cc>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d04f      	beq.n	80086a8 <HAL_DMA_IRQHandler+0x1bc>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a6b      	ldr	r2, [pc, #428]	; (80087bc <HAL_DMA_IRQHandler+0x2d0>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d048      	beq.n	80086a4 <HAL_DMA_IRQHandler+0x1b8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a6a      	ldr	r2, [pc, #424]	; (80087c0 <HAL_DMA_IRQHandler+0x2d4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d040      	beq.n	800869e <HAL_DMA_IRQHandler+0x1b2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a68      	ldr	r2, [pc, #416]	; (80087c4 <HAL_DMA_IRQHandler+0x2d8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d038      	beq.n	8008698 <HAL_DMA_IRQHandler+0x1ac>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a67      	ldr	r2, [pc, #412]	; (80087c8 <HAL_DMA_IRQHandler+0x2dc>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d030      	beq.n	8008692 <HAL_DMA_IRQHandler+0x1a6>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a65      	ldr	r2, [pc, #404]	; (80087cc <HAL_DMA_IRQHandler+0x2e0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d028      	beq.n	800868c <HAL_DMA_IRQHandler+0x1a0>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a5d      	ldr	r2, [pc, #372]	; (80087b4 <HAL_DMA_IRQHandler+0x2c8>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d020      	beq.n	8008686 <HAL_DMA_IRQHandler+0x19a>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a61      	ldr	r2, [pc, #388]	; (80087d0 <HAL_DMA_IRQHandler+0x2e4>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d019      	beq.n	8008682 <HAL_DMA_IRQHandler+0x196>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a60      	ldr	r2, [pc, #384]	; (80087d4 <HAL_DMA_IRQHandler+0x2e8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d012      	beq.n	800867e <HAL_DMA_IRQHandler+0x192>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a5e      	ldr	r2, [pc, #376]	; (80087d8 <HAL_DMA_IRQHandler+0x2ec>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00a      	beq.n	8008678 <HAL_DMA_IRQHandler+0x18c>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a5d      	ldr	r2, [pc, #372]	; (80087dc <HAL_DMA_IRQHandler+0x2f0>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d102      	bne.n	8008672 <HAL_DMA_IRQHandler+0x186>
 800866c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008670:	e01b      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 8008672:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008676:	e018      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 8008678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800867c:	e015      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 800867e:	2340      	movs	r3, #64	; 0x40
 8008680:	e013      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 8008682:	2304      	movs	r3, #4
 8008684:	e011      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 8008686:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800868a:	e00e      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 800868c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008690:	e00b      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 8008692:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008696:	e008      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 8008698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800869c:	e005      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 800869e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a2:	e002      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 80086a4:	2340      	movs	r3, #64	; 0x40
 80086a6:	e000      	b.n	80086aa <HAL_DMA_IRQHandler+0x1be>
 80086a8:	2304      	movs	r3, #4
 80086aa:	4a4e      	ldr	r2, [pc, #312]	; (80087e4 <HAL_DMA_IRQHandler+0x2f8>)
 80086ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 8136 	beq.w	8008924 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80086c0:	e130      	b.n	8008924 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c6:	2202      	movs	r2, #2
 80086c8:	409a      	lsls	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 80f8 	beq.w	80088c4 <HAL_DMA_IRQHandler+0x3d8>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 80f2 	beq.w	80088c4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10b      	bne.n	8008706 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 020a 	bic.w	r2, r2, #10
 80086fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	4b29      	ldr	r3, [pc, #164]	; (80087b4 <HAL_DMA_IRQHandler+0x2c8>)
 800870e:	429a      	cmp	r2, r3
 8008710:	d973      	bls.n	80087fa <HAL_DMA_IRQHandler+0x30e>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <HAL_DMA_IRQHandler+0x2cc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d06a      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x306>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a26      	ldr	r2, [pc, #152]	; (80087bc <HAL_DMA_IRQHandler+0x2d0>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d063      	beq.n	80087ee <HAL_DMA_IRQHandler+0x302>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a25      	ldr	r2, [pc, #148]	; (80087c0 <HAL_DMA_IRQHandler+0x2d4>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d05b      	beq.n	80087e8 <HAL_DMA_IRQHandler+0x2fc>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a23      	ldr	r2, [pc, #140]	; (80087c4 <HAL_DMA_IRQHandler+0x2d8>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d038      	beq.n	80087ac <HAL_DMA_IRQHandler+0x2c0>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a22      	ldr	r2, [pc, #136]	; (80087c8 <HAL_DMA_IRQHandler+0x2dc>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d030      	beq.n	80087a6 <HAL_DMA_IRQHandler+0x2ba>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a20      	ldr	r2, [pc, #128]	; (80087cc <HAL_DMA_IRQHandler+0x2e0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d028      	beq.n	80087a0 <HAL_DMA_IRQHandler+0x2b4>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a18      	ldr	r2, [pc, #96]	; (80087b4 <HAL_DMA_IRQHandler+0x2c8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d020      	beq.n	800879a <HAL_DMA_IRQHandler+0x2ae>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a1c      	ldr	r2, [pc, #112]	; (80087d0 <HAL_DMA_IRQHandler+0x2e4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d019      	beq.n	8008796 <HAL_DMA_IRQHandler+0x2aa>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <HAL_DMA_IRQHandler+0x2e8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d012      	beq.n	8008792 <HAL_DMA_IRQHandler+0x2a6>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a19      	ldr	r2, [pc, #100]	; (80087d8 <HAL_DMA_IRQHandler+0x2ec>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00a      	beq.n	800878c <HAL_DMA_IRQHandler+0x2a0>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_DMA_IRQHandler+0x2f0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d102      	bne.n	8008786 <HAL_DMA_IRQHandler+0x29a>
 8008780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008784:	e036      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 8008786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800878a:	e033      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 800878c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008790:	e030      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 8008792:	2320      	movs	r3, #32
 8008794:	e02e      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 8008796:	2302      	movs	r3, #2
 8008798:	e02c      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 800879a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800879e:	e029      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 80087a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087a4:	e026      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 80087a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80087aa:	e023      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 80087ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087b0:	e020      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 80087b2:	bf00      	nop
 80087b4:	40020080 	.word	0x40020080
 80087b8:	40020008 	.word	0x40020008
 80087bc:	4002001c 	.word	0x4002001c
 80087c0:	40020030 	.word	0x40020030
 80087c4:	40020044 	.word	0x40020044
 80087c8:	40020058 	.word	0x40020058
 80087cc:	4002006c 	.word	0x4002006c
 80087d0:	40020408 	.word	0x40020408
 80087d4:	4002041c 	.word	0x4002041c
 80087d8:	40020430 	.word	0x40020430
 80087dc:	40020444 	.word	0x40020444
 80087e0:	40020400 	.word	0x40020400
 80087e4:	40020000 	.word	0x40020000
 80087e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087ec:	e002      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 80087ee:	2320      	movs	r3, #32
 80087f0:	e000      	b.n	80087f4 <HAL_DMA_IRQHandler+0x308>
 80087f2:	2302      	movs	r3, #2
 80087f4:	4a4e      	ldr	r2, [pc, #312]	; (8008930 <HAL_DMA_IRQHandler+0x444>)
 80087f6:	6053      	str	r3, [r2, #4]
 80087f8:	e057      	b.n	80088aa <HAL_DMA_IRQHandler+0x3be>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a4d      	ldr	r2, [pc, #308]	; (8008934 <HAL_DMA_IRQHandler+0x448>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d04f      	beq.n	80088a4 <HAL_DMA_IRQHandler+0x3b8>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a4b      	ldr	r2, [pc, #300]	; (8008938 <HAL_DMA_IRQHandler+0x44c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d048      	beq.n	80088a0 <HAL_DMA_IRQHandler+0x3b4>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a4a      	ldr	r2, [pc, #296]	; (800893c <HAL_DMA_IRQHandler+0x450>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d040      	beq.n	800889a <HAL_DMA_IRQHandler+0x3ae>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a48      	ldr	r2, [pc, #288]	; (8008940 <HAL_DMA_IRQHandler+0x454>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d038      	beq.n	8008894 <HAL_DMA_IRQHandler+0x3a8>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a47      	ldr	r2, [pc, #284]	; (8008944 <HAL_DMA_IRQHandler+0x458>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d030      	beq.n	800888e <HAL_DMA_IRQHandler+0x3a2>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a45      	ldr	r2, [pc, #276]	; (8008948 <HAL_DMA_IRQHandler+0x45c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d028      	beq.n	8008888 <HAL_DMA_IRQHandler+0x39c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a44      	ldr	r2, [pc, #272]	; (800894c <HAL_DMA_IRQHandler+0x460>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d020      	beq.n	8008882 <HAL_DMA_IRQHandler+0x396>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a42      	ldr	r2, [pc, #264]	; (8008950 <HAL_DMA_IRQHandler+0x464>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d019      	beq.n	800887e <HAL_DMA_IRQHandler+0x392>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a41      	ldr	r2, [pc, #260]	; (8008954 <HAL_DMA_IRQHandler+0x468>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d012      	beq.n	800887a <HAL_DMA_IRQHandler+0x38e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a3f      	ldr	r2, [pc, #252]	; (8008958 <HAL_DMA_IRQHandler+0x46c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00a      	beq.n	8008874 <HAL_DMA_IRQHandler+0x388>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3e      	ldr	r2, [pc, #248]	; (800895c <HAL_DMA_IRQHandler+0x470>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d102      	bne.n	800886e <HAL_DMA_IRQHandler+0x382>
 8008868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800886c:	e01b      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 800886e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008872:	e018      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 8008874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008878:	e015      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 800887a:	2320      	movs	r3, #32
 800887c:	e013      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 800887e:	2302      	movs	r3, #2
 8008880:	e011      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 8008882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008886:	e00e      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 8008888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800888c:	e00b      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 800888e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008892:	e008      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 8008894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008898:	e005      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 800889a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800889e:	e002      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 80088a0:	2320      	movs	r3, #32
 80088a2:	e000      	b.n	80088a6 <HAL_DMA_IRQHandler+0x3ba>
 80088a4:	2302      	movs	r3, #2
 80088a6:	4a2e      	ldr	r2, [pc, #184]	; (8008960 <HAL_DMA_IRQHandler+0x474>)
 80088a8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d034      	beq.n	8008924 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80088c2:	e02f      	b.n	8008924 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c8:	2208      	movs	r2, #8
 80088ca:	409a      	lsls	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4013      	ands	r3, r2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d028      	beq.n	8008926 <HAL_DMA_IRQHandler+0x43a>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d023      	beq.n	8008926 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 020e 	bic.w	r2, r2, #14
 80088ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f6:	2101      	movs	r1, #1
 80088f8:	fa01 f202 	lsl.w	r2, r1, r2
 80088fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
    }
  }
  return;
 8008924:	bf00      	nop
 8008926:	bf00      	nop
}
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40020400 	.word	0x40020400
 8008934:	40020008 	.word	0x40020008
 8008938:	4002001c 	.word	0x4002001c
 800893c:	40020030 	.word	0x40020030
 8008940:	40020044 	.word	0x40020044
 8008944:	40020058 	.word	0x40020058
 8008948:	4002006c 	.word	0x4002006c
 800894c:	40020080 	.word	0x40020080
 8008950:	40020408 	.word	0x40020408
 8008954:	4002041c 	.word	0x4002041c
 8008958:	40020430 	.word	0x40020430
 800895c:	40020444 	.word	0x40020444
 8008960:	40020000 	.word	0x40020000

08008964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800897a:	2101      	movs	r1, #1
 800897c:	fa01 f202 	lsl.w	r2, r1, r2
 8008980:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b10      	cmp	r3, #16
 8008990:	d108      	bne.n	80089a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80089a2:	e007      	b.n	80089b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	60da      	str	r2, [r3, #12]
}
 80089b4:	bf00      	nop
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bc80      	pop	{r7}
 80089bc:	4770      	bx	lr
	...

080089c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b08b      	sub	sp, #44	; 0x2c
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80089ca:	2300      	movs	r3, #0
 80089cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80089ce:	2300      	movs	r3, #0
 80089d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80089d2:	e179      	b.n	8008cc8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80089d4:	2201      	movs	r2, #1
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	fa02 f303 	lsl.w	r3, r2, r3
 80089dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	4013      	ands	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	f040 8168 	bne.w	8008cc2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	4aa0      	ldr	r2, [pc, #640]	; (8008c78 <HAL_GPIO_Init+0x2b8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d05e      	beq.n	8008aba <HAL_GPIO_Init+0xfa>
 80089fc:	4a9e      	ldr	r2, [pc, #632]	; (8008c78 <HAL_GPIO_Init+0x2b8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d875      	bhi.n	8008aee <HAL_GPIO_Init+0x12e>
 8008a02:	4a9e      	ldr	r2, [pc, #632]	; (8008c7c <HAL_GPIO_Init+0x2bc>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d058      	beq.n	8008aba <HAL_GPIO_Init+0xfa>
 8008a08:	4a9c      	ldr	r2, [pc, #624]	; (8008c7c <HAL_GPIO_Init+0x2bc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d86f      	bhi.n	8008aee <HAL_GPIO_Init+0x12e>
 8008a0e:	4a9c      	ldr	r2, [pc, #624]	; (8008c80 <HAL_GPIO_Init+0x2c0>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d052      	beq.n	8008aba <HAL_GPIO_Init+0xfa>
 8008a14:	4a9a      	ldr	r2, [pc, #616]	; (8008c80 <HAL_GPIO_Init+0x2c0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d869      	bhi.n	8008aee <HAL_GPIO_Init+0x12e>
 8008a1a:	4a9a      	ldr	r2, [pc, #616]	; (8008c84 <HAL_GPIO_Init+0x2c4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d04c      	beq.n	8008aba <HAL_GPIO_Init+0xfa>
 8008a20:	4a98      	ldr	r2, [pc, #608]	; (8008c84 <HAL_GPIO_Init+0x2c4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d863      	bhi.n	8008aee <HAL_GPIO_Init+0x12e>
 8008a26:	4a98      	ldr	r2, [pc, #608]	; (8008c88 <HAL_GPIO_Init+0x2c8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d046      	beq.n	8008aba <HAL_GPIO_Init+0xfa>
 8008a2c:	4a96      	ldr	r2, [pc, #600]	; (8008c88 <HAL_GPIO_Init+0x2c8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d85d      	bhi.n	8008aee <HAL_GPIO_Init+0x12e>
 8008a32:	2b12      	cmp	r3, #18
 8008a34:	d82a      	bhi.n	8008a8c <HAL_GPIO_Init+0xcc>
 8008a36:	2b12      	cmp	r3, #18
 8008a38:	d859      	bhi.n	8008aee <HAL_GPIO_Init+0x12e>
 8008a3a:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <HAL_GPIO_Init+0x80>)
 8008a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a40:	08008abb 	.word	0x08008abb
 8008a44:	08008a95 	.word	0x08008a95
 8008a48:	08008aa7 	.word	0x08008aa7
 8008a4c:	08008ae9 	.word	0x08008ae9
 8008a50:	08008aef 	.word	0x08008aef
 8008a54:	08008aef 	.word	0x08008aef
 8008a58:	08008aef 	.word	0x08008aef
 8008a5c:	08008aef 	.word	0x08008aef
 8008a60:	08008aef 	.word	0x08008aef
 8008a64:	08008aef 	.word	0x08008aef
 8008a68:	08008aef 	.word	0x08008aef
 8008a6c:	08008aef 	.word	0x08008aef
 8008a70:	08008aef 	.word	0x08008aef
 8008a74:	08008aef 	.word	0x08008aef
 8008a78:	08008aef 	.word	0x08008aef
 8008a7c:	08008aef 	.word	0x08008aef
 8008a80:	08008aef 	.word	0x08008aef
 8008a84:	08008a9d 	.word	0x08008a9d
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	4a7f      	ldr	r2, [pc, #508]	; (8008c8c <HAL_GPIO_Init+0x2cc>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d013      	beq.n	8008aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008a92:	e02c      	b.n	8008aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	623b      	str	r3, [r7, #32]
          break;
 8008a9a:	e029      	b.n	8008af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	623b      	str	r3, [r7, #32]
          break;
 8008aa4:	e024      	b.n	8008af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	623b      	str	r3, [r7, #32]
          break;
 8008aae:	e01f      	b.n	8008af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	623b      	str	r3, [r7, #32]
          break;
 8008ab8:	e01a      	b.n	8008af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008ac2:	2304      	movs	r3, #4
 8008ac4:	623b      	str	r3, [r7, #32]
          break;
 8008ac6:	e013      	b.n	8008af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d105      	bne.n	8008adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	611a      	str	r2, [r3, #16]
          break;
 8008ada:	e009      	b.n	8008af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008adc:	2308      	movs	r3, #8
 8008ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	615a      	str	r2, [r3, #20]
          break;
 8008ae6:	e003      	b.n	8008af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	623b      	str	r3, [r7, #32]
          break;
 8008aec:	e000      	b.n	8008af0 <HAL_GPIO_Init+0x130>
          break;
 8008aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	2bff      	cmp	r3, #255	; 0xff
 8008af4:	d801      	bhi.n	8008afa <HAL_GPIO_Init+0x13a>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	e001      	b.n	8008afe <HAL_GPIO_Init+0x13e>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	3304      	adds	r3, #4
 8008afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2bff      	cmp	r3, #255	; 0xff
 8008b04:	d802      	bhi.n	8008b0c <HAL_GPIO_Init+0x14c>
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	e002      	b.n	8008b12 <HAL_GPIO_Init+0x152>
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0e:	3b08      	subs	r3, #8
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	210f      	movs	r1, #15
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	6a39      	ldr	r1, [r7, #32]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 80c1 	beq.w	8008cc2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008b40:	4b53      	ldr	r3, [pc, #332]	; (8008c90 <HAL_GPIO_Init+0x2d0>)
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	4a52      	ldr	r2, [pc, #328]	; (8008c90 <HAL_GPIO_Init+0x2d0>)
 8008b46:	f043 0301 	orr.w	r3, r3, #1
 8008b4a:	6193      	str	r3, [r2, #24]
 8008b4c:	4b50      	ldr	r3, [pc, #320]	; (8008c90 <HAL_GPIO_Init+0x2d0>)
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	60bb      	str	r3, [r7, #8]
 8008b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008b58:	4a4e      	ldr	r2, [pc, #312]	; (8008c94 <HAL_GPIO_Init+0x2d4>)
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5c:	089b      	lsrs	r3, r3, #2
 8008b5e:	3302      	adds	r3, #2
 8008b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	220f      	movs	r2, #15
 8008b70:	fa02 f303 	lsl.w	r3, r2, r3
 8008b74:	43db      	mvns	r3, r3
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a46      	ldr	r2, [pc, #280]	; (8008c98 <HAL_GPIO_Init+0x2d8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d01f      	beq.n	8008bc4 <HAL_GPIO_Init+0x204>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a45      	ldr	r2, [pc, #276]	; (8008c9c <HAL_GPIO_Init+0x2dc>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d019      	beq.n	8008bc0 <HAL_GPIO_Init+0x200>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a44      	ldr	r2, [pc, #272]	; (8008ca0 <HAL_GPIO_Init+0x2e0>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d013      	beq.n	8008bbc <HAL_GPIO_Init+0x1fc>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a43      	ldr	r2, [pc, #268]	; (8008ca4 <HAL_GPIO_Init+0x2e4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00d      	beq.n	8008bb8 <HAL_GPIO_Init+0x1f8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a42      	ldr	r2, [pc, #264]	; (8008ca8 <HAL_GPIO_Init+0x2e8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d007      	beq.n	8008bb4 <HAL_GPIO_Init+0x1f4>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a41      	ldr	r2, [pc, #260]	; (8008cac <HAL_GPIO_Init+0x2ec>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d101      	bne.n	8008bb0 <HAL_GPIO_Init+0x1f0>
 8008bac:	2305      	movs	r3, #5
 8008bae:	e00a      	b.n	8008bc6 <HAL_GPIO_Init+0x206>
 8008bb0:	2306      	movs	r3, #6
 8008bb2:	e008      	b.n	8008bc6 <HAL_GPIO_Init+0x206>
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	e006      	b.n	8008bc6 <HAL_GPIO_Init+0x206>
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e004      	b.n	8008bc6 <HAL_GPIO_Init+0x206>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e002      	b.n	8008bc6 <HAL_GPIO_Init+0x206>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <HAL_GPIO_Init+0x206>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc8:	f002 0203 	and.w	r2, r2, #3
 8008bcc:	0092      	lsls	r2, r2, #2
 8008bce:	4093      	lsls	r3, r2
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008bd6:	492f      	ldr	r1, [pc, #188]	; (8008c94 <HAL_GPIO_Init+0x2d4>)
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	089b      	lsrs	r3, r3, #2
 8008bdc:	3302      	adds	r3, #2
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d006      	beq.n	8008bfe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008bf0:	4b2f      	ldr	r3, [pc, #188]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	492e      	ldr	r1, [pc, #184]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	600b      	str	r3, [r1, #0]
 8008bfc:	e006      	b.n	8008c0c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008bfe:	4b2c      	ldr	r3, [pc, #176]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	43db      	mvns	r3, r3
 8008c06:	492a      	ldr	r1, [pc, #168]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d006      	beq.n	8008c26 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008c18:	4b25      	ldr	r3, [pc, #148]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	4924      	ldr	r1, [pc, #144]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	604b      	str	r3, [r1, #4]
 8008c24:	e006      	b.n	8008c34 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008c26:	4b22      	ldr	r3, [pc, #136]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	43db      	mvns	r3, r3
 8008c2e:	4920      	ldr	r1, [pc, #128]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c30:	4013      	ands	r3, r2
 8008c32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008c40:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c42:	689a      	ldr	r2, [r3, #8]
 8008c44:	491a      	ldr	r1, [pc, #104]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	608b      	str	r3, [r1, #8]
 8008c4c:	e006      	b.n	8008c5c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008c4e:	4b18      	ldr	r3, [pc, #96]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	43db      	mvns	r3, r3
 8008c56:	4916      	ldr	r1, [pc, #88]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d025      	beq.n	8008cb4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008c68:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	4910      	ldr	r1, [pc, #64]	; (8008cb0 <HAL_GPIO_Init+0x2f0>)
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60cb      	str	r3, [r1, #12]
 8008c74:	e025      	b.n	8008cc2 <HAL_GPIO_Init+0x302>
 8008c76:	bf00      	nop
 8008c78:	10320000 	.word	0x10320000
 8008c7c:	10310000 	.word	0x10310000
 8008c80:	10220000 	.word	0x10220000
 8008c84:	10210000 	.word	0x10210000
 8008c88:	10120000 	.word	0x10120000
 8008c8c:	10110000 	.word	0x10110000
 8008c90:	40021000 	.word	0x40021000
 8008c94:	40010000 	.word	0x40010000
 8008c98:	40010800 	.word	0x40010800
 8008c9c:	40010c00 	.word	0x40010c00
 8008ca0:	40011000 	.word	0x40011000
 8008ca4:	40011400 	.word	0x40011400
 8008ca8:	40011800 	.word	0x40011800
 8008cac:	40011c00 	.word	0x40011c00
 8008cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008cb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ce4 <HAL_GPIO_Init+0x324>)
 8008cb6:	68da      	ldr	r2, [r3, #12]
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	4909      	ldr	r1, [pc, #36]	; (8008ce4 <HAL_GPIO_Init+0x324>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f47f ae7e 	bne.w	80089d4 <HAL_GPIO_Init+0x14>
  }
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop
 8008cdc:	372c      	adds	r7, #44	; 0x2c
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr
 8008ce4:	40010400 	.word	0x40010400

08008ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	887b      	ldrh	r3, [r7, #2]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d00:	2301      	movs	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
 8008d04:	e001      	b.n	8008d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d06:	2300      	movs	r3, #0
 8008d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc80      	pop	{r7}
 8008d14:	4770      	bx	lr

08008d16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d16:	b480      	push	{r7}
 8008d18:	b083      	sub	sp, #12
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	807b      	strh	r3, [r7, #2]
 8008d22:	4613      	mov	r3, r2
 8008d24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d26:	787b      	ldrb	r3, [r7, #1]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d2c:	887a      	ldrh	r2, [r7, #2]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008d32:	e003      	b.n	8008d3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008d34:	887b      	ldrh	r3, [r7, #2]
 8008d36:	041a      	lsls	r2, r3, #16
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	611a      	str	r2, [r3, #16]
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bc80      	pop	{r7}
 8008d44:	4770      	bx	lr

08008d46 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d58:	887a      	ldrh	r2, [r7, #2]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	041a      	lsls	r2, r3, #16
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	43d9      	mvns	r1, r3
 8008d64:	887b      	ldrh	r3, [r7, #2]
 8008d66:	400b      	ands	r3, r1
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	611a      	str	r2, [r3, #16]
}
 8008d6e:	bf00      	nop
 8008d70:	3714      	adds	r7, #20
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr

08008d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e12b      	b.n	8008fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fa fc5a 	bl	8003658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2224      	movs	r2, #36	; 0x24
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ddc:	f001 fd20 	bl	800a820 <HAL_RCC_GetPCLK1Freq>
 8008de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	4a81      	ldr	r2, [pc, #516]	; (8008fec <HAL_I2C_Init+0x274>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d807      	bhi.n	8008dfc <HAL_I2C_Init+0x84>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a80      	ldr	r2, [pc, #512]	; (8008ff0 <HAL_I2C_Init+0x278>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	bf94      	ite	ls
 8008df4:	2301      	movls	r3, #1
 8008df6:	2300      	movhi	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e006      	b.n	8008e0a <HAL_I2C_Init+0x92>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a7d      	ldr	r2, [pc, #500]	; (8008ff4 <HAL_I2C_Init+0x27c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	bf94      	ite	ls
 8008e04:	2301      	movls	r3, #1
 8008e06:	2300      	movhi	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e0e7      	b.n	8008fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a78      	ldr	r2, [pc, #480]	; (8008ff8 <HAL_I2C_Init+0x280>)
 8008e16:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1a:	0c9b      	lsrs	r3, r3, #18
 8008e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	4a6a      	ldr	r2, [pc, #424]	; (8008fec <HAL_I2C_Init+0x274>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d802      	bhi.n	8008e4c <HAL_I2C_Init+0xd4>
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	e009      	b.n	8008e60 <HAL_I2C_Init+0xe8>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	4a69      	ldr	r2, [pc, #420]	; (8008ffc <HAL_I2C_Init+0x284>)
 8008e58:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5c:	099b      	lsrs	r3, r3, #6
 8008e5e:	3301      	adds	r3, #1
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6812      	ldr	r2, [r2, #0]
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	495c      	ldr	r1, [pc, #368]	; (8008fec <HAL_I2C_Init+0x274>)
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	d819      	bhi.n	8008eb4 <HAL_I2C_Init+0x13c>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1e59      	subs	r1, r3, #1
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e94:	400b      	ands	r3, r1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <HAL_I2C_Init+0x138>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1e59      	subs	r1, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eae:	e051      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	e04f      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d111      	bne.n	8008ee0 <HAL_I2C_Init+0x168>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	1e58      	subs	r0, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6859      	ldr	r1, [r3, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	440b      	add	r3, r1
 8008eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ece:	3301      	adds	r3, #1
 8008ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	e012      	b.n	8008f06 <HAL_I2C_Init+0x18e>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1e58      	subs	r0, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6859      	ldr	r1, [r3, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	0099      	lsls	r1, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_I2C_Init+0x196>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e022      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10e      	bne.n	8008f34 <HAL_I2C_Init+0x1bc>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	1e58      	subs	r0, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6859      	ldr	r1, [r3, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	440b      	add	r3, r1
 8008f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f28:	3301      	adds	r3, #1
 8008f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f32:	e00f      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	1e58      	subs	r0, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6859      	ldr	r1, [r3, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	0099      	lsls	r1, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	6809      	ldr	r1, [r1, #0]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	6911      	ldr	r1, [r2, #16]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	68d2      	ldr	r2, [r2, #12]
 8008f8e:	4311      	orrs	r1, r2
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	430b      	orrs	r3, r1
 8008f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	695a      	ldr	r2, [r3, #20]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	000186a0 	.word	0x000186a0
 8008ff0:	001e847f 	.word	0x001e847f
 8008ff4:	003d08ff 	.word	0x003d08ff
 8008ff8:	431bde83 	.word	0x431bde83
 8008ffc:	10624dd3 	.word	0x10624dd3

08009000 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	4608      	mov	r0, r1
 800900a:	4611      	mov	r1, r2
 800900c:	461a      	mov	r2, r3
 800900e:	4603      	mov	r3, r0
 8009010:	817b      	strh	r3, [r7, #10]
 8009012:	460b      	mov	r3, r1
 8009014:	813b      	strh	r3, [r7, #8]
 8009016:	4613      	mov	r3, r2
 8009018:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800901a:	f7fd fdc5 	bl	8006ba8 <HAL_GetTick>
 800901e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b20      	cmp	r3, #32
 800902a:	f040 80d9 	bne.w	80091e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	2319      	movs	r3, #25
 8009034:	2201      	movs	r2, #1
 8009036:	496d      	ldr	r1, [pc, #436]	; (80091ec <HAL_I2C_Mem_Write+0x1ec>)
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f000 fdef 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009044:	2302      	movs	r3, #2
 8009046:	e0cc      	b.n	80091e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_I2C_Mem_Write+0x56>
 8009052:	2302      	movs	r3, #2
 8009054:	e0c5      	b.n	80091e2 <HAL_I2C_Mem_Write+0x1e2>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b01      	cmp	r3, #1
 800906a:	d007      	beq.n	800907c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0201 	orr.w	r2, r2, #1
 800907a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800908a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2221      	movs	r2, #33	; 0x21
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2240      	movs	r2, #64	; 0x40
 8009098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a3a      	ldr	r2, [r7, #32]
 80090a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80090ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a4d      	ldr	r2, [pc, #308]	; (80091f0 <HAL_I2C_Mem_Write+0x1f0>)
 80090bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090be:	88f8      	ldrh	r0, [r7, #6]
 80090c0:	893a      	ldrh	r2, [r7, #8]
 80090c2:	8979      	ldrh	r1, [r7, #10]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	4603      	mov	r3, r0
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fc26 	bl	8009920 <I2C_RequestMemoryWrite>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d052      	beq.n	8009180 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	e081      	b.n	80091e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fe70 	bl	8009dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00d      	beq.n	800910a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d107      	bne.n	8009106 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009104:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e06b      	b.n	80091e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	781a      	ldrb	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009124:	3b01      	subs	r3, #1
 8009126:	b29a      	uxth	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	695b      	ldr	r3, [r3, #20]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b04      	cmp	r3, #4
 8009146:	d11b      	bne.n	8009180 <HAL_I2C_Mem_Write+0x180>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	d017      	beq.n	8009180 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	781a      	ldrb	r2, [r3, #0]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916a:	3b01      	subs	r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009176:	b29b      	uxth	r3, r3
 8009178:	3b01      	subs	r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1aa      	bne.n	80090de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 fe5c 	bl	8009e4a <I2C_WaitOnBTFFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919c:	2b04      	cmp	r3, #4
 800919e:	d107      	bne.n	80091b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e016      	b.n	80091e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	e000      	b.n	80091e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80091e0:	2302      	movs	r3, #2
  }
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	00100002 	.word	0x00100002
 80091f0:	ffff0000 	.word	0xffff0000

080091f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b08c      	sub	sp, #48	; 0x30
 80091f8:	af02      	add	r7, sp, #8
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	4608      	mov	r0, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	461a      	mov	r2, r3
 8009202:	4603      	mov	r3, r0
 8009204:	817b      	strh	r3, [r7, #10]
 8009206:	460b      	mov	r3, r1
 8009208:	813b      	strh	r3, [r7, #8]
 800920a:	4613      	mov	r3, r2
 800920c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009212:	f7fd fcc9 	bl	8006ba8 <HAL_GetTick>
 8009216:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b20      	cmp	r3, #32
 8009222:	f040 8244 	bne.w	80096ae <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	2319      	movs	r3, #25
 800922c:	2201      	movs	r2, #1
 800922e:	4982      	ldr	r1, [pc, #520]	; (8009438 <HAL_I2C_Mem_Read+0x244>)
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fcf3 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
 800923e:	e237      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_I2C_Mem_Read+0x5a>
 800924a:	2302      	movs	r3, #2
 800924c:	e230      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b01      	cmp	r3, #1
 8009262:	d007      	beq.n	8009274 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0201 	orr.w	r2, r2, #1
 8009272:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009282:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2222      	movs	r2, #34	; 0x22
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2240      	movs	r2, #64	; 0x40
 8009290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2200      	movs	r2, #0
 8009298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80092a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4a62      	ldr	r2, [pc, #392]	; (800943c <HAL_I2C_Mem_Read+0x248>)
 80092b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092b6:	88f8      	ldrh	r0, [r7, #6]
 80092b8:	893a      	ldrh	r2, [r7, #8]
 80092ba:	8979      	ldrh	r1, [r7, #10]
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	4603      	mov	r3, r0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fbc0 	bl	8009a4c <I2C_RequestMemoryRead>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e1ec      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d113      	bne.n	8009306 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	61fb      	str	r3, [r7, #28]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	61fb      	str	r3, [r7, #28]
 80092f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	e1c0      	b.n	8009688 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930a:	2b01      	cmp	r3, #1
 800930c:	d11e      	bne.n	800934c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800931c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800931e:	b672      	cpsid	i
}
 8009320:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009322:	2300      	movs	r3, #0
 8009324:	61bb      	str	r3, [r7, #24]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	695b      	ldr	r3, [r3, #20]
 800932c:	61bb      	str	r3, [r7, #24]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009348:	b662      	cpsie	i
}
 800934a:	e035      	b.n	80093b8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009350:	2b02      	cmp	r3, #2
 8009352:	d11e      	bne.n	8009392 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009362:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009364:	b672      	cpsid	i
}
 8009366:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009368:	2300      	movs	r3, #0
 800936a:	617b      	str	r3, [r7, #20]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	617b      	str	r3, [r7, #20]
 800937c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800938c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800938e:	b662      	cpsie	i
}
 8009390:	e012      	b.n	80093b8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093a0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a2:	2300      	movs	r3, #0
 80093a4:	613b      	str	r3, [r7, #16]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	613b      	str	r3, [r7, #16]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	613b      	str	r3, [r7, #16]
 80093b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80093b8:	e166      	b.n	8009688 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093be:	2b03      	cmp	r3, #3
 80093c0:	f200 811f 	bhi.w	8009602 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d123      	bne.n	8009414 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 fd7b 	bl	8009ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d001      	beq.n	80093e0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e167      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691a      	ldr	r2, [r3, #16]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009412:	e139      	b.n	8009688 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009418:	2b02      	cmp	r3, #2
 800941a:	d152      	bne.n	80094c2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800941c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	2200      	movs	r2, #0
 8009424:	4906      	ldr	r1, [pc, #24]	; (8009440 <HAL_I2C_Mem_Read+0x24c>)
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fbf8 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e13c      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
 8009436:	bf00      	nop
 8009438:	00100002 	.word	0x00100002
 800943c:	ffff0000 	.word	0xffff0000
 8009440:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009444:	b672      	cpsid	i
}
 8009446:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009456:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	691a      	ldr	r2, [r3, #16]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009474:	3b01      	subs	r3, #1
 8009476:	b29a      	uxth	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800948a:	b662      	cpsie	i
}
 800948c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	691a      	ldr	r2, [r3, #16]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	b2d2      	uxtb	r2, r2
 800949a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094aa:	3b01      	subs	r3, #1
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80094c0:	e0e2      	b.n	8009688 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	2200      	movs	r2, #0
 80094ca:	497b      	ldr	r1, [pc, #492]	; (80096b8 <HAL_I2C_Mem_Read+0x4c4>)
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 fba5 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e0e9      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ec:	b672      	cpsid	i
}
 80094ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	691a      	ldr	r2, [r3, #16]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	b2d2      	uxtb	r2, r2
 80094fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	3b01      	subs	r3, #1
 800950e:	b29a      	uxth	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009518:	b29b      	uxth	r3, r3
 800951a:	3b01      	subs	r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009522:	4b66      	ldr	r3, [pc, #408]	; (80096bc <HAL_I2C_Mem_Read+0x4c8>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	08db      	lsrs	r3, r3, #3
 8009528:	4a65      	ldr	r2, [pc, #404]	; (80096c0 <HAL_I2C_Mem_Read+0x4cc>)
 800952a:	fba2 2303 	umull	r2, r3, r2, r3
 800952e:	0a1a      	lsrs	r2, r3, #8
 8009530:	4613      	mov	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	00da      	lsls	r2, r3, #3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	3b01      	subs	r3, #1
 8009540:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d118      	bne.n	800957a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009562:	f043 0220 	orr.w	r2, r3, #32
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800956a:	b662      	cpsie	i
}
 800956c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e09a      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b04      	cmp	r3, #4
 8009586:	d1d9      	bne.n	800953c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691a      	ldr	r2, [r3, #16]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80095ca:	b662      	cpsie	i
}
 80095cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	b2d2      	uxtb	r2, r2
 80095da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009600:	e042      	b.n	8009688 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009604:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009606:	68f8      	ldr	r0, [r7, #12]
 8009608:	f000 fc60 	bl	8009ecc <I2C_WaitOnRXNEFlagUntilTimeout>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d001      	beq.n	8009616 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e04c      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	691a      	ldr	r2, [r3, #16]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	b2d2      	uxtb	r2, r2
 8009622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009632:	3b01      	subs	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963e:	b29b      	uxth	r3, r3
 8009640:	3b01      	subs	r3, #1
 8009642:	b29a      	uxth	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b04      	cmp	r3, #4
 8009654:	d118      	bne.n	8009688 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	1c5a      	adds	r2, r3, #1
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009672:	3b01      	subs	r3, #1
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800967e:	b29b      	uxth	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	b29a      	uxth	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968c:	2b00      	cmp	r3, #0
 800968e:	f47f ae94 	bne.w	80093ba <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80096ae:	2302      	movs	r3, #2
  }
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3728      	adds	r7, #40	; 0x28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	00010004 	.word	0x00010004
 80096bc:	2000003c 	.word	0x2000003c
 80096c0:	14f8b589 	.word	0x14f8b589

080096c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08a      	sub	sp, #40	; 0x28
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	460b      	mov	r3, r1
 80096d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80096d4:	f7fd fa68 	bl	8006ba8 <HAL_GetTick>
 80096d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80096da:	2301      	movs	r3, #1
 80096dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	f040 8111 	bne.w	800990e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	2319      	movs	r3, #25
 80096f2:	2201      	movs	r2, #1
 80096f4:	4988      	ldr	r1, [pc, #544]	; (8009918 <HAL_I2C_IsDeviceReady+0x254>)
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fa90 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009702:	2302      	movs	r3, #2
 8009704:	e104      	b.n	8009910 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_I2C_IsDeviceReady+0x50>
 8009710:	2302      	movs	r3, #2
 8009712:	e0fd      	b.n	8009910 <HAL_I2C_IsDeviceReady+0x24c>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b01      	cmp	r3, #1
 8009728:	d007      	beq.n	800973a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f042 0201 	orr.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009748:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2224      	movs	r2, #36	; 0x24
 800974e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4a70      	ldr	r2, [pc, #448]	; (800991c <HAL_I2C_IsDeviceReady+0x258>)
 800975c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800976c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2200      	movs	r2, #0
 8009776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fa4e 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00d      	beq.n	80097a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009794:	d103      	bne.n	800979e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800979c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e0b6      	b.n	8009910 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097a2:	897b      	ldrh	r3, [r7, #10]
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80097b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80097b2:	f7fd f9f9 	bl	8006ba8 <HAL_GetTick>
 80097b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	bf0c      	ite	eq
 80097c6:	2301      	moveq	r3, #1
 80097c8:	2300      	movne	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097dc:	bf0c      	ite	eq
 80097de:	2301      	moveq	r3, #1
 80097e0:	2300      	movne	r3, #0
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80097e6:	e025      	b.n	8009834 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80097e8:	f7fd f9de 	bl	8006ba8 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d302      	bcc.n	80097fe <HAL_I2C_IsDeviceReady+0x13a>
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d103      	bne.n	8009806 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	22a0      	movs	r2, #160	; 0xa0
 8009802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b02      	cmp	r3, #2
 8009812:	bf0c      	ite	eq
 8009814:	2301      	moveq	r3, #1
 8009816:	2300      	movne	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800982a:	bf0c      	ite	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2300      	movne	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2ba0      	cmp	r3, #160	; 0xa0
 800983e:	d005      	beq.n	800984c <HAL_I2C_IsDeviceReady+0x188>
 8009840:	7dfb      	ldrb	r3, [r7, #23]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d102      	bne.n	800984c <HAL_I2C_IsDeviceReady+0x188>
 8009846:	7dbb      	ldrb	r3, [r7, #22]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0cd      	beq.n	80097e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b02      	cmp	r3, #2
 8009860:	d129      	bne.n	80098b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009870:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	613b      	str	r3, [r7, #16]
 8009886:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2319      	movs	r3, #25
 800988e:	2201      	movs	r2, #1
 8009890:	4921      	ldr	r1, [pc, #132]	; (8009918 <HAL_I2C_IsDeviceReady+0x254>)
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f9c2 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e036      	b.n	8009910 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	e02c      	b.n	8009910 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	2319      	movs	r3, #25
 80098d6:	2201      	movs	r2, #1
 80098d8:	490f      	ldr	r1, [pc, #60]	; (8009918 <HAL_I2C_IsDeviceReady+0x254>)
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 f99e 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e012      	b.n	8009910 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	3301      	adds	r3, #1
 80098ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	f4ff af32 	bcc.w	800975e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2220      	movs	r2, #32
 80098fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800990e:	2302      	movs	r3, #2
  }
}
 8009910:	4618      	mov	r0, r3
 8009912:	3720      	adds	r7, #32
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	00100002 	.word	0x00100002
 800991c:	ffff0000 	.word	0xffff0000

08009920 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b088      	sub	sp, #32
 8009924:	af02      	add	r7, sp, #8
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	4608      	mov	r0, r1
 800992a:	4611      	mov	r1, r2
 800992c:	461a      	mov	r2, r3
 800992e:	4603      	mov	r3, r0
 8009930:	817b      	strh	r3, [r7, #10]
 8009932:	460b      	mov	r3, r1
 8009934:	813b      	strh	r3, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	6a3b      	ldr	r3, [r7, #32]
 8009950:	2200      	movs	r2, #0
 8009952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 f960 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00d      	beq.n	800997e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009970:	d103      	bne.n	800997a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e05f      	b.n	8009a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800997e:	897b      	ldrh	r3, [r7, #10]
 8009980:	b2db      	uxtb	r3, r3
 8009982:	461a      	mov	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800998c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	6a3a      	ldr	r2, [r7, #32]
 8009992:	492d      	ldr	r1, [pc, #180]	; (8009a48 <I2C_RequestMemoryWrite+0x128>)
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f998 	bl	8009cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e04c      	b.n	8009a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	617b      	str	r3, [r7, #20]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099bc:	6a39      	ldr	r1, [r7, #32]
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 fa02 	bl	8009dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00d      	beq.n	80099e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d107      	bne.n	80099e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e02b      	b.n	8009a3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099e6:	88fb      	ldrh	r3, [r7, #6]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d105      	bne.n	80099f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099ec:	893b      	ldrh	r3, [r7, #8]
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	611a      	str	r2, [r3, #16]
 80099f6:	e021      	b.n	8009a3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80099f8:	893b      	ldrh	r3, [r7, #8]
 80099fa:	0a1b      	lsrs	r3, r3, #8
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a08:	6a39      	ldr	r1, [r7, #32]
 8009a0a:	68f8      	ldr	r0, [r7, #12]
 8009a0c:	f000 f9dc 	bl	8009dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00d      	beq.n	8009a32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	2b04      	cmp	r3, #4
 8009a1c:	d107      	bne.n	8009a2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e005      	b.n	8009a3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a32:	893b      	ldrh	r3, [r7, #8]
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	00010002 	.word	0x00010002

08009a4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af02      	add	r7, sp, #8
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	461a      	mov	r2, r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	817b      	strh	r3, [r7, #10]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	813b      	strh	r3, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f8c2 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00d      	beq.n	8009aba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aac:	d103      	bne.n	8009ab6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e0aa      	b.n	8009c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009aba:	897b      	ldrh	r3, [r7, #10]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ac8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	6a3a      	ldr	r2, [r7, #32]
 8009ace:	4952      	ldr	r1, [pc, #328]	; (8009c18 <I2C_RequestMemoryRead+0x1cc>)
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 f8fa 	bl	8009cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e097      	b.n	8009c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af8:	6a39      	ldr	r1, [r7, #32]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 f964 	bl	8009dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00d      	beq.n	8009b22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d107      	bne.n	8009b1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e076      	b.n	8009c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b22:	88fb      	ldrh	r3, [r7, #6]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d105      	bne.n	8009b34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b28:	893b      	ldrh	r3, [r7, #8]
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	611a      	str	r2, [r3, #16]
 8009b32:	e021      	b.n	8009b78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b34:	893b      	ldrh	r3, [r7, #8]
 8009b36:	0a1b      	lsrs	r3, r3, #8
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b44:	6a39      	ldr	r1, [r7, #32]
 8009b46:	68f8      	ldr	r0, [r7, #12]
 8009b48:	f000 f93e 	bl	8009dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00d      	beq.n	8009b6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b56:	2b04      	cmp	r3, #4
 8009b58:	d107      	bne.n	8009b6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e050      	b.n	8009c10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b6e:	893b      	ldrh	r3, [r7, #8]
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b7a:	6a39      	ldr	r1, [r7, #32]
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 f923 	bl	8009dc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00d      	beq.n	8009ba4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	d107      	bne.n	8009ba0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e035      	b.n	8009c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 f82b 	bl	8009c1c <I2C_WaitOnFlagUntilTimeout>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00d      	beq.n	8009be8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bda:	d103      	bne.n	8009be4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e013      	b.n	8009c10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009be8:	897b      	ldrh	r3, [r7, #10]
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f043 0301 	orr.w	r3, r3, #1
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	6a3a      	ldr	r2, [r7, #32]
 8009bfc:	4906      	ldr	r1, [pc, #24]	; (8009c18 <I2C_RequestMemoryRead+0x1cc>)
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f863 	bl	8009cca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e000      	b.n	8009c10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	00010002 	.word	0x00010002

08009c1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c2c:	e025      	b.n	8009c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c34:	d021      	beq.n	8009c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c36:	f7fc ffb7 	bl	8006ba8 <HAL_GetTick>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d302      	bcc.n	8009c4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d116      	bne.n	8009c7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	f043 0220 	orr.w	r2, r3, #32
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e023      	b.n	8009cc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	0c1b      	lsrs	r3, r3, #16
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d10d      	bne.n	8009ca0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	43da      	mvns	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	bf0c      	ite	eq
 8009c96:	2301      	moveq	r3, #1
 8009c98:	2300      	movne	r3, #0
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	e00c      	b.n	8009cba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	43da      	mvns	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4013      	ands	r3, r2
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	bf0c      	ite	eq
 8009cb2:	2301      	moveq	r3, #1
 8009cb4:	2300      	movne	r3, #0
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	461a      	mov	r2, r3
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d0b6      	beq.n	8009c2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	60f8      	str	r0, [r7, #12]
 8009cd2:	60b9      	str	r1, [r7, #8]
 8009cd4:	607a      	str	r2, [r7, #4]
 8009cd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cd8:	e051      	b.n	8009d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ce8:	d123      	bne.n	8009d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cf8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	f043 0204 	orr.w	r2, r3, #4
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e046      	b.n	8009dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d38:	d021      	beq.n	8009d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d3a:	f7fc ff35 	bl	8006ba8 <HAL_GetTick>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	1ad3      	subs	r3, r2, r3
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d302      	bcc.n	8009d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d116      	bne.n	8009d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f043 0220 	orr.w	r2, r3, #32
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e020      	b.n	8009dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	0c1b      	lsrs	r3, r3, #16
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10c      	bne.n	8009da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	43da      	mvns	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	4013      	ands	r3, r2
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bf14      	ite	ne
 8009d9a:	2301      	movne	r3, #1
 8009d9c:	2300      	moveq	r3, #0
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	e00b      	b.n	8009dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	43da      	mvns	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	4013      	ands	r3, r2
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	bf14      	ite	ne
 8009db4:	2301      	movne	r3, #1
 8009db6:	2300      	moveq	r3, #0
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d18d      	bne.n	8009cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dd4:	e02d      	b.n	8009e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 f8ce 	bl	8009f78 <I2C_IsAcknowledgeFailed>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e02d      	b.n	8009e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dec:	d021      	beq.n	8009e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dee:	f7fc fedb 	bl	8006ba8 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	68ba      	ldr	r2, [r7, #8]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d302      	bcc.n	8009e04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d116      	bne.n	8009e32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	f043 0220 	orr.w	r2, r3, #32
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e007      	b.n	8009e42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3c:	2b80      	cmp	r3, #128	; 0x80
 8009e3e:	d1ca      	bne.n	8009dd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b084      	sub	sp, #16
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e56:	e02d      	b.n	8009eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f88d 	bl	8009f78 <I2C_IsAcknowledgeFailed>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e02d      	b.n	8009ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6e:	d021      	beq.n	8009eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e70:	f7fc fe9a 	bl	8006ba8 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d302      	bcc.n	8009e86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d116      	bne.n	8009eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	f043 0220 	orr.w	r2, r3, #32
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e007      	b.n	8009ec4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d1ca      	bne.n	8009e58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ed8:	e042      	b.n	8009f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	f003 0310 	and.w	r3, r3, #16
 8009ee4:	2b10      	cmp	r3, #16
 8009ee6:	d119      	bne.n	8009f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f06f 0210 	mvn.w	r2, #16
 8009ef0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2220      	movs	r2, #32
 8009efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e029      	b.n	8009f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f1c:	f7fc fe44 	bl	8006ba8 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d302      	bcc.n	8009f32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d116      	bne.n	8009f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4c:	f043 0220 	orr.w	r2, r3, #32
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e007      	b.n	8009f70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6a:	2b40      	cmp	r3, #64	; 0x40
 8009f6c:	d1b5      	bne.n	8009eda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695b      	ldr	r3, [r3, #20]
 8009f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f8e:	d11b      	bne.n	8009fc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	f043 0204 	orr.w	r2, r3, #4
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e000      	b.n	8009fca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bc80      	pop	{r7}
 8009fd2:	4770      	bx	lr

08009fd4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e034      	b.n	800a050 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009fee:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f245 5255 	movw	r2, #21845	; 0x5555
 8009ff8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6852      	ldr	r2, [r2, #4]
 800a002:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6892      	ldr	r2, [r2, #8]
 800a00c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a00e:	f7fc fdcb 	bl	8006ba8 <HAL_GetTick>
 800a012:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a014:	e00f      	b.n	800a036 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a016:	f7fc fdc7 	bl	8006ba8 <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	2b27      	cmp	r3, #39	; 0x27
 800a022:	d908      	bls.n	800a036 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f003 0303 	and.w	r3, r3, #3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e00c      	b.n	800a050 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f003 0303 	and.w	r3, r3, #3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e8      	bne.n	800a016 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a04c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a068:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr
	...

0800a078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e26c      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 8087 	beq.w	800a1a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a098:	4b92      	ldr	r3, [pc, #584]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f003 030c 	and.w	r3, r3, #12
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d00c      	beq.n	800a0be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a0a4:	4b8f      	ldr	r3, [pc, #572]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f003 030c 	and.w	r3, r3, #12
 800a0ac:	2b08      	cmp	r3, #8
 800a0ae:	d112      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x5e>
 800a0b0:	4b8c      	ldr	r3, [pc, #560]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0bc:	d10b      	bne.n	800a0d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0be:	4b89      	ldr	r3, [pc, #548]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d06c      	beq.n	800a1a4 <HAL_RCC_OscConfig+0x12c>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d168      	bne.n	800a1a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e246      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0de:	d106      	bne.n	800a0ee <HAL_RCC_OscConfig+0x76>
 800a0e0:	4b80      	ldr	r3, [pc, #512]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a7f      	ldr	r2, [pc, #508]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a0e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0ea:	6013      	str	r3, [r2, #0]
 800a0ec:	e02e      	b.n	800a14c <HAL_RCC_OscConfig+0xd4>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10c      	bne.n	800a110 <HAL_RCC_OscConfig+0x98>
 800a0f6:	4b7b      	ldr	r3, [pc, #492]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a7a      	ldr	r2, [pc, #488]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a0fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a100:	6013      	str	r3, [r2, #0]
 800a102:	4b78      	ldr	r3, [pc, #480]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a77      	ldr	r2, [pc, #476]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a10c:	6013      	str	r3, [r2, #0]
 800a10e:	e01d      	b.n	800a14c <HAL_RCC_OscConfig+0xd4>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a118:	d10c      	bne.n	800a134 <HAL_RCC_OscConfig+0xbc>
 800a11a:	4b72      	ldr	r3, [pc, #456]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a71      	ldr	r2, [pc, #452]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	4b6f      	ldr	r3, [pc, #444]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a6e      	ldr	r2, [pc, #440]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a12c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	e00b      	b.n	800a14c <HAL_RCC_OscConfig+0xd4>
 800a134:	4b6b      	ldr	r3, [pc, #428]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a6a      	ldr	r2, [pc, #424]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a13a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	4b68      	ldr	r3, [pc, #416]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a67      	ldr	r2, [pc, #412]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a14a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d013      	beq.n	800a17c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a154:	f7fc fd28 	bl	8006ba8 <HAL_GetTick>
 800a158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a15a:	e008      	b.n	800a16e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a15c:	f7fc fd24 	bl	8006ba8 <HAL_GetTick>
 800a160:	4602      	mov	r2, r0
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	2b64      	cmp	r3, #100	; 0x64
 800a168:	d901      	bls.n	800a16e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e1fa      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a16e:	4b5d      	ldr	r3, [pc, #372]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a176:	2b00      	cmp	r3, #0
 800a178:	d0f0      	beq.n	800a15c <HAL_RCC_OscConfig+0xe4>
 800a17a:	e014      	b.n	800a1a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a17c:	f7fc fd14 	bl	8006ba8 <HAL_GetTick>
 800a180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a182:	e008      	b.n	800a196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a184:	f7fc fd10 	bl	8006ba8 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b64      	cmp	r3, #100	; 0x64
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e1e6      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a196:	4b53      	ldr	r3, [pc, #332]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1f0      	bne.n	800a184 <HAL_RCC_OscConfig+0x10c>
 800a1a2:	e000      	b.n	800a1a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0302 	and.w	r3, r3, #2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d063      	beq.n	800a27a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1b2:	4b4c      	ldr	r3, [pc, #304]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	f003 030c 	and.w	r3, r3, #12
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a1be:	4b49      	ldr	r3, [pc, #292]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f003 030c 	and.w	r3, r3, #12
 800a1c6:	2b08      	cmp	r3, #8
 800a1c8:	d11c      	bne.n	800a204 <HAL_RCC_OscConfig+0x18c>
 800a1ca:	4b46      	ldr	r3, [pc, #280]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d116      	bne.n	800a204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1d6:	4b43      	ldr	r3, [pc, #268]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <HAL_RCC_OscConfig+0x176>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d001      	beq.n	800a1ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e1ba      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ee:	4b3d      	ldr	r3, [pc, #244]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	4939      	ldr	r1, [pc, #228]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a202:	e03a      	b.n	800a27a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d020      	beq.n	800a24e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a20c:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <HAL_RCC_OscConfig+0x270>)
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a212:	f7fc fcc9 	bl	8006ba8 <HAL_GetTick>
 800a216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a218:	e008      	b.n	800a22c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a21a:	f7fc fcc5 	bl	8006ba8 <HAL_GetTick>
 800a21e:	4602      	mov	r2, r0
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	2b02      	cmp	r3, #2
 800a226:	d901      	bls.n	800a22c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e19b      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a22c:	4b2d      	ldr	r3, [pc, #180]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0f0      	beq.n	800a21a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a238:	4b2a      	ldr	r3, [pc, #168]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	4927      	ldr	r1, [pc, #156]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	600b      	str	r3, [r1, #0]
 800a24c:	e015      	b.n	800a27a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a24e:	4b26      	ldr	r3, [pc, #152]	; (800a2e8 <HAL_RCC_OscConfig+0x270>)
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a254:	f7fc fca8 	bl	8006ba8 <HAL_GetTick>
 800a258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a25c:	f7fc fca4 	bl	8006ba8 <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e17a      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a26e:	4b1d      	ldr	r3, [pc, #116]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0302 	and.w	r3, r3, #2
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1f0      	bne.n	800a25c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d03a      	beq.n	800a2fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d019      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a28e:	4b17      	ldr	r3, [pc, #92]	; (800a2ec <HAL_RCC_OscConfig+0x274>)
 800a290:	2201      	movs	r2, #1
 800a292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a294:	f7fc fc88 	bl	8006ba8 <HAL_GetTick>
 800a298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a29a:	e008      	b.n	800a2ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a29c:	f7fc fc84 	bl	8006ba8 <HAL_GetTick>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	d901      	bls.n	800a2ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	e15a      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <HAL_RCC_OscConfig+0x26c>)
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	f003 0302 	and.w	r3, r3, #2
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f0      	beq.n	800a29c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a2ba:	2001      	movs	r0, #1
 800a2bc:	f000 fac4 	bl	800a848 <RCC_Delay>
 800a2c0:	e01c      	b.n	800a2fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2c2:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <HAL_RCC_OscConfig+0x274>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2c8:	f7fc fc6e 	bl	8006ba8 <HAL_GetTick>
 800a2cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2ce:	e00f      	b.n	800a2f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2d0:	f7fc fc6a 	bl	8006ba8 <HAL_GetTick>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d908      	bls.n	800a2f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e140      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
 800a2e2:	bf00      	nop
 800a2e4:	40021000 	.word	0x40021000
 800a2e8:	42420000 	.word	0x42420000
 800a2ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2f0:	4b9e      	ldr	r3, [pc, #632]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	f003 0302 	and.w	r3, r3, #2
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e9      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0304 	and.w	r3, r3, #4
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 80a6 	beq.w	800a456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a30e:	4b97      	ldr	r3, [pc, #604]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10d      	bne.n	800a336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a31a:	4b94      	ldr	r3, [pc, #592]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	4a93      	ldr	r2, [pc, #588]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a324:	61d3      	str	r3, [r2, #28]
 800a326:	4b91      	ldr	r3, [pc, #580]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a32e:	60bb      	str	r3, [r7, #8]
 800a330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a332:	2301      	movs	r3, #1
 800a334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a336:	4b8e      	ldr	r3, [pc, #568]	; (800a570 <HAL_RCC_OscConfig+0x4f8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d118      	bne.n	800a374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a342:	4b8b      	ldr	r3, [pc, #556]	; (800a570 <HAL_RCC_OscConfig+0x4f8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a8a      	ldr	r2, [pc, #552]	; (800a570 <HAL_RCC_OscConfig+0x4f8>)
 800a348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a34c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a34e:	f7fc fc2b 	bl	8006ba8 <HAL_GetTick>
 800a352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a354:	e008      	b.n	800a368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a356:	f7fc fc27 	bl	8006ba8 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b64      	cmp	r3, #100	; 0x64
 800a362:	d901      	bls.n	800a368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e0fd      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a368:	4b81      	ldr	r3, [pc, #516]	; (800a570 <HAL_RCC_OscConfig+0x4f8>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0f0      	beq.n	800a356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d106      	bne.n	800a38a <HAL_RCC_OscConfig+0x312>
 800a37c:	4b7b      	ldr	r3, [pc, #492]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	4a7a      	ldr	r2, [pc, #488]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a382:	f043 0301 	orr.w	r3, r3, #1
 800a386:	6213      	str	r3, [r2, #32]
 800a388:	e02d      	b.n	800a3e6 <HAL_RCC_OscConfig+0x36e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10c      	bne.n	800a3ac <HAL_RCC_OscConfig+0x334>
 800a392:	4b76      	ldr	r3, [pc, #472]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	4a75      	ldr	r2, [pc, #468]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	6213      	str	r3, [r2, #32]
 800a39e:	4b73      	ldr	r3, [pc, #460]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	4a72      	ldr	r2, [pc, #456]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3a4:	f023 0304 	bic.w	r3, r3, #4
 800a3a8:	6213      	str	r3, [r2, #32]
 800a3aa:	e01c      	b.n	800a3e6 <HAL_RCC_OscConfig+0x36e>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b05      	cmp	r3, #5
 800a3b2:	d10c      	bne.n	800a3ce <HAL_RCC_OscConfig+0x356>
 800a3b4:	4b6d      	ldr	r3, [pc, #436]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3b6:	6a1b      	ldr	r3, [r3, #32]
 800a3b8:	4a6c      	ldr	r2, [pc, #432]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3ba:	f043 0304 	orr.w	r3, r3, #4
 800a3be:	6213      	str	r3, [r2, #32]
 800a3c0:	4b6a      	ldr	r3, [pc, #424]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	4a69      	ldr	r2, [pc, #420]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3c6:	f043 0301 	orr.w	r3, r3, #1
 800a3ca:	6213      	str	r3, [r2, #32]
 800a3cc:	e00b      	b.n	800a3e6 <HAL_RCC_OscConfig+0x36e>
 800a3ce:	4b67      	ldr	r3, [pc, #412]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	4a66      	ldr	r2, [pc, #408]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3d4:	f023 0301 	bic.w	r3, r3, #1
 800a3d8:	6213      	str	r3, [r2, #32]
 800a3da:	4b64      	ldr	r3, [pc, #400]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	4a63      	ldr	r2, [pc, #396]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a3e0:	f023 0304 	bic.w	r3, r3, #4
 800a3e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d015      	beq.n	800a41a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3ee:	f7fc fbdb 	bl	8006ba8 <HAL_GetTick>
 800a3f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3f4:	e00a      	b.n	800a40c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3f6:	f7fc fbd7 	bl	8006ba8 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	f241 3288 	movw	r2, #5000	; 0x1388
 800a404:	4293      	cmp	r3, r2
 800a406:	d901      	bls.n	800a40c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e0ab      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a40c:	4b57      	ldr	r3, [pc, #348]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a40e:	6a1b      	ldr	r3, [r3, #32]
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d0ee      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x37e>
 800a418:	e014      	b.n	800a444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a41a:	f7fc fbc5 	bl	8006ba8 <HAL_GetTick>
 800a41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a420:	e00a      	b.n	800a438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a422:	f7fc fbc1 	bl	8006ba8 <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a430:	4293      	cmp	r3, r2
 800a432:	d901      	bls.n	800a438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e095      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a438:	4b4c      	ldr	r3, [pc, #304]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a43a:	6a1b      	ldr	r3, [r3, #32]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1ee      	bne.n	800a422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d105      	bne.n	800a456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a44a:	4b48      	ldr	r3, [pc, #288]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	4a47      	ldr	r2, [pc, #284]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	69db      	ldr	r3, [r3, #28]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 8081 	beq.w	800a562 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a460:	4b42      	ldr	r3, [pc, #264]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	f003 030c 	and.w	r3, r3, #12
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d061      	beq.n	800a530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d146      	bne.n	800a502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a474:	4b3f      	ldr	r3, [pc, #252]	; (800a574 <HAL_RCC_OscConfig+0x4fc>)
 800a476:	2200      	movs	r2, #0
 800a478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a47a:	f7fc fb95 	bl	8006ba8 <HAL_GetTick>
 800a47e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a480:	e008      	b.n	800a494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a482:	f7fc fb91 	bl	8006ba8 <HAL_GetTick>
 800a486:	4602      	mov	r2, r0
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d901      	bls.n	800a494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e067      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a494:	4b35      	ldr	r3, [pc, #212]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f0      	bne.n	800a482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a1b      	ldr	r3, [r3, #32]
 800a4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4a8:	d108      	bne.n	800a4bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a4aa:	4b30      	ldr	r3, [pc, #192]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	492d      	ldr	r1, [pc, #180]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4bc:	4b2b      	ldr	r3, [pc, #172]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a19      	ldr	r1, [r3, #32]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	430b      	orrs	r3, r1
 800a4ce:	4927      	ldr	r1, [pc, #156]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4d4:	4b27      	ldr	r3, [pc, #156]	; (800a574 <HAL_RCC_OscConfig+0x4fc>)
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4da:	f7fc fb65 	bl	8006ba8 <HAL_GetTick>
 800a4de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4e0:	e008      	b.n	800a4f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4e2:	f7fc fb61 	bl	8006ba8 <HAL_GetTick>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d901      	bls.n	800a4f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e037      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4f4:	4b1d      	ldr	r3, [pc, #116]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0f0      	beq.n	800a4e2 <HAL_RCC_OscConfig+0x46a>
 800a500:	e02f      	b.n	800a562 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a502:	4b1c      	ldr	r3, [pc, #112]	; (800a574 <HAL_RCC_OscConfig+0x4fc>)
 800a504:	2200      	movs	r2, #0
 800a506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a508:	f7fc fb4e 	bl	8006ba8 <HAL_GetTick>
 800a50c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a50e:	e008      	b.n	800a522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a510:	f7fc fb4a 	bl	8006ba8 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e020      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a522:	4b12      	ldr	r3, [pc, #72]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f0      	bne.n	800a510 <HAL_RCC_OscConfig+0x498>
 800a52e:	e018      	b.n	800a562 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d101      	bne.n	800a53c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e013      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <HAL_RCC_OscConfig+0x4f4>)
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d106      	bne.n	800a55e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d001      	beq.n	800a562 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	e000      	b.n	800a564 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	40021000 	.word	0x40021000
 800a570:	40007000 	.word	0x40007000
 800a574:	42420060 	.word	0x42420060

0800a578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	e0d0      	b.n	800a72e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a58c:	4b6a      	ldr	r3, [pc, #424]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0307 	and.w	r3, r3, #7
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	429a      	cmp	r2, r3
 800a598:	d910      	bls.n	800a5bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a59a:	4b67      	ldr	r3, [pc, #412]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f023 0207 	bic.w	r2, r3, #7
 800a5a2:	4965      	ldr	r1, [pc, #404]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5aa:	4b63      	ldr	r3, [pc, #396]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d001      	beq.n	800a5bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e0b8      	b.n	800a72e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0302 	and.w	r3, r3, #2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d020      	beq.n	800a60a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a5d4:	4b59      	ldr	r3, [pc, #356]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	4a58      	ldr	r2, [pc, #352]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a5da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a5de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5ec:	4b53      	ldr	r3, [pc, #332]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	4a52      	ldr	r2, [pc, #328]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a5f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a5f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5f8:	4b50      	ldr	r3, [pc, #320]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	494d      	ldr	r1, [pc, #308]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a606:	4313      	orrs	r3, r2
 800a608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d040      	beq.n	800a698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d107      	bne.n	800a62e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a61e:	4b47      	ldr	r3, [pc, #284]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d115      	bne.n	800a656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e07f      	b.n	800a72e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d107      	bne.n	800a646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a636:	4b41      	ldr	r3, [pc, #260]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d109      	bne.n	800a656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	e073      	b.n	800a72e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a646:	4b3d      	ldr	r3, [pc, #244]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e06b      	b.n	800a72e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a656:	4b39      	ldr	r3, [pc, #228]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f023 0203 	bic.w	r2, r3, #3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	4936      	ldr	r1, [pc, #216]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a664:	4313      	orrs	r3, r2
 800a666:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a668:	f7fc fa9e 	bl	8006ba8 <HAL_GetTick>
 800a66c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a66e:	e00a      	b.n	800a686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a670:	f7fc fa9a 	bl	8006ba8 <HAL_GetTick>
 800a674:	4602      	mov	r2, r0
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67e:	4293      	cmp	r3, r2
 800a680:	d901      	bls.n	800a686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e053      	b.n	800a72e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a686:	4b2d      	ldr	r3, [pc, #180]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f003 020c 	and.w	r2, r3, #12
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	429a      	cmp	r2, r3
 800a696:	d1eb      	bne.n	800a670 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a698:	4b27      	ldr	r3, [pc, #156]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d210      	bcs.n	800a6c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6a6:	4b24      	ldr	r3, [pc, #144]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f023 0207 	bic.w	r2, r3, #7
 800a6ae:	4922      	ldr	r1, [pc, #136]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6b6:	4b20      	ldr	r3, [pc, #128]	; (800a738 <HAL_RCC_ClockConfig+0x1c0>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d001      	beq.n	800a6c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e032      	b.n	800a72e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0304 	and.w	r3, r3, #4
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d008      	beq.n	800a6e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a6d4:	4b19      	ldr	r3, [pc, #100]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	4916      	ldr	r1, [pc, #88]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 0308 	and.w	r3, r3, #8
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d009      	beq.n	800a706 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a6f2:	4b12      	ldr	r3, [pc, #72]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	00db      	lsls	r3, r3, #3
 800a700:	490e      	ldr	r1, [pc, #56]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a702:	4313      	orrs	r3, r2
 800a704:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a706:	f000 f821 	bl	800a74c <HAL_RCC_GetSysClockFreq>
 800a70a:	4602      	mov	r2, r0
 800a70c:	4b0b      	ldr	r3, [pc, #44]	; (800a73c <HAL_RCC_ClockConfig+0x1c4>)
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	091b      	lsrs	r3, r3, #4
 800a712:	f003 030f 	and.w	r3, r3, #15
 800a716:	490a      	ldr	r1, [pc, #40]	; (800a740 <HAL_RCC_ClockConfig+0x1c8>)
 800a718:	5ccb      	ldrb	r3, [r1, r3]
 800a71a:	fa22 f303 	lsr.w	r3, r2, r3
 800a71e:	4a09      	ldr	r2, [pc, #36]	; (800a744 <HAL_RCC_ClockConfig+0x1cc>)
 800a720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a722:	4b09      	ldr	r3, [pc, #36]	; (800a748 <HAL_RCC_ClockConfig+0x1d0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4618      	mov	r0, r3
 800a728:	f7fc f9fc 	bl	8006b24 <HAL_InitTick>

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	40022000 	.word	0x40022000
 800a73c:	40021000 	.word	0x40021000
 800a740:	08010428 	.word	0x08010428
 800a744:	2000003c 	.word	0x2000003c
 800a748:	20000040 	.word	0x20000040

0800a74c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a74c:	b490      	push	{r4, r7}
 800a74e:	b08a      	sub	sp, #40	; 0x28
 800a750:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a752:	4b2a      	ldr	r3, [pc, #168]	; (800a7fc <HAL_RCC_GetSysClockFreq+0xb0>)
 800a754:	1d3c      	adds	r4, r7, #4
 800a756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a75c:	f240 2301 	movw	r3, #513	; 0x201
 800a760:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
 800a766:	2300      	movs	r3, #0
 800a768:	61bb      	str	r3, [r7, #24]
 800a76a:	2300      	movs	r3, #0
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24
 800a76e:	2300      	movs	r3, #0
 800a770:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a772:	2300      	movs	r3, #0
 800a774:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a776:	4b22      	ldr	r3, [pc, #136]	; (800a800 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	f003 030c 	and.w	r3, r3, #12
 800a782:	2b04      	cmp	r3, #4
 800a784:	d002      	beq.n	800a78c <HAL_RCC_GetSysClockFreq+0x40>
 800a786:	2b08      	cmp	r3, #8
 800a788:	d003      	beq.n	800a792 <HAL_RCC_GetSysClockFreq+0x46>
 800a78a:	e02d      	b.n	800a7e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a78c:	4b1d      	ldr	r3, [pc, #116]	; (800a804 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a78e:	623b      	str	r3, [r7, #32]
      break;
 800a790:	e02d      	b.n	800a7ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	0c9b      	lsrs	r3, r3, #18
 800a796:	f003 030f 	and.w	r3, r3, #15
 800a79a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a79e:	4413      	add	r3, r2
 800a7a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a7a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d013      	beq.n	800a7d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a7b0:	4b13      	ldr	r3, [pc, #76]	; (800a800 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	0c5b      	lsrs	r3, r3, #17
 800a7b6:	f003 0301 	and.w	r3, r3, #1
 800a7ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a7be:	4413      	add	r3, r2
 800a7c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a7c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	4a0e      	ldr	r2, [pc, #56]	; (800a804 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7ca:	fb02 f203 	mul.w	r2, r2, r3
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d6:	e004      	b.n	800a7e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	4a0b      	ldr	r2, [pc, #44]	; (800a808 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	623b      	str	r3, [r7, #32]
      break;
 800a7e6:	e002      	b.n	800a7ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7ea:	623b      	str	r3, [r7, #32]
      break;
 800a7ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3728      	adds	r7, #40	; 0x28
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bc90      	pop	{r4, r7}
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	08010018 	.word	0x08010018
 800a800:	40021000 	.word	0x40021000
 800a804:	007a1200 	.word	0x007a1200
 800a808:	003d0900 	.word	0x003d0900

0800a80c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a810:	4b02      	ldr	r3, [pc, #8]	; (800a81c <HAL_RCC_GetHCLKFreq+0x10>)
 800a812:	681b      	ldr	r3, [r3, #0]
}
 800a814:	4618      	mov	r0, r3
 800a816:	46bd      	mov	sp, r7
 800a818:	bc80      	pop	{r7}
 800a81a:	4770      	bx	lr
 800a81c:	2000003c 	.word	0x2000003c

0800a820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a824:	f7ff fff2 	bl	800a80c <HAL_RCC_GetHCLKFreq>
 800a828:	4602      	mov	r2, r0
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	0a1b      	lsrs	r3, r3, #8
 800a830:	f003 0307 	and.w	r3, r3, #7
 800a834:	4903      	ldr	r1, [pc, #12]	; (800a844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a836:	5ccb      	ldrb	r3, [r1, r3]
 800a838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	40021000 	.word	0x40021000
 800a844:	08010438 	.word	0x08010438

0800a848 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a850:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <RCC_Delay+0x34>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a0a      	ldr	r2, [pc, #40]	; (800a880 <RCC_Delay+0x38>)
 800a856:	fba2 2303 	umull	r2, r3, r2, r3
 800a85a:	0a5b      	lsrs	r3, r3, #9
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	fb02 f303 	mul.w	r3, r2, r3
 800a862:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a864:	bf00      	nop
  }
  while (Delay --);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	1e5a      	subs	r2, r3, #1
 800a86a:	60fa      	str	r2, [r7, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1f9      	bne.n	800a864 <RCC_Delay+0x1c>
}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	bc80      	pop	{r7}
 800a87a:	4770      	bx	lr
 800a87c:	2000003c 	.word	0x2000003c
 800a880:	10624dd3 	.word	0x10624dd3

0800a884 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0301 	and.w	r3, r3, #1
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d07d      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8a4:	4b4f      	ldr	r3, [pc, #316]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8a6:	69db      	ldr	r3, [r3, #28]
 800a8a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10d      	bne.n	800a8cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8b0:	4b4c      	ldr	r3, [pc, #304]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	4a4b      	ldr	r2, [pc, #300]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ba:	61d3      	str	r3, [r2, #28]
 800a8bc:	4b49      	ldr	r3, [pc, #292]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8be:	69db      	ldr	r3, [r3, #28]
 800a8c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8c4:	60bb      	str	r3, [r7, #8]
 800a8c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8cc:	4b46      	ldr	r3, [pc, #280]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d118      	bne.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8d8:	4b43      	ldr	r3, [pc, #268]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a42      	ldr	r2, [pc, #264]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a8de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8e4:	f7fc f960 	bl	8006ba8 <HAL_GetTick>
 800a8e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8ea:	e008      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8ec:	f7fc f95c 	bl	8006ba8 <HAL_GetTick>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	2b64      	cmp	r3, #100	; 0x64
 800a8f8:	d901      	bls.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e06d      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8fe:	4b3a      	ldr	r3, [pc, #232]	; (800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a906:	2b00      	cmp	r3, #0
 800a908:	d0f0      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a90a:	4b36      	ldr	r3, [pc, #216]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a912:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d02e      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	429a      	cmp	r2, r3
 800a926:	d027      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a928:	4b2e      	ldr	r3, [pc, #184]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a930:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a932:	4b2e      	ldr	r3, [pc, #184]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a934:	2201      	movs	r2, #1
 800a936:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a938:	4b2c      	ldr	r3, [pc, #176]	; (800a9ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a93e:	4a29      	ldr	r2, [pc, #164]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d014      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a94e:	f7fc f92b 	bl	8006ba8 <HAL_GetTick>
 800a952:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a954:	e00a      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a956:	f7fc f927 	bl	8006ba8 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	f241 3288 	movw	r2, #5000	; 0x1388
 800a964:	4293      	cmp	r3, r2
 800a966:	d901      	bls.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e036      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a96c:	4b1d      	ldr	r3, [pc, #116]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0ee      	beq.n	800a956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a978:	4b1a      	ldr	r3, [pc, #104]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a97a:	6a1b      	ldr	r3, [r3, #32]
 800a97c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4917      	ldr	r1, [pc, #92]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a986:	4313      	orrs	r3, r2
 800a988:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d105      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a990:	4b14      	ldr	r3, [pc, #80]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a992:	69db      	ldr	r3, [r3, #28]
 800a994:	4a13      	ldr	r2, [pc, #76]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a99a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0302 	and.w	r3, r3, #2
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d008      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	490b      	ldr	r1, [pc, #44]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0310 	and.w	r3, r3, #16
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d008      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9c6:	4b07      	ldr	r3, [pc, #28]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	4904      	ldr	r1, [pc, #16]	; (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	40021000 	.word	0x40021000
 800a9e8:	40007000 	.word	0x40007000
 800a9ec:	42420440 	.word	0x42420440

0800a9f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e041      	b.n	800aa86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d106      	bne.n	800aa1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7fc f808 	bl	8006a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2202      	movs	r2, #2
 800aa20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4610      	mov	r0, r2
 800aa30:	f000 fa96 	bl	800af60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2201      	movs	r2, #1
 800aa58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d001      	beq.n	800aaa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e04e      	b.n	800ab46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2202      	movs	r2, #2
 800aaac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68da      	ldr	r2, [r3, #12]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f042 0201 	orr.w	r2, r2, #1
 800aabe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a22      	ldr	r2, [pc, #136]	; (800ab50 <HAL_TIM_Base_Start_IT+0xc0>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d022      	beq.n	800ab10 <HAL_TIM_Base_Start_IT+0x80>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a21      	ldr	r2, [pc, #132]	; (800ab54 <HAL_TIM_Base_Start_IT+0xc4>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d01d      	beq.n	800ab10 <HAL_TIM_Base_Start_IT+0x80>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aadc:	d018      	beq.n	800ab10 <HAL_TIM_Base_Start_IT+0x80>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a1d      	ldr	r2, [pc, #116]	; (800ab58 <HAL_TIM_Base_Start_IT+0xc8>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d013      	beq.n	800ab10 <HAL_TIM_Base_Start_IT+0x80>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a1b      	ldr	r2, [pc, #108]	; (800ab5c <HAL_TIM_Base_Start_IT+0xcc>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d00e      	beq.n	800ab10 <HAL_TIM_Base_Start_IT+0x80>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a1a      	ldr	r2, [pc, #104]	; (800ab60 <HAL_TIM_Base_Start_IT+0xd0>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d009      	beq.n	800ab10 <HAL_TIM_Base_Start_IT+0x80>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a18      	ldr	r2, [pc, #96]	; (800ab64 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d004      	beq.n	800ab10 <HAL_TIM_Base_Start_IT+0x80>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d111      	bne.n	800ab34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b06      	cmp	r3, #6
 800ab20:	d010      	beq.n	800ab44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0201 	orr.w	r2, r2, #1
 800ab30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab32:	e007      	b.n	800ab44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0201 	orr.w	r2, r2, #1
 800ab42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bc80      	pop	{r7}
 800ab4e:	4770      	bx	lr
 800ab50:	40012c00 	.word	0x40012c00
 800ab54:	40013400 	.word	0x40013400
 800ab58:	40000400 	.word	0x40000400
 800ab5c:	40000800 	.word	0x40000800
 800ab60:	40000c00 	.word	0x40000c00
 800ab64:	40014c00 	.word	0x40014c00
 800ab68:	40001800 	.word	0x40001800

0800ab6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	f003 0302 	and.w	r3, r3, #2
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d122      	bne.n	800abc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	f003 0302 	and.w	r3, r3, #2
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d11b      	bne.n	800abc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f06f 0202 	mvn.w	r2, #2
 800ab98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f9ba 	bl	800af28 <HAL_TIM_IC_CaptureCallback>
 800abb4:	e005      	b.n	800abc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f9ad 	bl	800af16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f9bc 	bl	800af3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d122      	bne.n	800ac1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b04      	cmp	r3, #4
 800abe2:	d11b      	bne.n	800ac1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f06f 0204 	mvn.w	r2, #4
 800abec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f990 	bl	800af28 <HAL_TIM_IC_CaptureCallback>
 800ac08:	e005      	b.n	800ac16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f983 	bl	800af16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f992 	bl	800af3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	f003 0308 	and.w	r3, r3, #8
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d122      	bne.n	800ac70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	f003 0308 	and.w	r3, r3, #8
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d11b      	bne.n	800ac70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f06f 0208 	mvn.w	r2, #8
 800ac40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2204      	movs	r2, #4
 800ac46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f966 	bl	800af28 <HAL_TIM_IC_CaptureCallback>
 800ac5c:	e005      	b.n	800ac6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f959 	bl	800af16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f968 	bl	800af3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f003 0310 	and.w	r3, r3, #16
 800ac7a:	2b10      	cmp	r3, #16
 800ac7c:	d122      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f003 0310 	and.w	r3, r3, #16
 800ac88:	2b10      	cmp	r3, #16
 800ac8a:	d11b      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f06f 0210 	mvn.w	r2, #16
 800ac94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2208      	movs	r2, #8
 800ac9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f93c 	bl	800af28 <HAL_TIM_IC_CaptureCallback>
 800acb0:	e005      	b.n	800acbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f92f 	bl	800af16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f93e 	bl	800af3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0301 	and.w	r3, r3, #1
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d10e      	bne.n	800acf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f003 0301 	and.w	r3, r3, #1
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d107      	bne.n	800acf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f06f 0201 	mvn.w	r2, #1
 800ace8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f90a 	bl	800af04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acfa:	2b80      	cmp	r3, #128	; 0x80
 800acfc:	d10e      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad08:	2b80      	cmp	r3, #128	; 0x80
 800ad0a:	d107      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fad9 	bl	800b2ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad26:	2b40      	cmp	r3, #64	; 0x40
 800ad28:	d10e      	bne.n	800ad48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad34:	2b40      	cmp	r3, #64	; 0x40
 800ad36:	d107      	bne.n	800ad48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f902 	bl	800af4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	f003 0320 	and.w	r3, r3, #32
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d10e      	bne.n	800ad74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f003 0320 	and.w	r3, r3, #32
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d107      	bne.n	800ad74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f06f 0220 	mvn.w	r2, #32
 800ad6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 faa4 	bl	800b2bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad74:	bf00      	nop
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_TIM_ConfigClockSource+0x18>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e0b3      	b.n	800aefc <HAL_TIM_ConfigClockSource+0x180>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2202      	movs	r2, #2
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800adb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adcc:	d03e      	beq.n	800ae4c <HAL_TIM_ConfigClockSource+0xd0>
 800adce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800add2:	f200 8087 	bhi.w	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800add6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adda:	f000 8085 	beq.w	800aee8 <HAL_TIM_ConfigClockSource+0x16c>
 800adde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ade2:	d87f      	bhi.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800ade4:	2b70      	cmp	r3, #112	; 0x70
 800ade6:	d01a      	beq.n	800ae1e <HAL_TIM_ConfigClockSource+0xa2>
 800ade8:	2b70      	cmp	r3, #112	; 0x70
 800adea:	d87b      	bhi.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800adec:	2b60      	cmp	r3, #96	; 0x60
 800adee:	d050      	beq.n	800ae92 <HAL_TIM_ConfigClockSource+0x116>
 800adf0:	2b60      	cmp	r3, #96	; 0x60
 800adf2:	d877      	bhi.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800adf4:	2b50      	cmp	r3, #80	; 0x50
 800adf6:	d03c      	beq.n	800ae72 <HAL_TIM_ConfigClockSource+0xf6>
 800adf8:	2b50      	cmp	r3, #80	; 0x50
 800adfa:	d873      	bhi.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800adfc:	2b40      	cmp	r3, #64	; 0x40
 800adfe:	d058      	beq.n	800aeb2 <HAL_TIM_ConfigClockSource+0x136>
 800ae00:	2b40      	cmp	r3, #64	; 0x40
 800ae02:	d86f      	bhi.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800ae04:	2b30      	cmp	r3, #48	; 0x30
 800ae06:	d064      	beq.n	800aed2 <HAL_TIM_ConfigClockSource+0x156>
 800ae08:	2b30      	cmp	r3, #48	; 0x30
 800ae0a:	d86b      	bhi.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800ae0c:	2b20      	cmp	r3, #32
 800ae0e:	d060      	beq.n	800aed2 <HAL_TIM_ConfigClockSource+0x156>
 800ae10:	2b20      	cmp	r3, #32
 800ae12:	d867      	bhi.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d05c      	beq.n	800aed2 <HAL_TIM_ConfigClockSource+0x156>
 800ae18:	2b10      	cmp	r3, #16
 800ae1a:	d05a      	beq.n	800aed2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ae1c:	e062      	b.n	800aee4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6818      	ldr	r0, [r3, #0]
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	6899      	ldr	r1, [r3, #8]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	f000 f9ac 	bl	800b18a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	609a      	str	r2, [r3, #8]
      break;
 800ae4a:	e04e      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	6899      	ldr	r1, [r3, #8]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	f000 f995 	bl	800b18a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689a      	ldr	r2, [r3, #8]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae6e:	609a      	str	r2, [r3, #8]
      break;
 800ae70:	e03b      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6859      	ldr	r1, [r3, #4]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	f000 f90c 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2150      	movs	r1, #80	; 0x50
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f963 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800ae90:	e02b      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	6859      	ldr	r1, [r3, #4]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f000 f92a 	bl	800b0f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2160      	movs	r1, #96	; 0x60
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 f953 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800aeb0:	e01b      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6818      	ldr	r0, [r3, #0]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	6859      	ldr	r1, [r3, #4]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	461a      	mov	r2, r3
 800aec0:	f000 f8ec 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2140      	movs	r1, #64	; 0x40
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 f943 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800aed0:	e00b      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f000 f93a 	bl	800b156 <TIM_ITRx_SetConfig>
        break;
 800aee2:	e002      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aee4:	bf00      	nop
 800aee6:	e000      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	bc80      	pop	{r7}
 800af14:	4770      	bx	lr

0800af16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af1e:	bf00      	nop
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr

0800af28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af30:	bf00      	nop
 800af32:	370c      	adds	r7, #12
 800af34:	46bd      	mov	sp, r7
 800af36:	bc80      	pop	{r7}
 800af38:	4770      	bx	lr

0800af3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b083      	sub	sp, #12
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	bc80      	pop	{r7}
 800af4a:	4770      	bx	lr

0800af4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	bc80      	pop	{r7}
 800af5c:	4770      	bx	lr
	...

0800af60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a3f      	ldr	r2, [pc, #252]	; (800b070 <TIM_Base_SetConfig+0x110>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d013      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a3e      	ldr	r2, [pc, #248]	; (800b074 <TIM_Base_SetConfig+0x114>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d00f      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af86:	d00b      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a3b      	ldr	r2, [pc, #236]	; (800b078 <TIM_Base_SetConfig+0x118>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d007      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a3a      	ldr	r2, [pc, #232]	; (800b07c <TIM_Base_SetConfig+0x11c>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d003      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a39      	ldr	r2, [pc, #228]	; (800b080 <TIM_Base_SetConfig+0x120>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d108      	bne.n	800afb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a2e      	ldr	r2, [pc, #184]	; (800b070 <TIM_Base_SetConfig+0x110>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d02b      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a2d      	ldr	r2, [pc, #180]	; (800b074 <TIM_Base_SetConfig+0x114>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d027      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc8:	d023      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a2a      	ldr	r2, [pc, #168]	; (800b078 <TIM_Base_SetConfig+0x118>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d01f      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a29      	ldr	r2, [pc, #164]	; (800b07c <TIM_Base_SetConfig+0x11c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d01b      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a28      	ldr	r2, [pc, #160]	; (800b080 <TIM_Base_SetConfig+0x120>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d017      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a27      	ldr	r2, [pc, #156]	; (800b084 <TIM_Base_SetConfig+0x124>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d013      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a26      	ldr	r2, [pc, #152]	; (800b088 <TIM_Base_SetConfig+0x128>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d00f      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a25      	ldr	r2, [pc, #148]	; (800b08c <TIM_Base_SetConfig+0x12c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d00b      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a24      	ldr	r2, [pc, #144]	; (800b090 <TIM_Base_SetConfig+0x130>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d007      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a23      	ldr	r2, [pc, #140]	; (800b094 <TIM_Base_SetConfig+0x134>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d003      	beq.n	800b012 <TIM_Base_SetConfig+0xb2>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a22      	ldr	r2, [pc, #136]	; (800b098 <TIM_Base_SetConfig+0x138>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d108      	bne.n	800b024 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	68fa      	ldr	r2, [r7, #12]
 800b020:	4313      	orrs	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	689a      	ldr	r2, [r3, #8]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a09      	ldr	r2, [pc, #36]	; (800b070 <TIM_Base_SetConfig+0x110>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d003      	beq.n	800b058 <TIM_Base_SetConfig+0xf8>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a08      	ldr	r2, [pc, #32]	; (800b074 <TIM_Base_SetConfig+0x114>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d103      	bne.n	800b060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	615a      	str	r2, [r3, #20]
}
 800b066:	bf00      	nop
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bc80      	pop	{r7}
 800b06e:	4770      	bx	lr
 800b070:	40012c00 	.word	0x40012c00
 800b074:	40013400 	.word	0x40013400
 800b078:	40000400 	.word	0x40000400
 800b07c:	40000800 	.word	0x40000800
 800b080:	40000c00 	.word	0x40000c00
 800b084:	40014c00 	.word	0x40014c00
 800b088:	40015000 	.word	0x40015000
 800b08c:	40015400 	.word	0x40015400
 800b090:	40001800 	.word	0x40001800
 800b094:	40001c00 	.word	0x40001c00
 800b098:	40002000 	.word	0x40002000

0800b09c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	f023 0201 	bic.w	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f023 030a 	bic.w	r3, r3, #10
 800b0d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc80      	pop	{r7}
 800b0f6:	4770      	bx	lr

0800b0f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	f023 0210 	bic.w	r2, r3, #16
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b122:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	031b      	lsls	r3, r3, #12
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	693a      	ldr	r2, [r7, #16]
 800b14a:	621a      	str	r2, [r3, #32]
}
 800b14c:	bf00      	nop
 800b14e:	371c      	adds	r7, #28
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr

0800b156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	f043 0307 	orr.w	r3, r3, #7
 800b178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	609a      	str	r2, [r3, #8]
}
 800b180:	bf00      	nop
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	bc80      	pop	{r7}
 800b188:	4770      	bx	lr

0800b18a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	021a      	lsls	r2, r3, #8
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	609a      	str	r2, [r3, #8]
}
 800b1be:	bf00      	nop
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bc80      	pop	{r7}
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d101      	bne.n	800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1dc:	2302      	movs	r3, #2
 800b1de:	e05a      	b.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a20      	ldr	r2, [pc, #128]	; (800b2a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d022      	beq.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a1e      	ldr	r2, [pc, #120]	; (800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d01d      	beq.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b236:	d018      	beq.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a1a      	ldr	r2, [pc, #104]	; (800b2a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d013      	beq.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a19      	ldr	r2, [pc, #100]	; (800b2ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d00e      	beq.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a17      	ldr	r2, [pc, #92]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d009      	beq.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a16      	ldr	r2, [pc, #88]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d004      	beq.n	800b26a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a14      	ldr	r2, [pc, #80]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d10c      	bne.n	800b284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	4313      	orrs	r3, r2
 800b27a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bc80      	pop	{r7}
 800b29e:	4770      	bx	lr
 800b2a0:	40012c00 	.word	0x40012c00
 800b2a4:	40013400 	.word	0x40013400
 800b2a8:	40000400 	.word	0x40000400
 800b2ac:	40000800 	.word	0x40000800
 800b2b0:	40000c00 	.word	0x40000c00
 800b2b4:	40014c00 	.word	0x40014c00
 800b2b8:	40001800 	.word	0x40001800

0800b2bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bc80      	pop	{r7}
 800b2cc:	4770      	bx	lr

0800b2ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bc80      	pop	{r7}
 800b2de:	4770      	bx	lr

0800b2e0 <__errno>:
 800b2e0:	4b01      	ldr	r3, [pc, #4]	; (800b2e8 <__errno+0x8>)
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	20000048 	.word	0x20000048

0800b2ec <__libc_init_array>:
 800b2ec:	b570      	push	{r4, r5, r6, lr}
 800b2ee:	2600      	movs	r6, #0
 800b2f0:	4d0c      	ldr	r5, [pc, #48]	; (800b324 <__libc_init_array+0x38>)
 800b2f2:	4c0d      	ldr	r4, [pc, #52]	; (800b328 <__libc_init_array+0x3c>)
 800b2f4:	1b64      	subs	r4, r4, r5
 800b2f6:	10a4      	asrs	r4, r4, #2
 800b2f8:	42a6      	cmp	r6, r4
 800b2fa:	d109      	bne.n	800b310 <__libc_init_array+0x24>
 800b2fc:	f004 fe7e 	bl	800fffc <_init>
 800b300:	2600      	movs	r6, #0
 800b302:	4d0a      	ldr	r5, [pc, #40]	; (800b32c <__libc_init_array+0x40>)
 800b304:	4c0a      	ldr	r4, [pc, #40]	; (800b330 <__libc_init_array+0x44>)
 800b306:	1b64      	subs	r4, r4, r5
 800b308:	10a4      	asrs	r4, r4, #2
 800b30a:	42a6      	cmp	r6, r4
 800b30c:	d105      	bne.n	800b31a <__libc_init_array+0x2e>
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	f855 3b04 	ldr.w	r3, [r5], #4
 800b314:	4798      	blx	r3
 800b316:	3601      	adds	r6, #1
 800b318:	e7ee      	b.n	800b2f8 <__libc_init_array+0xc>
 800b31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b31e:	4798      	blx	r3
 800b320:	3601      	adds	r6, #1
 800b322:	e7f2      	b.n	800b30a <__libc_init_array+0x1e>
 800b324:	0801091c 	.word	0x0801091c
 800b328:	0801091c 	.word	0x0801091c
 800b32c:	0801091c 	.word	0x0801091c
 800b330:	08010920 	.word	0x08010920

0800b334 <__itoa>:
 800b334:	1e93      	subs	r3, r2, #2
 800b336:	2b22      	cmp	r3, #34	; 0x22
 800b338:	b510      	push	{r4, lr}
 800b33a:	460c      	mov	r4, r1
 800b33c:	d904      	bls.n	800b348 <__itoa+0x14>
 800b33e:	2300      	movs	r3, #0
 800b340:	461c      	mov	r4, r3
 800b342:	700b      	strb	r3, [r1, #0]
 800b344:	4620      	mov	r0, r4
 800b346:	bd10      	pop	{r4, pc}
 800b348:	2a0a      	cmp	r2, #10
 800b34a:	d109      	bne.n	800b360 <__itoa+0x2c>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	da07      	bge.n	800b360 <__itoa+0x2c>
 800b350:	232d      	movs	r3, #45	; 0x2d
 800b352:	700b      	strb	r3, [r1, #0]
 800b354:	2101      	movs	r1, #1
 800b356:	4240      	negs	r0, r0
 800b358:	4421      	add	r1, r4
 800b35a:	f001 fe0f 	bl	800cf7c <__utoa>
 800b35e:	e7f1      	b.n	800b344 <__itoa+0x10>
 800b360:	2100      	movs	r1, #0
 800b362:	e7f9      	b.n	800b358 <__itoa+0x24>

0800b364 <itoa>:
 800b364:	f7ff bfe6 	b.w	800b334 <__itoa>

0800b368 <malloc>:
 800b368:	4b02      	ldr	r3, [pc, #8]	; (800b374 <malloc+0xc>)
 800b36a:	4601      	mov	r1, r0
 800b36c:	6818      	ldr	r0, [r3, #0]
 800b36e:	f000 b85f 	b.w	800b430 <_malloc_r>
 800b372:	bf00      	nop
 800b374:	20000048 	.word	0x20000048

0800b378 <free>:
 800b378:	4b02      	ldr	r3, [pc, #8]	; (800b384 <free+0xc>)
 800b37a:	4601      	mov	r1, r0
 800b37c:	6818      	ldr	r0, [r3, #0]
 800b37e:	f000 b80b 	b.w	800b398 <_free_r>
 800b382:	bf00      	nop
 800b384:	20000048 	.word	0x20000048

0800b388 <memset>:
 800b388:	4603      	mov	r3, r0
 800b38a:	4402      	add	r2, r0
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d100      	bne.n	800b392 <memset+0xa>
 800b390:	4770      	bx	lr
 800b392:	f803 1b01 	strb.w	r1, [r3], #1
 800b396:	e7f9      	b.n	800b38c <memset+0x4>

0800b398 <_free_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4605      	mov	r5, r0
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d043      	beq.n	800b428 <_free_r+0x90>
 800b3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3a4:	1f0c      	subs	r4, r1, #4
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	bfb8      	it	lt
 800b3aa:	18e4      	addlt	r4, r4, r3
 800b3ac:	f003 f83e 	bl	800e42c <__malloc_lock>
 800b3b0:	4a1e      	ldr	r2, [pc, #120]	; (800b42c <_free_r+0x94>)
 800b3b2:	6813      	ldr	r3, [r2, #0]
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	b933      	cbnz	r3, 800b3c6 <_free_r+0x2e>
 800b3b8:	6063      	str	r3, [r4, #4]
 800b3ba:	6014      	str	r4, [r2, #0]
 800b3bc:	4628      	mov	r0, r5
 800b3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3c2:	f003 b839 	b.w	800e438 <__malloc_unlock>
 800b3c6:	42a3      	cmp	r3, r4
 800b3c8:	d90a      	bls.n	800b3e0 <_free_r+0x48>
 800b3ca:	6821      	ldr	r1, [r4, #0]
 800b3cc:	1862      	adds	r2, r4, r1
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	bf01      	itttt	eq
 800b3d2:	681a      	ldreq	r2, [r3, #0]
 800b3d4:	685b      	ldreq	r3, [r3, #4]
 800b3d6:	1852      	addeq	r2, r2, r1
 800b3d8:	6022      	streq	r2, [r4, #0]
 800b3da:	6063      	str	r3, [r4, #4]
 800b3dc:	6004      	str	r4, [r0, #0]
 800b3de:	e7ed      	b.n	800b3bc <_free_r+0x24>
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	b10b      	cbz	r3, 800b3ea <_free_r+0x52>
 800b3e6:	42a3      	cmp	r3, r4
 800b3e8:	d9fa      	bls.n	800b3e0 <_free_r+0x48>
 800b3ea:	6811      	ldr	r1, [r2, #0]
 800b3ec:	1850      	adds	r0, r2, r1
 800b3ee:	42a0      	cmp	r0, r4
 800b3f0:	d10b      	bne.n	800b40a <_free_r+0x72>
 800b3f2:	6820      	ldr	r0, [r4, #0]
 800b3f4:	4401      	add	r1, r0
 800b3f6:	1850      	adds	r0, r2, r1
 800b3f8:	4283      	cmp	r3, r0
 800b3fa:	6011      	str	r1, [r2, #0]
 800b3fc:	d1de      	bne.n	800b3bc <_free_r+0x24>
 800b3fe:	6818      	ldr	r0, [r3, #0]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	4401      	add	r1, r0
 800b404:	6011      	str	r1, [r2, #0]
 800b406:	6053      	str	r3, [r2, #4]
 800b408:	e7d8      	b.n	800b3bc <_free_r+0x24>
 800b40a:	d902      	bls.n	800b412 <_free_r+0x7a>
 800b40c:	230c      	movs	r3, #12
 800b40e:	602b      	str	r3, [r5, #0]
 800b410:	e7d4      	b.n	800b3bc <_free_r+0x24>
 800b412:	6820      	ldr	r0, [r4, #0]
 800b414:	1821      	adds	r1, r4, r0
 800b416:	428b      	cmp	r3, r1
 800b418:	bf01      	itttt	eq
 800b41a:	6819      	ldreq	r1, [r3, #0]
 800b41c:	685b      	ldreq	r3, [r3, #4]
 800b41e:	1809      	addeq	r1, r1, r0
 800b420:	6021      	streq	r1, [r4, #0]
 800b422:	6063      	str	r3, [r4, #4]
 800b424:	6054      	str	r4, [r2, #4]
 800b426:	e7c9      	b.n	800b3bc <_free_r+0x24>
 800b428:	bd38      	pop	{r3, r4, r5, pc}
 800b42a:	bf00      	nop
 800b42c:	20000244 	.word	0x20000244

0800b430 <_malloc_r>:
 800b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b432:	1ccd      	adds	r5, r1, #3
 800b434:	f025 0503 	bic.w	r5, r5, #3
 800b438:	3508      	adds	r5, #8
 800b43a:	2d0c      	cmp	r5, #12
 800b43c:	bf38      	it	cc
 800b43e:	250c      	movcc	r5, #12
 800b440:	2d00      	cmp	r5, #0
 800b442:	4606      	mov	r6, r0
 800b444:	db01      	blt.n	800b44a <_malloc_r+0x1a>
 800b446:	42a9      	cmp	r1, r5
 800b448:	d903      	bls.n	800b452 <_malloc_r+0x22>
 800b44a:	230c      	movs	r3, #12
 800b44c:	6033      	str	r3, [r6, #0]
 800b44e:	2000      	movs	r0, #0
 800b450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b452:	f002 ffeb 	bl	800e42c <__malloc_lock>
 800b456:	4921      	ldr	r1, [pc, #132]	; (800b4dc <_malloc_r+0xac>)
 800b458:	680a      	ldr	r2, [r1, #0]
 800b45a:	4614      	mov	r4, r2
 800b45c:	b99c      	cbnz	r4, 800b486 <_malloc_r+0x56>
 800b45e:	4f20      	ldr	r7, [pc, #128]	; (800b4e0 <_malloc_r+0xb0>)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	b923      	cbnz	r3, 800b46e <_malloc_r+0x3e>
 800b464:	4621      	mov	r1, r4
 800b466:	4630      	mov	r0, r6
 800b468:	f000 feae 	bl	800c1c8 <_sbrk_r>
 800b46c:	6038      	str	r0, [r7, #0]
 800b46e:	4629      	mov	r1, r5
 800b470:	4630      	mov	r0, r6
 800b472:	f000 fea9 	bl	800c1c8 <_sbrk_r>
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	d123      	bne.n	800b4c2 <_malloc_r+0x92>
 800b47a:	230c      	movs	r3, #12
 800b47c:	4630      	mov	r0, r6
 800b47e:	6033      	str	r3, [r6, #0]
 800b480:	f002 ffda 	bl	800e438 <__malloc_unlock>
 800b484:	e7e3      	b.n	800b44e <_malloc_r+0x1e>
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	1b5b      	subs	r3, r3, r5
 800b48a:	d417      	bmi.n	800b4bc <_malloc_r+0x8c>
 800b48c:	2b0b      	cmp	r3, #11
 800b48e:	d903      	bls.n	800b498 <_malloc_r+0x68>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	441c      	add	r4, r3
 800b494:	6025      	str	r5, [r4, #0]
 800b496:	e004      	b.n	800b4a2 <_malloc_r+0x72>
 800b498:	6863      	ldr	r3, [r4, #4]
 800b49a:	42a2      	cmp	r2, r4
 800b49c:	bf0c      	ite	eq
 800b49e:	600b      	streq	r3, [r1, #0]
 800b4a0:	6053      	strne	r3, [r2, #4]
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f002 ffc8 	bl	800e438 <__malloc_unlock>
 800b4a8:	f104 000b 	add.w	r0, r4, #11
 800b4ac:	1d23      	adds	r3, r4, #4
 800b4ae:	f020 0007 	bic.w	r0, r0, #7
 800b4b2:	1ac2      	subs	r2, r0, r3
 800b4b4:	d0cc      	beq.n	800b450 <_malloc_r+0x20>
 800b4b6:	1a1b      	subs	r3, r3, r0
 800b4b8:	50a3      	str	r3, [r4, r2]
 800b4ba:	e7c9      	b.n	800b450 <_malloc_r+0x20>
 800b4bc:	4622      	mov	r2, r4
 800b4be:	6864      	ldr	r4, [r4, #4]
 800b4c0:	e7cc      	b.n	800b45c <_malloc_r+0x2c>
 800b4c2:	1cc4      	adds	r4, r0, #3
 800b4c4:	f024 0403 	bic.w	r4, r4, #3
 800b4c8:	42a0      	cmp	r0, r4
 800b4ca:	d0e3      	beq.n	800b494 <_malloc_r+0x64>
 800b4cc:	1a21      	subs	r1, r4, r0
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f000 fe7a 	bl	800c1c8 <_sbrk_r>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d1dd      	bne.n	800b494 <_malloc_r+0x64>
 800b4d8:	e7cf      	b.n	800b47a <_malloc_r+0x4a>
 800b4da:	bf00      	nop
 800b4dc:	20000244 	.word	0x20000244
 800b4e0:	20000248 	.word	0x20000248

0800b4e4 <__cvt>:
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ea:	461f      	mov	r7, r3
 800b4ec:	bfbb      	ittet	lt
 800b4ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b4f2:	461f      	movlt	r7, r3
 800b4f4:	2300      	movge	r3, #0
 800b4f6:	232d      	movlt	r3, #45	; 0x2d
 800b4f8:	b088      	sub	sp, #32
 800b4fa:	4614      	mov	r4, r2
 800b4fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b500:	7013      	strb	r3, [r2, #0]
 800b502:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b504:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b508:	f023 0820 	bic.w	r8, r3, #32
 800b50c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b510:	d005      	beq.n	800b51e <__cvt+0x3a>
 800b512:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b516:	d100      	bne.n	800b51a <__cvt+0x36>
 800b518:	3501      	adds	r5, #1
 800b51a:	2302      	movs	r3, #2
 800b51c:	e000      	b.n	800b520 <__cvt+0x3c>
 800b51e:	2303      	movs	r3, #3
 800b520:	aa07      	add	r2, sp, #28
 800b522:	9204      	str	r2, [sp, #16]
 800b524:	aa06      	add	r2, sp, #24
 800b526:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b52a:	e9cd 3500 	strd	r3, r5, [sp]
 800b52e:	4622      	mov	r2, r4
 800b530:	463b      	mov	r3, r7
 800b532:	f001 fdf5 	bl	800d120 <_dtoa_r>
 800b536:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b53a:	4606      	mov	r6, r0
 800b53c:	d102      	bne.n	800b544 <__cvt+0x60>
 800b53e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b540:	07db      	lsls	r3, r3, #31
 800b542:	d522      	bpl.n	800b58a <__cvt+0xa6>
 800b544:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b548:	eb06 0905 	add.w	r9, r6, r5
 800b54c:	d110      	bne.n	800b570 <__cvt+0x8c>
 800b54e:	7833      	ldrb	r3, [r6, #0]
 800b550:	2b30      	cmp	r3, #48	; 0x30
 800b552:	d10a      	bne.n	800b56a <__cvt+0x86>
 800b554:	2200      	movs	r2, #0
 800b556:	2300      	movs	r3, #0
 800b558:	4620      	mov	r0, r4
 800b55a:	4639      	mov	r1, r7
 800b55c:	f7f5 fa90 	bl	8000a80 <__aeabi_dcmpeq>
 800b560:	b918      	cbnz	r0, 800b56a <__cvt+0x86>
 800b562:	f1c5 0501 	rsb	r5, r5, #1
 800b566:	f8ca 5000 	str.w	r5, [sl]
 800b56a:	f8da 3000 	ldr.w	r3, [sl]
 800b56e:	4499      	add	r9, r3
 800b570:	2200      	movs	r2, #0
 800b572:	2300      	movs	r3, #0
 800b574:	4620      	mov	r0, r4
 800b576:	4639      	mov	r1, r7
 800b578:	f7f5 fa82 	bl	8000a80 <__aeabi_dcmpeq>
 800b57c:	b108      	cbz	r0, 800b582 <__cvt+0x9e>
 800b57e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b582:	2230      	movs	r2, #48	; 0x30
 800b584:	9b07      	ldr	r3, [sp, #28]
 800b586:	454b      	cmp	r3, r9
 800b588:	d307      	bcc.n	800b59a <__cvt+0xb6>
 800b58a:	4630      	mov	r0, r6
 800b58c:	9b07      	ldr	r3, [sp, #28]
 800b58e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b590:	1b9b      	subs	r3, r3, r6
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	b008      	add	sp, #32
 800b596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b59a:	1c59      	adds	r1, r3, #1
 800b59c:	9107      	str	r1, [sp, #28]
 800b59e:	701a      	strb	r2, [r3, #0]
 800b5a0:	e7f0      	b.n	800b584 <__cvt+0xa0>

0800b5a2 <__exponent>:
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	f803 2b02 	strb.w	r2, [r3], #2
 800b5ac:	bfb6      	itet	lt
 800b5ae:	222d      	movlt	r2, #45	; 0x2d
 800b5b0:	222b      	movge	r2, #43	; 0x2b
 800b5b2:	4249      	neglt	r1, r1
 800b5b4:	2909      	cmp	r1, #9
 800b5b6:	7042      	strb	r2, [r0, #1]
 800b5b8:	dd2b      	ble.n	800b612 <__exponent+0x70>
 800b5ba:	f10d 0407 	add.w	r4, sp, #7
 800b5be:	46a4      	mov	ip, r4
 800b5c0:	270a      	movs	r7, #10
 800b5c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5c6:	460a      	mov	r2, r1
 800b5c8:	46a6      	mov	lr, r4
 800b5ca:	fb07 1516 	mls	r5, r7, r6, r1
 800b5ce:	2a63      	cmp	r2, #99	; 0x63
 800b5d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5de:	dcf0      	bgt.n	800b5c2 <__exponent+0x20>
 800b5e0:	3130      	adds	r1, #48	; 0x30
 800b5e2:	f1ae 0502 	sub.w	r5, lr, #2
 800b5e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	1c44      	adds	r4, r0, #1
 800b5ee:	4561      	cmp	r1, ip
 800b5f0:	d30a      	bcc.n	800b608 <__exponent+0x66>
 800b5f2:	f10d 0209 	add.w	r2, sp, #9
 800b5f6:	eba2 020e 	sub.w	r2, r2, lr
 800b5fa:	4565      	cmp	r5, ip
 800b5fc:	bf88      	it	hi
 800b5fe:	2200      	movhi	r2, #0
 800b600:	4413      	add	r3, r2
 800b602:	1a18      	subs	r0, r3, r0
 800b604:	b003      	add	sp, #12
 800b606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b608:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b60c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b610:	e7ed      	b.n	800b5ee <__exponent+0x4c>
 800b612:	2330      	movs	r3, #48	; 0x30
 800b614:	3130      	adds	r1, #48	; 0x30
 800b616:	7083      	strb	r3, [r0, #2]
 800b618:	70c1      	strb	r1, [r0, #3]
 800b61a:	1d03      	adds	r3, r0, #4
 800b61c:	e7f1      	b.n	800b602 <__exponent+0x60>
	...

0800b620 <_printf_float>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	b091      	sub	sp, #68	; 0x44
 800b626:	460c      	mov	r4, r1
 800b628:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b62c:	4616      	mov	r6, r2
 800b62e:	461f      	mov	r7, r3
 800b630:	4605      	mov	r5, r0
 800b632:	f002 fec9 	bl	800e3c8 <_localeconv_r>
 800b636:	6803      	ldr	r3, [r0, #0]
 800b638:	4618      	mov	r0, r3
 800b63a:	9309      	str	r3, [sp, #36]	; 0x24
 800b63c:	f7f4 fdf4 	bl	8000228 <strlen>
 800b640:	2300      	movs	r3, #0
 800b642:	930e      	str	r3, [sp, #56]	; 0x38
 800b644:	f8d8 3000 	ldr.w	r3, [r8]
 800b648:	900a      	str	r0, [sp, #40]	; 0x28
 800b64a:	3307      	adds	r3, #7
 800b64c:	f023 0307 	bic.w	r3, r3, #7
 800b650:	f103 0208 	add.w	r2, r3, #8
 800b654:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b658:	f8d4 b000 	ldr.w	fp, [r4]
 800b65c:	f8c8 2000 	str.w	r2, [r8]
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b668:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b66c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b670:	930b      	str	r3, [sp, #44]	; 0x2c
 800b672:	f04f 32ff 	mov.w	r2, #4294967295
 800b676:	4640      	mov	r0, r8
 800b678:	4b9c      	ldr	r3, [pc, #624]	; (800b8ec <_printf_float+0x2cc>)
 800b67a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b67c:	f7f5 fa32 	bl	8000ae4 <__aeabi_dcmpun>
 800b680:	bb70      	cbnz	r0, 800b6e0 <_printf_float+0xc0>
 800b682:	f04f 32ff 	mov.w	r2, #4294967295
 800b686:	4640      	mov	r0, r8
 800b688:	4b98      	ldr	r3, [pc, #608]	; (800b8ec <_printf_float+0x2cc>)
 800b68a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b68c:	f7f5 fa0c 	bl	8000aa8 <__aeabi_dcmple>
 800b690:	bb30      	cbnz	r0, 800b6e0 <_printf_float+0xc0>
 800b692:	2200      	movs	r2, #0
 800b694:	2300      	movs	r3, #0
 800b696:	4640      	mov	r0, r8
 800b698:	4651      	mov	r1, sl
 800b69a:	f7f5 f9fb 	bl	8000a94 <__aeabi_dcmplt>
 800b69e:	b110      	cbz	r0, 800b6a6 <_printf_float+0x86>
 800b6a0:	232d      	movs	r3, #45	; 0x2d
 800b6a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6a6:	4b92      	ldr	r3, [pc, #584]	; (800b8f0 <_printf_float+0x2d0>)
 800b6a8:	4892      	ldr	r0, [pc, #584]	; (800b8f4 <_printf_float+0x2d4>)
 800b6aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b6ae:	bf94      	ite	ls
 800b6b0:	4698      	movls	r8, r3
 800b6b2:	4680      	movhi	r8, r0
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	f04f 0a00 	mov.w	sl, #0
 800b6ba:	6123      	str	r3, [r4, #16]
 800b6bc:	f02b 0304 	bic.w	r3, fp, #4
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	4633      	mov	r3, r6
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	9700      	str	r7, [sp, #0]
 800b6ca:	aa0f      	add	r2, sp, #60	; 0x3c
 800b6cc:	f000 f9d4 	bl	800ba78 <_printf_common>
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f040 8090 	bne.w	800b7f6 <_printf_float+0x1d6>
 800b6d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6da:	b011      	add	sp, #68	; 0x44
 800b6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e0:	4642      	mov	r2, r8
 800b6e2:	4653      	mov	r3, sl
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	4651      	mov	r1, sl
 800b6e8:	f7f5 f9fc 	bl	8000ae4 <__aeabi_dcmpun>
 800b6ec:	b148      	cbz	r0, 800b702 <_printf_float+0xe2>
 800b6ee:	f1ba 0f00 	cmp.w	sl, #0
 800b6f2:	bfb8      	it	lt
 800b6f4:	232d      	movlt	r3, #45	; 0x2d
 800b6f6:	4880      	ldr	r0, [pc, #512]	; (800b8f8 <_printf_float+0x2d8>)
 800b6f8:	bfb8      	it	lt
 800b6fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6fe:	4b7f      	ldr	r3, [pc, #508]	; (800b8fc <_printf_float+0x2dc>)
 800b700:	e7d3      	b.n	800b6aa <_printf_float+0x8a>
 800b702:	6863      	ldr	r3, [r4, #4]
 800b704:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	d142      	bne.n	800b792 <_printf_float+0x172>
 800b70c:	2306      	movs	r3, #6
 800b70e:	6063      	str	r3, [r4, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	9206      	str	r2, [sp, #24]
 800b714:	aa0e      	add	r2, sp, #56	; 0x38
 800b716:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b71a:	aa0d      	add	r2, sp, #52	; 0x34
 800b71c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b720:	9203      	str	r2, [sp, #12]
 800b722:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b726:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b72a:	6023      	str	r3, [r4, #0]
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	4642      	mov	r2, r8
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	4628      	mov	r0, r5
 800b734:	4653      	mov	r3, sl
 800b736:	910b      	str	r1, [sp, #44]	; 0x2c
 800b738:	f7ff fed4 	bl	800b4e4 <__cvt>
 800b73c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b73e:	4680      	mov	r8, r0
 800b740:	2947      	cmp	r1, #71	; 0x47
 800b742:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b744:	d108      	bne.n	800b758 <_printf_float+0x138>
 800b746:	1cc8      	adds	r0, r1, #3
 800b748:	db02      	blt.n	800b750 <_printf_float+0x130>
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	4299      	cmp	r1, r3
 800b74e:	dd40      	ble.n	800b7d2 <_printf_float+0x1b2>
 800b750:	f1a9 0902 	sub.w	r9, r9, #2
 800b754:	fa5f f989 	uxtb.w	r9, r9
 800b758:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b75c:	d81f      	bhi.n	800b79e <_printf_float+0x17e>
 800b75e:	464a      	mov	r2, r9
 800b760:	3901      	subs	r1, #1
 800b762:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b766:	910d      	str	r1, [sp, #52]	; 0x34
 800b768:	f7ff ff1b 	bl	800b5a2 <__exponent>
 800b76c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b76e:	4682      	mov	sl, r0
 800b770:	1813      	adds	r3, r2, r0
 800b772:	2a01      	cmp	r2, #1
 800b774:	6123      	str	r3, [r4, #16]
 800b776:	dc02      	bgt.n	800b77e <_printf_float+0x15e>
 800b778:	6822      	ldr	r2, [r4, #0]
 800b77a:	07d2      	lsls	r2, r2, #31
 800b77c:	d501      	bpl.n	800b782 <_printf_float+0x162>
 800b77e:	3301      	adds	r3, #1
 800b780:	6123      	str	r3, [r4, #16]
 800b782:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b786:	2b00      	cmp	r3, #0
 800b788:	d09b      	beq.n	800b6c2 <_printf_float+0xa2>
 800b78a:	232d      	movs	r3, #45	; 0x2d
 800b78c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b790:	e797      	b.n	800b6c2 <_printf_float+0xa2>
 800b792:	2947      	cmp	r1, #71	; 0x47
 800b794:	d1bc      	bne.n	800b710 <_printf_float+0xf0>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1ba      	bne.n	800b710 <_printf_float+0xf0>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e7b7      	b.n	800b70e <_printf_float+0xee>
 800b79e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b7a2:	d118      	bne.n	800b7d6 <_printf_float+0x1b6>
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	6863      	ldr	r3, [r4, #4]
 800b7a8:	dd0b      	ble.n	800b7c2 <_printf_float+0x1a2>
 800b7aa:	6121      	str	r1, [r4, #16]
 800b7ac:	b913      	cbnz	r3, 800b7b4 <_printf_float+0x194>
 800b7ae:	6822      	ldr	r2, [r4, #0]
 800b7b0:	07d0      	lsls	r0, r2, #31
 800b7b2:	d502      	bpl.n	800b7ba <_printf_float+0x19a>
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	440b      	add	r3, r1
 800b7b8:	6123      	str	r3, [r4, #16]
 800b7ba:	f04f 0a00 	mov.w	sl, #0
 800b7be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7c0:	e7df      	b.n	800b782 <_printf_float+0x162>
 800b7c2:	b913      	cbnz	r3, 800b7ca <_printf_float+0x1aa>
 800b7c4:	6822      	ldr	r2, [r4, #0]
 800b7c6:	07d2      	lsls	r2, r2, #31
 800b7c8:	d501      	bpl.n	800b7ce <_printf_float+0x1ae>
 800b7ca:	3302      	adds	r3, #2
 800b7cc:	e7f4      	b.n	800b7b8 <_printf_float+0x198>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e7f2      	b.n	800b7b8 <_printf_float+0x198>
 800b7d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b7d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7d8:	4299      	cmp	r1, r3
 800b7da:	db05      	blt.n	800b7e8 <_printf_float+0x1c8>
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	6121      	str	r1, [r4, #16]
 800b7e0:	07d8      	lsls	r0, r3, #31
 800b7e2:	d5ea      	bpl.n	800b7ba <_printf_float+0x19a>
 800b7e4:	1c4b      	adds	r3, r1, #1
 800b7e6:	e7e7      	b.n	800b7b8 <_printf_float+0x198>
 800b7e8:	2900      	cmp	r1, #0
 800b7ea:	bfcc      	ite	gt
 800b7ec:	2201      	movgt	r2, #1
 800b7ee:	f1c1 0202 	rsble	r2, r1, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	e7e0      	b.n	800b7b8 <_printf_float+0x198>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	055a      	lsls	r2, r3, #21
 800b7fa:	d407      	bmi.n	800b80c <_printf_float+0x1ec>
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	4642      	mov	r2, r8
 800b800:	4631      	mov	r1, r6
 800b802:	4628      	mov	r0, r5
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	d12b      	bne.n	800b862 <_printf_float+0x242>
 800b80a:	e764      	b.n	800b6d6 <_printf_float+0xb6>
 800b80c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b810:	f240 80dd 	bls.w	800b9ce <_printf_float+0x3ae>
 800b814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b818:	2200      	movs	r2, #0
 800b81a:	2300      	movs	r3, #0
 800b81c:	f7f5 f930 	bl	8000a80 <__aeabi_dcmpeq>
 800b820:	2800      	cmp	r0, #0
 800b822:	d033      	beq.n	800b88c <_printf_float+0x26c>
 800b824:	2301      	movs	r3, #1
 800b826:	4631      	mov	r1, r6
 800b828:	4628      	mov	r0, r5
 800b82a:	4a35      	ldr	r2, [pc, #212]	; (800b900 <_printf_float+0x2e0>)
 800b82c:	47b8      	blx	r7
 800b82e:	3001      	adds	r0, #1
 800b830:	f43f af51 	beq.w	800b6d6 <_printf_float+0xb6>
 800b834:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b838:	429a      	cmp	r2, r3
 800b83a:	db02      	blt.n	800b842 <_printf_float+0x222>
 800b83c:	6823      	ldr	r3, [r4, #0]
 800b83e:	07d8      	lsls	r0, r3, #31
 800b840:	d50f      	bpl.n	800b862 <_printf_float+0x242>
 800b842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b846:	4631      	mov	r1, r6
 800b848:	4628      	mov	r0, r5
 800b84a:	47b8      	blx	r7
 800b84c:	3001      	adds	r0, #1
 800b84e:	f43f af42 	beq.w	800b6d6 <_printf_float+0xb6>
 800b852:	f04f 0800 	mov.w	r8, #0
 800b856:	f104 091a 	add.w	r9, r4, #26
 800b85a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b85c:	3b01      	subs	r3, #1
 800b85e:	4543      	cmp	r3, r8
 800b860:	dc09      	bgt.n	800b876 <_printf_float+0x256>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	079b      	lsls	r3, r3, #30
 800b866:	f100 8102 	bmi.w	800ba6e <_printf_float+0x44e>
 800b86a:	68e0      	ldr	r0, [r4, #12]
 800b86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b86e:	4298      	cmp	r0, r3
 800b870:	bfb8      	it	lt
 800b872:	4618      	movlt	r0, r3
 800b874:	e731      	b.n	800b6da <_printf_float+0xba>
 800b876:	2301      	movs	r3, #1
 800b878:	464a      	mov	r2, r9
 800b87a:	4631      	mov	r1, r6
 800b87c:	4628      	mov	r0, r5
 800b87e:	47b8      	blx	r7
 800b880:	3001      	adds	r0, #1
 800b882:	f43f af28 	beq.w	800b6d6 <_printf_float+0xb6>
 800b886:	f108 0801 	add.w	r8, r8, #1
 800b88a:	e7e6      	b.n	800b85a <_printf_float+0x23a>
 800b88c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b88e:	2b00      	cmp	r3, #0
 800b890:	dc38      	bgt.n	800b904 <_printf_float+0x2e4>
 800b892:	2301      	movs	r3, #1
 800b894:	4631      	mov	r1, r6
 800b896:	4628      	mov	r0, r5
 800b898:	4a19      	ldr	r2, [pc, #100]	; (800b900 <_printf_float+0x2e0>)
 800b89a:	47b8      	blx	r7
 800b89c:	3001      	adds	r0, #1
 800b89e:	f43f af1a 	beq.w	800b6d6 <_printf_float+0xb6>
 800b8a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	d102      	bne.n	800b8b0 <_printf_float+0x290>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	07d9      	lsls	r1, r3, #31
 800b8ae:	d5d8      	bpl.n	800b862 <_printf_float+0x242>
 800b8b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	47b8      	blx	r7
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	f43f af0b 	beq.w	800b6d6 <_printf_float+0xb6>
 800b8c0:	f04f 0900 	mov.w	r9, #0
 800b8c4:	f104 0a1a 	add.w	sl, r4, #26
 800b8c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ca:	425b      	negs	r3, r3
 800b8cc:	454b      	cmp	r3, r9
 800b8ce:	dc01      	bgt.n	800b8d4 <_printf_float+0x2b4>
 800b8d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8d2:	e794      	b.n	800b7fe <_printf_float+0x1de>
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	4652      	mov	r2, sl
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47b8      	blx	r7
 800b8de:	3001      	adds	r0, #1
 800b8e0:	f43f aef9 	beq.w	800b6d6 <_printf_float+0xb6>
 800b8e4:	f109 0901 	add.w	r9, r9, #1
 800b8e8:	e7ee      	b.n	800b8c8 <_printf_float+0x2a8>
 800b8ea:	bf00      	nop
 800b8ec:	7fefffff 	.word	0x7fefffff
 800b8f0:	08010548 	.word	0x08010548
 800b8f4:	0801054c 	.word	0x0801054c
 800b8f8:	08010554 	.word	0x08010554
 800b8fc:	08010550 	.word	0x08010550
 800b900:	08010558 	.word	0x08010558
 800b904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b906:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b908:	429a      	cmp	r2, r3
 800b90a:	bfa8      	it	ge
 800b90c:	461a      	movge	r2, r3
 800b90e:	2a00      	cmp	r2, #0
 800b910:	4691      	mov	r9, r2
 800b912:	dc37      	bgt.n	800b984 <_printf_float+0x364>
 800b914:	f04f 0b00 	mov.w	fp, #0
 800b918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b91c:	f104 021a 	add.w	r2, r4, #26
 800b920:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b924:	ebaa 0309 	sub.w	r3, sl, r9
 800b928:	455b      	cmp	r3, fp
 800b92a:	dc33      	bgt.n	800b994 <_printf_float+0x374>
 800b92c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b930:	429a      	cmp	r2, r3
 800b932:	db3b      	blt.n	800b9ac <_printf_float+0x38c>
 800b934:	6823      	ldr	r3, [r4, #0]
 800b936:	07da      	lsls	r2, r3, #31
 800b938:	d438      	bmi.n	800b9ac <_printf_float+0x38c>
 800b93a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b93c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b93e:	eba2 030a 	sub.w	r3, r2, sl
 800b942:	eba2 0901 	sub.w	r9, r2, r1
 800b946:	4599      	cmp	r9, r3
 800b948:	bfa8      	it	ge
 800b94a:	4699      	movge	r9, r3
 800b94c:	f1b9 0f00 	cmp.w	r9, #0
 800b950:	dc34      	bgt.n	800b9bc <_printf_float+0x39c>
 800b952:	f04f 0800 	mov.w	r8, #0
 800b956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b95a:	f104 0a1a 	add.w	sl, r4, #26
 800b95e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b962:	1a9b      	subs	r3, r3, r2
 800b964:	eba3 0309 	sub.w	r3, r3, r9
 800b968:	4543      	cmp	r3, r8
 800b96a:	f77f af7a 	ble.w	800b862 <_printf_float+0x242>
 800b96e:	2301      	movs	r3, #1
 800b970:	4652      	mov	r2, sl
 800b972:	4631      	mov	r1, r6
 800b974:	4628      	mov	r0, r5
 800b976:	47b8      	blx	r7
 800b978:	3001      	adds	r0, #1
 800b97a:	f43f aeac 	beq.w	800b6d6 <_printf_float+0xb6>
 800b97e:	f108 0801 	add.w	r8, r8, #1
 800b982:	e7ec      	b.n	800b95e <_printf_float+0x33e>
 800b984:	4613      	mov	r3, r2
 800b986:	4631      	mov	r1, r6
 800b988:	4642      	mov	r2, r8
 800b98a:	4628      	mov	r0, r5
 800b98c:	47b8      	blx	r7
 800b98e:	3001      	adds	r0, #1
 800b990:	d1c0      	bne.n	800b914 <_printf_float+0x2f4>
 800b992:	e6a0      	b.n	800b6d6 <_printf_float+0xb6>
 800b994:	2301      	movs	r3, #1
 800b996:	4631      	mov	r1, r6
 800b998:	4628      	mov	r0, r5
 800b99a:	920b      	str	r2, [sp, #44]	; 0x2c
 800b99c:	47b8      	blx	r7
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f43f ae99 	beq.w	800b6d6 <_printf_float+0xb6>
 800b9a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9a6:	f10b 0b01 	add.w	fp, fp, #1
 800b9aa:	e7b9      	b.n	800b920 <_printf_float+0x300>
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	47b8      	blx	r7
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d1bf      	bne.n	800b93a <_printf_float+0x31a>
 800b9ba:	e68c      	b.n	800b6d6 <_printf_float+0xb6>
 800b9bc:	464b      	mov	r3, r9
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	eb08 020a 	add.w	r2, r8, sl
 800b9c6:	47b8      	blx	r7
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d1c2      	bne.n	800b952 <_printf_float+0x332>
 800b9cc:	e683      	b.n	800b6d6 <_printf_float+0xb6>
 800b9ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9d0:	2a01      	cmp	r2, #1
 800b9d2:	dc01      	bgt.n	800b9d8 <_printf_float+0x3b8>
 800b9d4:	07db      	lsls	r3, r3, #31
 800b9d6:	d537      	bpl.n	800ba48 <_printf_float+0x428>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	4642      	mov	r2, r8
 800b9dc:	4631      	mov	r1, r6
 800b9de:	4628      	mov	r0, r5
 800b9e0:	47b8      	blx	r7
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	f43f ae77 	beq.w	800b6d6 <_printf_float+0xb6>
 800b9e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9ec:	4631      	mov	r1, r6
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	47b8      	blx	r7
 800b9f2:	3001      	adds	r0, #1
 800b9f4:	f43f ae6f 	beq.w	800b6d6 <_printf_float+0xb6>
 800b9f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f7f5 f83e 	bl	8000a80 <__aeabi_dcmpeq>
 800ba04:	b9d8      	cbnz	r0, 800ba3e <_printf_float+0x41e>
 800ba06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba08:	f108 0201 	add.w	r2, r8, #1
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4628      	mov	r0, r5
 800ba12:	47b8      	blx	r7
 800ba14:	3001      	adds	r0, #1
 800ba16:	d10e      	bne.n	800ba36 <_printf_float+0x416>
 800ba18:	e65d      	b.n	800b6d6 <_printf_float+0xb6>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	464a      	mov	r2, r9
 800ba1e:	4631      	mov	r1, r6
 800ba20:	4628      	mov	r0, r5
 800ba22:	47b8      	blx	r7
 800ba24:	3001      	adds	r0, #1
 800ba26:	f43f ae56 	beq.w	800b6d6 <_printf_float+0xb6>
 800ba2a:	f108 0801 	add.w	r8, r8, #1
 800ba2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba30:	3b01      	subs	r3, #1
 800ba32:	4543      	cmp	r3, r8
 800ba34:	dcf1      	bgt.n	800ba1a <_printf_float+0x3fa>
 800ba36:	4653      	mov	r3, sl
 800ba38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba3c:	e6e0      	b.n	800b800 <_printf_float+0x1e0>
 800ba3e:	f04f 0800 	mov.w	r8, #0
 800ba42:	f104 091a 	add.w	r9, r4, #26
 800ba46:	e7f2      	b.n	800ba2e <_printf_float+0x40e>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	4642      	mov	r2, r8
 800ba4c:	e7df      	b.n	800ba0e <_printf_float+0x3ee>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	464a      	mov	r2, r9
 800ba52:	4631      	mov	r1, r6
 800ba54:	4628      	mov	r0, r5
 800ba56:	47b8      	blx	r7
 800ba58:	3001      	adds	r0, #1
 800ba5a:	f43f ae3c 	beq.w	800b6d6 <_printf_float+0xb6>
 800ba5e:	f108 0801 	add.w	r8, r8, #1
 800ba62:	68e3      	ldr	r3, [r4, #12]
 800ba64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba66:	1a5b      	subs	r3, r3, r1
 800ba68:	4543      	cmp	r3, r8
 800ba6a:	dcf0      	bgt.n	800ba4e <_printf_float+0x42e>
 800ba6c:	e6fd      	b.n	800b86a <_printf_float+0x24a>
 800ba6e:	f04f 0800 	mov.w	r8, #0
 800ba72:	f104 0919 	add.w	r9, r4, #25
 800ba76:	e7f4      	b.n	800ba62 <_printf_float+0x442>

0800ba78 <_printf_common>:
 800ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7c:	4616      	mov	r6, r2
 800ba7e:	4699      	mov	r9, r3
 800ba80:	688a      	ldr	r2, [r1, #8]
 800ba82:	690b      	ldr	r3, [r1, #16]
 800ba84:	4607      	mov	r7, r0
 800ba86:	4293      	cmp	r3, r2
 800ba88:	bfb8      	it	lt
 800ba8a:	4613      	movlt	r3, r2
 800ba8c:	6033      	str	r3, [r6, #0]
 800ba8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba92:	460c      	mov	r4, r1
 800ba94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba98:	b10a      	cbz	r2, 800ba9e <_printf_common+0x26>
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	6033      	str	r3, [r6, #0]
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	0699      	lsls	r1, r3, #26
 800baa2:	bf42      	ittt	mi
 800baa4:	6833      	ldrmi	r3, [r6, #0]
 800baa6:	3302      	addmi	r3, #2
 800baa8:	6033      	strmi	r3, [r6, #0]
 800baaa:	6825      	ldr	r5, [r4, #0]
 800baac:	f015 0506 	ands.w	r5, r5, #6
 800bab0:	d106      	bne.n	800bac0 <_printf_common+0x48>
 800bab2:	f104 0a19 	add.w	sl, r4, #25
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	6832      	ldr	r2, [r6, #0]
 800baba:	1a9b      	subs	r3, r3, r2
 800babc:	42ab      	cmp	r3, r5
 800babe:	dc28      	bgt.n	800bb12 <_printf_common+0x9a>
 800bac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bac4:	1e13      	subs	r3, r2, #0
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	bf18      	it	ne
 800baca:	2301      	movne	r3, #1
 800bacc:	0692      	lsls	r2, r2, #26
 800bace:	d42d      	bmi.n	800bb2c <_printf_common+0xb4>
 800bad0:	4649      	mov	r1, r9
 800bad2:	4638      	mov	r0, r7
 800bad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad8:	47c0      	blx	r8
 800bada:	3001      	adds	r0, #1
 800badc:	d020      	beq.n	800bb20 <_printf_common+0xa8>
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	68e5      	ldr	r5, [r4, #12]
 800bae2:	f003 0306 	and.w	r3, r3, #6
 800bae6:	2b04      	cmp	r3, #4
 800bae8:	bf18      	it	ne
 800baea:	2500      	movne	r5, #0
 800baec:	6832      	ldr	r2, [r6, #0]
 800baee:	f04f 0600 	mov.w	r6, #0
 800baf2:	68a3      	ldr	r3, [r4, #8]
 800baf4:	bf08      	it	eq
 800baf6:	1aad      	subeq	r5, r5, r2
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	bf08      	it	eq
 800bafc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb00:	4293      	cmp	r3, r2
 800bb02:	bfc4      	itt	gt
 800bb04:	1a9b      	subgt	r3, r3, r2
 800bb06:	18ed      	addgt	r5, r5, r3
 800bb08:	341a      	adds	r4, #26
 800bb0a:	42b5      	cmp	r5, r6
 800bb0c:	d11a      	bne.n	800bb44 <_printf_common+0xcc>
 800bb0e:	2000      	movs	r0, #0
 800bb10:	e008      	b.n	800bb24 <_printf_common+0xac>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4652      	mov	r2, sl
 800bb16:	4649      	mov	r1, r9
 800bb18:	4638      	mov	r0, r7
 800bb1a:	47c0      	blx	r8
 800bb1c:	3001      	adds	r0, #1
 800bb1e:	d103      	bne.n	800bb28 <_printf_common+0xb0>
 800bb20:	f04f 30ff 	mov.w	r0, #4294967295
 800bb24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb28:	3501      	adds	r5, #1
 800bb2a:	e7c4      	b.n	800bab6 <_printf_common+0x3e>
 800bb2c:	2030      	movs	r0, #48	; 0x30
 800bb2e:	18e1      	adds	r1, r4, r3
 800bb30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb3a:	4422      	add	r2, r4
 800bb3c:	3302      	adds	r3, #2
 800bb3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb42:	e7c5      	b.n	800bad0 <_printf_common+0x58>
 800bb44:	2301      	movs	r3, #1
 800bb46:	4622      	mov	r2, r4
 800bb48:	4649      	mov	r1, r9
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	47c0      	blx	r8
 800bb4e:	3001      	adds	r0, #1
 800bb50:	d0e6      	beq.n	800bb20 <_printf_common+0xa8>
 800bb52:	3601      	adds	r6, #1
 800bb54:	e7d9      	b.n	800bb0a <_printf_common+0x92>
	...

0800bb58 <_printf_i>:
 800bb58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	7e27      	ldrb	r7, [r4, #24]
 800bb60:	4691      	mov	r9, r2
 800bb62:	2f78      	cmp	r7, #120	; 0x78
 800bb64:	4680      	mov	r8, r0
 800bb66:	469a      	mov	sl, r3
 800bb68:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb6e:	d807      	bhi.n	800bb80 <_printf_i+0x28>
 800bb70:	2f62      	cmp	r7, #98	; 0x62
 800bb72:	d80a      	bhi.n	800bb8a <_printf_i+0x32>
 800bb74:	2f00      	cmp	r7, #0
 800bb76:	f000 80d9 	beq.w	800bd2c <_printf_i+0x1d4>
 800bb7a:	2f58      	cmp	r7, #88	; 0x58
 800bb7c:	f000 80a4 	beq.w	800bcc8 <_printf_i+0x170>
 800bb80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb88:	e03a      	b.n	800bc00 <_printf_i+0xa8>
 800bb8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb8e:	2b15      	cmp	r3, #21
 800bb90:	d8f6      	bhi.n	800bb80 <_printf_i+0x28>
 800bb92:	a001      	add	r0, pc, #4	; (adr r0, 800bb98 <_printf_i+0x40>)
 800bb94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb98:	0800bbf1 	.word	0x0800bbf1
 800bb9c:	0800bc05 	.word	0x0800bc05
 800bba0:	0800bb81 	.word	0x0800bb81
 800bba4:	0800bb81 	.word	0x0800bb81
 800bba8:	0800bb81 	.word	0x0800bb81
 800bbac:	0800bb81 	.word	0x0800bb81
 800bbb0:	0800bc05 	.word	0x0800bc05
 800bbb4:	0800bb81 	.word	0x0800bb81
 800bbb8:	0800bb81 	.word	0x0800bb81
 800bbbc:	0800bb81 	.word	0x0800bb81
 800bbc0:	0800bb81 	.word	0x0800bb81
 800bbc4:	0800bd13 	.word	0x0800bd13
 800bbc8:	0800bc35 	.word	0x0800bc35
 800bbcc:	0800bcf5 	.word	0x0800bcf5
 800bbd0:	0800bb81 	.word	0x0800bb81
 800bbd4:	0800bb81 	.word	0x0800bb81
 800bbd8:	0800bd35 	.word	0x0800bd35
 800bbdc:	0800bb81 	.word	0x0800bb81
 800bbe0:	0800bc35 	.word	0x0800bc35
 800bbe4:	0800bb81 	.word	0x0800bb81
 800bbe8:	0800bb81 	.word	0x0800bb81
 800bbec:	0800bcfd 	.word	0x0800bcfd
 800bbf0:	680b      	ldr	r3, [r1, #0]
 800bbf2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbf6:	1d1a      	adds	r2, r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	600a      	str	r2, [r1, #0]
 800bbfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc00:	2301      	movs	r3, #1
 800bc02:	e0a4      	b.n	800bd4e <_printf_i+0x1f6>
 800bc04:	6825      	ldr	r5, [r4, #0]
 800bc06:	6808      	ldr	r0, [r1, #0]
 800bc08:	062e      	lsls	r6, r5, #24
 800bc0a:	f100 0304 	add.w	r3, r0, #4
 800bc0e:	d50a      	bpl.n	800bc26 <_printf_i+0xce>
 800bc10:	6805      	ldr	r5, [r0, #0]
 800bc12:	600b      	str	r3, [r1, #0]
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	da03      	bge.n	800bc20 <_printf_i+0xc8>
 800bc18:	232d      	movs	r3, #45	; 0x2d
 800bc1a:	426d      	negs	r5, r5
 800bc1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc20:	230a      	movs	r3, #10
 800bc22:	485e      	ldr	r0, [pc, #376]	; (800bd9c <_printf_i+0x244>)
 800bc24:	e019      	b.n	800bc5a <_printf_i+0x102>
 800bc26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc2a:	6805      	ldr	r5, [r0, #0]
 800bc2c:	600b      	str	r3, [r1, #0]
 800bc2e:	bf18      	it	ne
 800bc30:	b22d      	sxthne	r5, r5
 800bc32:	e7ef      	b.n	800bc14 <_printf_i+0xbc>
 800bc34:	680b      	ldr	r3, [r1, #0]
 800bc36:	6825      	ldr	r5, [r4, #0]
 800bc38:	1d18      	adds	r0, r3, #4
 800bc3a:	6008      	str	r0, [r1, #0]
 800bc3c:	0628      	lsls	r0, r5, #24
 800bc3e:	d501      	bpl.n	800bc44 <_printf_i+0xec>
 800bc40:	681d      	ldr	r5, [r3, #0]
 800bc42:	e002      	b.n	800bc4a <_printf_i+0xf2>
 800bc44:	0669      	lsls	r1, r5, #25
 800bc46:	d5fb      	bpl.n	800bc40 <_printf_i+0xe8>
 800bc48:	881d      	ldrh	r5, [r3, #0]
 800bc4a:	2f6f      	cmp	r7, #111	; 0x6f
 800bc4c:	bf0c      	ite	eq
 800bc4e:	2308      	moveq	r3, #8
 800bc50:	230a      	movne	r3, #10
 800bc52:	4852      	ldr	r0, [pc, #328]	; (800bd9c <_printf_i+0x244>)
 800bc54:	2100      	movs	r1, #0
 800bc56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc5a:	6866      	ldr	r6, [r4, #4]
 800bc5c:	2e00      	cmp	r6, #0
 800bc5e:	bfa8      	it	ge
 800bc60:	6821      	ldrge	r1, [r4, #0]
 800bc62:	60a6      	str	r6, [r4, #8]
 800bc64:	bfa4      	itt	ge
 800bc66:	f021 0104 	bicge.w	r1, r1, #4
 800bc6a:	6021      	strge	r1, [r4, #0]
 800bc6c:	b90d      	cbnz	r5, 800bc72 <_printf_i+0x11a>
 800bc6e:	2e00      	cmp	r6, #0
 800bc70:	d04d      	beq.n	800bd0e <_printf_i+0x1b6>
 800bc72:	4616      	mov	r6, r2
 800bc74:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc78:	fb03 5711 	mls	r7, r3, r1, r5
 800bc7c:	5dc7      	ldrb	r7, [r0, r7]
 800bc7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc82:	462f      	mov	r7, r5
 800bc84:	42bb      	cmp	r3, r7
 800bc86:	460d      	mov	r5, r1
 800bc88:	d9f4      	bls.n	800bc74 <_printf_i+0x11c>
 800bc8a:	2b08      	cmp	r3, #8
 800bc8c:	d10b      	bne.n	800bca6 <_printf_i+0x14e>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	07df      	lsls	r7, r3, #31
 800bc92:	d508      	bpl.n	800bca6 <_printf_i+0x14e>
 800bc94:	6923      	ldr	r3, [r4, #16]
 800bc96:	6861      	ldr	r1, [r4, #4]
 800bc98:	4299      	cmp	r1, r3
 800bc9a:	bfde      	ittt	le
 800bc9c:	2330      	movle	r3, #48	; 0x30
 800bc9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bca2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bca6:	1b92      	subs	r2, r2, r6
 800bca8:	6122      	str	r2, [r4, #16]
 800bcaa:	464b      	mov	r3, r9
 800bcac:	4621      	mov	r1, r4
 800bcae:	4640      	mov	r0, r8
 800bcb0:	f8cd a000 	str.w	sl, [sp]
 800bcb4:	aa03      	add	r2, sp, #12
 800bcb6:	f7ff fedf 	bl	800ba78 <_printf_common>
 800bcba:	3001      	adds	r0, #1
 800bcbc:	d14c      	bne.n	800bd58 <_printf_i+0x200>
 800bcbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc2:	b004      	add	sp, #16
 800bcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc8:	4834      	ldr	r0, [pc, #208]	; (800bd9c <_printf_i+0x244>)
 800bcca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bcce:	680e      	ldr	r6, [r1, #0]
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	f856 5b04 	ldr.w	r5, [r6], #4
 800bcd6:	061f      	lsls	r7, r3, #24
 800bcd8:	600e      	str	r6, [r1, #0]
 800bcda:	d514      	bpl.n	800bd06 <_printf_i+0x1ae>
 800bcdc:	07d9      	lsls	r1, r3, #31
 800bcde:	bf44      	itt	mi
 800bce0:	f043 0320 	orrmi.w	r3, r3, #32
 800bce4:	6023      	strmi	r3, [r4, #0]
 800bce6:	b91d      	cbnz	r5, 800bcf0 <_printf_i+0x198>
 800bce8:	6823      	ldr	r3, [r4, #0]
 800bcea:	f023 0320 	bic.w	r3, r3, #32
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	2310      	movs	r3, #16
 800bcf2:	e7af      	b.n	800bc54 <_printf_i+0xfc>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	f043 0320 	orr.w	r3, r3, #32
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	2378      	movs	r3, #120	; 0x78
 800bcfe:	4828      	ldr	r0, [pc, #160]	; (800bda0 <_printf_i+0x248>)
 800bd00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd04:	e7e3      	b.n	800bcce <_printf_i+0x176>
 800bd06:	065e      	lsls	r6, r3, #25
 800bd08:	bf48      	it	mi
 800bd0a:	b2ad      	uxthmi	r5, r5
 800bd0c:	e7e6      	b.n	800bcdc <_printf_i+0x184>
 800bd0e:	4616      	mov	r6, r2
 800bd10:	e7bb      	b.n	800bc8a <_printf_i+0x132>
 800bd12:	680b      	ldr	r3, [r1, #0]
 800bd14:	6826      	ldr	r6, [r4, #0]
 800bd16:	1d1d      	adds	r5, r3, #4
 800bd18:	6960      	ldr	r0, [r4, #20]
 800bd1a:	600d      	str	r5, [r1, #0]
 800bd1c:	0635      	lsls	r5, r6, #24
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	d501      	bpl.n	800bd26 <_printf_i+0x1ce>
 800bd22:	6018      	str	r0, [r3, #0]
 800bd24:	e002      	b.n	800bd2c <_printf_i+0x1d4>
 800bd26:	0671      	lsls	r1, r6, #25
 800bd28:	d5fb      	bpl.n	800bd22 <_printf_i+0x1ca>
 800bd2a:	8018      	strh	r0, [r3, #0]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4616      	mov	r6, r2
 800bd30:	6123      	str	r3, [r4, #16]
 800bd32:	e7ba      	b.n	800bcaa <_printf_i+0x152>
 800bd34:	680b      	ldr	r3, [r1, #0]
 800bd36:	1d1a      	adds	r2, r3, #4
 800bd38:	600a      	str	r2, [r1, #0]
 800bd3a:	681e      	ldr	r6, [r3, #0]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4630      	mov	r0, r6
 800bd40:	6862      	ldr	r2, [r4, #4]
 800bd42:	f002 fb57 	bl	800e3f4 <memchr>
 800bd46:	b108      	cbz	r0, 800bd4c <_printf_i+0x1f4>
 800bd48:	1b80      	subs	r0, r0, r6
 800bd4a:	6060      	str	r0, [r4, #4]
 800bd4c:	6863      	ldr	r3, [r4, #4]
 800bd4e:	6123      	str	r3, [r4, #16]
 800bd50:	2300      	movs	r3, #0
 800bd52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd56:	e7a8      	b.n	800bcaa <_printf_i+0x152>
 800bd58:	4632      	mov	r2, r6
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	47d0      	blx	sl
 800bd62:	3001      	adds	r0, #1
 800bd64:	d0ab      	beq.n	800bcbe <_printf_i+0x166>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	079b      	lsls	r3, r3, #30
 800bd6a:	d413      	bmi.n	800bd94 <_printf_i+0x23c>
 800bd6c:	68e0      	ldr	r0, [r4, #12]
 800bd6e:	9b03      	ldr	r3, [sp, #12]
 800bd70:	4298      	cmp	r0, r3
 800bd72:	bfb8      	it	lt
 800bd74:	4618      	movlt	r0, r3
 800bd76:	e7a4      	b.n	800bcc2 <_printf_i+0x16a>
 800bd78:	2301      	movs	r3, #1
 800bd7a:	4632      	mov	r2, r6
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	4640      	mov	r0, r8
 800bd80:	47d0      	blx	sl
 800bd82:	3001      	adds	r0, #1
 800bd84:	d09b      	beq.n	800bcbe <_printf_i+0x166>
 800bd86:	3501      	adds	r5, #1
 800bd88:	68e3      	ldr	r3, [r4, #12]
 800bd8a:	9903      	ldr	r1, [sp, #12]
 800bd8c:	1a5b      	subs	r3, r3, r1
 800bd8e:	42ab      	cmp	r3, r5
 800bd90:	dcf2      	bgt.n	800bd78 <_printf_i+0x220>
 800bd92:	e7eb      	b.n	800bd6c <_printf_i+0x214>
 800bd94:	2500      	movs	r5, #0
 800bd96:	f104 0619 	add.w	r6, r4, #25
 800bd9a:	e7f5      	b.n	800bd88 <_printf_i+0x230>
 800bd9c:	0801055a 	.word	0x0801055a
 800bda0:	0801056b 	.word	0x0801056b

0800bda4 <_scanf_float>:
 800bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	b087      	sub	sp, #28
 800bdaa:	9303      	str	r3, [sp, #12]
 800bdac:	688b      	ldr	r3, [r1, #8]
 800bdae:	4617      	mov	r7, r2
 800bdb0:	1e5a      	subs	r2, r3, #1
 800bdb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdb6:	bf85      	ittet	hi
 800bdb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bdbc:	195b      	addhi	r3, r3, r5
 800bdbe:	2300      	movls	r3, #0
 800bdc0:	9302      	strhi	r3, [sp, #8]
 800bdc2:	bf88      	it	hi
 800bdc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bdc8:	468b      	mov	fp, r1
 800bdca:	f04f 0500 	mov.w	r5, #0
 800bdce:	bf8c      	ite	hi
 800bdd0:	608b      	strhi	r3, [r1, #8]
 800bdd2:	9302      	strls	r3, [sp, #8]
 800bdd4:	680b      	ldr	r3, [r1, #0]
 800bdd6:	4680      	mov	r8, r0
 800bdd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bddc:	f84b 3b1c 	str.w	r3, [fp], #28
 800bde0:	460c      	mov	r4, r1
 800bde2:	465e      	mov	r6, fp
 800bde4:	46aa      	mov	sl, r5
 800bde6:	46a9      	mov	r9, r5
 800bde8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bdec:	9501      	str	r5, [sp, #4]
 800bdee:	68a2      	ldr	r2, [r4, #8]
 800bdf0:	b152      	cbz	r2, 800be08 <_scanf_float+0x64>
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b4e      	cmp	r3, #78	; 0x4e
 800bdf8:	d864      	bhi.n	800bec4 <_scanf_float+0x120>
 800bdfa:	2b40      	cmp	r3, #64	; 0x40
 800bdfc:	d83c      	bhi.n	800be78 <_scanf_float+0xd4>
 800bdfe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800be02:	b2c8      	uxtb	r0, r1
 800be04:	280e      	cmp	r0, #14
 800be06:	d93a      	bls.n	800be7e <_scanf_float+0xda>
 800be08:	f1b9 0f00 	cmp.w	r9, #0
 800be0c:	d003      	beq.n	800be16 <_scanf_float+0x72>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be14:	6023      	str	r3, [r4, #0]
 800be16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be1a:	f1ba 0f01 	cmp.w	sl, #1
 800be1e:	f200 8113 	bhi.w	800c048 <_scanf_float+0x2a4>
 800be22:	455e      	cmp	r6, fp
 800be24:	f200 8105 	bhi.w	800c032 <_scanf_float+0x28e>
 800be28:	2501      	movs	r5, #1
 800be2a:	4628      	mov	r0, r5
 800be2c:	b007      	add	sp, #28
 800be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800be36:	2a0d      	cmp	r2, #13
 800be38:	d8e6      	bhi.n	800be08 <_scanf_float+0x64>
 800be3a:	a101      	add	r1, pc, #4	; (adr r1, 800be40 <_scanf_float+0x9c>)
 800be3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be40:	0800bf7f 	.word	0x0800bf7f
 800be44:	0800be09 	.word	0x0800be09
 800be48:	0800be09 	.word	0x0800be09
 800be4c:	0800be09 	.word	0x0800be09
 800be50:	0800bfdf 	.word	0x0800bfdf
 800be54:	0800bfb7 	.word	0x0800bfb7
 800be58:	0800be09 	.word	0x0800be09
 800be5c:	0800be09 	.word	0x0800be09
 800be60:	0800bf8d 	.word	0x0800bf8d
 800be64:	0800be09 	.word	0x0800be09
 800be68:	0800be09 	.word	0x0800be09
 800be6c:	0800be09 	.word	0x0800be09
 800be70:	0800be09 	.word	0x0800be09
 800be74:	0800bf45 	.word	0x0800bf45
 800be78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800be7c:	e7db      	b.n	800be36 <_scanf_float+0x92>
 800be7e:	290e      	cmp	r1, #14
 800be80:	d8c2      	bhi.n	800be08 <_scanf_float+0x64>
 800be82:	a001      	add	r0, pc, #4	; (adr r0, 800be88 <_scanf_float+0xe4>)
 800be84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be88:	0800bf37 	.word	0x0800bf37
 800be8c:	0800be09 	.word	0x0800be09
 800be90:	0800bf37 	.word	0x0800bf37
 800be94:	0800bfcb 	.word	0x0800bfcb
 800be98:	0800be09 	.word	0x0800be09
 800be9c:	0800bee5 	.word	0x0800bee5
 800bea0:	0800bf21 	.word	0x0800bf21
 800bea4:	0800bf21 	.word	0x0800bf21
 800bea8:	0800bf21 	.word	0x0800bf21
 800beac:	0800bf21 	.word	0x0800bf21
 800beb0:	0800bf21 	.word	0x0800bf21
 800beb4:	0800bf21 	.word	0x0800bf21
 800beb8:	0800bf21 	.word	0x0800bf21
 800bebc:	0800bf21 	.word	0x0800bf21
 800bec0:	0800bf21 	.word	0x0800bf21
 800bec4:	2b6e      	cmp	r3, #110	; 0x6e
 800bec6:	d809      	bhi.n	800bedc <_scanf_float+0x138>
 800bec8:	2b60      	cmp	r3, #96	; 0x60
 800beca:	d8b2      	bhi.n	800be32 <_scanf_float+0x8e>
 800becc:	2b54      	cmp	r3, #84	; 0x54
 800bece:	d077      	beq.n	800bfc0 <_scanf_float+0x21c>
 800bed0:	2b59      	cmp	r3, #89	; 0x59
 800bed2:	d199      	bne.n	800be08 <_scanf_float+0x64>
 800bed4:	2d07      	cmp	r5, #7
 800bed6:	d197      	bne.n	800be08 <_scanf_float+0x64>
 800bed8:	2508      	movs	r5, #8
 800beda:	e029      	b.n	800bf30 <_scanf_float+0x18c>
 800bedc:	2b74      	cmp	r3, #116	; 0x74
 800bede:	d06f      	beq.n	800bfc0 <_scanf_float+0x21c>
 800bee0:	2b79      	cmp	r3, #121	; 0x79
 800bee2:	e7f6      	b.n	800bed2 <_scanf_float+0x12e>
 800bee4:	6821      	ldr	r1, [r4, #0]
 800bee6:	05c8      	lsls	r0, r1, #23
 800bee8:	d51a      	bpl.n	800bf20 <_scanf_float+0x17c>
 800beea:	9b02      	ldr	r3, [sp, #8]
 800beec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bef0:	6021      	str	r1, [r4, #0]
 800bef2:	f109 0901 	add.w	r9, r9, #1
 800bef6:	b11b      	cbz	r3, 800bf00 <_scanf_float+0x15c>
 800bef8:	3b01      	subs	r3, #1
 800befa:	3201      	adds	r2, #1
 800befc:	9302      	str	r3, [sp, #8]
 800befe:	60a2      	str	r2, [r4, #8]
 800bf00:	68a3      	ldr	r3, [r4, #8]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	60a3      	str	r3, [r4, #8]
 800bf06:	6923      	ldr	r3, [r4, #16]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	6123      	str	r3, [r4, #16]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	607b      	str	r3, [r7, #4]
 800bf14:	f340 8084 	ble.w	800c020 <_scanf_float+0x27c>
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	3301      	adds	r3, #1
 800bf1c:	603b      	str	r3, [r7, #0]
 800bf1e:	e766      	b.n	800bdee <_scanf_float+0x4a>
 800bf20:	eb1a 0f05 	cmn.w	sl, r5
 800bf24:	f47f af70 	bne.w	800be08 <_scanf_float+0x64>
 800bf28:	6822      	ldr	r2, [r4, #0]
 800bf2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bf2e:	6022      	str	r2, [r4, #0]
 800bf30:	f806 3b01 	strb.w	r3, [r6], #1
 800bf34:	e7e4      	b.n	800bf00 <_scanf_float+0x15c>
 800bf36:	6822      	ldr	r2, [r4, #0]
 800bf38:	0610      	lsls	r0, r2, #24
 800bf3a:	f57f af65 	bpl.w	800be08 <_scanf_float+0x64>
 800bf3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf42:	e7f4      	b.n	800bf2e <_scanf_float+0x18a>
 800bf44:	f1ba 0f00 	cmp.w	sl, #0
 800bf48:	d10e      	bne.n	800bf68 <_scanf_float+0x1c4>
 800bf4a:	f1b9 0f00 	cmp.w	r9, #0
 800bf4e:	d10e      	bne.n	800bf6e <_scanf_float+0x1ca>
 800bf50:	6822      	ldr	r2, [r4, #0]
 800bf52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf5a:	d108      	bne.n	800bf6e <_scanf_float+0x1ca>
 800bf5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf60:	f04f 0a01 	mov.w	sl, #1
 800bf64:	6022      	str	r2, [r4, #0]
 800bf66:	e7e3      	b.n	800bf30 <_scanf_float+0x18c>
 800bf68:	f1ba 0f02 	cmp.w	sl, #2
 800bf6c:	d055      	beq.n	800c01a <_scanf_float+0x276>
 800bf6e:	2d01      	cmp	r5, #1
 800bf70:	d002      	beq.n	800bf78 <_scanf_float+0x1d4>
 800bf72:	2d04      	cmp	r5, #4
 800bf74:	f47f af48 	bne.w	800be08 <_scanf_float+0x64>
 800bf78:	3501      	adds	r5, #1
 800bf7a:	b2ed      	uxtb	r5, r5
 800bf7c:	e7d8      	b.n	800bf30 <_scanf_float+0x18c>
 800bf7e:	f1ba 0f01 	cmp.w	sl, #1
 800bf82:	f47f af41 	bne.w	800be08 <_scanf_float+0x64>
 800bf86:	f04f 0a02 	mov.w	sl, #2
 800bf8a:	e7d1      	b.n	800bf30 <_scanf_float+0x18c>
 800bf8c:	b97d      	cbnz	r5, 800bfae <_scanf_float+0x20a>
 800bf8e:	f1b9 0f00 	cmp.w	r9, #0
 800bf92:	f47f af3c 	bne.w	800be0e <_scanf_float+0x6a>
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bfa0:	f47f af39 	bne.w	800be16 <_scanf_float+0x72>
 800bfa4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bfa8:	2501      	movs	r5, #1
 800bfaa:	6022      	str	r2, [r4, #0]
 800bfac:	e7c0      	b.n	800bf30 <_scanf_float+0x18c>
 800bfae:	2d03      	cmp	r5, #3
 800bfb0:	d0e2      	beq.n	800bf78 <_scanf_float+0x1d4>
 800bfb2:	2d05      	cmp	r5, #5
 800bfb4:	e7de      	b.n	800bf74 <_scanf_float+0x1d0>
 800bfb6:	2d02      	cmp	r5, #2
 800bfb8:	f47f af26 	bne.w	800be08 <_scanf_float+0x64>
 800bfbc:	2503      	movs	r5, #3
 800bfbe:	e7b7      	b.n	800bf30 <_scanf_float+0x18c>
 800bfc0:	2d06      	cmp	r5, #6
 800bfc2:	f47f af21 	bne.w	800be08 <_scanf_float+0x64>
 800bfc6:	2507      	movs	r5, #7
 800bfc8:	e7b2      	b.n	800bf30 <_scanf_float+0x18c>
 800bfca:	6822      	ldr	r2, [r4, #0]
 800bfcc:	0591      	lsls	r1, r2, #22
 800bfce:	f57f af1b 	bpl.w	800be08 <_scanf_float+0x64>
 800bfd2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bfd6:	6022      	str	r2, [r4, #0]
 800bfd8:	f8cd 9004 	str.w	r9, [sp, #4]
 800bfdc:	e7a8      	b.n	800bf30 <_scanf_float+0x18c>
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bfe4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bfe8:	d006      	beq.n	800bff8 <_scanf_float+0x254>
 800bfea:	0550      	lsls	r0, r2, #21
 800bfec:	f57f af0c 	bpl.w	800be08 <_scanf_float+0x64>
 800bff0:	f1b9 0f00 	cmp.w	r9, #0
 800bff4:	f43f af0f 	beq.w	800be16 <_scanf_float+0x72>
 800bff8:	0591      	lsls	r1, r2, #22
 800bffa:	bf58      	it	pl
 800bffc:	9901      	ldrpl	r1, [sp, #4]
 800bffe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c002:	bf58      	it	pl
 800c004:	eba9 0101 	subpl.w	r1, r9, r1
 800c008:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c00c:	f04f 0900 	mov.w	r9, #0
 800c010:	bf58      	it	pl
 800c012:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c016:	6022      	str	r2, [r4, #0]
 800c018:	e78a      	b.n	800bf30 <_scanf_float+0x18c>
 800c01a:	f04f 0a03 	mov.w	sl, #3
 800c01e:	e787      	b.n	800bf30 <_scanf_float+0x18c>
 800c020:	4639      	mov	r1, r7
 800c022:	4640      	mov	r0, r8
 800c024:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c028:	4798      	blx	r3
 800c02a:	2800      	cmp	r0, #0
 800c02c:	f43f aedf 	beq.w	800bdee <_scanf_float+0x4a>
 800c030:	e6ea      	b.n	800be08 <_scanf_float+0x64>
 800c032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c036:	463a      	mov	r2, r7
 800c038:	4640      	mov	r0, r8
 800c03a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c03e:	4798      	blx	r3
 800c040:	6923      	ldr	r3, [r4, #16]
 800c042:	3b01      	subs	r3, #1
 800c044:	6123      	str	r3, [r4, #16]
 800c046:	e6ec      	b.n	800be22 <_scanf_float+0x7e>
 800c048:	1e6b      	subs	r3, r5, #1
 800c04a:	2b06      	cmp	r3, #6
 800c04c:	d825      	bhi.n	800c09a <_scanf_float+0x2f6>
 800c04e:	2d02      	cmp	r5, #2
 800c050:	d836      	bhi.n	800c0c0 <_scanf_float+0x31c>
 800c052:	455e      	cmp	r6, fp
 800c054:	f67f aee8 	bls.w	800be28 <_scanf_float+0x84>
 800c058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c05c:	463a      	mov	r2, r7
 800c05e:	4640      	mov	r0, r8
 800c060:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c064:	4798      	blx	r3
 800c066:	6923      	ldr	r3, [r4, #16]
 800c068:	3b01      	subs	r3, #1
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	e7f1      	b.n	800c052 <_scanf_float+0x2ae>
 800c06e:	9802      	ldr	r0, [sp, #8]
 800c070:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c074:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c078:	463a      	mov	r2, r7
 800c07a:	9002      	str	r0, [sp, #8]
 800c07c:	4640      	mov	r0, r8
 800c07e:	4798      	blx	r3
 800c080:	6923      	ldr	r3, [r4, #16]
 800c082:	3b01      	subs	r3, #1
 800c084:	6123      	str	r3, [r4, #16]
 800c086:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c08a:	fa5f fa8a 	uxtb.w	sl, sl
 800c08e:	f1ba 0f02 	cmp.w	sl, #2
 800c092:	d1ec      	bne.n	800c06e <_scanf_float+0x2ca>
 800c094:	3d03      	subs	r5, #3
 800c096:	b2ed      	uxtb	r5, r5
 800c098:	1b76      	subs	r6, r6, r5
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	05da      	lsls	r2, r3, #23
 800c09e:	d52f      	bpl.n	800c100 <_scanf_float+0x35c>
 800c0a0:	055b      	lsls	r3, r3, #21
 800c0a2:	d510      	bpl.n	800c0c6 <_scanf_float+0x322>
 800c0a4:	455e      	cmp	r6, fp
 800c0a6:	f67f aebf 	bls.w	800be28 <_scanf_float+0x84>
 800c0aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0ae:	463a      	mov	r2, r7
 800c0b0:	4640      	mov	r0, r8
 800c0b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0b6:	4798      	blx	r3
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	6123      	str	r3, [r4, #16]
 800c0be:	e7f1      	b.n	800c0a4 <_scanf_float+0x300>
 800c0c0:	46aa      	mov	sl, r5
 800c0c2:	9602      	str	r6, [sp, #8]
 800c0c4:	e7df      	b.n	800c086 <_scanf_float+0x2e2>
 800c0c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c0ca:	6923      	ldr	r3, [r4, #16]
 800c0cc:	2965      	cmp	r1, #101	; 0x65
 800c0ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800c0d2:	f106 35ff 	add.w	r5, r6, #4294967295
 800c0d6:	6123      	str	r3, [r4, #16]
 800c0d8:	d00c      	beq.n	800c0f4 <_scanf_float+0x350>
 800c0da:	2945      	cmp	r1, #69	; 0x45
 800c0dc:	d00a      	beq.n	800c0f4 <_scanf_float+0x350>
 800c0de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0e2:	463a      	mov	r2, r7
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	4798      	blx	r3
 800c0e8:	6923      	ldr	r3, [r4, #16]
 800c0ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	1eb5      	subs	r5, r6, #2
 800c0f2:	6123      	str	r3, [r4, #16]
 800c0f4:	463a      	mov	r2, r7
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0fc:	4798      	blx	r3
 800c0fe:	462e      	mov	r6, r5
 800c100:	6825      	ldr	r5, [r4, #0]
 800c102:	f015 0510 	ands.w	r5, r5, #16
 800c106:	d159      	bne.n	800c1bc <_scanf_float+0x418>
 800c108:	7035      	strb	r5, [r6, #0]
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c114:	d11c      	bne.n	800c150 <_scanf_float+0x3ac>
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	454b      	cmp	r3, r9
 800c11a:	eba3 0209 	sub.w	r2, r3, r9
 800c11e:	d124      	bne.n	800c16a <_scanf_float+0x3c6>
 800c120:	2200      	movs	r2, #0
 800c122:	4659      	mov	r1, fp
 800c124:	4640      	mov	r0, r8
 800c126:	f000 fe9b 	bl	800ce60 <_strtod_r>
 800c12a:	f8d4 c000 	ldr.w	ip, [r4]
 800c12e:	9b03      	ldr	r3, [sp, #12]
 800c130:	f01c 0f02 	tst.w	ip, #2
 800c134:	4606      	mov	r6, r0
 800c136:	460f      	mov	r7, r1
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	d021      	beq.n	800c180 <_scanf_float+0x3dc>
 800c13c:	9903      	ldr	r1, [sp, #12]
 800c13e:	1d1a      	adds	r2, r3, #4
 800c140:	600a      	str	r2, [r1, #0]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	e9c3 6700 	strd	r6, r7, [r3]
 800c148:	68e3      	ldr	r3, [r4, #12]
 800c14a:	3301      	adds	r3, #1
 800c14c:	60e3      	str	r3, [r4, #12]
 800c14e:	e66c      	b.n	800be2a <_scanf_float+0x86>
 800c150:	9b04      	ldr	r3, [sp, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0e4      	beq.n	800c120 <_scanf_float+0x37c>
 800c156:	9905      	ldr	r1, [sp, #20]
 800c158:	230a      	movs	r3, #10
 800c15a:	462a      	mov	r2, r5
 800c15c:	4640      	mov	r0, r8
 800c15e:	3101      	adds	r1, #1
 800c160:	f000 ff0a 	bl	800cf78 <_strtol_r>
 800c164:	9b04      	ldr	r3, [sp, #16]
 800c166:	9e05      	ldr	r6, [sp, #20]
 800c168:	1ac2      	subs	r2, r0, r3
 800c16a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c16e:	429e      	cmp	r6, r3
 800c170:	bf28      	it	cs
 800c172:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c176:	4630      	mov	r0, r6
 800c178:	4911      	ldr	r1, [pc, #68]	; (800c1c0 <_scanf_float+0x41c>)
 800c17a:	f000 f839 	bl	800c1f0 <siprintf>
 800c17e:	e7cf      	b.n	800c120 <_scanf_float+0x37c>
 800c180:	f01c 0f04 	tst.w	ip, #4
 800c184:	f103 0e04 	add.w	lr, r3, #4
 800c188:	d003      	beq.n	800c192 <_scanf_float+0x3ee>
 800c18a:	9903      	ldr	r1, [sp, #12]
 800c18c:	f8c1 e000 	str.w	lr, [r1]
 800c190:	e7d7      	b.n	800c142 <_scanf_float+0x39e>
 800c192:	9a03      	ldr	r2, [sp, #12]
 800c194:	f8c2 e000 	str.w	lr, [r2]
 800c198:	f8d3 8000 	ldr.w	r8, [r3]
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	f7f4 fca0 	bl	8000ae4 <__aeabi_dcmpun>
 800c1a4:	b128      	cbz	r0, 800c1b2 <_scanf_float+0x40e>
 800c1a6:	4807      	ldr	r0, [pc, #28]	; (800c1c4 <_scanf_float+0x420>)
 800c1a8:	f000 f81e 	bl	800c1e8 <nanf>
 800c1ac:	f8c8 0000 	str.w	r0, [r8]
 800c1b0:	e7ca      	b.n	800c148 <_scanf_float+0x3a4>
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	4639      	mov	r1, r7
 800c1b6:	f7f4 fcf3 	bl	8000ba0 <__aeabi_d2f>
 800c1ba:	e7f7      	b.n	800c1ac <_scanf_float+0x408>
 800c1bc:	2500      	movs	r5, #0
 800c1be:	e634      	b.n	800be2a <_scanf_float+0x86>
 800c1c0:	0801057c 	.word	0x0801057c
 800c1c4:	080108b8 	.word	0x080108b8

0800c1c8 <_sbrk_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	4d05      	ldr	r5, [pc, #20]	; (800c1e4 <_sbrk_r+0x1c>)
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7fa fb52 	bl	800687c <_sbrk>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_sbrk_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_sbrk_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	200008e4 	.word	0x200008e4

0800c1e8 <nanf>:
 800c1e8:	4800      	ldr	r0, [pc, #0]	; (800c1ec <nanf+0x4>)
 800c1ea:	4770      	bx	lr
 800c1ec:	7fc00000 	.word	0x7fc00000

0800c1f0 <siprintf>:
 800c1f0:	b40e      	push	{r1, r2, r3}
 800c1f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1f6:	b500      	push	{lr}
 800c1f8:	b09c      	sub	sp, #112	; 0x70
 800c1fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c1fc:	9002      	str	r0, [sp, #8]
 800c1fe:	9006      	str	r0, [sp, #24]
 800c200:	9107      	str	r1, [sp, #28]
 800c202:	9104      	str	r1, [sp, #16]
 800c204:	4808      	ldr	r0, [pc, #32]	; (800c228 <siprintf+0x38>)
 800c206:	4909      	ldr	r1, [pc, #36]	; (800c22c <siprintf+0x3c>)
 800c208:	f853 2b04 	ldr.w	r2, [r3], #4
 800c20c:	9105      	str	r1, [sp, #20]
 800c20e:	6800      	ldr	r0, [r0, #0]
 800c210:	a902      	add	r1, sp, #8
 800c212:	9301      	str	r3, [sp, #4]
 800c214:	f002 fe38 	bl	800ee88 <_svfiprintf_r>
 800c218:	2200      	movs	r2, #0
 800c21a:	9b02      	ldr	r3, [sp, #8]
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	b01c      	add	sp, #112	; 0x70
 800c220:	f85d eb04 	ldr.w	lr, [sp], #4
 800c224:	b003      	add	sp, #12
 800c226:	4770      	bx	lr
 800c228:	20000048 	.word	0x20000048
 800c22c:	ffff0208 	.word	0xffff0208

0800c230 <sulp>:
 800c230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c234:	460f      	mov	r7, r1
 800c236:	4690      	mov	r8, r2
 800c238:	f002 fc74 	bl	800eb24 <__ulp>
 800c23c:	4604      	mov	r4, r0
 800c23e:	460d      	mov	r5, r1
 800c240:	f1b8 0f00 	cmp.w	r8, #0
 800c244:	d011      	beq.n	800c26a <sulp+0x3a>
 800c246:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c24a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c24e:	2b00      	cmp	r3, #0
 800c250:	dd0b      	ble.n	800c26a <sulp+0x3a>
 800c252:	2400      	movs	r4, #0
 800c254:	051b      	lsls	r3, r3, #20
 800c256:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c25a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c25e:	4622      	mov	r2, r4
 800c260:	462b      	mov	r3, r5
 800c262:	f7f4 f9a5 	bl	80005b0 <__aeabi_dmul>
 800c266:	4604      	mov	r4, r0
 800c268:	460d      	mov	r5, r1
 800c26a:	4620      	mov	r0, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c272:	0000      	movs	r0, r0
 800c274:	0000      	movs	r0, r0
	...

0800c278 <_strtod_l>:
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	469b      	mov	fp, r3
 800c27e:	2300      	movs	r3, #0
 800c280:	b0a1      	sub	sp, #132	; 0x84
 800c282:	931c      	str	r3, [sp, #112]	; 0x70
 800c284:	4ba1      	ldr	r3, [pc, #644]	; (800c50c <_strtod_l+0x294>)
 800c286:	4682      	mov	sl, r0
 800c288:	681f      	ldr	r7, [r3, #0]
 800c28a:	460e      	mov	r6, r1
 800c28c:	4638      	mov	r0, r7
 800c28e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c290:	f7f3 ffca 	bl	8000228 <strlen>
 800c294:	f04f 0800 	mov.w	r8, #0
 800c298:	4604      	mov	r4, r0
 800c29a:	f04f 0900 	mov.w	r9, #0
 800c29e:	961b      	str	r6, [sp, #108]	; 0x6c
 800c2a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c2a2:	781a      	ldrb	r2, [r3, #0]
 800c2a4:	2a2b      	cmp	r2, #43	; 0x2b
 800c2a6:	d04c      	beq.n	800c342 <_strtod_l+0xca>
 800c2a8:	d83a      	bhi.n	800c320 <_strtod_l+0xa8>
 800c2aa:	2a0d      	cmp	r2, #13
 800c2ac:	d833      	bhi.n	800c316 <_strtod_l+0x9e>
 800c2ae:	2a08      	cmp	r2, #8
 800c2b0:	d833      	bhi.n	800c31a <_strtod_l+0xa2>
 800c2b2:	2a00      	cmp	r2, #0
 800c2b4:	d03d      	beq.n	800c332 <_strtod_l+0xba>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	930c      	str	r3, [sp, #48]	; 0x30
 800c2ba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c2bc:	782b      	ldrb	r3, [r5, #0]
 800c2be:	2b30      	cmp	r3, #48	; 0x30
 800c2c0:	f040 80af 	bne.w	800c422 <_strtod_l+0x1aa>
 800c2c4:	786b      	ldrb	r3, [r5, #1]
 800c2c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2ca:	2b58      	cmp	r3, #88	; 0x58
 800c2cc:	d16c      	bne.n	800c3a8 <_strtod_l+0x130>
 800c2ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2d0:	4650      	mov	r0, sl
 800c2d2:	9301      	str	r3, [sp, #4]
 800c2d4:	ab1c      	add	r3, sp, #112	; 0x70
 800c2d6:	9300      	str	r3, [sp, #0]
 800c2d8:	4a8d      	ldr	r2, [pc, #564]	; (800c510 <_strtod_l+0x298>)
 800c2da:	f8cd b008 	str.w	fp, [sp, #8]
 800c2de:	ab1d      	add	r3, sp, #116	; 0x74
 800c2e0:	a91b      	add	r1, sp, #108	; 0x6c
 800c2e2:	f001 fd73 	bl	800ddcc <__gethex>
 800c2e6:	f010 0607 	ands.w	r6, r0, #7
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	d005      	beq.n	800c2fa <_strtod_l+0x82>
 800c2ee:	2e06      	cmp	r6, #6
 800c2f0:	d129      	bne.n	800c346 <_strtod_l+0xce>
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	3501      	adds	r5, #1
 800c2f6:	951b      	str	r5, [sp, #108]	; 0x6c
 800c2f8:	930c      	str	r3, [sp, #48]	; 0x30
 800c2fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f040 8596 	bne.w	800ce2e <_strtod_l+0xbb6>
 800c302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c304:	b1d3      	cbz	r3, 800c33c <_strtod_l+0xc4>
 800c306:	4642      	mov	r2, r8
 800c308:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c30c:	4610      	mov	r0, r2
 800c30e:	4619      	mov	r1, r3
 800c310:	b021      	add	sp, #132	; 0x84
 800c312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c316:	2a20      	cmp	r2, #32
 800c318:	d1cd      	bne.n	800c2b6 <_strtod_l+0x3e>
 800c31a:	3301      	adds	r3, #1
 800c31c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c31e:	e7bf      	b.n	800c2a0 <_strtod_l+0x28>
 800c320:	2a2d      	cmp	r2, #45	; 0x2d
 800c322:	d1c8      	bne.n	800c2b6 <_strtod_l+0x3e>
 800c324:	2201      	movs	r2, #1
 800c326:	920c      	str	r2, [sp, #48]	; 0x30
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c32c:	785b      	ldrb	r3, [r3, #1]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1c3      	bne.n	800c2ba <_strtod_l+0x42>
 800c332:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c334:	961b      	str	r6, [sp, #108]	; 0x6c
 800c336:	2b00      	cmp	r3, #0
 800c338:	f040 8577 	bne.w	800ce2a <_strtod_l+0xbb2>
 800c33c:	4642      	mov	r2, r8
 800c33e:	464b      	mov	r3, r9
 800c340:	e7e4      	b.n	800c30c <_strtod_l+0x94>
 800c342:	2200      	movs	r2, #0
 800c344:	e7ef      	b.n	800c326 <_strtod_l+0xae>
 800c346:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c348:	b13a      	cbz	r2, 800c35a <_strtod_l+0xe2>
 800c34a:	2135      	movs	r1, #53	; 0x35
 800c34c:	a81e      	add	r0, sp, #120	; 0x78
 800c34e:	f002 fced 	bl	800ed2c <__copybits>
 800c352:	4650      	mov	r0, sl
 800c354:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c356:	f002 f8b5 	bl	800e4c4 <_Bfree>
 800c35a:	3e01      	subs	r6, #1
 800c35c:	2e05      	cmp	r6, #5
 800c35e:	d807      	bhi.n	800c370 <_strtod_l+0xf8>
 800c360:	e8df f006 	tbb	[pc, r6]
 800c364:	1d180b0e 	.word	0x1d180b0e
 800c368:	030e      	.short	0x030e
 800c36a:	f04f 0900 	mov.w	r9, #0
 800c36e:	46c8      	mov	r8, r9
 800c370:	0721      	lsls	r1, r4, #28
 800c372:	d5c2      	bpl.n	800c2fa <_strtod_l+0x82>
 800c374:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c378:	e7bf      	b.n	800c2fa <_strtod_l+0x82>
 800c37a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800c37e:	e7f7      	b.n	800c370 <_strtod_l+0xf8>
 800c380:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c382:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800c386:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c38a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c38e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c392:	e7ed      	b.n	800c370 <_strtod_l+0xf8>
 800c394:	f04f 0800 	mov.w	r8, #0
 800c398:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c514 <_strtod_l+0x29c>
 800c39c:	e7e8      	b.n	800c370 <_strtod_l+0xf8>
 800c39e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c3a2:	f04f 38ff 	mov.w	r8, #4294967295
 800c3a6:	e7e3      	b.n	800c370 <_strtod_l+0xf8>
 800c3a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3ae:	785b      	ldrb	r3, [r3, #1]
 800c3b0:	2b30      	cmp	r3, #48	; 0x30
 800c3b2:	d0f9      	beq.n	800c3a8 <_strtod_l+0x130>
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0a0      	beq.n	800c2fa <_strtod_l+0x82>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	9307      	str	r3, [sp, #28]
 800c3bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3be:	220a      	movs	r2, #10
 800c3c0:	9308      	str	r3, [sp, #32]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	469b      	mov	fp, r3
 800c3c6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c3ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c3cc:	7805      	ldrb	r5, [r0, #0]
 800c3ce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c3d2:	b2d9      	uxtb	r1, r3
 800c3d4:	2909      	cmp	r1, #9
 800c3d6:	d926      	bls.n	800c426 <_strtod_l+0x1ae>
 800c3d8:	4622      	mov	r2, r4
 800c3da:	4639      	mov	r1, r7
 800c3dc:	f002 fe5a 	bl	800f094 <strncmp>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d032      	beq.n	800c44a <_strtod_l+0x1d2>
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	462b      	mov	r3, r5
 800c3e8:	465c      	mov	r4, fp
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	9004      	str	r0, [sp, #16]
 800c3ee:	2b65      	cmp	r3, #101	; 0x65
 800c3f0:	d001      	beq.n	800c3f6 <_strtod_l+0x17e>
 800c3f2:	2b45      	cmp	r3, #69	; 0x45
 800c3f4:	d113      	bne.n	800c41e <_strtod_l+0x1a6>
 800c3f6:	b91c      	cbnz	r4, 800c400 <_strtod_l+0x188>
 800c3f8:	9b07      	ldr	r3, [sp, #28]
 800c3fa:	4303      	orrs	r3, r0
 800c3fc:	d099      	beq.n	800c332 <_strtod_l+0xba>
 800c3fe:	2400      	movs	r4, #0
 800c400:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c402:	1c73      	adds	r3, r6, #1
 800c404:	931b      	str	r3, [sp, #108]	; 0x6c
 800c406:	7873      	ldrb	r3, [r6, #1]
 800c408:	2b2b      	cmp	r3, #43	; 0x2b
 800c40a:	d078      	beq.n	800c4fe <_strtod_l+0x286>
 800c40c:	2b2d      	cmp	r3, #45	; 0x2d
 800c40e:	d07b      	beq.n	800c508 <_strtod_l+0x290>
 800c410:	2700      	movs	r7, #0
 800c412:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c416:	2909      	cmp	r1, #9
 800c418:	f240 8082 	bls.w	800c520 <_strtod_l+0x2a8>
 800c41c:	961b      	str	r6, [sp, #108]	; 0x6c
 800c41e:	2500      	movs	r5, #0
 800c420:	e09e      	b.n	800c560 <_strtod_l+0x2e8>
 800c422:	2300      	movs	r3, #0
 800c424:	e7c9      	b.n	800c3ba <_strtod_l+0x142>
 800c426:	f1bb 0f08 	cmp.w	fp, #8
 800c42a:	bfd5      	itete	le
 800c42c:	9906      	ldrle	r1, [sp, #24]
 800c42e:	9905      	ldrgt	r1, [sp, #20]
 800c430:	fb02 3301 	mlale	r3, r2, r1, r3
 800c434:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c438:	f100 0001 	add.w	r0, r0, #1
 800c43c:	bfd4      	ite	le
 800c43e:	9306      	strle	r3, [sp, #24]
 800c440:	9305      	strgt	r3, [sp, #20]
 800c442:	f10b 0b01 	add.w	fp, fp, #1
 800c446:	901b      	str	r0, [sp, #108]	; 0x6c
 800c448:	e7bf      	b.n	800c3ca <_strtod_l+0x152>
 800c44a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c44c:	191a      	adds	r2, r3, r4
 800c44e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c450:	5d1b      	ldrb	r3, [r3, r4]
 800c452:	f1bb 0f00 	cmp.w	fp, #0
 800c456:	d036      	beq.n	800c4c6 <_strtod_l+0x24e>
 800c458:	465c      	mov	r4, fp
 800c45a:	9004      	str	r0, [sp, #16]
 800c45c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c460:	2a09      	cmp	r2, #9
 800c462:	d912      	bls.n	800c48a <_strtod_l+0x212>
 800c464:	2201      	movs	r2, #1
 800c466:	e7c2      	b.n	800c3ee <_strtod_l+0x176>
 800c468:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c46a:	3001      	adds	r0, #1
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c470:	785b      	ldrb	r3, [r3, #1]
 800c472:	2b30      	cmp	r3, #48	; 0x30
 800c474:	d0f8      	beq.n	800c468 <_strtod_l+0x1f0>
 800c476:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c47a:	2a08      	cmp	r2, #8
 800c47c:	f200 84dc 	bhi.w	800ce38 <_strtod_l+0xbc0>
 800c480:	9004      	str	r0, [sp, #16]
 800c482:	2000      	movs	r0, #0
 800c484:	4604      	mov	r4, r0
 800c486:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c488:	9208      	str	r2, [sp, #32]
 800c48a:	3b30      	subs	r3, #48	; 0x30
 800c48c:	f100 0201 	add.w	r2, r0, #1
 800c490:	d013      	beq.n	800c4ba <_strtod_l+0x242>
 800c492:	9904      	ldr	r1, [sp, #16]
 800c494:	1905      	adds	r5, r0, r4
 800c496:	4411      	add	r1, r2
 800c498:	9104      	str	r1, [sp, #16]
 800c49a:	4622      	mov	r2, r4
 800c49c:	210a      	movs	r1, #10
 800c49e:	42aa      	cmp	r2, r5
 800c4a0:	d113      	bne.n	800c4ca <_strtod_l+0x252>
 800c4a2:	1822      	adds	r2, r4, r0
 800c4a4:	2a08      	cmp	r2, #8
 800c4a6:	f104 0401 	add.w	r4, r4, #1
 800c4aa:	4404      	add	r4, r0
 800c4ac:	dc1b      	bgt.n	800c4e6 <_strtod_l+0x26e>
 800c4ae:	220a      	movs	r2, #10
 800c4b0:	9906      	ldr	r1, [sp, #24]
 800c4b2:	fb02 3301 	mla	r3, r2, r1, r3
 800c4b6:	9306      	str	r3, [sp, #24]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4bc:	4610      	mov	r0, r2
 800c4be:	1c59      	adds	r1, r3, #1
 800c4c0:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4c2:	785b      	ldrb	r3, [r3, #1]
 800c4c4:	e7ca      	b.n	800c45c <_strtod_l+0x1e4>
 800c4c6:	4658      	mov	r0, fp
 800c4c8:	e7d3      	b.n	800c472 <_strtod_l+0x1fa>
 800c4ca:	2a08      	cmp	r2, #8
 800c4cc:	dc04      	bgt.n	800c4d8 <_strtod_l+0x260>
 800c4ce:	9f06      	ldr	r7, [sp, #24]
 800c4d0:	434f      	muls	r7, r1
 800c4d2:	9706      	str	r7, [sp, #24]
 800c4d4:	3201      	adds	r2, #1
 800c4d6:	e7e2      	b.n	800c49e <_strtod_l+0x226>
 800c4d8:	1c57      	adds	r7, r2, #1
 800c4da:	2f10      	cmp	r7, #16
 800c4dc:	bfde      	ittt	le
 800c4de:	9f05      	ldrle	r7, [sp, #20]
 800c4e0:	434f      	mulle	r7, r1
 800c4e2:	9705      	strle	r7, [sp, #20]
 800c4e4:	e7f6      	b.n	800c4d4 <_strtod_l+0x25c>
 800c4e6:	2c10      	cmp	r4, #16
 800c4e8:	bfdf      	itttt	le
 800c4ea:	220a      	movle	r2, #10
 800c4ec:	9905      	ldrle	r1, [sp, #20]
 800c4ee:	fb02 3301 	mlale	r3, r2, r1, r3
 800c4f2:	9305      	strle	r3, [sp, #20]
 800c4f4:	e7e0      	b.n	800c4b8 <_strtod_l+0x240>
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	9304      	str	r3, [sp, #16]
 800c4fc:	e77c      	b.n	800c3f8 <_strtod_l+0x180>
 800c4fe:	2700      	movs	r7, #0
 800c500:	1cb3      	adds	r3, r6, #2
 800c502:	931b      	str	r3, [sp, #108]	; 0x6c
 800c504:	78b3      	ldrb	r3, [r6, #2]
 800c506:	e784      	b.n	800c412 <_strtod_l+0x19a>
 800c508:	2701      	movs	r7, #1
 800c50a:	e7f9      	b.n	800c500 <_strtod_l+0x288>
 800c50c:	080106fc 	.word	0x080106fc
 800c510:	08010584 	.word	0x08010584
 800c514:	7ff00000 	.word	0x7ff00000
 800c518:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c51a:	1c59      	adds	r1, r3, #1
 800c51c:	911b      	str	r1, [sp, #108]	; 0x6c
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	2b30      	cmp	r3, #48	; 0x30
 800c522:	d0f9      	beq.n	800c518 <_strtod_l+0x2a0>
 800c524:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c528:	2908      	cmp	r1, #8
 800c52a:	f63f af78 	bhi.w	800c41e <_strtod_l+0x1a6>
 800c52e:	f04f 0e0a 	mov.w	lr, #10
 800c532:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800c536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c538:	9309      	str	r3, [sp, #36]	; 0x24
 800c53a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c53c:	1c59      	adds	r1, r3, #1
 800c53e:	911b      	str	r1, [sp, #108]	; 0x6c
 800c540:	785b      	ldrb	r3, [r3, #1]
 800c542:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c546:	2d09      	cmp	r5, #9
 800c548:	d935      	bls.n	800c5b6 <_strtod_l+0x33e>
 800c54a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c54c:	1b49      	subs	r1, r1, r5
 800c54e:	2908      	cmp	r1, #8
 800c550:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c554:	dc02      	bgt.n	800c55c <_strtod_l+0x2e4>
 800c556:	4565      	cmp	r5, ip
 800c558:	bfa8      	it	ge
 800c55a:	4665      	movge	r5, ip
 800c55c:	b107      	cbz	r7, 800c560 <_strtod_l+0x2e8>
 800c55e:	426d      	negs	r5, r5
 800c560:	2c00      	cmp	r4, #0
 800c562:	d14c      	bne.n	800c5fe <_strtod_l+0x386>
 800c564:	9907      	ldr	r1, [sp, #28]
 800c566:	4301      	orrs	r1, r0
 800c568:	f47f aec7 	bne.w	800c2fa <_strtod_l+0x82>
 800c56c:	2a00      	cmp	r2, #0
 800c56e:	f47f aee0 	bne.w	800c332 <_strtod_l+0xba>
 800c572:	2b69      	cmp	r3, #105	; 0x69
 800c574:	d026      	beq.n	800c5c4 <_strtod_l+0x34c>
 800c576:	dc23      	bgt.n	800c5c0 <_strtod_l+0x348>
 800c578:	2b49      	cmp	r3, #73	; 0x49
 800c57a:	d023      	beq.n	800c5c4 <_strtod_l+0x34c>
 800c57c:	2b4e      	cmp	r3, #78	; 0x4e
 800c57e:	f47f aed8 	bne.w	800c332 <_strtod_l+0xba>
 800c582:	499c      	ldr	r1, [pc, #624]	; (800c7f4 <_strtod_l+0x57c>)
 800c584:	a81b      	add	r0, sp, #108	; 0x6c
 800c586:	f001 fe6f 	bl	800e268 <__match>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f43f aed1 	beq.w	800c332 <_strtod_l+0xba>
 800c590:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b28      	cmp	r3, #40	; 0x28
 800c596:	d12c      	bne.n	800c5f2 <_strtod_l+0x37a>
 800c598:	4997      	ldr	r1, [pc, #604]	; (800c7f8 <_strtod_l+0x580>)
 800c59a:	aa1e      	add	r2, sp, #120	; 0x78
 800c59c:	a81b      	add	r0, sp, #108	; 0x6c
 800c59e:	f001 fe77 	bl	800e290 <__hexnan>
 800c5a2:	2805      	cmp	r0, #5
 800c5a4:	d125      	bne.n	800c5f2 <_strtod_l+0x37a>
 800c5a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c5a8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c5ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c5b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c5b4:	e6a1      	b.n	800c2fa <_strtod_l+0x82>
 800c5b6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800c5ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c5be:	e7bc      	b.n	800c53a <_strtod_l+0x2c2>
 800c5c0:	2b6e      	cmp	r3, #110	; 0x6e
 800c5c2:	e7dc      	b.n	800c57e <_strtod_l+0x306>
 800c5c4:	498d      	ldr	r1, [pc, #564]	; (800c7fc <_strtod_l+0x584>)
 800c5c6:	a81b      	add	r0, sp, #108	; 0x6c
 800c5c8:	f001 fe4e 	bl	800e268 <__match>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f43f aeb0 	beq.w	800c332 <_strtod_l+0xba>
 800c5d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5d4:	498a      	ldr	r1, [pc, #552]	; (800c800 <_strtod_l+0x588>)
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	a81b      	add	r0, sp, #108	; 0x6c
 800c5da:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5dc:	f001 fe44 	bl	800e268 <__match>
 800c5e0:	b910      	cbnz	r0, 800c5e8 <_strtod_l+0x370>
 800c5e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5e8:	f04f 0800 	mov.w	r8, #0
 800c5ec:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c810 <_strtod_l+0x598>
 800c5f0:	e683      	b.n	800c2fa <_strtod_l+0x82>
 800c5f2:	4884      	ldr	r0, [pc, #528]	; (800c804 <_strtod_l+0x58c>)
 800c5f4:	f002 fd48 	bl	800f088 <nan>
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	4689      	mov	r9, r1
 800c5fc:	e67d      	b.n	800c2fa <_strtod_l+0x82>
 800c5fe:	9b04      	ldr	r3, [sp, #16]
 800c600:	f1bb 0f00 	cmp.w	fp, #0
 800c604:	bf08      	it	eq
 800c606:	46a3      	moveq	fp, r4
 800c608:	1aeb      	subs	r3, r5, r3
 800c60a:	2c10      	cmp	r4, #16
 800c60c:	9806      	ldr	r0, [sp, #24]
 800c60e:	4626      	mov	r6, r4
 800c610:	9307      	str	r3, [sp, #28]
 800c612:	bfa8      	it	ge
 800c614:	2610      	movge	r6, #16
 800c616:	f7f3 ff51 	bl	80004bc <__aeabi_ui2d>
 800c61a:	2c09      	cmp	r4, #9
 800c61c:	4680      	mov	r8, r0
 800c61e:	4689      	mov	r9, r1
 800c620:	dd13      	ble.n	800c64a <_strtod_l+0x3d2>
 800c622:	4b79      	ldr	r3, [pc, #484]	; (800c808 <_strtod_l+0x590>)
 800c624:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c628:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c62c:	f7f3 ffc0 	bl	80005b0 <__aeabi_dmul>
 800c630:	4680      	mov	r8, r0
 800c632:	9805      	ldr	r0, [sp, #20]
 800c634:	4689      	mov	r9, r1
 800c636:	f7f3 ff41 	bl	80004bc <__aeabi_ui2d>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4640      	mov	r0, r8
 800c640:	4649      	mov	r1, r9
 800c642:	f7f3 fdff 	bl	8000244 <__adddf3>
 800c646:	4680      	mov	r8, r0
 800c648:	4689      	mov	r9, r1
 800c64a:	2c0f      	cmp	r4, #15
 800c64c:	dc36      	bgt.n	800c6bc <_strtod_l+0x444>
 800c64e:	9b07      	ldr	r3, [sp, #28]
 800c650:	2b00      	cmp	r3, #0
 800c652:	f43f ae52 	beq.w	800c2fa <_strtod_l+0x82>
 800c656:	dd22      	ble.n	800c69e <_strtod_l+0x426>
 800c658:	2b16      	cmp	r3, #22
 800c65a:	dc09      	bgt.n	800c670 <_strtod_l+0x3f8>
 800c65c:	4c6a      	ldr	r4, [pc, #424]	; (800c808 <_strtod_l+0x590>)
 800c65e:	4642      	mov	r2, r8
 800c660:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800c664:	464b      	mov	r3, r9
 800c666:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c66a:	f7f3 ffa1 	bl	80005b0 <__aeabi_dmul>
 800c66e:	e7c3      	b.n	800c5f8 <_strtod_l+0x380>
 800c670:	9a07      	ldr	r2, [sp, #28]
 800c672:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c676:	4293      	cmp	r3, r2
 800c678:	db20      	blt.n	800c6bc <_strtod_l+0x444>
 800c67a:	4d63      	ldr	r5, [pc, #396]	; (800c808 <_strtod_l+0x590>)
 800c67c:	f1c4 040f 	rsb	r4, r4, #15
 800c680:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c684:	4642      	mov	r2, r8
 800c686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c68a:	464b      	mov	r3, r9
 800c68c:	f7f3 ff90 	bl	80005b0 <__aeabi_dmul>
 800c690:	9b07      	ldr	r3, [sp, #28]
 800c692:	1b1c      	subs	r4, r3, r4
 800c694:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c698:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c69c:	e7e5      	b.n	800c66a <_strtod_l+0x3f2>
 800c69e:	9b07      	ldr	r3, [sp, #28]
 800c6a0:	3316      	adds	r3, #22
 800c6a2:	db0b      	blt.n	800c6bc <_strtod_l+0x444>
 800c6a4:	9b04      	ldr	r3, [sp, #16]
 800c6a6:	4a58      	ldr	r2, [pc, #352]	; (800c808 <_strtod_l+0x590>)
 800c6a8:	1b5d      	subs	r5, r3, r5
 800c6aa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c6ae:	4640      	mov	r0, r8
 800c6b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	f7f4 f8a5 	bl	8000804 <__aeabi_ddiv>
 800c6ba:	e79d      	b.n	800c5f8 <_strtod_l+0x380>
 800c6bc:	9b07      	ldr	r3, [sp, #28]
 800c6be:	1ba6      	subs	r6, r4, r6
 800c6c0:	441e      	add	r6, r3
 800c6c2:	2e00      	cmp	r6, #0
 800c6c4:	dd71      	ble.n	800c7aa <_strtod_l+0x532>
 800c6c6:	f016 030f 	ands.w	r3, r6, #15
 800c6ca:	d00a      	beq.n	800c6e2 <_strtod_l+0x46a>
 800c6cc:	494e      	ldr	r1, [pc, #312]	; (800c808 <_strtod_l+0x590>)
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d8:	464b      	mov	r3, r9
 800c6da:	f7f3 ff69 	bl	80005b0 <__aeabi_dmul>
 800c6de:	4680      	mov	r8, r0
 800c6e0:	4689      	mov	r9, r1
 800c6e2:	f036 060f 	bics.w	r6, r6, #15
 800c6e6:	d050      	beq.n	800c78a <_strtod_l+0x512>
 800c6e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c6ec:	dd27      	ble.n	800c73e <_strtod_l+0x4c6>
 800c6ee:	f04f 0b00 	mov.w	fp, #0
 800c6f2:	f8cd b010 	str.w	fp, [sp, #16]
 800c6f6:	f8cd b020 	str.w	fp, [sp, #32]
 800c6fa:	f8cd b018 	str.w	fp, [sp, #24]
 800c6fe:	2322      	movs	r3, #34	; 0x22
 800c700:	f04f 0800 	mov.w	r8, #0
 800c704:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c810 <_strtod_l+0x598>
 800c708:	f8ca 3000 	str.w	r3, [sl]
 800c70c:	9b08      	ldr	r3, [sp, #32]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	f43f adf3 	beq.w	800c2fa <_strtod_l+0x82>
 800c714:	4650      	mov	r0, sl
 800c716:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c718:	f001 fed4 	bl	800e4c4 <_Bfree>
 800c71c:	4650      	mov	r0, sl
 800c71e:	9906      	ldr	r1, [sp, #24]
 800c720:	f001 fed0 	bl	800e4c4 <_Bfree>
 800c724:	4650      	mov	r0, sl
 800c726:	9904      	ldr	r1, [sp, #16]
 800c728:	f001 fecc 	bl	800e4c4 <_Bfree>
 800c72c:	4650      	mov	r0, sl
 800c72e:	9908      	ldr	r1, [sp, #32]
 800c730:	f001 fec8 	bl	800e4c4 <_Bfree>
 800c734:	4659      	mov	r1, fp
 800c736:	4650      	mov	r0, sl
 800c738:	f001 fec4 	bl	800e4c4 <_Bfree>
 800c73c:	e5dd      	b.n	800c2fa <_strtod_l+0x82>
 800c73e:	2300      	movs	r3, #0
 800c740:	4640      	mov	r0, r8
 800c742:	4649      	mov	r1, r9
 800c744:	461f      	mov	r7, r3
 800c746:	1136      	asrs	r6, r6, #4
 800c748:	2e01      	cmp	r6, #1
 800c74a:	dc21      	bgt.n	800c790 <_strtod_l+0x518>
 800c74c:	b10b      	cbz	r3, 800c752 <_strtod_l+0x4da>
 800c74e:	4680      	mov	r8, r0
 800c750:	4689      	mov	r9, r1
 800c752:	4b2e      	ldr	r3, [pc, #184]	; (800c80c <_strtod_l+0x594>)
 800c754:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c758:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c75c:	4642      	mov	r2, r8
 800c75e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c762:	464b      	mov	r3, r9
 800c764:	f7f3 ff24 	bl	80005b0 <__aeabi_dmul>
 800c768:	4b29      	ldr	r3, [pc, #164]	; (800c810 <_strtod_l+0x598>)
 800c76a:	460a      	mov	r2, r1
 800c76c:	400b      	ands	r3, r1
 800c76e:	4929      	ldr	r1, [pc, #164]	; (800c814 <_strtod_l+0x59c>)
 800c770:	4680      	mov	r8, r0
 800c772:	428b      	cmp	r3, r1
 800c774:	d8bb      	bhi.n	800c6ee <_strtod_l+0x476>
 800c776:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c77a:	428b      	cmp	r3, r1
 800c77c:	bf86      	itte	hi
 800c77e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c782:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c818 <_strtod_l+0x5a0>
 800c786:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c78a:	2300      	movs	r3, #0
 800c78c:	9305      	str	r3, [sp, #20]
 800c78e:	e07e      	b.n	800c88e <_strtod_l+0x616>
 800c790:	07f2      	lsls	r2, r6, #31
 800c792:	d507      	bpl.n	800c7a4 <_strtod_l+0x52c>
 800c794:	4b1d      	ldr	r3, [pc, #116]	; (800c80c <_strtod_l+0x594>)
 800c796:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7f3 ff07 	bl	80005b0 <__aeabi_dmul>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	3701      	adds	r7, #1
 800c7a6:	1076      	asrs	r6, r6, #1
 800c7a8:	e7ce      	b.n	800c748 <_strtod_l+0x4d0>
 800c7aa:	d0ee      	beq.n	800c78a <_strtod_l+0x512>
 800c7ac:	4276      	negs	r6, r6
 800c7ae:	f016 020f 	ands.w	r2, r6, #15
 800c7b2:	d00a      	beq.n	800c7ca <_strtod_l+0x552>
 800c7b4:	4b14      	ldr	r3, [pc, #80]	; (800c808 <_strtod_l+0x590>)
 800c7b6:	4640      	mov	r0, r8
 800c7b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7bc:	4649      	mov	r1, r9
 800c7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c2:	f7f4 f81f 	bl	8000804 <__aeabi_ddiv>
 800c7c6:	4680      	mov	r8, r0
 800c7c8:	4689      	mov	r9, r1
 800c7ca:	1136      	asrs	r6, r6, #4
 800c7cc:	d0dd      	beq.n	800c78a <_strtod_l+0x512>
 800c7ce:	2e1f      	cmp	r6, #31
 800c7d0:	dd24      	ble.n	800c81c <_strtod_l+0x5a4>
 800c7d2:	f04f 0b00 	mov.w	fp, #0
 800c7d6:	f8cd b010 	str.w	fp, [sp, #16]
 800c7da:	f8cd b020 	str.w	fp, [sp, #32]
 800c7de:	f8cd b018 	str.w	fp, [sp, #24]
 800c7e2:	2322      	movs	r3, #34	; 0x22
 800c7e4:	f04f 0800 	mov.w	r8, #0
 800c7e8:	f04f 0900 	mov.w	r9, #0
 800c7ec:	f8ca 3000 	str.w	r3, [sl]
 800c7f0:	e78c      	b.n	800c70c <_strtod_l+0x494>
 800c7f2:	bf00      	nop
 800c7f4:	08010555 	.word	0x08010555
 800c7f8:	08010598 	.word	0x08010598
 800c7fc:	0801054d 	.word	0x0801054d
 800c800:	08010600 	.word	0x08010600
 800c804:	080108b8 	.word	0x080108b8
 800c808:	08010798 	.word	0x08010798
 800c80c:	08010770 	.word	0x08010770
 800c810:	7ff00000 	.word	0x7ff00000
 800c814:	7ca00000 	.word	0x7ca00000
 800c818:	7fefffff 	.word	0x7fefffff
 800c81c:	f016 0310 	ands.w	r3, r6, #16
 800c820:	bf18      	it	ne
 800c822:	236a      	movne	r3, #106	; 0x6a
 800c824:	4640      	mov	r0, r8
 800c826:	9305      	str	r3, [sp, #20]
 800c828:	4649      	mov	r1, r9
 800c82a:	2300      	movs	r3, #0
 800c82c:	4fb2      	ldr	r7, [pc, #712]	; (800caf8 <_strtod_l+0x880>)
 800c82e:	07f2      	lsls	r2, r6, #31
 800c830:	d504      	bpl.n	800c83c <_strtod_l+0x5c4>
 800c832:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c836:	f7f3 febb 	bl	80005b0 <__aeabi_dmul>
 800c83a:	2301      	movs	r3, #1
 800c83c:	1076      	asrs	r6, r6, #1
 800c83e:	f107 0708 	add.w	r7, r7, #8
 800c842:	d1f4      	bne.n	800c82e <_strtod_l+0x5b6>
 800c844:	b10b      	cbz	r3, 800c84a <_strtod_l+0x5d2>
 800c846:	4680      	mov	r8, r0
 800c848:	4689      	mov	r9, r1
 800c84a:	9b05      	ldr	r3, [sp, #20]
 800c84c:	b1bb      	cbz	r3, 800c87e <_strtod_l+0x606>
 800c84e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800c852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c856:	2b00      	cmp	r3, #0
 800c858:	4649      	mov	r1, r9
 800c85a:	dd10      	ble.n	800c87e <_strtod_l+0x606>
 800c85c:	2b1f      	cmp	r3, #31
 800c85e:	f340 812b 	ble.w	800cab8 <_strtod_l+0x840>
 800c862:	2b34      	cmp	r3, #52	; 0x34
 800c864:	bfd8      	it	le
 800c866:	f04f 32ff 	movle.w	r2, #4294967295
 800c86a:	f04f 0800 	mov.w	r8, #0
 800c86e:	bfcf      	iteee	gt
 800c870:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c874:	3b20      	suble	r3, #32
 800c876:	fa02 f303 	lslle.w	r3, r2, r3
 800c87a:	ea03 0901 	andle.w	r9, r3, r1
 800c87e:	2200      	movs	r2, #0
 800c880:	2300      	movs	r3, #0
 800c882:	4640      	mov	r0, r8
 800c884:	4649      	mov	r1, r9
 800c886:	f7f4 f8fb 	bl	8000a80 <__aeabi_dcmpeq>
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d1a1      	bne.n	800c7d2 <_strtod_l+0x55a>
 800c88e:	9b06      	ldr	r3, [sp, #24]
 800c890:	465a      	mov	r2, fp
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	4650      	mov	r0, sl
 800c896:	4623      	mov	r3, r4
 800c898:	9908      	ldr	r1, [sp, #32]
 800c89a:	f001 fe7f 	bl	800e59c <__s2b>
 800c89e:	9008      	str	r0, [sp, #32]
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	f43f af24 	beq.w	800c6ee <_strtod_l+0x476>
 800c8a6:	9b04      	ldr	r3, [sp, #16]
 800c8a8:	f04f 0b00 	mov.w	fp, #0
 800c8ac:	1b5d      	subs	r5, r3, r5
 800c8ae:	9b07      	ldr	r3, [sp, #28]
 800c8b0:	f8cd b010 	str.w	fp, [sp, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	bfb4      	ite	lt
 800c8b8:	462b      	movlt	r3, r5
 800c8ba:	2300      	movge	r3, #0
 800c8bc:	930e      	str	r3, [sp, #56]	; 0x38
 800c8be:	9b07      	ldr	r3, [sp, #28]
 800c8c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c8c4:	9316      	str	r3, [sp, #88]	; 0x58
 800c8c6:	9b08      	ldr	r3, [sp, #32]
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	6859      	ldr	r1, [r3, #4]
 800c8cc:	f001 fdba 	bl	800e444 <_Balloc>
 800c8d0:	9006      	str	r0, [sp, #24]
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	f43f af13 	beq.w	800c6fe <_strtod_l+0x486>
 800c8d8:	9b08      	ldr	r3, [sp, #32]
 800c8da:	300c      	adds	r0, #12
 800c8dc:	691a      	ldr	r2, [r3, #16]
 800c8de:	f103 010c 	add.w	r1, r3, #12
 800c8e2:	3202      	adds	r2, #2
 800c8e4:	0092      	lsls	r2, r2, #2
 800c8e6:	f001 fd93 	bl	800e410 <memcpy>
 800c8ea:	ab1e      	add	r3, sp, #120	; 0x78
 800c8ec:	9301      	str	r3, [sp, #4]
 800c8ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	4642      	mov	r2, r8
 800c8f4:	464b      	mov	r3, r9
 800c8f6:	4650      	mov	r0, sl
 800c8f8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800c8fc:	f002 f98c 	bl	800ec18 <__d2b>
 800c900:	901c      	str	r0, [sp, #112]	; 0x70
 800c902:	2800      	cmp	r0, #0
 800c904:	f43f aefb 	beq.w	800c6fe <_strtod_l+0x486>
 800c908:	2101      	movs	r1, #1
 800c90a:	4650      	mov	r0, sl
 800c90c:	f001 fede 	bl	800e6cc <__i2b>
 800c910:	4603      	mov	r3, r0
 800c912:	9004      	str	r0, [sp, #16]
 800c914:	2800      	cmp	r0, #0
 800c916:	f43f aef2 	beq.w	800c6fe <_strtod_l+0x486>
 800c91a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c91c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c91e:	2d00      	cmp	r5, #0
 800c920:	bfab      	itete	ge
 800c922:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c924:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c926:	18ee      	addge	r6, r5, r3
 800c928:	1b5c      	sublt	r4, r3, r5
 800c92a:	9b05      	ldr	r3, [sp, #20]
 800c92c:	bfa8      	it	ge
 800c92e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c930:	eba5 0503 	sub.w	r5, r5, r3
 800c934:	4415      	add	r5, r2
 800c936:	4b71      	ldr	r3, [pc, #452]	; (800cafc <_strtod_l+0x884>)
 800c938:	f105 35ff 	add.w	r5, r5, #4294967295
 800c93c:	bfb8      	it	lt
 800c93e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c940:	429d      	cmp	r5, r3
 800c942:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c946:	f280 80c9 	bge.w	800cadc <_strtod_l+0x864>
 800c94a:	1b5b      	subs	r3, r3, r5
 800c94c:	2b1f      	cmp	r3, #31
 800c94e:	f04f 0701 	mov.w	r7, #1
 800c952:	eba2 0203 	sub.w	r2, r2, r3
 800c956:	f300 80b6 	bgt.w	800cac6 <_strtod_l+0x84e>
 800c95a:	2500      	movs	r5, #0
 800c95c:	fa07 f303 	lsl.w	r3, r7, r3
 800c960:	930f      	str	r3, [sp, #60]	; 0x3c
 800c962:	18b7      	adds	r7, r6, r2
 800c964:	9b05      	ldr	r3, [sp, #20]
 800c966:	42be      	cmp	r6, r7
 800c968:	4414      	add	r4, r2
 800c96a:	441c      	add	r4, r3
 800c96c:	4633      	mov	r3, r6
 800c96e:	bfa8      	it	ge
 800c970:	463b      	movge	r3, r7
 800c972:	42a3      	cmp	r3, r4
 800c974:	bfa8      	it	ge
 800c976:	4623      	movge	r3, r4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	bfc2      	ittt	gt
 800c97c:	1aff      	subgt	r7, r7, r3
 800c97e:	1ae4      	subgt	r4, r4, r3
 800c980:	1af6      	subgt	r6, r6, r3
 800c982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c984:	2b00      	cmp	r3, #0
 800c986:	dd17      	ble.n	800c9b8 <_strtod_l+0x740>
 800c988:	461a      	mov	r2, r3
 800c98a:	4650      	mov	r0, sl
 800c98c:	9904      	ldr	r1, [sp, #16]
 800c98e:	f001 ff57 	bl	800e840 <__pow5mult>
 800c992:	9004      	str	r0, [sp, #16]
 800c994:	2800      	cmp	r0, #0
 800c996:	f43f aeb2 	beq.w	800c6fe <_strtod_l+0x486>
 800c99a:	4601      	mov	r1, r0
 800c99c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c99e:	4650      	mov	r0, sl
 800c9a0:	f001 feaa 	bl	800e6f8 <__multiply>
 800c9a4:	9009      	str	r0, [sp, #36]	; 0x24
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f43f aea9 	beq.w	800c6fe <_strtod_l+0x486>
 800c9ac:	4650      	mov	r0, sl
 800c9ae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9b0:	f001 fd88 	bl	800e4c4 <_Bfree>
 800c9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b6:	931c      	str	r3, [sp, #112]	; 0x70
 800c9b8:	2f00      	cmp	r7, #0
 800c9ba:	f300 8093 	bgt.w	800cae4 <_strtod_l+0x86c>
 800c9be:	9b07      	ldr	r3, [sp, #28]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	dd08      	ble.n	800c9d6 <_strtod_l+0x75e>
 800c9c4:	4650      	mov	r0, sl
 800c9c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c9c8:	9906      	ldr	r1, [sp, #24]
 800c9ca:	f001 ff39 	bl	800e840 <__pow5mult>
 800c9ce:	9006      	str	r0, [sp, #24]
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	f43f ae94 	beq.w	800c6fe <_strtod_l+0x486>
 800c9d6:	2c00      	cmp	r4, #0
 800c9d8:	dd08      	ble.n	800c9ec <_strtod_l+0x774>
 800c9da:	4622      	mov	r2, r4
 800c9dc:	4650      	mov	r0, sl
 800c9de:	9906      	ldr	r1, [sp, #24]
 800c9e0:	f001 ff88 	bl	800e8f4 <__lshift>
 800c9e4:	9006      	str	r0, [sp, #24]
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f43f ae89 	beq.w	800c6fe <_strtod_l+0x486>
 800c9ec:	2e00      	cmp	r6, #0
 800c9ee:	dd08      	ble.n	800ca02 <_strtod_l+0x78a>
 800c9f0:	4632      	mov	r2, r6
 800c9f2:	4650      	mov	r0, sl
 800c9f4:	9904      	ldr	r1, [sp, #16]
 800c9f6:	f001 ff7d 	bl	800e8f4 <__lshift>
 800c9fa:	9004      	str	r0, [sp, #16]
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	f43f ae7e 	beq.w	800c6fe <_strtod_l+0x486>
 800ca02:	4650      	mov	r0, sl
 800ca04:	9a06      	ldr	r2, [sp, #24]
 800ca06:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca08:	f001 fffc 	bl	800ea04 <__mdiff>
 800ca0c:	4683      	mov	fp, r0
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	f43f ae75 	beq.w	800c6fe <_strtod_l+0x486>
 800ca14:	2400      	movs	r4, #0
 800ca16:	68c3      	ldr	r3, [r0, #12]
 800ca18:	9904      	ldr	r1, [sp, #16]
 800ca1a:	60c4      	str	r4, [r0, #12]
 800ca1c:	930d      	str	r3, [sp, #52]	; 0x34
 800ca1e:	f001 ffd5 	bl	800e9cc <__mcmp>
 800ca22:	42a0      	cmp	r0, r4
 800ca24:	da70      	bge.n	800cb08 <_strtod_l+0x890>
 800ca26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca28:	ea53 0308 	orrs.w	r3, r3, r8
 800ca2c:	f040 8096 	bne.w	800cb5c <_strtod_l+0x8e4>
 800ca30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f040 8091 	bne.w	800cb5c <_strtod_l+0x8e4>
 800ca3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca3e:	0d1b      	lsrs	r3, r3, #20
 800ca40:	051b      	lsls	r3, r3, #20
 800ca42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ca46:	f240 8089 	bls.w	800cb5c <_strtod_l+0x8e4>
 800ca4a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ca4e:	b923      	cbnz	r3, 800ca5a <_strtod_l+0x7e2>
 800ca50:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	f340 8081 	ble.w	800cb5c <_strtod_l+0x8e4>
 800ca5a:	4659      	mov	r1, fp
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	4650      	mov	r0, sl
 800ca60:	f001 ff48 	bl	800e8f4 <__lshift>
 800ca64:	9904      	ldr	r1, [sp, #16]
 800ca66:	4683      	mov	fp, r0
 800ca68:	f001 ffb0 	bl	800e9cc <__mcmp>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	dd75      	ble.n	800cb5c <_strtod_l+0x8e4>
 800ca70:	9905      	ldr	r1, [sp, #20]
 800ca72:	464b      	mov	r3, r9
 800ca74:	4a22      	ldr	r2, [pc, #136]	; (800cb00 <_strtod_l+0x888>)
 800ca76:	2900      	cmp	r1, #0
 800ca78:	f000 8091 	beq.w	800cb9e <_strtod_l+0x926>
 800ca7c:	ea02 0109 	and.w	r1, r2, r9
 800ca80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca84:	f300 808b 	bgt.w	800cb9e <_strtod_l+0x926>
 800ca88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca8c:	f77f aea9 	ble.w	800c7e2 <_strtod_l+0x56a>
 800ca90:	2300      	movs	r3, #0
 800ca92:	4a1c      	ldr	r2, [pc, #112]	; (800cb04 <_strtod_l+0x88c>)
 800ca94:	4640      	mov	r0, r8
 800ca96:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ca9a:	4649      	mov	r1, r9
 800ca9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800caa0:	f7f3 fd86 	bl	80005b0 <__aeabi_dmul>
 800caa4:	460b      	mov	r3, r1
 800caa6:	4303      	orrs	r3, r0
 800caa8:	bf08      	it	eq
 800caaa:	2322      	moveq	r3, #34	; 0x22
 800caac:	4680      	mov	r8, r0
 800caae:	4689      	mov	r9, r1
 800cab0:	bf08      	it	eq
 800cab2:	f8ca 3000 	streq.w	r3, [sl]
 800cab6:	e62d      	b.n	800c714 <_strtod_l+0x49c>
 800cab8:	f04f 32ff 	mov.w	r2, #4294967295
 800cabc:	fa02 f303 	lsl.w	r3, r2, r3
 800cac0:	ea03 0808 	and.w	r8, r3, r8
 800cac4:	e6db      	b.n	800c87e <_strtod_l+0x606>
 800cac6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800caca:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800cace:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800cad2:	35e2      	adds	r5, #226	; 0xe2
 800cad4:	fa07 f505 	lsl.w	r5, r7, r5
 800cad8:	970f      	str	r7, [sp, #60]	; 0x3c
 800cada:	e742      	b.n	800c962 <_strtod_l+0x6ea>
 800cadc:	2301      	movs	r3, #1
 800cade:	2500      	movs	r5, #0
 800cae0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cae2:	e73e      	b.n	800c962 <_strtod_l+0x6ea>
 800cae4:	463a      	mov	r2, r7
 800cae6:	4650      	mov	r0, sl
 800cae8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800caea:	f001 ff03 	bl	800e8f4 <__lshift>
 800caee:	901c      	str	r0, [sp, #112]	; 0x70
 800caf0:	2800      	cmp	r0, #0
 800caf2:	f47f af64 	bne.w	800c9be <_strtod_l+0x746>
 800caf6:	e602      	b.n	800c6fe <_strtod_l+0x486>
 800caf8:	080105b0 	.word	0x080105b0
 800cafc:	fffffc02 	.word	0xfffffc02
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	39500000 	.word	0x39500000
 800cb08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cb0c:	d166      	bne.n	800cbdc <_strtod_l+0x964>
 800cb0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb14:	b35a      	cbz	r2, 800cb6e <_strtod_l+0x8f6>
 800cb16:	4a9c      	ldr	r2, [pc, #624]	; (800cd88 <_strtod_l+0xb10>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d12c      	bne.n	800cb76 <_strtod_l+0x8fe>
 800cb1c:	9b05      	ldr	r3, [sp, #20]
 800cb1e:	4640      	mov	r0, r8
 800cb20:	b303      	cbz	r3, 800cb64 <_strtod_l+0x8ec>
 800cb22:	464b      	mov	r3, r9
 800cb24:	4a99      	ldr	r2, [pc, #612]	; (800cd8c <_strtod_l+0xb14>)
 800cb26:	f04f 31ff 	mov.w	r1, #4294967295
 800cb2a:	401a      	ands	r2, r3
 800cb2c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cb30:	d81b      	bhi.n	800cb6a <_strtod_l+0x8f2>
 800cb32:	0d12      	lsrs	r2, r2, #20
 800cb34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cb38:	fa01 f303 	lsl.w	r3, r1, r3
 800cb3c:	4298      	cmp	r0, r3
 800cb3e:	d11a      	bne.n	800cb76 <_strtod_l+0x8fe>
 800cb40:	4b93      	ldr	r3, [pc, #588]	; (800cd90 <_strtod_l+0xb18>)
 800cb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d102      	bne.n	800cb4e <_strtod_l+0x8d6>
 800cb48:	3001      	adds	r0, #1
 800cb4a:	f43f add8 	beq.w	800c6fe <_strtod_l+0x486>
 800cb4e:	f04f 0800 	mov.w	r8, #0
 800cb52:	4b8e      	ldr	r3, [pc, #568]	; (800cd8c <_strtod_l+0xb14>)
 800cb54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb56:	401a      	ands	r2, r3
 800cb58:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800cb5c:	9b05      	ldr	r3, [sp, #20]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d196      	bne.n	800ca90 <_strtod_l+0x818>
 800cb62:	e5d7      	b.n	800c714 <_strtod_l+0x49c>
 800cb64:	f04f 33ff 	mov.w	r3, #4294967295
 800cb68:	e7e8      	b.n	800cb3c <_strtod_l+0x8c4>
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	e7e6      	b.n	800cb3c <_strtod_l+0x8c4>
 800cb6e:	ea53 0308 	orrs.w	r3, r3, r8
 800cb72:	f43f af7d 	beq.w	800ca70 <_strtod_l+0x7f8>
 800cb76:	b1e5      	cbz	r5, 800cbb2 <_strtod_l+0x93a>
 800cb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb7a:	421d      	tst	r5, r3
 800cb7c:	d0ee      	beq.n	800cb5c <_strtod_l+0x8e4>
 800cb7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb80:	4640      	mov	r0, r8
 800cb82:	4649      	mov	r1, r9
 800cb84:	9a05      	ldr	r2, [sp, #20]
 800cb86:	b1c3      	cbz	r3, 800cbba <_strtod_l+0x942>
 800cb88:	f7ff fb52 	bl	800c230 <sulp>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb94:	f7f3 fb56 	bl	8000244 <__adddf3>
 800cb98:	4680      	mov	r8, r0
 800cb9a:	4689      	mov	r9, r1
 800cb9c:	e7de      	b.n	800cb5c <_strtod_l+0x8e4>
 800cb9e:	4013      	ands	r3, r2
 800cba0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cba4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cba8:	f04f 38ff 	mov.w	r8, #4294967295
 800cbac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cbb0:	e7d4      	b.n	800cb5c <_strtod_l+0x8e4>
 800cbb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbb4:	ea13 0f08 	tst.w	r3, r8
 800cbb8:	e7e0      	b.n	800cb7c <_strtod_l+0x904>
 800cbba:	f7ff fb39 	bl	800c230 <sulp>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cbc6:	f7f3 fb3b 	bl	8000240 <__aeabi_dsub>
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2300      	movs	r3, #0
 800cbce:	4680      	mov	r8, r0
 800cbd0:	4689      	mov	r9, r1
 800cbd2:	f7f3 ff55 	bl	8000a80 <__aeabi_dcmpeq>
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	d0c0      	beq.n	800cb5c <_strtod_l+0x8e4>
 800cbda:	e602      	b.n	800c7e2 <_strtod_l+0x56a>
 800cbdc:	4658      	mov	r0, fp
 800cbde:	9904      	ldr	r1, [sp, #16]
 800cbe0:	f002 f876 	bl	800ecd0 <__ratio>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbea:	4606      	mov	r6, r0
 800cbec:	460f      	mov	r7, r1
 800cbee:	f7f3 ff5b 	bl	8000aa8 <__aeabi_dcmple>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d075      	beq.n	800cce2 <_strtod_l+0xa6a>
 800cbf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d047      	beq.n	800cc8c <_strtod_l+0xa14>
 800cbfc:	2600      	movs	r6, #0
 800cbfe:	4f65      	ldr	r7, [pc, #404]	; (800cd94 <_strtod_l+0xb1c>)
 800cc00:	4d64      	ldr	r5, [pc, #400]	; (800cd94 <_strtod_l+0xb1c>)
 800cc02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc08:	0d1b      	lsrs	r3, r3, #20
 800cc0a:	051b      	lsls	r3, r3, #20
 800cc0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc10:	4b61      	ldr	r3, [pc, #388]	; (800cd98 <_strtod_l+0xb20>)
 800cc12:	429a      	cmp	r2, r3
 800cc14:	f040 80c8 	bne.w	800cda8 <_strtod_l+0xb30>
 800cc18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc1c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc22:	4640      	mov	r0, r8
 800cc24:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800cc28:	4649      	mov	r1, r9
 800cc2a:	f001 ff7b 	bl	800eb24 <__ulp>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fcbb 	bl	80005b0 <__aeabi_dmul>
 800cc3a:	4642      	mov	r2, r8
 800cc3c:	464b      	mov	r3, r9
 800cc3e:	f7f3 fb01 	bl	8000244 <__adddf3>
 800cc42:	460b      	mov	r3, r1
 800cc44:	4951      	ldr	r1, [pc, #324]	; (800cd8c <_strtod_l+0xb14>)
 800cc46:	4a55      	ldr	r2, [pc, #340]	; (800cd9c <_strtod_l+0xb24>)
 800cc48:	4019      	ands	r1, r3
 800cc4a:	4291      	cmp	r1, r2
 800cc4c:	4680      	mov	r8, r0
 800cc4e:	d95e      	bls.n	800cd0e <_strtod_l+0xa96>
 800cc50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d103      	bne.n	800cc62 <_strtod_l+0x9ea>
 800cc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	f43f ad4e 	beq.w	800c6fe <_strtod_l+0x486>
 800cc62:	f04f 38ff 	mov.w	r8, #4294967295
 800cc66:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800cd90 <_strtod_l+0xb18>
 800cc6a:	4650      	mov	r0, sl
 800cc6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc6e:	f001 fc29 	bl	800e4c4 <_Bfree>
 800cc72:	4650      	mov	r0, sl
 800cc74:	9906      	ldr	r1, [sp, #24]
 800cc76:	f001 fc25 	bl	800e4c4 <_Bfree>
 800cc7a:	4650      	mov	r0, sl
 800cc7c:	9904      	ldr	r1, [sp, #16]
 800cc7e:	f001 fc21 	bl	800e4c4 <_Bfree>
 800cc82:	4659      	mov	r1, fp
 800cc84:	4650      	mov	r0, sl
 800cc86:	f001 fc1d 	bl	800e4c4 <_Bfree>
 800cc8a:	e61c      	b.n	800c8c6 <_strtod_l+0x64e>
 800cc8c:	f1b8 0f00 	cmp.w	r8, #0
 800cc90:	d119      	bne.n	800ccc6 <_strtod_l+0xa4e>
 800cc92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc98:	b9e3      	cbnz	r3, 800ccd4 <_strtod_l+0xa5c>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	4b3c      	ldr	r3, [pc, #240]	; (800cd94 <_strtod_l+0xb1c>)
 800cca2:	f7f3 fef7 	bl	8000a94 <__aeabi_dcmplt>
 800cca6:	b9c8      	cbnz	r0, 800ccdc <_strtod_l+0xa64>
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4630      	mov	r0, r6
 800ccac:	4639      	mov	r1, r7
 800ccae:	4b3c      	ldr	r3, [pc, #240]	; (800cda0 <_strtod_l+0xb28>)
 800ccb0:	f7f3 fc7e 	bl	80005b0 <__aeabi_dmul>
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ccbc:	9418      	str	r4, [sp, #96]	; 0x60
 800ccbe:	9319      	str	r3, [sp, #100]	; 0x64
 800ccc0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ccc4:	e79d      	b.n	800cc02 <_strtod_l+0x98a>
 800ccc6:	f1b8 0f01 	cmp.w	r8, #1
 800ccca:	d103      	bne.n	800ccd4 <_strtod_l+0xa5c>
 800cccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f43f ad87 	beq.w	800c7e2 <_strtod_l+0x56a>
 800ccd4:	2600      	movs	r6, #0
 800ccd6:	2400      	movs	r4, #0
 800ccd8:	4f32      	ldr	r7, [pc, #200]	; (800cda4 <_strtod_l+0xb2c>)
 800ccda:	e791      	b.n	800cc00 <_strtod_l+0x988>
 800ccdc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ccde:	4d30      	ldr	r5, [pc, #192]	; (800cda0 <_strtod_l+0xb28>)
 800cce0:	e7ea      	b.n	800ccb8 <_strtod_l+0xa40>
 800cce2:	4b2f      	ldr	r3, [pc, #188]	; (800cda0 <_strtod_l+0xb28>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	4630      	mov	r0, r6
 800cce8:	4639      	mov	r1, r7
 800ccea:	f7f3 fc61 	bl	80005b0 <__aeabi_dmul>
 800ccee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccf0:	4604      	mov	r4, r0
 800ccf2:	460d      	mov	r5, r1
 800ccf4:	b933      	cbnz	r3, 800cd04 <_strtod_l+0xa8c>
 800ccf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccfa:	9010      	str	r0, [sp, #64]	; 0x40
 800ccfc:	9311      	str	r3, [sp, #68]	; 0x44
 800ccfe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cd02:	e77e      	b.n	800cc02 <_strtod_l+0x98a>
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800cd0c:	e7f7      	b.n	800ccfe <_strtod_l+0xa86>
 800cd0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800cd12:	9b05      	ldr	r3, [sp, #20]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d1a8      	bne.n	800cc6a <_strtod_l+0x9f2>
 800cd18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd1e:	0d1b      	lsrs	r3, r3, #20
 800cd20:	051b      	lsls	r3, r3, #20
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d1a1      	bne.n	800cc6a <_strtod_l+0x9f2>
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f4 faa3 	bl	8001274 <__aeabi_d2lz>
 800cd2e:	f7f3 fc11 	bl	8000554 <__aeabi_l2d>
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fa81 	bl	8000240 <__aeabi_dsub>
 800cd3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd44:	ea43 0308 	orr.w	r3, r3, r8
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	460d      	mov	r5, r1
 800cd4e:	d066      	beq.n	800ce1e <_strtod_l+0xba6>
 800cd50:	a309      	add	r3, pc, #36	; (adr r3, 800cd78 <_strtod_l+0xb00>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 fe9d 	bl	8000a94 <__aeabi_dcmplt>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	f47f acda 	bne.w	800c714 <_strtod_l+0x49c>
 800cd60:	a307      	add	r3, pc, #28	; (adr r3, 800cd80 <_strtod_l+0xb08>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	4620      	mov	r0, r4
 800cd68:	4629      	mov	r1, r5
 800cd6a:	f7f3 feb1 	bl	8000ad0 <__aeabi_dcmpgt>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	f43f af7b 	beq.w	800cc6a <_strtod_l+0x9f2>
 800cd74:	e4ce      	b.n	800c714 <_strtod_l+0x49c>
 800cd76:	bf00      	nop
 800cd78:	94a03595 	.word	0x94a03595
 800cd7c:	3fdfffff 	.word	0x3fdfffff
 800cd80:	35afe535 	.word	0x35afe535
 800cd84:	3fe00000 	.word	0x3fe00000
 800cd88:	000fffff 	.word	0x000fffff
 800cd8c:	7ff00000 	.word	0x7ff00000
 800cd90:	7fefffff 	.word	0x7fefffff
 800cd94:	3ff00000 	.word	0x3ff00000
 800cd98:	7fe00000 	.word	0x7fe00000
 800cd9c:	7c9fffff 	.word	0x7c9fffff
 800cda0:	3fe00000 	.word	0x3fe00000
 800cda4:	bff00000 	.word	0xbff00000
 800cda8:	9b05      	ldr	r3, [sp, #20]
 800cdaa:	b313      	cbz	r3, 800cdf2 <_strtod_l+0xb7a>
 800cdac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cdb2:	d81e      	bhi.n	800cdf2 <_strtod_l+0xb7a>
 800cdb4:	a326      	add	r3, pc, #152	; (adr r3, 800ce50 <_strtod_l+0xbd8>)
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	f7f3 fe73 	bl	8000aa8 <__aeabi_dcmple>
 800cdc2:	b190      	cbz	r0, 800cdea <_strtod_l+0xb72>
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f7f3 feca 	bl	8000b60 <__aeabi_d2uiz>
 800cdcc:	2801      	cmp	r0, #1
 800cdce:	bf38      	it	cc
 800cdd0:	2001      	movcc	r0, #1
 800cdd2:	f7f3 fb73 	bl	80004bc <__aeabi_ui2d>
 800cdd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cdd8:	4604      	mov	r4, r0
 800cdda:	460d      	mov	r5, r1
 800cddc:	b9d3      	cbnz	r3, 800ce14 <_strtod_l+0xb9c>
 800cdde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cde2:	9012      	str	r0, [sp, #72]	; 0x48
 800cde4:	9313      	str	r3, [sp, #76]	; 0x4c
 800cde6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cdea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cdec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800cdf0:	1a9f      	subs	r7, r3, r2
 800cdf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdf6:	f001 fe95 	bl	800eb24 <__ulp>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	4630      	mov	r0, r6
 800ce00:	4639      	mov	r1, r7
 800ce02:	f7f3 fbd5 	bl	80005b0 <__aeabi_dmul>
 800ce06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce0a:	f7f3 fa1b 	bl	8000244 <__adddf3>
 800ce0e:	4680      	mov	r8, r0
 800ce10:	4689      	mov	r9, r1
 800ce12:	e77e      	b.n	800cd12 <_strtod_l+0xa9a>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800ce1c:	e7e3      	b.n	800cde6 <_strtod_l+0xb6e>
 800ce1e:	a30e      	add	r3, pc, #56	; (adr r3, 800ce58 <_strtod_l+0xbe0>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	f7f3 fe36 	bl	8000a94 <__aeabi_dcmplt>
 800ce28:	e7a1      	b.n	800cd6e <_strtod_l+0xaf6>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	930c      	str	r3, [sp, #48]	; 0x30
 800ce2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ce32:	6013      	str	r3, [r2, #0]
 800ce34:	f7ff ba65 	b.w	800c302 <_strtod_l+0x8a>
 800ce38:	2b65      	cmp	r3, #101	; 0x65
 800ce3a:	f43f ab5c 	beq.w	800c4f6 <_strtod_l+0x27e>
 800ce3e:	2b45      	cmp	r3, #69	; 0x45
 800ce40:	f43f ab59 	beq.w	800c4f6 <_strtod_l+0x27e>
 800ce44:	2201      	movs	r2, #1
 800ce46:	f7ff bb8d 	b.w	800c564 <_strtod_l+0x2ec>
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w
 800ce50:	ffc00000 	.word	0xffc00000
 800ce54:	41dfffff 	.word	0x41dfffff
 800ce58:	94a03595 	.word	0x94a03595
 800ce5c:	3fcfffff 	.word	0x3fcfffff

0800ce60 <_strtod_r>:
 800ce60:	4b01      	ldr	r3, [pc, #4]	; (800ce68 <_strtod_r+0x8>)
 800ce62:	f7ff ba09 	b.w	800c278 <_strtod_l>
 800ce66:	bf00      	nop
 800ce68:	200000b0 	.word	0x200000b0

0800ce6c <_strtol_l.isra.0>:
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce72:	4686      	mov	lr, r0
 800ce74:	d001      	beq.n	800ce7a <_strtol_l.isra.0+0xe>
 800ce76:	2b24      	cmp	r3, #36	; 0x24
 800ce78:	d906      	bls.n	800ce88 <_strtol_l.isra.0+0x1c>
 800ce7a:	f7fe fa31 	bl	800b2e0 <__errno>
 800ce7e:	2316      	movs	r3, #22
 800ce80:	6003      	str	r3, [r0, #0]
 800ce82:	2000      	movs	r0, #0
 800ce84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce88:	468c      	mov	ip, r1
 800ce8a:	4e3a      	ldr	r6, [pc, #232]	; (800cf74 <_strtol_l.isra.0+0x108>)
 800ce8c:	4660      	mov	r0, ip
 800ce8e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ce92:	5da5      	ldrb	r5, [r4, r6]
 800ce94:	f015 0508 	ands.w	r5, r5, #8
 800ce98:	d1f8      	bne.n	800ce8c <_strtol_l.isra.0+0x20>
 800ce9a:	2c2d      	cmp	r4, #45	; 0x2d
 800ce9c:	d133      	bne.n	800cf06 <_strtol_l.isra.0+0x9a>
 800ce9e:	f04f 0801 	mov.w	r8, #1
 800cea2:	f89c 4000 	ldrb.w	r4, [ip]
 800cea6:	f100 0c02 	add.w	ip, r0, #2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d05d      	beq.n	800cf6a <_strtol_l.isra.0+0xfe>
 800ceae:	2b10      	cmp	r3, #16
 800ceb0:	d10c      	bne.n	800cecc <_strtol_l.isra.0+0x60>
 800ceb2:	2c30      	cmp	r4, #48	; 0x30
 800ceb4:	d10a      	bne.n	800cecc <_strtol_l.isra.0+0x60>
 800ceb6:	f89c 0000 	ldrb.w	r0, [ip]
 800ceba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cebe:	2858      	cmp	r0, #88	; 0x58
 800cec0:	d14e      	bne.n	800cf60 <_strtol_l.isra.0+0xf4>
 800cec2:	2310      	movs	r3, #16
 800cec4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800cec8:	f10c 0c02 	add.w	ip, ip, #2
 800cecc:	2500      	movs	r5, #0
 800cece:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ced2:	3f01      	subs	r7, #1
 800ced4:	fbb7 f9f3 	udiv	r9, r7, r3
 800ced8:	4628      	mov	r0, r5
 800ceda:	fb03 7a19 	mls	sl, r3, r9, r7
 800cede:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800cee2:	2e09      	cmp	r6, #9
 800cee4:	d818      	bhi.n	800cf18 <_strtol_l.isra.0+0xac>
 800cee6:	4634      	mov	r4, r6
 800cee8:	42a3      	cmp	r3, r4
 800ceea:	dd24      	ble.n	800cf36 <_strtol_l.isra.0+0xca>
 800ceec:	2d00      	cmp	r5, #0
 800ceee:	db1f      	blt.n	800cf30 <_strtol_l.isra.0+0xc4>
 800cef0:	4581      	cmp	r9, r0
 800cef2:	d31d      	bcc.n	800cf30 <_strtol_l.isra.0+0xc4>
 800cef4:	d101      	bne.n	800cefa <_strtol_l.isra.0+0x8e>
 800cef6:	45a2      	cmp	sl, r4
 800cef8:	db1a      	blt.n	800cf30 <_strtol_l.isra.0+0xc4>
 800cefa:	2501      	movs	r5, #1
 800cefc:	fb00 4003 	mla	r0, r0, r3, r4
 800cf00:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800cf04:	e7eb      	b.n	800cede <_strtol_l.isra.0+0x72>
 800cf06:	2c2b      	cmp	r4, #43	; 0x2b
 800cf08:	bf08      	it	eq
 800cf0a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800cf0e:	46a8      	mov	r8, r5
 800cf10:	bf08      	it	eq
 800cf12:	f100 0c02 	addeq.w	ip, r0, #2
 800cf16:	e7c8      	b.n	800ceaa <_strtol_l.isra.0+0x3e>
 800cf18:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800cf1c:	2e19      	cmp	r6, #25
 800cf1e:	d801      	bhi.n	800cf24 <_strtol_l.isra.0+0xb8>
 800cf20:	3c37      	subs	r4, #55	; 0x37
 800cf22:	e7e1      	b.n	800cee8 <_strtol_l.isra.0+0x7c>
 800cf24:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800cf28:	2e19      	cmp	r6, #25
 800cf2a:	d804      	bhi.n	800cf36 <_strtol_l.isra.0+0xca>
 800cf2c:	3c57      	subs	r4, #87	; 0x57
 800cf2e:	e7db      	b.n	800cee8 <_strtol_l.isra.0+0x7c>
 800cf30:	f04f 35ff 	mov.w	r5, #4294967295
 800cf34:	e7e4      	b.n	800cf00 <_strtol_l.isra.0+0x94>
 800cf36:	2d00      	cmp	r5, #0
 800cf38:	da08      	bge.n	800cf4c <_strtol_l.isra.0+0xe0>
 800cf3a:	2322      	movs	r3, #34	; 0x22
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	f8ce 3000 	str.w	r3, [lr]
 800cf42:	2a00      	cmp	r2, #0
 800cf44:	d09e      	beq.n	800ce84 <_strtol_l.isra.0+0x18>
 800cf46:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cf4a:	e007      	b.n	800cf5c <_strtol_l.isra.0+0xf0>
 800cf4c:	f1b8 0f00 	cmp.w	r8, #0
 800cf50:	d000      	beq.n	800cf54 <_strtol_l.isra.0+0xe8>
 800cf52:	4240      	negs	r0, r0
 800cf54:	2a00      	cmp	r2, #0
 800cf56:	d095      	beq.n	800ce84 <_strtol_l.isra.0+0x18>
 800cf58:	2d00      	cmp	r5, #0
 800cf5a:	d1f4      	bne.n	800cf46 <_strtol_l.isra.0+0xda>
 800cf5c:	6011      	str	r1, [r2, #0]
 800cf5e:	e791      	b.n	800ce84 <_strtol_l.isra.0+0x18>
 800cf60:	2430      	movs	r4, #48	; 0x30
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1b2      	bne.n	800cecc <_strtol_l.isra.0+0x60>
 800cf66:	2308      	movs	r3, #8
 800cf68:	e7b0      	b.n	800cecc <_strtol_l.isra.0+0x60>
 800cf6a:	2c30      	cmp	r4, #48	; 0x30
 800cf6c:	d0a3      	beq.n	800ceb6 <_strtol_l.isra.0+0x4a>
 800cf6e:	230a      	movs	r3, #10
 800cf70:	e7ac      	b.n	800cecc <_strtol_l.isra.0+0x60>
 800cf72:	bf00      	nop
 800cf74:	08010441 	.word	0x08010441

0800cf78 <_strtol_r>:
 800cf78:	f7ff bf78 	b.w	800ce6c <_strtol_l.isra.0>

0800cf7c <__utoa>:
 800cf7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf7e:	b08b      	sub	sp, #44	; 0x2c
 800cf80:	4605      	mov	r5, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	466e      	mov	r6, sp
 800cf86:	4c1d      	ldr	r4, [pc, #116]	; (800cffc <__utoa+0x80>)
 800cf88:	f104 0c20 	add.w	ip, r4, #32
 800cf8c:	4637      	mov	r7, r6
 800cf8e:	6820      	ldr	r0, [r4, #0]
 800cf90:	6861      	ldr	r1, [r4, #4]
 800cf92:	3408      	adds	r4, #8
 800cf94:	c703      	stmia	r7!, {r0, r1}
 800cf96:	4564      	cmp	r4, ip
 800cf98:	463e      	mov	r6, r7
 800cf9a:	d1f7      	bne.n	800cf8c <__utoa+0x10>
 800cf9c:	7921      	ldrb	r1, [r4, #4]
 800cf9e:	6820      	ldr	r0, [r4, #0]
 800cfa0:	7139      	strb	r1, [r7, #4]
 800cfa2:	1e91      	subs	r1, r2, #2
 800cfa4:	2922      	cmp	r1, #34	; 0x22
 800cfa6:	6038      	str	r0, [r7, #0]
 800cfa8:	f04f 0100 	mov.w	r1, #0
 800cfac:	d904      	bls.n	800cfb8 <__utoa+0x3c>
 800cfae:	7019      	strb	r1, [r3, #0]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	b00b      	add	sp, #44	; 0x2c
 800cfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb8:	1e58      	subs	r0, r3, #1
 800cfba:	4684      	mov	ip, r0
 800cfbc:	fbb5 f7f2 	udiv	r7, r5, r2
 800cfc0:	fb02 5617 	mls	r6, r2, r7, r5
 800cfc4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800cfc8:	4476      	add	r6, lr
 800cfca:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cfce:	460c      	mov	r4, r1
 800cfd0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cfd4:	462e      	mov	r6, r5
 800cfd6:	42b2      	cmp	r2, r6
 800cfd8:	463d      	mov	r5, r7
 800cfda:	f101 0101 	add.w	r1, r1, #1
 800cfde:	d9ed      	bls.n	800cfbc <__utoa+0x40>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	545a      	strb	r2, [r3, r1]
 800cfe4:	1919      	adds	r1, r3, r4
 800cfe6:	1aa5      	subs	r5, r4, r2
 800cfe8:	42aa      	cmp	r2, r5
 800cfea:	dae2      	bge.n	800cfb2 <__utoa+0x36>
 800cfec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cff0:	780e      	ldrb	r6, [r1, #0]
 800cff2:	3201      	adds	r2, #1
 800cff4:	7006      	strb	r6, [r0, #0]
 800cff6:	f801 5901 	strb.w	r5, [r1], #-1
 800cffa:	e7f4      	b.n	800cfe6 <__utoa+0x6a>
 800cffc:	080105d8 	.word	0x080105d8

0800d000 <quorem>:
 800d000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d004:	6903      	ldr	r3, [r0, #16]
 800d006:	690c      	ldr	r4, [r1, #16]
 800d008:	4607      	mov	r7, r0
 800d00a:	42a3      	cmp	r3, r4
 800d00c:	f2c0 8083 	blt.w	800d116 <quorem+0x116>
 800d010:	3c01      	subs	r4, #1
 800d012:	f100 0514 	add.w	r5, r0, #20
 800d016:	f101 0814 	add.w	r8, r1, #20
 800d01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d01e:	9301      	str	r3, [sp, #4]
 800d020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d028:	3301      	adds	r3, #1
 800d02a:	429a      	cmp	r2, r3
 800d02c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d030:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d038:	d332      	bcc.n	800d0a0 <quorem+0xa0>
 800d03a:	f04f 0e00 	mov.w	lr, #0
 800d03e:	4640      	mov	r0, r8
 800d040:	46ac      	mov	ip, r5
 800d042:	46f2      	mov	sl, lr
 800d044:	f850 2b04 	ldr.w	r2, [r0], #4
 800d048:	b293      	uxth	r3, r2
 800d04a:	fb06 e303 	mla	r3, r6, r3, lr
 800d04e:	0c12      	lsrs	r2, r2, #16
 800d050:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d054:	fb06 e202 	mla	r2, r6, r2, lr
 800d058:	b29b      	uxth	r3, r3
 800d05a:	ebaa 0303 	sub.w	r3, sl, r3
 800d05e:	f8dc a000 	ldr.w	sl, [ip]
 800d062:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d066:	fa1f fa8a 	uxth.w	sl, sl
 800d06a:	4453      	add	r3, sl
 800d06c:	fa1f fa82 	uxth.w	sl, r2
 800d070:	f8dc 2000 	ldr.w	r2, [ip]
 800d074:	4581      	cmp	r9, r0
 800d076:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d07a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d07e:	b29b      	uxth	r3, r3
 800d080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d084:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d088:	f84c 3b04 	str.w	r3, [ip], #4
 800d08c:	d2da      	bcs.n	800d044 <quorem+0x44>
 800d08e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d092:	b92b      	cbnz	r3, 800d0a0 <quorem+0xa0>
 800d094:	9b01      	ldr	r3, [sp, #4]
 800d096:	3b04      	subs	r3, #4
 800d098:	429d      	cmp	r5, r3
 800d09a:	461a      	mov	r2, r3
 800d09c:	d32f      	bcc.n	800d0fe <quorem+0xfe>
 800d09e:	613c      	str	r4, [r7, #16]
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	f001 fc93 	bl	800e9cc <__mcmp>
 800d0a6:	2800      	cmp	r0, #0
 800d0a8:	db25      	blt.n	800d0f6 <quorem+0xf6>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f04f 0c00 	mov.w	ip, #0
 800d0b0:	3601      	adds	r6, #1
 800d0b2:	f858 1b04 	ldr.w	r1, [r8], #4
 800d0b6:	f8d0 e000 	ldr.w	lr, [r0]
 800d0ba:	b28b      	uxth	r3, r1
 800d0bc:	ebac 0303 	sub.w	r3, ip, r3
 800d0c0:	fa1f f28e 	uxth.w	r2, lr
 800d0c4:	4413      	add	r3, r2
 800d0c6:	0c0a      	lsrs	r2, r1, #16
 800d0c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d0cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d0d6:	45c1      	cmp	r9, r8
 800d0d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d0dc:	f840 3b04 	str.w	r3, [r0], #4
 800d0e0:	d2e7      	bcs.n	800d0b2 <quorem+0xb2>
 800d0e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0ea:	b922      	cbnz	r2, 800d0f6 <quorem+0xf6>
 800d0ec:	3b04      	subs	r3, #4
 800d0ee:	429d      	cmp	r5, r3
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	d30a      	bcc.n	800d10a <quorem+0x10a>
 800d0f4:	613c      	str	r4, [r7, #16]
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	b003      	add	sp, #12
 800d0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fe:	6812      	ldr	r2, [r2, #0]
 800d100:	3b04      	subs	r3, #4
 800d102:	2a00      	cmp	r2, #0
 800d104:	d1cb      	bne.n	800d09e <quorem+0x9e>
 800d106:	3c01      	subs	r4, #1
 800d108:	e7c6      	b.n	800d098 <quorem+0x98>
 800d10a:	6812      	ldr	r2, [r2, #0]
 800d10c:	3b04      	subs	r3, #4
 800d10e:	2a00      	cmp	r2, #0
 800d110:	d1f0      	bne.n	800d0f4 <quorem+0xf4>
 800d112:	3c01      	subs	r4, #1
 800d114:	e7eb      	b.n	800d0ee <quorem+0xee>
 800d116:	2000      	movs	r0, #0
 800d118:	e7ee      	b.n	800d0f8 <quorem+0xf8>
 800d11a:	0000      	movs	r0, r0
 800d11c:	0000      	movs	r0, r0
	...

0800d120 <_dtoa_r>:
 800d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	4616      	mov	r6, r2
 800d126:	461f      	mov	r7, r3
 800d128:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d12a:	b099      	sub	sp, #100	; 0x64
 800d12c:	4605      	mov	r5, r0
 800d12e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d132:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d136:	b974      	cbnz	r4, 800d156 <_dtoa_r+0x36>
 800d138:	2010      	movs	r0, #16
 800d13a:	f7fe f915 	bl	800b368 <malloc>
 800d13e:	4602      	mov	r2, r0
 800d140:	6268      	str	r0, [r5, #36]	; 0x24
 800d142:	b920      	cbnz	r0, 800d14e <_dtoa_r+0x2e>
 800d144:	21ea      	movs	r1, #234	; 0xea
 800d146:	4bae      	ldr	r3, [pc, #696]	; (800d400 <_dtoa_r+0x2e0>)
 800d148:	48ae      	ldr	r0, [pc, #696]	; (800d404 <_dtoa_r+0x2e4>)
 800d14a:	f001 ffc3 	bl	800f0d4 <__assert_func>
 800d14e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d152:	6004      	str	r4, [r0, #0]
 800d154:	60c4      	str	r4, [r0, #12]
 800d156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d158:	6819      	ldr	r1, [r3, #0]
 800d15a:	b151      	cbz	r1, 800d172 <_dtoa_r+0x52>
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	2301      	movs	r3, #1
 800d160:	4093      	lsls	r3, r2
 800d162:	604a      	str	r2, [r1, #4]
 800d164:	608b      	str	r3, [r1, #8]
 800d166:	4628      	mov	r0, r5
 800d168:	f001 f9ac 	bl	800e4c4 <_Bfree>
 800d16c:	2200      	movs	r2, #0
 800d16e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	1e3b      	subs	r3, r7, #0
 800d174:	bfaf      	iteee	ge
 800d176:	2300      	movge	r3, #0
 800d178:	2201      	movlt	r2, #1
 800d17a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d17e:	9305      	strlt	r3, [sp, #20]
 800d180:	bfa8      	it	ge
 800d182:	f8c8 3000 	strge.w	r3, [r8]
 800d186:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d18a:	4b9f      	ldr	r3, [pc, #636]	; (800d408 <_dtoa_r+0x2e8>)
 800d18c:	bfb8      	it	lt
 800d18e:	f8c8 2000 	strlt.w	r2, [r8]
 800d192:	ea33 0309 	bics.w	r3, r3, r9
 800d196:	d119      	bne.n	800d1cc <_dtoa_r+0xac>
 800d198:	f242 730f 	movw	r3, #9999	; 0x270f
 800d19c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1a4:	4333      	orrs	r3, r6
 800d1a6:	f000 8580 	beq.w	800dcaa <_dtoa_r+0xb8a>
 800d1aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d1ac:	b953      	cbnz	r3, 800d1c4 <_dtoa_r+0xa4>
 800d1ae:	4b97      	ldr	r3, [pc, #604]	; (800d40c <_dtoa_r+0x2ec>)
 800d1b0:	e022      	b.n	800d1f8 <_dtoa_r+0xd8>
 800d1b2:	4b97      	ldr	r3, [pc, #604]	; (800d410 <_dtoa_r+0x2f0>)
 800d1b4:	9308      	str	r3, [sp, #32]
 800d1b6:	3308      	adds	r3, #8
 800d1b8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	9808      	ldr	r0, [sp, #32]
 800d1be:	b019      	add	sp, #100	; 0x64
 800d1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c4:	4b91      	ldr	r3, [pc, #580]	; (800d40c <_dtoa_r+0x2ec>)
 800d1c6:	9308      	str	r3, [sp, #32]
 800d1c8:	3303      	adds	r3, #3
 800d1ca:	e7f5      	b.n	800d1b8 <_dtoa_r+0x98>
 800d1cc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d1d0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d1d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f7f3 fc50 	bl	8000a80 <__aeabi_dcmpeq>
 800d1e0:	4680      	mov	r8, r0
 800d1e2:	b158      	cbz	r0, 800d1fc <_dtoa_r+0xdc>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1e8:	6013      	str	r3, [r2, #0]
 800d1ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 8559 	beq.w	800dca4 <_dtoa_r+0xb84>
 800d1f2:	4888      	ldr	r0, [pc, #544]	; (800d414 <_dtoa_r+0x2f4>)
 800d1f4:	6018      	str	r0, [r3, #0]
 800d1f6:	1e43      	subs	r3, r0, #1
 800d1f8:	9308      	str	r3, [sp, #32]
 800d1fa:	e7df      	b.n	800d1bc <_dtoa_r+0x9c>
 800d1fc:	ab16      	add	r3, sp, #88	; 0x58
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	ab17      	add	r3, sp, #92	; 0x5c
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	4628      	mov	r0, r5
 800d206:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d20a:	f001 fd05 	bl	800ec18 <__d2b>
 800d20e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d212:	4682      	mov	sl, r0
 800d214:	2c00      	cmp	r4, #0
 800d216:	d07e      	beq.n	800d316 <_dtoa_r+0x1f6>
 800d218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d21e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d226:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d22a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d22e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d232:	2200      	movs	r2, #0
 800d234:	4b78      	ldr	r3, [pc, #480]	; (800d418 <_dtoa_r+0x2f8>)
 800d236:	f7f3 f803 	bl	8000240 <__aeabi_dsub>
 800d23a:	a36b      	add	r3, pc, #428	; (adr r3, 800d3e8 <_dtoa_r+0x2c8>)
 800d23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d240:	f7f3 f9b6 	bl	80005b0 <__aeabi_dmul>
 800d244:	a36a      	add	r3, pc, #424	; (adr r3, 800d3f0 <_dtoa_r+0x2d0>)
 800d246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24a:	f7f2 fffb 	bl	8000244 <__adddf3>
 800d24e:	4606      	mov	r6, r0
 800d250:	4620      	mov	r0, r4
 800d252:	460f      	mov	r7, r1
 800d254:	f7f3 f942 	bl	80004dc <__aeabi_i2d>
 800d258:	a367      	add	r3, pc, #412	; (adr r3, 800d3f8 <_dtoa_r+0x2d8>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f3 f9a7 	bl	80005b0 <__aeabi_dmul>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4630      	mov	r0, r6
 800d268:	4639      	mov	r1, r7
 800d26a:	f7f2 ffeb 	bl	8000244 <__adddf3>
 800d26e:	4606      	mov	r6, r0
 800d270:	460f      	mov	r7, r1
 800d272:	f7f3 fc4d 	bl	8000b10 <__aeabi_d2iz>
 800d276:	2200      	movs	r2, #0
 800d278:	4681      	mov	r9, r0
 800d27a:	2300      	movs	r3, #0
 800d27c:	4630      	mov	r0, r6
 800d27e:	4639      	mov	r1, r7
 800d280:	f7f3 fc08 	bl	8000a94 <__aeabi_dcmplt>
 800d284:	b148      	cbz	r0, 800d29a <_dtoa_r+0x17a>
 800d286:	4648      	mov	r0, r9
 800d288:	f7f3 f928 	bl	80004dc <__aeabi_i2d>
 800d28c:	4632      	mov	r2, r6
 800d28e:	463b      	mov	r3, r7
 800d290:	f7f3 fbf6 	bl	8000a80 <__aeabi_dcmpeq>
 800d294:	b908      	cbnz	r0, 800d29a <_dtoa_r+0x17a>
 800d296:	f109 39ff 	add.w	r9, r9, #4294967295
 800d29a:	f1b9 0f16 	cmp.w	r9, #22
 800d29e:	d857      	bhi.n	800d350 <_dtoa_r+0x230>
 800d2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2a4:	4b5d      	ldr	r3, [pc, #372]	; (800d41c <_dtoa_r+0x2fc>)
 800d2a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	f7f3 fbf1 	bl	8000a94 <__aeabi_dcmplt>
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	d04e      	beq.n	800d354 <_dtoa_r+0x234>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f109 39ff 	add.w	r9, r9, #4294967295
 800d2bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d2c0:	1b1c      	subs	r4, r3, r4
 800d2c2:	1e63      	subs	r3, r4, #1
 800d2c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c6:	bf49      	itett	mi
 800d2c8:	f1c4 0301 	rsbmi	r3, r4, #1
 800d2cc:	2300      	movpl	r3, #0
 800d2ce:	9306      	strmi	r3, [sp, #24]
 800d2d0:	2300      	movmi	r3, #0
 800d2d2:	bf54      	ite	pl
 800d2d4:	9306      	strpl	r3, [sp, #24]
 800d2d6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d2d8:	f1b9 0f00 	cmp.w	r9, #0
 800d2dc:	db3c      	blt.n	800d358 <_dtoa_r+0x238>
 800d2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d2e4:	444b      	add	r3, r9
 800d2e6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800d2ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2ee:	2b09      	cmp	r3, #9
 800d2f0:	d86c      	bhi.n	800d3cc <_dtoa_r+0x2ac>
 800d2f2:	2b05      	cmp	r3, #5
 800d2f4:	bfc4      	itt	gt
 800d2f6:	3b04      	subgt	r3, #4
 800d2f8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d2fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2fc:	bfc8      	it	gt
 800d2fe:	2400      	movgt	r4, #0
 800d300:	f1a3 0302 	sub.w	r3, r3, #2
 800d304:	bfd8      	it	le
 800d306:	2401      	movle	r4, #1
 800d308:	2b03      	cmp	r3, #3
 800d30a:	f200 808b 	bhi.w	800d424 <_dtoa_r+0x304>
 800d30e:	e8df f003 	tbb	[pc, r3]
 800d312:	4f2d      	.short	0x4f2d
 800d314:	5b4d      	.short	0x5b4d
 800d316:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d31a:	441c      	add	r4, r3
 800d31c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d320:	2b20      	cmp	r3, #32
 800d322:	bfc3      	ittte	gt
 800d324:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d328:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d32c:	fa09 f303 	lslgt.w	r3, r9, r3
 800d330:	f1c3 0320 	rsble	r3, r3, #32
 800d334:	bfc6      	itte	gt
 800d336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d33a:	4318      	orrgt	r0, r3
 800d33c:	fa06 f003 	lslle.w	r0, r6, r3
 800d340:	f7f3 f8bc 	bl	80004bc <__aeabi_ui2d>
 800d344:	2301      	movs	r3, #1
 800d346:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d34a:	3c01      	subs	r4, #1
 800d34c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d34e:	e770      	b.n	800d232 <_dtoa_r+0x112>
 800d350:	2301      	movs	r3, #1
 800d352:	e7b3      	b.n	800d2bc <_dtoa_r+0x19c>
 800d354:	900f      	str	r0, [sp, #60]	; 0x3c
 800d356:	e7b2      	b.n	800d2be <_dtoa_r+0x19e>
 800d358:	9b06      	ldr	r3, [sp, #24]
 800d35a:	eba3 0309 	sub.w	r3, r3, r9
 800d35e:	9306      	str	r3, [sp, #24]
 800d360:	f1c9 0300 	rsb	r3, r9, #0
 800d364:	930a      	str	r3, [sp, #40]	; 0x28
 800d366:	2300      	movs	r3, #0
 800d368:	930e      	str	r3, [sp, #56]	; 0x38
 800d36a:	e7bf      	b.n	800d2ec <_dtoa_r+0x1cc>
 800d36c:	2300      	movs	r3, #0
 800d36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d370:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d372:	2b00      	cmp	r3, #0
 800d374:	dc59      	bgt.n	800d42a <_dtoa_r+0x30a>
 800d376:	f04f 0b01 	mov.w	fp, #1
 800d37a:	465b      	mov	r3, fp
 800d37c:	f8cd b008 	str.w	fp, [sp, #8]
 800d380:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800d384:	2200      	movs	r2, #0
 800d386:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d388:	6042      	str	r2, [r0, #4]
 800d38a:	2204      	movs	r2, #4
 800d38c:	f102 0614 	add.w	r6, r2, #20
 800d390:	429e      	cmp	r6, r3
 800d392:	6841      	ldr	r1, [r0, #4]
 800d394:	d94f      	bls.n	800d436 <_dtoa_r+0x316>
 800d396:	4628      	mov	r0, r5
 800d398:	f001 f854 	bl	800e444 <_Balloc>
 800d39c:	9008      	str	r0, [sp, #32]
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d14d      	bne.n	800d43e <_dtoa_r+0x31e>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d3a8:	4b1d      	ldr	r3, [pc, #116]	; (800d420 <_dtoa_r+0x300>)
 800d3aa:	e6cd      	b.n	800d148 <_dtoa_r+0x28>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e7de      	b.n	800d36e <_dtoa_r+0x24e>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d3b6:	eb09 0b03 	add.w	fp, r9, r3
 800d3ba:	f10b 0301 	add.w	r3, fp, #1
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	9302      	str	r3, [sp, #8]
 800d3c2:	bfb8      	it	lt
 800d3c4:	2301      	movlt	r3, #1
 800d3c6:	e7dd      	b.n	800d384 <_dtoa_r+0x264>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e7f2      	b.n	800d3b2 <_dtoa_r+0x292>
 800d3cc:	2401      	movs	r4, #1
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	940b      	str	r4, [sp, #44]	; 0x2c
 800d3d2:	9322      	str	r3, [sp, #136]	; 0x88
 800d3d4:	f04f 3bff 	mov.w	fp, #4294967295
 800d3d8:	2200      	movs	r2, #0
 800d3da:	2312      	movs	r3, #18
 800d3dc:	f8cd b008 	str.w	fp, [sp, #8]
 800d3e0:	9223      	str	r2, [sp, #140]	; 0x8c
 800d3e2:	e7cf      	b.n	800d384 <_dtoa_r+0x264>
 800d3e4:	f3af 8000 	nop.w
 800d3e8:	636f4361 	.word	0x636f4361
 800d3ec:	3fd287a7 	.word	0x3fd287a7
 800d3f0:	8b60c8b3 	.word	0x8b60c8b3
 800d3f4:	3fc68a28 	.word	0x3fc68a28
 800d3f8:	509f79fb 	.word	0x509f79fb
 800d3fc:	3fd34413 	.word	0x3fd34413
 800d400:	0801060a 	.word	0x0801060a
 800d404:	08010621 	.word	0x08010621
 800d408:	7ff00000 	.word	0x7ff00000
 800d40c:	08010606 	.word	0x08010606
 800d410:	080105fd 	.word	0x080105fd
 800d414:	08010559 	.word	0x08010559
 800d418:	3ff80000 	.word	0x3ff80000
 800d41c:	08010798 	.word	0x08010798
 800d420:	08010680 	.word	0x08010680
 800d424:	2301      	movs	r3, #1
 800d426:	930b      	str	r3, [sp, #44]	; 0x2c
 800d428:	e7d4      	b.n	800d3d4 <_dtoa_r+0x2b4>
 800d42a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800d42e:	465b      	mov	r3, fp
 800d430:	f8cd b008 	str.w	fp, [sp, #8]
 800d434:	e7a6      	b.n	800d384 <_dtoa_r+0x264>
 800d436:	3101      	adds	r1, #1
 800d438:	6041      	str	r1, [r0, #4]
 800d43a:	0052      	lsls	r2, r2, #1
 800d43c:	e7a6      	b.n	800d38c <_dtoa_r+0x26c>
 800d43e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d440:	9a08      	ldr	r2, [sp, #32]
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	9b02      	ldr	r3, [sp, #8]
 800d446:	2b0e      	cmp	r3, #14
 800d448:	f200 80a8 	bhi.w	800d59c <_dtoa_r+0x47c>
 800d44c:	2c00      	cmp	r4, #0
 800d44e:	f000 80a5 	beq.w	800d59c <_dtoa_r+0x47c>
 800d452:	f1b9 0f00 	cmp.w	r9, #0
 800d456:	dd34      	ble.n	800d4c2 <_dtoa_r+0x3a2>
 800d458:	4a9a      	ldr	r2, [pc, #616]	; (800d6c4 <_dtoa_r+0x5a4>)
 800d45a:	f009 030f 	and.w	r3, r9, #15
 800d45e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d462:	f419 7f80 	tst.w	r9, #256	; 0x100
 800d466:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d46a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d46e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800d472:	d016      	beq.n	800d4a2 <_dtoa_r+0x382>
 800d474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d478:	4b93      	ldr	r3, [pc, #588]	; (800d6c8 <_dtoa_r+0x5a8>)
 800d47a:	2703      	movs	r7, #3
 800d47c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d480:	f7f3 f9c0 	bl	8000804 <__aeabi_ddiv>
 800d484:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d488:	f004 040f 	and.w	r4, r4, #15
 800d48c:	4e8e      	ldr	r6, [pc, #568]	; (800d6c8 <_dtoa_r+0x5a8>)
 800d48e:	b954      	cbnz	r4, 800d4a6 <_dtoa_r+0x386>
 800d490:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d498:	f7f3 f9b4 	bl	8000804 <__aeabi_ddiv>
 800d49c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4a0:	e029      	b.n	800d4f6 <_dtoa_r+0x3d6>
 800d4a2:	2702      	movs	r7, #2
 800d4a4:	e7f2      	b.n	800d48c <_dtoa_r+0x36c>
 800d4a6:	07e1      	lsls	r1, r4, #31
 800d4a8:	d508      	bpl.n	800d4bc <_dtoa_r+0x39c>
 800d4aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d4ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d4b2:	f7f3 f87d 	bl	80005b0 <__aeabi_dmul>
 800d4b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d4ba:	3701      	adds	r7, #1
 800d4bc:	1064      	asrs	r4, r4, #1
 800d4be:	3608      	adds	r6, #8
 800d4c0:	e7e5      	b.n	800d48e <_dtoa_r+0x36e>
 800d4c2:	f000 80a5 	beq.w	800d610 <_dtoa_r+0x4f0>
 800d4c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4ca:	f1c9 0400 	rsb	r4, r9, #0
 800d4ce:	4b7d      	ldr	r3, [pc, #500]	; (800d6c4 <_dtoa_r+0x5a4>)
 800d4d0:	f004 020f 	and.w	r2, r4, #15
 800d4d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	f7f3 f868 	bl	80005b0 <__aeabi_dmul>
 800d4e0:	2702      	movs	r7, #2
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4e8:	4e77      	ldr	r6, [pc, #476]	; (800d6c8 <_dtoa_r+0x5a8>)
 800d4ea:	1124      	asrs	r4, r4, #4
 800d4ec:	2c00      	cmp	r4, #0
 800d4ee:	f040 8084 	bne.w	800d5fa <_dtoa_r+0x4da>
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1d2      	bne.n	800d49c <_dtoa_r+0x37c>
 800d4f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 808b 	beq.w	800d614 <_dtoa_r+0x4f4>
 800d4fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d502:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d506:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d50a:	2200      	movs	r2, #0
 800d50c:	4b6f      	ldr	r3, [pc, #444]	; (800d6cc <_dtoa_r+0x5ac>)
 800d50e:	f7f3 fac1 	bl	8000a94 <__aeabi_dcmplt>
 800d512:	2800      	cmp	r0, #0
 800d514:	d07e      	beq.n	800d614 <_dtoa_r+0x4f4>
 800d516:	9b02      	ldr	r3, [sp, #8]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d07b      	beq.n	800d614 <_dtoa_r+0x4f4>
 800d51c:	f1bb 0f00 	cmp.w	fp, #0
 800d520:	dd38      	ble.n	800d594 <_dtoa_r+0x474>
 800d522:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d526:	2200      	movs	r2, #0
 800d528:	4b69      	ldr	r3, [pc, #420]	; (800d6d0 <_dtoa_r+0x5b0>)
 800d52a:	f7f3 f841 	bl	80005b0 <__aeabi_dmul>
 800d52e:	465c      	mov	r4, fp
 800d530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d534:	f109 38ff 	add.w	r8, r9, #4294967295
 800d538:	3701      	adds	r7, #1
 800d53a:	4638      	mov	r0, r7
 800d53c:	f7f2 ffce 	bl	80004dc <__aeabi_i2d>
 800d540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d544:	f7f3 f834 	bl	80005b0 <__aeabi_dmul>
 800d548:	2200      	movs	r2, #0
 800d54a:	4b62      	ldr	r3, [pc, #392]	; (800d6d4 <_dtoa_r+0x5b4>)
 800d54c:	f7f2 fe7a 	bl	8000244 <__adddf3>
 800d550:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d554:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d558:	9611      	str	r6, [sp, #68]	; 0x44
 800d55a:	2c00      	cmp	r4, #0
 800d55c:	d15d      	bne.n	800d61a <_dtoa_r+0x4fa>
 800d55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d562:	2200      	movs	r2, #0
 800d564:	4b5c      	ldr	r3, [pc, #368]	; (800d6d8 <_dtoa_r+0x5b8>)
 800d566:	f7f2 fe6b 	bl	8000240 <__aeabi_dsub>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d572:	4633      	mov	r3, r6
 800d574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d576:	f7f3 faab 	bl	8000ad0 <__aeabi_dcmpgt>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	f040 829e 	bne.w	800dabc <_dtoa_r+0x99c>
 800d580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d584:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d586:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d58a:	f7f3 fa83 	bl	8000a94 <__aeabi_dcmplt>
 800d58e:	2800      	cmp	r0, #0
 800d590:	f040 8292 	bne.w	800dab8 <_dtoa_r+0x998>
 800d594:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d598:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d59c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f2c0 8153 	blt.w	800d84a <_dtoa_r+0x72a>
 800d5a4:	f1b9 0f0e 	cmp.w	r9, #14
 800d5a8:	f300 814f 	bgt.w	800d84a <_dtoa_r+0x72a>
 800d5ac:	4b45      	ldr	r3, [pc, #276]	; (800d6c4 <_dtoa_r+0x5a4>)
 800d5ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d5b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d5b6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d5ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f280 80db 	bge.w	800d778 <_dtoa_r+0x658>
 800d5c2:	9b02      	ldr	r3, [sp, #8]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	f300 80d7 	bgt.w	800d778 <_dtoa_r+0x658>
 800d5ca:	f040 8274 	bne.w	800dab6 <_dtoa_r+0x996>
 800d5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	4b40      	ldr	r3, [pc, #256]	; (800d6d8 <_dtoa_r+0x5b8>)
 800d5d6:	f7f2 ffeb 	bl	80005b0 <__aeabi_dmul>
 800d5da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5de:	f7f3 fa6d 	bl	8000abc <__aeabi_dcmpge>
 800d5e2:	9c02      	ldr	r4, [sp, #8]
 800d5e4:	4626      	mov	r6, r4
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	f040 824a 	bne.w	800da80 <_dtoa_r+0x960>
 800d5ec:	2331      	movs	r3, #49	; 0x31
 800d5ee:	9f08      	ldr	r7, [sp, #32]
 800d5f0:	f109 0901 	add.w	r9, r9, #1
 800d5f4:	f807 3b01 	strb.w	r3, [r7], #1
 800d5f8:	e246      	b.n	800da88 <_dtoa_r+0x968>
 800d5fa:	07e2      	lsls	r2, r4, #31
 800d5fc:	d505      	bpl.n	800d60a <_dtoa_r+0x4ea>
 800d5fe:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d602:	f7f2 ffd5 	bl	80005b0 <__aeabi_dmul>
 800d606:	2301      	movs	r3, #1
 800d608:	3701      	adds	r7, #1
 800d60a:	1064      	asrs	r4, r4, #1
 800d60c:	3608      	adds	r6, #8
 800d60e:	e76d      	b.n	800d4ec <_dtoa_r+0x3cc>
 800d610:	2702      	movs	r7, #2
 800d612:	e770      	b.n	800d4f6 <_dtoa_r+0x3d6>
 800d614:	46c8      	mov	r8, r9
 800d616:	9c02      	ldr	r4, [sp, #8]
 800d618:	e78f      	b.n	800d53a <_dtoa_r+0x41a>
 800d61a:	9908      	ldr	r1, [sp, #32]
 800d61c:	4b29      	ldr	r3, [pc, #164]	; (800d6c4 <_dtoa_r+0x5a4>)
 800d61e:	4421      	add	r1, r4
 800d620:	9112      	str	r1, [sp, #72]	; 0x48
 800d622:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d624:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d628:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d62c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d630:	2900      	cmp	r1, #0
 800d632:	d055      	beq.n	800d6e0 <_dtoa_r+0x5c0>
 800d634:	2000      	movs	r0, #0
 800d636:	4929      	ldr	r1, [pc, #164]	; (800d6dc <_dtoa_r+0x5bc>)
 800d638:	f7f3 f8e4 	bl	8000804 <__aeabi_ddiv>
 800d63c:	463b      	mov	r3, r7
 800d63e:	4632      	mov	r2, r6
 800d640:	f7f2 fdfe 	bl	8000240 <__aeabi_dsub>
 800d644:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d648:	9f08      	ldr	r7, [sp, #32]
 800d64a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d64e:	f7f3 fa5f 	bl	8000b10 <__aeabi_d2iz>
 800d652:	4604      	mov	r4, r0
 800d654:	f7f2 ff42 	bl	80004dc <__aeabi_i2d>
 800d658:	4602      	mov	r2, r0
 800d65a:	460b      	mov	r3, r1
 800d65c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d660:	f7f2 fdee 	bl	8000240 <__aeabi_dsub>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	3430      	adds	r4, #48	; 0x30
 800d66a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d66e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d672:	f807 4b01 	strb.w	r4, [r7], #1
 800d676:	f7f3 fa0d 	bl	8000a94 <__aeabi_dcmplt>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d174      	bne.n	800d768 <_dtoa_r+0x648>
 800d67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d682:	2000      	movs	r0, #0
 800d684:	4911      	ldr	r1, [pc, #68]	; (800d6cc <_dtoa_r+0x5ac>)
 800d686:	f7f2 fddb 	bl	8000240 <__aeabi_dsub>
 800d68a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d68e:	f7f3 fa01 	bl	8000a94 <__aeabi_dcmplt>
 800d692:	2800      	cmp	r0, #0
 800d694:	f040 80b6 	bne.w	800d804 <_dtoa_r+0x6e4>
 800d698:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d69a:	429f      	cmp	r7, r3
 800d69c:	f43f af7a 	beq.w	800d594 <_dtoa_r+0x474>
 800d6a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	4b0a      	ldr	r3, [pc, #40]	; (800d6d0 <_dtoa_r+0x5b0>)
 800d6a8:	f7f2 ff82 	bl	80005b0 <__aeabi_dmul>
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d6b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6b6:	4b06      	ldr	r3, [pc, #24]	; (800d6d0 <_dtoa_r+0x5b0>)
 800d6b8:	f7f2 ff7a 	bl	80005b0 <__aeabi_dmul>
 800d6bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6c0:	e7c3      	b.n	800d64a <_dtoa_r+0x52a>
 800d6c2:	bf00      	nop
 800d6c4:	08010798 	.word	0x08010798
 800d6c8:	08010770 	.word	0x08010770
 800d6cc:	3ff00000 	.word	0x3ff00000
 800d6d0:	40240000 	.word	0x40240000
 800d6d4:	401c0000 	.word	0x401c0000
 800d6d8:	40140000 	.word	0x40140000
 800d6dc:	3fe00000 	.word	0x3fe00000
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	4639      	mov	r1, r7
 800d6e4:	f7f2 ff64 	bl	80005b0 <__aeabi_dmul>
 800d6e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d6ee:	9c08      	ldr	r4, [sp, #32]
 800d6f0:	9314      	str	r3, [sp, #80]	; 0x50
 800d6f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6f6:	f7f3 fa0b 	bl	8000b10 <__aeabi_d2iz>
 800d6fa:	9015      	str	r0, [sp, #84]	; 0x54
 800d6fc:	f7f2 feee 	bl	80004dc <__aeabi_i2d>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d708:	f7f2 fd9a 	bl	8000240 <__aeabi_dsub>
 800d70c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d70e:	4606      	mov	r6, r0
 800d710:	3330      	adds	r3, #48	; 0x30
 800d712:	f804 3b01 	strb.w	r3, [r4], #1
 800d716:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d718:	460f      	mov	r7, r1
 800d71a:	429c      	cmp	r4, r3
 800d71c:	f04f 0200 	mov.w	r2, #0
 800d720:	d124      	bne.n	800d76c <_dtoa_r+0x64c>
 800d722:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d726:	4bb3      	ldr	r3, [pc, #716]	; (800d9f4 <_dtoa_r+0x8d4>)
 800d728:	f7f2 fd8c 	bl	8000244 <__adddf3>
 800d72c:	4602      	mov	r2, r0
 800d72e:	460b      	mov	r3, r1
 800d730:	4630      	mov	r0, r6
 800d732:	4639      	mov	r1, r7
 800d734:	f7f3 f9cc 	bl	8000ad0 <__aeabi_dcmpgt>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d162      	bne.n	800d802 <_dtoa_r+0x6e2>
 800d73c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d740:	2000      	movs	r0, #0
 800d742:	49ac      	ldr	r1, [pc, #688]	; (800d9f4 <_dtoa_r+0x8d4>)
 800d744:	f7f2 fd7c 	bl	8000240 <__aeabi_dsub>
 800d748:	4602      	mov	r2, r0
 800d74a:	460b      	mov	r3, r1
 800d74c:	4630      	mov	r0, r6
 800d74e:	4639      	mov	r1, r7
 800d750:	f7f3 f9a0 	bl	8000a94 <__aeabi_dcmplt>
 800d754:	2800      	cmp	r0, #0
 800d756:	f43f af1d 	beq.w	800d594 <_dtoa_r+0x474>
 800d75a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d75c:	1e7b      	subs	r3, r7, #1
 800d75e:	9314      	str	r3, [sp, #80]	; 0x50
 800d760:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d764:	2b30      	cmp	r3, #48	; 0x30
 800d766:	d0f8      	beq.n	800d75a <_dtoa_r+0x63a>
 800d768:	46c1      	mov	r9, r8
 800d76a:	e03a      	b.n	800d7e2 <_dtoa_r+0x6c2>
 800d76c:	4ba2      	ldr	r3, [pc, #648]	; (800d9f8 <_dtoa_r+0x8d8>)
 800d76e:	f7f2 ff1f 	bl	80005b0 <__aeabi_dmul>
 800d772:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d776:	e7bc      	b.n	800d6f2 <_dtoa_r+0x5d2>
 800d778:	9f08      	ldr	r7, [sp, #32]
 800d77a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d77e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d782:	f7f3 f83f 	bl	8000804 <__aeabi_ddiv>
 800d786:	f7f3 f9c3 	bl	8000b10 <__aeabi_d2iz>
 800d78a:	4604      	mov	r4, r0
 800d78c:	f7f2 fea6 	bl	80004dc <__aeabi_i2d>
 800d790:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d794:	f7f2 ff0c 	bl	80005b0 <__aeabi_dmul>
 800d798:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d79c:	460b      	mov	r3, r1
 800d79e:	4602      	mov	r2, r0
 800d7a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7a4:	f7f2 fd4c 	bl	8000240 <__aeabi_dsub>
 800d7a8:	f807 6b01 	strb.w	r6, [r7], #1
 800d7ac:	9e08      	ldr	r6, [sp, #32]
 800d7ae:	9b02      	ldr	r3, [sp, #8]
 800d7b0:	1bbe      	subs	r6, r7, r6
 800d7b2:	42b3      	cmp	r3, r6
 800d7b4:	d13a      	bne.n	800d82c <_dtoa_r+0x70c>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	f7f2 fd43 	bl	8000244 <__adddf3>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7ca:	f7f3 f981 	bl	8000ad0 <__aeabi_dcmpgt>
 800d7ce:	bb58      	cbnz	r0, 800d828 <_dtoa_r+0x708>
 800d7d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7d8:	f7f3 f952 	bl	8000a80 <__aeabi_dcmpeq>
 800d7dc:	b108      	cbz	r0, 800d7e2 <_dtoa_r+0x6c2>
 800d7de:	07e1      	lsls	r1, r4, #31
 800d7e0:	d422      	bmi.n	800d828 <_dtoa_r+0x708>
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	4651      	mov	r1, sl
 800d7e6:	f000 fe6d 	bl	800e4c4 <_Bfree>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	703b      	strb	r3, [r7, #0]
 800d7ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d7f0:	f109 0001 	add.w	r0, r9, #1
 800d7f4:	6018      	str	r0, [r3, #0]
 800d7f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f43f acdf 	beq.w	800d1bc <_dtoa_r+0x9c>
 800d7fe:	601f      	str	r7, [r3, #0]
 800d800:	e4dc      	b.n	800d1bc <_dtoa_r+0x9c>
 800d802:	4627      	mov	r7, r4
 800d804:	463b      	mov	r3, r7
 800d806:	461f      	mov	r7, r3
 800d808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d80c:	2a39      	cmp	r2, #57	; 0x39
 800d80e:	d107      	bne.n	800d820 <_dtoa_r+0x700>
 800d810:	9a08      	ldr	r2, [sp, #32]
 800d812:	429a      	cmp	r2, r3
 800d814:	d1f7      	bne.n	800d806 <_dtoa_r+0x6e6>
 800d816:	2230      	movs	r2, #48	; 0x30
 800d818:	9908      	ldr	r1, [sp, #32]
 800d81a:	f108 0801 	add.w	r8, r8, #1
 800d81e:	700a      	strb	r2, [r1, #0]
 800d820:	781a      	ldrb	r2, [r3, #0]
 800d822:	3201      	adds	r2, #1
 800d824:	701a      	strb	r2, [r3, #0]
 800d826:	e79f      	b.n	800d768 <_dtoa_r+0x648>
 800d828:	46c8      	mov	r8, r9
 800d82a:	e7eb      	b.n	800d804 <_dtoa_r+0x6e4>
 800d82c:	2200      	movs	r2, #0
 800d82e:	4b72      	ldr	r3, [pc, #456]	; (800d9f8 <_dtoa_r+0x8d8>)
 800d830:	f7f2 febe 	bl	80005b0 <__aeabi_dmul>
 800d834:	4602      	mov	r2, r0
 800d836:	460b      	mov	r3, r1
 800d838:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d83c:	2200      	movs	r2, #0
 800d83e:	2300      	movs	r3, #0
 800d840:	f7f3 f91e 	bl	8000a80 <__aeabi_dcmpeq>
 800d844:	2800      	cmp	r0, #0
 800d846:	d098      	beq.n	800d77a <_dtoa_r+0x65a>
 800d848:	e7cb      	b.n	800d7e2 <_dtoa_r+0x6c2>
 800d84a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	f000 80cd 	beq.w	800d9ec <_dtoa_r+0x8cc>
 800d852:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d854:	2a01      	cmp	r2, #1
 800d856:	f300 80af 	bgt.w	800d9b8 <_dtoa_r+0x898>
 800d85a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d85c:	2a00      	cmp	r2, #0
 800d85e:	f000 80a7 	beq.w	800d9b0 <_dtoa_r+0x890>
 800d862:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d866:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d868:	9f06      	ldr	r7, [sp, #24]
 800d86a:	9a06      	ldr	r2, [sp, #24]
 800d86c:	2101      	movs	r1, #1
 800d86e:	441a      	add	r2, r3
 800d870:	9206      	str	r2, [sp, #24]
 800d872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d874:	4628      	mov	r0, r5
 800d876:	441a      	add	r2, r3
 800d878:	9209      	str	r2, [sp, #36]	; 0x24
 800d87a:	f000 ff27 	bl	800e6cc <__i2b>
 800d87e:	4606      	mov	r6, r0
 800d880:	2f00      	cmp	r7, #0
 800d882:	dd0c      	ble.n	800d89e <_dtoa_r+0x77e>
 800d884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	dd09      	ble.n	800d89e <_dtoa_r+0x77e>
 800d88a:	42bb      	cmp	r3, r7
 800d88c:	bfa8      	it	ge
 800d88e:	463b      	movge	r3, r7
 800d890:	9a06      	ldr	r2, [sp, #24]
 800d892:	1aff      	subs	r7, r7, r3
 800d894:	1ad2      	subs	r2, r2, r3
 800d896:	9206      	str	r2, [sp, #24]
 800d898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	9309      	str	r3, [sp, #36]	; 0x24
 800d89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8a0:	b1f3      	cbz	r3, 800d8e0 <_dtoa_r+0x7c0>
 800d8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f000 80a9 	beq.w	800d9fc <_dtoa_r+0x8dc>
 800d8aa:	2c00      	cmp	r4, #0
 800d8ac:	dd10      	ble.n	800d8d0 <_dtoa_r+0x7b0>
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4622      	mov	r2, r4
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	f000 ffc4 	bl	800e840 <__pow5mult>
 800d8b8:	4652      	mov	r2, sl
 800d8ba:	4601      	mov	r1, r0
 800d8bc:	4606      	mov	r6, r0
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f000 ff1a 	bl	800e6f8 <__multiply>
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	4651      	mov	r1, sl
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f000 fdfb 	bl	800e4c4 <_Bfree>
 800d8ce:	46c2      	mov	sl, r8
 800d8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8d2:	1b1a      	subs	r2, r3, r4
 800d8d4:	d004      	beq.n	800d8e0 <_dtoa_r+0x7c0>
 800d8d6:	4651      	mov	r1, sl
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f000 ffb1 	bl	800e840 <__pow5mult>
 800d8de:	4682      	mov	sl, r0
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f000 fef2 	bl	800e6cc <__i2b>
 800d8e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f340 8087 	ble.w	800da00 <_dtoa_r+0x8e0>
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	4601      	mov	r1, r0
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	f000 ffa2 	bl	800e840 <__pow5mult>
 800d8fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8fe:	4604      	mov	r4, r0
 800d900:	2b01      	cmp	r3, #1
 800d902:	f340 8080 	ble.w	800da06 <_dtoa_r+0x8e6>
 800d906:	f04f 0800 	mov.w	r8, #0
 800d90a:	6923      	ldr	r3, [r4, #16]
 800d90c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d910:	6918      	ldr	r0, [r3, #16]
 800d912:	f000 fe8d 	bl	800e630 <__hi0bits>
 800d916:	f1c0 0020 	rsb	r0, r0, #32
 800d91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d91c:	4418      	add	r0, r3
 800d91e:	f010 001f 	ands.w	r0, r0, #31
 800d922:	f000 8092 	beq.w	800da4a <_dtoa_r+0x92a>
 800d926:	f1c0 0320 	rsb	r3, r0, #32
 800d92a:	2b04      	cmp	r3, #4
 800d92c:	f340 808a 	ble.w	800da44 <_dtoa_r+0x924>
 800d930:	f1c0 001c 	rsb	r0, r0, #28
 800d934:	9b06      	ldr	r3, [sp, #24]
 800d936:	4407      	add	r7, r0
 800d938:	4403      	add	r3, r0
 800d93a:	9306      	str	r3, [sp, #24]
 800d93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d93e:	4403      	add	r3, r0
 800d940:	9309      	str	r3, [sp, #36]	; 0x24
 800d942:	9b06      	ldr	r3, [sp, #24]
 800d944:	2b00      	cmp	r3, #0
 800d946:	dd05      	ble.n	800d954 <_dtoa_r+0x834>
 800d948:	4651      	mov	r1, sl
 800d94a:	461a      	mov	r2, r3
 800d94c:	4628      	mov	r0, r5
 800d94e:	f000 ffd1 	bl	800e8f4 <__lshift>
 800d952:	4682      	mov	sl, r0
 800d954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	dd05      	ble.n	800d966 <_dtoa_r+0x846>
 800d95a:	4621      	mov	r1, r4
 800d95c:	461a      	mov	r2, r3
 800d95e:	4628      	mov	r0, r5
 800d960:	f000 ffc8 	bl	800e8f4 <__lshift>
 800d964:	4604      	mov	r4, r0
 800d966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d070      	beq.n	800da4e <_dtoa_r+0x92e>
 800d96c:	4621      	mov	r1, r4
 800d96e:	4650      	mov	r0, sl
 800d970:	f001 f82c 	bl	800e9cc <__mcmp>
 800d974:	2800      	cmp	r0, #0
 800d976:	da6a      	bge.n	800da4e <_dtoa_r+0x92e>
 800d978:	2300      	movs	r3, #0
 800d97a:	4651      	mov	r1, sl
 800d97c:	220a      	movs	r2, #10
 800d97e:	4628      	mov	r0, r5
 800d980:	f000 fdc2 	bl	800e508 <__multadd>
 800d984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d986:	4682      	mov	sl, r0
 800d988:	f109 39ff 	add.w	r9, r9, #4294967295
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 8193 	beq.w	800dcb8 <_dtoa_r+0xb98>
 800d992:	4631      	mov	r1, r6
 800d994:	2300      	movs	r3, #0
 800d996:	220a      	movs	r2, #10
 800d998:	4628      	mov	r0, r5
 800d99a:	f000 fdb5 	bl	800e508 <__multadd>
 800d99e:	f1bb 0f00 	cmp.w	fp, #0
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	f300 8093 	bgt.w	800dace <_dtoa_r+0x9ae>
 800d9a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	dc57      	bgt.n	800da5e <_dtoa_r+0x93e>
 800d9ae:	e08e      	b.n	800dace <_dtoa_r+0x9ae>
 800d9b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d9b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9b6:	e756      	b.n	800d866 <_dtoa_r+0x746>
 800d9b8:	9b02      	ldr	r3, [sp, #8]
 800d9ba:	1e5c      	subs	r4, r3, #1
 800d9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	bfb7      	itett	lt
 800d9c2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d9c4:	1b1c      	subge	r4, r3, r4
 800d9c6:	1ae2      	sublt	r2, r4, r3
 800d9c8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d9ca:	bfbe      	ittt	lt
 800d9cc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d9ce:	189b      	addlt	r3, r3, r2
 800d9d0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d9d2:	9b02      	ldr	r3, [sp, #8]
 800d9d4:	bfb8      	it	lt
 800d9d6:	2400      	movlt	r4, #0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	bfbb      	ittet	lt
 800d9dc:	9b06      	ldrlt	r3, [sp, #24]
 800d9de:	9a02      	ldrlt	r2, [sp, #8]
 800d9e0:	9f06      	ldrge	r7, [sp, #24]
 800d9e2:	1a9f      	sublt	r7, r3, r2
 800d9e4:	bfac      	ite	ge
 800d9e6:	9b02      	ldrge	r3, [sp, #8]
 800d9e8:	2300      	movlt	r3, #0
 800d9ea:	e73e      	b.n	800d86a <_dtoa_r+0x74a>
 800d9ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d9ee:	9f06      	ldr	r7, [sp, #24]
 800d9f0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d9f2:	e745      	b.n	800d880 <_dtoa_r+0x760>
 800d9f4:	3fe00000 	.word	0x3fe00000
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9fe:	e76a      	b.n	800d8d6 <_dtoa_r+0x7b6>
 800da00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da02:	2b01      	cmp	r3, #1
 800da04:	dc19      	bgt.n	800da3a <_dtoa_r+0x91a>
 800da06:	9b04      	ldr	r3, [sp, #16]
 800da08:	b9bb      	cbnz	r3, 800da3a <_dtoa_r+0x91a>
 800da0a:	9b05      	ldr	r3, [sp, #20]
 800da0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da10:	b99b      	cbnz	r3, 800da3a <_dtoa_r+0x91a>
 800da12:	9b05      	ldr	r3, [sp, #20]
 800da14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da18:	0d1b      	lsrs	r3, r3, #20
 800da1a:	051b      	lsls	r3, r3, #20
 800da1c:	b183      	cbz	r3, 800da40 <_dtoa_r+0x920>
 800da1e:	f04f 0801 	mov.w	r8, #1
 800da22:	9b06      	ldr	r3, [sp, #24]
 800da24:	3301      	adds	r3, #1
 800da26:	9306      	str	r3, [sp, #24]
 800da28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da2a:	3301      	adds	r3, #1
 800da2c:	9309      	str	r3, [sp, #36]	; 0x24
 800da2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da30:	2b00      	cmp	r3, #0
 800da32:	f47f af6a 	bne.w	800d90a <_dtoa_r+0x7ea>
 800da36:	2001      	movs	r0, #1
 800da38:	e76f      	b.n	800d91a <_dtoa_r+0x7fa>
 800da3a:	f04f 0800 	mov.w	r8, #0
 800da3e:	e7f6      	b.n	800da2e <_dtoa_r+0x90e>
 800da40:	4698      	mov	r8, r3
 800da42:	e7f4      	b.n	800da2e <_dtoa_r+0x90e>
 800da44:	f43f af7d 	beq.w	800d942 <_dtoa_r+0x822>
 800da48:	4618      	mov	r0, r3
 800da4a:	301c      	adds	r0, #28
 800da4c:	e772      	b.n	800d934 <_dtoa_r+0x814>
 800da4e:	9b02      	ldr	r3, [sp, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	dc36      	bgt.n	800dac2 <_dtoa_r+0x9a2>
 800da54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da56:	2b02      	cmp	r3, #2
 800da58:	dd33      	ble.n	800dac2 <_dtoa_r+0x9a2>
 800da5a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800da5e:	f1bb 0f00 	cmp.w	fp, #0
 800da62:	d10d      	bne.n	800da80 <_dtoa_r+0x960>
 800da64:	4621      	mov	r1, r4
 800da66:	465b      	mov	r3, fp
 800da68:	2205      	movs	r2, #5
 800da6a:	4628      	mov	r0, r5
 800da6c:	f000 fd4c 	bl	800e508 <__multadd>
 800da70:	4601      	mov	r1, r0
 800da72:	4604      	mov	r4, r0
 800da74:	4650      	mov	r0, sl
 800da76:	f000 ffa9 	bl	800e9cc <__mcmp>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f73f adb6 	bgt.w	800d5ec <_dtoa_r+0x4cc>
 800da80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800da82:	9f08      	ldr	r7, [sp, #32]
 800da84:	ea6f 0903 	mvn.w	r9, r3
 800da88:	f04f 0800 	mov.w	r8, #0
 800da8c:	4621      	mov	r1, r4
 800da8e:	4628      	mov	r0, r5
 800da90:	f000 fd18 	bl	800e4c4 <_Bfree>
 800da94:	2e00      	cmp	r6, #0
 800da96:	f43f aea4 	beq.w	800d7e2 <_dtoa_r+0x6c2>
 800da9a:	f1b8 0f00 	cmp.w	r8, #0
 800da9e:	d005      	beq.n	800daac <_dtoa_r+0x98c>
 800daa0:	45b0      	cmp	r8, r6
 800daa2:	d003      	beq.n	800daac <_dtoa_r+0x98c>
 800daa4:	4641      	mov	r1, r8
 800daa6:	4628      	mov	r0, r5
 800daa8:	f000 fd0c 	bl	800e4c4 <_Bfree>
 800daac:	4631      	mov	r1, r6
 800daae:	4628      	mov	r0, r5
 800dab0:	f000 fd08 	bl	800e4c4 <_Bfree>
 800dab4:	e695      	b.n	800d7e2 <_dtoa_r+0x6c2>
 800dab6:	2400      	movs	r4, #0
 800dab8:	4626      	mov	r6, r4
 800daba:	e7e1      	b.n	800da80 <_dtoa_r+0x960>
 800dabc:	46c1      	mov	r9, r8
 800dabe:	4626      	mov	r6, r4
 800dac0:	e594      	b.n	800d5ec <_dtoa_r+0x4cc>
 800dac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dac4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 80fc 	beq.w	800dcc6 <_dtoa_r+0xba6>
 800dace:	2f00      	cmp	r7, #0
 800dad0:	dd05      	ble.n	800dade <_dtoa_r+0x9be>
 800dad2:	4631      	mov	r1, r6
 800dad4:	463a      	mov	r2, r7
 800dad6:	4628      	mov	r0, r5
 800dad8:	f000 ff0c 	bl	800e8f4 <__lshift>
 800dadc:	4606      	mov	r6, r0
 800dade:	f1b8 0f00 	cmp.w	r8, #0
 800dae2:	d05c      	beq.n	800db9e <_dtoa_r+0xa7e>
 800dae4:	4628      	mov	r0, r5
 800dae6:	6871      	ldr	r1, [r6, #4]
 800dae8:	f000 fcac 	bl	800e444 <_Balloc>
 800daec:	4607      	mov	r7, r0
 800daee:	b928      	cbnz	r0, 800dafc <_dtoa_r+0x9dc>
 800daf0:	4602      	mov	r2, r0
 800daf2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800daf6:	4b7e      	ldr	r3, [pc, #504]	; (800dcf0 <_dtoa_r+0xbd0>)
 800daf8:	f7ff bb26 	b.w	800d148 <_dtoa_r+0x28>
 800dafc:	6932      	ldr	r2, [r6, #16]
 800dafe:	f106 010c 	add.w	r1, r6, #12
 800db02:	3202      	adds	r2, #2
 800db04:	0092      	lsls	r2, r2, #2
 800db06:	300c      	adds	r0, #12
 800db08:	f000 fc82 	bl	800e410 <memcpy>
 800db0c:	2201      	movs	r2, #1
 800db0e:	4639      	mov	r1, r7
 800db10:	4628      	mov	r0, r5
 800db12:	f000 feef 	bl	800e8f4 <__lshift>
 800db16:	46b0      	mov	r8, r6
 800db18:	4606      	mov	r6, r0
 800db1a:	9b08      	ldr	r3, [sp, #32]
 800db1c:	3301      	adds	r3, #1
 800db1e:	9302      	str	r3, [sp, #8]
 800db20:	9b08      	ldr	r3, [sp, #32]
 800db22:	445b      	add	r3, fp
 800db24:	930a      	str	r3, [sp, #40]	; 0x28
 800db26:	9b04      	ldr	r3, [sp, #16]
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	9309      	str	r3, [sp, #36]	; 0x24
 800db2e:	9b02      	ldr	r3, [sp, #8]
 800db30:	4621      	mov	r1, r4
 800db32:	4650      	mov	r0, sl
 800db34:	f103 3bff 	add.w	fp, r3, #4294967295
 800db38:	f7ff fa62 	bl	800d000 <quorem>
 800db3c:	4603      	mov	r3, r0
 800db3e:	4641      	mov	r1, r8
 800db40:	3330      	adds	r3, #48	; 0x30
 800db42:	9004      	str	r0, [sp, #16]
 800db44:	4650      	mov	r0, sl
 800db46:	930b      	str	r3, [sp, #44]	; 0x2c
 800db48:	f000 ff40 	bl	800e9cc <__mcmp>
 800db4c:	4632      	mov	r2, r6
 800db4e:	9006      	str	r0, [sp, #24]
 800db50:	4621      	mov	r1, r4
 800db52:	4628      	mov	r0, r5
 800db54:	f000 ff56 	bl	800ea04 <__mdiff>
 800db58:	68c2      	ldr	r2, [r0, #12]
 800db5a:	4607      	mov	r7, r0
 800db5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db5e:	bb02      	cbnz	r2, 800dba2 <_dtoa_r+0xa82>
 800db60:	4601      	mov	r1, r0
 800db62:	4650      	mov	r0, sl
 800db64:	f000 ff32 	bl	800e9cc <__mcmp>
 800db68:	4602      	mov	r2, r0
 800db6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db6c:	4639      	mov	r1, r7
 800db6e:	4628      	mov	r0, r5
 800db70:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800db74:	f000 fca6 	bl	800e4c4 <_Bfree>
 800db78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db7c:	9f02      	ldr	r7, [sp, #8]
 800db7e:	ea43 0102 	orr.w	r1, r3, r2
 800db82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db84:	430b      	orrs	r3, r1
 800db86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db88:	d10d      	bne.n	800dba6 <_dtoa_r+0xa86>
 800db8a:	2b39      	cmp	r3, #57	; 0x39
 800db8c:	d027      	beq.n	800dbde <_dtoa_r+0xabe>
 800db8e:	9a06      	ldr	r2, [sp, #24]
 800db90:	2a00      	cmp	r2, #0
 800db92:	dd01      	ble.n	800db98 <_dtoa_r+0xa78>
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	3331      	adds	r3, #49	; 0x31
 800db98:	f88b 3000 	strb.w	r3, [fp]
 800db9c:	e776      	b.n	800da8c <_dtoa_r+0x96c>
 800db9e:	4630      	mov	r0, r6
 800dba0:	e7b9      	b.n	800db16 <_dtoa_r+0x9f6>
 800dba2:	2201      	movs	r2, #1
 800dba4:	e7e2      	b.n	800db6c <_dtoa_r+0xa4c>
 800dba6:	9906      	ldr	r1, [sp, #24]
 800dba8:	2900      	cmp	r1, #0
 800dbaa:	db04      	blt.n	800dbb6 <_dtoa_r+0xa96>
 800dbac:	9822      	ldr	r0, [sp, #136]	; 0x88
 800dbae:	4301      	orrs	r1, r0
 800dbb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb2:	4301      	orrs	r1, r0
 800dbb4:	d120      	bne.n	800dbf8 <_dtoa_r+0xad8>
 800dbb6:	2a00      	cmp	r2, #0
 800dbb8:	ddee      	ble.n	800db98 <_dtoa_r+0xa78>
 800dbba:	4651      	mov	r1, sl
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	9302      	str	r3, [sp, #8]
 800dbc2:	f000 fe97 	bl	800e8f4 <__lshift>
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	4682      	mov	sl, r0
 800dbca:	f000 feff 	bl	800e9cc <__mcmp>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	9b02      	ldr	r3, [sp, #8]
 800dbd2:	dc02      	bgt.n	800dbda <_dtoa_r+0xaba>
 800dbd4:	d1e0      	bne.n	800db98 <_dtoa_r+0xa78>
 800dbd6:	07da      	lsls	r2, r3, #31
 800dbd8:	d5de      	bpl.n	800db98 <_dtoa_r+0xa78>
 800dbda:	2b39      	cmp	r3, #57	; 0x39
 800dbdc:	d1da      	bne.n	800db94 <_dtoa_r+0xa74>
 800dbde:	2339      	movs	r3, #57	; 0x39
 800dbe0:	f88b 3000 	strb.w	r3, [fp]
 800dbe4:	463b      	mov	r3, r7
 800dbe6:	461f      	mov	r7, r3
 800dbe8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800dbec:	3b01      	subs	r3, #1
 800dbee:	2a39      	cmp	r2, #57	; 0x39
 800dbf0:	d050      	beq.n	800dc94 <_dtoa_r+0xb74>
 800dbf2:	3201      	adds	r2, #1
 800dbf4:	701a      	strb	r2, [r3, #0]
 800dbf6:	e749      	b.n	800da8c <_dtoa_r+0x96c>
 800dbf8:	2a00      	cmp	r2, #0
 800dbfa:	dd03      	ble.n	800dc04 <_dtoa_r+0xae4>
 800dbfc:	2b39      	cmp	r3, #57	; 0x39
 800dbfe:	d0ee      	beq.n	800dbde <_dtoa_r+0xabe>
 800dc00:	3301      	adds	r3, #1
 800dc02:	e7c9      	b.n	800db98 <_dtoa_r+0xa78>
 800dc04:	9a02      	ldr	r2, [sp, #8]
 800dc06:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc08:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc0c:	428a      	cmp	r2, r1
 800dc0e:	d02a      	beq.n	800dc66 <_dtoa_r+0xb46>
 800dc10:	4651      	mov	r1, sl
 800dc12:	2300      	movs	r3, #0
 800dc14:	220a      	movs	r2, #10
 800dc16:	4628      	mov	r0, r5
 800dc18:	f000 fc76 	bl	800e508 <__multadd>
 800dc1c:	45b0      	cmp	r8, r6
 800dc1e:	4682      	mov	sl, r0
 800dc20:	f04f 0300 	mov.w	r3, #0
 800dc24:	f04f 020a 	mov.w	r2, #10
 800dc28:	4641      	mov	r1, r8
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	d107      	bne.n	800dc3e <_dtoa_r+0xb1e>
 800dc2e:	f000 fc6b 	bl	800e508 <__multadd>
 800dc32:	4680      	mov	r8, r0
 800dc34:	4606      	mov	r6, r0
 800dc36:	9b02      	ldr	r3, [sp, #8]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	9302      	str	r3, [sp, #8]
 800dc3c:	e777      	b.n	800db2e <_dtoa_r+0xa0e>
 800dc3e:	f000 fc63 	bl	800e508 <__multadd>
 800dc42:	4631      	mov	r1, r6
 800dc44:	4680      	mov	r8, r0
 800dc46:	2300      	movs	r3, #0
 800dc48:	220a      	movs	r2, #10
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f000 fc5c 	bl	800e508 <__multadd>
 800dc50:	4606      	mov	r6, r0
 800dc52:	e7f0      	b.n	800dc36 <_dtoa_r+0xb16>
 800dc54:	f1bb 0f00 	cmp.w	fp, #0
 800dc58:	bfcc      	ite	gt
 800dc5a:	465f      	movgt	r7, fp
 800dc5c:	2701      	movle	r7, #1
 800dc5e:	f04f 0800 	mov.w	r8, #0
 800dc62:	9a08      	ldr	r2, [sp, #32]
 800dc64:	4417      	add	r7, r2
 800dc66:	4651      	mov	r1, sl
 800dc68:	2201      	movs	r2, #1
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	9302      	str	r3, [sp, #8]
 800dc6e:	f000 fe41 	bl	800e8f4 <__lshift>
 800dc72:	4621      	mov	r1, r4
 800dc74:	4682      	mov	sl, r0
 800dc76:	f000 fea9 	bl	800e9cc <__mcmp>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	dcb2      	bgt.n	800dbe4 <_dtoa_r+0xac4>
 800dc7e:	d102      	bne.n	800dc86 <_dtoa_r+0xb66>
 800dc80:	9b02      	ldr	r3, [sp, #8]
 800dc82:	07db      	lsls	r3, r3, #31
 800dc84:	d4ae      	bmi.n	800dbe4 <_dtoa_r+0xac4>
 800dc86:	463b      	mov	r3, r7
 800dc88:	461f      	mov	r7, r3
 800dc8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc8e:	2a30      	cmp	r2, #48	; 0x30
 800dc90:	d0fa      	beq.n	800dc88 <_dtoa_r+0xb68>
 800dc92:	e6fb      	b.n	800da8c <_dtoa_r+0x96c>
 800dc94:	9a08      	ldr	r2, [sp, #32]
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d1a5      	bne.n	800dbe6 <_dtoa_r+0xac6>
 800dc9a:	2331      	movs	r3, #49	; 0x31
 800dc9c:	f109 0901 	add.w	r9, r9, #1
 800dca0:	7013      	strb	r3, [r2, #0]
 800dca2:	e6f3      	b.n	800da8c <_dtoa_r+0x96c>
 800dca4:	4b13      	ldr	r3, [pc, #76]	; (800dcf4 <_dtoa_r+0xbd4>)
 800dca6:	f7ff baa7 	b.w	800d1f8 <_dtoa_r+0xd8>
 800dcaa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f47f aa80 	bne.w	800d1b2 <_dtoa_r+0x92>
 800dcb2:	4b11      	ldr	r3, [pc, #68]	; (800dcf8 <_dtoa_r+0xbd8>)
 800dcb4:	f7ff baa0 	b.w	800d1f8 <_dtoa_r+0xd8>
 800dcb8:	f1bb 0f00 	cmp.w	fp, #0
 800dcbc:	dc03      	bgt.n	800dcc6 <_dtoa_r+0xba6>
 800dcbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dcc0:	2b02      	cmp	r3, #2
 800dcc2:	f73f aecc 	bgt.w	800da5e <_dtoa_r+0x93e>
 800dcc6:	9f08      	ldr	r7, [sp, #32]
 800dcc8:	4621      	mov	r1, r4
 800dcca:	4650      	mov	r0, sl
 800dccc:	f7ff f998 	bl	800d000 <quorem>
 800dcd0:	9a08      	ldr	r2, [sp, #32]
 800dcd2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dcd6:	f807 3b01 	strb.w	r3, [r7], #1
 800dcda:	1aba      	subs	r2, r7, r2
 800dcdc:	4593      	cmp	fp, r2
 800dcde:	ddb9      	ble.n	800dc54 <_dtoa_r+0xb34>
 800dce0:	4651      	mov	r1, sl
 800dce2:	2300      	movs	r3, #0
 800dce4:	220a      	movs	r2, #10
 800dce6:	4628      	mov	r0, r5
 800dce8:	f000 fc0e 	bl	800e508 <__multadd>
 800dcec:	4682      	mov	sl, r0
 800dcee:	e7eb      	b.n	800dcc8 <_dtoa_r+0xba8>
 800dcf0:	08010680 	.word	0x08010680
 800dcf4:	08010558 	.word	0x08010558
 800dcf8:	080105fd 	.word	0x080105fd

0800dcfc <rshift>:
 800dcfc:	6903      	ldr	r3, [r0, #16]
 800dcfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd02:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd06:	f100 0414 	add.w	r4, r0, #20
 800dd0a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd0e:	dd46      	ble.n	800dd9e <rshift+0xa2>
 800dd10:	f011 011f 	ands.w	r1, r1, #31
 800dd14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd1c:	d10c      	bne.n	800dd38 <rshift+0x3c>
 800dd1e:	4629      	mov	r1, r5
 800dd20:	f100 0710 	add.w	r7, r0, #16
 800dd24:	42b1      	cmp	r1, r6
 800dd26:	d335      	bcc.n	800dd94 <rshift+0x98>
 800dd28:	1a9b      	subs	r3, r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	1eea      	subs	r2, r5, #3
 800dd2e:	4296      	cmp	r6, r2
 800dd30:	bf38      	it	cc
 800dd32:	2300      	movcc	r3, #0
 800dd34:	4423      	add	r3, r4
 800dd36:	e015      	b.n	800dd64 <rshift+0x68>
 800dd38:	46a1      	mov	r9, r4
 800dd3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd3e:	f1c1 0820 	rsb	r8, r1, #32
 800dd42:	40cf      	lsrs	r7, r1
 800dd44:	f105 0e04 	add.w	lr, r5, #4
 800dd48:	4576      	cmp	r6, lr
 800dd4a:	46f4      	mov	ip, lr
 800dd4c:	d816      	bhi.n	800dd7c <rshift+0x80>
 800dd4e:	1a9b      	subs	r3, r3, r2
 800dd50:	009a      	lsls	r2, r3, #2
 800dd52:	3a04      	subs	r2, #4
 800dd54:	3501      	adds	r5, #1
 800dd56:	42ae      	cmp	r6, r5
 800dd58:	bf38      	it	cc
 800dd5a:	2200      	movcc	r2, #0
 800dd5c:	18a3      	adds	r3, r4, r2
 800dd5e:	50a7      	str	r7, [r4, r2]
 800dd60:	b107      	cbz	r7, 800dd64 <rshift+0x68>
 800dd62:	3304      	adds	r3, #4
 800dd64:	42a3      	cmp	r3, r4
 800dd66:	eba3 0204 	sub.w	r2, r3, r4
 800dd6a:	bf08      	it	eq
 800dd6c:	2300      	moveq	r3, #0
 800dd6e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd72:	6102      	str	r2, [r0, #16]
 800dd74:	bf08      	it	eq
 800dd76:	6143      	streq	r3, [r0, #20]
 800dd78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd7c:	f8dc c000 	ldr.w	ip, [ip]
 800dd80:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd84:	ea4c 0707 	orr.w	r7, ip, r7
 800dd88:	f849 7b04 	str.w	r7, [r9], #4
 800dd8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd90:	40cf      	lsrs	r7, r1
 800dd92:	e7d9      	b.n	800dd48 <rshift+0x4c>
 800dd94:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd98:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd9c:	e7c2      	b.n	800dd24 <rshift+0x28>
 800dd9e:	4623      	mov	r3, r4
 800dda0:	e7e0      	b.n	800dd64 <rshift+0x68>

0800dda2 <__hexdig_fun>:
 800dda2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dda6:	2b09      	cmp	r3, #9
 800dda8:	d802      	bhi.n	800ddb0 <__hexdig_fun+0xe>
 800ddaa:	3820      	subs	r0, #32
 800ddac:	b2c0      	uxtb	r0, r0
 800ddae:	4770      	bx	lr
 800ddb0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ddb4:	2b05      	cmp	r3, #5
 800ddb6:	d801      	bhi.n	800ddbc <__hexdig_fun+0x1a>
 800ddb8:	3847      	subs	r0, #71	; 0x47
 800ddba:	e7f7      	b.n	800ddac <__hexdig_fun+0xa>
 800ddbc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ddc0:	2b05      	cmp	r3, #5
 800ddc2:	d801      	bhi.n	800ddc8 <__hexdig_fun+0x26>
 800ddc4:	3827      	subs	r0, #39	; 0x27
 800ddc6:	e7f1      	b.n	800ddac <__hexdig_fun+0xa>
 800ddc8:	2000      	movs	r0, #0
 800ddca:	4770      	bx	lr

0800ddcc <__gethex>:
 800ddcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	b08b      	sub	sp, #44	; 0x2c
 800ddd2:	9306      	str	r3, [sp, #24]
 800ddd4:	4bb9      	ldr	r3, [pc, #740]	; (800e0bc <__gethex+0x2f0>)
 800ddd6:	9002      	str	r0, [sp, #8]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	468b      	mov	fp, r1
 800dddc:	4618      	mov	r0, r3
 800ddde:	4690      	mov	r8, r2
 800dde0:	9303      	str	r3, [sp, #12]
 800dde2:	f7f2 fa21 	bl	8000228 <strlen>
 800dde6:	4682      	mov	sl, r0
 800dde8:	9b03      	ldr	r3, [sp, #12]
 800ddea:	f8db 2000 	ldr.w	r2, [fp]
 800ddee:	4403      	add	r3, r0
 800ddf0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ddf4:	9307      	str	r3, [sp, #28]
 800ddf6:	1c93      	adds	r3, r2, #2
 800ddf8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ddfc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de00:	32fe      	adds	r2, #254	; 0xfe
 800de02:	18d1      	adds	r1, r2, r3
 800de04:	461f      	mov	r7, r3
 800de06:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de0a:	9101      	str	r1, [sp, #4]
 800de0c:	2830      	cmp	r0, #48	; 0x30
 800de0e:	d0f8      	beq.n	800de02 <__gethex+0x36>
 800de10:	f7ff ffc7 	bl	800dda2 <__hexdig_fun>
 800de14:	4604      	mov	r4, r0
 800de16:	2800      	cmp	r0, #0
 800de18:	d13a      	bne.n	800de90 <__gethex+0xc4>
 800de1a:	4652      	mov	r2, sl
 800de1c:	4638      	mov	r0, r7
 800de1e:	9903      	ldr	r1, [sp, #12]
 800de20:	f001 f938 	bl	800f094 <strncmp>
 800de24:	4605      	mov	r5, r0
 800de26:	2800      	cmp	r0, #0
 800de28:	d166      	bne.n	800def8 <__gethex+0x12c>
 800de2a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de2e:	eb07 060a 	add.w	r6, r7, sl
 800de32:	f7ff ffb6 	bl	800dda2 <__hexdig_fun>
 800de36:	2800      	cmp	r0, #0
 800de38:	d060      	beq.n	800defc <__gethex+0x130>
 800de3a:	4633      	mov	r3, r6
 800de3c:	7818      	ldrb	r0, [r3, #0]
 800de3e:	461f      	mov	r7, r3
 800de40:	2830      	cmp	r0, #48	; 0x30
 800de42:	f103 0301 	add.w	r3, r3, #1
 800de46:	d0f9      	beq.n	800de3c <__gethex+0x70>
 800de48:	f7ff ffab 	bl	800dda2 <__hexdig_fun>
 800de4c:	2301      	movs	r3, #1
 800de4e:	fab0 f480 	clz	r4, r0
 800de52:	4635      	mov	r5, r6
 800de54:	0964      	lsrs	r4, r4, #5
 800de56:	9301      	str	r3, [sp, #4]
 800de58:	463a      	mov	r2, r7
 800de5a:	4616      	mov	r6, r2
 800de5c:	7830      	ldrb	r0, [r6, #0]
 800de5e:	3201      	adds	r2, #1
 800de60:	f7ff ff9f 	bl	800dda2 <__hexdig_fun>
 800de64:	2800      	cmp	r0, #0
 800de66:	d1f8      	bne.n	800de5a <__gethex+0x8e>
 800de68:	4652      	mov	r2, sl
 800de6a:	4630      	mov	r0, r6
 800de6c:	9903      	ldr	r1, [sp, #12]
 800de6e:	f001 f911 	bl	800f094 <strncmp>
 800de72:	b980      	cbnz	r0, 800de96 <__gethex+0xca>
 800de74:	b94d      	cbnz	r5, 800de8a <__gethex+0xbe>
 800de76:	eb06 050a 	add.w	r5, r6, sl
 800de7a:	462a      	mov	r2, r5
 800de7c:	4616      	mov	r6, r2
 800de7e:	7830      	ldrb	r0, [r6, #0]
 800de80:	3201      	adds	r2, #1
 800de82:	f7ff ff8e 	bl	800dda2 <__hexdig_fun>
 800de86:	2800      	cmp	r0, #0
 800de88:	d1f8      	bne.n	800de7c <__gethex+0xb0>
 800de8a:	1bad      	subs	r5, r5, r6
 800de8c:	00ad      	lsls	r5, r5, #2
 800de8e:	e004      	b.n	800de9a <__gethex+0xce>
 800de90:	2400      	movs	r4, #0
 800de92:	4625      	mov	r5, r4
 800de94:	e7e0      	b.n	800de58 <__gethex+0x8c>
 800de96:	2d00      	cmp	r5, #0
 800de98:	d1f7      	bne.n	800de8a <__gethex+0xbe>
 800de9a:	7833      	ldrb	r3, [r6, #0]
 800de9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dea0:	2b50      	cmp	r3, #80	; 0x50
 800dea2:	d139      	bne.n	800df18 <__gethex+0x14c>
 800dea4:	7873      	ldrb	r3, [r6, #1]
 800dea6:	2b2b      	cmp	r3, #43	; 0x2b
 800dea8:	d02a      	beq.n	800df00 <__gethex+0x134>
 800deaa:	2b2d      	cmp	r3, #45	; 0x2d
 800deac:	d02c      	beq.n	800df08 <__gethex+0x13c>
 800deae:	f04f 0900 	mov.w	r9, #0
 800deb2:	1c71      	adds	r1, r6, #1
 800deb4:	7808      	ldrb	r0, [r1, #0]
 800deb6:	f7ff ff74 	bl	800dda2 <__hexdig_fun>
 800deba:	1e43      	subs	r3, r0, #1
 800debc:	b2db      	uxtb	r3, r3
 800debe:	2b18      	cmp	r3, #24
 800dec0:	d82a      	bhi.n	800df18 <__gethex+0x14c>
 800dec2:	f1a0 0210 	sub.w	r2, r0, #16
 800dec6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800deca:	f7ff ff6a 	bl	800dda2 <__hexdig_fun>
 800dece:	1e43      	subs	r3, r0, #1
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b18      	cmp	r3, #24
 800ded4:	d91b      	bls.n	800df0e <__gethex+0x142>
 800ded6:	f1b9 0f00 	cmp.w	r9, #0
 800deda:	d000      	beq.n	800dede <__gethex+0x112>
 800dedc:	4252      	negs	r2, r2
 800dede:	4415      	add	r5, r2
 800dee0:	f8cb 1000 	str.w	r1, [fp]
 800dee4:	b1d4      	cbz	r4, 800df1c <__gethex+0x150>
 800dee6:	9b01      	ldr	r3, [sp, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	bf14      	ite	ne
 800deec:	2700      	movne	r7, #0
 800deee:	2706      	moveq	r7, #6
 800def0:	4638      	mov	r0, r7
 800def2:	b00b      	add	sp, #44	; 0x2c
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def8:	463e      	mov	r6, r7
 800defa:	4625      	mov	r5, r4
 800defc:	2401      	movs	r4, #1
 800defe:	e7cc      	b.n	800de9a <__gethex+0xce>
 800df00:	f04f 0900 	mov.w	r9, #0
 800df04:	1cb1      	adds	r1, r6, #2
 800df06:	e7d5      	b.n	800deb4 <__gethex+0xe8>
 800df08:	f04f 0901 	mov.w	r9, #1
 800df0c:	e7fa      	b.n	800df04 <__gethex+0x138>
 800df0e:	230a      	movs	r3, #10
 800df10:	fb03 0202 	mla	r2, r3, r2, r0
 800df14:	3a10      	subs	r2, #16
 800df16:	e7d6      	b.n	800dec6 <__gethex+0xfa>
 800df18:	4631      	mov	r1, r6
 800df1a:	e7e1      	b.n	800dee0 <__gethex+0x114>
 800df1c:	4621      	mov	r1, r4
 800df1e:	1bf3      	subs	r3, r6, r7
 800df20:	3b01      	subs	r3, #1
 800df22:	2b07      	cmp	r3, #7
 800df24:	dc0a      	bgt.n	800df3c <__gethex+0x170>
 800df26:	9802      	ldr	r0, [sp, #8]
 800df28:	f000 fa8c 	bl	800e444 <_Balloc>
 800df2c:	4604      	mov	r4, r0
 800df2e:	b940      	cbnz	r0, 800df42 <__gethex+0x176>
 800df30:	4602      	mov	r2, r0
 800df32:	21de      	movs	r1, #222	; 0xde
 800df34:	4b62      	ldr	r3, [pc, #392]	; (800e0c0 <__gethex+0x2f4>)
 800df36:	4863      	ldr	r0, [pc, #396]	; (800e0c4 <__gethex+0x2f8>)
 800df38:	f001 f8cc 	bl	800f0d4 <__assert_func>
 800df3c:	3101      	adds	r1, #1
 800df3e:	105b      	asrs	r3, r3, #1
 800df40:	e7ef      	b.n	800df22 <__gethex+0x156>
 800df42:	f04f 0b00 	mov.w	fp, #0
 800df46:	f100 0914 	add.w	r9, r0, #20
 800df4a:	f1ca 0301 	rsb	r3, sl, #1
 800df4e:	f8cd 9010 	str.w	r9, [sp, #16]
 800df52:	f8cd b004 	str.w	fp, [sp, #4]
 800df56:	9308      	str	r3, [sp, #32]
 800df58:	42b7      	cmp	r7, r6
 800df5a:	d33f      	bcc.n	800dfdc <__gethex+0x210>
 800df5c:	9f04      	ldr	r7, [sp, #16]
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	f847 3b04 	str.w	r3, [r7], #4
 800df64:	eba7 0709 	sub.w	r7, r7, r9
 800df68:	10bf      	asrs	r7, r7, #2
 800df6a:	6127      	str	r7, [r4, #16]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f000 fb5f 	bl	800e630 <__hi0bits>
 800df72:	017f      	lsls	r7, r7, #5
 800df74:	f8d8 6000 	ldr.w	r6, [r8]
 800df78:	1a3f      	subs	r7, r7, r0
 800df7a:	42b7      	cmp	r7, r6
 800df7c:	dd62      	ble.n	800e044 <__gethex+0x278>
 800df7e:	1bbf      	subs	r7, r7, r6
 800df80:	4639      	mov	r1, r7
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fef5 	bl	800ed72 <__any_on>
 800df88:	4682      	mov	sl, r0
 800df8a:	b1a8      	cbz	r0, 800dfb8 <__gethex+0x1ec>
 800df8c:	f04f 0a01 	mov.w	sl, #1
 800df90:	1e7b      	subs	r3, r7, #1
 800df92:	1159      	asrs	r1, r3, #5
 800df94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df98:	f003 021f 	and.w	r2, r3, #31
 800df9c:	fa0a f202 	lsl.w	r2, sl, r2
 800dfa0:	420a      	tst	r2, r1
 800dfa2:	d009      	beq.n	800dfb8 <__gethex+0x1ec>
 800dfa4:	4553      	cmp	r3, sl
 800dfa6:	dd05      	ble.n	800dfb4 <__gethex+0x1e8>
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	1eb9      	subs	r1, r7, #2
 800dfac:	f000 fee1 	bl	800ed72 <__any_on>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d144      	bne.n	800e03e <__gethex+0x272>
 800dfb4:	f04f 0a02 	mov.w	sl, #2
 800dfb8:	4639      	mov	r1, r7
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f7ff fe9e 	bl	800dcfc <rshift>
 800dfc0:	443d      	add	r5, r7
 800dfc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfc6:	42ab      	cmp	r3, r5
 800dfc8:	da4a      	bge.n	800e060 <__gethex+0x294>
 800dfca:	4621      	mov	r1, r4
 800dfcc:	9802      	ldr	r0, [sp, #8]
 800dfce:	f000 fa79 	bl	800e4c4 <_Bfree>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfd6:	27a3      	movs	r7, #163	; 0xa3
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	e789      	b.n	800def0 <__gethex+0x124>
 800dfdc:	1e73      	subs	r3, r6, #1
 800dfde:	9a07      	ldr	r2, [sp, #28]
 800dfe0:	9305      	str	r3, [sp, #20]
 800dfe2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d019      	beq.n	800e01e <__gethex+0x252>
 800dfea:	f1bb 0f20 	cmp.w	fp, #32
 800dfee:	d107      	bne.n	800e000 <__gethex+0x234>
 800dff0:	9b04      	ldr	r3, [sp, #16]
 800dff2:	9a01      	ldr	r2, [sp, #4]
 800dff4:	f843 2b04 	str.w	r2, [r3], #4
 800dff8:	9304      	str	r3, [sp, #16]
 800dffa:	2300      	movs	r3, #0
 800dffc:	469b      	mov	fp, r3
 800dffe:	9301      	str	r3, [sp, #4]
 800e000:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e004:	f7ff fecd 	bl	800dda2 <__hexdig_fun>
 800e008:	9b01      	ldr	r3, [sp, #4]
 800e00a:	f000 000f 	and.w	r0, r0, #15
 800e00e:	fa00 f00b 	lsl.w	r0, r0, fp
 800e012:	4303      	orrs	r3, r0
 800e014:	9301      	str	r3, [sp, #4]
 800e016:	f10b 0b04 	add.w	fp, fp, #4
 800e01a:	9b05      	ldr	r3, [sp, #20]
 800e01c:	e00d      	b.n	800e03a <__gethex+0x26e>
 800e01e:	9b05      	ldr	r3, [sp, #20]
 800e020:	9a08      	ldr	r2, [sp, #32]
 800e022:	4413      	add	r3, r2
 800e024:	42bb      	cmp	r3, r7
 800e026:	d3e0      	bcc.n	800dfea <__gethex+0x21e>
 800e028:	4618      	mov	r0, r3
 800e02a:	4652      	mov	r2, sl
 800e02c:	9903      	ldr	r1, [sp, #12]
 800e02e:	9309      	str	r3, [sp, #36]	; 0x24
 800e030:	f001 f830 	bl	800f094 <strncmp>
 800e034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e036:	2800      	cmp	r0, #0
 800e038:	d1d7      	bne.n	800dfea <__gethex+0x21e>
 800e03a:	461e      	mov	r6, r3
 800e03c:	e78c      	b.n	800df58 <__gethex+0x18c>
 800e03e:	f04f 0a03 	mov.w	sl, #3
 800e042:	e7b9      	b.n	800dfb8 <__gethex+0x1ec>
 800e044:	da09      	bge.n	800e05a <__gethex+0x28e>
 800e046:	1bf7      	subs	r7, r6, r7
 800e048:	4621      	mov	r1, r4
 800e04a:	463a      	mov	r2, r7
 800e04c:	9802      	ldr	r0, [sp, #8]
 800e04e:	f000 fc51 	bl	800e8f4 <__lshift>
 800e052:	4604      	mov	r4, r0
 800e054:	1bed      	subs	r5, r5, r7
 800e056:	f100 0914 	add.w	r9, r0, #20
 800e05a:	f04f 0a00 	mov.w	sl, #0
 800e05e:	e7b0      	b.n	800dfc2 <__gethex+0x1f6>
 800e060:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e064:	42a8      	cmp	r0, r5
 800e066:	dd71      	ble.n	800e14c <__gethex+0x380>
 800e068:	1b45      	subs	r5, r0, r5
 800e06a:	42ae      	cmp	r6, r5
 800e06c:	dc34      	bgt.n	800e0d8 <__gethex+0x30c>
 800e06e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e072:	2b02      	cmp	r3, #2
 800e074:	d028      	beq.n	800e0c8 <__gethex+0x2fc>
 800e076:	2b03      	cmp	r3, #3
 800e078:	d02a      	beq.n	800e0d0 <__gethex+0x304>
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d115      	bne.n	800e0aa <__gethex+0x2de>
 800e07e:	42ae      	cmp	r6, r5
 800e080:	d113      	bne.n	800e0aa <__gethex+0x2de>
 800e082:	2e01      	cmp	r6, #1
 800e084:	d10b      	bne.n	800e09e <__gethex+0x2d2>
 800e086:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e08a:	9a06      	ldr	r2, [sp, #24]
 800e08c:	2762      	movs	r7, #98	; 0x62
 800e08e:	6013      	str	r3, [r2, #0]
 800e090:	2301      	movs	r3, #1
 800e092:	6123      	str	r3, [r4, #16]
 800e094:	f8c9 3000 	str.w	r3, [r9]
 800e098:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e09a:	601c      	str	r4, [r3, #0]
 800e09c:	e728      	b.n	800def0 <__gethex+0x124>
 800e09e:	4620      	mov	r0, r4
 800e0a0:	1e71      	subs	r1, r6, #1
 800e0a2:	f000 fe66 	bl	800ed72 <__any_on>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d1ed      	bne.n	800e086 <__gethex+0x2ba>
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	9802      	ldr	r0, [sp, #8]
 800e0ae:	f000 fa09 	bl	800e4c4 <_Bfree>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e0b6:	2750      	movs	r7, #80	; 0x50
 800e0b8:	6013      	str	r3, [r2, #0]
 800e0ba:	e719      	b.n	800def0 <__gethex+0x124>
 800e0bc:	080106fc 	.word	0x080106fc
 800e0c0:	08010680 	.word	0x08010680
 800e0c4:	08010691 	.word	0x08010691
 800e0c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d1ed      	bne.n	800e0aa <__gethex+0x2de>
 800e0ce:	e7da      	b.n	800e086 <__gethex+0x2ba>
 800e0d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1d7      	bne.n	800e086 <__gethex+0x2ba>
 800e0d6:	e7e8      	b.n	800e0aa <__gethex+0x2de>
 800e0d8:	1e6f      	subs	r7, r5, #1
 800e0da:	f1ba 0f00 	cmp.w	sl, #0
 800e0de:	d132      	bne.n	800e146 <__gethex+0x37a>
 800e0e0:	b127      	cbz	r7, 800e0ec <__gethex+0x320>
 800e0e2:	4639      	mov	r1, r7
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f000 fe44 	bl	800ed72 <__any_on>
 800e0ea:	4682      	mov	sl, r0
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	117b      	asrs	r3, r7, #5
 800e0f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e0f4:	f007 071f 	and.w	r7, r7, #31
 800e0f8:	fa01 f707 	lsl.w	r7, r1, r7
 800e0fc:	421f      	tst	r7, r3
 800e0fe:	f04f 0702 	mov.w	r7, #2
 800e102:	4629      	mov	r1, r5
 800e104:	4620      	mov	r0, r4
 800e106:	bf18      	it	ne
 800e108:	f04a 0a02 	orrne.w	sl, sl, #2
 800e10c:	1b76      	subs	r6, r6, r5
 800e10e:	f7ff fdf5 	bl	800dcfc <rshift>
 800e112:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e116:	f1ba 0f00 	cmp.w	sl, #0
 800e11a:	d048      	beq.n	800e1ae <__gethex+0x3e2>
 800e11c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e120:	2b02      	cmp	r3, #2
 800e122:	d015      	beq.n	800e150 <__gethex+0x384>
 800e124:	2b03      	cmp	r3, #3
 800e126:	d017      	beq.n	800e158 <__gethex+0x38c>
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d109      	bne.n	800e140 <__gethex+0x374>
 800e12c:	f01a 0f02 	tst.w	sl, #2
 800e130:	d006      	beq.n	800e140 <__gethex+0x374>
 800e132:	f8d9 0000 	ldr.w	r0, [r9]
 800e136:	ea4a 0a00 	orr.w	sl, sl, r0
 800e13a:	f01a 0f01 	tst.w	sl, #1
 800e13e:	d10e      	bne.n	800e15e <__gethex+0x392>
 800e140:	f047 0710 	orr.w	r7, r7, #16
 800e144:	e033      	b.n	800e1ae <__gethex+0x3e2>
 800e146:	f04f 0a01 	mov.w	sl, #1
 800e14a:	e7cf      	b.n	800e0ec <__gethex+0x320>
 800e14c:	2701      	movs	r7, #1
 800e14e:	e7e2      	b.n	800e116 <__gethex+0x34a>
 800e150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e152:	f1c3 0301 	rsb	r3, r3, #1
 800e156:	9315      	str	r3, [sp, #84]	; 0x54
 800e158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0f0      	beq.n	800e140 <__gethex+0x374>
 800e15e:	f04f 0c00 	mov.w	ip, #0
 800e162:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e166:	f104 0314 	add.w	r3, r4, #20
 800e16a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e16e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e172:	4618      	mov	r0, r3
 800e174:	f853 2b04 	ldr.w	r2, [r3], #4
 800e178:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e17c:	d01c      	beq.n	800e1b8 <__gethex+0x3ec>
 800e17e:	3201      	adds	r2, #1
 800e180:	6002      	str	r2, [r0, #0]
 800e182:	2f02      	cmp	r7, #2
 800e184:	f104 0314 	add.w	r3, r4, #20
 800e188:	d13d      	bne.n	800e206 <__gethex+0x43a>
 800e18a:	f8d8 2000 	ldr.w	r2, [r8]
 800e18e:	3a01      	subs	r2, #1
 800e190:	42b2      	cmp	r2, r6
 800e192:	d10a      	bne.n	800e1aa <__gethex+0x3de>
 800e194:	2201      	movs	r2, #1
 800e196:	1171      	asrs	r1, r6, #5
 800e198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e19c:	f006 061f 	and.w	r6, r6, #31
 800e1a0:	fa02 f606 	lsl.w	r6, r2, r6
 800e1a4:	421e      	tst	r6, r3
 800e1a6:	bf18      	it	ne
 800e1a8:	4617      	movne	r7, r2
 800e1aa:	f047 0720 	orr.w	r7, r7, #32
 800e1ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1b0:	601c      	str	r4, [r3, #0]
 800e1b2:	9b06      	ldr	r3, [sp, #24]
 800e1b4:	601d      	str	r5, [r3, #0]
 800e1b6:	e69b      	b.n	800def0 <__gethex+0x124>
 800e1b8:	4299      	cmp	r1, r3
 800e1ba:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1be:	d8d8      	bhi.n	800e172 <__gethex+0x3a6>
 800e1c0:	68a3      	ldr	r3, [r4, #8]
 800e1c2:	459b      	cmp	fp, r3
 800e1c4:	db17      	blt.n	800e1f6 <__gethex+0x42a>
 800e1c6:	6861      	ldr	r1, [r4, #4]
 800e1c8:	9802      	ldr	r0, [sp, #8]
 800e1ca:	3101      	adds	r1, #1
 800e1cc:	f000 f93a 	bl	800e444 <_Balloc>
 800e1d0:	4681      	mov	r9, r0
 800e1d2:	b918      	cbnz	r0, 800e1dc <__gethex+0x410>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	2184      	movs	r1, #132	; 0x84
 800e1d8:	4b19      	ldr	r3, [pc, #100]	; (800e240 <__gethex+0x474>)
 800e1da:	e6ac      	b.n	800df36 <__gethex+0x16a>
 800e1dc:	6922      	ldr	r2, [r4, #16]
 800e1de:	f104 010c 	add.w	r1, r4, #12
 800e1e2:	3202      	adds	r2, #2
 800e1e4:	0092      	lsls	r2, r2, #2
 800e1e6:	300c      	adds	r0, #12
 800e1e8:	f000 f912 	bl	800e410 <memcpy>
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	9802      	ldr	r0, [sp, #8]
 800e1f0:	f000 f968 	bl	800e4c4 <_Bfree>
 800e1f4:	464c      	mov	r4, r9
 800e1f6:	6923      	ldr	r3, [r4, #16]
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	6122      	str	r2, [r4, #16]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e202:	615a      	str	r2, [r3, #20]
 800e204:	e7bd      	b.n	800e182 <__gethex+0x3b6>
 800e206:	6922      	ldr	r2, [r4, #16]
 800e208:	455a      	cmp	r2, fp
 800e20a:	dd0b      	ble.n	800e224 <__gethex+0x458>
 800e20c:	2101      	movs	r1, #1
 800e20e:	4620      	mov	r0, r4
 800e210:	f7ff fd74 	bl	800dcfc <rshift>
 800e214:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e218:	3501      	adds	r5, #1
 800e21a:	42ab      	cmp	r3, r5
 800e21c:	f6ff aed5 	blt.w	800dfca <__gethex+0x1fe>
 800e220:	2701      	movs	r7, #1
 800e222:	e7c2      	b.n	800e1aa <__gethex+0x3de>
 800e224:	f016 061f 	ands.w	r6, r6, #31
 800e228:	d0fa      	beq.n	800e220 <__gethex+0x454>
 800e22a:	449a      	add	sl, r3
 800e22c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e230:	f000 f9fe 	bl	800e630 <__hi0bits>
 800e234:	f1c6 0620 	rsb	r6, r6, #32
 800e238:	42b0      	cmp	r0, r6
 800e23a:	dbe7      	blt.n	800e20c <__gethex+0x440>
 800e23c:	e7f0      	b.n	800e220 <__gethex+0x454>
 800e23e:	bf00      	nop
 800e240:	08010680 	.word	0x08010680

0800e244 <L_shift>:
 800e244:	f1c2 0208 	rsb	r2, r2, #8
 800e248:	0092      	lsls	r2, r2, #2
 800e24a:	b570      	push	{r4, r5, r6, lr}
 800e24c:	f1c2 0620 	rsb	r6, r2, #32
 800e250:	6843      	ldr	r3, [r0, #4]
 800e252:	6804      	ldr	r4, [r0, #0]
 800e254:	fa03 f506 	lsl.w	r5, r3, r6
 800e258:	432c      	orrs	r4, r5
 800e25a:	40d3      	lsrs	r3, r2
 800e25c:	6004      	str	r4, [r0, #0]
 800e25e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e262:	4288      	cmp	r0, r1
 800e264:	d3f4      	bcc.n	800e250 <L_shift+0xc>
 800e266:	bd70      	pop	{r4, r5, r6, pc}

0800e268 <__match>:
 800e268:	b530      	push	{r4, r5, lr}
 800e26a:	6803      	ldr	r3, [r0, #0]
 800e26c:	3301      	adds	r3, #1
 800e26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e272:	b914      	cbnz	r4, 800e27a <__match+0x12>
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	2001      	movs	r0, #1
 800e278:	bd30      	pop	{r4, r5, pc}
 800e27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e27e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e282:	2d19      	cmp	r5, #25
 800e284:	bf98      	it	ls
 800e286:	3220      	addls	r2, #32
 800e288:	42a2      	cmp	r2, r4
 800e28a:	d0f0      	beq.n	800e26e <__match+0x6>
 800e28c:	2000      	movs	r0, #0
 800e28e:	e7f3      	b.n	800e278 <__match+0x10>

0800e290 <__hexnan>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	2500      	movs	r5, #0
 800e296:	680b      	ldr	r3, [r1, #0]
 800e298:	4682      	mov	sl, r0
 800e29a:	115e      	asrs	r6, r3, #5
 800e29c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2a0:	f013 031f 	ands.w	r3, r3, #31
 800e2a4:	bf18      	it	ne
 800e2a6:	3604      	addne	r6, #4
 800e2a8:	1f37      	subs	r7, r6, #4
 800e2aa:	4690      	mov	r8, r2
 800e2ac:	46b9      	mov	r9, r7
 800e2ae:	463c      	mov	r4, r7
 800e2b0:	46ab      	mov	fp, r5
 800e2b2:	b087      	sub	sp, #28
 800e2b4:	6801      	ldr	r1, [r0, #0]
 800e2b6:	9301      	str	r3, [sp, #4]
 800e2b8:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2bc:	9502      	str	r5, [sp, #8]
 800e2be:	784a      	ldrb	r2, [r1, #1]
 800e2c0:	1c4b      	adds	r3, r1, #1
 800e2c2:	9303      	str	r3, [sp, #12]
 800e2c4:	b342      	cbz	r2, 800e318 <__hexnan+0x88>
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	9105      	str	r1, [sp, #20]
 800e2ca:	9204      	str	r2, [sp, #16]
 800e2cc:	f7ff fd69 	bl	800dda2 <__hexdig_fun>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d14f      	bne.n	800e374 <__hexnan+0xe4>
 800e2d4:	9a04      	ldr	r2, [sp, #16]
 800e2d6:	9905      	ldr	r1, [sp, #20]
 800e2d8:	2a20      	cmp	r2, #32
 800e2da:	d818      	bhi.n	800e30e <__hexnan+0x7e>
 800e2dc:	9b02      	ldr	r3, [sp, #8]
 800e2de:	459b      	cmp	fp, r3
 800e2e0:	dd13      	ble.n	800e30a <__hexnan+0x7a>
 800e2e2:	454c      	cmp	r4, r9
 800e2e4:	d206      	bcs.n	800e2f4 <__hexnan+0x64>
 800e2e6:	2d07      	cmp	r5, #7
 800e2e8:	dc04      	bgt.n	800e2f4 <__hexnan+0x64>
 800e2ea:	462a      	mov	r2, r5
 800e2ec:	4649      	mov	r1, r9
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f7ff ffa8 	bl	800e244 <L_shift>
 800e2f4:	4544      	cmp	r4, r8
 800e2f6:	d950      	bls.n	800e39a <__hexnan+0x10a>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	f1a4 0904 	sub.w	r9, r4, #4
 800e2fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800e302:	461d      	mov	r5, r3
 800e304:	464c      	mov	r4, r9
 800e306:	f8cd b008 	str.w	fp, [sp, #8]
 800e30a:	9903      	ldr	r1, [sp, #12]
 800e30c:	e7d7      	b.n	800e2be <__hexnan+0x2e>
 800e30e:	2a29      	cmp	r2, #41	; 0x29
 800e310:	d156      	bne.n	800e3c0 <__hexnan+0x130>
 800e312:	3102      	adds	r1, #2
 800e314:	f8ca 1000 	str.w	r1, [sl]
 800e318:	f1bb 0f00 	cmp.w	fp, #0
 800e31c:	d050      	beq.n	800e3c0 <__hexnan+0x130>
 800e31e:	454c      	cmp	r4, r9
 800e320:	d206      	bcs.n	800e330 <__hexnan+0xa0>
 800e322:	2d07      	cmp	r5, #7
 800e324:	dc04      	bgt.n	800e330 <__hexnan+0xa0>
 800e326:	462a      	mov	r2, r5
 800e328:	4649      	mov	r1, r9
 800e32a:	4620      	mov	r0, r4
 800e32c:	f7ff ff8a 	bl	800e244 <L_shift>
 800e330:	4544      	cmp	r4, r8
 800e332:	d934      	bls.n	800e39e <__hexnan+0x10e>
 800e334:	4623      	mov	r3, r4
 800e336:	f1a8 0204 	sub.w	r2, r8, #4
 800e33a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e33e:	429f      	cmp	r7, r3
 800e340:	f842 1f04 	str.w	r1, [r2, #4]!
 800e344:	d2f9      	bcs.n	800e33a <__hexnan+0xaa>
 800e346:	1b3b      	subs	r3, r7, r4
 800e348:	f023 0303 	bic.w	r3, r3, #3
 800e34c:	3304      	adds	r3, #4
 800e34e:	3401      	adds	r4, #1
 800e350:	3e03      	subs	r6, #3
 800e352:	42b4      	cmp	r4, r6
 800e354:	bf88      	it	hi
 800e356:	2304      	movhi	r3, #4
 800e358:	2200      	movs	r2, #0
 800e35a:	4443      	add	r3, r8
 800e35c:	f843 2b04 	str.w	r2, [r3], #4
 800e360:	429f      	cmp	r7, r3
 800e362:	d2fb      	bcs.n	800e35c <__hexnan+0xcc>
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	b91b      	cbnz	r3, 800e370 <__hexnan+0xe0>
 800e368:	4547      	cmp	r7, r8
 800e36a:	d127      	bne.n	800e3bc <__hexnan+0x12c>
 800e36c:	2301      	movs	r3, #1
 800e36e:	603b      	str	r3, [r7, #0]
 800e370:	2005      	movs	r0, #5
 800e372:	e026      	b.n	800e3c2 <__hexnan+0x132>
 800e374:	3501      	adds	r5, #1
 800e376:	2d08      	cmp	r5, #8
 800e378:	f10b 0b01 	add.w	fp, fp, #1
 800e37c:	dd06      	ble.n	800e38c <__hexnan+0xfc>
 800e37e:	4544      	cmp	r4, r8
 800e380:	d9c3      	bls.n	800e30a <__hexnan+0x7a>
 800e382:	2300      	movs	r3, #0
 800e384:	2501      	movs	r5, #1
 800e386:	f844 3c04 	str.w	r3, [r4, #-4]
 800e38a:	3c04      	subs	r4, #4
 800e38c:	6822      	ldr	r2, [r4, #0]
 800e38e:	f000 000f 	and.w	r0, r0, #15
 800e392:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e396:	6022      	str	r2, [r4, #0]
 800e398:	e7b7      	b.n	800e30a <__hexnan+0x7a>
 800e39a:	2508      	movs	r5, #8
 800e39c:	e7b5      	b.n	800e30a <__hexnan+0x7a>
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d0df      	beq.n	800e364 <__hexnan+0xd4>
 800e3a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3a8:	f1c3 0320 	rsb	r3, r3, #32
 800e3ac:	fa22 f303 	lsr.w	r3, r2, r3
 800e3b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e3b4:	401a      	ands	r2, r3
 800e3b6:	f846 2c04 	str.w	r2, [r6, #-4]
 800e3ba:	e7d3      	b.n	800e364 <__hexnan+0xd4>
 800e3bc:	3f04      	subs	r7, #4
 800e3be:	e7d1      	b.n	800e364 <__hexnan+0xd4>
 800e3c0:	2004      	movs	r0, #4
 800e3c2:	b007      	add	sp, #28
 800e3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e3c8 <_localeconv_r>:
 800e3c8:	4800      	ldr	r0, [pc, #0]	; (800e3cc <_localeconv_r+0x4>)
 800e3ca:	4770      	bx	lr
 800e3cc:	200001a0 	.word	0x200001a0

0800e3d0 <__ascii_mbtowc>:
 800e3d0:	b082      	sub	sp, #8
 800e3d2:	b901      	cbnz	r1, 800e3d6 <__ascii_mbtowc+0x6>
 800e3d4:	a901      	add	r1, sp, #4
 800e3d6:	b142      	cbz	r2, 800e3ea <__ascii_mbtowc+0x1a>
 800e3d8:	b14b      	cbz	r3, 800e3ee <__ascii_mbtowc+0x1e>
 800e3da:	7813      	ldrb	r3, [r2, #0]
 800e3dc:	600b      	str	r3, [r1, #0]
 800e3de:	7812      	ldrb	r2, [r2, #0]
 800e3e0:	1e10      	subs	r0, r2, #0
 800e3e2:	bf18      	it	ne
 800e3e4:	2001      	movne	r0, #1
 800e3e6:	b002      	add	sp, #8
 800e3e8:	4770      	bx	lr
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	e7fb      	b.n	800e3e6 <__ascii_mbtowc+0x16>
 800e3ee:	f06f 0001 	mvn.w	r0, #1
 800e3f2:	e7f8      	b.n	800e3e6 <__ascii_mbtowc+0x16>

0800e3f4 <memchr>:
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	b510      	push	{r4, lr}
 800e3f8:	b2c9      	uxtb	r1, r1
 800e3fa:	4402      	add	r2, r0
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	4618      	mov	r0, r3
 800e400:	d101      	bne.n	800e406 <memchr+0x12>
 800e402:	2000      	movs	r0, #0
 800e404:	e003      	b.n	800e40e <memchr+0x1a>
 800e406:	7804      	ldrb	r4, [r0, #0]
 800e408:	3301      	adds	r3, #1
 800e40a:	428c      	cmp	r4, r1
 800e40c:	d1f6      	bne.n	800e3fc <memchr+0x8>
 800e40e:	bd10      	pop	{r4, pc}

0800e410 <memcpy>:
 800e410:	440a      	add	r2, r1
 800e412:	4291      	cmp	r1, r2
 800e414:	f100 33ff 	add.w	r3, r0, #4294967295
 800e418:	d100      	bne.n	800e41c <memcpy+0xc>
 800e41a:	4770      	bx	lr
 800e41c:	b510      	push	{r4, lr}
 800e41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e422:	4291      	cmp	r1, r2
 800e424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e428:	d1f9      	bne.n	800e41e <memcpy+0xe>
 800e42a:	bd10      	pop	{r4, pc}

0800e42c <__malloc_lock>:
 800e42c:	4801      	ldr	r0, [pc, #4]	; (800e434 <__malloc_lock+0x8>)
 800e42e:	f000 be82 	b.w	800f136 <__retarget_lock_acquire_recursive>
 800e432:	bf00      	nop
 800e434:	200008ec 	.word	0x200008ec

0800e438 <__malloc_unlock>:
 800e438:	4801      	ldr	r0, [pc, #4]	; (800e440 <__malloc_unlock+0x8>)
 800e43a:	f000 be7d 	b.w	800f138 <__retarget_lock_release_recursive>
 800e43e:	bf00      	nop
 800e440:	200008ec 	.word	0x200008ec

0800e444 <_Balloc>:
 800e444:	b570      	push	{r4, r5, r6, lr}
 800e446:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e448:	4604      	mov	r4, r0
 800e44a:	460d      	mov	r5, r1
 800e44c:	b976      	cbnz	r6, 800e46c <_Balloc+0x28>
 800e44e:	2010      	movs	r0, #16
 800e450:	f7fc ff8a 	bl	800b368 <malloc>
 800e454:	4602      	mov	r2, r0
 800e456:	6260      	str	r0, [r4, #36]	; 0x24
 800e458:	b920      	cbnz	r0, 800e464 <_Balloc+0x20>
 800e45a:	2166      	movs	r1, #102	; 0x66
 800e45c:	4b17      	ldr	r3, [pc, #92]	; (800e4bc <_Balloc+0x78>)
 800e45e:	4818      	ldr	r0, [pc, #96]	; (800e4c0 <_Balloc+0x7c>)
 800e460:	f000 fe38 	bl	800f0d4 <__assert_func>
 800e464:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e468:	6006      	str	r6, [r0, #0]
 800e46a:	60c6      	str	r6, [r0, #12]
 800e46c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e46e:	68f3      	ldr	r3, [r6, #12]
 800e470:	b183      	cbz	r3, 800e494 <_Balloc+0x50>
 800e472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e47a:	b9b8      	cbnz	r0, 800e4ac <_Balloc+0x68>
 800e47c:	2101      	movs	r1, #1
 800e47e:	fa01 f605 	lsl.w	r6, r1, r5
 800e482:	1d72      	adds	r2, r6, #5
 800e484:	4620      	mov	r0, r4
 800e486:	0092      	lsls	r2, r2, #2
 800e488:	f000 fc94 	bl	800edb4 <_calloc_r>
 800e48c:	b160      	cbz	r0, 800e4a8 <_Balloc+0x64>
 800e48e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e492:	e00e      	b.n	800e4b2 <_Balloc+0x6e>
 800e494:	2221      	movs	r2, #33	; 0x21
 800e496:	2104      	movs	r1, #4
 800e498:	4620      	mov	r0, r4
 800e49a:	f000 fc8b 	bl	800edb4 <_calloc_r>
 800e49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4a0:	60f0      	str	r0, [r6, #12]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d1e4      	bne.n	800e472 <_Balloc+0x2e>
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	bd70      	pop	{r4, r5, r6, pc}
 800e4ac:	6802      	ldr	r2, [r0, #0]
 800e4ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4b8:	e7f7      	b.n	800e4aa <_Balloc+0x66>
 800e4ba:	bf00      	nop
 800e4bc:	0801060a 	.word	0x0801060a
 800e4c0:	08010710 	.word	0x08010710

0800e4c4 <_Bfree>:
 800e4c4:	b570      	push	{r4, r5, r6, lr}
 800e4c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	b976      	cbnz	r6, 800e4ec <_Bfree+0x28>
 800e4ce:	2010      	movs	r0, #16
 800e4d0:	f7fc ff4a 	bl	800b368 <malloc>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	6268      	str	r0, [r5, #36]	; 0x24
 800e4d8:	b920      	cbnz	r0, 800e4e4 <_Bfree+0x20>
 800e4da:	218a      	movs	r1, #138	; 0x8a
 800e4dc:	4b08      	ldr	r3, [pc, #32]	; (800e500 <_Bfree+0x3c>)
 800e4de:	4809      	ldr	r0, [pc, #36]	; (800e504 <_Bfree+0x40>)
 800e4e0:	f000 fdf8 	bl	800f0d4 <__assert_func>
 800e4e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4e8:	6006      	str	r6, [r0, #0]
 800e4ea:	60c6      	str	r6, [r0, #12]
 800e4ec:	b13c      	cbz	r4, 800e4fe <_Bfree+0x3a>
 800e4ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4f0:	6862      	ldr	r2, [r4, #4]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4f8:	6021      	str	r1, [r4, #0]
 800e4fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4fe:	bd70      	pop	{r4, r5, r6, pc}
 800e500:	0801060a 	.word	0x0801060a
 800e504:	08010710 	.word	0x08010710

0800e508 <__multadd>:
 800e508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e50c:	4698      	mov	r8, r3
 800e50e:	460c      	mov	r4, r1
 800e510:	2300      	movs	r3, #0
 800e512:	690e      	ldr	r6, [r1, #16]
 800e514:	4607      	mov	r7, r0
 800e516:	f101 0014 	add.w	r0, r1, #20
 800e51a:	6805      	ldr	r5, [r0, #0]
 800e51c:	3301      	adds	r3, #1
 800e51e:	b2a9      	uxth	r1, r5
 800e520:	fb02 8101 	mla	r1, r2, r1, r8
 800e524:	0c2d      	lsrs	r5, r5, #16
 800e526:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e52a:	fb02 c505 	mla	r5, r2, r5, ip
 800e52e:	b289      	uxth	r1, r1
 800e530:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e534:	429e      	cmp	r6, r3
 800e536:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e53a:	f840 1b04 	str.w	r1, [r0], #4
 800e53e:	dcec      	bgt.n	800e51a <__multadd+0x12>
 800e540:	f1b8 0f00 	cmp.w	r8, #0
 800e544:	d022      	beq.n	800e58c <__multadd+0x84>
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	42b3      	cmp	r3, r6
 800e54a:	dc19      	bgt.n	800e580 <__multadd+0x78>
 800e54c:	6861      	ldr	r1, [r4, #4]
 800e54e:	4638      	mov	r0, r7
 800e550:	3101      	adds	r1, #1
 800e552:	f7ff ff77 	bl	800e444 <_Balloc>
 800e556:	4605      	mov	r5, r0
 800e558:	b928      	cbnz	r0, 800e566 <__multadd+0x5e>
 800e55a:	4602      	mov	r2, r0
 800e55c:	21b5      	movs	r1, #181	; 0xb5
 800e55e:	4b0d      	ldr	r3, [pc, #52]	; (800e594 <__multadd+0x8c>)
 800e560:	480d      	ldr	r0, [pc, #52]	; (800e598 <__multadd+0x90>)
 800e562:	f000 fdb7 	bl	800f0d4 <__assert_func>
 800e566:	6922      	ldr	r2, [r4, #16]
 800e568:	f104 010c 	add.w	r1, r4, #12
 800e56c:	3202      	adds	r2, #2
 800e56e:	0092      	lsls	r2, r2, #2
 800e570:	300c      	adds	r0, #12
 800e572:	f7ff ff4d 	bl	800e410 <memcpy>
 800e576:	4621      	mov	r1, r4
 800e578:	4638      	mov	r0, r7
 800e57a:	f7ff ffa3 	bl	800e4c4 <_Bfree>
 800e57e:	462c      	mov	r4, r5
 800e580:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e584:	3601      	adds	r6, #1
 800e586:	f8c3 8014 	str.w	r8, [r3, #20]
 800e58a:	6126      	str	r6, [r4, #16]
 800e58c:	4620      	mov	r0, r4
 800e58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e592:	bf00      	nop
 800e594:	08010680 	.word	0x08010680
 800e598:	08010710 	.word	0x08010710

0800e59c <__s2b>:
 800e59c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5a0:	4615      	mov	r5, r2
 800e5a2:	2209      	movs	r2, #9
 800e5a4:	461f      	mov	r7, r3
 800e5a6:	3308      	adds	r3, #8
 800e5a8:	460c      	mov	r4, r1
 800e5aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5ae:	4606      	mov	r6, r0
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	db09      	blt.n	800e5cc <__s2b+0x30>
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	f7ff ff43 	bl	800e444 <_Balloc>
 800e5be:	b940      	cbnz	r0, 800e5d2 <__s2b+0x36>
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	21ce      	movs	r1, #206	; 0xce
 800e5c4:	4b18      	ldr	r3, [pc, #96]	; (800e628 <__s2b+0x8c>)
 800e5c6:	4819      	ldr	r0, [pc, #100]	; (800e62c <__s2b+0x90>)
 800e5c8:	f000 fd84 	bl	800f0d4 <__assert_func>
 800e5cc:	0052      	lsls	r2, r2, #1
 800e5ce:	3101      	adds	r1, #1
 800e5d0:	e7f0      	b.n	800e5b4 <__s2b+0x18>
 800e5d2:	9b08      	ldr	r3, [sp, #32]
 800e5d4:	2d09      	cmp	r5, #9
 800e5d6:	6143      	str	r3, [r0, #20]
 800e5d8:	f04f 0301 	mov.w	r3, #1
 800e5dc:	6103      	str	r3, [r0, #16]
 800e5de:	dd16      	ble.n	800e60e <__s2b+0x72>
 800e5e0:	f104 0909 	add.w	r9, r4, #9
 800e5e4:	46c8      	mov	r8, r9
 800e5e6:	442c      	add	r4, r5
 800e5e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	220a      	movs	r2, #10
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	3b30      	subs	r3, #48	; 0x30
 800e5f4:	f7ff ff88 	bl	800e508 <__multadd>
 800e5f8:	45a0      	cmp	r8, r4
 800e5fa:	d1f5      	bne.n	800e5e8 <__s2b+0x4c>
 800e5fc:	f1a5 0408 	sub.w	r4, r5, #8
 800e600:	444c      	add	r4, r9
 800e602:	1b2d      	subs	r5, r5, r4
 800e604:	1963      	adds	r3, r4, r5
 800e606:	42bb      	cmp	r3, r7
 800e608:	db04      	blt.n	800e614 <__s2b+0x78>
 800e60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e60e:	2509      	movs	r5, #9
 800e610:	340a      	adds	r4, #10
 800e612:	e7f6      	b.n	800e602 <__s2b+0x66>
 800e614:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e618:	4601      	mov	r1, r0
 800e61a:	220a      	movs	r2, #10
 800e61c:	4630      	mov	r0, r6
 800e61e:	3b30      	subs	r3, #48	; 0x30
 800e620:	f7ff ff72 	bl	800e508 <__multadd>
 800e624:	e7ee      	b.n	800e604 <__s2b+0x68>
 800e626:	bf00      	nop
 800e628:	08010680 	.word	0x08010680
 800e62c:	08010710 	.word	0x08010710

0800e630 <__hi0bits>:
 800e630:	0c02      	lsrs	r2, r0, #16
 800e632:	0412      	lsls	r2, r2, #16
 800e634:	4603      	mov	r3, r0
 800e636:	b9ca      	cbnz	r2, 800e66c <__hi0bits+0x3c>
 800e638:	0403      	lsls	r3, r0, #16
 800e63a:	2010      	movs	r0, #16
 800e63c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e640:	bf04      	itt	eq
 800e642:	021b      	lsleq	r3, r3, #8
 800e644:	3008      	addeq	r0, #8
 800e646:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e64a:	bf04      	itt	eq
 800e64c:	011b      	lsleq	r3, r3, #4
 800e64e:	3004      	addeq	r0, #4
 800e650:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e654:	bf04      	itt	eq
 800e656:	009b      	lsleq	r3, r3, #2
 800e658:	3002      	addeq	r0, #2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	db05      	blt.n	800e66a <__hi0bits+0x3a>
 800e65e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e662:	f100 0001 	add.w	r0, r0, #1
 800e666:	bf08      	it	eq
 800e668:	2020      	moveq	r0, #32
 800e66a:	4770      	bx	lr
 800e66c:	2000      	movs	r0, #0
 800e66e:	e7e5      	b.n	800e63c <__hi0bits+0xc>

0800e670 <__lo0bits>:
 800e670:	6803      	ldr	r3, [r0, #0]
 800e672:	4602      	mov	r2, r0
 800e674:	f013 0007 	ands.w	r0, r3, #7
 800e678:	d00b      	beq.n	800e692 <__lo0bits+0x22>
 800e67a:	07d9      	lsls	r1, r3, #31
 800e67c:	d422      	bmi.n	800e6c4 <__lo0bits+0x54>
 800e67e:	0798      	lsls	r0, r3, #30
 800e680:	bf49      	itett	mi
 800e682:	085b      	lsrmi	r3, r3, #1
 800e684:	089b      	lsrpl	r3, r3, #2
 800e686:	2001      	movmi	r0, #1
 800e688:	6013      	strmi	r3, [r2, #0]
 800e68a:	bf5c      	itt	pl
 800e68c:	2002      	movpl	r0, #2
 800e68e:	6013      	strpl	r3, [r2, #0]
 800e690:	4770      	bx	lr
 800e692:	b299      	uxth	r1, r3
 800e694:	b909      	cbnz	r1, 800e69a <__lo0bits+0x2a>
 800e696:	2010      	movs	r0, #16
 800e698:	0c1b      	lsrs	r3, r3, #16
 800e69a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e69e:	bf04      	itt	eq
 800e6a0:	0a1b      	lsreq	r3, r3, #8
 800e6a2:	3008      	addeq	r0, #8
 800e6a4:	0719      	lsls	r1, r3, #28
 800e6a6:	bf04      	itt	eq
 800e6a8:	091b      	lsreq	r3, r3, #4
 800e6aa:	3004      	addeq	r0, #4
 800e6ac:	0799      	lsls	r1, r3, #30
 800e6ae:	bf04      	itt	eq
 800e6b0:	089b      	lsreq	r3, r3, #2
 800e6b2:	3002      	addeq	r0, #2
 800e6b4:	07d9      	lsls	r1, r3, #31
 800e6b6:	d403      	bmi.n	800e6c0 <__lo0bits+0x50>
 800e6b8:	085b      	lsrs	r3, r3, #1
 800e6ba:	f100 0001 	add.w	r0, r0, #1
 800e6be:	d003      	beq.n	800e6c8 <__lo0bits+0x58>
 800e6c0:	6013      	str	r3, [r2, #0]
 800e6c2:	4770      	bx	lr
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	4770      	bx	lr
 800e6c8:	2020      	movs	r0, #32
 800e6ca:	4770      	bx	lr

0800e6cc <__i2b>:
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	f7ff feb7 	bl	800e444 <_Balloc>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	b928      	cbnz	r0, 800e6e6 <__i2b+0x1a>
 800e6da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e6de:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <__i2b+0x24>)
 800e6e0:	4804      	ldr	r0, [pc, #16]	; (800e6f4 <__i2b+0x28>)
 800e6e2:	f000 fcf7 	bl	800f0d4 <__assert_func>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	6144      	str	r4, [r0, #20]
 800e6ea:	6103      	str	r3, [r0, #16]
 800e6ec:	bd10      	pop	{r4, pc}
 800e6ee:	bf00      	nop
 800e6f0:	08010680 	.word	0x08010680
 800e6f4:	08010710 	.word	0x08010710

0800e6f8 <__multiply>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	4614      	mov	r4, r2
 800e6fe:	690a      	ldr	r2, [r1, #16]
 800e700:	6923      	ldr	r3, [r4, #16]
 800e702:	460d      	mov	r5, r1
 800e704:	429a      	cmp	r2, r3
 800e706:	bfbe      	ittt	lt
 800e708:	460b      	movlt	r3, r1
 800e70a:	4625      	movlt	r5, r4
 800e70c:	461c      	movlt	r4, r3
 800e70e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e712:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e716:	68ab      	ldr	r3, [r5, #8]
 800e718:	6869      	ldr	r1, [r5, #4]
 800e71a:	eb0a 0709 	add.w	r7, sl, r9
 800e71e:	42bb      	cmp	r3, r7
 800e720:	b085      	sub	sp, #20
 800e722:	bfb8      	it	lt
 800e724:	3101      	addlt	r1, #1
 800e726:	f7ff fe8d 	bl	800e444 <_Balloc>
 800e72a:	b930      	cbnz	r0, 800e73a <__multiply+0x42>
 800e72c:	4602      	mov	r2, r0
 800e72e:	f240 115d 	movw	r1, #349	; 0x15d
 800e732:	4b41      	ldr	r3, [pc, #260]	; (800e838 <__multiply+0x140>)
 800e734:	4841      	ldr	r0, [pc, #260]	; (800e83c <__multiply+0x144>)
 800e736:	f000 fccd 	bl	800f0d4 <__assert_func>
 800e73a:	f100 0614 	add.w	r6, r0, #20
 800e73e:	4633      	mov	r3, r6
 800e740:	2200      	movs	r2, #0
 800e742:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e746:	4543      	cmp	r3, r8
 800e748:	d31e      	bcc.n	800e788 <__multiply+0x90>
 800e74a:	f105 0c14 	add.w	ip, r5, #20
 800e74e:	f104 0314 	add.w	r3, r4, #20
 800e752:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e756:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e75a:	9202      	str	r2, [sp, #8]
 800e75c:	ebac 0205 	sub.w	r2, ip, r5
 800e760:	3a15      	subs	r2, #21
 800e762:	f022 0203 	bic.w	r2, r2, #3
 800e766:	3204      	adds	r2, #4
 800e768:	f105 0115 	add.w	r1, r5, #21
 800e76c:	458c      	cmp	ip, r1
 800e76e:	bf38      	it	cc
 800e770:	2204      	movcc	r2, #4
 800e772:	9201      	str	r2, [sp, #4]
 800e774:	9a02      	ldr	r2, [sp, #8]
 800e776:	9303      	str	r3, [sp, #12]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d808      	bhi.n	800e78e <__multiply+0x96>
 800e77c:	2f00      	cmp	r7, #0
 800e77e:	dc55      	bgt.n	800e82c <__multiply+0x134>
 800e780:	6107      	str	r7, [r0, #16]
 800e782:	b005      	add	sp, #20
 800e784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e788:	f843 2b04 	str.w	r2, [r3], #4
 800e78c:	e7db      	b.n	800e746 <__multiply+0x4e>
 800e78e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e792:	f1ba 0f00 	cmp.w	sl, #0
 800e796:	d020      	beq.n	800e7da <__multiply+0xe2>
 800e798:	46b1      	mov	r9, r6
 800e79a:	2200      	movs	r2, #0
 800e79c:	f105 0e14 	add.w	lr, r5, #20
 800e7a0:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e7a4:	f8d9 b000 	ldr.w	fp, [r9]
 800e7a8:	b2a1      	uxth	r1, r4
 800e7aa:	fa1f fb8b 	uxth.w	fp, fp
 800e7ae:	fb0a b101 	mla	r1, sl, r1, fp
 800e7b2:	4411      	add	r1, r2
 800e7b4:	f8d9 2000 	ldr.w	r2, [r9]
 800e7b8:	0c24      	lsrs	r4, r4, #16
 800e7ba:	0c12      	lsrs	r2, r2, #16
 800e7bc:	fb0a 2404 	mla	r4, sl, r4, r2
 800e7c0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e7c4:	b289      	uxth	r1, r1
 800e7c6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e7ca:	45f4      	cmp	ip, lr
 800e7cc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e7d0:	f849 1b04 	str.w	r1, [r9], #4
 800e7d4:	d8e4      	bhi.n	800e7a0 <__multiply+0xa8>
 800e7d6:	9901      	ldr	r1, [sp, #4]
 800e7d8:	5072      	str	r2, [r6, r1]
 800e7da:	9a03      	ldr	r2, [sp, #12]
 800e7dc:	3304      	adds	r3, #4
 800e7de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e7e2:	f1b9 0f00 	cmp.w	r9, #0
 800e7e6:	d01f      	beq.n	800e828 <__multiply+0x130>
 800e7e8:	46b6      	mov	lr, r6
 800e7ea:	f04f 0a00 	mov.w	sl, #0
 800e7ee:	6834      	ldr	r4, [r6, #0]
 800e7f0:	f105 0114 	add.w	r1, r5, #20
 800e7f4:	880a      	ldrh	r2, [r1, #0]
 800e7f6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e7fa:	b2a4      	uxth	r4, r4
 800e7fc:	fb09 b202 	mla	r2, r9, r2, fp
 800e800:	4492      	add	sl, r2
 800e802:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e806:	f84e 4b04 	str.w	r4, [lr], #4
 800e80a:	f851 4b04 	ldr.w	r4, [r1], #4
 800e80e:	f8be 2000 	ldrh.w	r2, [lr]
 800e812:	0c24      	lsrs	r4, r4, #16
 800e814:	fb09 2404 	mla	r4, r9, r4, r2
 800e818:	458c      	cmp	ip, r1
 800e81a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e81e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e822:	d8e7      	bhi.n	800e7f4 <__multiply+0xfc>
 800e824:	9a01      	ldr	r2, [sp, #4]
 800e826:	50b4      	str	r4, [r6, r2]
 800e828:	3604      	adds	r6, #4
 800e82a:	e7a3      	b.n	800e774 <__multiply+0x7c>
 800e82c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1a5      	bne.n	800e780 <__multiply+0x88>
 800e834:	3f01      	subs	r7, #1
 800e836:	e7a1      	b.n	800e77c <__multiply+0x84>
 800e838:	08010680 	.word	0x08010680
 800e83c:	08010710 	.word	0x08010710

0800e840 <__pow5mult>:
 800e840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e844:	4615      	mov	r5, r2
 800e846:	f012 0203 	ands.w	r2, r2, #3
 800e84a:	4606      	mov	r6, r0
 800e84c:	460f      	mov	r7, r1
 800e84e:	d007      	beq.n	800e860 <__pow5mult+0x20>
 800e850:	4c25      	ldr	r4, [pc, #148]	; (800e8e8 <__pow5mult+0xa8>)
 800e852:	3a01      	subs	r2, #1
 800e854:	2300      	movs	r3, #0
 800e856:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e85a:	f7ff fe55 	bl	800e508 <__multadd>
 800e85e:	4607      	mov	r7, r0
 800e860:	10ad      	asrs	r5, r5, #2
 800e862:	d03d      	beq.n	800e8e0 <__pow5mult+0xa0>
 800e864:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e866:	b97c      	cbnz	r4, 800e888 <__pow5mult+0x48>
 800e868:	2010      	movs	r0, #16
 800e86a:	f7fc fd7d 	bl	800b368 <malloc>
 800e86e:	4602      	mov	r2, r0
 800e870:	6270      	str	r0, [r6, #36]	; 0x24
 800e872:	b928      	cbnz	r0, 800e880 <__pow5mult+0x40>
 800e874:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e878:	4b1c      	ldr	r3, [pc, #112]	; (800e8ec <__pow5mult+0xac>)
 800e87a:	481d      	ldr	r0, [pc, #116]	; (800e8f0 <__pow5mult+0xb0>)
 800e87c:	f000 fc2a 	bl	800f0d4 <__assert_func>
 800e880:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e884:	6004      	str	r4, [r0, #0]
 800e886:	60c4      	str	r4, [r0, #12]
 800e888:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e88c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e890:	b94c      	cbnz	r4, 800e8a6 <__pow5mult+0x66>
 800e892:	f240 2171 	movw	r1, #625	; 0x271
 800e896:	4630      	mov	r0, r6
 800e898:	f7ff ff18 	bl	800e6cc <__i2b>
 800e89c:	2300      	movs	r3, #0
 800e89e:	4604      	mov	r4, r0
 800e8a0:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8a4:	6003      	str	r3, [r0, #0]
 800e8a6:	f04f 0900 	mov.w	r9, #0
 800e8aa:	07eb      	lsls	r3, r5, #31
 800e8ac:	d50a      	bpl.n	800e8c4 <__pow5mult+0x84>
 800e8ae:	4639      	mov	r1, r7
 800e8b0:	4622      	mov	r2, r4
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	f7ff ff20 	bl	800e6f8 <__multiply>
 800e8b8:	4680      	mov	r8, r0
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	4630      	mov	r0, r6
 800e8be:	f7ff fe01 	bl	800e4c4 <_Bfree>
 800e8c2:	4647      	mov	r7, r8
 800e8c4:	106d      	asrs	r5, r5, #1
 800e8c6:	d00b      	beq.n	800e8e0 <__pow5mult+0xa0>
 800e8c8:	6820      	ldr	r0, [r4, #0]
 800e8ca:	b938      	cbnz	r0, 800e8dc <__pow5mult+0x9c>
 800e8cc:	4622      	mov	r2, r4
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	4630      	mov	r0, r6
 800e8d2:	f7ff ff11 	bl	800e6f8 <__multiply>
 800e8d6:	6020      	str	r0, [r4, #0]
 800e8d8:	f8c0 9000 	str.w	r9, [r0]
 800e8dc:	4604      	mov	r4, r0
 800e8de:	e7e4      	b.n	800e8aa <__pow5mult+0x6a>
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8e6:	bf00      	nop
 800e8e8:	08010860 	.word	0x08010860
 800e8ec:	0801060a 	.word	0x0801060a
 800e8f0:	08010710 	.word	0x08010710

0800e8f4 <__lshift>:
 800e8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f8:	460c      	mov	r4, r1
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	4691      	mov	r9, r2
 800e8fe:	6923      	ldr	r3, [r4, #16]
 800e900:	6849      	ldr	r1, [r1, #4]
 800e902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e90c:	f108 0601 	add.w	r6, r8, #1
 800e910:	42b3      	cmp	r3, r6
 800e912:	db0b      	blt.n	800e92c <__lshift+0x38>
 800e914:	4638      	mov	r0, r7
 800e916:	f7ff fd95 	bl	800e444 <_Balloc>
 800e91a:	4605      	mov	r5, r0
 800e91c:	b948      	cbnz	r0, 800e932 <__lshift+0x3e>
 800e91e:	4602      	mov	r2, r0
 800e920:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e924:	4b27      	ldr	r3, [pc, #156]	; (800e9c4 <__lshift+0xd0>)
 800e926:	4828      	ldr	r0, [pc, #160]	; (800e9c8 <__lshift+0xd4>)
 800e928:	f000 fbd4 	bl	800f0d4 <__assert_func>
 800e92c:	3101      	adds	r1, #1
 800e92e:	005b      	lsls	r3, r3, #1
 800e930:	e7ee      	b.n	800e910 <__lshift+0x1c>
 800e932:	2300      	movs	r3, #0
 800e934:	f100 0114 	add.w	r1, r0, #20
 800e938:	f100 0210 	add.w	r2, r0, #16
 800e93c:	4618      	mov	r0, r3
 800e93e:	4553      	cmp	r3, sl
 800e940:	db33      	blt.n	800e9aa <__lshift+0xb6>
 800e942:	6920      	ldr	r0, [r4, #16]
 800e944:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e948:	f104 0314 	add.w	r3, r4, #20
 800e94c:	f019 091f 	ands.w	r9, r9, #31
 800e950:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e954:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e958:	d02b      	beq.n	800e9b2 <__lshift+0xbe>
 800e95a:	468a      	mov	sl, r1
 800e95c:	2200      	movs	r2, #0
 800e95e:	f1c9 0e20 	rsb	lr, r9, #32
 800e962:	6818      	ldr	r0, [r3, #0]
 800e964:	fa00 f009 	lsl.w	r0, r0, r9
 800e968:	4302      	orrs	r2, r0
 800e96a:	f84a 2b04 	str.w	r2, [sl], #4
 800e96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e972:	459c      	cmp	ip, r3
 800e974:	fa22 f20e 	lsr.w	r2, r2, lr
 800e978:	d8f3      	bhi.n	800e962 <__lshift+0x6e>
 800e97a:	ebac 0304 	sub.w	r3, ip, r4
 800e97e:	3b15      	subs	r3, #21
 800e980:	f023 0303 	bic.w	r3, r3, #3
 800e984:	3304      	adds	r3, #4
 800e986:	f104 0015 	add.w	r0, r4, #21
 800e98a:	4584      	cmp	ip, r0
 800e98c:	bf38      	it	cc
 800e98e:	2304      	movcc	r3, #4
 800e990:	50ca      	str	r2, [r1, r3]
 800e992:	b10a      	cbz	r2, 800e998 <__lshift+0xa4>
 800e994:	f108 0602 	add.w	r6, r8, #2
 800e998:	3e01      	subs	r6, #1
 800e99a:	4638      	mov	r0, r7
 800e99c:	4621      	mov	r1, r4
 800e99e:	612e      	str	r6, [r5, #16]
 800e9a0:	f7ff fd90 	bl	800e4c4 <_Bfree>
 800e9a4:	4628      	mov	r0, r5
 800e9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	e7c5      	b.n	800e93e <__lshift+0x4a>
 800e9b2:	3904      	subs	r1, #4
 800e9b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9b8:	459c      	cmp	ip, r3
 800e9ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9be:	d8f9      	bhi.n	800e9b4 <__lshift+0xc0>
 800e9c0:	e7ea      	b.n	800e998 <__lshift+0xa4>
 800e9c2:	bf00      	nop
 800e9c4:	08010680 	.word	0x08010680
 800e9c8:	08010710 	.word	0x08010710

0800e9cc <__mcmp>:
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	690a      	ldr	r2, [r1, #16]
 800e9d0:	6900      	ldr	r0, [r0, #16]
 800e9d2:	b530      	push	{r4, r5, lr}
 800e9d4:	1a80      	subs	r0, r0, r2
 800e9d6:	d10d      	bne.n	800e9f4 <__mcmp+0x28>
 800e9d8:	3314      	adds	r3, #20
 800e9da:	3114      	adds	r1, #20
 800e9dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e9e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e9e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9ec:	4295      	cmp	r5, r2
 800e9ee:	d002      	beq.n	800e9f6 <__mcmp+0x2a>
 800e9f0:	d304      	bcc.n	800e9fc <__mcmp+0x30>
 800e9f2:	2001      	movs	r0, #1
 800e9f4:	bd30      	pop	{r4, r5, pc}
 800e9f6:	42a3      	cmp	r3, r4
 800e9f8:	d3f4      	bcc.n	800e9e4 <__mcmp+0x18>
 800e9fa:	e7fb      	b.n	800e9f4 <__mcmp+0x28>
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800ea00:	e7f8      	b.n	800e9f4 <__mcmp+0x28>
	...

0800ea04 <__mdiff>:
 800ea04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea08:	460c      	mov	r4, r1
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	4611      	mov	r1, r2
 800ea0e:	4620      	mov	r0, r4
 800ea10:	4692      	mov	sl, r2
 800ea12:	f7ff ffdb 	bl	800e9cc <__mcmp>
 800ea16:	1e05      	subs	r5, r0, #0
 800ea18:	d111      	bne.n	800ea3e <__mdiff+0x3a>
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	4630      	mov	r0, r6
 800ea1e:	f7ff fd11 	bl	800e444 <_Balloc>
 800ea22:	4602      	mov	r2, r0
 800ea24:	b928      	cbnz	r0, 800ea32 <__mdiff+0x2e>
 800ea26:	f240 2132 	movw	r1, #562	; 0x232
 800ea2a:	4b3c      	ldr	r3, [pc, #240]	; (800eb1c <__mdiff+0x118>)
 800ea2c:	483c      	ldr	r0, [pc, #240]	; (800eb20 <__mdiff+0x11c>)
 800ea2e:	f000 fb51 	bl	800f0d4 <__assert_func>
 800ea32:	2301      	movs	r3, #1
 800ea34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea38:	4610      	mov	r0, r2
 800ea3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	bfa4      	itt	ge
 800ea40:	4653      	movge	r3, sl
 800ea42:	46a2      	movge	sl, r4
 800ea44:	4630      	mov	r0, r6
 800ea46:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ea4a:	bfa6      	itte	ge
 800ea4c:	461c      	movge	r4, r3
 800ea4e:	2500      	movge	r5, #0
 800ea50:	2501      	movlt	r5, #1
 800ea52:	f7ff fcf7 	bl	800e444 <_Balloc>
 800ea56:	4602      	mov	r2, r0
 800ea58:	b918      	cbnz	r0, 800ea62 <__mdiff+0x5e>
 800ea5a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea5e:	4b2f      	ldr	r3, [pc, #188]	; (800eb1c <__mdiff+0x118>)
 800ea60:	e7e4      	b.n	800ea2c <__mdiff+0x28>
 800ea62:	f100 0814 	add.w	r8, r0, #20
 800ea66:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ea6a:	60c5      	str	r5, [r0, #12]
 800ea6c:	f04f 0c00 	mov.w	ip, #0
 800ea70:	f10a 0514 	add.w	r5, sl, #20
 800ea74:	f10a 0010 	add.w	r0, sl, #16
 800ea78:	46c2      	mov	sl, r8
 800ea7a:	6926      	ldr	r6, [r4, #16]
 800ea7c:	f104 0914 	add.w	r9, r4, #20
 800ea80:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ea84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea88:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ea8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea90:	fa1f f18b 	uxth.w	r1, fp
 800ea94:	4461      	add	r1, ip
 800ea96:	fa1f fc83 	uxth.w	ip, r3
 800ea9a:	0c1b      	lsrs	r3, r3, #16
 800ea9c:	eba1 010c 	sub.w	r1, r1, ip
 800eaa0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eaa4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800eaa8:	b289      	uxth	r1, r1
 800eaaa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800eaae:	454e      	cmp	r6, r9
 800eab0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800eab4:	f84a 3b04 	str.w	r3, [sl], #4
 800eab8:	d8e6      	bhi.n	800ea88 <__mdiff+0x84>
 800eaba:	1b33      	subs	r3, r6, r4
 800eabc:	3b15      	subs	r3, #21
 800eabe:	f023 0303 	bic.w	r3, r3, #3
 800eac2:	3415      	adds	r4, #21
 800eac4:	3304      	adds	r3, #4
 800eac6:	42a6      	cmp	r6, r4
 800eac8:	bf38      	it	cc
 800eaca:	2304      	movcc	r3, #4
 800eacc:	441d      	add	r5, r3
 800eace:	4443      	add	r3, r8
 800ead0:	461e      	mov	r6, r3
 800ead2:	462c      	mov	r4, r5
 800ead4:	4574      	cmp	r4, lr
 800ead6:	d30e      	bcc.n	800eaf6 <__mdiff+0xf2>
 800ead8:	f10e 0103 	add.w	r1, lr, #3
 800eadc:	1b49      	subs	r1, r1, r5
 800eade:	f021 0103 	bic.w	r1, r1, #3
 800eae2:	3d03      	subs	r5, #3
 800eae4:	45ae      	cmp	lr, r5
 800eae6:	bf38      	it	cc
 800eae8:	2100      	movcc	r1, #0
 800eaea:	4419      	add	r1, r3
 800eaec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800eaf0:	b18b      	cbz	r3, 800eb16 <__mdiff+0x112>
 800eaf2:	6117      	str	r7, [r2, #16]
 800eaf4:	e7a0      	b.n	800ea38 <__mdiff+0x34>
 800eaf6:	f854 8b04 	ldr.w	r8, [r4], #4
 800eafa:	fa1f f188 	uxth.w	r1, r8
 800eafe:	4461      	add	r1, ip
 800eb00:	1408      	asrs	r0, r1, #16
 800eb02:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800eb06:	b289      	uxth	r1, r1
 800eb08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eb0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb10:	f846 1b04 	str.w	r1, [r6], #4
 800eb14:	e7de      	b.n	800ead4 <__mdiff+0xd0>
 800eb16:	3f01      	subs	r7, #1
 800eb18:	e7e8      	b.n	800eaec <__mdiff+0xe8>
 800eb1a:	bf00      	nop
 800eb1c:	08010680 	.word	0x08010680
 800eb20:	08010710 	.word	0x08010710

0800eb24 <__ulp>:
 800eb24:	4b11      	ldr	r3, [pc, #68]	; (800eb6c <__ulp+0x48>)
 800eb26:	400b      	ands	r3, r1
 800eb28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	dd02      	ble.n	800eb36 <__ulp+0x12>
 800eb30:	2000      	movs	r0, #0
 800eb32:	4619      	mov	r1, r3
 800eb34:	4770      	bx	lr
 800eb36:	425b      	negs	r3, r3
 800eb38:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800eb3c:	f04f 0000 	mov.w	r0, #0
 800eb40:	f04f 0100 	mov.w	r1, #0
 800eb44:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb48:	da04      	bge.n	800eb54 <__ulp+0x30>
 800eb4a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eb4e:	fa43 f102 	asr.w	r1, r3, r2
 800eb52:	4770      	bx	lr
 800eb54:	f1a2 0314 	sub.w	r3, r2, #20
 800eb58:	2b1e      	cmp	r3, #30
 800eb5a:	bfd6      	itet	le
 800eb5c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800eb60:	2301      	movgt	r3, #1
 800eb62:	fa22 f303 	lsrle.w	r3, r2, r3
 800eb66:	4618      	mov	r0, r3
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	7ff00000 	.word	0x7ff00000

0800eb70 <__b2d>:
 800eb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb74:	6907      	ldr	r7, [r0, #16]
 800eb76:	f100 0914 	add.w	r9, r0, #20
 800eb7a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800eb7e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800eb82:	f1a7 0804 	sub.w	r8, r7, #4
 800eb86:	4630      	mov	r0, r6
 800eb88:	f7ff fd52 	bl	800e630 <__hi0bits>
 800eb8c:	f1c0 0320 	rsb	r3, r0, #32
 800eb90:	280a      	cmp	r0, #10
 800eb92:	600b      	str	r3, [r1, #0]
 800eb94:	491f      	ldr	r1, [pc, #124]	; (800ec14 <__b2d+0xa4>)
 800eb96:	dc17      	bgt.n	800ebc8 <__b2d+0x58>
 800eb98:	45c1      	cmp	r9, r8
 800eb9a:	bf28      	it	cs
 800eb9c:	2200      	movcs	r2, #0
 800eb9e:	f1c0 0c0b 	rsb	ip, r0, #11
 800eba2:	fa26 f30c 	lsr.w	r3, r6, ip
 800eba6:	bf38      	it	cc
 800eba8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ebac:	ea43 0501 	orr.w	r5, r3, r1
 800ebb0:	f100 0315 	add.w	r3, r0, #21
 800ebb4:	fa06 f303 	lsl.w	r3, r6, r3
 800ebb8:	fa22 f20c 	lsr.w	r2, r2, ip
 800ebbc:	ea43 0402 	orr.w	r4, r3, r2
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebc8:	45c1      	cmp	r9, r8
 800ebca:	bf2e      	itee	cs
 800ebcc:	2200      	movcs	r2, #0
 800ebce:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800ebd2:	f1a7 0808 	subcc.w	r8, r7, #8
 800ebd6:	f1b0 030b 	subs.w	r3, r0, #11
 800ebda:	d016      	beq.n	800ec0a <__b2d+0x9a>
 800ebdc:	f1c3 0720 	rsb	r7, r3, #32
 800ebe0:	fa22 f107 	lsr.w	r1, r2, r7
 800ebe4:	45c8      	cmp	r8, r9
 800ebe6:	fa06 f603 	lsl.w	r6, r6, r3
 800ebea:	ea46 0601 	orr.w	r6, r6, r1
 800ebee:	bf94      	ite	ls
 800ebf0:	2100      	movls	r1, #0
 800ebf2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ebf6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ebfa:	fa02 f003 	lsl.w	r0, r2, r3
 800ebfe:	40f9      	lsrs	r1, r7
 800ec00:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ec04:	ea40 0401 	orr.w	r4, r0, r1
 800ec08:	e7da      	b.n	800ebc0 <__b2d+0x50>
 800ec0a:	4614      	mov	r4, r2
 800ec0c:	ea46 0501 	orr.w	r5, r6, r1
 800ec10:	e7d6      	b.n	800ebc0 <__b2d+0x50>
 800ec12:	bf00      	nop
 800ec14:	3ff00000 	.word	0x3ff00000

0800ec18 <__d2b>:
 800ec18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ec1c:	2101      	movs	r1, #1
 800ec1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ec22:	4690      	mov	r8, r2
 800ec24:	461d      	mov	r5, r3
 800ec26:	f7ff fc0d 	bl	800e444 <_Balloc>
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	b930      	cbnz	r0, 800ec3c <__d2b+0x24>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	f240 310a 	movw	r1, #778	; 0x30a
 800ec34:	4b24      	ldr	r3, [pc, #144]	; (800ecc8 <__d2b+0xb0>)
 800ec36:	4825      	ldr	r0, [pc, #148]	; (800eccc <__d2b+0xb4>)
 800ec38:	f000 fa4c 	bl	800f0d4 <__assert_func>
 800ec3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ec40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ec44:	bb2d      	cbnz	r5, 800ec92 <__d2b+0x7a>
 800ec46:	9301      	str	r3, [sp, #4]
 800ec48:	f1b8 0300 	subs.w	r3, r8, #0
 800ec4c:	d026      	beq.n	800ec9c <__d2b+0x84>
 800ec4e:	4668      	mov	r0, sp
 800ec50:	9300      	str	r3, [sp, #0]
 800ec52:	f7ff fd0d 	bl	800e670 <__lo0bits>
 800ec56:	9900      	ldr	r1, [sp, #0]
 800ec58:	b1f0      	cbz	r0, 800ec98 <__d2b+0x80>
 800ec5a:	9a01      	ldr	r2, [sp, #4]
 800ec5c:	f1c0 0320 	rsb	r3, r0, #32
 800ec60:	fa02 f303 	lsl.w	r3, r2, r3
 800ec64:	430b      	orrs	r3, r1
 800ec66:	40c2      	lsrs	r2, r0
 800ec68:	6163      	str	r3, [r4, #20]
 800ec6a:	9201      	str	r2, [sp, #4]
 800ec6c:	9b01      	ldr	r3, [sp, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	bf14      	ite	ne
 800ec72:	2102      	movne	r1, #2
 800ec74:	2101      	moveq	r1, #1
 800ec76:	61a3      	str	r3, [r4, #24]
 800ec78:	6121      	str	r1, [r4, #16]
 800ec7a:	b1c5      	cbz	r5, 800ecae <__d2b+0x96>
 800ec7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec80:	4405      	add	r5, r0
 800ec82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec86:	603d      	str	r5, [r7, #0]
 800ec88:	6030      	str	r0, [r6, #0]
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	b002      	add	sp, #8
 800ec8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec96:	e7d6      	b.n	800ec46 <__d2b+0x2e>
 800ec98:	6161      	str	r1, [r4, #20]
 800ec9a:	e7e7      	b.n	800ec6c <__d2b+0x54>
 800ec9c:	a801      	add	r0, sp, #4
 800ec9e:	f7ff fce7 	bl	800e670 <__lo0bits>
 800eca2:	2101      	movs	r1, #1
 800eca4:	9b01      	ldr	r3, [sp, #4]
 800eca6:	6121      	str	r1, [r4, #16]
 800eca8:	6163      	str	r3, [r4, #20]
 800ecaa:	3020      	adds	r0, #32
 800ecac:	e7e5      	b.n	800ec7a <__d2b+0x62>
 800ecae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ecb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ecb6:	6038      	str	r0, [r7, #0]
 800ecb8:	6918      	ldr	r0, [r3, #16]
 800ecba:	f7ff fcb9 	bl	800e630 <__hi0bits>
 800ecbe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ecc2:	6031      	str	r1, [r6, #0]
 800ecc4:	e7e1      	b.n	800ec8a <__d2b+0x72>
 800ecc6:	bf00      	nop
 800ecc8:	08010680 	.word	0x08010680
 800eccc:	08010710 	.word	0x08010710

0800ecd0 <__ratio>:
 800ecd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd4:	4688      	mov	r8, r1
 800ecd6:	4669      	mov	r1, sp
 800ecd8:	4681      	mov	r9, r0
 800ecda:	f7ff ff49 	bl	800eb70 <__b2d>
 800ecde:	460f      	mov	r7, r1
 800ece0:	4604      	mov	r4, r0
 800ece2:	460d      	mov	r5, r1
 800ece4:	4640      	mov	r0, r8
 800ece6:	a901      	add	r1, sp, #4
 800ece8:	f7ff ff42 	bl	800eb70 <__b2d>
 800ecec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecf0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ecf4:	468b      	mov	fp, r1
 800ecf6:	eba3 0c02 	sub.w	ip, r3, r2
 800ecfa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ecfe:	1a9b      	subs	r3, r3, r2
 800ed00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	bfd5      	itete	le
 800ed08:	460a      	movle	r2, r1
 800ed0a:	462a      	movgt	r2, r5
 800ed0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed10:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed14:	bfd8      	it	le
 800ed16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ed1a:	465b      	mov	r3, fp
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	4639      	mov	r1, r7
 800ed20:	4620      	mov	r0, r4
 800ed22:	f7f1 fd6f 	bl	8000804 <__aeabi_ddiv>
 800ed26:	b003      	add	sp, #12
 800ed28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed2c <__copybits>:
 800ed2c:	3901      	subs	r1, #1
 800ed2e:	b570      	push	{r4, r5, r6, lr}
 800ed30:	1149      	asrs	r1, r1, #5
 800ed32:	6914      	ldr	r4, [r2, #16]
 800ed34:	3101      	adds	r1, #1
 800ed36:	f102 0314 	add.w	r3, r2, #20
 800ed3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed42:	1f05      	subs	r5, r0, #4
 800ed44:	42a3      	cmp	r3, r4
 800ed46:	d30c      	bcc.n	800ed62 <__copybits+0x36>
 800ed48:	1aa3      	subs	r3, r4, r2
 800ed4a:	3b11      	subs	r3, #17
 800ed4c:	f023 0303 	bic.w	r3, r3, #3
 800ed50:	3211      	adds	r2, #17
 800ed52:	42a2      	cmp	r2, r4
 800ed54:	bf88      	it	hi
 800ed56:	2300      	movhi	r3, #0
 800ed58:	4418      	add	r0, r3
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	4288      	cmp	r0, r1
 800ed5e:	d305      	bcc.n	800ed6c <__copybits+0x40>
 800ed60:	bd70      	pop	{r4, r5, r6, pc}
 800ed62:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed66:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed6a:	e7eb      	b.n	800ed44 <__copybits+0x18>
 800ed6c:	f840 3b04 	str.w	r3, [r0], #4
 800ed70:	e7f4      	b.n	800ed5c <__copybits+0x30>

0800ed72 <__any_on>:
 800ed72:	f100 0214 	add.w	r2, r0, #20
 800ed76:	6900      	ldr	r0, [r0, #16]
 800ed78:	114b      	asrs	r3, r1, #5
 800ed7a:	4298      	cmp	r0, r3
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	db11      	blt.n	800eda4 <__any_on+0x32>
 800ed80:	dd0a      	ble.n	800ed98 <__any_on+0x26>
 800ed82:	f011 011f 	ands.w	r1, r1, #31
 800ed86:	d007      	beq.n	800ed98 <__any_on+0x26>
 800ed88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed8c:	fa24 f001 	lsr.w	r0, r4, r1
 800ed90:	fa00 f101 	lsl.w	r1, r0, r1
 800ed94:	428c      	cmp	r4, r1
 800ed96:	d10b      	bne.n	800edb0 <__any_on+0x3e>
 800ed98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d803      	bhi.n	800eda8 <__any_on+0x36>
 800eda0:	2000      	movs	r0, #0
 800eda2:	bd10      	pop	{r4, pc}
 800eda4:	4603      	mov	r3, r0
 800eda6:	e7f7      	b.n	800ed98 <__any_on+0x26>
 800eda8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800edac:	2900      	cmp	r1, #0
 800edae:	d0f5      	beq.n	800ed9c <__any_on+0x2a>
 800edb0:	2001      	movs	r0, #1
 800edb2:	e7f6      	b.n	800eda2 <__any_on+0x30>

0800edb4 <_calloc_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	fb02 f501 	mul.w	r5, r2, r1
 800edba:	4629      	mov	r1, r5
 800edbc:	f7fc fb38 	bl	800b430 <_malloc_r>
 800edc0:	4604      	mov	r4, r0
 800edc2:	b118      	cbz	r0, 800edcc <_calloc_r+0x18>
 800edc4:	462a      	mov	r2, r5
 800edc6:	2100      	movs	r1, #0
 800edc8:	f7fc fade 	bl	800b388 <memset>
 800edcc:	4620      	mov	r0, r4
 800edce:	bd38      	pop	{r3, r4, r5, pc}

0800edd0 <__ssputs_r>:
 800edd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edd4:	688e      	ldr	r6, [r1, #8]
 800edd6:	4682      	mov	sl, r0
 800edd8:	429e      	cmp	r6, r3
 800edda:	460c      	mov	r4, r1
 800eddc:	4690      	mov	r8, r2
 800edde:	461f      	mov	r7, r3
 800ede0:	d838      	bhi.n	800ee54 <__ssputs_r+0x84>
 800ede2:	898a      	ldrh	r2, [r1, #12]
 800ede4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ede8:	d032      	beq.n	800ee50 <__ssputs_r+0x80>
 800edea:	6825      	ldr	r5, [r4, #0]
 800edec:	6909      	ldr	r1, [r1, #16]
 800edee:	3301      	adds	r3, #1
 800edf0:	eba5 0901 	sub.w	r9, r5, r1
 800edf4:	6965      	ldr	r5, [r4, #20]
 800edf6:	444b      	add	r3, r9
 800edf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee00:	106d      	asrs	r5, r5, #1
 800ee02:	429d      	cmp	r5, r3
 800ee04:	bf38      	it	cc
 800ee06:	461d      	movcc	r5, r3
 800ee08:	0553      	lsls	r3, r2, #21
 800ee0a:	d531      	bpl.n	800ee70 <__ssputs_r+0xa0>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	f7fc fb0f 	bl	800b430 <_malloc_r>
 800ee12:	4606      	mov	r6, r0
 800ee14:	b950      	cbnz	r0, 800ee2c <__ssputs_r+0x5c>
 800ee16:	230c      	movs	r3, #12
 800ee18:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1c:	f8ca 3000 	str.w	r3, [sl]
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee26:	81a3      	strh	r3, [r4, #12]
 800ee28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee2c:	464a      	mov	r2, r9
 800ee2e:	6921      	ldr	r1, [r4, #16]
 800ee30:	f7ff faee 	bl	800e410 <memcpy>
 800ee34:	89a3      	ldrh	r3, [r4, #12]
 800ee36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee3e:	81a3      	strh	r3, [r4, #12]
 800ee40:	6126      	str	r6, [r4, #16]
 800ee42:	444e      	add	r6, r9
 800ee44:	6026      	str	r6, [r4, #0]
 800ee46:	463e      	mov	r6, r7
 800ee48:	6165      	str	r5, [r4, #20]
 800ee4a:	eba5 0509 	sub.w	r5, r5, r9
 800ee4e:	60a5      	str	r5, [r4, #8]
 800ee50:	42be      	cmp	r6, r7
 800ee52:	d900      	bls.n	800ee56 <__ssputs_r+0x86>
 800ee54:	463e      	mov	r6, r7
 800ee56:	4632      	mov	r2, r6
 800ee58:	4641      	mov	r1, r8
 800ee5a:	6820      	ldr	r0, [r4, #0]
 800ee5c:	f000 f96d 	bl	800f13a <memmove>
 800ee60:	68a3      	ldr	r3, [r4, #8]
 800ee62:	6822      	ldr	r2, [r4, #0]
 800ee64:	1b9b      	subs	r3, r3, r6
 800ee66:	4432      	add	r2, r6
 800ee68:	2000      	movs	r0, #0
 800ee6a:	60a3      	str	r3, [r4, #8]
 800ee6c:	6022      	str	r2, [r4, #0]
 800ee6e:	e7db      	b.n	800ee28 <__ssputs_r+0x58>
 800ee70:	462a      	mov	r2, r5
 800ee72:	f000 f97c 	bl	800f16e <_realloc_r>
 800ee76:	4606      	mov	r6, r0
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d1e1      	bne.n	800ee40 <__ssputs_r+0x70>
 800ee7c:	4650      	mov	r0, sl
 800ee7e:	6921      	ldr	r1, [r4, #16]
 800ee80:	f7fc fa8a 	bl	800b398 <_free_r>
 800ee84:	e7c7      	b.n	800ee16 <__ssputs_r+0x46>
	...

0800ee88 <_svfiprintf_r>:
 800ee88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee8c:	4698      	mov	r8, r3
 800ee8e:	898b      	ldrh	r3, [r1, #12]
 800ee90:	4607      	mov	r7, r0
 800ee92:	061b      	lsls	r3, r3, #24
 800ee94:	460d      	mov	r5, r1
 800ee96:	4614      	mov	r4, r2
 800ee98:	b09d      	sub	sp, #116	; 0x74
 800ee9a:	d50e      	bpl.n	800eeba <_svfiprintf_r+0x32>
 800ee9c:	690b      	ldr	r3, [r1, #16]
 800ee9e:	b963      	cbnz	r3, 800eeba <_svfiprintf_r+0x32>
 800eea0:	2140      	movs	r1, #64	; 0x40
 800eea2:	f7fc fac5 	bl	800b430 <_malloc_r>
 800eea6:	6028      	str	r0, [r5, #0]
 800eea8:	6128      	str	r0, [r5, #16]
 800eeaa:	b920      	cbnz	r0, 800eeb6 <_svfiprintf_r+0x2e>
 800eeac:	230c      	movs	r3, #12
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb4:	e0d1      	b.n	800f05a <_svfiprintf_r+0x1d2>
 800eeb6:	2340      	movs	r3, #64	; 0x40
 800eeb8:	616b      	str	r3, [r5, #20]
 800eeba:	2300      	movs	r3, #0
 800eebc:	9309      	str	r3, [sp, #36]	; 0x24
 800eebe:	2320      	movs	r3, #32
 800eec0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eec4:	2330      	movs	r3, #48	; 0x30
 800eec6:	f04f 0901 	mov.w	r9, #1
 800eeca:	f8cd 800c 	str.w	r8, [sp, #12]
 800eece:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f074 <_svfiprintf_r+0x1ec>
 800eed2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eed6:	4623      	mov	r3, r4
 800eed8:	469a      	mov	sl, r3
 800eeda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eede:	b10a      	cbz	r2, 800eee4 <_svfiprintf_r+0x5c>
 800eee0:	2a25      	cmp	r2, #37	; 0x25
 800eee2:	d1f9      	bne.n	800eed8 <_svfiprintf_r+0x50>
 800eee4:	ebba 0b04 	subs.w	fp, sl, r4
 800eee8:	d00b      	beq.n	800ef02 <_svfiprintf_r+0x7a>
 800eeea:	465b      	mov	r3, fp
 800eeec:	4622      	mov	r2, r4
 800eeee:	4629      	mov	r1, r5
 800eef0:	4638      	mov	r0, r7
 800eef2:	f7ff ff6d 	bl	800edd0 <__ssputs_r>
 800eef6:	3001      	adds	r0, #1
 800eef8:	f000 80aa 	beq.w	800f050 <_svfiprintf_r+0x1c8>
 800eefc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eefe:	445a      	add	r2, fp
 800ef00:	9209      	str	r2, [sp, #36]	; 0x24
 800ef02:	f89a 3000 	ldrb.w	r3, [sl]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f000 80a2 	beq.w	800f050 <_svfiprintf_r+0x1c8>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef16:	f10a 0a01 	add.w	sl, sl, #1
 800ef1a:	9304      	str	r3, [sp, #16]
 800ef1c:	9307      	str	r3, [sp, #28]
 800ef1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef22:	931a      	str	r3, [sp, #104]	; 0x68
 800ef24:	4654      	mov	r4, sl
 800ef26:	2205      	movs	r2, #5
 800ef28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef2c:	4851      	ldr	r0, [pc, #324]	; (800f074 <_svfiprintf_r+0x1ec>)
 800ef2e:	f7ff fa61 	bl	800e3f4 <memchr>
 800ef32:	9a04      	ldr	r2, [sp, #16]
 800ef34:	b9d8      	cbnz	r0, 800ef6e <_svfiprintf_r+0xe6>
 800ef36:	06d0      	lsls	r0, r2, #27
 800ef38:	bf44      	itt	mi
 800ef3a:	2320      	movmi	r3, #32
 800ef3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef40:	0711      	lsls	r1, r2, #28
 800ef42:	bf44      	itt	mi
 800ef44:	232b      	movmi	r3, #43	; 0x2b
 800ef46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ef4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ef50:	d015      	beq.n	800ef7e <_svfiprintf_r+0xf6>
 800ef52:	4654      	mov	r4, sl
 800ef54:	2000      	movs	r0, #0
 800ef56:	f04f 0c0a 	mov.w	ip, #10
 800ef5a:	9a07      	ldr	r2, [sp, #28]
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef62:	3b30      	subs	r3, #48	; 0x30
 800ef64:	2b09      	cmp	r3, #9
 800ef66:	d94e      	bls.n	800f006 <_svfiprintf_r+0x17e>
 800ef68:	b1b0      	cbz	r0, 800ef98 <_svfiprintf_r+0x110>
 800ef6a:	9207      	str	r2, [sp, #28]
 800ef6c:	e014      	b.n	800ef98 <_svfiprintf_r+0x110>
 800ef6e:	eba0 0308 	sub.w	r3, r0, r8
 800ef72:	fa09 f303 	lsl.w	r3, r9, r3
 800ef76:	4313      	orrs	r3, r2
 800ef78:	46a2      	mov	sl, r4
 800ef7a:	9304      	str	r3, [sp, #16]
 800ef7c:	e7d2      	b.n	800ef24 <_svfiprintf_r+0x9c>
 800ef7e:	9b03      	ldr	r3, [sp, #12]
 800ef80:	1d19      	adds	r1, r3, #4
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	9103      	str	r1, [sp, #12]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	bfbb      	ittet	lt
 800ef8a:	425b      	neglt	r3, r3
 800ef8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ef90:	9307      	strge	r3, [sp, #28]
 800ef92:	9307      	strlt	r3, [sp, #28]
 800ef94:	bfb8      	it	lt
 800ef96:	9204      	strlt	r2, [sp, #16]
 800ef98:	7823      	ldrb	r3, [r4, #0]
 800ef9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ef9c:	d10c      	bne.n	800efb8 <_svfiprintf_r+0x130>
 800ef9e:	7863      	ldrb	r3, [r4, #1]
 800efa0:	2b2a      	cmp	r3, #42	; 0x2a
 800efa2:	d135      	bne.n	800f010 <_svfiprintf_r+0x188>
 800efa4:	9b03      	ldr	r3, [sp, #12]
 800efa6:	3402      	adds	r4, #2
 800efa8:	1d1a      	adds	r2, r3, #4
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	9203      	str	r2, [sp, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bfb8      	it	lt
 800efb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800efb6:	9305      	str	r3, [sp, #20]
 800efb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f084 <_svfiprintf_r+0x1fc>
 800efbc:	2203      	movs	r2, #3
 800efbe:	4650      	mov	r0, sl
 800efc0:	7821      	ldrb	r1, [r4, #0]
 800efc2:	f7ff fa17 	bl	800e3f4 <memchr>
 800efc6:	b140      	cbz	r0, 800efda <_svfiprintf_r+0x152>
 800efc8:	2340      	movs	r3, #64	; 0x40
 800efca:	eba0 000a 	sub.w	r0, r0, sl
 800efce:	fa03 f000 	lsl.w	r0, r3, r0
 800efd2:	9b04      	ldr	r3, [sp, #16]
 800efd4:	3401      	adds	r4, #1
 800efd6:	4303      	orrs	r3, r0
 800efd8:	9304      	str	r3, [sp, #16]
 800efda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efde:	2206      	movs	r2, #6
 800efe0:	4825      	ldr	r0, [pc, #148]	; (800f078 <_svfiprintf_r+0x1f0>)
 800efe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efe6:	f7ff fa05 	bl	800e3f4 <memchr>
 800efea:	2800      	cmp	r0, #0
 800efec:	d038      	beq.n	800f060 <_svfiprintf_r+0x1d8>
 800efee:	4b23      	ldr	r3, [pc, #140]	; (800f07c <_svfiprintf_r+0x1f4>)
 800eff0:	bb1b      	cbnz	r3, 800f03a <_svfiprintf_r+0x1b2>
 800eff2:	9b03      	ldr	r3, [sp, #12]
 800eff4:	3307      	adds	r3, #7
 800eff6:	f023 0307 	bic.w	r3, r3, #7
 800effa:	3308      	adds	r3, #8
 800effc:	9303      	str	r3, [sp, #12]
 800effe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f000:	4433      	add	r3, r6
 800f002:	9309      	str	r3, [sp, #36]	; 0x24
 800f004:	e767      	b.n	800eed6 <_svfiprintf_r+0x4e>
 800f006:	460c      	mov	r4, r1
 800f008:	2001      	movs	r0, #1
 800f00a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f00e:	e7a5      	b.n	800ef5c <_svfiprintf_r+0xd4>
 800f010:	2300      	movs	r3, #0
 800f012:	f04f 0c0a 	mov.w	ip, #10
 800f016:	4619      	mov	r1, r3
 800f018:	3401      	adds	r4, #1
 800f01a:	9305      	str	r3, [sp, #20]
 800f01c:	4620      	mov	r0, r4
 800f01e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f022:	3a30      	subs	r2, #48	; 0x30
 800f024:	2a09      	cmp	r2, #9
 800f026:	d903      	bls.n	800f030 <_svfiprintf_r+0x1a8>
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0c5      	beq.n	800efb8 <_svfiprintf_r+0x130>
 800f02c:	9105      	str	r1, [sp, #20]
 800f02e:	e7c3      	b.n	800efb8 <_svfiprintf_r+0x130>
 800f030:	4604      	mov	r4, r0
 800f032:	2301      	movs	r3, #1
 800f034:	fb0c 2101 	mla	r1, ip, r1, r2
 800f038:	e7f0      	b.n	800f01c <_svfiprintf_r+0x194>
 800f03a:	ab03      	add	r3, sp, #12
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	462a      	mov	r2, r5
 800f040:	4638      	mov	r0, r7
 800f042:	4b0f      	ldr	r3, [pc, #60]	; (800f080 <_svfiprintf_r+0x1f8>)
 800f044:	a904      	add	r1, sp, #16
 800f046:	f7fc faeb 	bl	800b620 <_printf_float>
 800f04a:	1c42      	adds	r2, r0, #1
 800f04c:	4606      	mov	r6, r0
 800f04e:	d1d6      	bne.n	800effe <_svfiprintf_r+0x176>
 800f050:	89ab      	ldrh	r3, [r5, #12]
 800f052:	065b      	lsls	r3, r3, #25
 800f054:	f53f af2c 	bmi.w	800eeb0 <_svfiprintf_r+0x28>
 800f058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f05a:	b01d      	add	sp, #116	; 0x74
 800f05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f060:	ab03      	add	r3, sp, #12
 800f062:	9300      	str	r3, [sp, #0]
 800f064:	462a      	mov	r2, r5
 800f066:	4638      	mov	r0, r7
 800f068:	4b05      	ldr	r3, [pc, #20]	; (800f080 <_svfiprintf_r+0x1f8>)
 800f06a:	a904      	add	r1, sp, #16
 800f06c:	f7fc fd74 	bl	800bb58 <_printf_i>
 800f070:	e7eb      	b.n	800f04a <_svfiprintf_r+0x1c2>
 800f072:	bf00      	nop
 800f074:	0801086c 	.word	0x0801086c
 800f078:	08010876 	.word	0x08010876
 800f07c:	0800b621 	.word	0x0800b621
 800f080:	0800edd1 	.word	0x0800edd1
 800f084:	08010872 	.word	0x08010872

0800f088 <nan>:
 800f088:	2000      	movs	r0, #0
 800f08a:	4901      	ldr	r1, [pc, #4]	; (800f090 <nan+0x8>)
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	7ff80000 	.word	0x7ff80000

0800f094 <strncmp>:
 800f094:	b510      	push	{r4, lr}
 800f096:	b16a      	cbz	r2, 800f0b4 <strncmp+0x20>
 800f098:	3901      	subs	r1, #1
 800f09a:	1884      	adds	r4, r0, r2
 800f09c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f0a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d103      	bne.n	800f0b0 <strncmp+0x1c>
 800f0a8:	42a0      	cmp	r0, r4
 800f0aa:	d001      	beq.n	800f0b0 <strncmp+0x1c>
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d1f5      	bne.n	800f09c <strncmp+0x8>
 800f0b0:	1a98      	subs	r0, r3, r2
 800f0b2:	bd10      	pop	{r4, pc}
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	e7fc      	b.n	800f0b2 <strncmp+0x1e>

0800f0b8 <__ascii_wctomb>:
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	4608      	mov	r0, r1
 800f0bc:	b141      	cbz	r1, 800f0d0 <__ascii_wctomb+0x18>
 800f0be:	2aff      	cmp	r2, #255	; 0xff
 800f0c0:	d904      	bls.n	800f0cc <__ascii_wctomb+0x14>
 800f0c2:	228a      	movs	r2, #138	; 0x8a
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c8:	601a      	str	r2, [r3, #0]
 800f0ca:	4770      	bx	lr
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	700a      	strb	r2, [r1, #0]
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <__assert_func>:
 800f0d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0d6:	4614      	mov	r4, r2
 800f0d8:	461a      	mov	r2, r3
 800f0da:	4b09      	ldr	r3, [pc, #36]	; (800f100 <__assert_func+0x2c>)
 800f0dc:	4605      	mov	r5, r0
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	68d8      	ldr	r0, [r3, #12]
 800f0e2:	b14c      	cbz	r4, 800f0f8 <__assert_func+0x24>
 800f0e4:	4b07      	ldr	r3, [pc, #28]	; (800f104 <__assert_func+0x30>)
 800f0e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0ea:	9100      	str	r1, [sp, #0]
 800f0ec:	462b      	mov	r3, r5
 800f0ee:	4906      	ldr	r1, [pc, #24]	; (800f108 <__assert_func+0x34>)
 800f0f0:	f000 f80e 	bl	800f110 <fiprintf>
 800f0f4:	f000 fa78 	bl	800f5e8 <abort>
 800f0f8:	4b04      	ldr	r3, [pc, #16]	; (800f10c <__assert_func+0x38>)
 800f0fa:	461c      	mov	r4, r3
 800f0fc:	e7f3      	b.n	800f0e6 <__assert_func+0x12>
 800f0fe:	bf00      	nop
 800f100:	20000048 	.word	0x20000048
 800f104:	0801087d 	.word	0x0801087d
 800f108:	0801088a 	.word	0x0801088a
 800f10c:	080108b8 	.word	0x080108b8

0800f110 <fiprintf>:
 800f110:	b40e      	push	{r1, r2, r3}
 800f112:	b503      	push	{r0, r1, lr}
 800f114:	4601      	mov	r1, r0
 800f116:	ab03      	add	r3, sp, #12
 800f118:	4805      	ldr	r0, [pc, #20]	; (800f130 <fiprintf+0x20>)
 800f11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11e:	6800      	ldr	r0, [r0, #0]
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	f000 f871 	bl	800f208 <_vfiprintf_r>
 800f126:	b002      	add	sp, #8
 800f128:	f85d eb04 	ldr.w	lr, [sp], #4
 800f12c:	b003      	add	sp, #12
 800f12e:	4770      	bx	lr
 800f130:	20000048 	.word	0x20000048

0800f134 <__retarget_lock_init_recursive>:
 800f134:	4770      	bx	lr

0800f136 <__retarget_lock_acquire_recursive>:
 800f136:	4770      	bx	lr

0800f138 <__retarget_lock_release_recursive>:
 800f138:	4770      	bx	lr

0800f13a <memmove>:
 800f13a:	4288      	cmp	r0, r1
 800f13c:	b510      	push	{r4, lr}
 800f13e:	eb01 0402 	add.w	r4, r1, r2
 800f142:	d902      	bls.n	800f14a <memmove+0x10>
 800f144:	4284      	cmp	r4, r0
 800f146:	4623      	mov	r3, r4
 800f148:	d807      	bhi.n	800f15a <memmove+0x20>
 800f14a:	1e43      	subs	r3, r0, #1
 800f14c:	42a1      	cmp	r1, r4
 800f14e:	d008      	beq.n	800f162 <memmove+0x28>
 800f150:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f154:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f158:	e7f8      	b.n	800f14c <memmove+0x12>
 800f15a:	4601      	mov	r1, r0
 800f15c:	4402      	add	r2, r0
 800f15e:	428a      	cmp	r2, r1
 800f160:	d100      	bne.n	800f164 <memmove+0x2a>
 800f162:	bd10      	pop	{r4, pc}
 800f164:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f168:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f16c:	e7f7      	b.n	800f15e <memmove+0x24>

0800f16e <_realloc_r>:
 800f16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f170:	4607      	mov	r7, r0
 800f172:	4614      	mov	r4, r2
 800f174:	460e      	mov	r6, r1
 800f176:	b921      	cbnz	r1, 800f182 <_realloc_r+0x14>
 800f178:	4611      	mov	r1, r2
 800f17a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f17e:	f7fc b957 	b.w	800b430 <_malloc_r>
 800f182:	b922      	cbnz	r2, 800f18e <_realloc_r+0x20>
 800f184:	f7fc f908 	bl	800b398 <_free_r>
 800f188:	4625      	mov	r5, r4
 800f18a:	4628      	mov	r0, r5
 800f18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f18e:	f000 fc4f 	bl	800fa30 <_malloc_usable_size_r>
 800f192:	42a0      	cmp	r0, r4
 800f194:	d20f      	bcs.n	800f1b6 <_realloc_r+0x48>
 800f196:	4621      	mov	r1, r4
 800f198:	4638      	mov	r0, r7
 800f19a:	f7fc f949 	bl	800b430 <_malloc_r>
 800f19e:	4605      	mov	r5, r0
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d0f2      	beq.n	800f18a <_realloc_r+0x1c>
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4622      	mov	r2, r4
 800f1a8:	f7ff f932 	bl	800e410 <memcpy>
 800f1ac:	4631      	mov	r1, r6
 800f1ae:	4638      	mov	r0, r7
 800f1b0:	f7fc f8f2 	bl	800b398 <_free_r>
 800f1b4:	e7e9      	b.n	800f18a <_realloc_r+0x1c>
 800f1b6:	4635      	mov	r5, r6
 800f1b8:	e7e7      	b.n	800f18a <_realloc_r+0x1c>

0800f1ba <__sfputc_r>:
 800f1ba:	6893      	ldr	r3, [r2, #8]
 800f1bc:	b410      	push	{r4}
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	6093      	str	r3, [r2, #8]
 800f1c4:	da07      	bge.n	800f1d6 <__sfputc_r+0x1c>
 800f1c6:	6994      	ldr	r4, [r2, #24]
 800f1c8:	42a3      	cmp	r3, r4
 800f1ca:	db01      	blt.n	800f1d0 <__sfputc_r+0x16>
 800f1cc:	290a      	cmp	r1, #10
 800f1ce:	d102      	bne.n	800f1d6 <__sfputc_r+0x1c>
 800f1d0:	bc10      	pop	{r4}
 800f1d2:	f000 b949 	b.w	800f468 <__swbuf_r>
 800f1d6:	6813      	ldr	r3, [r2, #0]
 800f1d8:	1c58      	adds	r0, r3, #1
 800f1da:	6010      	str	r0, [r2, #0]
 800f1dc:	7019      	strb	r1, [r3, #0]
 800f1de:	4608      	mov	r0, r1
 800f1e0:	bc10      	pop	{r4}
 800f1e2:	4770      	bx	lr

0800f1e4 <__sfputs_r>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	460f      	mov	r7, r1
 800f1ea:	4614      	mov	r4, r2
 800f1ec:	18d5      	adds	r5, r2, r3
 800f1ee:	42ac      	cmp	r4, r5
 800f1f0:	d101      	bne.n	800f1f6 <__sfputs_r+0x12>
 800f1f2:	2000      	movs	r0, #0
 800f1f4:	e007      	b.n	800f206 <__sfputs_r+0x22>
 800f1f6:	463a      	mov	r2, r7
 800f1f8:	4630      	mov	r0, r6
 800f1fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1fe:	f7ff ffdc 	bl	800f1ba <__sfputc_r>
 800f202:	1c43      	adds	r3, r0, #1
 800f204:	d1f3      	bne.n	800f1ee <__sfputs_r+0xa>
 800f206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f208 <_vfiprintf_r>:
 800f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	460d      	mov	r5, r1
 800f20e:	4614      	mov	r4, r2
 800f210:	4698      	mov	r8, r3
 800f212:	4606      	mov	r6, r0
 800f214:	b09d      	sub	sp, #116	; 0x74
 800f216:	b118      	cbz	r0, 800f220 <_vfiprintf_r+0x18>
 800f218:	6983      	ldr	r3, [r0, #24]
 800f21a:	b90b      	cbnz	r3, 800f220 <_vfiprintf_r+0x18>
 800f21c:	f000 fb06 	bl	800f82c <__sinit>
 800f220:	4b89      	ldr	r3, [pc, #548]	; (800f448 <_vfiprintf_r+0x240>)
 800f222:	429d      	cmp	r5, r3
 800f224:	d11b      	bne.n	800f25e <_vfiprintf_r+0x56>
 800f226:	6875      	ldr	r5, [r6, #4]
 800f228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f22a:	07d9      	lsls	r1, r3, #31
 800f22c:	d405      	bmi.n	800f23a <_vfiprintf_r+0x32>
 800f22e:	89ab      	ldrh	r3, [r5, #12]
 800f230:	059a      	lsls	r2, r3, #22
 800f232:	d402      	bmi.n	800f23a <_vfiprintf_r+0x32>
 800f234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f236:	f7ff ff7e 	bl	800f136 <__retarget_lock_acquire_recursive>
 800f23a:	89ab      	ldrh	r3, [r5, #12]
 800f23c:	071b      	lsls	r3, r3, #28
 800f23e:	d501      	bpl.n	800f244 <_vfiprintf_r+0x3c>
 800f240:	692b      	ldr	r3, [r5, #16]
 800f242:	b9eb      	cbnz	r3, 800f280 <_vfiprintf_r+0x78>
 800f244:	4629      	mov	r1, r5
 800f246:	4630      	mov	r0, r6
 800f248:	f000 f960 	bl	800f50c <__swsetup_r>
 800f24c:	b1c0      	cbz	r0, 800f280 <_vfiprintf_r+0x78>
 800f24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f250:	07dc      	lsls	r4, r3, #31
 800f252:	d50e      	bpl.n	800f272 <_vfiprintf_r+0x6a>
 800f254:	f04f 30ff 	mov.w	r0, #4294967295
 800f258:	b01d      	add	sp, #116	; 0x74
 800f25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25e:	4b7b      	ldr	r3, [pc, #492]	; (800f44c <_vfiprintf_r+0x244>)
 800f260:	429d      	cmp	r5, r3
 800f262:	d101      	bne.n	800f268 <_vfiprintf_r+0x60>
 800f264:	68b5      	ldr	r5, [r6, #8]
 800f266:	e7df      	b.n	800f228 <_vfiprintf_r+0x20>
 800f268:	4b79      	ldr	r3, [pc, #484]	; (800f450 <_vfiprintf_r+0x248>)
 800f26a:	429d      	cmp	r5, r3
 800f26c:	bf08      	it	eq
 800f26e:	68f5      	ldreq	r5, [r6, #12]
 800f270:	e7da      	b.n	800f228 <_vfiprintf_r+0x20>
 800f272:	89ab      	ldrh	r3, [r5, #12]
 800f274:	0598      	lsls	r0, r3, #22
 800f276:	d4ed      	bmi.n	800f254 <_vfiprintf_r+0x4c>
 800f278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f27a:	f7ff ff5d 	bl	800f138 <__retarget_lock_release_recursive>
 800f27e:	e7e9      	b.n	800f254 <_vfiprintf_r+0x4c>
 800f280:	2300      	movs	r3, #0
 800f282:	9309      	str	r3, [sp, #36]	; 0x24
 800f284:	2320      	movs	r3, #32
 800f286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f28a:	2330      	movs	r3, #48	; 0x30
 800f28c:	f04f 0901 	mov.w	r9, #1
 800f290:	f8cd 800c 	str.w	r8, [sp, #12]
 800f294:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f454 <_vfiprintf_r+0x24c>
 800f298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f29c:	4623      	mov	r3, r4
 800f29e:	469a      	mov	sl, r3
 800f2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2a4:	b10a      	cbz	r2, 800f2aa <_vfiprintf_r+0xa2>
 800f2a6:	2a25      	cmp	r2, #37	; 0x25
 800f2a8:	d1f9      	bne.n	800f29e <_vfiprintf_r+0x96>
 800f2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800f2ae:	d00b      	beq.n	800f2c8 <_vfiprintf_r+0xc0>
 800f2b0:	465b      	mov	r3, fp
 800f2b2:	4622      	mov	r2, r4
 800f2b4:	4629      	mov	r1, r5
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f7ff ff94 	bl	800f1e4 <__sfputs_r>
 800f2bc:	3001      	adds	r0, #1
 800f2be:	f000 80aa 	beq.w	800f416 <_vfiprintf_r+0x20e>
 800f2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2c4:	445a      	add	r2, fp
 800f2c6:	9209      	str	r2, [sp, #36]	; 0x24
 800f2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f000 80a2 	beq.w	800f416 <_vfiprintf_r+0x20e>
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2dc:	f10a 0a01 	add.w	sl, sl, #1
 800f2e0:	9304      	str	r3, [sp, #16]
 800f2e2:	9307      	str	r3, [sp, #28]
 800f2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800f2ea:	4654      	mov	r4, sl
 800f2ec:	2205      	movs	r2, #5
 800f2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f2:	4858      	ldr	r0, [pc, #352]	; (800f454 <_vfiprintf_r+0x24c>)
 800f2f4:	f7ff f87e 	bl	800e3f4 <memchr>
 800f2f8:	9a04      	ldr	r2, [sp, #16]
 800f2fa:	b9d8      	cbnz	r0, 800f334 <_vfiprintf_r+0x12c>
 800f2fc:	06d1      	lsls	r1, r2, #27
 800f2fe:	bf44      	itt	mi
 800f300:	2320      	movmi	r3, #32
 800f302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f306:	0713      	lsls	r3, r2, #28
 800f308:	bf44      	itt	mi
 800f30a:	232b      	movmi	r3, #43	; 0x2b
 800f30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f310:	f89a 3000 	ldrb.w	r3, [sl]
 800f314:	2b2a      	cmp	r3, #42	; 0x2a
 800f316:	d015      	beq.n	800f344 <_vfiprintf_r+0x13c>
 800f318:	4654      	mov	r4, sl
 800f31a:	2000      	movs	r0, #0
 800f31c:	f04f 0c0a 	mov.w	ip, #10
 800f320:	9a07      	ldr	r2, [sp, #28]
 800f322:	4621      	mov	r1, r4
 800f324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f328:	3b30      	subs	r3, #48	; 0x30
 800f32a:	2b09      	cmp	r3, #9
 800f32c:	d94e      	bls.n	800f3cc <_vfiprintf_r+0x1c4>
 800f32e:	b1b0      	cbz	r0, 800f35e <_vfiprintf_r+0x156>
 800f330:	9207      	str	r2, [sp, #28]
 800f332:	e014      	b.n	800f35e <_vfiprintf_r+0x156>
 800f334:	eba0 0308 	sub.w	r3, r0, r8
 800f338:	fa09 f303 	lsl.w	r3, r9, r3
 800f33c:	4313      	orrs	r3, r2
 800f33e:	46a2      	mov	sl, r4
 800f340:	9304      	str	r3, [sp, #16]
 800f342:	e7d2      	b.n	800f2ea <_vfiprintf_r+0xe2>
 800f344:	9b03      	ldr	r3, [sp, #12]
 800f346:	1d19      	adds	r1, r3, #4
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	9103      	str	r1, [sp, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	bfbb      	ittet	lt
 800f350:	425b      	neglt	r3, r3
 800f352:	f042 0202 	orrlt.w	r2, r2, #2
 800f356:	9307      	strge	r3, [sp, #28]
 800f358:	9307      	strlt	r3, [sp, #28]
 800f35a:	bfb8      	it	lt
 800f35c:	9204      	strlt	r2, [sp, #16]
 800f35e:	7823      	ldrb	r3, [r4, #0]
 800f360:	2b2e      	cmp	r3, #46	; 0x2e
 800f362:	d10c      	bne.n	800f37e <_vfiprintf_r+0x176>
 800f364:	7863      	ldrb	r3, [r4, #1]
 800f366:	2b2a      	cmp	r3, #42	; 0x2a
 800f368:	d135      	bne.n	800f3d6 <_vfiprintf_r+0x1ce>
 800f36a:	9b03      	ldr	r3, [sp, #12]
 800f36c:	3402      	adds	r4, #2
 800f36e:	1d1a      	adds	r2, r3, #4
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	9203      	str	r2, [sp, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	bfb8      	it	lt
 800f378:	f04f 33ff 	movlt.w	r3, #4294967295
 800f37c:	9305      	str	r3, [sp, #20]
 800f37e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f464 <_vfiprintf_r+0x25c>
 800f382:	2203      	movs	r2, #3
 800f384:	4650      	mov	r0, sl
 800f386:	7821      	ldrb	r1, [r4, #0]
 800f388:	f7ff f834 	bl	800e3f4 <memchr>
 800f38c:	b140      	cbz	r0, 800f3a0 <_vfiprintf_r+0x198>
 800f38e:	2340      	movs	r3, #64	; 0x40
 800f390:	eba0 000a 	sub.w	r0, r0, sl
 800f394:	fa03 f000 	lsl.w	r0, r3, r0
 800f398:	9b04      	ldr	r3, [sp, #16]
 800f39a:	3401      	adds	r4, #1
 800f39c:	4303      	orrs	r3, r0
 800f39e:	9304      	str	r3, [sp, #16]
 800f3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a4:	2206      	movs	r2, #6
 800f3a6:	482c      	ldr	r0, [pc, #176]	; (800f458 <_vfiprintf_r+0x250>)
 800f3a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3ac:	f7ff f822 	bl	800e3f4 <memchr>
 800f3b0:	2800      	cmp	r0, #0
 800f3b2:	d03f      	beq.n	800f434 <_vfiprintf_r+0x22c>
 800f3b4:	4b29      	ldr	r3, [pc, #164]	; (800f45c <_vfiprintf_r+0x254>)
 800f3b6:	bb1b      	cbnz	r3, 800f400 <_vfiprintf_r+0x1f8>
 800f3b8:	9b03      	ldr	r3, [sp, #12]
 800f3ba:	3307      	adds	r3, #7
 800f3bc:	f023 0307 	bic.w	r3, r3, #7
 800f3c0:	3308      	adds	r3, #8
 800f3c2:	9303      	str	r3, [sp, #12]
 800f3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c6:	443b      	add	r3, r7
 800f3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ca:	e767      	b.n	800f29c <_vfiprintf_r+0x94>
 800f3cc:	460c      	mov	r4, r1
 800f3ce:	2001      	movs	r0, #1
 800f3d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3d4:	e7a5      	b.n	800f322 <_vfiprintf_r+0x11a>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	f04f 0c0a 	mov.w	ip, #10
 800f3dc:	4619      	mov	r1, r3
 800f3de:	3401      	adds	r4, #1
 800f3e0:	9305      	str	r3, [sp, #20]
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3e8:	3a30      	subs	r2, #48	; 0x30
 800f3ea:	2a09      	cmp	r2, #9
 800f3ec:	d903      	bls.n	800f3f6 <_vfiprintf_r+0x1ee>
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d0c5      	beq.n	800f37e <_vfiprintf_r+0x176>
 800f3f2:	9105      	str	r1, [sp, #20]
 800f3f4:	e7c3      	b.n	800f37e <_vfiprintf_r+0x176>
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3fe:	e7f0      	b.n	800f3e2 <_vfiprintf_r+0x1da>
 800f400:	ab03      	add	r3, sp, #12
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	462a      	mov	r2, r5
 800f406:	4630      	mov	r0, r6
 800f408:	4b15      	ldr	r3, [pc, #84]	; (800f460 <_vfiprintf_r+0x258>)
 800f40a:	a904      	add	r1, sp, #16
 800f40c:	f7fc f908 	bl	800b620 <_printf_float>
 800f410:	4607      	mov	r7, r0
 800f412:	1c78      	adds	r0, r7, #1
 800f414:	d1d6      	bne.n	800f3c4 <_vfiprintf_r+0x1bc>
 800f416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f418:	07d9      	lsls	r1, r3, #31
 800f41a:	d405      	bmi.n	800f428 <_vfiprintf_r+0x220>
 800f41c:	89ab      	ldrh	r3, [r5, #12]
 800f41e:	059a      	lsls	r2, r3, #22
 800f420:	d402      	bmi.n	800f428 <_vfiprintf_r+0x220>
 800f422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f424:	f7ff fe88 	bl	800f138 <__retarget_lock_release_recursive>
 800f428:	89ab      	ldrh	r3, [r5, #12]
 800f42a:	065b      	lsls	r3, r3, #25
 800f42c:	f53f af12 	bmi.w	800f254 <_vfiprintf_r+0x4c>
 800f430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f432:	e711      	b.n	800f258 <_vfiprintf_r+0x50>
 800f434:	ab03      	add	r3, sp, #12
 800f436:	9300      	str	r3, [sp, #0]
 800f438:	462a      	mov	r2, r5
 800f43a:	4630      	mov	r0, r6
 800f43c:	4b08      	ldr	r3, [pc, #32]	; (800f460 <_vfiprintf_r+0x258>)
 800f43e:	a904      	add	r1, sp, #16
 800f440:	f7fc fb8a 	bl	800bb58 <_printf_i>
 800f444:	e7e4      	b.n	800f410 <_vfiprintf_r+0x208>
 800f446:	bf00      	nop
 800f448:	080108dc 	.word	0x080108dc
 800f44c:	080108fc 	.word	0x080108fc
 800f450:	080108bc 	.word	0x080108bc
 800f454:	0801086c 	.word	0x0801086c
 800f458:	08010876 	.word	0x08010876
 800f45c:	0800b621 	.word	0x0800b621
 800f460:	0800f1e5 	.word	0x0800f1e5
 800f464:	08010872 	.word	0x08010872

0800f468 <__swbuf_r>:
 800f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46a:	460e      	mov	r6, r1
 800f46c:	4614      	mov	r4, r2
 800f46e:	4605      	mov	r5, r0
 800f470:	b118      	cbz	r0, 800f47a <__swbuf_r+0x12>
 800f472:	6983      	ldr	r3, [r0, #24]
 800f474:	b90b      	cbnz	r3, 800f47a <__swbuf_r+0x12>
 800f476:	f000 f9d9 	bl	800f82c <__sinit>
 800f47a:	4b21      	ldr	r3, [pc, #132]	; (800f500 <__swbuf_r+0x98>)
 800f47c:	429c      	cmp	r4, r3
 800f47e:	d12b      	bne.n	800f4d8 <__swbuf_r+0x70>
 800f480:	686c      	ldr	r4, [r5, #4]
 800f482:	69a3      	ldr	r3, [r4, #24]
 800f484:	60a3      	str	r3, [r4, #8]
 800f486:	89a3      	ldrh	r3, [r4, #12]
 800f488:	071a      	lsls	r2, r3, #28
 800f48a:	d52f      	bpl.n	800f4ec <__swbuf_r+0x84>
 800f48c:	6923      	ldr	r3, [r4, #16]
 800f48e:	b36b      	cbz	r3, 800f4ec <__swbuf_r+0x84>
 800f490:	6923      	ldr	r3, [r4, #16]
 800f492:	6820      	ldr	r0, [r4, #0]
 800f494:	b2f6      	uxtb	r6, r6
 800f496:	1ac0      	subs	r0, r0, r3
 800f498:	6963      	ldr	r3, [r4, #20]
 800f49a:	4637      	mov	r7, r6
 800f49c:	4283      	cmp	r3, r0
 800f49e:	dc04      	bgt.n	800f4aa <__swbuf_r+0x42>
 800f4a0:	4621      	mov	r1, r4
 800f4a2:	4628      	mov	r0, r5
 800f4a4:	f000 f92e 	bl	800f704 <_fflush_r>
 800f4a8:	bb30      	cbnz	r0, 800f4f8 <__swbuf_r+0x90>
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	60a3      	str	r3, [r4, #8]
 800f4b2:	6823      	ldr	r3, [r4, #0]
 800f4b4:	1c5a      	adds	r2, r3, #1
 800f4b6:	6022      	str	r2, [r4, #0]
 800f4b8:	701e      	strb	r6, [r3, #0]
 800f4ba:	6963      	ldr	r3, [r4, #20]
 800f4bc:	4283      	cmp	r3, r0
 800f4be:	d004      	beq.n	800f4ca <__swbuf_r+0x62>
 800f4c0:	89a3      	ldrh	r3, [r4, #12]
 800f4c2:	07db      	lsls	r3, r3, #31
 800f4c4:	d506      	bpl.n	800f4d4 <__swbuf_r+0x6c>
 800f4c6:	2e0a      	cmp	r6, #10
 800f4c8:	d104      	bne.n	800f4d4 <__swbuf_r+0x6c>
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	f000 f919 	bl	800f704 <_fflush_r>
 800f4d2:	b988      	cbnz	r0, 800f4f8 <__swbuf_r+0x90>
 800f4d4:	4638      	mov	r0, r7
 800f4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4d8:	4b0a      	ldr	r3, [pc, #40]	; (800f504 <__swbuf_r+0x9c>)
 800f4da:	429c      	cmp	r4, r3
 800f4dc:	d101      	bne.n	800f4e2 <__swbuf_r+0x7a>
 800f4de:	68ac      	ldr	r4, [r5, #8]
 800f4e0:	e7cf      	b.n	800f482 <__swbuf_r+0x1a>
 800f4e2:	4b09      	ldr	r3, [pc, #36]	; (800f508 <__swbuf_r+0xa0>)
 800f4e4:	429c      	cmp	r4, r3
 800f4e6:	bf08      	it	eq
 800f4e8:	68ec      	ldreq	r4, [r5, #12]
 800f4ea:	e7ca      	b.n	800f482 <__swbuf_r+0x1a>
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	f000 f80c 	bl	800f50c <__swsetup_r>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	d0cb      	beq.n	800f490 <__swbuf_r+0x28>
 800f4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800f4fc:	e7ea      	b.n	800f4d4 <__swbuf_r+0x6c>
 800f4fe:	bf00      	nop
 800f500:	080108dc 	.word	0x080108dc
 800f504:	080108fc 	.word	0x080108fc
 800f508:	080108bc 	.word	0x080108bc

0800f50c <__swsetup_r>:
 800f50c:	4b32      	ldr	r3, [pc, #200]	; (800f5d8 <__swsetup_r+0xcc>)
 800f50e:	b570      	push	{r4, r5, r6, lr}
 800f510:	681d      	ldr	r5, [r3, #0]
 800f512:	4606      	mov	r6, r0
 800f514:	460c      	mov	r4, r1
 800f516:	b125      	cbz	r5, 800f522 <__swsetup_r+0x16>
 800f518:	69ab      	ldr	r3, [r5, #24]
 800f51a:	b913      	cbnz	r3, 800f522 <__swsetup_r+0x16>
 800f51c:	4628      	mov	r0, r5
 800f51e:	f000 f985 	bl	800f82c <__sinit>
 800f522:	4b2e      	ldr	r3, [pc, #184]	; (800f5dc <__swsetup_r+0xd0>)
 800f524:	429c      	cmp	r4, r3
 800f526:	d10f      	bne.n	800f548 <__swsetup_r+0x3c>
 800f528:	686c      	ldr	r4, [r5, #4]
 800f52a:	89a3      	ldrh	r3, [r4, #12]
 800f52c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f530:	0719      	lsls	r1, r3, #28
 800f532:	d42c      	bmi.n	800f58e <__swsetup_r+0x82>
 800f534:	06dd      	lsls	r5, r3, #27
 800f536:	d411      	bmi.n	800f55c <__swsetup_r+0x50>
 800f538:	2309      	movs	r3, #9
 800f53a:	6033      	str	r3, [r6, #0]
 800f53c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f540:	f04f 30ff 	mov.w	r0, #4294967295
 800f544:	81a3      	strh	r3, [r4, #12]
 800f546:	e03e      	b.n	800f5c6 <__swsetup_r+0xba>
 800f548:	4b25      	ldr	r3, [pc, #148]	; (800f5e0 <__swsetup_r+0xd4>)
 800f54a:	429c      	cmp	r4, r3
 800f54c:	d101      	bne.n	800f552 <__swsetup_r+0x46>
 800f54e:	68ac      	ldr	r4, [r5, #8]
 800f550:	e7eb      	b.n	800f52a <__swsetup_r+0x1e>
 800f552:	4b24      	ldr	r3, [pc, #144]	; (800f5e4 <__swsetup_r+0xd8>)
 800f554:	429c      	cmp	r4, r3
 800f556:	bf08      	it	eq
 800f558:	68ec      	ldreq	r4, [r5, #12]
 800f55a:	e7e6      	b.n	800f52a <__swsetup_r+0x1e>
 800f55c:	0758      	lsls	r0, r3, #29
 800f55e:	d512      	bpl.n	800f586 <__swsetup_r+0x7a>
 800f560:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f562:	b141      	cbz	r1, 800f576 <__swsetup_r+0x6a>
 800f564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f568:	4299      	cmp	r1, r3
 800f56a:	d002      	beq.n	800f572 <__swsetup_r+0x66>
 800f56c:	4630      	mov	r0, r6
 800f56e:	f7fb ff13 	bl	800b398 <_free_r>
 800f572:	2300      	movs	r3, #0
 800f574:	6363      	str	r3, [r4, #52]	; 0x34
 800f576:	89a3      	ldrh	r3, [r4, #12]
 800f578:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f57c:	81a3      	strh	r3, [r4, #12]
 800f57e:	2300      	movs	r3, #0
 800f580:	6063      	str	r3, [r4, #4]
 800f582:	6923      	ldr	r3, [r4, #16]
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	89a3      	ldrh	r3, [r4, #12]
 800f588:	f043 0308 	orr.w	r3, r3, #8
 800f58c:	81a3      	strh	r3, [r4, #12]
 800f58e:	6923      	ldr	r3, [r4, #16]
 800f590:	b94b      	cbnz	r3, 800f5a6 <__swsetup_r+0x9a>
 800f592:	89a3      	ldrh	r3, [r4, #12]
 800f594:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f59c:	d003      	beq.n	800f5a6 <__swsetup_r+0x9a>
 800f59e:	4621      	mov	r1, r4
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f000 fa05 	bl	800f9b0 <__smakebuf_r>
 800f5a6:	89a0      	ldrh	r0, [r4, #12]
 800f5a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5ac:	f010 0301 	ands.w	r3, r0, #1
 800f5b0:	d00a      	beq.n	800f5c8 <__swsetup_r+0xbc>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	60a3      	str	r3, [r4, #8]
 800f5b6:	6963      	ldr	r3, [r4, #20]
 800f5b8:	425b      	negs	r3, r3
 800f5ba:	61a3      	str	r3, [r4, #24]
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	b943      	cbnz	r3, 800f5d2 <__swsetup_r+0xc6>
 800f5c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5c4:	d1ba      	bne.n	800f53c <__swsetup_r+0x30>
 800f5c6:	bd70      	pop	{r4, r5, r6, pc}
 800f5c8:	0781      	lsls	r1, r0, #30
 800f5ca:	bf58      	it	pl
 800f5cc:	6963      	ldrpl	r3, [r4, #20]
 800f5ce:	60a3      	str	r3, [r4, #8]
 800f5d0:	e7f4      	b.n	800f5bc <__swsetup_r+0xb0>
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	e7f7      	b.n	800f5c6 <__swsetup_r+0xba>
 800f5d6:	bf00      	nop
 800f5d8:	20000048 	.word	0x20000048
 800f5dc:	080108dc 	.word	0x080108dc
 800f5e0:	080108fc 	.word	0x080108fc
 800f5e4:	080108bc 	.word	0x080108bc

0800f5e8 <abort>:
 800f5e8:	2006      	movs	r0, #6
 800f5ea:	b508      	push	{r3, lr}
 800f5ec:	f000 fa50 	bl	800fa90 <raise>
 800f5f0:	2001      	movs	r0, #1
 800f5f2:	f7f7 f8d0 	bl	8006796 <_exit>
	...

0800f5f8 <__sflush_r>:
 800f5f8:	898a      	ldrh	r2, [r1, #12]
 800f5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fe:	4605      	mov	r5, r0
 800f600:	0710      	lsls	r0, r2, #28
 800f602:	460c      	mov	r4, r1
 800f604:	d458      	bmi.n	800f6b8 <__sflush_r+0xc0>
 800f606:	684b      	ldr	r3, [r1, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	dc05      	bgt.n	800f618 <__sflush_r+0x20>
 800f60c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f60e:	2b00      	cmp	r3, #0
 800f610:	dc02      	bgt.n	800f618 <__sflush_r+0x20>
 800f612:	2000      	movs	r0, #0
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f61a:	2e00      	cmp	r6, #0
 800f61c:	d0f9      	beq.n	800f612 <__sflush_r+0x1a>
 800f61e:	2300      	movs	r3, #0
 800f620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f624:	682f      	ldr	r7, [r5, #0]
 800f626:	602b      	str	r3, [r5, #0]
 800f628:	d032      	beq.n	800f690 <__sflush_r+0x98>
 800f62a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f62c:	89a3      	ldrh	r3, [r4, #12]
 800f62e:	075a      	lsls	r2, r3, #29
 800f630:	d505      	bpl.n	800f63e <__sflush_r+0x46>
 800f632:	6863      	ldr	r3, [r4, #4]
 800f634:	1ac0      	subs	r0, r0, r3
 800f636:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f638:	b10b      	cbz	r3, 800f63e <__sflush_r+0x46>
 800f63a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f63c:	1ac0      	subs	r0, r0, r3
 800f63e:	2300      	movs	r3, #0
 800f640:	4602      	mov	r2, r0
 800f642:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f644:	4628      	mov	r0, r5
 800f646:	6a21      	ldr	r1, [r4, #32]
 800f648:	47b0      	blx	r6
 800f64a:	1c43      	adds	r3, r0, #1
 800f64c:	89a3      	ldrh	r3, [r4, #12]
 800f64e:	d106      	bne.n	800f65e <__sflush_r+0x66>
 800f650:	6829      	ldr	r1, [r5, #0]
 800f652:	291d      	cmp	r1, #29
 800f654:	d82c      	bhi.n	800f6b0 <__sflush_r+0xb8>
 800f656:	4a2a      	ldr	r2, [pc, #168]	; (800f700 <__sflush_r+0x108>)
 800f658:	40ca      	lsrs	r2, r1
 800f65a:	07d6      	lsls	r6, r2, #31
 800f65c:	d528      	bpl.n	800f6b0 <__sflush_r+0xb8>
 800f65e:	2200      	movs	r2, #0
 800f660:	6062      	str	r2, [r4, #4]
 800f662:	6922      	ldr	r2, [r4, #16]
 800f664:	04d9      	lsls	r1, r3, #19
 800f666:	6022      	str	r2, [r4, #0]
 800f668:	d504      	bpl.n	800f674 <__sflush_r+0x7c>
 800f66a:	1c42      	adds	r2, r0, #1
 800f66c:	d101      	bne.n	800f672 <__sflush_r+0x7a>
 800f66e:	682b      	ldr	r3, [r5, #0]
 800f670:	b903      	cbnz	r3, 800f674 <__sflush_r+0x7c>
 800f672:	6560      	str	r0, [r4, #84]	; 0x54
 800f674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f676:	602f      	str	r7, [r5, #0]
 800f678:	2900      	cmp	r1, #0
 800f67a:	d0ca      	beq.n	800f612 <__sflush_r+0x1a>
 800f67c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f680:	4299      	cmp	r1, r3
 800f682:	d002      	beq.n	800f68a <__sflush_r+0x92>
 800f684:	4628      	mov	r0, r5
 800f686:	f7fb fe87 	bl	800b398 <_free_r>
 800f68a:	2000      	movs	r0, #0
 800f68c:	6360      	str	r0, [r4, #52]	; 0x34
 800f68e:	e7c1      	b.n	800f614 <__sflush_r+0x1c>
 800f690:	6a21      	ldr	r1, [r4, #32]
 800f692:	2301      	movs	r3, #1
 800f694:	4628      	mov	r0, r5
 800f696:	47b0      	blx	r6
 800f698:	1c41      	adds	r1, r0, #1
 800f69a:	d1c7      	bne.n	800f62c <__sflush_r+0x34>
 800f69c:	682b      	ldr	r3, [r5, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d0c4      	beq.n	800f62c <__sflush_r+0x34>
 800f6a2:	2b1d      	cmp	r3, #29
 800f6a4:	d001      	beq.n	800f6aa <__sflush_r+0xb2>
 800f6a6:	2b16      	cmp	r3, #22
 800f6a8:	d101      	bne.n	800f6ae <__sflush_r+0xb6>
 800f6aa:	602f      	str	r7, [r5, #0]
 800f6ac:	e7b1      	b.n	800f612 <__sflush_r+0x1a>
 800f6ae:	89a3      	ldrh	r3, [r4, #12]
 800f6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6b4:	81a3      	strh	r3, [r4, #12]
 800f6b6:	e7ad      	b.n	800f614 <__sflush_r+0x1c>
 800f6b8:	690f      	ldr	r7, [r1, #16]
 800f6ba:	2f00      	cmp	r7, #0
 800f6bc:	d0a9      	beq.n	800f612 <__sflush_r+0x1a>
 800f6be:	0793      	lsls	r3, r2, #30
 800f6c0:	bf18      	it	ne
 800f6c2:	2300      	movne	r3, #0
 800f6c4:	680e      	ldr	r6, [r1, #0]
 800f6c6:	bf08      	it	eq
 800f6c8:	694b      	ldreq	r3, [r1, #20]
 800f6ca:	eba6 0807 	sub.w	r8, r6, r7
 800f6ce:	600f      	str	r7, [r1, #0]
 800f6d0:	608b      	str	r3, [r1, #8]
 800f6d2:	f1b8 0f00 	cmp.w	r8, #0
 800f6d6:	dd9c      	ble.n	800f612 <__sflush_r+0x1a>
 800f6d8:	4643      	mov	r3, r8
 800f6da:	463a      	mov	r2, r7
 800f6dc:	4628      	mov	r0, r5
 800f6de:	6a21      	ldr	r1, [r4, #32]
 800f6e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f6e2:	47b0      	blx	r6
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	dc06      	bgt.n	800f6f6 <__sflush_r+0xfe>
 800f6e8:	89a3      	ldrh	r3, [r4, #12]
 800f6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6f2:	81a3      	strh	r3, [r4, #12]
 800f6f4:	e78e      	b.n	800f614 <__sflush_r+0x1c>
 800f6f6:	4407      	add	r7, r0
 800f6f8:	eba8 0800 	sub.w	r8, r8, r0
 800f6fc:	e7e9      	b.n	800f6d2 <__sflush_r+0xda>
 800f6fe:	bf00      	nop
 800f700:	20400001 	.word	0x20400001

0800f704 <_fflush_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	690b      	ldr	r3, [r1, #16]
 800f708:	4605      	mov	r5, r0
 800f70a:	460c      	mov	r4, r1
 800f70c:	b913      	cbnz	r3, 800f714 <_fflush_r+0x10>
 800f70e:	2500      	movs	r5, #0
 800f710:	4628      	mov	r0, r5
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	b118      	cbz	r0, 800f71e <_fflush_r+0x1a>
 800f716:	6983      	ldr	r3, [r0, #24]
 800f718:	b90b      	cbnz	r3, 800f71e <_fflush_r+0x1a>
 800f71a:	f000 f887 	bl	800f82c <__sinit>
 800f71e:	4b14      	ldr	r3, [pc, #80]	; (800f770 <_fflush_r+0x6c>)
 800f720:	429c      	cmp	r4, r3
 800f722:	d11b      	bne.n	800f75c <_fflush_r+0x58>
 800f724:	686c      	ldr	r4, [r5, #4]
 800f726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0ef      	beq.n	800f70e <_fflush_r+0xa>
 800f72e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f730:	07d0      	lsls	r0, r2, #31
 800f732:	d404      	bmi.n	800f73e <_fflush_r+0x3a>
 800f734:	0599      	lsls	r1, r3, #22
 800f736:	d402      	bmi.n	800f73e <_fflush_r+0x3a>
 800f738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f73a:	f7ff fcfc 	bl	800f136 <__retarget_lock_acquire_recursive>
 800f73e:	4628      	mov	r0, r5
 800f740:	4621      	mov	r1, r4
 800f742:	f7ff ff59 	bl	800f5f8 <__sflush_r>
 800f746:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f748:	4605      	mov	r5, r0
 800f74a:	07da      	lsls	r2, r3, #31
 800f74c:	d4e0      	bmi.n	800f710 <_fflush_r+0xc>
 800f74e:	89a3      	ldrh	r3, [r4, #12]
 800f750:	059b      	lsls	r3, r3, #22
 800f752:	d4dd      	bmi.n	800f710 <_fflush_r+0xc>
 800f754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f756:	f7ff fcef 	bl	800f138 <__retarget_lock_release_recursive>
 800f75a:	e7d9      	b.n	800f710 <_fflush_r+0xc>
 800f75c:	4b05      	ldr	r3, [pc, #20]	; (800f774 <_fflush_r+0x70>)
 800f75e:	429c      	cmp	r4, r3
 800f760:	d101      	bne.n	800f766 <_fflush_r+0x62>
 800f762:	68ac      	ldr	r4, [r5, #8]
 800f764:	e7df      	b.n	800f726 <_fflush_r+0x22>
 800f766:	4b04      	ldr	r3, [pc, #16]	; (800f778 <_fflush_r+0x74>)
 800f768:	429c      	cmp	r4, r3
 800f76a:	bf08      	it	eq
 800f76c:	68ec      	ldreq	r4, [r5, #12]
 800f76e:	e7da      	b.n	800f726 <_fflush_r+0x22>
 800f770:	080108dc 	.word	0x080108dc
 800f774:	080108fc 	.word	0x080108fc
 800f778:	080108bc 	.word	0x080108bc

0800f77c <std>:
 800f77c:	2300      	movs	r3, #0
 800f77e:	b510      	push	{r4, lr}
 800f780:	4604      	mov	r4, r0
 800f782:	e9c0 3300 	strd	r3, r3, [r0]
 800f786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f78a:	6083      	str	r3, [r0, #8]
 800f78c:	8181      	strh	r1, [r0, #12]
 800f78e:	6643      	str	r3, [r0, #100]	; 0x64
 800f790:	81c2      	strh	r2, [r0, #14]
 800f792:	6183      	str	r3, [r0, #24]
 800f794:	4619      	mov	r1, r3
 800f796:	2208      	movs	r2, #8
 800f798:	305c      	adds	r0, #92	; 0x5c
 800f79a:	f7fb fdf5 	bl	800b388 <memset>
 800f79e:	4b05      	ldr	r3, [pc, #20]	; (800f7b4 <std+0x38>)
 800f7a0:	6224      	str	r4, [r4, #32]
 800f7a2:	6263      	str	r3, [r4, #36]	; 0x24
 800f7a4:	4b04      	ldr	r3, [pc, #16]	; (800f7b8 <std+0x3c>)
 800f7a6:	62a3      	str	r3, [r4, #40]	; 0x28
 800f7a8:	4b04      	ldr	r3, [pc, #16]	; (800f7bc <std+0x40>)
 800f7aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f7ac:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <std+0x44>)
 800f7ae:	6323      	str	r3, [r4, #48]	; 0x30
 800f7b0:	bd10      	pop	{r4, pc}
 800f7b2:	bf00      	nop
 800f7b4:	0800fac9 	.word	0x0800fac9
 800f7b8:	0800faeb 	.word	0x0800faeb
 800f7bc:	0800fb23 	.word	0x0800fb23
 800f7c0:	0800fb47 	.word	0x0800fb47

0800f7c4 <_cleanup_r>:
 800f7c4:	4901      	ldr	r1, [pc, #4]	; (800f7cc <_cleanup_r+0x8>)
 800f7c6:	f000 b8af 	b.w	800f928 <_fwalk_reent>
 800f7ca:	bf00      	nop
 800f7cc:	0800f705 	.word	0x0800f705

0800f7d0 <__sfmoreglue>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	2568      	movs	r5, #104	; 0x68
 800f7d4:	1e4a      	subs	r2, r1, #1
 800f7d6:	4355      	muls	r5, r2
 800f7d8:	460e      	mov	r6, r1
 800f7da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f7de:	f7fb fe27 	bl	800b430 <_malloc_r>
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	b140      	cbz	r0, 800f7f8 <__sfmoreglue+0x28>
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	e9c0 1600 	strd	r1, r6, [r0]
 800f7ec:	300c      	adds	r0, #12
 800f7ee:	60a0      	str	r0, [r4, #8]
 800f7f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f7f4:	f7fb fdc8 	bl	800b388 <memset>
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	bd70      	pop	{r4, r5, r6, pc}

0800f7fc <__sfp_lock_acquire>:
 800f7fc:	4801      	ldr	r0, [pc, #4]	; (800f804 <__sfp_lock_acquire+0x8>)
 800f7fe:	f7ff bc9a 	b.w	800f136 <__retarget_lock_acquire_recursive>
 800f802:	bf00      	nop
 800f804:	200008f0 	.word	0x200008f0

0800f808 <__sfp_lock_release>:
 800f808:	4801      	ldr	r0, [pc, #4]	; (800f810 <__sfp_lock_release+0x8>)
 800f80a:	f7ff bc95 	b.w	800f138 <__retarget_lock_release_recursive>
 800f80e:	bf00      	nop
 800f810:	200008f0 	.word	0x200008f0

0800f814 <__sinit_lock_acquire>:
 800f814:	4801      	ldr	r0, [pc, #4]	; (800f81c <__sinit_lock_acquire+0x8>)
 800f816:	f7ff bc8e 	b.w	800f136 <__retarget_lock_acquire_recursive>
 800f81a:	bf00      	nop
 800f81c:	200008eb 	.word	0x200008eb

0800f820 <__sinit_lock_release>:
 800f820:	4801      	ldr	r0, [pc, #4]	; (800f828 <__sinit_lock_release+0x8>)
 800f822:	f7ff bc89 	b.w	800f138 <__retarget_lock_release_recursive>
 800f826:	bf00      	nop
 800f828:	200008eb 	.word	0x200008eb

0800f82c <__sinit>:
 800f82c:	b510      	push	{r4, lr}
 800f82e:	4604      	mov	r4, r0
 800f830:	f7ff fff0 	bl	800f814 <__sinit_lock_acquire>
 800f834:	69a3      	ldr	r3, [r4, #24]
 800f836:	b11b      	cbz	r3, 800f840 <__sinit+0x14>
 800f838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f83c:	f7ff bff0 	b.w	800f820 <__sinit_lock_release>
 800f840:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f844:	6523      	str	r3, [r4, #80]	; 0x50
 800f846:	4b13      	ldr	r3, [pc, #76]	; (800f894 <__sinit+0x68>)
 800f848:	4a13      	ldr	r2, [pc, #76]	; (800f898 <__sinit+0x6c>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f84e:	42a3      	cmp	r3, r4
 800f850:	bf08      	it	eq
 800f852:	2301      	moveq	r3, #1
 800f854:	4620      	mov	r0, r4
 800f856:	bf08      	it	eq
 800f858:	61a3      	streq	r3, [r4, #24]
 800f85a:	f000 f81f 	bl	800f89c <__sfp>
 800f85e:	6060      	str	r0, [r4, #4]
 800f860:	4620      	mov	r0, r4
 800f862:	f000 f81b 	bl	800f89c <__sfp>
 800f866:	60a0      	str	r0, [r4, #8]
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 f817 	bl	800f89c <__sfp>
 800f86e:	2200      	movs	r2, #0
 800f870:	2104      	movs	r1, #4
 800f872:	60e0      	str	r0, [r4, #12]
 800f874:	6860      	ldr	r0, [r4, #4]
 800f876:	f7ff ff81 	bl	800f77c <std>
 800f87a:	2201      	movs	r2, #1
 800f87c:	2109      	movs	r1, #9
 800f87e:	68a0      	ldr	r0, [r4, #8]
 800f880:	f7ff ff7c 	bl	800f77c <std>
 800f884:	2202      	movs	r2, #2
 800f886:	2112      	movs	r1, #18
 800f888:	68e0      	ldr	r0, [r4, #12]
 800f88a:	f7ff ff77 	bl	800f77c <std>
 800f88e:	2301      	movs	r3, #1
 800f890:	61a3      	str	r3, [r4, #24]
 800f892:	e7d1      	b.n	800f838 <__sinit+0xc>
 800f894:	08010544 	.word	0x08010544
 800f898:	0800f7c5 	.word	0x0800f7c5

0800f89c <__sfp>:
 800f89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f89e:	4607      	mov	r7, r0
 800f8a0:	f7ff ffac 	bl	800f7fc <__sfp_lock_acquire>
 800f8a4:	4b1e      	ldr	r3, [pc, #120]	; (800f920 <__sfp+0x84>)
 800f8a6:	681e      	ldr	r6, [r3, #0]
 800f8a8:	69b3      	ldr	r3, [r6, #24]
 800f8aa:	b913      	cbnz	r3, 800f8b2 <__sfp+0x16>
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	f7ff ffbd 	bl	800f82c <__sinit>
 800f8b2:	3648      	adds	r6, #72	; 0x48
 800f8b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	d503      	bpl.n	800f8c4 <__sfp+0x28>
 800f8bc:	6833      	ldr	r3, [r6, #0]
 800f8be:	b30b      	cbz	r3, 800f904 <__sfp+0x68>
 800f8c0:	6836      	ldr	r6, [r6, #0]
 800f8c2:	e7f7      	b.n	800f8b4 <__sfp+0x18>
 800f8c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f8c8:	b9d5      	cbnz	r5, 800f900 <__sfp+0x64>
 800f8ca:	4b16      	ldr	r3, [pc, #88]	; (800f924 <__sfp+0x88>)
 800f8cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f8d0:	60e3      	str	r3, [r4, #12]
 800f8d2:	6665      	str	r5, [r4, #100]	; 0x64
 800f8d4:	f7ff fc2e 	bl	800f134 <__retarget_lock_init_recursive>
 800f8d8:	f7ff ff96 	bl	800f808 <__sfp_lock_release>
 800f8dc:	2208      	movs	r2, #8
 800f8de:	4629      	mov	r1, r5
 800f8e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f8e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f8e8:	6025      	str	r5, [r4, #0]
 800f8ea:	61a5      	str	r5, [r4, #24]
 800f8ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f8f0:	f7fb fd4a 	bl	800b388 <memset>
 800f8f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f8f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f900:	3468      	adds	r4, #104	; 0x68
 800f902:	e7d9      	b.n	800f8b8 <__sfp+0x1c>
 800f904:	2104      	movs	r1, #4
 800f906:	4638      	mov	r0, r7
 800f908:	f7ff ff62 	bl	800f7d0 <__sfmoreglue>
 800f90c:	4604      	mov	r4, r0
 800f90e:	6030      	str	r0, [r6, #0]
 800f910:	2800      	cmp	r0, #0
 800f912:	d1d5      	bne.n	800f8c0 <__sfp+0x24>
 800f914:	f7ff ff78 	bl	800f808 <__sfp_lock_release>
 800f918:	230c      	movs	r3, #12
 800f91a:	603b      	str	r3, [r7, #0]
 800f91c:	e7ee      	b.n	800f8fc <__sfp+0x60>
 800f91e:	bf00      	nop
 800f920:	08010544 	.word	0x08010544
 800f924:	ffff0001 	.word	0xffff0001

0800f928 <_fwalk_reent>:
 800f928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f92c:	4606      	mov	r6, r0
 800f92e:	4688      	mov	r8, r1
 800f930:	2700      	movs	r7, #0
 800f932:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f936:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f93a:	f1b9 0901 	subs.w	r9, r9, #1
 800f93e:	d505      	bpl.n	800f94c <_fwalk_reent+0x24>
 800f940:	6824      	ldr	r4, [r4, #0]
 800f942:	2c00      	cmp	r4, #0
 800f944:	d1f7      	bne.n	800f936 <_fwalk_reent+0xe>
 800f946:	4638      	mov	r0, r7
 800f948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f94c:	89ab      	ldrh	r3, [r5, #12]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d907      	bls.n	800f962 <_fwalk_reent+0x3a>
 800f952:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f956:	3301      	adds	r3, #1
 800f958:	d003      	beq.n	800f962 <_fwalk_reent+0x3a>
 800f95a:	4629      	mov	r1, r5
 800f95c:	4630      	mov	r0, r6
 800f95e:	47c0      	blx	r8
 800f960:	4307      	orrs	r7, r0
 800f962:	3568      	adds	r5, #104	; 0x68
 800f964:	e7e9      	b.n	800f93a <_fwalk_reent+0x12>

0800f966 <__swhatbuf_r>:
 800f966:	b570      	push	{r4, r5, r6, lr}
 800f968:	460e      	mov	r6, r1
 800f96a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f96e:	4614      	mov	r4, r2
 800f970:	2900      	cmp	r1, #0
 800f972:	461d      	mov	r5, r3
 800f974:	b096      	sub	sp, #88	; 0x58
 800f976:	da07      	bge.n	800f988 <__swhatbuf_r+0x22>
 800f978:	2300      	movs	r3, #0
 800f97a:	602b      	str	r3, [r5, #0]
 800f97c:	89b3      	ldrh	r3, [r6, #12]
 800f97e:	061a      	lsls	r2, r3, #24
 800f980:	d410      	bmi.n	800f9a4 <__swhatbuf_r+0x3e>
 800f982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f986:	e00e      	b.n	800f9a6 <__swhatbuf_r+0x40>
 800f988:	466a      	mov	r2, sp
 800f98a:	f000 f903 	bl	800fb94 <_fstat_r>
 800f98e:	2800      	cmp	r0, #0
 800f990:	dbf2      	blt.n	800f978 <__swhatbuf_r+0x12>
 800f992:	9a01      	ldr	r2, [sp, #4]
 800f994:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f998:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f99c:	425a      	negs	r2, r3
 800f99e:	415a      	adcs	r2, r3
 800f9a0:	602a      	str	r2, [r5, #0]
 800f9a2:	e7ee      	b.n	800f982 <__swhatbuf_r+0x1c>
 800f9a4:	2340      	movs	r3, #64	; 0x40
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	6023      	str	r3, [r4, #0]
 800f9aa:	b016      	add	sp, #88	; 0x58
 800f9ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f9b0 <__smakebuf_r>:
 800f9b0:	898b      	ldrh	r3, [r1, #12]
 800f9b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9b4:	079d      	lsls	r5, r3, #30
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	460c      	mov	r4, r1
 800f9ba:	d507      	bpl.n	800f9cc <__smakebuf_r+0x1c>
 800f9bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9c0:	6023      	str	r3, [r4, #0]
 800f9c2:	6123      	str	r3, [r4, #16]
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	6163      	str	r3, [r4, #20]
 800f9c8:	b002      	add	sp, #8
 800f9ca:	bd70      	pop	{r4, r5, r6, pc}
 800f9cc:	466a      	mov	r2, sp
 800f9ce:	ab01      	add	r3, sp, #4
 800f9d0:	f7ff ffc9 	bl	800f966 <__swhatbuf_r>
 800f9d4:	9900      	ldr	r1, [sp, #0]
 800f9d6:	4605      	mov	r5, r0
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f7fb fd29 	bl	800b430 <_malloc_r>
 800f9de:	b948      	cbnz	r0, 800f9f4 <__smakebuf_r+0x44>
 800f9e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9e4:	059a      	lsls	r2, r3, #22
 800f9e6:	d4ef      	bmi.n	800f9c8 <__smakebuf_r+0x18>
 800f9e8:	f023 0303 	bic.w	r3, r3, #3
 800f9ec:	f043 0302 	orr.w	r3, r3, #2
 800f9f0:	81a3      	strh	r3, [r4, #12]
 800f9f2:	e7e3      	b.n	800f9bc <__smakebuf_r+0xc>
 800f9f4:	4b0d      	ldr	r3, [pc, #52]	; (800fa2c <__smakebuf_r+0x7c>)
 800f9f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	6020      	str	r0, [r4, #0]
 800f9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa00:	81a3      	strh	r3, [r4, #12]
 800fa02:	9b00      	ldr	r3, [sp, #0]
 800fa04:	6120      	str	r0, [r4, #16]
 800fa06:	6163      	str	r3, [r4, #20]
 800fa08:	9b01      	ldr	r3, [sp, #4]
 800fa0a:	b15b      	cbz	r3, 800fa24 <__smakebuf_r+0x74>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa12:	f000 f8d1 	bl	800fbb8 <_isatty_r>
 800fa16:	b128      	cbz	r0, 800fa24 <__smakebuf_r+0x74>
 800fa18:	89a3      	ldrh	r3, [r4, #12]
 800fa1a:	f023 0303 	bic.w	r3, r3, #3
 800fa1e:	f043 0301 	orr.w	r3, r3, #1
 800fa22:	81a3      	strh	r3, [r4, #12]
 800fa24:	89a0      	ldrh	r0, [r4, #12]
 800fa26:	4305      	orrs	r5, r0
 800fa28:	81a5      	strh	r5, [r4, #12]
 800fa2a:	e7cd      	b.n	800f9c8 <__smakebuf_r+0x18>
 800fa2c:	0800f7c5 	.word	0x0800f7c5

0800fa30 <_malloc_usable_size_r>:
 800fa30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa34:	1f18      	subs	r0, r3, #4
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	bfbc      	itt	lt
 800fa3a:	580b      	ldrlt	r3, [r1, r0]
 800fa3c:	18c0      	addlt	r0, r0, r3
 800fa3e:	4770      	bx	lr

0800fa40 <_raise_r>:
 800fa40:	291f      	cmp	r1, #31
 800fa42:	b538      	push	{r3, r4, r5, lr}
 800fa44:	4604      	mov	r4, r0
 800fa46:	460d      	mov	r5, r1
 800fa48:	d904      	bls.n	800fa54 <_raise_r+0x14>
 800fa4a:	2316      	movs	r3, #22
 800fa4c:	6003      	str	r3, [r0, #0]
 800fa4e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa52:	bd38      	pop	{r3, r4, r5, pc}
 800fa54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa56:	b112      	cbz	r2, 800fa5e <_raise_r+0x1e>
 800fa58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa5c:	b94b      	cbnz	r3, 800fa72 <_raise_r+0x32>
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 f830 	bl	800fac4 <_getpid_r>
 800fa64:	462a      	mov	r2, r5
 800fa66:	4601      	mov	r1, r0
 800fa68:	4620      	mov	r0, r4
 800fa6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa6e:	f000 b817 	b.w	800faa0 <_kill_r>
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d00a      	beq.n	800fa8c <_raise_r+0x4c>
 800fa76:	1c59      	adds	r1, r3, #1
 800fa78:	d103      	bne.n	800fa82 <_raise_r+0x42>
 800fa7a:	2316      	movs	r3, #22
 800fa7c:	6003      	str	r3, [r0, #0]
 800fa7e:	2001      	movs	r0, #1
 800fa80:	e7e7      	b.n	800fa52 <_raise_r+0x12>
 800fa82:	2400      	movs	r4, #0
 800fa84:	4628      	mov	r0, r5
 800fa86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa8a:	4798      	blx	r3
 800fa8c:	2000      	movs	r0, #0
 800fa8e:	e7e0      	b.n	800fa52 <_raise_r+0x12>

0800fa90 <raise>:
 800fa90:	4b02      	ldr	r3, [pc, #8]	; (800fa9c <raise+0xc>)
 800fa92:	4601      	mov	r1, r0
 800fa94:	6818      	ldr	r0, [r3, #0]
 800fa96:	f7ff bfd3 	b.w	800fa40 <_raise_r>
 800fa9a:	bf00      	nop
 800fa9c:	20000048 	.word	0x20000048

0800faa0 <_kill_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	2300      	movs	r3, #0
 800faa4:	4d06      	ldr	r5, [pc, #24]	; (800fac0 <_kill_r+0x20>)
 800faa6:	4604      	mov	r4, r0
 800faa8:	4608      	mov	r0, r1
 800faaa:	4611      	mov	r1, r2
 800faac:	602b      	str	r3, [r5, #0]
 800faae:	f7f6 fe62 	bl	8006776 <_kill>
 800fab2:	1c43      	adds	r3, r0, #1
 800fab4:	d102      	bne.n	800fabc <_kill_r+0x1c>
 800fab6:	682b      	ldr	r3, [r5, #0]
 800fab8:	b103      	cbz	r3, 800fabc <_kill_r+0x1c>
 800faba:	6023      	str	r3, [r4, #0]
 800fabc:	bd38      	pop	{r3, r4, r5, pc}
 800fabe:	bf00      	nop
 800fac0:	200008e4 	.word	0x200008e4

0800fac4 <_getpid_r>:
 800fac4:	f7f6 be50 	b.w	8006768 <_getpid>

0800fac8 <__sread>:
 800fac8:	b510      	push	{r4, lr}
 800faca:	460c      	mov	r4, r1
 800facc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad0:	f000 f894 	bl	800fbfc <_read_r>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	bfab      	itete	ge
 800fad8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fada:	89a3      	ldrhlt	r3, [r4, #12]
 800fadc:	181b      	addge	r3, r3, r0
 800fade:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fae2:	bfac      	ite	ge
 800fae4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fae6:	81a3      	strhlt	r3, [r4, #12]
 800fae8:	bd10      	pop	{r4, pc}

0800faea <__swrite>:
 800faea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faee:	461f      	mov	r7, r3
 800faf0:	898b      	ldrh	r3, [r1, #12]
 800faf2:	4605      	mov	r5, r0
 800faf4:	05db      	lsls	r3, r3, #23
 800faf6:	460c      	mov	r4, r1
 800faf8:	4616      	mov	r6, r2
 800fafa:	d505      	bpl.n	800fb08 <__swrite+0x1e>
 800fafc:	2302      	movs	r3, #2
 800fafe:	2200      	movs	r2, #0
 800fb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb04:	f000 f868 	bl	800fbd8 <_lseek_r>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	4632      	mov	r2, r6
 800fb0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb10:	81a3      	strh	r3, [r4, #12]
 800fb12:	4628      	mov	r0, r5
 800fb14:	463b      	mov	r3, r7
 800fb16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb1e:	f000 b817 	b.w	800fb50 <_write_r>

0800fb22 <__sseek>:
 800fb22:	b510      	push	{r4, lr}
 800fb24:	460c      	mov	r4, r1
 800fb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb2a:	f000 f855 	bl	800fbd8 <_lseek_r>
 800fb2e:	1c43      	adds	r3, r0, #1
 800fb30:	89a3      	ldrh	r3, [r4, #12]
 800fb32:	bf15      	itete	ne
 800fb34:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb3e:	81a3      	strheq	r3, [r4, #12]
 800fb40:	bf18      	it	ne
 800fb42:	81a3      	strhne	r3, [r4, #12]
 800fb44:	bd10      	pop	{r4, pc}

0800fb46 <__sclose>:
 800fb46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb4a:	f000 b813 	b.w	800fb74 <_close_r>
	...

0800fb50 <_write_r>:
 800fb50:	b538      	push	{r3, r4, r5, lr}
 800fb52:	4604      	mov	r4, r0
 800fb54:	4608      	mov	r0, r1
 800fb56:	4611      	mov	r1, r2
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4d05      	ldr	r5, [pc, #20]	; (800fb70 <_write_r+0x20>)
 800fb5c:	602a      	str	r2, [r5, #0]
 800fb5e:	461a      	mov	r2, r3
 800fb60:	f7f6 fe40 	bl	80067e4 <_write>
 800fb64:	1c43      	adds	r3, r0, #1
 800fb66:	d102      	bne.n	800fb6e <_write_r+0x1e>
 800fb68:	682b      	ldr	r3, [r5, #0]
 800fb6a:	b103      	cbz	r3, 800fb6e <_write_r+0x1e>
 800fb6c:	6023      	str	r3, [r4, #0]
 800fb6e:	bd38      	pop	{r3, r4, r5, pc}
 800fb70:	200008e4 	.word	0x200008e4

0800fb74 <_close_r>:
 800fb74:	b538      	push	{r3, r4, r5, lr}
 800fb76:	2300      	movs	r3, #0
 800fb78:	4d05      	ldr	r5, [pc, #20]	; (800fb90 <_close_r+0x1c>)
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	4608      	mov	r0, r1
 800fb7e:	602b      	str	r3, [r5, #0]
 800fb80:	f7f6 fe4c 	bl	800681c <_close>
 800fb84:	1c43      	adds	r3, r0, #1
 800fb86:	d102      	bne.n	800fb8e <_close_r+0x1a>
 800fb88:	682b      	ldr	r3, [r5, #0]
 800fb8a:	b103      	cbz	r3, 800fb8e <_close_r+0x1a>
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	bd38      	pop	{r3, r4, r5, pc}
 800fb90:	200008e4 	.word	0x200008e4

0800fb94 <_fstat_r>:
 800fb94:	b538      	push	{r3, r4, r5, lr}
 800fb96:	2300      	movs	r3, #0
 800fb98:	4d06      	ldr	r5, [pc, #24]	; (800fbb4 <_fstat_r+0x20>)
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	4608      	mov	r0, r1
 800fb9e:	4611      	mov	r1, r2
 800fba0:	602b      	str	r3, [r5, #0]
 800fba2:	f7f6 fe46 	bl	8006832 <_fstat>
 800fba6:	1c43      	adds	r3, r0, #1
 800fba8:	d102      	bne.n	800fbb0 <_fstat_r+0x1c>
 800fbaa:	682b      	ldr	r3, [r5, #0]
 800fbac:	b103      	cbz	r3, 800fbb0 <_fstat_r+0x1c>
 800fbae:	6023      	str	r3, [r4, #0]
 800fbb0:	bd38      	pop	{r3, r4, r5, pc}
 800fbb2:	bf00      	nop
 800fbb4:	200008e4 	.word	0x200008e4

0800fbb8 <_isatty_r>:
 800fbb8:	b538      	push	{r3, r4, r5, lr}
 800fbba:	2300      	movs	r3, #0
 800fbbc:	4d05      	ldr	r5, [pc, #20]	; (800fbd4 <_isatty_r+0x1c>)
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	4608      	mov	r0, r1
 800fbc2:	602b      	str	r3, [r5, #0]
 800fbc4:	f7f6 fe44 	bl	8006850 <_isatty>
 800fbc8:	1c43      	adds	r3, r0, #1
 800fbca:	d102      	bne.n	800fbd2 <_isatty_r+0x1a>
 800fbcc:	682b      	ldr	r3, [r5, #0]
 800fbce:	b103      	cbz	r3, 800fbd2 <_isatty_r+0x1a>
 800fbd0:	6023      	str	r3, [r4, #0]
 800fbd2:	bd38      	pop	{r3, r4, r5, pc}
 800fbd4:	200008e4 	.word	0x200008e4

0800fbd8 <_lseek_r>:
 800fbd8:	b538      	push	{r3, r4, r5, lr}
 800fbda:	4604      	mov	r4, r0
 800fbdc:	4608      	mov	r0, r1
 800fbde:	4611      	mov	r1, r2
 800fbe0:	2200      	movs	r2, #0
 800fbe2:	4d05      	ldr	r5, [pc, #20]	; (800fbf8 <_lseek_r+0x20>)
 800fbe4:	602a      	str	r2, [r5, #0]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	f7f6 fe3c 	bl	8006864 <_lseek>
 800fbec:	1c43      	adds	r3, r0, #1
 800fbee:	d102      	bne.n	800fbf6 <_lseek_r+0x1e>
 800fbf0:	682b      	ldr	r3, [r5, #0]
 800fbf2:	b103      	cbz	r3, 800fbf6 <_lseek_r+0x1e>
 800fbf4:	6023      	str	r3, [r4, #0]
 800fbf6:	bd38      	pop	{r3, r4, r5, pc}
 800fbf8:	200008e4 	.word	0x200008e4

0800fbfc <_read_r>:
 800fbfc:	b538      	push	{r3, r4, r5, lr}
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	4611      	mov	r1, r2
 800fc04:	2200      	movs	r2, #0
 800fc06:	4d05      	ldr	r5, [pc, #20]	; (800fc1c <_read_r+0x20>)
 800fc08:	602a      	str	r2, [r5, #0]
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	f7f6 fdcd 	bl	80067aa <_read>
 800fc10:	1c43      	adds	r3, r0, #1
 800fc12:	d102      	bne.n	800fc1a <_read_r+0x1e>
 800fc14:	682b      	ldr	r3, [r5, #0]
 800fc16:	b103      	cbz	r3, 800fc1a <_read_r+0x1e>
 800fc18:	6023      	str	r3, [r4, #0]
 800fc1a:	bd38      	pop	{r3, r4, r5, pc}
 800fc1c:	200008e4 	.word	0x200008e4

0800fc20 <log>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	4604      	mov	r4, r0
 800fc24:	460d      	mov	r5, r1
 800fc26:	f000 f837 	bl	800fc98 <__ieee754_log>
 800fc2a:	4b17      	ldr	r3, [pc, #92]	; (800fc88 <log+0x68>)
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	f993 3000 	ldrsb.w	r3, [r3]
 800fc32:	460f      	mov	r7, r1
 800fc34:	3301      	adds	r3, #1
 800fc36:	d01a      	beq.n	800fc6e <log+0x4e>
 800fc38:	4622      	mov	r2, r4
 800fc3a:	462b      	mov	r3, r5
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	4629      	mov	r1, r5
 800fc40:	f7f0 ff50 	bl	8000ae4 <__aeabi_dcmpun>
 800fc44:	b998      	cbnz	r0, 800fc6e <log+0x4e>
 800fc46:	2200      	movs	r2, #0
 800fc48:	2300      	movs	r3, #0
 800fc4a:	4620      	mov	r0, r4
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	f7f0 ff3f 	bl	8000ad0 <__aeabi_dcmpgt>
 800fc52:	b960      	cbnz	r0, 800fc6e <log+0x4e>
 800fc54:	2200      	movs	r2, #0
 800fc56:	2300      	movs	r3, #0
 800fc58:	4620      	mov	r0, r4
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	f7f0 ff10 	bl	8000a80 <__aeabi_dcmpeq>
 800fc60:	b140      	cbz	r0, 800fc74 <log+0x54>
 800fc62:	f7fb fb3d 	bl	800b2e0 <__errno>
 800fc66:	2322      	movs	r3, #34	; 0x22
 800fc68:	2600      	movs	r6, #0
 800fc6a:	4f08      	ldr	r7, [pc, #32]	; (800fc8c <log+0x6c>)
 800fc6c:	6003      	str	r3, [r0, #0]
 800fc6e:	4630      	mov	r0, r6
 800fc70:	4639      	mov	r1, r7
 800fc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc74:	f7fb fb34 	bl	800b2e0 <__errno>
 800fc78:	2321      	movs	r3, #33	; 0x21
 800fc7a:	6003      	str	r3, [r0, #0]
 800fc7c:	4804      	ldr	r0, [pc, #16]	; (800fc90 <log+0x70>)
 800fc7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc82:	f7ff ba01 	b.w	800f088 <nan>
 800fc86:	bf00      	nop
 800fc88:	2000021c 	.word	0x2000021c
 800fc8c:	fff00000 	.word	0xfff00000
 800fc90:	080108b8 	.word	0x080108b8
 800fc94:	00000000 	.word	0x00000000

0800fc98 <__ieee754_log>:
 800fc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800fca0:	4602      	mov	r2, r0
 800fca2:	460b      	mov	r3, r1
 800fca4:	460d      	mov	r5, r1
 800fca6:	b087      	sub	sp, #28
 800fca8:	da24      	bge.n	800fcf4 <__ieee754_log+0x5c>
 800fcaa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800fcae:	4304      	orrs	r4, r0
 800fcb0:	d108      	bne.n	800fcc4 <__ieee754_log+0x2c>
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	49cb      	ldr	r1, [pc, #812]	; (800ffe8 <__ieee754_log+0x350>)
 800fcba:	f7f0 fda3 	bl	8000804 <__aeabi_ddiv>
 800fcbe:	b007      	add	sp, #28
 800fcc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc4:	2900      	cmp	r1, #0
 800fcc6:	da04      	bge.n	800fcd2 <__ieee754_log+0x3a>
 800fcc8:	f7f0 faba 	bl	8000240 <__aeabi_dsub>
 800fccc:	2200      	movs	r2, #0
 800fcce:	2300      	movs	r3, #0
 800fcd0:	e7f3      	b.n	800fcba <__ieee754_log+0x22>
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	4bc5      	ldr	r3, [pc, #788]	; (800ffec <__ieee754_log+0x354>)
 800fcd6:	f7f0 fc6b 	bl	80005b0 <__aeabi_dmul>
 800fcda:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	460d      	mov	r5, r1
 800fce4:	49c2      	ldr	r1, [pc, #776]	; (800fff0 <__ieee754_log+0x358>)
 800fce6:	428d      	cmp	r5, r1
 800fce8:	dd06      	ble.n	800fcf8 <__ieee754_log+0x60>
 800fcea:	4610      	mov	r0, r2
 800fcec:	4619      	mov	r1, r3
 800fcee:	f7f0 faa9 	bl	8000244 <__adddf3>
 800fcf2:	e7e4      	b.n	800fcbe <__ieee754_log+0x26>
 800fcf4:	2600      	movs	r6, #0
 800fcf6:	e7f5      	b.n	800fce4 <__ieee754_log+0x4c>
 800fcf8:	152c      	asrs	r4, r5, #20
 800fcfa:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fcfe:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800fd02:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fd06:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800fd0a:	4426      	add	r6, r4
 800fd0c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800fd10:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800fd14:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800fd18:	ea41 0305 	orr.w	r3, r1, r5
 800fd1c:	4610      	mov	r0, r2
 800fd1e:	4619      	mov	r1, r3
 800fd20:	2200      	movs	r2, #0
 800fd22:	4bb4      	ldr	r3, [pc, #720]	; (800fff4 <__ieee754_log+0x35c>)
 800fd24:	f7f0 fa8c 	bl	8000240 <__aeabi_dsub>
 800fd28:	1cab      	adds	r3, r5, #2
 800fd2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	4682      	mov	sl, r0
 800fd32:	468b      	mov	fp, r1
 800fd34:	f04f 0200 	mov.w	r2, #0
 800fd38:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800fd3c:	dc53      	bgt.n	800fde6 <__ieee754_log+0x14e>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	f7f0 fe9e 	bl	8000a80 <__aeabi_dcmpeq>
 800fd44:	b1d0      	cbz	r0, 800fd7c <__ieee754_log+0xe4>
 800fd46:	2c00      	cmp	r4, #0
 800fd48:	f000 8122 	beq.w	800ff90 <__ieee754_log+0x2f8>
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f7f0 fbc5 	bl	80004dc <__aeabi_i2d>
 800fd52:	a391      	add	r3, pc, #580	; (adr r3, 800ff98 <__ieee754_log+0x300>)
 800fd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd58:	4606      	mov	r6, r0
 800fd5a:	460f      	mov	r7, r1
 800fd5c:	f7f0 fc28 	bl	80005b0 <__aeabi_dmul>
 800fd60:	a38f      	add	r3, pc, #572	; (adr r3, 800ffa0 <__ieee754_log+0x308>)
 800fd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd66:	4604      	mov	r4, r0
 800fd68:	460d      	mov	r5, r1
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	4639      	mov	r1, r7
 800fd6e:	f7f0 fc1f 	bl	80005b0 <__aeabi_dmul>
 800fd72:	4602      	mov	r2, r0
 800fd74:	460b      	mov	r3, r1
 800fd76:	4620      	mov	r0, r4
 800fd78:	4629      	mov	r1, r5
 800fd7a:	e7b8      	b.n	800fcee <__ieee754_log+0x56>
 800fd7c:	a38a      	add	r3, pc, #552	; (adr r3, 800ffa8 <__ieee754_log+0x310>)
 800fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd82:	4650      	mov	r0, sl
 800fd84:	4659      	mov	r1, fp
 800fd86:	f7f0 fc13 	bl	80005b0 <__aeabi_dmul>
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	460b      	mov	r3, r1
 800fd8e:	2000      	movs	r0, #0
 800fd90:	4999      	ldr	r1, [pc, #612]	; (800fff8 <__ieee754_log+0x360>)
 800fd92:	f7f0 fa55 	bl	8000240 <__aeabi_dsub>
 800fd96:	4652      	mov	r2, sl
 800fd98:	4606      	mov	r6, r0
 800fd9a:	460f      	mov	r7, r1
 800fd9c:	465b      	mov	r3, fp
 800fd9e:	4650      	mov	r0, sl
 800fda0:	4659      	mov	r1, fp
 800fda2:	f7f0 fc05 	bl	80005b0 <__aeabi_dmul>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	4630      	mov	r0, r6
 800fdac:	4639      	mov	r1, r7
 800fdae:	f7f0 fbff 	bl	80005b0 <__aeabi_dmul>
 800fdb2:	4606      	mov	r6, r0
 800fdb4:	460f      	mov	r7, r1
 800fdb6:	b914      	cbnz	r4, 800fdbe <__ieee754_log+0x126>
 800fdb8:	4632      	mov	r2, r6
 800fdba:	463b      	mov	r3, r7
 800fdbc:	e0a2      	b.n	800ff04 <__ieee754_log+0x26c>
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f7f0 fb8c 	bl	80004dc <__aeabi_i2d>
 800fdc4:	a374      	add	r3, pc, #464	; (adr r3, 800ff98 <__ieee754_log+0x300>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	4680      	mov	r8, r0
 800fdcc:	4689      	mov	r9, r1
 800fdce:	f7f0 fbef 	bl	80005b0 <__aeabi_dmul>
 800fdd2:	a373      	add	r3, pc, #460	; (adr r3, 800ffa0 <__ieee754_log+0x308>)
 800fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd8:	4604      	mov	r4, r0
 800fdda:	460d      	mov	r5, r1
 800fddc:	4640      	mov	r0, r8
 800fdde:	4649      	mov	r1, r9
 800fde0:	f7f0 fbe6 	bl	80005b0 <__aeabi_dmul>
 800fde4:	e0a7      	b.n	800ff36 <__ieee754_log+0x29e>
 800fde6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fdea:	f7f0 fa2b 	bl	8000244 <__adddf3>
 800fdee:	4602      	mov	r2, r0
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	4650      	mov	r0, sl
 800fdf4:	4659      	mov	r1, fp
 800fdf6:	f7f0 fd05 	bl	8000804 <__aeabi_ddiv>
 800fdfa:	e9cd 0100 	strd	r0, r1, [sp]
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f7f0 fb6c 	bl	80004dc <__aeabi_i2d>
 800fe04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe0c:	4610      	mov	r0, r2
 800fe0e:	4619      	mov	r1, r3
 800fe10:	f7f0 fbce 	bl	80005b0 <__aeabi_dmul>
 800fe14:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800fe18:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	9305      	str	r3, [sp, #20]
 800fe20:	460b      	mov	r3, r1
 800fe22:	4606      	mov	r6, r0
 800fe24:	460f      	mov	r7, r1
 800fe26:	f7f0 fbc3 	bl	80005b0 <__aeabi_dmul>
 800fe2a:	a361      	add	r3, pc, #388	; (adr r3, 800ffb0 <__ieee754_log+0x318>)
 800fe2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe30:	4680      	mov	r8, r0
 800fe32:	4689      	mov	r9, r1
 800fe34:	f7f0 fbbc 	bl	80005b0 <__aeabi_dmul>
 800fe38:	a35f      	add	r3, pc, #380	; (adr r3, 800ffb8 <__ieee754_log+0x320>)
 800fe3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3e:	f7f0 fa01 	bl	8000244 <__adddf3>
 800fe42:	4642      	mov	r2, r8
 800fe44:	464b      	mov	r3, r9
 800fe46:	f7f0 fbb3 	bl	80005b0 <__aeabi_dmul>
 800fe4a:	a35d      	add	r3, pc, #372	; (adr r3, 800ffc0 <__ieee754_log+0x328>)
 800fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe50:	f7f0 f9f8 	bl	8000244 <__adddf3>
 800fe54:	4642      	mov	r2, r8
 800fe56:	464b      	mov	r3, r9
 800fe58:	f7f0 fbaa 	bl	80005b0 <__aeabi_dmul>
 800fe5c:	a35a      	add	r3, pc, #360	; (adr r3, 800ffc8 <__ieee754_log+0x330>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	f7f0 f9ef 	bl	8000244 <__adddf3>
 800fe66:	4632      	mov	r2, r6
 800fe68:	463b      	mov	r3, r7
 800fe6a:	f7f0 fba1 	bl	80005b0 <__aeabi_dmul>
 800fe6e:	a358      	add	r3, pc, #352	; (adr r3, 800ffd0 <__ieee754_log+0x338>)
 800fe70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe74:	4606      	mov	r6, r0
 800fe76:	460f      	mov	r7, r1
 800fe78:	4640      	mov	r0, r8
 800fe7a:	4649      	mov	r1, r9
 800fe7c:	f7f0 fb98 	bl	80005b0 <__aeabi_dmul>
 800fe80:	a355      	add	r3, pc, #340	; (adr r3, 800ffd8 <__ieee754_log+0x340>)
 800fe82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe86:	f7f0 f9dd 	bl	8000244 <__adddf3>
 800fe8a:	4642      	mov	r2, r8
 800fe8c:	464b      	mov	r3, r9
 800fe8e:	f7f0 fb8f 	bl	80005b0 <__aeabi_dmul>
 800fe92:	a353      	add	r3, pc, #332	; (adr r3, 800ffe0 <__ieee754_log+0x348>)
 800fe94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe98:	f7f0 f9d4 	bl	8000244 <__adddf3>
 800fe9c:	4642      	mov	r2, r8
 800fe9e:	464b      	mov	r3, r9
 800fea0:	f7f0 fb86 	bl	80005b0 <__aeabi_dmul>
 800fea4:	460b      	mov	r3, r1
 800fea6:	4602      	mov	r2, r0
 800fea8:	4639      	mov	r1, r7
 800feaa:	4630      	mov	r0, r6
 800feac:	f7f0 f9ca 	bl	8000244 <__adddf3>
 800feb0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800feb4:	9b05      	ldr	r3, [sp, #20]
 800feb6:	3551      	adds	r5, #81	; 0x51
 800feb8:	431d      	orrs	r5, r3
 800feba:	2d00      	cmp	r5, #0
 800febc:	4680      	mov	r8, r0
 800febe:	4689      	mov	r9, r1
 800fec0:	dd48      	ble.n	800ff54 <__ieee754_log+0x2bc>
 800fec2:	2200      	movs	r2, #0
 800fec4:	4b4c      	ldr	r3, [pc, #304]	; (800fff8 <__ieee754_log+0x360>)
 800fec6:	4650      	mov	r0, sl
 800fec8:	4659      	mov	r1, fp
 800feca:	f7f0 fb71 	bl	80005b0 <__aeabi_dmul>
 800fece:	4652      	mov	r2, sl
 800fed0:	465b      	mov	r3, fp
 800fed2:	f7f0 fb6d 	bl	80005b0 <__aeabi_dmul>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4606      	mov	r6, r0
 800fedc:	460f      	mov	r7, r1
 800fede:	4640      	mov	r0, r8
 800fee0:	4649      	mov	r1, r9
 800fee2:	f7f0 f9af 	bl	8000244 <__adddf3>
 800fee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feea:	f7f0 fb61 	bl	80005b0 <__aeabi_dmul>
 800feee:	4680      	mov	r8, r0
 800fef0:	4689      	mov	r9, r1
 800fef2:	b964      	cbnz	r4, 800ff0e <__ieee754_log+0x276>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	4630      	mov	r0, r6
 800fefa:	4639      	mov	r1, r7
 800fefc:	f7f0 f9a0 	bl	8000240 <__aeabi_dsub>
 800ff00:	4602      	mov	r2, r0
 800ff02:	460b      	mov	r3, r1
 800ff04:	4650      	mov	r0, sl
 800ff06:	4659      	mov	r1, fp
 800ff08:	f7f0 f99a 	bl	8000240 <__aeabi_dsub>
 800ff0c:	e6d7      	b.n	800fcbe <__ieee754_log+0x26>
 800ff0e:	a322      	add	r3, pc, #136	; (adr r3, 800ff98 <__ieee754_log+0x300>)
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff18:	f7f0 fb4a 	bl	80005b0 <__aeabi_dmul>
 800ff1c:	a320      	add	r3, pc, #128	; (adr r3, 800ffa0 <__ieee754_log+0x308>)
 800ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff22:	4604      	mov	r4, r0
 800ff24:	460d      	mov	r5, r1
 800ff26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff2a:	f7f0 fb41 	bl	80005b0 <__aeabi_dmul>
 800ff2e:	4642      	mov	r2, r8
 800ff30:	464b      	mov	r3, r9
 800ff32:	f7f0 f987 	bl	8000244 <__adddf3>
 800ff36:	4602      	mov	r2, r0
 800ff38:	460b      	mov	r3, r1
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	4639      	mov	r1, r7
 800ff3e:	f7f0 f97f 	bl	8000240 <__aeabi_dsub>
 800ff42:	4652      	mov	r2, sl
 800ff44:	465b      	mov	r3, fp
 800ff46:	f7f0 f97b 	bl	8000240 <__aeabi_dsub>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	4620      	mov	r0, r4
 800ff50:	4629      	mov	r1, r5
 800ff52:	e7d9      	b.n	800ff08 <__ieee754_log+0x270>
 800ff54:	4602      	mov	r2, r0
 800ff56:	460b      	mov	r3, r1
 800ff58:	4650      	mov	r0, sl
 800ff5a:	4659      	mov	r1, fp
 800ff5c:	f7f0 f970 	bl	8000240 <__aeabi_dsub>
 800ff60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff64:	f7f0 fb24 	bl	80005b0 <__aeabi_dmul>
 800ff68:	4606      	mov	r6, r0
 800ff6a:	460f      	mov	r7, r1
 800ff6c:	2c00      	cmp	r4, #0
 800ff6e:	f43f af23 	beq.w	800fdb8 <__ieee754_log+0x120>
 800ff72:	a309      	add	r3, pc, #36	; (adr r3, 800ff98 <__ieee754_log+0x300>)
 800ff74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff7c:	f7f0 fb18 	bl	80005b0 <__aeabi_dmul>
 800ff80:	a307      	add	r3, pc, #28	; (adr r3, 800ffa0 <__ieee754_log+0x308>)
 800ff82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff86:	4604      	mov	r4, r0
 800ff88:	460d      	mov	r5, r1
 800ff8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff8e:	e727      	b.n	800fde0 <__ieee754_log+0x148>
 800ff90:	2000      	movs	r0, #0
 800ff92:	2100      	movs	r1, #0
 800ff94:	e693      	b.n	800fcbe <__ieee754_log+0x26>
 800ff96:	bf00      	nop
 800ff98:	fee00000 	.word	0xfee00000
 800ff9c:	3fe62e42 	.word	0x3fe62e42
 800ffa0:	35793c76 	.word	0x35793c76
 800ffa4:	3dea39ef 	.word	0x3dea39ef
 800ffa8:	55555555 	.word	0x55555555
 800ffac:	3fd55555 	.word	0x3fd55555
 800ffb0:	df3e5244 	.word	0xdf3e5244
 800ffb4:	3fc2f112 	.word	0x3fc2f112
 800ffb8:	96cb03de 	.word	0x96cb03de
 800ffbc:	3fc74664 	.word	0x3fc74664
 800ffc0:	94229359 	.word	0x94229359
 800ffc4:	3fd24924 	.word	0x3fd24924
 800ffc8:	55555593 	.word	0x55555593
 800ffcc:	3fe55555 	.word	0x3fe55555
 800ffd0:	d078c69f 	.word	0xd078c69f
 800ffd4:	3fc39a09 	.word	0x3fc39a09
 800ffd8:	1d8e78af 	.word	0x1d8e78af
 800ffdc:	3fcc71c5 	.word	0x3fcc71c5
 800ffe0:	9997fa04 	.word	0x9997fa04
 800ffe4:	3fd99999 	.word	0x3fd99999
 800ffe8:	c3500000 	.word	0xc3500000
 800ffec:	43500000 	.word	0x43500000
 800fff0:	7fefffff 	.word	0x7fefffff
 800fff4:	3ff00000 	.word	0x3ff00000
 800fff8:	3fe00000 	.word	0x3fe00000

0800fffc <_init>:
 800fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffe:	bf00      	nop
 8010000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010002:	bc08      	pop	{r3}
 8010004:	469e      	mov	lr, r3
 8010006:	4770      	bx	lr

08010008 <_fini>:
 8010008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801000a:	bf00      	nop
 801000c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801000e:	bc08      	pop	{r3}
 8010010:	469e      	mov	lr, r3
 8010012:	4770      	bx	lr
