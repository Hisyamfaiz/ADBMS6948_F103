
BMS10S10P-F103RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c1c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001144  08010e08  08010e08  00020e08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f4c  08011f4c  00030224  2**0
                  CONTENTS
  4 .ARM          00000000  08011f4c  08011f4c  00030224  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011f4c  08011f4c  00030224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f4c  08011f4c  00021f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f50  08011f50  00021f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  08011f54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  20000224  08012178  00030224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d28  08012178  00030d28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204f6  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040ca  00000000  00000000  00050743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00054810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  00055bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f571  00000000  00000000  00056d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bdd2  00000000  00000000  00076301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aad6b  00000000  00000000  000920d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ce3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006740  00000000  00000000  0013ce94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000224 	.word	0x20000224
 8000204:	00000000 	.word	0x00000000
 8000208:	08010dec 	.word	0x08010dec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000228 	.word	0x20000228
 8000224:	08010dec 	.word	0x08010dec

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4605      	mov	r5, r0
 800127a:	4621      	mov	r1, r4
 800127c:	4628      	mov	r0, r5
 800127e:	2200      	movs	r2, #0
 8001280:	2300      	movs	r3, #0
 8001282:	f7ff fc07 	bl	8000a94 <__aeabi_dcmplt>
 8001286:	b928      	cbnz	r0, 8001294 <__aeabi_d2lz+0x20>
 8001288:	4628      	mov	r0, r5
 800128a:	4621      	mov	r1, r4
 800128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001290:	f000 b80a 	b.w	80012a8 <__aeabi_d2ulz>
 8001294:	4628      	mov	r0, r5
 8001296:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800129a:	f000 f805 	bl	80012a8 <__aeabi_d2ulz>
 800129e:	4240      	negs	r0, r0
 80012a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	bf00      	nop

080012a8 <__aeabi_d2ulz>:
 80012a8:	b5d0      	push	{r4, r6, r7, lr}
 80012aa:	2200      	movs	r2, #0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__aeabi_d2ulz+0x34>)
 80012ae:	4606      	mov	r6, r0
 80012b0:	460f      	mov	r7, r1
 80012b2:	f7ff f97d 	bl	80005b0 <__aeabi_dmul>
 80012b6:	f7ff fc53 	bl	8000b60 <__aeabi_d2uiz>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_ui2d>
 80012c0:	2200      	movs	r2, #0
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <__aeabi_d2ulz+0x38>)
 80012c4:	f7ff f974 	bl	80005b0 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4630      	mov	r0, r6
 80012ce:	4639      	mov	r1, r7
 80012d0:	f7fe ffb6 	bl	8000240 <__aeabi_dsub>
 80012d4:	f7ff fc44 	bl	8000b60 <__aeabi_d2uiz>
 80012d8:	4621      	mov	r1, r4
 80012da:	bdd0      	pop	{r4, r6, r7, pc}
 80012dc:	3df00000 	.word	0x3df00000
 80012e0:	41f00000 	.word	0x41f00000

080012e4 <Batt_Discharge_Mode>:
extern float Pack_SOC, Delta_VCell,Bat_Pow_Out, Pack_Cap;
extern uint16_t LifeTime;
extern uint8_t BATT_State;

void Batt_Discharge_Mode(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <Batt_Discharge_Mode+0x7c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d01b      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_overtemperature==ON||
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <Batt_Discharge_Mode+0x80>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d017      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_undertemperature==ON||
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <Batt_Discharge_Mode+0x84>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d013      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_overcurrentdischarge==ON||
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <Batt_Discharge_Mode+0x88>)
 8001302:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 8001304:	2b01      	cmp	r3, #1
 8001306:	d00f      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_SOCOverDischarge==ON||
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <Batt_Discharge_Mode+0x8c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 800130c:	2b01      	cmp	r3, #1
 800130e:	d00b      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_shortcircuit==ON||
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <Batt_Discharge_Mode+0x90>)
 8001312:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 8001314:	2b01      	cmp	r3, #1
 8001316:	d007      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_unbalance==ON||
 8001318:	4b17      	ldr	r3, [pc, #92]	; (8001378 <Batt_Discharge_Mode+0x94>)
 800131a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 800131c:	2b01      	cmp	r3, #1
 800131e:	d003      	beq.n	8001328 <Batt_Discharge_Mode+0x44>
			flag_trip_systemfailure==ON)
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <Batt_Discharge_Mode+0x98>)
 8001322:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <Batt_Discharge_Mode+0x4a>
	{
		Batt_Open_Mode();
 8001328:	f000 f908 	bl	800153c <Batt_Open_Mode>
 800132c:	e015      	b.n	800135a <Batt_Discharge_Mode+0x76>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <Batt_Discharge_Mode+0x9c>)
 8001336:	f008 fa66 	bl	8009806 <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <Batt_Discharge_Mode+0xa0>)
 800133c:	2202      	movs	r2, #2
 800133e:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <Batt_Discharge_Mode+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <Batt_Discharge_Mode+0xa8>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <Batt_Discharge_Mode+0xac>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <Batt_Discharge_Mode+0xb0>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
	}


}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000715 	.word	0x20000715
 8001364:	20000690 	.word	0x20000690
 8001368:	20000714 	.word	0x20000714
 800136c:	20000728 	.word	0x20000728
 8001370:	2000074c 	.word	0x2000074c
 8001374:	20000673 	.word	0x20000673
 8001378:	20000670 	.word	0x20000670
 800137c:	2000067c 	.word	0x2000067c
 8001380:	40010800 	.word	0x40010800
 8001384:	20000aa4 	.word	0x20000aa4
 8001388:	2000075c 	.word	0x2000075c
 800138c:	2000069c 	.word	0x2000069c
 8001390:	200007a4 	.word	0x200007a4
 8001394:	20000668 	.word	0x20000668

08001398 <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <Batt_Charge_Mode+0x94>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d017      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <Batt_Charge_Mode+0x98>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d013      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <Batt_Charge_Mode+0x9c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d00f      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <Batt_Charge_Mode+0xa0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d00b      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 80013bc:	4b1f      	ldr	r3, [pc, #124]	; (800143c <Batt_Charge_Mode+0xa4>)
 80013be:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d007      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <Batt_Charge_Mode+0xa8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d003      	beq.n	80013d4 <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <Batt_Charge_Mode+0xac>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d102      	bne.n	80013da <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 80013d4:	f000 f8b2 	bl	800153c <Batt_Open_Mode>
			EEPROM_WriteData(11, cycle);
			flag_write_cycle = 1;
		}
	}

}
 80013d8:	e026      	b.n	8001428 <Batt_Charge_Mode+0x90>
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	4819      	ldr	r0, [pc, #100]	; (8001448 <Batt_Charge_Mode+0xb0>)
 80013e2:	f008 fa10 	bl	8009806 <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <Batt_Charge_Mode+0xb4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <Batt_Charge_Mode+0xb8>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <Batt_Charge_Mode+0xbc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <Batt_Charge_Mode+0xc0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
		if (flag_write_cycle == 0){
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <Batt_Charge_Mode+0xc4>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d110      	bne.n	8001428 <Batt_Charge_Mode+0x90>
			cycle = EEPROM_ReadData(11) + 1;
 8001406:	200b      	movs	r0, #11
 8001408:	f000 fad2 	bl	80019b0 <EEPROM_ReadData>
 800140c:	4603      	mov	r3, r0
 800140e:	3301      	adds	r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <Batt_Charge_Mode+0xc8>)
 8001414:	701a      	strb	r2, [r3, #0]
			EEPROM_WriteData(11, cycle);
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <Batt_Charge_Mode+0xc8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	200b      	movs	r0, #11
 800141e:	f000 faa9 	bl	8001974 <EEPROM_WriteData>
			flag_write_cycle = 1;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <Batt_Charge_Mode+0xc4>)
 8001424:	2201      	movs	r2, #1
 8001426:	701a      	strb	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000079c 	.word	0x2000079c
 8001430:	20000690 	.word	0x20000690
 8001434:	20000714 	.word	0x20000714
 8001438:	20000746 	.word	0x20000746
 800143c:	20000671 	.word	0x20000671
 8001440:	20000673 	.word	0x20000673
 8001444:	2000067c 	.word	0x2000067c
 8001448:	40010800 	.word	0x40010800
 800144c:	20000aa4 	.word	0x20000aa4
 8001450:	2000075c 	.word	0x2000075c
 8001454:	2000069c 	.word	0x2000069c
 8001458:	200007a4 	.word	0x200007a4
 800145c:	20000668 	.word	0x20000668
 8001460:	20000660 	.word	0x20000660

08001464 <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <Batt_Full_CD_Mode+0x94>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d027      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <Batt_Full_CD_Mode+0x98>)
 8001472:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 8001474:	2b01      	cmp	r3, #1
 8001476:	d023      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <Batt_Full_CD_Mode+0x9c>)
 800147a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 800147c:	2b01      	cmp	r3, #1
 800147e:	d01f      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <Batt_Full_CD_Mode+0xa0>)
 8001482:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 8001484:	2b01      	cmp	r3, #1
 8001486:	d01b      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <Batt_Full_CD_Mode+0xa4>)
 800148a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 800148c:	2b01      	cmp	r3, #1
 800148e:	d017      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <Batt_Full_CD_Mode+0xa8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 8001494:	2b01      	cmp	r3, #1
 8001496:	d013      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <Batt_Full_CD_Mode+0xac>)
 800149a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 800149c:	2b01      	cmp	r3, #1
 800149e:	d00f      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <Batt_Full_CD_Mode+0xb0>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d00b      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <Batt_Full_CD_Mode+0xb4>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d007      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <Batt_Full_CD_Mode+0xb8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d003      	beq.n	80014c0 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <Batt_Full_CD_Mode+0xbc>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d102      	bne.n	80014c6 <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 80014c0:	f000 f83c 	bl	800153c <Batt_Open_Mode>
 80014c4:	e015      	b.n	80014f2 <Batt_Full_CD_Mode+0x8e>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4815      	ldr	r0, [pc, #84]	; (8001524 <Batt_Full_CD_Mode+0xc0>)
 80014ce:	f008 f99a 	bl	8009806 <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <Batt_Full_CD_Mode+0xc4>)
 80014d4:	2203      	movs	r2, #3
 80014d6:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <Batt_Full_CD_Mode+0xc8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <Batt_Full_CD_Mode+0xcc>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <Batt_Full_CD_Mode+0xd0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <Batt_Full_CD_Mode+0xd4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
	}
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000715 	.word	0x20000715
 80014fc:	2000079c 	.word	0x2000079c
 8001500:	20000690 	.word	0x20000690
 8001504:	20000714 	.word	0x20000714
 8001508:	20000728 	.word	0x20000728
 800150c:	20000746 	.word	0x20000746
 8001510:	2000074c 	.word	0x2000074c
 8001514:	20000671 	.word	0x20000671
 8001518:	20000673 	.word	0x20000673
 800151c:	20000670 	.word	0x20000670
 8001520:	2000067c 	.word	0x2000067c
 8001524:	40010800 	.word	0x40010800
 8001528:	20000aa4 	.word	0x20000aa4
 800152c:	2000075c 	.word	0x2000075c
 8001530:	2000069c 	.word	0x2000069c
 8001534:	200007a4 	.word	0x200007a4
 8001538:	20000668 	.word	0x20000668

0800153c <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <Batt_Open_Mode+0x3c>)
 8001548:	f008 f95d 	bl	8009806 <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <Batt_Open_Mode+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <Batt_Open_Mode+0x44>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <Batt_Open_Mode+0x48>)
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <Batt_Open_Mode+0x4c>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <Batt_Open_Mode+0x50>)
 800156c:	f008 f94b 	bl	8009806 <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 8001570:	f000 f80e 	bl	8001590 <check_SOC_Based_OCV>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40010800 	.word	0x40010800
 800157c:	20000aa4 	.word	0x20000aa4
 8001580:	2000075c 	.word	0x2000075c
 8001584:	2000069c 	.word	0x2000069c
 8001588:	200007a4 	.word	0x200007a4
 800158c:	40011000 	.word	0x40011000

08001590 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 8001594:	4b66      	ldr	r3, [pc, #408]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ffb1 	bl	8000500 <__aeabi_f2d>
 800159e:	a354      	add	r3, pc, #336	; (adr r3, 80016f0 <check_SOC_Based_OCV+0x160>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff fa80 	bl	8000aa8 <__aeabi_dcmple>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d025      	beq.n	80015fa <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 80015ae:	4b60      	ldr	r3, [pc, #384]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffa4 	bl	8000500 <__aeabi_f2d>
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <check_SOC_Based_OCV+0x1a4>)
 80015be:	f7ff f921 	bl	8000804 <__aeabi_ddiv>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a34b      	add	r3, pc, #300	; (adr r3, 80016f8 <check_SOC_Based_OCV+0x168>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7fe ffee 	bl	80005b0 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	a348      	add	r3, pc, #288	; (adr r3, 8001700 <check_SOC_Based_OCV+0x170>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fe2d 	bl	8000240 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fad7 	bl	8000ba0 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a50      	ldr	r2, [pc, #320]	; (8001738 <check_SOC_Based_OCV+0x1a8>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e0d4      	b.n	80017a4 <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 80015fa:	4b4d      	ldr	r3, [pc, #308]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff7e 	bl	8000500 <__aeabi_f2d>
 8001604:	a33a      	add	r3, pc, #232	; (adr r3, 80016f0 <check_SOC_Based_OCV+0x160>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff fa61 	bl	8000ad0 <__aeabi_dcmpgt>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02e      	beq.n	8001672 <check_SOC_Based_OCV+0xe2>
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4948      	ldr	r1, [pc, #288]	; (800173c <check_SOC_Based_OCV+0x1ac>)
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fdc6 	bl	80011ac <__aeabi_fcmple>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d025      	beq.n	8001672 <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 8001626:	4b42      	ldr	r3, [pc, #264]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff68 	bl	8000500 <__aeabi_f2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <check_SOC_Based_OCV+0x1a4>)
 8001636:	f7ff f8e5 	bl	8000804 <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	a331      	add	r3, pc, #196	; (adr r3, 8001708 <check_SOC_Based_OCV+0x178>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ffb2 	bl	80005b0 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	a32e      	add	r3, pc, #184	; (adr r3, 8001710 <check_SOC_Based_OCV+0x180>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe fdf1 	bl	8000240 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa9b 	bl	8000ba0 <__aeabi_d2f>
 800166a:	4603      	mov	r3, r0
 800166c:	4a32      	ldr	r2, [pc, #200]	; (8001738 <check_SOC_Based_OCV+0x1a8>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e098      	b.n	80017a4 <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 8001672:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4931      	ldr	r1, [pc, #196]	; (800173c <check_SOC_Based_OCV+0x1ac>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fdab 	bl	80011d4 <__aeabi_fcmpgt>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05d      	beq.n	8001740 <check_SOC_Based_OCV+0x1b0>
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff39 	bl	8000500 <__aeabi_f2d>
 800168e:	a322      	add	r3, pc, #136	; (adr r3, 8001718 <check_SOC_Based_OCV+0x188>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff fa08 	bl	8000aa8 <__aeabi_dcmple>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d050      	beq.n	8001740 <check_SOC_Based_OCV+0x1b0>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <check_SOC_Based_OCV+0x1a0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff2c 	bl	8000500 <__aeabi_f2d>
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <check_SOC_Based_OCV+0x1a4>)
 80016ae:	f7ff f8a9 	bl	8000804 <__aeabi_ddiv>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	a319      	add	r3, pc, #100	; (adr r3, 8001720 <check_SOC_Based_OCV+0x190>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ff76 	bl	80005b0 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	a316      	add	r3, pc, #88	; (adr r3, 8001728 <check_SOC_Based_OCV+0x198>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe fdb5 	bl	8000240 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff fa5f 	bl	8000ba0 <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a14      	ldr	r2, [pc, #80]	; (8001738 <check_SOC_Based_OCV+0x1a8>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e05c      	b.n	80017a4 <check_SOC_Based_OCV+0x214>
 80016ea:	bf00      	nop
 80016ec:	f3af 8000 	nop.w
 80016f0:	66666666 	.word	0x66666666
 80016f4:	4049a666 	.word	0x4049a666
 80016f8:	9d89d6ed 	.word	0x9d89d6ed
 80016fc:	403809d8 	.word	0x403809d8
 8001700:	00000000 	.word	0x00000000
 8001704:	40534c00 	.word	0x40534c00
 8001708:	26317911 	.word	0x26317911
 800170c:	4060e88b 	.word	0x4060e88b
 8001710:	a5947ec7 	.word	0xa5947ec7
 8001714:	407ca45a 	.word	0x407ca45a
 8001718:	9999999a 	.word	0x9999999a
 800171c:	404b5999 	.word	0x404b5999
 8001720:	f989b8e3 	.word	0xf989b8e3
 8001724:	4074ce1a 	.word	0x4074ce1a
 8001728:	e9c08a8b 	.word	0xe9c08a8b
 800172c:	409227ee 	.word	0x409227ee
 8001730:	20000694 	.word	0x20000694
 8001734:	402e0000 	.word	0x402e0000
 8001738:	20000798 	.word	0x20000798
 800173c:	42560000 	.word	0x42560000
	}
	else if(VBATT > 54.7){
 8001740:	4b73      	ldr	r3, [pc, #460]	; (8001910 <check_SOC_Based_OCV+0x380>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fedb 	bl	8000500 <__aeabi_f2d>
 800174a:	a365      	add	r3, pc, #404	; (adr r3, 80018e0 <check_SOC_Based_OCV+0x350>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7ff f9be 	bl	8000ad0 <__aeabi_dcmpgt>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d024      	beq.n	80017a4 <check_SOC_Based_OCV+0x214>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 800175a:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <check_SOC_Based_OCV+0x380>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fece 	bl	8000500 <__aeabi_f2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <check_SOC_Based_OCV+0x384>)
 800176a:	f7ff f84b 	bl	8000804 <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4610      	mov	r0, r2
 8001774:	4619      	mov	r1, r3
 8001776:	a35c      	add	r3, pc, #368	; (adr r3, 80018e8 <check_SOC_Based_OCV+0x358>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe ff18 	bl	80005b0 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	a359      	add	r3, pc, #356	; (adr r3, 80018f0 <check_SOC_Based_OCV+0x360>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7fe fd57 	bl	8000240 <__aeabi_dsub>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff fa01 	bl	8000ba0 <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a5d      	ldr	r2, [pc, #372]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80017a2:	6013      	str	r3, [r2, #0]
	}

	Pack_SOC=(0.4884934490 * VBATT * VBATT) - (26.2875616013 * VBATT) + 348.6849534722;   //Persamaan Baterai INR 21700
 80017a4:	4b5a      	ldr	r3, [pc, #360]	; (8001910 <check_SOC_Based_OCV+0x380>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fea9 	bl	8000500 <__aeabi_f2d>
 80017ae:	a352      	add	r3, pc, #328	; (adr r3, 80018f8 <check_SOC_Based_OCV+0x368>)
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f7fe fefc 	bl	80005b0 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <check_SOC_Based_OCV+0x380>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe9b 	bl	8000500 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe feed 	bl	80005b0 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4614      	mov	r4, r2
 80017dc:	461d      	mov	r5, r3
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <check_SOC_Based_OCV+0x380>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe8c 	bl	8000500 <__aeabi_f2d>
 80017e8:	a345      	add	r3, pc, #276	; (adr r3, 8001900 <check_SOC_Based_OCV+0x370>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fedf 	bl	80005b0 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7fe fd21 	bl	8000240 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a340      	add	r3, pc, #256	; (adr r3, 8001908 <check_SOC_Based_OCV+0x378>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fd1a 	bl	8000244 <__adddf3>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c2 	bl	8000ba0 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	4a3e      	ldr	r2, [pc, #248]	; (8001918 <check_SOC_Based_OCV+0x388>)
 8001820:	6013      	str	r3, [r2, #0]
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <check_SOC_Based_OCV+0x38c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a3e      	ldr	r2, [pc, #248]	; (8001920 <check_SOC_Based_OCV+0x390>)
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	4611      	mov	r1, r2
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa0b 	bl	8000c48 <__aeabi_fsub>
 8001832:	4603      	mov	r3, r0
 8001834:	4619      	mov	r1, r3
 8001836:	483b      	ldr	r0, [pc, #236]	; (8001924 <check_SOC_Based_OCV+0x394>)
 8001838:	f7ff fbc4 	bl	8000fc4 <__aeabi_fdiv>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <check_SOC_Based_OCV+0x398>)
 8001842:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 8001844:	4b38      	ldr	r3, [pc, #224]	; (8001928 <check_SOC_Based_OCV+0x398>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a35      	ldr	r2, [pc, #212]	; (8001920 <check_SOC_Based_OCV+0x390>)
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fb04 	bl	8000e5c <__aeabi_fmul>
 8001854:	4603      	mov	r3, r0
 8001856:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800185a:	4a34      	ldr	r2, [pc, #208]	; (800192c <check_SOC_Based_OCV+0x39c>)
 800185c:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 800185e:	4b32      	ldr	r3, [pc, #200]	; (8001928 <check_SOC_Based_OCV+0x398>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a2d      	ldr	r2, [pc, #180]	; (8001918 <check_SOC_Based_OCV+0x388>)
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff faf7 	bl	8000e5c <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <check_SOC_Based_OCV+0x39c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4619      	mov	r1, r3
 8001878:	4610      	mov	r0, r2
 800187a:	f7ff f9e7 	bl	8000c4c <__addsf3>
 800187e:	4603      	mov	r3, r0
 8001880:	461a      	mov	r2, r3
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <check_SOC_Based_OCV+0x3a0>)
 8001884:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <check_SOC_Based_OCV+0x388>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	492a      	ldr	r1, [pc, #168]	; (8001934 <check_SOC_Based_OCV+0x3a4>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fca1 	bl	80011d4 <__aeabi_fcmpgt>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <check_SOC_Based_OCV+0x310>
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <check_SOC_Based_OCV+0x388>)
 800189a:	4a22      	ldr	r2, [pc, #136]	; (8001924 <check_SOC_Based_OCV+0x394>)
 800189c:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 800189e:	e01b      	b.n	80018d8 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC>100) Pack_SOC=100;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	491f      	ldr	r1, [pc, #124]	; (8001924 <check_SOC_Based_OCV+0x394>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc94 	bl	80011d4 <__aeabi_fcmpgt>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <check_SOC_Based_OCV+0x32a>
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <check_SOC_Based_OCV+0x394>)
 80018b6:	601a      	str	r2, [r3, #0]
}
 80018b8:	e00e      	b.n	80018d8 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 80018ba:	4b17      	ldr	r3, [pc, #92]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f04f 0100 	mov.w	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fc68 	bl	8001198 <__aeabi_fcmplt>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d100      	bne.n	80018d0 <check_SOC_Based_OCV+0x340>
}
 80018ce:	e003      	b.n	80018d8 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <check_SOC_Based_OCV+0x388>)
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	bdb0      	pop	{r4, r5, r7, pc}
 80018dc:	f3af 8000 	nop.w
 80018e0:	9999999a 	.word	0x9999999a
 80018e4:	404b5999 	.word	0x404b5999
 80018e8:	99fc263d 	.word	0x99fc263d
 80018ec:	405bdb4c 	.word	0x405bdb4c
 80018f0:	be4fd9fa 	.word	0xbe4fd9fa
 80018f4:	40761dc4 	.word	0x40761dc4
 80018f8:	06f0f9c2 	.word	0x06f0f9c2
 80018fc:	3fdf437a 	.word	0x3fdf437a
 8001900:	a3192b3c 	.word	0xa3192b3c
 8001904:	403a499d 	.word	0x403a499d
 8001908:	91c5a617 	.word	0x91c5a617
 800190c:	4075caf5 	.word	0x4075caf5
 8001910:	20000694 	.word	0x20000694
 8001914:	402e0000 	.word	0x402e0000
 8001918:	20000798 	.word	0x20000798
 800191c:	20000664 	.word	0x20000664
 8001920:	20000724 	.word	0x20000724
 8001924:	42c80000 	.word	0x42c80000
 8001928:	20000730 	.word	0x20000730
 800192c:	200006a0 	.word	0x200006a0
 8001930:	20000740 	.word	0x20000740
 8001934:	43020000 	.word	0x43020000

08001938 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c2, addr, 3, 100)!=HAL_OK){
 8001942:	88f9      	ldrh	r1, [r7, #6]
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	2203      	movs	r2, #3
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <EEPROM_isDeviceReady+0x34>)
 800194a:	f008 fd31 	bl	800a3b0 <HAL_I2C_IsDeviceReady>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001954:	2140      	movs	r1, #64	; 0x40
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <EEPROM_isDeviceReady+0x38>)
 8001958:	f007 ff6d 	bl	8009836 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	f005 fea5 	bl	80076ac <HAL_Delay>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001962:	e7f7      	b.n	8001954 <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000a1c 	.word	0x20000a1c
 8001970:	40011000 	.word	0x40011000

08001974 <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af04      	add	r7, sp, #16
 800197a:	4603      	mov	r3, r0
 800197c:	460a      	mov	r2, r1
 800197e:	80fb      	strh	r3, [r7, #6]
 8001980:	4613      	mov	r3, r2
 8001982:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2,EEPROM_ADDRESS,addr,64,&data,1,10);
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	230a      	movs	r3, #10
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2301      	movs	r3, #1
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	1d7b      	adds	r3, r7, #5
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2340      	movs	r3, #64	; 0x40
 8001994:	21a0      	movs	r1, #160	; 0xa0
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <EEPROM_WriteData+0x38>)
 8001998:	f008 f9a8 	bl	8009cec <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800199c:	2064      	movs	r0, #100	; 0x64
 800199e:	f005 fe85 	bl	80076ac <HAL_Delay>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000a1c 	.word	0x20000a1c

080019b0 <EEPROM_ReadData>:

uint8_t EEPROM_ReadData(uint16_t addr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
	uint8_t EEPROM_data;
	HAL_I2C_Mem_Read(&hi2c2,0xA0,addr,64,&EEPROM_data,1,10);
 80019ba:	88fa      	ldrh	r2, [r7, #6]
 80019bc:	230a      	movs	r3, #10
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	f107 030f 	add.w	r3, r7, #15
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2340      	movs	r3, #64	; 0x40
 80019cc:	21a0      	movs	r1, #160	; 0xa0
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <EEPROM_ReadData+0x34>)
 80019d0:	f008 fa86 	bl	8009ee0 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f005 fe69 	bl	80076ac <HAL_Delay>
	return EEPROM_data;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000a1c 	.word	0x20000a1c

080019e8 <ltc6804_GPIO_Config>:

float Cell_Voltage_Lowest;
float minus_offset[15]={500,840,-40,-40,-100,540,830,20,-130,-120,560,880,-30,-110,-140}; //modul B

void ltc6804_GPIO_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <ltc6804_GPIO_Config+0xb0>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6804_CS_PIN;
 8001a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_CS_PORT, &GPIO_InitStructure);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4813      	ldr	r0, [pc, #76]	; (8001a9c <ltc6804_GPIO_Config+0xb4>)
 8001a50:	f007 fd2e 	bl	80094b0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_SCK_PIN;
 8001a54:	2308      	movs	r3, #8
 8001a56:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_SCK_PORT, &GPIO_InitStructure);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <ltc6804_GPIO_Config+0xb8>)
 8001a60:	f007 fd26 	bl	80094b0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_MOSI_PIN;
 8001a64:	2320      	movs	r3, #32
 8001a66:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_MOSI_PORT, &GPIO_InitStructure);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <ltc6804_GPIO_Config+0xb8>)
 8001a70:	f007 fd1e 	bl	80094b0 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin       = ltc6804_MISO_PIN;
 8001a74:	2310      	movs	r3, #16
 8001a76:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a80:	2301      	movs	r3, #1
 8001a82:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_MISO_PORT, &GPIO_InitStructure);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <ltc6804_GPIO_Config+0xb8>)
 8001a8c:	f007 fd10 	bl	80094b0 <HAL_GPIO_Init>
}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40010c00 	.word	0x40010c00

08001aa4 <ltc6804_SPIInit>:

void ltc6804_SPIInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aae:	482d      	ldr	r0, [pc, #180]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001ab0:	f007 fea9 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_RESET_HIGH;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aba:	482a      	ldr	r0, [pc, #168]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001abc:	f007 fea3 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f000 f851 	bl	8001b68 <ltc6804_Delay>
	ltc6804_RESET_LOW;
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001acc:	4825      	ldr	r0, [pc, #148]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001ace:	f007 fe9a 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(2000);
 8001ad2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ad6:	f000 f847 	bl	8001b68 <ltc6804_Delay>
	ltc6804_RESET_HIGH;
 8001ada:	2201      	movs	r2, #1
 8001adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae0:	4820      	ldr	r0, [pc, #128]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001ae2:	f007 fe90 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001ae6:	200a      	movs	r0, #10
 8001ae8:	f000 f83e 	bl	8001b68 <ltc6804_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af2:	481c      	ldr	r0, [pc, #112]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001af4:	f007 fe87 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001af8:	2064      	movs	r0, #100	; 0x64
 8001afa:	f000 f835 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b04:	4817      	ldr	r0, [pc, #92]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b06:	f007 fe7e 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b0a:	2064      	movs	r0, #100	; 0x64
 8001b0c:	f000 f82c 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b10:	2200      	movs	r2, #0
 8001b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b18:	f007 fe75 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b1c:	2064      	movs	r0, #100	; 0x64
 8001b1e:	f000 f823 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b2a:	f007 fe6c 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b2e:	2064      	movs	r0, #100	; 0x64
 8001b30:	f000 f81a 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3a:	480a      	ldr	r0, [pc, #40]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b3c:	f007 fe63 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b40:	2064      	movs	r0, #100	; 0x64
 8001b42:	f000 f811 	bl	8001b68 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b46:	2201      	movs	r2, #1
 8001b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <ltc6804_SPIInit+0xc0>)
 8001b4e:	f007 fe5a 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b52:	2064      	movs	r0, #100	; 0x64
 8001b54:	f000 f808 	bl	8001b68 <ltc6804_Delay>

	ltc6804_Delay(20000);
 8001b58:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001b5c:	f000 f804 	bl	8001b68 <ltc6804_Delay>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40011000 	.word	0x40011000

08001b68 <ltc6804_Delay>:

void ltc6804_Delay(volatile uint32_t nCount)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8001b70:	e002      	b.n	8001b78 <ltc6804_Delay+0x10>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f9      	bne.n	8001b72 <ltc6804_Delay+0xa>
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
	...

08001b8c <ltc6804_Write8>:

void ltc6804_Write8(uint8_t out)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6804_CS_SET(CS_Pin);
	//ltc6804_MOSI_RESET;
	ltc6804_SCK_RESET;
 8001b96:	2200      	movs	r2, #0
 8001b98:	2108      	movs	r1, #8
 8001b9a:	481b      	ldr	r0, [pc, #108]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001b9c:	f007 fe33 	bl	8009806 <HAL_GPIO_WritePin>
	//ltc6804_CS_RESET(CS_Pin);
	//ltc6804_Delay(10);
	for (i = 0; i < 8; i++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e027      	b.n	8001bf6 <ltc6804_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	fa42 f303 	asr.w	r3, r2, r3
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d005      	beq.n	8001bc6 <ltc6804_Write8+0x3a>
			ltc6804_MOSI_SET;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4812      	ldr	r0, [pc, #72]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bc0:	f007 fe21 	bl	8009806 <HAL_GPIO_WritePin>
 8001bc4:	e004      	b.n	8001bd0 <ltc6804_Write8+0x44>
		} else {
			ltc6804_MOSI_RESET;
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2120      	movs	r1, #32
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bcc:	f007 fe1b 	bl	8009806 <HAL_GPIO_WritePin>
		}
		ltc6804_Delay(10);
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f7ff ffc9 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2108      	movs	r1, #8
 8001bda:	480b      	ldr	r0, [pc, #44]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bdc:	f007 fe13 	bl	8009806 <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f7ff ffc1 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001be6:	2200      	movs	r2, #0
 8001be8:	2108      	movs	r1, #8
 8001bea:	4807      	ldr	r0, [pc, #28]	; (8001c08 <ltc6804_Write8+0x7c>)
 8001bec:	f007 fe0b 	bl	8009806 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	2b07      	cmp	r3, #7
 8001bfa:	d9d4      	bls.n	8001ba6 <ltc6804_Write8+0x1a>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40010c00 	.word	0x40010c00

08001c0c <ltc6804_Read8>:
		ltc6804_SCK_SET;
	}
}

uint8_t ltc6804_Read8()
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	71bb      	strb	r3, [r7, #6]
	//ltc6804_Delay(10);
	//ltc6804_CS_RESET(CS_Pin);
	ltc6804_MOSI_RESET;
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	481e      	ldr	r0, [pc, #120]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c1c:	f007 fdf3 	bl	8009806 <HAL_GPIO_WritePin>
	ltc6804_SCK_RESET;
 8001c20:	2200      	movs	r2, #0
 8001c22:	2108      	movs	r1, #8
 8001c24:	481b      	ldr	r0, [pc, #108]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c26:	f007 fdee 	bl	8009806 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	e028      	b.n	8001c82 <ltc6804_Read8+0x76>
		ltc6804_Delay(10);
 8001c30:	200a      	movs	r0, #10
 8001c32:	f7ff ff99 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001c36:	2201      	movs	r2, #1
 8001c38:	2108      	movs	r1, #8
 8001c3a:	4816      	ldr	r0, [pc, #88]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c3c:	f007 fde3 	bl	8009806 <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001c40:	200a      	movs	r0, #10
 8001c42:	f7ff ff91 	bl	8001b68 <ltc6804_Delay>
		if (ltc6804_MISO == GPIO_PIN_SET) {
 8001c46:	2110      	movs	r1, #16
 8001c48:	4812      	ldr	r0, [pc, #72]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c4a:	f007 fdc5 	bl	80097d8 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d10b      	bne.n	8001c6c <ltc6804_Read8+0x60>
			temp |= (1 << (7-i));
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	b25a      	sxtb	r2, r3
 8001c62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	b25b      	sxtb	r3, r3
 8001c6a:	71bb      	strb	r3, [r7, #6]
		}
		ltc6804_Delay(10);
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	f7ff ff7b 	bl	8001b68 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001c72:	2200      	movs	r2, #0
 8001c74:	2108      	movs	r1, #8
 8001c76:	4807      	ldr	r0, [pc, #28]	; (8001c94 <ltc6804_Read8+0x88>)
 8001c78:	f007 fdc5 	bl	8009806 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b07      	cmp	r3, #7
 8001c86:	d9d3      	bls.n	8001c30 <ltc6804_Read8+0x24>
	}
	//ltc6804_CS_SET(CS_Pin);

	return temp;
 8001c88:	79bb      	ldrb	r3, [r7, #6]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40010c00 	.word	0x40010c00

08001c98 <set_adc>:
void set_adc(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH, //Cell Channels to be measured
		uint8_t CHG //GPIO Channels to be measured
)
{
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	71fb      	strb	r3, [r7, #7]
 8001caa:	4603      	mov	r3, r0
 8001cac:	71bb      	strb	r3, [r7, #6]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	717b      	strb	r3, [r7, #5]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	105b      	asrs	r3, r3, #1
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <set_adc+0x8c>)
 8001cca:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	01db      	lsls	r3, r3, #7
 8001cd0:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	797b      	ldrb	r3, [r7, #5]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <set_adc+0x8c>)
 8001cea:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	105b      	asrs	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <set_adc+0x90>)
 8001d00:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG ;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	793b      	ldrb	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3360      	adds	r3, #96	; 0x60
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <set_adc+0x90>)
 8001d16:	705a      	strb	r2, [r3, #1]

}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc90      	pop	{r4, r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200007a8 	.word	0x200007a8
 8001d28:	2000084c 	.word	0x2000084c

08001d2c <LTC6804_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adcv()
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADCV[0];
 8001d32:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <LTC6804_adcv+0x5c>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <LTC6804_adcv+0x5c>)
 8001d3a:	785b      	ldrb	r3, [r3, #1]
 8001d3c:	707b      	strb	r3, [r7, #1]

	//2
	temp_pec = pec15_calc(2, ADCV);
 8001d3e:	4912      	ldr	r1, [pc, #72]	; (8001d88 <LTC6804_adcv+0x5c>)
 8001d40:	2002      	movs	r0, #2
 8001d42:	f000 fb25 	bl	8002390 <pec15_calc>
 8001d46:	4603      	mov	r3, r0
 8001d48:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	70fb      	strb	r3, [r7, #3]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001d5a:	f000 fb03 	bl	8002364 <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <LTC6804_adcv+0x60>)
 8001d66:	f007 fd4e 	bl	8009806 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	2004      	movs	r0, #4
 8001d70:	f000 fb40 	bl	80023f4 <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001d74:	2201      	movs	r2, #1
 8001d76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7a:	4804      	ldr	r0, [pc, #16]	; (8001d8c <LTC6804_adcv+0x60>)
 8001d7c:	f007 fd43 	bl	8009806 <HAL_GPIO_WritePin>

}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200007a8 	.word	0x200007a8
 8001d8c:	40011000 	.word	0x40011000

08001d90 <LTC6804_adstat>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adstat()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	uint8_t ADSTAT[2];

	//1
	cmd[0] = 0x05;
 8001d96:	2305      	movs	r3, #5
 8001d98:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0xE9;
 8001d9a:	23e9      	movs	r3, #233	; 0xe9
 8001d9c:	727b      	strb	r3, [r7, #9]

	ADSTAT[0] = cmd[0];
 8001d9e:	7a3b      	ldrb	r3, [r7, #8]
 8001da0:	713b      	strb	r3, [r7, #4]
	ADSTAT[1] = cmd[1];
 8001da2:	7a7b      	ldrb	r3, [r7, #9]
 8001da4:	717b      	strb	r3, [r7, #5]

	//2
	temp_pec = pec15_calc(2, ADSTAT);
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	2002      	movs	r0, #2
 8001dac:	f000 faf0 	bl	8002390 <pec15_calc>
 8001db0:	4603      	mov	r3, r0
 8001db2:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(temp_pec);
 8001dbe:	89fb      	ldrh	r3, [r7, #14]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	72fb      	strb	r3, [r7, #11]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001dc4:	f000 face 	bl	8002364 <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dce:	4809      	ldr	r0, [pc, #36]	; (8001df4 <LTC6804_adstat+0x64>)
 8001dd0:	f007 fd19 	bl	8009806 <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	4619      	mov	r1, r3
 8001dda:	2004      	movs	r0, #4
 8001ddc:	f000 fb0a 	bl	80023f4 <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001de0:	2201      	movs	r2, #1
 8001de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de6:	4803      	ldr	r0, [pc, #12]	; (8001df4 <LTC6804_adstat+0x64>)
 8001de8:	f007 fd0d 	bl	8009806 <HAL_GPIO_WritePin>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40011000 	.word	0x40011000

08001df8 <LTC6804_rdcv>:
 *************************************************/
uint8_t LTC6804_rdcv(uint8_t reg,
		uint8_t total_ic,
		uint16_t cell_codes[][12]
)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	603a      	str	r2, [r7, #0]
 8001e02:	71fb      	strb	r3, [r7, #7]
 8001e04:	460b      	mov	r3, r1
 8001e06:	71bb      	strb	r3, [r7, #6]

	const uint8_t NUM_RX_BYT = 8;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	763b      	strb	r3, [r7, #24]
	const uint8_t BYT_IN_REG = 6;
 8001e0c:	2306      	movs	r3, #6
 8001e0e:	75fb      	strb	r3, [r7, #23]
	const uint8_t CELL_IN_REG = 3;
 8001e10:	2303      	movs	r3, #3
 8001e12:	75bb      	strb	r3, [r7, #22]

	uint8_t *cell_data;
	int8_t pec_error = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0; //data counter
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001e1c:	7e3b      	ldrb	r3, [r7, #24]
 8001e1e:	79ba      	ldrb	r2, [r7, #6]
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00a f997 	bl	800c158 <malloc>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	613b      	str	r3, [r7, #16]
	//1.a
	if (reg == 0)
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d16f      	bne.n	8001f14 <LTC6804_rdcv+0x11c>
	{
		//a.i
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001e34:	2301      	movs	r3, #1
 8001e36:	777b      	strb	r3, [r7, #29]
 8001e38:	e068      	b.n	8001f0c <LTC6804_rdcv+0x114>
		{
			data_counter = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	77bb      	strb	r3, [r7, #30]
			LTC6804_rdcv_reg(cell_reg, total_ic,cell_data);
 8001e3e:	79b9      	ldrb	r1, [r7, #6]
 8001e40:	7f7b      	ldrb	r3, [r7, #29]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f8cf 	bl	8001fe8 <LTC6804_rdcv_reg>
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	773b      	strb	r3, [r7, #28]
 8001e4e:	e056      	b.n	8001efe <LTC6804_rdcv+0x106>
			{
				// current_ic is used as an IC counter
				//a.ii
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001e50:	2300      	movs	r3, #0
 8001e52:	76fb      	strb	r3, [r7, #27]
 8001e54:	e026      	b.n	8001ea4 <LTC6804_rdcv+0xac>
				{
					// once for each cell voltages in the register
					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);
 8001e56:	7fbb      	ldrb	r3, [r7, #30]
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	7fbb      	ldrb	r3, [r7, #30]
 8001e62:	3301      	adds	r3, #1
 8001e64:	6939      	ldr	r1, [r7, #16]
 8001e66:	440b      	add	r3, r1
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	817b      	strh	r3, [r7, #10]
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001e74:	7f3a      	ldrb	r2, [r7, #28]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4413      	add	r3, r2
 8001e84:	7ef9      	ldrb	r1, [r7, #27]
 8001e86:	7f7a      	ldrb	r2, [r7, #29]
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	7db8      	ldrb	r0, [r7, #22]
 8001e8c:	fb00 f202 	mul.w	r2, r0, r2
 8001e90:	440a      	add	r2, r1
 8001e92:	8979      	ldrh	r1, [r7, #10]
 8001e94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;
 8001e98:	7fbb      	ldrb	r3, [r7, #30]
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	77bb      	strb	r3, [r7, #30]
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001e9e:	7efb      	ldrb	r3, [r7, #27]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	76fb      	strb	r3, [r7, #27]
 8001ea4:	7efa      	ldrb	r2, [r7, #27]
 8001ea6:	7dbb      	ldrb	r3, [r7, #22]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d3d4      	bcc.n	8001e56 <LTC6804_rdcv+0x5e>
				}
				//a.iii
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];
 8001eac:	7fbb      	ldrb	r3, [r7, #30]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	7fbb      	ldrb	r3, [r7, #30]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	6939      	ldr	r1, [r7, #16]
 8001ec0:	440b      	add	r3, r1
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	81fb      	strh	r3, [r7, #14]
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT ]);
 8001eca:	7f3b      	ldrb	r3, [r7, #28]
 8001ecc:	7e3a      	ldrb	r2, [r7, #24]
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	441a      	add	r2, r3
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 fa57 	bl	8002390 <pec15_calc>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	81bb      	strh	r3, [r7, #12]
				if (received_pec != data_pec)
 8001ee6:	89fa      	ldrh	r2, [r7, #14]
 8001ee8:	89bb      	ldrh	r3, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <LTC6804_rdcv+0xfa>
				{
					pec_error = -1;
 8001eee:	23ff      	movs	r3, #255	; 0xff
 8001ef0:	77fb      	strb	r3, [r7, #31]
				}
				data_counter=data_counter+2;
 8001ef2:	7fbb      	ldrb	r3, [r7, #30]
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001ef8:	7f3b      	ldrb	r3, [r7, #28]
 8001efa:	3301      	adds	r3, #1
 8001efc:	773b      	strb	r3, [r7, #28]
 8001efe:	7f3a      	ldrb	r2, [r7, #28]
 8001f00:	79bb      	ldrb	r3, [r7, #6]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3a4      	bcc.n	8001e50 <LTC6804_rdcv+0x58>
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001f06:	7f7b      	ldrb	r3, [r7, #29]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	777b      	strb	r3, [r7, #29]
 8001f0c:	7f7b      	ldrb	r3, [r7, #29]
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d993      	bls.n	8001e3a <LTC6804_rdcv+0x42>
 8001f12:	e060      	b.n	8001fd6 <LTC6804_rdcv+0x1de>
	//1.b
	else
	{
		//b.i

		LTC6804_rdcv_reg(reg, total_ic,cell_data);
 8001f14:	79b9      	ldrb	r1, [r7, #6]
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 f864 	bl	8001fe8 <LTC6804_rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001f20:	2300      	movs	r3, #0
 8001f22:	76bb      	strb	r3, [r7, #26]
 8001f24:	e053      	b.n	8001fce <LTC6804_rdcv+0x1d6>
		{
			// current_ic is used as an IC counter
			//b.ii
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001f26:	2300      	movs	r3, #0
 8001f28:	767b      	strb	r3, [r7, #25]
 8001f2a:	e026      	b.n	8001f7a <LTC6804_rdcv+0x182>
			{
				// once for each cell voltage in the register
				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);
 8001f2c:	7fbb      	ldrb	r3, [r7, #30]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	7fbb      	ldrb	r3, [r7, #30]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	6939      	ldr	r1, [r7, #16]
 8001f3c:	440b      	add	r3, r1
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	817b      	strh	r3, [r7, #10]
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8001f4a:	7eba      	ldrb	r2, [r7, #26]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	461a      	mov	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	7e79      	ldrb	r1, [r7, #25]
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	7db8      	ldrb	r0, [r7, #22]
 8001f62:	fb00 f202 	mul.w	r2, r0, r2
 8001f66:	440a      	add	r2, r1
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;
 8001f6e:	7fbb      	ldrb	r3, [r7, #30]
 8001f70:	3302      	adds	r3, #2
 8001f72:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001f74:	7e7b      	ldrb	r3, [r7, #25]
 8001f76:	3301      	adds	r3, #1
 8001f78:	767b      	strb	r3, [r7, #25]
 8001f7a:	7e7a      	ldrb	r2, [r7, #25]
 8001f7c:	7dbb      	ldrb	r3, [r7, #22]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3d4      	bcc.n	8001f2c <LTC6804_rdcv+0x134>
			}
			//b.iii
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];
 8001f82:	7fbb      	ldrb	r3, [r7, #30]
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	7fbb      	ldrb	r3, [r7, #30]
 8001f92:	3301      	adds	r3, #1
 8001f94:	6939      	ldr	r1, [r7, #16]
 8001f96:	440b      	add	r3, r1
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	4413      	add	r3, r2
 8001f9e:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001fa0:	7ebb      	ldrb	r3, [r7, #26]
 8001fa2:	7e3a      	ldrb	r2, [r7, #24]
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	441a      	add	r2, r3
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f9ec 	bl	8002390 <pec15_calc>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 8001fbc:	89fa      	ldrh	r2, [r7, #14]
 8001fbe:	89bb      	ldrh	r3, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <LTC6804_rdcv+0x1d0>
			{
				pec_error = -1;
 8001fc4:	23ff      	movs	r3, #255	; 0xff
 8001fc6:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001fc8:	7ebb      	ldrb	r3, [r7, #26]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	76bb      	strb	r3, [r7, #26]
 8001fce:	7eba      	ldrb	r2, [r7, #26]
 8001fd0:	79bb      	ldrb	r3, [r7, #6]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d3a7      	bcc.n	8001f26 <LTC6804_rdcv+0x12e>
			}
		}
	}
	free(cell_data);
 8001fd6:	6938      	ldr	r0, [r7, #16]
 8001fd8:	f00a f8c6 	bl	800c168 <free>
	//2
	return(pec_error);
 8001fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <LTC6804_rdcv_reg>:
 *************************************************/
void LTC6804_rdcv_reg(uint8_t reg,
		uint8_t total_ic,
		uint8_t *data
)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	603a      	str	r2, [r7, #0]
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	if (reg == 1)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d104      	bne.n	8002008 <LTC6804_rdcv_reg+0x20>
	{
		cmd[1] = 0x04;
 8001ffe:	2304      	movs	r3, #4
 8002000:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	e016      	b.n	8002036 <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 2)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d104      	bne.n	8002018 <LTC6804_rdcv_reg+0x30>
	{
		cmd[1] = 0x06;
 800200e:	2306      	movs	r3, #6
 8002010:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002012:	2300      	movs	r3, #0
 8002014:	733b      	strb	r3, [r7, #12]
 8002016:	e00e      	b.n	8002036 <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 3)
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d104      	bne.n	8002028 <LTC6804_rdcv_reg+0x40>
	{
		cmd[1] = 0x08;
 800201e:	2308      	movs	r3, #8
 8002020:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	e006      	b.n	8002036 <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 4)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b04      	cmp	r3, #4
 800202c:	d103      	bne.n	8002036 <LTC6804_rdcv_reg+0x4e>
	{
		cmd[1] = 0x0A;
 800202e:	230a      	movs	r3, #10
 8002030:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	733b      	strb	r3, [r7, #12]

	//2


	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8002036:	f000 f995 	bl	8002364 <wakeup_idle>

	//4
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e030      	b.n	80020a2 <LTC6804_rdcv_reg+0xba>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3b80      	subs	r3, #128	; 0x80
 800204a:	b2db      	uxtb	r3, r3
 800204c:	733b      	strb	r3, [r7, #12]
		temp_pec = pec15_calc(2, cmd);
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4619      	mov	r1, r3
 8002054:	2002      	movs	r0, #2
 8002056:	f000 f99b 	bl	8002390 <pec15_calc>
 800205a:	4603      	mov	r3, r0
 800205c:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 800205e:	8a7b      	ldrh	r3, [r7, #18]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	73bb      	strb	r3, [r7, #14]
		cmd[3] = (uint8_t)(temp_pec);
 8002068:	8a7b      	ldrh	r3, [r7, #18]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	73fb      	strb	r3, [r7, #15]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	480f      	ldr	r0, [pc, #60]	; (80020b4 <LTC6804_rdcv_reg+0xcc>)
 8002076:	f007 fbc6 	bl	8009806 <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&data[current_ic*8],8);
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	441a      	add	r2, r3
 8002084:	f107 000c 	add.w	r0, r7, #12
 8002088:	2308      	movs	r3, #8
 800208a:	2104      	movs	r1, #4
 800208c:	f000 f9ce 	bl	800242c <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	4807      	ldr	r0, [pc, #28]	; (80020b4 <LTC6804_rdcv_reg+0xcc>)
 8002098:	f007 fbb5 	bl	8009806 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	dbca      	blt.n	8002040 <LTC6804_rdcv_reg+0x58>
	}
}
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40011000 	.word	0x40011000

080020b8 <LTC6804_wrcfg>:

 The function will calculate the needed PEC codes for the write data
 and then transmit data to the ICs on a stack.
 ********************************************************/
void LTC6804_wrcfg(uint8_t total_ic,uint8_t config[][6])
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80020c4:	2306      	movs	r3, #6
 80020c6:	75fb      	strb	r3, [r7, #23]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3304      	adds	r3, #4
 80020d0:	75bb      	strb	r3, [r7, #22]
	uint8_t *cmd;
	uint16_t temp_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80020d2:	7dbb      	ldrb	r3, [r7, #22]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f00a f83f 	bl	800c158 <malloc>
 80020da:	4603      	mov	r3, r0
 80020dc:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	3301      	adds	r3, #1
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x3d;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	3302      	adds	r3, #2
 80020f0:	223d      	movs	r2, #61	; 0x3d
 80020f2:	701a      	strb	r2, [r3, #0]
	cmd[3] = 0x6e;
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	3303      	adds	r3, #3
 80020f8:	226e      	movs	r2, #110	; 0x6e
 80020fa:	701a      	strb	r2, [r3, #0]

	//2
	cmd_index = 4;
 80020fc:	2304      	movs	r3, #4
 80020fe:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 8002100:	2300      	movs	r3, #0
 8002102:	77bb      	strb	r3, [r7, #30]
 8002104:	e03f      	b.n	8002186 <LTC6804_wrcfg+0xce>
	{
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 8002106:	2300      	movs	r3, #0
 8002108:	777b      	strb	r3, [r7, #29]
 800210a:	e013      	b.n	8002134 <LTC6804_wrcfg+0x7c>
		{
			// i is the byte counter

			cmd[cmd_index] = config[current_ic][current_byte];    //adding the config data to the array to be sent
 800210c:	7fba      	ldrb	r2, [r7, #30]
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	1899      	adds	r1, r3, r2
 800211c:	7f7a      	ldrb	r2, [r7, #29]
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	6938      	ldr	r0, [r7, #16]
 8002122:	4403      	add	r3, r0
 8002124:	5c8a      	ldrb	r2, [r1, r2]
 8002126:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	3301      	adds	r3, #1
 800212c:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 800212e:	7f7b      	ldrb	r3, [r7, #29]
 8002130:	3301      	adds	r3, #1
 8002132:	777b      	strb	r3, [r7, #29]
 8002134:	7f7a      	ldrb	r2, [r7, #29]
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3e7      	bcc.n	800210c <LTC6804_wrcfg+0x54>
		}
		//3
		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);// calculating the PEC for each board
 800213c:	7fba      	ldrb	r2, [r7, #30]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	461a      	mov	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	461a      	mov	r2, r3
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f91c 	bl	8002390 <pec15_calc>
 8002158:	4603      	mov	r3, r0
 800215a:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(temp_pec >> 8);
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	b299      	uxth	r1, r3
 8002162:	7ffb      	ldrb	r3, [r7, #31]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	b2ca      	uxtb	r2, r1
 800216a:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)temp_pec;
 800216c:	7ffb      	ldrb	r3, [r7, #31]
 800216e:	3301      	adds	r3, #1
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4413      	add	r3, r2
 8002174:	89fa      	ldrh	r2, [r7, #14]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	3302      	adds	r3, #2
 800217e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 8002180:	7fbb      	ldrb	r3, [r7, #30]
 8002182:	3301      	adds	r3, #1
 8002184:	77bb      	strb	r3, [r7, #30]
 8002186:	7fba      	ldrb	r2, [r7, #30]
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	429a      	cmp	r2, r3
 800218c:	d3bb      	bcc.n	8002106 <LTC6804_wrcfg+0x4e>
	}

	//4
	wakeup_idle ();                                //This will guarantee that the LTC6804 isoSPI port is awake.This command can be removed.
 800218e:	f000 f8e9 	bl	8002364 <wakeup_idle>
	//5
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002192:	2300      	movs	r3, #0
 8002194:	61bb      	str	r3, [r7, #24]
 8002196:	e036      	b.n	8002206 <LTC6804_wrcfg+0x14e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	3b80      	subs	r3, #128	; 0x80
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	701a      	strb	r2, [r3, #0]
		temp_pec = pec15_calc(2, cmd);
 80021a8:	6939      	ldr	r1, [r7, #16]
 80021aa:	2002      	movs	r0, #2
 80021ac:	f000 f8f0 	bl	8002390 <pec15_calc>
 80021b0:	4603      	mov	r3, r0
 80021b2:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 80021b4:	89fb      	ldrh	r3, [r7, #14]
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3302      	adds	r3, #2
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
		cmd[3] = (uint8_t)(temp_pec);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3303      	adds	r3, #3
 80021c6:	89fa      	ldrh	r2, [r7, #14]
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d2:	4812      	ldr	r0, [pc, #72]	; (800221c <LTC6804_wrcfg+0x164>)
 80021d4:	f007 fb17 	bl	8009806 <HAL_GPIO_WritePin>
		spi_write_array(4,cmd);
 80021d8:	6939      	ldr	r1, [r7, #16]
 80021da:	2004      	movs	r0, #4
 80021dc:	f000 f90a 	bl	80023f4 <spi_write_array>
		spi_write_array(8,&cmd[4+(8*current_ic)]);
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	3304      	adds	r3, #4
 80021e6:	461a      	mov	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4413      	add	r3, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	2008      	movs	r0, #8
 80021f0:	f000 f900 	bl	80023f4 <spi_write_array>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fa:	4808      	ldr	r0, [pc, #32]	; (800221c <LTC6804_wrcfg+0x164>)
 80021fc:	f007 fb03 	bl	8009806 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3301      	adds	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbc4      	blt.n	8002198 <LTC6804_wrcfg+0xe0>
	}
	free(cmd);
 800220e:	6938      	ldr	r0, [r7, #16]
 8002210:	f009 ffaa 	bl	800c168 <free>
}
 8002214:	bf00      	nop
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40011000 	.word	0x40011000

08002220 <LTC6804_rdstata>:
  0: Data read back has matching PEC

  -1: Data read back has incorrect PEC
 ********************************************************/
int8_t LTC6804_rdstata(uint8_t total_ic, uint8_t r_config[][8])
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 8;
 800222c:	2308      	movs	r3, #8
 800222e:	757b      	strb	r3, [r7, #21]

	uint8_t cmd[4];
	uint8_t *rx_data;
	int8_t pec_error = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	77fb      	strb	r3, [r7, #31]
	uint16_t data_pec;
	uint16_t received_pec;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4618      	mov	r0, r3
 800223a:	f009 ff8d 	bl	800c158 <malloc>
 800223e:	4603      	mov	r3, r0
 8002240:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 8002242:	2300      	movs	r3, #0
 8002244:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x10;
 8002246:	2310      	movs	r3, #16
 8002248:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 800224a:	232b      	movs	r3, #43	; 0x2b
 800224c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0A;
 800224e:	230a      	movs	r3, #10
 8002250:	72fb      	strb	r3, [r7, #11]

	//2
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8002252:	f000 f887 	bl	8002364 <wakeup_idle>
	//3
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	e030      	b.n	80022be <LTC6804_rdstata+0x9e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3b80      	subs	r3, #128	; 0x80
 8002266:	b2db      	uxtb	r3, r3
 8002268:	723b      	strb	r3, [r7, #8]
		data_pec = pec15_calc(2, cmd);
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	4619      	mov	r1, r3
 8002270:	2002      	movs	r0, #2
 8002272:	f000 f88d 	bl	8002390 <pec15_calc>
 8002276:	4603      	mov	r3, r0
 8002278:	81bb      	strh	r3, [r7, #12]
		cmd[2] = (uint8_t)(data_pec >> 8);
 800227a:	89bb      	ldrh	r3, [r7, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	b29b      	uxth	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(data_pec);
 8002284:	89bb      	ldrh	r3, [r7, #12]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	72fb      	strb	r3, [r7, #11]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002290:	4833      	ldr	r0, [pc, #204]	; (8002360 <LTC6804_rdstata+0x140>)
 8002292:	f007 fab8 	bl	8009806 <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&rx_data[current_ic*8],8);
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	461a      	mov	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	441a      	add	r2, r3
 80022a0:	f107 0008 	add.w	r0, r7, #8
 80022a4:	2308      	movs	r3, #8
 80022a6:	2104      	movs	r1, #4
 80022a8:	f000 f8c0 	bl	800242c <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 80022ac:	2201      	movs	r2, #1
 80022ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b2:	482b      	ldr	r0, [pc, #172]	; (8002360 <LTC6804_rdstata+0x140>)
 80022b4:	f007 faa7 	bl	8009806 <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	3301      	adds	r3, #1
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dbca      	blt.n	800225c <LTC6804_rdstata+0x3c>
	}

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 80022c6:	2300      	movs	r3, #0
 80022c8:	75fb      	strb	r3, [r7, #23]
 80022ca:	e03c      	b.n	8002346 <LTC6804_rdstata+0x126>
	{
		//4.a
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	75bb      	strb	r3, [r7, #22]
 80022d0:	e012      	b.n	80022f8 <LTC6804_rdstata+0xd8>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80022d2:	7dba      	ldrb	r2, [r7, #22]
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	7d79      	ldrb	r1, [r7, #21]
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	461a      	mov	r2, r3
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1899      	adds	r1, r3, r2
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	441a      	add	r2, r3
 80022ec:	7dbb      	ldrb	r3, [r7, #22]
 80022ee:	7809      	ldrb	r1, [r1, #0]
 80022f0:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80022f2:	7dbb      	ldrb	r3, [r7, #22]
 80022f4:	3301      	adds	r3, #1
 80022f6:	75bb      	strb	r3, [r7, #22]
 80022f8:	7dba      	ldrb	r2, [r7, #22]
 80022fa:	7d7b      	ldrb	r3, [r7, #21]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d3e8      	bcc.n	80022d2 <LTC6804_rdstata+0xb2>
		}
		//4.b
		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	4413      	add	r3, r2
 8002308:	799b      	ldrb	r3, [r3, #6]
 800230a:	b29b      	uxth	r3, r3
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	b29a      	uxth	r2, r3
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	6839      	ldr	r1, [r7, #0]
 8002316:	440b      	add	r3, r1
 8002318:	79db      	ldrb	r3, [r3, #7]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4413      	add	r3, r2
 800231e:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4619      	mov	r1, r3
 800232a:	2006      	movs	r0, #6
 800232c:	f000 f830 	bl	8002390 <pec15_calc>
 8002330:	4603      	mov	r3, r0
 8002332:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 8002334:	89fa      	ldrh	r2, [r7, #14]
 8002336:	89bb      	ldrh	r3, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <LTC6804_rdstata+0x120>
		{
			pec_error = -1;
 800233c:	23ff      	movs	r3, #255	; 0xff
 800233e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	3301      	adds	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
 8002346:	7dfa      	ldrb	r2, [r7, #23]
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	429a      	cmp	r2, r3
 800234c:	d3be      	bcc.n	80022cc <LTC6804_rdstata+0xac>
		}
	}
	free(rx_data);
 800234e:	6938      	ldr	r0, [r7, #16]
 8002350:	f009 ff0a 	bl	800c168 <free>
	//5
	return(pec_error);
 8002354:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40011000 	.word	0x40011000

08002364 <wakeup_idle>:
/*!****************************************************
  \brief Wake isoSPI up from idle state
 Generic wakeup commannd to wake isoSPI up out of idle
 *****************************************************/
void wakeup_idle()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8002368:	2200      	movs	r2, #0
 800236a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800236e:	4807      	ldr	r0, [pc, #28]	; (800238c <wakeup_idle+0x28>)
 8002370:	f007 fa49 	bl	8009806 <HAL_GPIO_WritePin>
	HAL_Delay(1); //Guarantees the isoSPI will be in ready mode
 8002374:	2001      	movs	r0, #1
 8002376:	f005 f999 	bl	80076ac <HAL_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 800237a:	2201      	movs	r2, #1
 800237c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <wakeup_idle+0x28>)
 8002382:	f007 fa40 	bl	8009806 <HAL_GPIO_WritePin>
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000

08002390 <pec15_calc>:


@return  The calculated pec15 as an unsigned int16_t
 ***********************************************************/
uint16_t pec15_calc(uint8_t len, uint8_t *data)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 800239c:	2310      	movs	r3, #16
 800239e:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80023a0:	2300      	movs	r3, #0
 80023a2:	737b      	strb	r3, [r7, #13]
 80023a4:	e018      	b.n	80023d8 <pec15_calc+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80023a6:	89fb      	ldrh	r3, [r7, #14]
 80023a8:	09db      	lsrs	r3, r3, #7
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	7b7b      	ldrb	r3, [r7, #13]
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	440b      	add	r3, r1
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	4053      	eors	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	897b      	ldrh	r3, [r7, #10]
 80023c6:	490a      	ldr	r1, [pc, #40]	; (80023f0 <pec15_calc+0x60>)
 80023c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4053      	eors	r3, r2
 80023d0:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80023d2:	7b7b      	ldrb	r3, [r7, #13]
 80023d4:	3301      	adds	r3, #1
 80023d6:	737b      	strb	r3, [r7, #13]
 80023d8:	7b7a      	ldrb	r2, [r7, #13]
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3e2      	bcc.n	80023a6 <pec15_calc+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80023e0:	89fb      	ldrh	r3, [r7, #14]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	b29b      	uxth	r3, r3
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	08010ef0 	.word	0x08010ef0

080023f4 <spi_write_array>:

 */
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++)
 8002400:	2300      	movs	r3, #0
 8002402:	73fb      	strb	r3, [r7, #15]
 8002404:	e009      	b.n	800241a <spi_write_array+0x26>
	{
		ltc6804_Write8((char)data[i]);
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fbbc 	bl	8001b8c <ltc6804_Write8>
	for (uint8_t i = 0; i < len; i++)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	3301      	adds	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3f1      	bcc.n	8002406 <spi_write_array+0x12>
	}
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data arry
		uint8_t *rx_data,//Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
)
{
 800242c:	b590      	push	{r4, r7, lr}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	460b      	mov	r3, r1
 800243a:	72fb      	strb	r3, [r7, #11]
 800243c:	4613      	mov	r3, r2
 800243e:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < tx_len; i++)
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]
 8002444:	e009      	b.n	800245a <spi_write_read+0x2e>
	{
		ltc6804_Write8(tx_Data[i]);
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fb9c 	bl	8001b8c <ltc6804_Write8>
	for (uint8_t i = 0; i < tx_len; i++)
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	3301      	adds	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
 800245a:	7dfa      	ldrb	r2, [r7, #23]
 800245c:	7afb      	ldrb	r3, [r7, #11]
 800245e:	429a      	cmp	r2, r3
 8002460:	d3f1      	bcc.n	8002446 <spi_write_read+0x1a>

	}

	for (uint8_t i = 0; i < rx_len; i++)
 8002462:	2300      	movs	r3, #0
 8002464:	75bb      	strb	r3, [r7, #22]
 8002466:	e00a      	b.n	800247e <spi_write_read+0x52>
	{
		rx_data[i] = (uint8_t)ltc6804_Read8(0xFF);
 8002468:	7dbb      	ldrb	r3, [r7, #22]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	18d4      	adds	r4, r2, r3
 800246e:	20ff      	movs	r0, #255	; 0xff
 8002470:	f7ff fbcc 	bl	8001c0c <ltc6804_Read8>
 8002474:	4603      	mov	r3, r0
 8002476:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < rx_len; i++)
 8002478:	7dbb      	ldrb	r3, [r7, #22]
 800247a:	3301      	adds	r3, #1
 800247c:	75bb      	strb	r3, [r7, #22]
 800247e:	7dba      	ldrb	r2, [r7, #22]
 8002480:	7abb      	ldrb	r3, [r7, #10]
 8002482:	429a      	cmp	r2, r3
 8002484:	d3f0      	bcc.n	8002468 <spi_write_read+0x3c>
	}

}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}

08002490 <read_voltage_percell>:

void read_voltage_percell(void)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
	uint16_t	cellvoltage_16bit[1][12];

	LTC6804_adcv();
 8002496:	f7ff fc49 	bl	8001d2c <LTC6804_adcv>
	HAL_Delay(300);
 800249a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800249e:	f005 f905 	bl	80076ac <HAL_Delay>

	LTC6804_rdcv(0, 1, cellvoltage_16bit);
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	461a      	mov	r2, r3
 80024a6:	2101      	movs	r1, #1
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff fca5 	bl	8001df8 <LTC6804_rdcv>
	HAL_Delay(10);
 80024ae:	200a      	movs	r0, #10
 80024b0:	f005 f8fc 	bl	80076ac <HAL_Delay>
	state = 1;
 80024b4:	4b26      	ldr	r3, [pc, #152]	; (8002550 <read_voltage_percell+0xc0>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
	for(uint8_t ik=0;ik<11;ik++) {
 80024ba:	2300      	movs	r3, #0
 80024bc:	77fb      	strb	r3, [r7, #31]
 80024be:	e03b      	b.n	8002538 <read_voltage_percell+0xa8>
		if(ik >= 5)
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d91b      	bls.n	80024fe <read_voltage_percell+0x6e>
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik+1] / 10000.0);
 80024c6:	7ffb      	ldrb	r3, [r7, #31]
 80024c8:	3301      	adds	r3, #1
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	f107 0220 	add.w	r2, r7, #32
 80024d0:	4413      	add	r3, r2
 80024d2:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f800 	bl	80004dc <__aeabi_i2d>
 80024dc:	a31a      	add	r3, pc, #104	; (adr r3, 8002548 <read_voltage_percell+0xb8>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f98f 	bl	8000804 <__aeabi_ddiv>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	7ffc      	ldrb	r4, [r7, #31]
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe fb56 	bl	8000ba0 <__aeabi_d2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a17      	ldr	r2, [pc, #92]	; (8002554 <read_voltage_percell+0xc4>)
 80024f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80024fc:	e019      	b.n	8002532 <read_voltage_percell+0xa2>
		else
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik] / 10000.0);
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	f107 0220 	add.w	r2, r7, #32
 8002506:	4413      	add	r3, r2
 8002508:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fd ffe5 	bl	80004dc <__aeabi_i2d>
 8002512:	a30d      	add	r3, pc, #52	; (adr r3, 8002548 <read_voltage_percell+0xb8>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f974 	bl	8000804 <__aeabi_ddiv>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	7ffc      	ldrb	r4, [r7, #31]
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fb3b 	bl	8000ba0 <__aeabi_d2f>
 800252a:	4603      	mov	r3, r0
 800252c:	4a09      	ldr	r2, [pc, #36]	; (8002554 <read_voltage_percell+0xc4>)
 800252e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t ik=0;ik<11;ik++) {
 8002532:	7ffb      	ldrb	r3, [r7, #31]
 8002534:	3301      	adds	r3, #1
 8002536:	77fb      	strb	r3, [r7, #31]
 8002538:	7ffb      	ldrb	r3, [r7, #31]
 800253a:	2b0a      	cmp	r3, #10
 800253c:	d9c0      	bls.n	80024c0 <read_voltage_percell+0x30>
	}
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3724      	adds	r7, #36	; 0x24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}
 8002548:	00000000 	.word	0x00000000
 800254c:	40c38800 	.word	0x40c38800
 8002550:	200006f4 	.word	0x200006f4
 8002554:	200007e8 	.word	0x200007e8

08002558 <read_sumvoltage>:

void read_sumvoltage(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	LTC6804_adstat();
 800255c:	f7ff fc18 	bl	8001d90 <LTC6804_adstat>
	HAL_Delay(200);
 8002560:	20c8      	movs	r0, #200	; 0xc8
 8002562:	f005 f8a3 	bl	80076ac <HAL_Delay>

	LTC6804_rdstata(1, rd_config);
 8002566:	491a      	ldr	r1, [pc, #104]	; (80025d0 <read_sumvoltage+0x78>)
 8002568:	2001      	movs	r0, #1
 800256a:	f7ff fe59 	bl	8002220 <LTC6804_rdstata>
	HAL_Delay(10);
 800256e:	200a      	movs	r0, #10
 8002570:	f005 f89c 	bl	80076ac <HAL_Delay>

	sum_voltage = (rd_config[0][0] | (rd_config[0][1] << 8)) * 20 * 0.1 / 1000.0;
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <read_sumvoltage+0x78>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <read_sumvoltage+0x78>)
 800257c:	785b      	ldrb	r3, [r3, #1]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	431a      	orrs	r2, r3
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd ffa6 	bl	80004dc <__aeabi_i2d>
 8002590:	a30d      	add	r3, pc, #52	; (adr r3, 80025c8 <read_sumvoltage+0x70>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fe f80b 	bl	80005b0 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <read_sumvoltage+0x7c>)
 80025a8:	f7fe f92c 	bl	8000804 <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe faf4 	bl	8000ba0 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <read_sumvoltage+0x80>)
 80025bc:	6013      	str	r3, [r2, #0]
	state=2;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <read_sumvoltage+0x84>)
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]
}
 80025c4:	bf00      	nop
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	9999999a 	.word	0x9999999a
 80025cc:	3fb99999 	.word	0x3fb99999
 80025d0:	20000770 	.word	0x20000770
 80025d4:	408f4000 	.word	0x408f4000
 80025d8:	20000844 	.word	0x20000844
 80025dc:	200006f4 	.word	0x200006f4

080025e0 <get_balance_status>:


uint16_t get_balance_status(float Cell_Voltage_10data[10])
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	uint16_t balance_status;
	Cell_Voltage_Lowest=4.2;
 80025e8:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <get_balance_status+0x148>)
 80025ea:	4a50      	ldr	r2, [pc, #320]	; (800272c <get_balance_status+0x14c>)
 80025ec:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 80025ee:	2300      	movs	r3, #0
 80025f0:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_dat;
	float buffer_imbalance;

	for(int ik=0;ik<10;ik++) {
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e017      	b.n	8002628 <get_balance_status+0x48>
		if(Cell_Voltage_10data[ik] < Cell_Voltage_Lowest)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a49      	ldr	r2, [pc, #292]	; (8002728 <get_balance_status+0x148>)
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fdc5 	bl	8001198 <__aeabi_fcmplt>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <get_balance_status+0x42>
			Cell_Voltage_Lowest = Cell_Voltage_10data[ik];
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a42      	ldr	r2, [pc, #264]	; (8002728 <get_balance_status+0x148>)
 8002620:	6013      	str	r3, [r2, #0]
	for(int ik=0;ik<10;ik++) {
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b09      	cmp	r3, #9
 800262c:	dde4      	ble.n	80025f8 <get_balance_status+0x18>
	}

	for(int ik=0;ik<10;ik++) {
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	e047      	b.n	80026c4 <get_balance_status+0xe4>
		delta_vbatt[ik] = Cell_Voltage_10data[ik] - Cell_Voltage_Lowest;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <get_balance_status+0x148>)
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe faff 	bl	8000c48 <__aeabi_fsub>
 800264a:	4603      	mov	r3, r0
 800264c:	4619      	mov	r1, r3
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <get_balance_status+0x150>)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		buffer_imbalance+=delta_vbatt[ik];
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <get_balance_status+0x150>)
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	4619      	mov	r1, r3
 8002660:	69b8      	ldr	r0, [r7, #24]
 8002662:	f7fe faf3 	bl	8000c4c <__addsf3>
 8002666:	4603      	mov	r3, r0
 8002668:	61bb      	str	r3, [r7, #24]

		if(delta_vbatt[ik]> 0.025 && Cell_Voltage_10data[ik] > VCELL_BALANCE_PERMITTED) {
 800266a:	4a31      	ldr	r2, [pc, #196]	; (8002730 <get_balance_status+0x150>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff44 	bl	8000500 <__aeabi_f2d>
 8002678:	a327      	add	r3, pc, #156	; (adr r3, 8002718 <get_balance_status+0x138>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe fa27 	bl	8000ad0 <__aeabi_dcmpgt>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d01a      	beq.n	80026be <get_balance_status+0xde>
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff34 	bl	8000500 <__aeabi_f2d>
 8002698:	a321      	add	r3, pc, #132	; (adr r3, 8002720 <get_balance_status+0x140>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fe fa17 	bl	8000ad0 <__aeabi_dcmpgt>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <get_balance_status+0xde>
			temp_dat = 0x01;
 80026a8:	2301      	movs	r3, #1
 80026aa:	81fb      	strh	r3, [r7, #14]
			temp_dat = temp_dat << ik;
 80026ac:	89fa      	ldrh	r2, [r7, #14]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	81fb      	strh	r3, [r7, #14]
			balance_status= balance_status+temp_dat;
 80026b6:	8bfa      	ldrh	r2, [r7, #30]
 80026b8:	89fb      	ldrh	r3, [r7, #14]
 80026ba:	4413      	add	r3, r2
 80026bc:	83fb      	strh	r3, [r7, #30]
	for(int ik=0;ik<10;ik++) {
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	3301      	adds	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	ddb4      	ble.n	8002634 <get_balance_status+0x54>
		}
	}
	persen_imbalance=buffer_imbalance*100/9.0/1.2;
 80026ca:	491a      	ldr	r1, [pc, #104]	; (8002734 <get_balance_status+0x154>)
 80026cc:	69b8      	ldr	r0, [r7, #24]
 80026ce:	f7fe fbc5 	bl	8000e5c <__aeabi_fmul>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd ff13 	bl	8000500 <__aeabi_f2d>
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <get_balance_status+0x158>)
 80026e0:	f7fe f890 	bl	8000804 <__aeabi_ddiv>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <get_balance_status+0x15c>)
 80026f2:	f7fe f887 	bl	8000804 <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe fa4f 	bl	8000ba0 <__aeabi_d2f>
 8002702:	4603      	mov	r3, r0
 8002704:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <get_balance_status+0x160>)
 8002706:	6013      	str	r3, [r2, #0]
	return(balance_status);
 8002708:	8bfb      	ldrh	r3, [r7, #30]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	9999999a 	.word	0x9999999a
 800271c:	3f999999 	.word	0x3f999999
 8002720:	66666666 	.word	0x66666666
 8002724:	400a6666 	.word	0x400a6666
 8002728:	20000850 	.word	0x20000850
 800272c:	40866666 	.word	0x40866666
 8002730:	2000081c 	.word	0x2000081c
 8002734:	42c80000 	.word	0x42c80000
 8002738:	40220000 	.word	0x40220000
 800273c:	3ff33333 	.word	0x3ff33333
 8002740:	20000754 	.word	0x20000754

08002744 <LTC681x_balance_cell>:

void LTC681x_balance_cell(uint16_t cell_to_balance)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	80fb      	strh	r3, [r7, #6]
//	uint8_t	 wr_config[1][6];
	uint8_t  cell_balance_status;
	uint16_t temp_var;
	uint8_t lm;

	wr_config[0][4] = 0;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <LTC681x_balance_cell+0xa4>)
 8002750:	2200      	movs	r2, #0
 8002752:	711a      	strb	r2, [r3, #4]
	wr_config[0][5] = 0;
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <LTC681x_balance_cell+0xa4>)
 8002756:	2200      	movs	r2, #0
 8002758:	715a      	strb	r2, [r3, #5]

	for(lm=0;lm<10;lm++)
 800275a:	2300      	movs	r3, #0
 800275c:	737b      	strb	r3, [r7, #13]
 800275e:	e035      	b.n	80027cc <LTC681x_balance_cell+0x88>
	{
		cell_balance_status = cell_to_balance >> lm & 0x01;
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	7b7b      	ldrb	r3, [r7, #13]
 8002764:	fa42 f303 	asr.w	r3, r2, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	733b      	strb	r3, [r7, #12]
		if(lm < 7)
 8002770:	7b7b      	ldrb	r3, [r7, #13]
 8002772:	2b06      	cmp	r3, #6
 8002774:	d817      	bhi.n	80027a6 <LTC681x_balance_cell+0x62>
		{
			if(lm < 5)
 8002776:	7b7b      	ldrb	r3, [r7, #13]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d805      	bhi.n	8002788 <LTC681x_balance_cell+0x44>
				temp_var = cell_balance_status << lm;
 800277c:	7b3a      	ldrb	r2, [r7, #12]
 800277e:	7b7b      	ldrb	r3, [r7, #13]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	81fb      	strh	r3, [r7, #14]
 8002786:	e005      	b.n	8002794 <LTC681x_balance_cell+0x50>
			else
				temp_var = cell_balance_status << (lm+1);
 8002788:	7b3a      	ldrb	r2, [r7, #12]
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	3301      	adds	r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	81fb      	strh	r3, [r7, #14]

			wr_config[0][4] += temp_var;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <LTC681x_balance_cell+0xa4>)
 8002796:	791a      	ldrb	r2, [r3, #4]
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4413      	add	r3, r2
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <LTC681x_balance_cell+0xa4>)
 80027a2:	711a      	strb	r2, [r3, #4]
 80027a4:	e00d      	b.n	80027c2 <LTC681x_balance_cell+0x7e>
		}
		else
		{
			temp_var = cell_balance_status << (lm-7);
 80027a6:	7b3a      	ldrb	r2, [r7, #12]
 80027a8:	7b7b      	ldrb	r3, [r7, #13]
 80027aa:	3b07      	subs	r3, #7
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	81fb      	strh	r3, [r7, #14]
			wr_config[0][5] += temp_var;
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <LTC681x_balance_cell+0xa4>)
 80027b4:	795a      	ldrb	r2, [r3, #5]
 80027b6:	89fb      	ldrh	r3, [r7, #14]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <LTC681x_balance_cell+0xa4>)
 80027c0:	715a      	strb	r2, [r3, #5]
		}

		temp_var=0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	81fb      	strh	r3, [r7, #14]
	for(lm=0;lm<10;lm++)
 80027c6:	7b7b      	ldrb	r3, [r7, #13]
 80027c8:	3301      	adds	r3, #1
 80027ca:	737b      	strb	r3, [r7, #13]
 80027cc:	7b7b      	ldrb	r3, [r7, #13]
 80027ce:	2b09      	cmp	r3, #9
 80027d0:	d9c6      	bls.n	8002760 <LTC681x_balance_cell+0x1c>
	}
	LTC6804_wrcfg(1, wr_config);
 80027d2:	4905      	ldr	r1, [pc, #20]	; (80027e8 <LTC681x_balance_cell+0xa4>)
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff fc6f 	bl	80020b8 <LTC6804_wrcfg>
	HAL_Delay(10);
 80027da:	200a      	movs	r0, #10
 80027dc:	f004 ff66 	bl	80076ac <HAL_Delay>
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000810 	.word	0x20000810

080027ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80027fc:	4b43      	ldr	r3, [pc, #268]	; (800290c <MX_ADC1_Init+0x120>)
 80027fe:	4a44      	ldr	r2, [pc, #272]	; (8002910 <MX_ADC1_Init+0x124>)
 8002800:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002802:	4b42      	ldr	r3, [pc, #264]	; (800290c <MX_ADC1_Init+0x120>)
 8002804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002808:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800280a:	4b40      	ldr	r3, [pc, #256]	; (800290c <MX_ADC1_Init+0x120>)
 800280c:	2201      	movs	r2, #1
 800280e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <MX_ADC1_Init+0x120>)
 8002812:	2200      	movs	r2, #0
 8002814:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002816:	4b3d      	ldr	r3, [pc, #244]	; (800290c <MX_ADC1_Init+0x120>)
 8002818:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800281c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <MX_ADC1_Init+0x120>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <MX_ADC1_Init+0x120>)
 8002826:	2207      	movs	r2, #7
 8002828:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800282a:	4838      	ldr	r0, [pc, #224]	; (800290c <MX_ADC1_Init+0x120>)
 800282c:	f004 ff62 	bl	80076f4 <HAL_ADC_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002836:	f001 fba3 	bl	8003f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800283a:	2301      	movs	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800283e:	2301      	movs	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002842:	2307      	movs	r3, #7
 8002844:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4830      	ldr	r0, [pc, #192]	; (800290c <MX_ADC1_Init+0x120>)
 800284c:	f005 f936 	bl	8007abc <HAL_ADC_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002856:	f001 fb93 	bl	8003f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800285a:	2302      	movs	r3, #2
 800285c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800285e:	2302      	movs	r3, #2
 8002860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4829      	ldr	r0, [pc, #164]	; (800290c <MX_ADC1_Init+0x120>)
 8002868:	f005 f928 	bl	8007abc <HAL_ADC_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002872:	f001 fb85 	bl	8003f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002876:	2303      	movs	r3, #3
 8002878:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800287a:	2303      	movs	r3, #3
 800287c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	4619      	mov	r1, r3
 8002882:	4822      	ldr	r0, [pc, #136]	; (800290c <MX_ADC1_Init+0x120>)
 8002884:	f005 f91a 	bl	8007abc <HAL_ADC_ConfigChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800288e:	f001 fb77 	bl	8003f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002892:	2304      	movs	r3, #4
 8002894:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002896:	2304      	movs	r3, #4
 8002898:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	4619      	mov	r1, r3
 800289e:	481b      	ldr	r0, [pc, #108]	; (800290c <MX_ADC1_Init+0x120>)
 80028a0:	f005 f90c 	bl	8007abc <HAL_ADC_ConfigChannel>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80028aa:	f001 fb69 	bl	8003f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028ae:	2305      	movs	r3, #5
 80028b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80028b2:	2305      	movs	r3, #5
 80028b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4814      	ldr	r0, [pc, #80]	; (800290c <MX_ADC1_Init+0x120>)
 80028bc:	f005 f8fe 	bl	8007abc <HAL_ADC_ConfigChannel>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80028c6:	f001 fb5b 	bl	8003f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80028ca:	2306      	movs	r3, #6
 80028cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80028ce:	2306      	movs	r3, #6
 80028d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	480d      	ldr	r0, [pc, #52]	; (800290c <MX_ADC1_Init+0x120>)
 80028d8:	f005 f8f0 	bl	8007abc <HAL_ADC_ConfigChannel>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80028e2:	f001 fb4d 	bl	8003f80 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80028e6:	2308      	movs	r3, #8
 80028e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80028ea:	2307      	movs	r3, #7
 80028ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	4619      	mov	r1, r3
 80028f2:	4806      	ldr	r0, [pc, #24]	; (800290c <MX_ADC1_Init+0x120>)
 80028f4:	f005 f8e2 	bl	8007abc <HAL_ADC_ConfigChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80028fe:	f001 fb3f 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000854 	.word	0x20000854
 8002910:	40012400 	.word	0x40012400

08002914 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291c:	f107 0318 	add.w	r3, r7, #24
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a33      	ldr	r2, [pc, #204]	; (80029fc <HAL_ADC_MspInit+0xe8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d15f      	bne.n	80029f4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002934:	4b32      	ldr	r3, [pc, #200]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4a31      	ldr	r2, [pc, #196]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 800293a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800293e:	6193      	str	r3, [r2, #24]
 8002940:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6193      	str	r3, [r2, #24]
 8002958:	4b29      	ldr	r3, [pc, #164]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002964:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 800296a:	f043 0308 	orr.w	r3, r3, #8
 800296e:	6193      	str	r3, [r2, #24]
 8002970:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_ADC_MspInit+0xec>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = LOWCELL_TEMP_Pin|HIGHCELL_TEMP_Pin|MOSFET_TEMP_Pin|CURRENT_SENSE_TEMP_Pin
 800297c:	237e      	movs	r3, #126	; 0x7e
 800297e:	61bb      	str	r3, [r7, #24]
                          |CURRENT_SENSOR_Pin|SPARE_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002980:	2303      	movs	r3, #3
 8002982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f107 0318 	add.w	r3, r7, #24
 8002988:	4619      	mov	r1, r3
 800298a:	481e      	ldr	r0, [pc, #120]	; (8002a04 <HAL_ADC_MspInit+0xf0>)
 800298c:	f006 fd90 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIDCELL_TEMP_Pin;
 8002990:	2301      	movs	r3, #1
 8002992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002994:	2303      	movs	r3, #3
 8002996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIDCELL_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002998:	f107 0318 	add.w	r3, r7, #24
 800299c:	4619      	mov	r1, r3
 800299e:	481a      	ldr	r0, [pc, #104]	; (8002a08 <HAL_ADC_MspInit+0xf4>)
 80029a0:	f006 fd86 	bl	80094b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <HAL_ADC_MspInit+0xfc>)
 80029a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029ce:	2220      	movs	r2, #32
 80029d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029d8:	480c      	ldr	r0, [pc, #48]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029da:	f006 fa29 	bl	8008e30 <HAL_DMA_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80029e4:	f001 facc 	bl	8003f80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a08      	ldr	r2, [pc, #32]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029ec:	621a      	str	r2, [r3, #32]
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_ADC_MspInit+0xf8>)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012400 	.word	0x40012400
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010800 	.word	0x40010800
 8002a08:	40010c00 	.word	0x40010c00
 8002a0c:	20000884 	.word	0x20000884
 8002a10:	40020008 	.word	0x40020008

08002a14 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <MX_CAN_Init+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a20:	2208      	movs	r2, #8
 8002a22:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a32:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002a36:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a3e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002a40:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <MX_CAN_Init+0x64>)
 8002a66:	f005 fa22 	bl	8007eae <HAL_CAN_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002a70:	f001 fa86 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200008e4 	.word	0x200008e4
 8002a7c:	40006400 	.word	0x40006400

08002a80 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_CAN_MspInit+0xc0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d14b      	bne.n	8002b38 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <HAL_CAN_MspInit+0xc4>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <HAL_CAN_MspInit+0xc4>)
 8002aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002aaa:	61d3      	str	r3, [r2, #28]
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_CAN_MspInit+0xc4>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_CAN_MspInit+0xc4>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a21      	ldr	r2, [pc, #132]	; (8002b44 <HAL_CAN_MspInit+0xc4>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_CAN_MspInit+0xc4>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4818      	ldr	r0, [pc, #96]	; (8002b48 <HAL_CAN_MspInit+0xc8>)
 8002ae6:	f006 fce3 	bl	80094b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4619      	mov	r1, r3
 8002afe:	4812      	ldr	r0, [pc, #72]	; (8002b48 <HAL_CAN_MspInit+0xc8>)
 8002b00:	f006 fcd6 	bl	80094b0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_CAN_MspInit+0xcc>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_CAN_MspInit+0xcc>)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2014      	movs	r0, #20
 8002b2e:	f006 f948 	bl	8008dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002b32:	2014      	movs	r0, #20
 8002b34:	f006 f961 	bl	8008dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40006400 	.word	0x40006400
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40010c00 	.word	0x40010c00
 8002b4c:	40010000 	.word	0x40010000

08002b50 <CANTX_BattParameter>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CANTX_BattParameter() {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;

	Batt_voltage.m_uint16_t	= VBATT*100;
 8002b56:	4b84      	ldr	r3, [pc, #528]	; (8002d68 <CANTX_BattParameter+0x218>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4984      	ldr	r1, [pc, #528]	; (8002d6c <CANTX_BattParameter+0x21c>)
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f97d 	bl	8000e5c <__aeabi_fmul>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fb65 	bl	8001234 <__aeabi_f2uiz>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b80      	ldr	r3, [pc, #512]	; (8002d70 <CANTX_BattParameter+0x220>)
 8002b70:	801a      	strh	r2, [r3, #0]
	Batt_current.m_uint16_t	= fabs(IBATT)*10;
 8002b72:	4b80      	ldr	r3, [pc, #512]	; (8002d74 <CANTX_BattParameter+0x224>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fcc0 	bl	8000500 <__aeabi_f2d>
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	4b7c      	ldr	r3, [pc, #496]	; (8002d78 <CANTX_BattParameter+0x228>)
 8002b86:	f7fd fd13 	bl	80005b0 <__aeabi_dmul>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fd ffe5 	bl	8000b60 <__aeabi_d2uiz>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <CANTX_BattParameter+0x22c>)
 8002b9c:	801a      	strh	r2, [r3, #0]
	Batt_SOC.m_uint16_t		= (int)Pack_SOC;
 8002b9e:	4b78      	ldr	r3, [pc, #480]	; (8002d80 <CANTX_BattParameter+0x230>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fb20 	bl	80011e8 <__aeabi_f2iz>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	4b75      	ldr	r3, [pc, #468]	; (8002d84 <CANTX_BattParameter+0x234>)
 8002bae:	801a      	strh	r2, [r3, #0]

	Tmax=Suhu_T1;
 8002bb0:	4b75      	ldr	r3, [pc, #468]	; (8002d88 <CANTX_BattParameter+0x238>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a75      	ldr	r2, [pc, #468]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002bb6:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8002bb8:	4b74      	ldr	r3, [pc, #464]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a74      	ldr	r2, [pc, #464]	; (8002d90 <CANTX_BattParameter+0x240>)
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fae8 	bl	8001198 <__aeabi_fcmplt>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <CANTX_BattParameter+0x86>
 8002bce:	4b70      	ldr	r3, [pc, #448]	; (8002d90 <CANTX_BattParameter+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6e      	ldr	r2, [pc, #440]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002bd4:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6e      	ldr	r2, [pc, #440]	; (8002d94 <CANTX_BattParameter+0x244>)
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fad9 	bl	8001198 <__aeabi_fcmplt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <CANTX_BattParameter+0xa4>
 8002bec:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <CANTX_BattParameter+0x244>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a66      	ldr	r2, [pc, #408]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002bf2:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 8002bf4:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a67      	ldr	r2, [pc, #412]	; (8002d98 <CANTX_BattParameter+0x248>)
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe faca 	bl	8001198 <__aeabi_fcmplt>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <CANTX_BattParameter+0xc2>
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <CANTX_BattParameter+0x248>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a5f      	ldr	r2, [pc, #380]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002c10:	6013      	str	r3, [r2, #0]

	Batt_temp.m_uint16_t		= Tmax+40;
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4961      	ldr	r1, [pc, #388]	; (8002d9c <CANTX_BattParameter+0x24c>)
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f817 	bl	8000c4c <__addsf3>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe fb07 	bl	8001234 <__aeabi_f2uiz>
 8002c26:	4603      	mov	r3, r0
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	4b5d      	ldr	r3, [pc, #372]	; (8002da0 <CANTX_BattParameter+0x250>)
 8002c2c:	801a      	strh	r2, [r3, #0]
	Batt_capacity.m_uint16_t	= Pack_Cap*10;
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <CANTX_BattParameter+0x254>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	495d      	ldr	r1, [pc, #372]	; (8002da8 <CANTX_BattParameter+0x258>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f911 	bl	8000e5c <__aeabi_fmul>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe faf9 	bl	8001234 <__aeabi_f2uiz>
 8002c42:	4603      	mov	r3, r0
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	4b59      	ldr	r3, [pc, #356]	; (8002dac <CANTX_BattParameter+0x25c>)
 8002c48:	801a      	strh	r2, [r3, #0]
	Batt_SOH.m_uint16_t			= SOH_batt;
 8002c4a:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <CANTX_BattParameter+0x260>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <CANTX_BattParameter+0x264>)
 8002c52:	801a      	strh	r2, [r3, #0]
	Batt_cycle.m_uint16_t		= cycle;
 8002c54:	4b58      	ldr	r3, [pc, #352]	; (8002db8 <CANTX_BattParameter+0x268>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	4b58      	ldr	r3, [pc, #352]	; (8002dbc <CANTX_BattParameter+0x26c>)
 8002c5c:	801a      	strh	r2, [r3, #0]
	max_voltage.m_uint16_t 		= 63;
 8002c5e:	4b58      	ldr	r3, [pc, #352]	; (8002dc0 <CANTX_BattParameter+0x270>)
 8002c60:	223f      	movs	r2, #63	; 0x3f
 8002c62:	801a      	strh	r2, [r3, #0]

	max_chargevoltage.m_uint16_t = VBATT*1.3;
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <CANTX_BattParameter+0x218>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc49 	bl	8000500 <__aeabi_f2d>
 8002c6e:	a33c      	add	r3, pc, #240	; (adr r3, 8002d60 <CANTX_BattParameter+0x210>)
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f7fd fc9c 	bl	80005b0 <__aeabi_dmul>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f7fd ff6e 	bl	8000b60 <__aeabi_d2uiz>
 8002c84:	4603      	mov	r3, r0
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <CANTX_BattParameter+0x274>)
 8002c8a:	801a      	strh	r2, [r3, #0]
	max_chargecurrent.m_uint16_t = VBATT-20;
 8002c8c:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <CANTX_BattParameter+0x218>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	494d      	ldr	r1, [pc, #308]	; (8002dc8 <CANTX_BattParameter+0x278>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd ffd8 	bl	8000c48 <__aeabi_fsub>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe faca 	bl	8001234 <__aeabi_f2uiz>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <CANTX_BattParameter+0x27c>)
 8002ca6:	801a      	strh	r2, [r3, #0]

	// *********************** GENERAL CAN COMMUNICATION ******************************
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8002ca8:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <CANTX_BattParameter+0x280>)
 8002caa:	2204      	movs	r2, #4
 8002cac:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);
 8002cae:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <CANTX_BattParameter+0x280>)
 8002cb0:	4a48      	ldr	r2, [pc, #288]	; (8002dd4 <CANTX_BattParameter+0x284>)
 8002cb2:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = Batt_voltage.m_bytes[0];
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <CANTX_BattParameter+0x220>)
 8002cb6:	781a      	ldrb	r2, [r3, #0]
 8002cb8:	4b47      	ldr	r3, [pc, #284]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002cba:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_voltage.m_bytes[1];
 8002cbc:	4b2c      	ldr	r3, [pc, #176]	; (8002d70 <CANTX_BattParameter+0x220>)
 8002cbe:	785a      	ldrb	r2, [r3, #1]
 8002cc0:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002cc2:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_current.m_bytes[0];
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <CANTX_BattParameter+0x22c>)
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002cca:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_current.m_bytes[1];
 8002ccc:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <CANTX_BattParameter+0x22c>)
 8002cce:	785a      	ldrb	r2, [r3, #1]
 8002cd0:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002cd2:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_SOC.m_bytes[0];
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <CANTX_BattParameter+0x234>)
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002cda:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_SOC.m_bytes[1];
 8002cdc:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <CANTX_BattParameter+0x234>)
 8002cde:	785a      	ldrb	r2, [r3, #1]
 8002ce0:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002ce2:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = Tmax+40;
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <CANTX_BattParameter+0x23c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	492c      	ldr	r1, [pc, #176]	; (8002d9c <CANTX_BattParameter+0x24c>)
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd ffae 	bl	8000c4c <__addsf3>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fa9e 	bl	8001234 <__aeabi_f2uiz>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002cfe:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 1;
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002d02:	2201      	movs	r2, #1
 8002d04:	71da      	strb	r2, [r3, #7]
	//		Tx_data[6] = Batt_temp.m_bytes[1];
	//		Tx_data[7] = Batt_temp.m_bytes[0];

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 8002d06:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <CANTX_BattParameter+0x280>)
 8002d08:	2208      	movs	r2, #8
 8002d0a:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002d0c:	e00f      	b.n	8002d2e <CANTX_BattParameter+0x1de>
		if(delay_mailboxcheck > 1000){
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d14:	dd08      	ble.n	8002d28 <CANTX_BattParameter+0x1d8>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <CANTX_BattParameter+0x28c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4830      	ldr	r0, [pc, #192]	; (8002de0 <CANTX_BattParameter+0x290>)
 8002d1e:	f005 fba8 	bl	8008472 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	607b      	str	r3, [r7, #4]
			break;
 8002d26:	e008      	b.n	8002d3a <CANTX_BattParameter+0x1ea>
		}
		delay_mailboxcheck++;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002d2e:	482c      	ldr	r0, [pc, #176]	; (8002de0 <CANTX_BattParameter+0x290>)
 8002d30:	f005 fbe3 	bl	80084fa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0e9      	beq.n	8002d0e <CANTX_BattParameter+0x1be>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <CANTX_BattParameter+0x28c>)
 8002d3c:	4a26      	ldr	r2, [pc, #152]	; (8002dd8 <CANTX_BattParameter+0x288>)
 8002d3e:	4924      	ldr	r1, [pc, #144]	; (8002dd0 <CANTX_BattParameter+0x280>)
 8002d40:	4827      	ldr	r0, [pc, #156]	; (8002de0 <CANTX_BattParameter+0x290>)
 8002d42:	f005 fabc 	bl	80082be <HAL_CAN_AddTxMessage>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <CANTX_BattParameter+0x20a>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <CANTX_BattParameter+0x28c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	4823      	ldr	r0, [pc, #140]	; (8002de0 <CANTX_BattParameter+0x290>)
 8002d54:	f005 fb8d 	bl	8008472 <HAL_CAN_AbortTxRequest>
		return;
 8002d58:	bf00      	nop
//		Error_Handler();
	}

}
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	cccccccd 	.word	0xcccccccd
 8002d64:	3ff4cccc 	.word	0x3ff4cccc
 8002d68:	20000694 	.word	0x20000694
 8002d6c:	42c80000 	.word	0x42c80000
 8002d70:	200009c4 	.word	0x200009c4
 8002d74:	2000070c 	.word	0x2000070c
 8002d78:	40240000 	.word	0x40240000
 8002d7c:	20000920 	.word	0x20000920
 8002d80:	20000798 	.word	0x20000798
 8002d84:	20000928 	.word	0x20000928
 8002d88:	20000720 	.word	0x20000720
 8002d8c:	20000970 	.word	0x20000970
 8002d90:	200007a0 	.word	0x200007a0
 8002d94:	20000698 	.word	0x20000698
 8002d98:	20000758 	.word	0x20000758
 8002d9c:	42200000 	.word	0x42200000
 8002da0:	2000096c 	.word	0x2000096c
 8002da4:	20000014 	.word	0x20000014
 8002da8:	41200000 	.word	0x41200000
 8002dac:	200009bc 	.word	0x200009bc
 8002db0:	20000000 	.word	0x20000000
 8002db4:	200008d0 	.word	0x200008d0
 8002db8:	20000660 	.word	0x20000660
 8002dbc:	20000918 	.word	0x20000918
 8002dc0:	20000998 	.word	0x20000998
 8002dc4:	200009b8 	.word	0x200009b8
 8002dc8:	41a00000 	.word	0x41a00000
 8002dcc:	200008d4 	.word	0x200008d4
 8002dd0:	200009a0 	.word	0x200009a0
 8002dd4:	0b000a22 	.word	0x0b000a22
 8002dd8:	200008dc 	.word	0x200008dc
 8002ddc:	20000990 	.word	0x20000990
 8002de0:	200008e4 	.word	0x200008e4

08002de4 <CANTX_BattProtection>:

void CANTX_BattProtection() {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 8002dea:	4b8c      	ldr	r3, [pc, #560]	; (800301c <CANTX_BattProtection+0x238>)
 8002dec:	2204      	movs	r2, #4
 8002dee:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code);
 8002df0:	4b8a      	ldr	r3, [pc, #552]	; (800301c <CANTX_BattProtection+0x238>)
 8002df2:	4a8b      	ldr	r2, [pc, #556]	; (8003020 <CANTX_BattProtection+0x23c>)
 8002df4:	605a      	str	r2, [r3, #4]
	//CAN Data #2
	Tx_data[0] = Batt_capacity.m_bytes[0];
 8002df6:	4b8b      	ldr	r3, [pc, #556]	; (8003024 <CANTX_BattProtection+0x240>)
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	4b8b      	ldr	r3, [pc, #556]	; (8003028 <CANTX_BattProtection+0x244>)
 8002dfc:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_capacity.m_bytes[1];
 8002dfe:	4b89      	ldr	r3, [pc, #548]	; (8003024 <CANTX_BattProtection+0x240>)
 8002e00:	785a      	ldrb	r2, [r3, #1]
 8002e02:	4b89      	ldr	r3, [pc, #548]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e04:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_SOH.m_bytes[0];
 8002e06:	4b89      	ldr	r3, [pc, #548]	; (800302c <CANTX_BattProtection+0x248>)
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	4b87      	ldr	r3, [pc, #540]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e0c:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_SOH.m_bytes[1];
 8002e0e:	4b87      	ldr	r3, [pc, #540]	; (800302c <CANTX_BattProtection+0x248>)
 8002e10:	785a      	ldrb	r2, [r3, #1]
 8002e12:	4b85      	ldr	r3, [pc, #532]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e14:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_cycle.m_bytes[0];
 8002e16:	4b86      	ldr	r3, [pc, #536]	; (8003030 <CANTX_BattProtection+0x24c>)
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	4b83      	ldr	r3, [pc, #524]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e1c:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_cycle.m_bytes[1];
 8002e1e:	4b84      	ldr	r3, [pc, #528]	; (8003030 <CANTX_BattProtection+0x24c>)
 8002e20:	785a      	ldrb	r2, [r3, #1]
 8002e22:	4b81      	ldr	r3, [pc, #516]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e24:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = flag_trip_overcurrentdischarge&0x01;
 8002e26:	4b83      	ldr	r3, [pc, #524]	; (8003034 <CANTX_BattProtection+0x250>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b7d      	ldr	r3, [pc, #500]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e32:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<1;
 8002e34:	4b7c      	ldr	r3, [pc, #496]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e36:	799b      	ldrb	r3, [r3, #6]
 8002e38:	b25a      	sxtb	r2, r3
 8002e3a:	4b7f      	ldr	r3, [pc, #508]	; (8003038 <CANTX_BattProtection+0x254>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	b25b      	sxtb	r3, r3
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	b25b      	sxtb	r3, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b76      	ldr	r3, [pc, #472]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e50:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_shortcircuit&0x01)<<2;
 8002e52:	4b75      	ldr	r3, [pc, #468]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e54:	799b      	ldrb	r3, [r3, #6]
 8002e56:	b25a      	sxtb	r2, r3
 8002e58:	4b78      	ldr	r3, [pc, #480]	; (800303c <CANTX_BattProtection+0x258>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	4313      	orrs	r3, r2
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	4b6e      	ldr	r3, [pc, #440]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e6e:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 8002e70:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e72:	799b      	ldrb	r3, [r3, #6]
 8002e74:	b25a      	sxtb	r2, r3
 8002e76:	4b72      	ldr	r3, [pc, #456]	; (8003040 <CANTX_BattProtection+0x25c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	b25b      	sxtb	r3, r3
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	4313      	orrs	r3, r2
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b67      	ldr	r3, [pc, #412]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e8c:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8002e8e:	4b66      	ldr	r3, [pc, #408]	; (8003028 <CANTX_BattProtection+0x244>)
 8002e90:	799b      	ldrb	r3, [r3, #6]
 8002e92:	b25a      	sxtb	r2, r3
 8002e94:	4b6b      	ldr	r3, [pc, #428]	; (8003044 <CANTX_BattProtection+0x260>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <CANTX_BattProtection+0x244>)
 8002eaa:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8002eac:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <CANTX_BattProtection+0x244>)
 8002eae:	799b      	ldrb	r3, [r3, #6]
 8002eb0:	b25a      	sxtb	r2, r3
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <CANTX_BattProtection+0x25c>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	015b      	lsls	r3, r3, #5
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	b25b      	sxtb	r3, r3
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b58      	ldr	r3, [pc, #352]	; (8003028 <CANTX_BattProtection+0x244>)
 8002ec8:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 8002eca:	4b57      	ldr	r3, [pc, #348]	; (8003028 <CANTX_BattProtection+0x244>)
 8002ecc:	799b      	ldrb	r3, [r3, #6]
 8002ece:	b25a      	sxtb	r2, r3
 8002ed0:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <CANTX_BattProtection+0x260>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	b25b      	sxtb	r3, r3
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <CANTX_BattProtection+0x244>)
 8002ee6:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |=  (flag_trip_undervoltage&0x01)<<7;
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <CANTX_BattProtection+0x244>)
 8002eea:	799b      	ldrb	r3, [r3, #6]
 8002eec:	b25a      	sxtb	r2, r3
 8002eee:	4b56      	ldr	r3, [pc, #344]	; (8003048 <CANTX_BattProtection+0x264>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	01db      	lsls	r3, r3, #7
 8002ef4:	b25b      	sxtb	r3, r3
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	b25b      	sxtb	r3, r3
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <CANTX_BattProtection+0x244>)
 8002efe:	719a      	strb	r2, [r3, #6]

	Tx_data[7] = (flag_trip_overvoltage&0x01);
 8002f00:	4b52      	ldr	r3, [pc, #328]	; (800304c <CANTX_BattProtection+0x268>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f0c:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<1;
 8002f0e:	4b46      	ldr	r3, [pc, #280]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f10:	79db      	ldrb	r3, [r3, #7]
 8002f12:	b25a      	sxtb	r2, r3
 8002f14:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <CANTX_BattProtection+0x26c>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	b25b      	sxtb	r3, r3
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	b25b      	sxtb	r3, r3
 8002f22:	4313      	orrs	r3, r2
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f2a:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_unbalance&0x01)<<2;
 8002f2c:	4b3e      	ldr	r3, [pc, #248]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f2e:	79db      	ldrb	r3, [r3, #7]
 8002f30:	b25a      	sxtb	r2, r3
 8002f32:	4b48      	ldr	r3, [pc, #288]	; (8003054 <CANTX_BattProtection+0x270>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	b25b      	sxtb	r3, r3
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	b25b      	sxtb	r3, r3
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b38      	ldr	r3, [pc, #224]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f48:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f4c:	79db      	ldrb	r3, [r3, #7]
 8002f4e:	b25a      	sxtb	r2, r3
 8002f50:	4b41      	ldr	r3, [pc, #260]	; (8003058 <CANTX_BattProtection+0x274>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b30      	ldr	r3, [pc, #192]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f66:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (charge_state&0x01)<<4;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f6a:	79db      	ldrb	r3, [r3, #7]
 8002f6c:	b25a      	sxtb	r2, r3
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <CANTX_BattProtection+0x278>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	b25b      	sxtb	r3, r3
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	b25b      	sxtb	r3, r3
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4b29      	ldr	r3, [pc, #164]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f84:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (discharge_state&0x01)<<5;
 8002f86:	4b28      	ldr	r3, [pc, #160]	; (8003028 <CANTX_BattProtection+0x244>)
 8002f88:	79db      	ldrb	r3, [r3, #7]
 8002f8a:	b25a      	sxtb	r2, r3
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <CANTX_BattProtection+0x27c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	015b      	lsls	r3, r3, #5
 8002f92:	b25b      	sxtb	r3, r3
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	4b21      	ldr	r3, [pc, #132]	; (8003028 <CANTX_BattProtection+0x244>)
 8002fa2:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (sleep_state&0x01)<<6;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	; (8003028 <CANTX_BattProtection+0x244>)
 8002fa6:	79db      	ldrb	r3, [r3, #7]
 8002fa8:	b25a      	sxtb	r2, r3
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <CANTX_BattProtection+0x280>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	019b      	lsls	r3, r3, #6
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <CANTX_BattProtection+0x244>)
 8002fc0:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <CANTX_BattProtection+0x238>)
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002fc8:	e00f      	b.n	8002fea <CANTX_BattProtection+0x206>
		if(delay_mailboxcheck > 1000){
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd0:	dd08      	ble.n	8002fe4 <CANTX_BattProtection+0x200>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <CANTX_BattProtection+0x284>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4824      	ldr	r0, [pc, #144]	; (800306c <CANTX_BattProtection+0x288>)
 8002fda:	f005 fa4a 	bl	8008472 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
			break;
 8002fe2:	e008      	b.n	8002ff6 <CANTX_BattProtection+0x212>
		}
		delay_mailboxcheck++;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002fea:	4820      	ldr	r0, [pc, #128]	; (800306c <CANTX_BattProtection+0x288>)
 8002fec:	f005 fa85 	bl	80084fa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0e9      	beq.n	8002fca <CANTX_BattProtection+0x1e6>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <CANTX_BattProtection+0x284>)
 8002ff8:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <CANTX_BattProtection+0x244>)
 8002ffa:	4908      	ldr	r1, [pc, #32]	; (800301c <CANTX_BattProtection+0x238>)
 8002ffc:	481b      	ldr	r0, [pc, #108]	; (800306c <CANTX_BattProtection+0x288>)
 8002ffe:	f005 f95e 	bl	80082be <HAL_CAN_AddTxMessage>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <CANTX_BattProtection+0x232>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8003008:	4b17      	ldr	r3, [pc, #92]	; (8003068 <CANTX_BattProtection+0x284>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	4817      	ldr	r0, [pc, #92]	; (800306c <CANTX_BattProtection+0x288>)
 8003010:	f005 fa2f 	bl	8008472 <HAL_CAN_AbortTxRequest>
		return;
 8003014:	bf00      	nop
//		Error_Handler();
	}
}
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	200009a0 	.word	0x200009a0
 8003020:	0b100a22 	.word	0x0b100a22
 8003024:	200009bc 	.word	0x200009bc
 8003028:	200008dc 	.word	0x200008dc
 800302c:	200008d0 	.word	0x200008d0
 8003030:	20000918 	.word	0x20000918
 8003034:	20000728 	.word	0x20000728
 8003038:	20000746 	.word	0x20000746
 800303c:	20000673 	.word	0x20000673
 8003040:	20000690 	.word	0x20000690
 8003044:	20000714 	.word	0x20000714
 8003048:	20000715 	.word	0x20000715
 800304c:	2000079c 	.word	0x2000079c
 8003050:	2000074c 	.word	0x2000074c
 8003054:	20000670 	.word	0x20000670
 8003058:	2000067c 	.word	0x2000067c
 800305c:	2000075c 	.word	0x2000075c
 8003060:	2000069c 	.word	0x2000069c
 8003064:	200007a4 	.word	0x200007a4
 8003068:	20000990 	.word	0x20000990
 800306c:	200008e4 	.word	0x200008e4

08003070 <CANTX_ReportToCharger>:

void CANTX_ReportToCharger() {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
	// *********************** CHARGING CAN COMMUNICATION ******************************
	int delay_mailboxcheck;
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8003076:	4b30      	ldr	r3, [pc, #192]	; (8003138 <CANTX_ReportToCharger+0xc8>)
 8003078:	2204      	movs	r2, #4
 800307a:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code);
 800307c:	4b2e      	ldr	r3, [pc, #184]	; (8003138 <CANTX_ReportToCharger+0xc8>)
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <CANTX_ReportToCharger+0xcc>)
 8003080:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = max_chargevoltage.m_bytes[0];
 8003082:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <CANTX_ReportToCharger+0xd0>)
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 8003088:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = max_chargevoltage.m_bytes[1];
 800308a:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <CANTX_ReportToCharger+0xd0>)
 800308c:	785a      	ldrb	r2, [r3, #1]
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 8003090:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = max_chargecurrent.m_bytes[0];
 8003092:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <CANTX_ReportToCharger+0xd8>)
 8003094:	781a      	ldrb	r2, [r3, #0]
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 8003098:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = max_chargecurrent.m_bytes[1];
 800309a:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <CANTX_ReportToCharger+0xd8>)
 800309c:	785a      	ldrb	r2, [r3, #1]
 800309e:	4b29      	ldr	r3, [pc, #164]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 80030a0:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = charge_state;
 80030a2:	4b2a      	ldr	r3, [pc, #168]	; (800314c <CANTX_ReportToCharger+0xdc>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 80030a8:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = 0;
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	715a      	strb	r2, [r3, #5]

	if(BMS_mode == 0) handshake_recognition = 0x55;
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <CANTX_ReportToCharger+0xe0>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <CANTX_ReportToCharger+0x50>
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <CANTX_ReportToCharger+0xe4>)
 80030ba:	2255      	movs	r2, #85	; 0x55
 80030bc:	801a      	strh	r2, [r3, #0]
 80030be:	e006      	b.n	80030ce <CANTX_ReportToCharger+0x5e>
	else if(BMS_mode == 2) handshake_recognition = 0xAA;
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <CANTX_ReportToCharger+0xe0>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d102      	bne.n	80030ce <CANTX_ReportToCharger+0x5e>
 80030c8:	4b22      	ldr	r3, [pc, #136]	; (8003154 <CANTX_ReportToCharger+0xe4>)
 80030ca:	22aa      	movs	r2, #170	; 0xaa
 80030cc:	801a      	strh	r2, [r3, #0]

	Tx_data[6] = handshake_recognition;
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <CANTX_ReportToCharger+0xe4>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 80030d6:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 80030da:	2200      	movs	r2, #0
 80030dc:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <CANTX_ReportToCharger+0xc8>)
 80030e0:	2208      	movs	r2, #8
 80030e2:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80030e4:	e00f      	b.n	8003106 <CANTX_ReportToCharger+0x96>
		if(delay_mailboxcheck > 1000){
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ec:	dd08      	ble.n	8003100 <CANTX_ReportToCharger+0x90>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <CANTX_ReportToCharger+0xe8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4619      	mov	r1, r3
 80030f4:	4819      	ldr	r0, [pc, #100]	; (800315c <CANTX_ReportToCharger+0xec>)
 80030f6:	f005 f9bc 	bl	8008472 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
			break;
 80030fe:	e008      	b.n	8003112 <CANTX_ReportToCharger+0xa2>
		}
		delay_mailboxcheck++;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3301      	adds	r3, #1
 8003104:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8003106:	4815      	ldr	r0, [pc, #84]	; (800315c <CANTX_ReportToCharger+0xec>)
 8003108:	f005 f9f7 	bl	80084fa <HAL_CAN_GetTxMailboxesFreeLevel>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0e9      	beq.n	80030e6 <CANTX_ReportToCharger+0x76>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <CANTX_ReportToCharger+0xe8>)
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <CANTX_ReportToCharger+0xd4>)
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <CANTX_ReportToCharger+0xc8>)
 8003118:	4810      	ldr	r0, [pc, #64]	; (800315c <CANTX_ReportToCharger+0xec>)
 800311a:	f005 f8d0 	bl	80082be <HAL_CAN_AddTxMessage>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <CANTX_ReportToCharger+0xc2>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <CANTX_ReportToCharger+0xe8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	480c      	ldr	r0, [pc, #48]	; (800315c <CANTX_ReportToCharger+0xec>)
 800312c:	f005 f9a1 	bl	8008472 <HAL_CAN_AbortTxRequest>
		return;
 8003130:	bf00      	nop
//		Error_Handler();
	}
}
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200009a0 	.word	0x200009a0
 800313c:	0e000a22 	.word	0x0e000a22
 8003140:	200009b8 	.word	0x200009b8
 8003144:	200008dc 	.word	0x200008dc
 8003148:	200008d4 	.word	0x200008d4
 800314c:	2000075c 	.word	0x2000075c
 8003150:	20000794 	.word	0x20000794
 8003154:	200008c8 	.word	0x200008c8
 8003158:	20000990 	.word	0x20000990
 800315c:	200008e4 	.word	0x200008e4

08003160 <CANTX_BattId>:

void CANTX_BattId() {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <CANTX_BattId+0x9c>)
 8003168:	2204      	movs	r2, #4
 800316a:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E1<<20|UNIQUE_Code);
 800316c:	4b23      	ldr	r3, [pc, #140]	; (80031fc <CANTX_BattId+0x9c>)
 800316e:	4a24      	ldr	r2, [pc, #144]	; (8003200 <CANTX_BattId+0xa0>)
 8003170:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = 0;
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <CANTX_BattId+0xa4>)
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = 0;
 8003178:	4b22      	ldr	r3, [pc, #136]	; (8003204 <CANTX_BattId+0xa4>)
 800317a:	2200      	movs	r2, #0
 800317c:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = 0x21;
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <CANTX_BattId+0xa4>)
 8003180:	2221      	movs	r2, #33	; 0x21
 8003182:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = 0x04;
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <CANTX_BattId+0xa4>)
 8003186:	2204      	movs	r2, #4
 8003188:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = UNIQUE_Code >> 16;
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <CANTX_BattId+0xa4>)
 800318c:	2200      	movs	r2, #0
 800318e:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = UNIQUE_Code >> 8;
 8003190:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <CANTX_BattId+0xa4>)
 8003192:	220a      	movs	r2, #10
 8003194:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = UNIQUE_Code;
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <CANTX_BattId+0xa4>)
 8003198:	2222      	movs	r2, #34	; 0x22
 800319a:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 800319c:	4b19      	ldr	r3, [pc, #100]	; (8003204 <CANTX_BattId+0xa4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <CANTX_BattId+0x9c>)
 80031a4:	2208      	movs	r2, #8
 80031a6:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80031a8:	e00f      	b.n	80031ca <CANTX_BattId+0x6a>
		if(delay_mailboxcheck > 1000){
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b0:	dd08      	ble.n	80031c4 <CANTX_BattId+0x64>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80031b2:	4b15      	ldr	r3, [pc, #84]	; (8003208 <CANTX_BattId+0xa8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4619      	mov	r1, r3
 80031b8:	4814      	ldr	r0, [pc, #80]	; (800320c <CANTX_BattId+0xac>)
 80031ba:	f005 f95a 	bl	8008472 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]
			break;
 80031c2:	e008      	b.n	80031d6 <CANTX_BattId+0x76>
		}
		delay_mailboxcheck++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3301      	adds	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80031ca:	4810      	ldr	r0, [pc, #64]	; (800320c <CANTX_BattId+0xac>)
 80031cc:	f005 f995 	bl	80084fa <HAL_CAN_GetTxMailboxesFreeLevel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0e9      	beq.n	80031aa <CANTX_BattId+0x4a>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <CANTX_BattId+0xa8>)
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <CANTX_BattId+0xa4>)
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <CANTX_BattId+0x9c>)
 80031dc:	480b      	ldr	r0, [pc, #44]	; (800320c <CANTX_BattId+0xac>)
 80031de:	f005 f86e 	bl	80082be <HAL_CAN_AddTxMessage>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <CANTX_BattId+0x96>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <CANTX_BattId+0xa8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4807      	ldr	r0, [pc, #28]	; (800320c <CANTX_BattId+0xac>)
 80031f0:	f005 f93f 	bl	8008472 <HAL_CAN_AbortTxRequest>
		return;
 80031f4:	bf00      	nop
//		Error_Handler();
	}
}
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	200009a0 	.word	0x200009a0
 8003200:	0e100a22 	.word	0x0e100a22
 8003204:	200008dc 	.word	0x200008dc
 8003208:	20000990 	.word	0x20000990
 800320c:	200008e4 	.word	0x200008e4

08003210 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data) == HAL_OK) {
 8003218:	4b60      	ldr	r3, [pc, #384]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800321a:	4a61      	ldr	r2, [pc, #388]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800321c:	2100      	movs	r1, #0
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f005 f99f 	bl	8008562 <HAL_CAN_GetRxMessage>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 80b3 	bne.w	8003392 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		if(Rx_Header.ExtId == 0x1B2){
 800322c:	4b5c      	ldr	r3, [pc, #368]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8003234:	d134      	bne.n	80032a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			flag_start_shutdown=Rx_data[0]&0x01;
 8003236:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8003242:	701a      	strb	r2, [r3, #0]
			BMS_mode=(Rx_data[0]>>1)&0x03;
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8003254:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 8003256:	4b51      	ldr	r3, [pc, #324]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800326c:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 800326e:	4b4b      	ldr	r3, [pc, #300]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8003284:	701a      	strb	r2, [r3, #0]

			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 8003286:	f004 fa07 	bl	8007698 <HAL_GetTick>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003290:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8003292:	f004 fa01 	bl	8007698 <HAL_GetTick>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	4b47      	ldr	r3, [pc, #284]	; (80033b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e06d      	b.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(((Rx_Header.ExtId & 0xFFF00000) == 0x0E300000) && (flag_get_UNIQUECODE < 3) ) {
 80032a0:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	0d1b      	lsrs	r3, r3, #20
 80032a6:	051b      	lsls	r3, r3, #20
 80032a8:	f1b3 6f63 	cmp.w	r3, #238026752	; 0xe300000
 80032ac:	d11c      	bne.n	80032e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d818      	bhi.n	80032e8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
			flag_start_shutdown = 1;
 80032b6:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
			BMS_mode = 0;
 80032bc:	4b3a      	ldr	r3, [pc, #232]	; (80033a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
			flag_get_UNIQUECODE++;
 80032c2:	4b3e      	ldr	r3, [pc, #248]	; (80033bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b3c      	ldr	r3, [pc, #240]	; (80033bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80032cc:	701a      	strb	r2, [r3, #0]
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 80032ce:	f004 f9e3 	bl	8007698 <HAL_GetTick>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80032d8:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 80032da:	f004 f9dd 	bl	8007698 <HAL_GetTick>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e049      	b.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.ExtId == (0x0E3<<20|UNIQUE_Code)){
 80032e8:	4b2d      	ldr	r3, [pc, #180]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d121      	bne.n	8003336 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
			if(Rx_data[5] == 0x55){
 80032f2:	4b2a      	ldr	r3, [pc, #168]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80032f4:	795b      	ldrb	r3, [r3, #5]
 80032f6:	2b55      	cmp	r3, #85	; 0x55
 80032f8:	d106      	bne.n	8003308 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				BMS_mode = 0;
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
				charge_state = 0;
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
 8003306:	e009      	b.n	800331c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			}
			else if(Rx_data[5] == 0xAA){
 8003308:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800330a:	795b      	ldrb	r3, [r3, #5]
 800330c:	2baa      	cmp	r3, #170	; 0xaa
 800330e:	d105      	bne.n	800331c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
				BMS_mode = 2;
 8003310:	4b25      	ldr	r3, [pc, #148]	; (80033a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8003312:	2202      	movs	r2, #2
 8003314:	701a      	strb	r2, [r3, #0]
				charge_state = 1;
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
			}
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 800331c:	f004 f9bc 	bl	8007698 <HAL_GetTick>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003326:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8003328:	f004 f9b6 	bl	8007698 <HAL_GetTick>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e022      	b.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.RTR == 2){
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d11e      	bne.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			if(Rx_Header.StdId == 0x0B4) dataRTR = 4;
 800333e:	4b18      	ldr	r3, [pc, #96]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2bb4      	cmp	r3, #180	; 0xb4
 8003344:	d103      	bne.n	800334e <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
 8003346:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003348:	2204      	movs	r2, #4
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e016      	b.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B5) dataRTR = 5;
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2bb5      	cmp	r3, #181	; 0xb5
 8003354:	d103      	bne.n	800335e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 8003356:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003358:	2205      	movs	r2, #5
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e00e      	b.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B6) dataRTR = 6;
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2bb6      	cmp	r3, #182	; 0xb6
 8003364:	d103      	bne.n	800336e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
 8003366:	4b18      	ldr	r3, [pc, #96]	; (80033c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003368:	2206      	movs	r2, #6
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e006      	b.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B7) dataRTR = 7;
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2bb7      	cmp	r3, #183	; 0xb7
 8003374:	d102      	bne.n	800337c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 8003376:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003378:	2207      	movs	r2, #7
 800337a:	701a      	strb	r2, [r3, #0]
		}

		Rx_Header.ExtId = 0;
 800337c:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800337e:	2200      	movs	r2, #0
 8003380:	605a      	str	r2, [r3, #4]
		Rx_Header.StdId = 0;
 8003382:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8003388:	2208      	movs	r2, #8
 800338a:	2100      	movs	r1, #0
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800338e:	f008 fef3 	bl	800c178 <memset>
	}
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2000090c 	.word	0x2000090c
 80033a0:	20000974 	.word	0x20000974
 80033a4:	20000691 	.word	0x20000691
 80033a8:	20000794 	.word	0x20000794
 80033ac:	200006a4 	.word	0x200006a4
 80033b0:	2000076c 	.word	0x2000076c
 80033b4:	20000748 	.word	0x20000748
 80033b8:	20000778 	.word	0x20000778
 80033bc:	20000674 	.word	0x20000674
 80033c0:	0e300a22 	.word	0x0e300a22
 80033c4:	2000075c 	.word	0x2000075c
 80033c8:	20000240 	.word	0x20000240

080033cc <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80033de:	2300      	movs	r3, #0
 80033e0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80033f6:	230e      	movs	r3, #14
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 80033fa:	463b      	mov	r3, r7
 80033fc:	4619      	mov	r1, r3
 80033fe:	4810      	ldr	r0, [pc, #64]	; (8003440 <BMS_CAN_Config+0x74>)
 8003400:	f004 fe50 	bl	80080a4 <HAL_CAN_ConfigFilter>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <BMS_CAN_Config+0x42>
 800340a:	f000 fdb9 	bl	8003f80 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 800340e:	480c      	ldr	r0, [pc, #48]	; (8003440 <BMS_CAN_Config+0x74>)
 8003410:	f004 ff11 	bl	8008236 <HAL_CAN_Start>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <BMS_CAN_Config+0x52>
 800341a:	f000 fdb1 	bl	8003f80 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800341e:	2102      	movs	r1, #2
 8003420:	4807      	ldr	r0, [pc, #28]	; (8003440 <BMS_CAN_Config+0x74>)
 8003422:	f005 f9af 	bl	8008784 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <BMS_CAN_Config+0x78>)
 8003428:	2200      	movs	r2, #0
 800342a:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <BMS_CAN_Config+0x78>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 8003432:	4b04      	ldr	r3, [pc, #16]	; (8003444 <BMS_CAN_Config+0x78>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
}
 8003438:	bf00      	nop
 800343a:	3728      	adds	r7, #40	; 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200008e4 	.word	0x200008e4
 8003444:	200009a0 	.word	0x200009a0

08003448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <MX_DMA_Init+0x38>)
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <MX_DMA_Init+0x38>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6153      	str	r3, [r2, #20]
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <MX_DMA_Init+0x38>)
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	200b      	movs	r0, #11
 800346c:	f005 fca9 	bl	8008dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003470:	200b      	movs	r0, #11
 8003472:	f005 fcc2 	bl	8008dfa <HAL_NVIC_EnableIRQ>

}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000

08003484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348a:	f107 0310 	add.w	r3, r7, #16
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <MX_GPIO_Init+0x118>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	4a3f      	ldr	r2, [pc, #252]	; (800359c <MX_GPIO_Init+0x118>)
 800349e:	f043 0310 	orr.w	r3, r3, #16
 80034a2:	6193      	str	r3, [r2, #24]
 80034a4:	4b3d      	ldr	r3, [pc, #244]	; (800359c <MX_GPIO_Init+0x118>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b0:	4b3a      	ldr	r3, [pc, #232]	; (800359c <MX_GPIO_Init+0x118>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4a39      	ldr	r2, [pc, #228]	; (800359c <MX_GPIO_Init+0x118>)
 80034b6:	f043 0304 	orr.w	r3, r3, #4
 80034ba:	6193      	str	r3, [r2, #24]
 80034bc:	4b37      	ldr	r3, [pc, #220]	; (800359c <MX_GPIO_Init+0x118>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <MX_GPIO_Init+0x118>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4a33      	ldr	r2, [pc, #204]	; (800359c <MX_GPIO_Init+0x118>)
 80034ce:	f043 0308 	orr.w	r3, r3, #8
 80034d2:	6193      	str	r3, [r2, #24]
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <MX_GPIO_Init+0x118>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|BMS_SHUTDOWN_Pin|EEPROM_WP_Pin|LED_Pin
 80034e0:	2200      	movs	r2, #0
 80034e2:	f243 0162 	movw	r1, #12386	; 0x3062
 80034e6:	482e      	ldr	r0, [pc, #184]	; (80035a0 <MX_GPIO_Init+0x11c>)
 80034e8:	f006 f98d 	bl	8009806 <HAL_GPIO_WritePin>
                          |CSBI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 80034ec:	2200      	movs	r2, #0
 80034ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034f2:	482c      	ldr	r0, [pc, #176]	; (80035a4 <MX_GPIO_Init+0x120>)
 80034f4:	f006 f987 	bl	8009806 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCK_Pin|SDO_Pin|SDI_Pin, GPIO_PIN_RESET);
 80034f8:	2200      	movs	r2, #0
 80034fa:	2138      	movs	r1, #56	; 0x38
 80034fc:	482a      	ldr	r0, [pc, #168]	; (80035a8 <MX_GPIO_Init+0x124>)
 80034fe:	f006 f982 	bl	8009806 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BMS_SHUTDOWN_Pin;
 8003502:	f242 0302 	movw	r3, #8194	; 0x2002
 8003506:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003508:	2301      	movs	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800350c:	2302      	movs	r3, #2
 800350e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2302      	movs	r3, #2
 8003512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	4619      	mov	r1, r3
 800351a:	4821      	ldr	r0, [pc, #132]	; (80035a0 <MX_GPIO_Init+0x11c>)
 800351c:	f005 ffc8 	bl	80094b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EEPROM_WP_Pin|LED_Pin|CSBI_Pin;
 8003520:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8003524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003526:	2301      	movs	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2302      	movs	r3, #2
 8003530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003532:	f107 0310 	add.w	r3, r7, #16
 8003536:	4619      	mov	r1, r3
 8003538:	4819      	ldr	r0, [pc, #100]	; (80035a0 <MX_GPIO_Init+0x11c>)
 800353a:	f005 ffb9 	bl	80094b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GATE_MOS_Pin;
 800353e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003544:	2301      	movs	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2302      	movs	r3, #2
 800354e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GATE_MOS_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	4619      	mov	r1, r3
 8003556:	4813      	ldr	r0, [pc, #76]	; (80035a4 <MX_GPIO_Init+0x120>)
 8003558:	f005 ffaa 	bl	80094b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800355c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356a:	f107 0310 	add.w	r3, r7, #16
 800356e:	4619      	mov	r1, r3
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <MX_GPIO_Init+0x120>)
 8003572:	f005 ff9d 	bl	80094b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8003576:	2338      	movs	r3, #56	; 0x38
 8003578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800357a:	2301      	movs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003582:	2302      	movs	r3, #2
 8003584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	4619      	mov	r1, r3
 800358c:	4806      	ldr	r0, [pc, #24]	; (80035a8 <MX_GPIO_Init+0x124>)
 800358e:	f005 ff8f 	bl	80094b0 <HAL_GPIO_Init>

}
 8003592:	bf00      	nop
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	40011000 	.word	0x40011000
 80035a4:	40010800 	.word	0x40010800
 80035a8:	40010c00 	.word	0x40010c00

080035ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <MX_I2C1_Init+0x50>)
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <MX_I2C1_Init+0x54>)
 80035b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <MX_I2C1_Init+0x50>)
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <MX_I2C1_Init+0x58>)
 80035ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <MX_I2C1_Init+0x50>)
 80035be:	2200      	movs	r2, #0
 80035c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <MX_I2C1_Init+0x50>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <MX_I2C1_Init+0x50>)
 80035ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <MX_I2C1_Init+0x50>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <MX_I2C1_Init+0x50>)
 80035d8:	2200      	movs	r2, #0
 80035da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <MX_I2C1_Init+0x50>)
 80035de:	2200      	movs	r2, #0
 80035e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <MX_I2C1_Init+0x50>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80035e8:	4804      	ldr	r0, [pc, #16]	; (80035fc <MX_I2C1_Init+0x50>)
 80035ea:	f006 f93d 	bl	8009868 <HAL_I2C_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035f4:	f000 fcc4 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200009c8 	.word	0x200009c8
 8003600:	40005400 	.word	0x40005400
 8003604:	00061a80 	.word	0x00061a80

08003608 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <MX_I2C2_Init+0x50>)
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <MX_I2C2_Init+0x54>)
 8003610:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <MX_I2C2_Init+0x50>)
 8003614:	4a12      	ldr	r2, [pc, #72]	; (8003660 <MX_I2C2_Init+0x58>)
 8003616:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003618:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <MX_I2C2_Init+0x50>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800361e:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <MX_I2C2_Init+0x50>)
 8003620:	2200      	movs	r2, #0
 8003622:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <MX_I2C2_Init+0x50>)
 8003626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800362a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <MX_I2C2_Init+0x50>)
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <MX_I2C2_Init+0x50>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <MX_I2C2_Init+0x50>)
 800363a:	2200      	movs	r2, #0
 800363c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <MX_I2C2_Init+0x50>)
 8003640:	2200      	movs	r2, #0
 8003642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003644:	4804      	ldr	r0, [pc, #16]	; (8003658 <MX_I2C2_Init+0x50>)
 8003646:	f006 f90f 	bl	8009868 <HAL_I2C_Init>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003650:	f000 fc96 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20000a1c 	.word	0x20000a1c
 800365c:	40005800 	.word	0x40005800
 8003660:	000186a0 	.word	0x000186a0

08003664 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 0318 	add.w	r3, r7, #24
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_I2C_MspInit+0xc8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d124      	bne.n	80036ce <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003684:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 800368a:	f043 0308 	orr.w	r3, r3, #8
 800368e:	6193      	str	r3, [r2, #24]
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800369c:	23c0      	movs	r3, #192	; 0xc0
 800369e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a0:	2312      	movs	r3, #18
 80036a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a8:	f107 0318 	add.w	r3, r7, #24
 80036ac:	4619      	mov	r1, r3
 80036ae:	4821      	ldr	r0, [pc, #132]	; (8003734 <HAL_I2C_MspInit+0xd0>)
 80036b0:	f005 fefe 	bl	80094b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036b4:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 80036ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036be:	61d3      	str	r3, [r2, #28]
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80036cc:	e029      	b.n	8003722 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_I2C_MspInit+0xd4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d124      	bne.n	8003722 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 80036de:	f043 0308 	orr.w	r3, r3, #8
 80036e2:	6193      	str	r3, [r2, #24]
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80036f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f6:	2312      	movs	r3, #18
 80036f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036fa:	2303      	movs	r3, #3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fe:	f107 0318 	add.w	r3, r7, #24
 8003702:	4619      	mov	r1, r3
 8003704:	480b      	ldr	r0, [pc, #44]	; (8003734 <HAL_I2C_MspInit+0xd0>)
 8003706:	f005 fed3 	bl	80094b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4a08      	ldr	r2, [pc, #32]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 8003710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003714:	61d3      	str	r3, [r2, #28]
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <HAL_I2C_MspInit+0xcc>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
}
 8003722:	bf00      	nop
 8003724:	3728      	adds	r7, #40	; 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40005400 	.word	0x40005400
 8003730:	40021000 	.word	0x40021000
 8003734:	40010c00 	.word	0x40010c00
 8003738:	40005800 	.word	0x40005800

0800373c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <MX_IWDG_Init+0x2c>)
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <MX_IWDG_Init+0x30>)
 8003744:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <MX_IWDG_Init+0x2c>)
 8003748:	2206      	movs	r2, #6
 800374a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_IWDG_Init+0x2c>)
 800374e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003752:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003754:	4804      	ldr	r0, [pc, #16]	; (8003768 <MX_IWDG_Init+0x2c>)
 8003756:	f007 fb35 	bl	800adc4 <HAL_IWDG_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003760:	f000 fc0e 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003764:	bf00      	nop
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000a70 	.word	0x20000a70
 800376c:	40003000 	.word	0x40003000

08003770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003774:	f003 ff38 	bl	80075e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003778:	f000 f87a 	bl	8003870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800377c:	f7ff fe82 	bl	8003484 <MX_GPIO_Init>
  MX_DMA_Init();
 8003780:	f7ff fe62 	bl	8003448 <MX_DMA_Init>
  MX_ADC1_Init();
 8003784:	f7ff f832 	bl	80027ec <MX_ADC1_Init>
  MX_CAN_Init();
 8003788:	f7ff f944 	bl	8002a14 <MX_CAN_Init>
  MX_I2C1_Init();
 800378c:	f7ff ff0e 	bl	80035ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8003790:	f003 fe28 	bl	80073e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003794:	f003 fe74 	bl	8007480 <MX_TIM3_Init>
  MX_I2C2_Init();
 8003798:	f7ff ff36 	bl	8003608 <MX_I2C2_Init>
  MX_IWDG_Init();
 800379c:	f7ff ffce 	bl	800373c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  BMS_Init();
 80037a0:	f000 f8c2 	bl	8003928 <BMS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read voltage per-cell and total voltage
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 80037a4:	2200      	movs	r2, #0
 80037a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037aa:	4827      	ldr	r0, [pc, #156]	; (8003848 <main+0xd8>)
 80037ac:	f006 f82b 	bl	8009806 <HAL_GPIO_WritePin>
	  read_voltage_percell();
 80037b0:	f7fe fe6e 	bl	8002490 <read_voltage_percell>
	  read_sumvoltage();
 80037b4:	f7fe fed0 	bl	8002558 <read_sumvoltage>
//		  pack_voltage += cellvoltage_float[ij];
//	  }
//	  sum_voltage = pack_voltage;
//	  pack_voltage = 0;

	  ltc6804_CS_SET(ltc6804_CS_PIN);
 80037b8:	2201      	movs	r2, #1
 80037ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037be:	4822      	ldr	r0, [pc, #136]	; (8003848 <main+0xd8>)
 80037c0:	f006 f821 	bl	8009806 <HAL_GPIO_WritePin>

	  //comparing cell voltage to get
	  unbalance_cell = get_balance_status(cellvoltage_float);
 80037c4:	4821      	ldr	r0, [pc, #132]	; (800384c <main+0xdc>)
 80037c6:	f7fe ff0b 	bl	80025e0 <get_balance_status>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <main+0xe0>)
 80037d0:	801a      	strh	r2, [r3, #0]

	  // Balancing Process
	  if(BMS_mode == 2 && IBATT < -0.1 && (VBATT > VBATT_BALANCE_START))     //arus charging 0.1 tidak perlu di balancing
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <main+0xe4>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d11b      	bne.n	8003812 <main+0xa2>
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <main+0xe8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fc fe8e 	bl	8000500 <__aeabi_f2d>
 80037e4:	a316      	add	r3, pc, #88	; (adr r3, 8003840 <main+0xd0>)
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f7fd f953 	bl	8000a94 <__aeabi_dcmplt>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <main+0xa2>
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <main+0xec>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4919      	ldr	r1, [pc, #100]	; (8003860 <main+0xf0>)
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fd fcea 	bl	80011d4 <__aeabi_fcmpgt>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <main+0xa2>
	  {
		  LTC681x_balance_cell(balance_status);
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <main+0xf4>)
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe ff9a 	bl	8002744 <LTC681x_balance_cell>
 8003810:	e005      	b.n	800381e <main+0xae>
	  }
	  else
	  {
		  balance_status = 0;
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <main+0xf4>)
 8003814:	2200      	movs	r2, #0
 8003816:	801a      	strh	r2, [r3, #0]
		  LTC681x_balance_cell(0);
 8003818:	2000      	movs	r0, #0
 800381a:	f7fe ff93 	bl	8002744 <LTC681x_balance_cell>
	  }

	  //Force Balancing
	  //LTC681x_balance_cell(1 s/d 512);

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800381e:	2140      	movs	r1, #64	; 0x40
 8003820:	4809      	ldr	r0, [pc, #36]	; (8003848 <main+0xd8>)
 8003822:	f006 f808 	bl	8009836 <HAL_GPIO_TogglePin>

//	  //test turn off system
//	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
//		  HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);

	  BMS_ScreenMode_RUN();
 8003826:	f000 f94d 	bl	8003ac4 <BMS_ScreenMode_RUN>
	  HAL_IWDG_Refresh(&hiwdg);
 800382a:	480f      	ldr	r0, [pc, #60]	; (8003868 <main+0xf8>)
 800382c:	f007 fb0c 	bl	800ae48 <HAL_IWDG_Refresh>
	  test++;
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <main+0xfc>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	4a0d      	ldr	r2, [pc, #52]	; (800386c <main+0xfc>)
 8003838:	6013      	str	r3, [r2, #0]
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 800383a:	e7b3      	b.n	80037a4 <main+0x34>
 800383c:	f3af 8000 	nop.w
 8003840:	9999999a 	.word	0x9999999a
 8003844:	bfb99999 	.word	0xbfb99999
 8003848:	40011000 	.word	0x40011000
 800384c:	200007e8 	.word	0x200007e8
 8003850:	200006a6 	.word	0x200006a6
 8003854:	20000794 	.word	0x20000794
 8003858:	2000070c 	.word	0x2000070c
 800385c:	20000694 	.word	0x20000694
 8003860:	42040000 	.word	0x42040000
 8003864:	20000744 	.word	0x20000744
 8003868:	20000a70 	.word	0x20000a70
 800386c:	20000aa0 	.word	0x20000aa0

08003870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b096      	sub	sp, #88	; 0x58
 8003874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800387a:	2228      	movs	r2, #40	; 0x28
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f008 fc7a 	bl	800c178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003884:	f107 031c 	add.w	r3, r7, #28
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	611a      	str	r2, [r3, #16]
 80038a2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80038a4:	230a      	movs	r3, #10
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038a8:	2301      	movs	r3, #1
 80038aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038ac:	2310      	movs	r3, #16
 80038ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80038b0:	2301      	movs	r3, #1
 80038b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038b4:	2302      	movs	r3, #2
 80038b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80038b8:	2300      	movs	r3, #0
 80038ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80038bc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80038c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038c6:	4618      	mov	r0, r3
 80038c8:	f007 face 	bl	800ae68 <HAL_RCC_OscConfig>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80038d2:	f000 fb55 	bl	8003f80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038d6:	230f      	movs	r3, #15
 80038d8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038da:	2302      	movs	r3, #2
 80038dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038e8:	2300      	movs	r3, #0
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038ec:	f107 031c 	add.w	r3, r7, #28
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f007 fd38 	bl	800b368 <HAL_RCC_ClockConfig>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80038fe:	f000 fb3f 	bl	8003f80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003902:	2302      	movs	r3, #2
 8003904:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f007 feb0 	bl	800b674 <HAL_RCCEx_PeriphCLKConfig>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800391a:	f000 fb31 	bl	8003f80 <Error_Handler>
  }
}
 800391e:	bf00      	nop
 8003920:	3758      	adds	r7, #88	; 0x58
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <BMS_Init>:

/* USER CODE BEGIN 4 */
void BMS_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 800392e:	2210      	movs	r2, #16
 8003930:	4956      	ldr	r1, [pc, #344]	; (8003a8c <BMS_Init+0x164>)
 8003932:	f640 2022 	movw	r0, #2594	; 0xa22
 8003936:	f008 fc0d 	bl	800c154 <itoa>
	int ii=0;
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
	while(ii<6){
 800393e:	e01a      	b.n	8003976 <BMS_Init+0x4e>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8003940:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <BMS_Init+0x164>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	70fb      	strb	r3, [r7, #3]
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	3301      	adds	r3, #1
 800394e:	4a50      	ldr	r2, [pc, #320]	; (8003a90 <BMS_Init+0x168>)
 8003950:	4413      	add	r3, r2
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d102      	bne.n	8003962 <BMS_Init+0x3a>
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	3b20      	subs	r3, #32
 8003960:	e000      	b.n	8003964 <BMS_Init+0x3c>
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	b2d9      	uxtb	r1, r3
 8003966:	4a4b      	ldr	r2, [pc, #300]	; (8003a94 <BMS_Init+0x16c>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4413      	add	r3, r2
 800396c:	460a      	mov	r2, r1
 800396e:	701a      	strb	r2, [r3, #0]
		ii++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3301      	adds	r3, #1
 8003974:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b05      	cmp	r3, #5
 800397a:	dde1      	ble.n	8003940 <BMS_Init+0x18>
	}

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800397c:	2201      	movs	r2, #1
 800397e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003982:	4845      	ldr	r0, [pc, #276]	; (8003a98 <BMS_Init+0x170>)
 8003984:	f005 ff3f 	bl	8009806 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003988:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800398c:	f003 fe8e 	bl	80076ac <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003990:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003994:	4840      	ldr	r0, [pc, #256]	; (8003a98 <BMS_Init+0x170>)
 8003996:	f005 ff4e 	bl	8009836 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800399a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800399e:	f003 fe85 	bl	80076ac <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80039a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039a6:	483c      	ldr	r0, [pc, #240]	; (8003a98 <BMS_Init+0x170>)
 80039a8:	f005 ff45 	bl	8009836 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80039ac:	2064      	movs	r0, #100	; 0x64
 80039ae:	f003 fe7d 	bl	80076ac <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80039b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039b6:	4838      	ldr	r0, [pc, #224]	; (8003a98 <BMS_Init+0x170>)
 80039b8:	f005 ff3d 	bl	8009836 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80039bc:	2064      	movs	r0, #100	; 0x64
 80039be:	f003 fe75 	bl	80076ac <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80039c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c6:	4834      	ldr	r0, [pc, #208]	; (8003a98 <BMS_Init+0x170>)
 80039c8:	f005 ff35 	bl	8009836 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80039cc:	2064      	movs	r0, #100	; 0x64
 80039ce:	f003 fe6d 	bl	80076ac <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80039d2:	2200      	movs	r2, #0
 80039d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039d8:	482f      	ldr	r0, [pc, #188]	; (8003a98 <BMS_Init+0x170>)
 80039da:	f005 ff14 	bl	8009806 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80039de:	2064      	movs	r0, #100	; 0x64
 80039e0:	f003 fe64 	bl	80076ac <HAL_Delay>

	SSD1306_Init();
 80039e4:	f000 fad2 	bl	8003f8c <SSD1306_Init>
	HAL_Delay(500);
 80039e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039ec:	f003 fe5e 	bl	80076ac <HAL_Delay>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f000 fbb7 	bl	8004164 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80039f6:	f000 fb87 	bl	8004108 <SSD1306_UpdateScreen>

	SSD1306_GotoXY (30,10);
 80039fa:	210a      	movs	r1, #10
 80039fc:	201e      	movs	r0, #30
 80039fe:	f000 fc27 	bl	8004250 <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I BMS", &Font_7x10, 1);
 8003a02:	2201      	movs	r2, #1
 8003a04:	4925      	ldr	r1, [pc, #148]	; (8003a9c <BMS_Init+0x174>)
 8003a06:	4826      	ldr	r0, [pc, #152]	; (8003aa0 <BMS_Init+0x178>)
 8003a08:	f000 fcb8 	bl	800437c <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8003a0c:	211e      	movs	r1, #30
 8003a0e:	2028      	movs	r0, #40	; 0x28
 8003a10:	f000 fc1e 	bl	8004250 <SSD1306_GotoXY>
	SSD1306_Puts ("10S13P", &Font_7x10, 1);
 8003a14:	2201      	movs	r2, #1
 8003a16:	4921      	ldr	r1, [pc, #132]	; (8003a9c <BMS_Init+0x174>)
 8003a18:	4822      	ldr	r0, [pc, #136]	; (8003aa4 <BMS_Init+0x17c>)
 8003a1a:	f000 fcaf 	bl	800437c <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8003a1e:	f000 fb73 	bl	8004108 <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 8003a22:	2000      	movs	r0, #0
 8003a24:	f000 fb9e 	bl	8004164 <SSD1306_Fill>


	ltc6804_GPIO_Config();
 8003a28:	f7fd ffde 	bl	80019e8 <ltc6804_GPIO_Config>
	ltc6804_SPIInit();
 8003a2c:	f7fe f83a 	bl	8001aa4 <ltc6804_SPIInit>

	set_adc(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL); //ADC Setting
 8003a30:	2300      	movs	r3, #0
 8003a32:	2200      	movs	r2, #0
 8003a34:	2100      	movs	r1, #0
 8003a36:	2003      	movs	r0, #3
 8003a38:	f7fe f92e 	bl	8001c98 <set_adc>
	HAL_Delay(10);
 8003a3c:	200a      	movs	r0, #10
 8003a3e:	f003 fe35 	bl	80076ac <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_value, 7);
 8003a42:	2207      	movs	r2, #7
 8003a44:	4918      	ldr	r1, [pc, #96]	; (8003aa8 <BMS_Init+0x180>)
 8003a46:	4819      	ldr	r0, [pc, #100]	; (8003aac <BMS_Init+0x184>)
 8003a48:	f003 ff3e 	bl	80078c8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8003a4c:	4818      	ldr	r0, [pc, #96]	; (8003ab0 <BMS_Init+0x188>)
 8003a4e:	f007 ff17 	bl	800b880 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8003a52:	4818      	ldr	r0, [pc, #96]	; (8003ab4 <BMS_Init+0x18c>)
 8003a54:	f007 ff14 	bl	800b880 <HAL_TIM_Base_Start_IT>

	BATT_State=STATE_STANDBY;
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <BMS_Init+0x190>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8003a5e:	f7fd fd6d 	bl	800153c <Batt_Open_Mode>
	BATT_Start_Up = 1;
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <BMS_Init+0x194>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
	flag_start_shutdown = 0;
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <BMS_Init+0x198>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8003a6e:	2032      	movs	r0, #50	; 0x32
 8003a70:	f003 fe1c 	bl	80076ac <HAL_Delay>
	EEPROM_isDeviceReady(0xA0);
 8003a74:	20a0      	movs	r0, #160	; 0xa0
 8003a76:	f7fd ff5f 	bl	8001938 <EEPROM_isDeviceReady>
	BMS_CAN_Config();
 8003a7a:	f7ff fca7 	bl	80033cc <BMS_CAN_Config>
	HAL_Delay(100);
 8003a7e:	2064      	movs	r0, #100	; 0x64
 8003a80:	f003 fe14 	bl	80076ac <HAL_Delay>
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000a98 	.word	0x20000a98
 8003a90:	08011a74 	.word	0x08011a74
 8003a94:	20000a90 	.word	0x20000a90
 8003a98:	40011000 	.word	0x40011000
 8003a9c:	20000004 	.word	0x20000004
 8003aa0:	08010e08 	.word	0x08010e08
 8003aa4:	08010e14 	.word	0x08010e14
 8003aa8:	200006fc 	.word	0x200006fc
 8003aac:	20000854 	.word	0x20000854
 8003ab0:	20000ccc 	.word	0x20000ccc
 8003ab4:	20000c84 	.word	0x20000c84
 8003ab8:	20000aa4 	.word	0x20000aa4
 8003abc:	20000241 	.word	0x20000241
 8003ac0:	20000691 	.word	0x20000691

08003ac4 <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af06      	add	r7, sp, #24
	if(flag_start_shutdown == 0)
 8003acc:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <BMS_ScreenMode_RUN+0x1bc>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 8099 	bne.w	8003c08 <BMS_ScreenMode_RUN+0x144>
	{

		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f000 fb44 	bl	8004164 <SSD1306_Fill>
		sprintf(buff_lcd,"RUNNING");
 8003adc:	4969      	ldr	r1, [pc, #420]	; (8003c84 <BMS_ScreenMode_RUN+0x1c0>)
 8003ade:	486a      	ldr	r0, [pc, #424]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003ae0:	f009 fa7e 	bl	800cfe0 <siprintf>
		SSD1306_GotoXY(40,18);
 8003ae4:	2112      	movs	r1, #18
 8003ae6:	2028      	movs	r0, #40	; 0x28
 8003ae8:	f000 fbb2 	bl	8004250 <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003aec:	2201      	movs	r2, #1
 8003aee:	4967      	ldr	r1, [pc, #412]	; (8003c8c <BMS_ScreenMode_RUN+0x1c8>)
 8003af0:	4865      	ldr	r0, [pc, #404]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003af2:	f000 fc43 	bl	800437c <SSD1306_Puts>

		sprintf(buff_lcd,"SLEEP_STATE");
 8003af6:	4966      	ldr	r1, [pc, #408]	; (8003c90 <BMS_ScreenMode_RUN+0x1cc>)
 8003af8:	4863      	ldr	r0, [pc, #396]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003afa:	f009 fa71 	bl	800cfe0 <siprintf>
		SSD1306_GotoXY(25,38);
 8003afe:	2126      	movs	r1, #38	; 0x26
 8003b00:	2019      	movs	r0, #25
 8003b02:	f000 fba5 	bl	8004250 <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003b06:	2201      	movs	r2, #1
 8003b08:	4960      	ldr	r1, [pc, #384]	; (8003c8c <BMS_ScreenMode_RUN+0x1c8>)
 8003b0a:	485f      	ldr	r0, [pc, #380]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003b0c:	f000 fc36 	bl	800437c <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8003b10:	f000 fafa 	bl	8004108 <SSD1306_UpdateScreen>


		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8003b14:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <BMS_ScreenMode_RUN+0x1d0>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5f      	ldr	r2, [pc, #380]	; (8003c98 <BMS_ScreenMode_RUN+0x1d4>)
 8003b1a:	6013      	str	r3, [r2, #0]
		Batt_Open_Mode();
 8003b1c:	f7fd fd0e 	bl	800153c <Batt_Open_Mode>

		flag_trip_overtemperature=OFF;
 8003b20:	4b5e      	ldr	r3, [pc, #376]	; (8003c9c <BMS_ScreenMode_RUN+0x1d8>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
		flag_trip_undertemperature=OFF;
 8003b26:	4b5e      	ldr	r3, [pc, #376]	; (8003ca0 <BMS_ScreenMode_RUN+0x1dc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverDischarge=OFF;
 8003b2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ca4 <BMS_ScreenMode_RUN+0x1e0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8003b32:	4b5d      	ldr	r3, [pc, #372]	; (8003ca8 <BMS_ScreenMode_RUN+0x1e4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
		flag_trip_undervoltage=OFF;
 8003b38:	4b5c      	ldr	r3, [pc, #368]	; (8003cac <BMS_ScreenMode_RUN+0x1e8>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=OFF;
 8003b3e:	4b5c      	ldr	r3, [pc, #368]	; (8003cb0 <BMS_ScreenMode_RUN+0x1ec>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentdischarge=OFF;
 8003b44:	4b5b      	ldr	r3, [pc, #364]	; (8003cb4 <BMS_ScreenMode_RUN+0x1f0>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentcharge=OFF;
 8003b4a:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <BMS_ScreenMode_RUN+0x1f4>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
		flag_trip_shortcircuit=OFF;
 8003b50:	4b5a      	ldr	r3, [pc, #360]	; (8003cbc <BMS_ScreenMode_RUN+0x1f8>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
		flag_trip_systemfailure=OFF;
 8003b56:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <BMS_ScreenMode_RUN+0x1fc>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
		flag_trip_unbalance=OFF;
 8003b5c:	4b59      	ldr	r3, [pc, #356]	; (8003cc4 <BMS_ScreenMode_RUN+0x200>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
		flag_get_UNIQUECODE=OFF;
 8003b62:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <BMS_ScreenMode_RUN+0x204>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8003b68:	4b4a      	ldr	r3, [pc, #296]	; (8003c94 <BMS_ScreenMode_RUN+0x1d0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a4a      	ldr	r2, [pc, #296]	; (8003c98 <BMS_ScreenMode_RUN+0x1d4>)
 8003b6e:	6013      	str	r3, [r2, #0]

		if(last_flag_start_shutdown==1) Shutdown_time_last = HAL_GetTick();
 8003b70:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <BMS_ScreenMode_RUN+0x208>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <BMS_ScreenMode_RUN+0xc0>
 8003b78:	f003 fd8e 	bl	8007698 <HAL_GetTick>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <BMS_ScreenMode_RUN+0x20c>)
 8003b82:	601a      	str	r2, [r3, #0]

		// Automatic sleep after 30s without receive CAN
		Shutdown_time=HAL_GetTick();
 8003b84:	f003 fd88 	bl	8007698 <HAL_GetTick>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <BMS_ScreenMode_RUN+0x210>)
 8003b8e:	601a      	str	r2, [r3, #0]
		if(Shutdown_time-Shutdown_time_last>Shutdown_tick)
 8003b90:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <BMS_ScreenMode_RUN+0x210>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b4e      	ldr	r3, [pc, #312]	; (8003cd0 <BMS_ScreenMode_RUN+0x20c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <BMS_ScreenMode_RUN+0x214>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	dd2e      	ble.n	8003c00 <BMS_ScreenMode_RUN+0x13c>
		{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ba8:	484c      	ldr	r0, [pc, #304]	; (8003cdc <BMS_ScreenMode_RUN+0x218>)
 8003baa:	f005 fe2c 	bl	8009806 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8003bae:	2064      	movs	r0, #100	; 0x64
 8003bb0:	f003 fd7c 	bl	80076ac <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bb8:	4848      	ldr	r0, [pc, #288]	; (8003cdc <BMS_ScreenMode_RUN+0x218>)
 8003bba:	f005 fe3c 	bl	8009836 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003bbe:	2064      	movs	r0, #100	; 0x64
 8003bc0:	f003 fd74 	bl	80076ac <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc8:	4844      	ldr	r0, [pc, #272]	; (8003cdc <BMS_ScreenMode_RUN+0x218>)
 8003bca:	f005 fe34 	bl	8009836 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003bce:	2064      	movs	r0, #100	; 0x64
 8003bd0:	f003 fd6c 	bl	80076ac <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bd8:	4840      	ldr	r0, [pc, #256]	; (8003cdc <BMS_ScreenMode_RUN+0x218>)
 8003bda:	f005 fe2c 	bl	8009836 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003bde:	2064      	movs	r0, #100	; 0x64
 8003be0:	f003 fd64 	bl	80076ac <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003be8:	483c      	ldr	r0, [pc, #240]	; (8003cdc <BMS_ScreenMode_RUN+0x218>)
 8003bea:	f005 fe24 	bl	8009836 <HAL_GPIO_TogglePin>
			HAL_Delay(750);
 8003bee:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003bf2:	f003 fd5b 	bl	80076ac <HAL_Delay>
			HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4838      	ldr	r0, [pc, #224]	; (8003cdc <BMS_ScreenMode_RUN+0x218>)
 8003bfc:	f005 fe03 	bl	8009806 <HAL_GPIO_WritePin>
		}

		last_flag_start_shutdown = 0;
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <BMS_ScreenMode_RUN+0x208>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e175      	b.n	8003ef4 <BMS_ScreenMode_RUN+0x430>
	}
	else
	{

		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f000 faab 	bl	8004164 <SSD1306_Fill>

		if(BATT_State==STATE_CHARGE)
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <BMS_ScreenMode_RUN+0x21c>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d10e      	bne.n	8003c34 <BMS_ScreenMode_RUN+0x170>
		{
			sprintf(buff_lcd,"RUN (C) - %05s", UPPER_UNIQUE_Code);
 8003c16:	4a33      	ldr	r2, [pc, #204]	; (8003ce4 <BMS_ScreenMode_RUN+0x220>)
 8003c18:	4933      	ldr	r1, [pc, #204]	; (8003ce8 <BMS_ScreenMode_RUN+0x224>)
 8003c1a:	481b      	ldr	r0, [pc, #108]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003c1c:	f009 f9e0 	bl	800cfe0 <siprintf>
			SSD1306_GotoXY(0,0);
 8003c20:	2100      	movs	r1, #0
 8003c22:	2000      	movs	r0, #0
 8003c24:	f000 fb14 	bl	8004250 <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4918      	ldr	r1, [pc, #96]	; (8003c8c <BMS_ScreenMode_RUN+0x1c8>)
 8003c2c:	4816      	ldr	r0, [pc, #88]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003c2e:	f000 fba5 	bl	800437c <SSD1306_Puts>
 8003c32:	e071      	b.n	8003d18 <BMS_ScreenMode_RUN+0x254>
		}
		else if(BATT_State==STATE_DISCHARGE)
 8003c34:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <BMS_ScreenMode_RUN+0x21c>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d10e      	bne.n	8003c5a <BMS_ScreenMode_RUN+0x196>
		{
			sprintf(buff_lcd,"RUN (D) - %05s", UPPER_UNIQUE_Code);
 8003c3c:	4a29      	ldr	r2, [pc, #164]	; (8003ce4 <BMS_ScreenMode_RUN+0x220>)
 8003c3e:	492b      	ldr	r1, [pc, #172]	; (8003cec <BMS_ScreenMode_RUN+0x228>)
 8003c40:	4811      	ldr	r0, [pc, #68]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003c42:	f009 f9cd 	bl	800cfe0 <siprintf>
			SSD1306_GotoXY(0,0);
 8003c46:	2100      	movs	r1, #0
 8003c48:	2000      	movs	r0, #0
 8003c4a:	f000 fb01 	bl	8004250 <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <BMS_ScreenMode_RUN+0x1c8>)
 8003c52:	480d      	ldr	r0, [pc, #52]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003c54:	f000 fb92 	bl	800437c <SSD1306_Puts>
 8003c58:	e05e      	b.n	8003d18 <BMS_ScreenMode_RUN+0x254>
		}
		else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <BMS_ScreenMode_RUN+0x21c>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d148      	bne.n	8003cf4 <BMS_ScreenMode_RUN+0x230>
		{
			sprintf(buff_lcd,"RUN (C/D) - %05s", UPPER_UNIQUE_Code);
 8003c62:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <BMS_ScreenMode_RUN+0x220>)
 8003c64:	4922      	ldr	r1, [pc, #136]	; (8003cf0 <BMS_ScreenMode_RUN+0x22c>)
 8003c66:	4808      	ldr	r0, [pc, #32]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003c68:	f009 f9ba 	bl	800cfe0 <siprintf>
			SSD1306_GotoXY(0,0);
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f000 faee 	bl	8004250 <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003c74:	2201      	movs	r2, #1
 8003c76:	4905      	ldr	r1, [pc, #20]	; (8003c8c <BMS_ScreenMode_RUN+0x1c8>)
 8003c78:	4803      	ldr	r0, [pc, #12]	; (8003c88 <BMS_ScreenMode_RUN+0x1c4>)
 8003c7a:	f000 fb7f 	bl	800437c <SSD1306_Puts>
 8003c7e:	e04b      	b.n	8003d18 <BMS_ScreenMode_RUN+0x254>
 8003c80:	20000691 	.word	0x20000691
 8003c84:	08010e1c 	.word	0x08010e1c
 8003c88:	20000a7c 	.word	0x20000a7c
 8003c8c:	20000004 	.word	0x20000004
 8003c90:	08010e24 	.word	0x08010e24
 8003c94:	2000078c 	.word	0x2000078c
 8003c98:	20000784 	.word	0x20000784
 8003c9c:	20000690 	.word	0x20000690
 8003ca0:	20000714 	.word	0x20000714
 8003ca4:	2000074c 	.word	0x2000074c
 8003ca8:	20000671 	.word	0x20000671
 8003cac:	20000715 	.word	0x20000715
 8003cb0:	2000079c 	.word	0x2000079c
 8003cb4:	20000728 	.word	0x20000728
 8003cb8:	20000746 	.word	0x20000746
 8003cbc:	20000673 	.word	0x20000673
 8003cc0:	2000067c 	.word	0x2000067c
 8003cc4:	20000670 	.word	0x20000670
 8003cc8:	20000674 	.word	0x20000674
 8003ccc:	20000780 	.word	0x20000780
 8003cd0:	20000778 	.word	0x20000778
 8003cd4:	20000768 	.word	0x20000768
 8003cd8:	20000010 	.word	0x20000010
 8003cdc:	40011000 	.word	0x40011000
 8003ce0:	20000aa4 	.word	0x20000aa4
 8003ce4:	20000a90 	.word	0x20000a90
 8003ce8:	08010e30 	.word	0x08010e30
 8003cec:	08010e40 	.word	0x08010e40
 8003cf0:	08010e50 	.word	0x08010e50
		}
		else if(BATT_State==STATE_STANDBY)
 8003cf4:	4b83      	ldr	r3, [pc, #524]	; (8003f04 <BMS_ScreenMode_RUN+0x440>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10d      	bne.n	8003d18 <BMS_ScreenMode_RUN+0x254>
		{
			sprintf(buff_lcd,"RUN (Open) - %05s", UPPER_UNIQUE_Code);
 8003cfc:	4a82      	ldr	r2, [pc, #520]	; (8003f08 <BMS_ScreenMode_RUN+0x444>)
 8003cfe:	4983      	ldr	r1, [pc, #524]	; (8003f0c <BMS_ScreenMode_RUN+0x448>)
 8003d00:	4883      	ldr	r0, [pc, #524]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003d02:	f009 f96d 	bl	800cfe0 <siprintf>
			SSD1306_GotoXY(0,0);
 8003d06:	2100      	movs	r1, #0
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f000 faa1 	bl	8004250 <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003d0e:	2201      	movs	r2, #1
 8003d10:	4980      	ldr	r1, [pc, #512]	; (8003f14 <BMS_ScreenMode_RUN+0x450>)
 8003d12:	487f      	ldr	r0, [pc, #508]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003d14:	f000 fb32 	bl	800437c <SSD1306_Puts>
		}

		sprintf(buff_lcd,"V=%6.2f I=%6.2f",VBATT, IBATT);
 8003d18:	4b7f      	ldr	r3, [pc, #508]	; (8003f18 <BMS_ScreenMode_RUN+0x454>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fbef 	bl	8000500 <__aeabi_f2d>
 8003d22:	4604      	mov	r4, r0
 8003d24:	460d      	mov	r5, r1
 8003d26:	4b7d      	ldr	r3, [pc, #500]	; (8003f1c <BMS_ScreenMode_RUN+0x458>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fbe8 	bl	8000500 <__aeabi_f2d>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	e9cd 2300 	strd	r2, r3, [sp]
 8003d38:	4622      	mov	r2, r4
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	4978      	ldr	r1, [pc, #480]	; (8003f20 <BMS_ScreenMode_RUN+0x45c>)
 8003d3e:	4874      	ldr	r0, [pc, #464]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003d40:	f009 f94e 	bl	800cfe0 <siprintf>
		SSD1306_GotoXY(0,10);
 8003d44:	210a      	movs	r1, #10
 8003d46:	2000      	movs	r0, #0
 8003d48:	f000 fa82 	bl	8004250 <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4971      	ldr	r1, [pc, #452]	; (8003f14 <BMS_ScreenMode_RUN+0x450>)
 8003d50:	486f      	ldr	r0, [pc, #444]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003d52:	f000 fb13 	bl	800437c <SSD1306_Puts>
		sprintf(buff_lcd,"T=%3.0f|%3.0f|%3.0f|%3.0f", Suhu_T1, Suhu_T2, Suhu_T3, Suhu_T4);
 8003d56:	4b73      	ldr	r3, [pc, #460]	; (8003f24 <BMS_ScreenMode_RUN+0x460>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fc fbd0 	bl	8000500 <__aeabi_f2d>
 8003d60:	4682      	mov	sl, r0
 8003d62:	468b      	mov	fp, r1
 8003d64:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <BMS_ScreenMode_RUN+0x464>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fbc9 	bl	8000500 <__aeabi_f2d>
 8003d6e:	4604      	mov	r4, r0
 8003d70:	460d      	mov	r5, r1
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <BMS_ScreenMode_RUN+0x468>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fbc2 	bl	8000500 <__aeabi_f2d>
 8003d7c:	4680      	mov	r8, r0
 8003d7e:	4689      	mov	r9, r1
 8003d80:	4b6b      	ldr	r3, [pc, #428]	; (8003f30 <BMS_ScreenMode_RUN+0x46c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fc fbbb 	bl	8000500 <__aeabi_f2d>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003d92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003d96:	e9cd 4500 	strd	r4, r5, [sp]
 8003d9a:	4652      	mov	r2, sl
 8003d9c:	465b      	mov	r3, fp
 8003d9e:	4965      	ldr	r1, [pc, #404]	; (8003f34 <BMS_ScreenMode_RUN+0x470>)
 8003da0:	485b      	ldr	r0, [pc, #364]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003da2:	f009 f91d 	bl	800cfe0 <siprintf>
		SSD1306_GotoXY(0,20);
 8003da6:	2114      	movs	r1, #20
 8003da8:	2000      	movs	r0, #0
 8003daa:	f000 fa51 	bl	8004250 <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003dae:	2201      	movs	r2, #1
 8003db0:	4958      	ldr	r1, [pc, #352]	; (8003f14 <BMS_ScreenMode_RUN+0x450>)
 8003db2:	4857      	ldr	r0, [pc, #348]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003db4:	f000 fae2 	bl	800437c <SSD1306_Puts>
		sprintf(buff_lcd,"C=%5.1f%%--%5.1f%%",Pack_SOC,SOC_manipulasi);
 8003db8:	4b5f      	ldr	r3, [pc, #380]	; (8003f38 <BMS_ScreenMode_RUN+0x474>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fb9f 	bl	8000500 <__aeabi_f2d>
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	460d      	mov	r5, r1
 8003dc6:	4b5d      	ldr	r3, [pc, #372]	; (8003f3c <BMS_ScreenMode_RUN+0x478>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fc fb98 	bl	8000500 <__aeabi_f2d>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	e9cd 2300 	strd	r2, r3, [sp]
 8003dd8:	4622      	mov	r2, r4
 8003dda:	462b      	mov	r3, r5
 8003ddc:	4958      	ldr	r1, [pc, #352]	; (8003f40 <BMS_ScreenMode_RUN+0x47c>)
 8003dde:	484c      	ldr	r0, [pc, #304]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003de0:	f009 f8fe 	bl	800cfe0 <siprintf>
		SSD1306_GotoXY(0,30);
 8003de4:	211e      	movs	r1, #30
 8003de6:	2000      	movs	r0, #0
 8003de8:	f000 fa32 	bl	8004250 <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003dec:	2201      	movs	r2, #1
 8003dee:	4949      	ldr	r1, [pc, #292]	; (8003f14 <BMS_ScreenMode_RUN+0x450>)
 8003df0:	4847      	ldr	r0, [pc, #284]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003df2:	f000 fac3 	bl	800437c <SSD1306_Puts>
		sprintf(buff_lcd,"B=%5d|%4.2f|%4.2f",unbalance_cell, persen_imbalance, OFFSET_SENSOR_ARUS);
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <BMS_ScreenMode_RUN+0x480>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	461e      	mov	r6, r3
 8003dfc:	4b52      	ldr	r3, [pc, #328]	; (8003f48 <BMS_ScreenMode_RUN+0x484>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc fb7d 	bl	8000500 <__aeabi_f2d>
 8003e06:	4604      	mov	r4, r0
 8003e08:	460d      	mov	r5, r1
 8003e0a:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <BMS_ScreenMode_RUN+0x488>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc fb76 	bl	8000500 <__aeabi_f2d>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e1c:	e9cd 4500 	strd	r4, r5, [sp]
 8003e20:	4632      	mov	r2, r6
 8003e22:	494b      	ldr	r1, [pc, #300]	; (8003f50 <BMS_ScreenMode_RUN+0x48c>)
 8003e24:	483a      	ldr	r0, [pc, #232]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003e26:	f009 f8db 	bl	800cfe0 <siprintf>
		SSD1306_GotoXY(0,40);
 8003e2a:	2128      	movs	r1, #40	; 0x28
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f000 fa0f 	bl	8004250 <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003e32:	2201      	movs	r2, #1
 8003e34:	4937      	ldr	r1, [pc, #220]	; (8003f14 <BMS_ScreenMode_RUN+0x450>)
 8003e36:	4836      	ldr	r0, [pc, #216]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003e38:	f000 faa0 	bl	800437c <SSD1306_Puts>

		sprintf(buff_lcd,"%d-%d--%4.2f| %5.0f",fault_code,last_fault_code,Isc, AH_Total);
 8003e3c:	4b45      	ldr	r3, [pc, #276]	; (8003f54 <BMS_ScreenMode_RUN+0x490>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	461e      	mov	r6, r3
 8003e42:	4b45      	ldr	r3, [pc, #276]	; (8003f58 <BMS_ScreenMode_RUN+0x494>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	4698      	mov	r8, r3
 8003e48:	4b44      	ldr	r3, [pc, #272]	; (8003f5c <BMS_ScreenMode_RUN+0x498>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fb57 	bl	8000500 <__aeabi_f2d>
 8003e52:	4604      	mov	r4, r0
 8003e54:	460d      	mov	r5, r1
 8003e56:	4b42      	ldr	r3, [pc, #264]	; (8003f60 <BMS_ScreenMode_RUN+0x49c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fb50 	bl	8000500 <__aeabi_f2d>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e68:	e9cd 4500 	strd	r4, r5, [sp]
 8003e6c:	4643      	mov	r3, r8
 8003e6e:	4632      	mov	r2, r6
 8003e70:	493c      	ldr	r1, [pc, #240]	; (8003f64 <BMS_ScreenMode_RUN+0x4a0>)
 8003e72:	4827      	ldr	r0, [pc, #156]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003e74:	f009 f8b4 	bl	800cfe0 <siprintf>
		SSD1306_GotoXY(0,50);
 8003e78:	2132      	movs	r1, #50	; 0x32
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f000 f9e8 	bl	8004250 <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003e80:	2201      	movs	r2, #1
 8003e82:	4924      	ldr	r1, [pc, #144]	; (8003f14 <BMS_ScreenMode_RUN+0x450>)
 8003e84:	4822      	ldr	r0, [pc, #136]	; (8003f10 <BMS_ScreenMode_RUN+0x44c>)
 8003e86:	f000 fa79 	bl	800437c <SSD1306_Puts>

		SSD1306_UpdateScreen();
 8003e8a:	f000 f93d 	bl	8004108 <SSD1306_UpdateScreen>

		if(BMS_mode==0) Batt_Open_Mode();
 8003e8e:	4b36      	ldr	r3, [pc, #216]	; (8003f68 <BMS_ScreenMode_RUN+0x4a4>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d102      	bne.n	8003e9c <BMS_ScreenMode_RUN+0x3d8>
 8003e96:	f7fd fb51 	bl	800153c <Batt_Open_Mode>
 8003e9a:	e013      	b.n	8003ec4 <BMS_ScreenMode_RUN+0x400>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <BMS_ScreenMode_RUN+0x4a4>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d102      	bne.n	8003eaa <BMS_ScreenMode_RUN+0x3e6>
 8003ea4:	f7fd fa1e 	bl	80012e4 <Batt_Discharge_Mode>
 8003ea8:	e00c      	b.n	8003ec4 <BMS_ScreenMode_RUN+0x400>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <BMS_ScreenMode_RUN+0x4a4>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d102      	bne.n	8003eb8 <BMS_ScreenMode_RUN+0x3f4>
 8003eb2:	f7fd fa71 	bl	8001398 <Batt_Charge_Mode>
 8003eb6:	e005      	b.n	8003ec4 <BMS_ScreenMode_RUN+0x400>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <BMS_ScreenMode_RUN+0x4a4>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d101      	bne.n	8003ec4 <BMS_ScreenMode_RUN+0x400>
 8003ec0:	f7fd fad0 	bl	8001464 <Batt_Full_CD_Mode>

	//  Automatically sleep after 30s without receive CAN
		Sleep_time=HAL_GetTick();
 8003ec4:	f003 fbe8 	bl	8007698 <HAL_GetTick>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <BMS_ScreenMode_RUN+0x4a8>)
 8003ece:	601a      	str	r2, [r3, #0]
		if(Sleep_time-Active_time_last>Sleep_tick)
 8003ed0:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <BMS_ScreenMode_RUN+0x4a8>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <BMS_ScreenMode_RUN+0x4ac>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	1ad2      	subs	r2, r2, r3
 8003eda:	4b26      	ldr	r3, [pc, #152]	; (8003f74 <BMS_ScreenMode_RUN+0x4b0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	dd05      	ble.n	8003eee <BMS_ScreenMode_RUN+0x42a>
		{
			BMS_mode=0;
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <BMS_ScreenMode_RUN+0x4a4>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
			flag_start_shutdown=0;
 8003ee8:	4b23      	ldr	r3, [pc, #140]	; (8003f78 <BMS_ScreenMode_RUN+0x4b4>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
		}
		last_flag_start_shutdown = 1;
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <BMS_ScreenMode_RUN+0x4b8>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1);
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	f003 fbd9 	bl	80076ac <HAL_Delay>
}
 8003efa:	bf00      	nop
 8003efc:	3704      	adds	r7, #4
 8003efe:	46bd      	mov	sp, r7
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	20000aa4 	.word	0x20000aa4
 8003f08:	20000a90 	.word	0x20000a90
 8003f0c:	08010e64 	.word	0x08010e64
 8003f10:	20000a7c 	.word	0x20000a7c
 8003f14:	20000004 	.word	0x20000004
 8003f18:	20000694 	.word	0x20000694
 8003f1c:	2000070c 	.word	0x2000070c
 8003f20:	08010e78 	.word	0x08010e78
 8003f24:	20000720 	.word	0x20000720
 8003f28:	200007a0 	.word	0x200007a0
 8003f2c:	20000698 	.word	0x20000698
 8003f30:	20000758 	.word	0x20000758
 8003f34:	08010e88 	.word	0x08010e88
 8003f38:	20000798 	.word	0x20000798
 8003f3c:	20000740 	.word	0x20000740
 8003f40:	08010ea4 	.word	0x08010ea4
 8003f44:	200006a6 	.word	0x200006a6
 8003f48:	20000754 	.word	0x20000754
 8003f4c:	20000784 	.word	0x20000784
 8003f50:	08010eb8 	.word	0x08010eb8
 8003f54:	2000071e 	.word	0x2000071e
 8003f58:	20000795 	.word	0x20000795
 8003f5c:	200006f0 	.word	0x200006f0
 8003f60:	2000064c 	.word	0x2000064c
 8003f64:	08010ecc 	.word	0x08010ecc
 8003f68:	20000794 	.word	0x20000794
 8003f6c:	20000684 	.word	0x20000684
 8003f70:	20000748 	.word	0x20000748
 8003f74:	2000000c 	.word	0x2000000c
 8003f78:	20000691 	.word	0x20000691
 8003f7c:	20000780 	.word	0x20000780

08003f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f84:	b672      	cpsid	i
}
 8003f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f88:	e7fe      	b.n	8003f88 <Error_Handler+0x8>
	...

08003f8c <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003f92:	f000 fa19 	bl	80043c8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003f96:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	2178      	movs	r1, #120	; 0x78
 8003f9e:	4858      	ldr	r0, [pc, #352]	; (8004100 <SSD1306_Init+0x174>)
 8003fa0:	f006 fa06 	bl	800a3b0 <HAL_I2C_IsDeviceReady>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e0a4      	b.n	80040f8 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 25000;
 8003fae:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8003fb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fb4:	e002      	b.n	8003fbc <SSD1306_Init+0x30>
		p--;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f9      	bne.n	8003fb6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003fc2:	22ae      	movs	r2, #174	; 0xae
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	2078      	movs	r0, #120	; 0x78
 8003fc8:	f000 fa6a 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003fcc:	2220      	movs	r2, #32
 8003fce:	2100      	movs	r1, #0
 8003fd0:	2078      	movs	r0, #120	; 0x78
 8003fd2:	f000 fa65 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003fd6:	2210      	movs	r2, #16
 8003fd8:	2100      	movs	r1, #0
 8003fda:	2078      	movs	r0, #120	; 0x78
 8003fdc:	f000 fa60 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003fe0:	22b0      	movs	r2, #176	; 0xb0
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	2078      	movs	r0, #120	; 0x78
 8003fe6:	f000 fa5b 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003fea:	22c8      	movs	r2, #200	; 0xc8
 8003fec:	2100      	movs	r1, #0
 8003fee:	2078      	movs	r0, #120	; 0x78
 8003ff0:	f000 fa56 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	2078      	movs	r0, #120	; 0x78
 8003ffa:	f000 fa51 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003ffe:	2210      	movs	r2, #16
 8004000:	2100      	movs	r1, #0
 8004002:	2078      	movs	r0, #120	; 0x78
 8004004:	f000 fa4c 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004008:	2240      	movs	r2, #64	; 0x40
 800400a:	2100      	movs	r1, #0
 800400c:	2078      	movs	r0, #120	; 0x78
 800400e:	f000 fa47 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004012:	2281      	movs	r2, #129	; 0x81
 8004014:	2100      	movs	r1, #0
 8004016:	2078      	movs	r0, #120	; 0x78
 8004018:	f000 fa42 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	2100      	movs	r1, #0
 8004020:	2078      	movs	r0, #120	; 0x78
 8004022:	f000 fa3d 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004026:	22a1      	movs	r2, #161	; 0xa1
 8004028:	2100      	movs	r1, #0
 800402a:	2078      	movs	r0, #120	; 0x78
 800402c:	f000 fa38 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004030:	22a6      	movs	r2, #166	; 0xa6
 8004032:	2100      	movs	r1, #0
 8004034:	2078      	movs	r0, #120	; 0x78
 8004036:	f000 fa33 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800403a:	22a8      	movs	r2, #168	; 0xa8
 800403c:	2100      	movs	r1, #0
 800403e:	2078      	movs	r0, #120	; 0x78
 8004040:	f000 fa2e 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8004044:	223f      	movs	r2, #63	; 0x3f
 8004046:	2100      	movs	r1, #0
 8004048:	2078      	movs	r0, #120	; 0x78
 800404a:	f000 fa29 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800404e:	22a4      	movs	r2, #164	; 0xa4
 8004050:	2100      	movs	r1, #0
 8004052:	2078      	movs	r0, #120	; 0x78
 8004054:	f000 fa24 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004058:	22d3      	movs	r2, #211	; 0xd3
 800405a:	2100      	movs	r1, #0
 800405c:	2078      	movs	r0, #120	; 0x78
 800405e:	f000 fa1f 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004062:	2200      	movs	r2, #0
 8004064:	2100      	movs	r1, #0
 8004066:	2078      	movs	r0, #120	; 0x78
 8004068:	f000 fa1a 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800406c:	22d5      	movs	r2, #213	; 0xd5
 800406e:	2100      	movs	r1, #0
 8004070:	2078      	movs	r0, #120	; 0x78
 8004072:	f000 fa15 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004076:	22f0      	movs	r2, #240	; 0xf0
 8004078:	2100      	movs	r1, #0
 800407a:	2078      	movs	r0, #120	; 0x78
 800407c:	f000 fa10 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004080:	22d9      	movs	r2, #217	; 0xd9
 8004082:	2100      	movs	r1, #0
 8004084:	2078      	movs	r0, #120	; 0x78
 8004086:	f000 fa0b 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800408a:	2222      	movs	r2, #34	; 0x22
 800408c:	2100      	movs	r1, #0
 800408e:	2078      	movs	r0, #120	; 0x78
 8004090:	f000 fa06 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004094:	22da      	movs	r2, #218	; 0xda
 8004096:	2100      	movs	r1, #0
 8004098:	2078      	movs	r0, #120	; 0x78
 800409a:	f000 fa01 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800409e:	2212      	movs	r2, #18
 80040a0:	2100      	movs	r1, #0
 80040a2:	2078      	movs	r0, #120	; 0x78
 80040a4:	f000 f9fc 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80040a8:	22db      	movs	r2, #219	; 0xdb
 80040aa:	2100      	movs	r1, #0
 80040ac:	2078      	movs	r0, #120	; 0x78
 80040ae:	f000 f9f7 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80040b2:	2220      	movs	r2, #32
 80040b4:	2100      	movs	r1, #0
 80040b6:	2078      	movs	r0, #120	; 0x78
 80040b8:	f000 f9f2 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80040bc:	228d      	movs	r2, #141	; 0x8d
 80040be:	2100      	movs	r1, #0
 80040c0:	2078      	movs	r0, #120	; 0x78
 80040c2:	f000 f9ed 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80040c6:	2214      	movs	r2, #20
 80040c8:	2100      	movs	r1, #0
 80040ca:	2078      	movs	r0, #120	; 0x78
 80040cc:	f000 f9e8 	bl	80044a0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80040d0:	22af      	movs	r2, #175	; 0xaf
 80040d2:	2100      	movs	r1, #0
 80040d4:	2078      	movs	r0, #120	; 0x78
 80040d6:	f000 f9e3 	bl	80044a0 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80040da:	2000      	movs	r0, #0
 80040dc:	f000 f842 	bl	8004164 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80040e0:	f000 f812 	bl	8004108 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <SSD1306_Init+0x178>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <SSD1306_Init+0x178>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <SSD1306_Init+0x178>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80040f6:	2301      	movs	r3, #1
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200009c8 	.word	0x200009c8
 8004104:	20000644 	.word	0x20000644

08004108 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800410e:	2300      	movs	r3, #0
 8004110:	71fb      	strb	r3, [r7, #7]
 8004112:	e01d      	b.n	8004150 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	3b50      	subs	r3, #80	; 0x50
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	2100      	movs	r1, #0
 800411e:	2078      	movs	r0, #120	; 0x78
 8004120:	f000 f9be 	bl	80044a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004124:	2200      	movs	r2, #0
 8004126:	2100      	movs	r1, #0
 8004128:	2078      	movs	r0, #120	; 0x78
 800412a:	f000 f9b9 	bl	80044a0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800412e:	2210      	movs	r2, #16
 8004130:	2100      	movs	r1, #0
 8004132:	2078      	movs	r0, #120	; 0x78
 8004134:	f000 f9b4 	bl	80044a0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	01db      	lsls	r3, r3, #7
 800413c:	4a08      	ldr	r2, [pc, #32]	; (8004160 <SSD1306_UpdateScreen+0x58>)
 800413e:	441a      	add	r2, r3
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	2140      	movs	r1, #64	; 0x40
 8004144:	2078      	movs	r0, #120	; 0x78
 8004146:	f000 f953 	bl	80043f0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	3301      	adds	r3, #1
 800414e:	71fb      	strb	r3, [r7, #7]
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	2b07      	cmp	r3, #7
 8004154:	d9de      	bls.n	8004114 <SSD1306_UpdateScreen+0xc>
	}
}
 8004156:	bf00      	nop
 8004158:	bf00      	nop
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000244 	.word	0x20000244

08004164 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <SSD1306_Fill+0x14>
 8004174:	2300      	movs	r3, #0
 8004176:	e001      	b.n	800417c <SSD1306_Fill+0x18>
 8004178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800417c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004180:	4619      	mov	r1, r3
 8004182:	4803      	ldr	r0, [pc, #12]	; (8004190 <SSD1306_Fill+0x2c>)
 8004184:	f007 fff8 	bl	800c178 <memset>
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	20000244 	.word	0x20000244

08004194 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	80fb      	strh	r3, [r7, #6]
 800419e:	460b      	mov	r3, r1
 80041a0:	80bb      	strh	r3, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	70fb      	strb	r3, [r7, #3]
	if (
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	2b7f      	cmp	r3, #127	; 0x7f
 80041aa:	d848      	bhi.n	800423e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80041ac:	88bb      	ldrh	r3, [r7, #4]
 80041ae:	2b3f      	cmp	r3, #63	; 0x3f
 80041b0:	d845      	bhi.n	800423e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80041b2:	4b25      	ldr	r3, [pc, #148]	; (8004248 <SSD1306_DrawPixel+0xb4>)
 80041b4:	791b      	ldrb	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80041ba:	78fb      	ldrb	r3, [r7, #3]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	bf0c      	ite	eq
 80041c0:	2301      	moveq	r3, #1
 80041c2:	2300      	movne	r3, #0
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d11a      	bne.n	8004204 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	88bb      	ldrh	r3, [r7, #4]
 80041d2:	08db      	lsrs	r3, r3, #3
 80041d4:	b298      	uxth	r0, r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	01db      	lsls	r3, r3, #7
 80041da:	4413      	add	r3, r2
 80041dc:	4a1b      	ldr	r2, [pc, #108]	; (800424c <SSD1306_DrawPixel+0xb8>)
 80041de:	5cd3      	ldrb	r3, [r2, r3]
 80041e0:	b25a      	sxtb	r2, r3
 80041e2:	88bb      	ldrh	r3, [r7, #4]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	2101      	movs	r1, #1
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b259      	sxtb	r1, r3
 80041f4:	88fa      	ldrh	r2, [r7, #6]
 80041f6:	4603      	mov	r3, r0
 80041f8:	01db      	lsls	r3, r3, #7
 80041fa:	4413      	add	r3, r2
 80041fc:	b2c9      	uxtb	r1, r1
 80041fe:	4a13      	ldr	r2, [pc, #76]	; (800424c <SSD1306_DrawPixel+0xb8>)
 8004200:	54d1      	strb	r1, [r2, r3]
 8004202:	e01d      	b.n	8004240 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004204:	88fa      	ldrh	r2, [r7, #6]
 8004206:	88bb      	ldrh	r3, [r7, #4]
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	b298      	uxth	r0, r3
 800420c:	4603      	mov	r3, r0
 800420e:	01db      	lsls	r3, r3, #7
 8004210:	4413      	add	r3, r2
 8004212:	4a0e      	ldr	r2, [pc, #56]	; (800424c <SSD1306_DrawPixel+0xb8>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	b25a      	sxtb	r2, r3
 8004218:	88bb      	ldrh	r3, [r7, #4]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	2101      	movs	r1, #1
 8004220:	fa01 f303 	lsl.w	r3, r1, r3
 8004224:	b25b      	sxtb	r3, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	b25b      	sxtb	r3, r3
 800422a:	4013      	ands	r3, r2
 800422c:	b259      	sxtb	r1, r3
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	4603      	mov	r3, r0
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	4413      	add	r3, r2
 8004236:	b2c9      	uxtb	r1, r1
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <SSD1306_DrawPixel+0xb8>)
 800423a:	54d1      	strb	r1, [r2, r3]
 800423c:	e000      	b.n	8004240 <SSD1306_DrawPixel+0xac>
		return;
 800423e:	bf00      	nop
	}
}
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	20000644 	.word	0x20000644
 800424c:	20000244 	.word	0x20000244

08004250 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	460a      	mov	r2, r1
 800425a:	80fb      	strh	r3, [r7, #6]
 800425c:	4613      	mov	r3, r2
 800425e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <SSD1306_GotoXY+0x28>)
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8004266:	4a04      	ldr	r2, [pc, #16]	; (8004278 <SSD1306_GotoXY+0x28>)
 8004268:	88bb      	ldrh	r3, [r7, #4]
 800426a:	8053      	strh	r3, [r2, #2]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000644 	.word	0x20000644

0800427c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	6039      	str	r1, [r7, #0]
 8004286:	71fb      	strb	r3, [r7, #7]
 8004288:	4613      	mov	r3, r2
 800428a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <SSD1306_Putc+0xfc>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	4413      	add	r3, r2
	if (
 8004298:	2b7f      	cmp	r3, #127	; 0x7f
 800429a:	dc07      	bgt.n	80042ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <SSD1306_Putc+0xfc>)
 800429e:	885b      	ldrh	r3, [r3, #2]
 80042a0:	461a      	mov	r2, r3
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	785b      	ldrb	r3, [r3, #1]
 80042a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80042a8:	2b3f      	cmp	r3, #63	; 0x3f
 80042aa:	dd01      	ble.n	80042b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e05e      	b.n	800436e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e04b      	b.n	800434e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	3b20      	subs	r3, #32
 80042be:	6839      	ldr	r1, [r7, #0]
 80042c0:	7849      	ldrb	r1, [r1, #1]
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	4619      	mov	r1, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	440b      	add	r3, r1
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4413      	add	r3, r2
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	e030      	b.n	800433c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80042ea:	4b23      	ldr	r3, [pc, #140]	; (8004378 <SSD1306_Putc+0xfc>)
 80042ec:	881a      	ldrh	r2, [r3, #0]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	b298      	uxth	r0, r3
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <SSD1306_Putc+0xfc>)
 80042f8:	885a      	ldrh	r2, [r3, #2]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	4413      	add	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	79ba      	ldrb	r2, [r7, #6]
 8004304:	4619      	mov	r1, r3
 8004306:	f7ff ff45 	bl	8004194 <SSD1306_DrawPixel>
 800430a:	e014      	b.n	8004336 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <SSD1306_Putc+0xfc>)
 800430e:	881a      	ldrh	r2, [r3, #0]
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	b29b      	uxth	r3, r3
 8004314:	4413      	add	r3, r2
 8004316:	b298      	uxth	r0, r3
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <SSD1306_Putc+0xfc>)
 800431a:	885a      	ldrh	r2, [r3, #2]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	b29b      	uxth	r3, r3
 8004320:	4413      	add	r3, r2
 8004322:	b299      	uxth	r1, r3
 8004324:	79bb      	ldrb	r3, [r7, #6]
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf0c      	ite	eq
 800432a:	2301      	moveq	r3, #1
 800432c:	2300      	movne	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	f7ff ff2f 	bl	8004194 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3301      	adds	r3, #1
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4293      	cmp	r3, r2
 8004346:	d3c8      	bcc.n	80042da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3301      	adds	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	785b      	ldrb	r3, [r3, #1]
 8004352:	461a      	mov	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	4293      	cmp	r3, r2
 8004358:	d3ad      	bcc.n	80042b6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <SSD1306_Putc+0xfc>)
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	4413      	add	r3, r2
 8004366:	b29a      	uxth	r2, r3
 8004368:	4b03      	ldr	r3, [pc, #12]	; (8004378 <SSD1306_Putc+0xfc>)
 800436a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800436c:	79fb      	ldrb	r3, [r7, #7]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20000644 	.word	0x20000644

0800437c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800438a:	e012      	b.n	80043b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	79fa      	ldrb	r2, [r7, #7]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff71 	bl	800427c <SSD1306_Putc>
 800439a:	4603      	mov	r3, r0
 800439c:	461a      	mov	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d002      	beq.n	80043ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	e008      	b.n	80043be <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e8      	bne.n	800438c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	781b      	ldrb	r3, [r3, #0]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <ssd1306_I2C_Init+0x24>)
 80043d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80043d2:	e002      	b.n	80043da <ssd1306_I2C_Init+0x12>
		p--;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f9      	bne.n	80043d4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	00055730 	.word	0x00055730

080043f0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80043f0:	b5b0      	push	{r4, r5, r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	603a      	str	r2, [r7, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
 80043fe:	460b      	mov	r3, r1
 8004400:	71bb      	strb	r3, [r7, #6]
 8004402:	4613      	mov	r3, r2
 8004404:	80bb      	strh	r3, [r7, #4]
 8004406:	466b      	mov	r3, sp
 8004408:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 800440a:	88bb      	ldrh	r3, [r7, #4]
 800440c:	1c5c      	adds	r4, r3, #1
 800440e:	1e63      	subs	r3, r4, #1
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	4623      	mov	r3, r4
 8004414:	4618      	mov	r0, r3
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	00cb      	lsls	r3, r1, #3
 8004424:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004428:	00c2      	lsls	r2, r0, #3
 800442a:	4623      	mov	r3, r4
 800442c:	4618      	mov	r0, r3
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	00cb      	lsls	r3, r1, #3
 800443c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004440:	00c2      	lsls	r2, r0, #3
 8004442:	4623      	mov	r3, r4
 8004444:	3307      	adds	r3, #7
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	ebad 0d03 	sub.w	sp, sp, r3
 800444e:	ab02      	add	r3, sp, #8
 8004450:	3300      	adds	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	79ba      	ldrb	r2, [r7, #6]
 8004458:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
 800445e:	e00a      	b.n	8004476 <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	3b01      	subs	r3, #1
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	441a      	add	r2, r3
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	7811      	ldrb	r1, [r2, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	3301      	adds	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	b29b      	uxth	r3, r3
 800447a:	88ba      	ldrh	r2, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d2ef      	bcs.n	8004460 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	b299      	uxth	r1, r3
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	88bb      	ldrh	r3, [r7, #4]
 8004488:	200a      	movs	r0, #10
 800448a:	9000      	str	r0, [sp, #0]
 800448c:	4803      	ldr	r0, [pc, #12]	; (800449c <ssd1306_I2C_WriteMulti+0xac>)
 800448e:	f005 fb2f 	bl	8009af0 <HAL_I2C_Master_Transmit>
 8004492:	46ad      	mov	sp, r5
}
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bdb0      	pop	{r4, r5, r7, pc}
 800449c:	200009c8 	.word	0x200009c8

080044a0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
 80044aa:	460b      	mov	r3, r1
 80044ac:	71bb      	strb	r3, [r7, #6]
 80044ae:	4613      	mov	r3, r2
 80044b0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80044b2:	79bb      	ldrb	r3, [r7, #6]
 80044b4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80044b6:	797b      	ldrb	r3, [r7, #5]
 80044b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	b299      	uxth	r1, r3
 80044be:	f107 020c 	add.w	r2, r7, #12
 80044c2:	230a      	movs	r3, #10
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2302      	movs	r3, #2
 80044c8:	4803      	ldr	r0, [pc, #12]	; (80044d8 <ssd1306_I2C_Write+0x38>)
 80044ca:	f005 fb11 	bl	8009af0 <HAL_I2C_Master_Transmit>
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200009c8 	.word	0x200009c8

080044dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80044e2:	4b15      	ldr	r3, [pc, #84]	; (8004538 <HAL_MspInit+0x5c>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	4a14      	ldr	r2, [pc, #80]	; (8004538 <HAL_MspInit+0x5c>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6193      	str	r3, [r2, #24]
 80044ee:	4b12      	ldr	r3, [pc, #72]	; (8004538 <HAL_MspInit+0x5c>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044fa:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <HAL_MspInit+0x5c>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <HAL_MspInit+0x5c>)
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004504:	61d3      	str	r3, [r2, #28]
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <HAL_MspInit+0x5c>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_MspInit+0x60>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <HAL_MspInit+0x60>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	40021000 	.word	0x40021000
 800453c:	40010000 	.word	0x40010000

08004540 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004544:	e7fe      	b.n	8004544 <NMI_Handler+0x4>

08004546 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8004546:	b480      	push	{r7}
 8004548:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800454a:	e7fe      	b.n	800454a <HardFault_Handler+0x4>

0800454c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8004550:	e7fe      	b.n	8004550 <MemManage_Handler+0x4>

08004552 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8004552:	b480      	push	{r7}
 8004554:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8004556:	e7fe      	b.n	8004556 <BusFault_Handler+0x4>

08004558 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800455c:	e7fe      	b.n	800455c <UsageFault_Handler+0x4>

0800455e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8004576:	b480      	push	{r7}
 8004578:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8004586:	f003 f875 	bl	8007674 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel1 global interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <DMA1_Channel1_IRQHandler+0x10>)
 8004596:	f004 fd21 	bl	8008fdc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000884 	.word	0x20000884

080045a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 80045a8:	4802      	ldr	r0, [pc, #8]	; (80045b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80045aa:	f004 f910 	bl	80087ce <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200008e4 	.word	0x200008e4

080045b8 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 80045b8:	b5b0      	push	{r4, r5, r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80045bc:	48be      	ldr	r0, [pc, #760]	; (80048b8 <TIM2_IRQHandler+0x300>)
 80045be:	f007 f9cd 	bl	800b95c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */
	hitung_suhu++;
 80045c2:	4bbe      	ldr	r3, [pc, #760]	; (80048bc <TIM2_IRQHandler+0x304>)
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	4bbc      	ldr	r3, [pc, #752]	; (80048bc <TIM2_IRQHandler+0x304>)
 80045cc:	801a      	strh	r2, [r3, #0]
	test_tim2++;
 80045ce:	4bbc      	ldr	r3, [pc, #752]	; (80048c0 <TIM2_IRQHandler+0x308>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	4aba      	ldr	r2, [pc, #744]	; (80048c0 <TIM2_IRQHandler+0x308>)
 80045d6:	6013      	str	r3, [r2, #0]

	//Moving Average
	sumI=sumI-i_arrdata[i];		//menghapus sample data pertama/data lama
 80045d8:	4bba      	ldr	r3, [pc, #744]	; (80048c4 <TIM2_IRQHandler+0x30c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4aba      	ldr	r2, [pc, #744]	; (80048c8 <TIM2_IRQHandler+0x310>)
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	49ba      	ldr	r1, [pc, #744]	; (80048cc <TIM2_IRQHandler+0x314>)
 80045e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	4ab6      	ldr	r2, [pc, #728]	; (80048c4 <TIM2_IRQHandler+0x30c>)
 80045ea:	6013      	str	r3, [r2, #0]
	i_arrdata[i]=adc_value[4];	//save nilai ADC dari variable DMA
 80045ec:	4bb6      	ldr	r3, [pc, #728]	; (80048c8 <TIM2_IRQHandler+0x310>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4ab7      	ldr	r2, [pc, #732]	; (80048d0 <TIM2_IRQHandler+0x318>)
 80045f2:	8911      	ldrh	r1, [r2, #8]
 80045f4:	4ab5      	ldr	r2, [pc, #724]	; (80048cc <TIM2_IRQHandler+0x314>)
 80045f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sumI=sumI+i_arrdata[i];		//menambahkan sample data paling baru
 80045fa:	4bb3      	ldr	r3, [pc, #716]	; (80048c8 <TIM2_IRQHandler+0x310>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4ab3      	ldr	r2, [pc, #716]	; (80048cc <TIM2_IRQHandler+0x314>)
 8004600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004604:	461a      	mov	r2, r3
 8004606:	4baf      	ldr	r3, [pc, #700]	; (80048c4 <TIM2_IRQHandler+0x30c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4413      	add	r3, r2
 800460c:	4aad      	ldr	r2, [pc, #692]	; (80048c4 <TIM2_IRQHandler+0x30c>)
 800460e:	6013      	str	r3, [r2, #0]
	i_datadigi=sumI/maxdata;	//menghitung rata-rata
 8004610:	4bac      	ldr	r3, [pc, #688]	; (80048c4 <TIM2_IRQHandler+0x30c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4aaf      	ldr	r2, [pc, #700]	; (80048d4 <TIM2_IRQHandler+0x31c>)
 8004616:	fb82 1203 	smull	r1, r2, r2, r3
 800461a:	1192      	asrs	r2, r2, #6
 800461c:	17db      	asrs	r3, r3, #31
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	4618      	mov	r0, r3
 8004622:	f7fc fbc7 	bl	8000db4 <__aeabi_i2f>
 8004626:	4603      	mov	r3, r0
 8004628:	4aab      	ldr	r2, [pc, #684]	; (80048d8 <TIM2_IRQHandler+0x320>)
 800462a:	6013      	str	r3, [r2, #0]
	//  sum_datadigi_suhu3+=adc_value[3];
	//  sum_datadigi_suhu5+=adc_value[5];
	//  sum_datadigi_suhu6+=adc_value[6];
	// *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

	VBATT = sum_voltage;
 800462c:	4bab      	ldr	r3, [pc, #684]	; (80048dc <TIM2_IRQHandler+0x324>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4aab      	ldr	r2, [pc, #684]	; (80048e0 <TIM2_IRQHandler+0x328>)
 8004632:	6013      	str	r3, [r2, #0]
	if(VBATT<0) VBATT=-1;
 8004634:	4baa      	ldr	r3, [pc, #680]	; (80048e0 <TIM2_IRQHandler+0x328>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	4618      	mov	r0, r3
 800463e:	f7fc fdab 	bl	8001198 <__aeabi_fcmplt>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <TIM2_IRQHandler+0x96>
 8004648:	4ba5      	ldr	r3, [pc, #660]	; (80048e0 <TIM2_IRQHandler+0x328>)
 800464a:	4aa6      	ldr	r2, [pc, #664]	; (80048e4 <TIM2_IRQHandler+0x32c>)
 800464c:	601a      	str	r2, [r3, #0]
		IBATT = 0.062151574718308*i_datadigi - 121.796885042846 - OFFSET_SENSOR_ARUS; // Modul B fix
		IBATT_for_offset_cal= 0.062151574718308*i_datadigi - 121.796885042846;
	}

	else if (UNIQUE_Code == 0x00A22) {
		IBATT = 0.0635607965300084*i_datadigi - 126.923575896323 - OFFSET_SENSOR_ARUS; // Modul B fix
 800464e:	4ba2      	ldr	r3, [pc, #648]	; (80048d8 <TIM2_IRQHandler+0x320>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fb ff54 	bl	8000500 <__aeabi_f2d>
 8004658:	a38f      	add	r3, pc, #572	; (adr r3, 8004898 <TIM2_IRQHandler+0x2e0>)
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f7fb ffa7 	bl	80005b0 <__aeabi_dmul>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	a38d      	add	r3, pc, #564	; (adr r3, 80048a0 <TIM2_IRQHandler+0x2e8>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f7fb fde6 	bl	8000240 <__aeabi_dsub>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4614      	mov	r4, r2
 800467a:	461d      	mov	r5, r3
 800467c:	4b9a      	ldr	r3, [pc, #616]	; (80048e8 <TIM2_IRQHandler+0x330>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fb ff3d 	bl	8000500 <__aeabi_f2d>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	f7fb fdd7 	bl	8000240 <__aeabi_dsub>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	f7fc fa81 	bl	8000ba0 <__aeabi_d2f>
 800469e:	4603      	mov	r3, r0
 80046a0:	4a92      	ldr	r2, [pc, #584]	; (80048ec <TIM2_IRQHandler+0x334>)
 80046a2:	6013      	str	r3, [r2, #0]
		IBATT_for_offset_cal= 0.0635607965300084*i_datadigi - 126.923575896323;
 80046a4:	4b8c      	ldr	r3, [pc, #560]	; (80048d8 <TIM2_IRQHandler+0x320>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fb ff29 	bl	8000500 <__aeabi_f2d>
 80046ae:	a37a      	add	r3, pc, #488	; (adr r3, 8004898 <TIM2_IRQHandler+0x2e0>)
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f7fb ff7c 	bl	80005b0 <__aeabi_dmul>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4610      	mov	r0, r2
 80046be:	4619      	mov	r1, r3
 80046c0:	a377      	add	r3, pc, #476	; (adr r3, 80048a0 <TIM2_IRQHandler+0x2e8>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f7fb fdbb 	bl	8000240 <__aeabi_dsub>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	f7fc fa65 	bl	8000ba0 <__aeabi_d2f>
 80046d6:	4603      	mov	r3, r0
 80046d8:	4a85      	ldr	r2, [pc, #532]	; (80048f0 <TIM2_IRQHandler+0x338>)
 80046da:	6013      	str	r3, [r2, #0]
	}

	if(hitung_suhu >= interval_hitungsuhu) {
 80046dc:	4b77      	ldr	r3, [pc, #476]	; (80048bc <TIM2_IRQHandler+0x304>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	2bc7      	cmp	r3, #199	; 0xc7
 80046e2:	f240 81ce 	bls.w	8004a82 <TIM2_IRQHandler+0x4ca>

		Res_T1  = adc_value[0]*10000/(3900-adc_value[0]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 80046e6:	4b7a      	ldr	r3, [pc, #488]	; (80048d0 <TIM2_IRQHandler+0x318>)
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f242 7310 	movw	r3, #10000	; 0x2710
 80046f0:	fb03 f202 	mul.w	r2, r3, r2
 80046f4:	4b76      	ldr	r3, [pc, #472]	; (80048d0 <TIM2_IRQHandler+0x318>)
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80046fc:	330c      	adds	r3, #12
 80046fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fb56 	bl	8000db4 <__aeabi_i2f>
 8004708:	4603      	mov	r3, r0
 800470a:	4a7a      	ldr	r2, [pc, #488]	; (80048f4 <TIM2_IRQHandler+0x33c>)
 800470c:	6013      	str	r3, [r2, #0]
		Suhu_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800470e:	4b79      	ldr	r3, [pc, #484]	; (80048f4 <TIM2_IRQHandler+0x33c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb fef4 	bl	8000500 <__aeabi_f2d>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	f00c f976 	bl	8010a10 <log>
 8004724:	a360      	add	r3, pc, #384	; (adr r3, 80048a8 <TIM2_IRQHandler+0x2f0>)
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f7fb ff41 	bl	80005b0 <__aeabi_dmul>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	a35e      	add	r3, pc, #376	; (adr r3, 80048b0 <TIM2_IRQHandler+0x2f8>)
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f7fb fd82 	bl	8000244 <__adddf3>
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	f7fc fa2a 	bl	8000ba0 <__aeabi_d2f>
 800474c:	4603      	mov	r3, r0
 800474e:	4a6a      	ldr	r2, [pc, #424]	; (80048f8 <TIM2_IRQHandler+0x340>)
 8004750:	6013      	str	r3, [r2, #0]

		Res_T2  = adc_value[1]*10000/(3900-adc_value[1]);
 8004752:	4b5f      	ldr	r3, [pc, #380]	; (80048d0 <TIM2_IRQHandler+0x318>)
 8004754:	885b      	ldrh	r3, [r3, #2]
 8004756:	461a      	mov	r2, r3
 8004758:	f242 7310 	movw	r3, #10000	; 0x2710
 800475c:	fb03 f202 	mul.w	r2, r3, r2
 8004760:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <TIM2_IRQHandler+0x318>)
 8004762:	885b      	ldrh	r3, [r3, #2]
 8004764:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004768:	330c      	adds	r3, #12
 800476a:	fb92 f3f3 	sdiv	r3, r2, r3
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fb20 	bl	8000db4 <__aeabi_i2f>
 8004774:	4603      	mov	r3, r0
 8004776:	4a61      	ldr	r2, [pc, #388]	; (80048fc <TIM2_IRQHandler+0x344>)
 8004778:	6013      	str	r3, [r2, #0]
		Suhu_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800477a:	4b60      	ldr	r3, [pc, #384]	; (80048fc <TIM2_IRQHandler+0x344>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7fb febe 	bl	8000500 <__aeabi_f2d>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4610      	mov	r0, r2
 800478a:	4619      	mov	r1, r3
 800478c:	f00c f940 	bl	8010a10 <log>
 8004790:	a345      	add	r3, pc, #276	; (adr r3, 80048a8 <TIM2_IRQHandler+0x2f0>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fb ff0b 	bl	80005b0 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	a343      	add	r3, pc, #268	; (adr r3, 80048b0 <TIM2_IRQHandler+0x2f8>)
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f7fb fd4c 	bl	8000244 <__adddf3>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4610      	mov	r0, r2
 80047b2:	4619      	mov	r1, r3
 80047b4:	f7fc f9f4 	bl	8000ba0 <__aeabi_d2f>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4a51      	ldr	r2, [pc, #324]	; (8004900 <TIM2_IRQHandler+0x348>)
 80047bc:	6013      	str	r3, [r2, #0]

		Res_T3  = adc_value[5]*10000/(3900-adc_value[5]);
 80047be:	4b44      	ldr	r3, [pc, #272]	; (80048d0 <TIM2_IRQHandler+0x318>)
 80047c0:	895b      	ldrh	r3, [r3, #10]
 80047c2:	461a      	mov	r2, r3
 80047c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80047c8:	fb03 f202 	mul.w	r2, r3, r2
 80047cc:	4b40      	ldr	r3, [pc, #256]	; (80048d0 <TIM2_IRQHandler+0x318>)
 80047ce:	895b      	ldrh	r3, [r3, #10]
 80047d0:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80047d4:	330c      	adds	r3, #12
 80047d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc faea 	bl	8000db4 <__aeabi_i2f>
 80047e0:	4603      	mov	r3, r0
 80047e2:	4a48      	ldr	r2, [pc, #288]	; (8004904 <TIM2_IRQHandler+0x34c>)
 80047e4:	6013      	str	r3, [r2, #0]
		Suhu_T3 = -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80047e6:	4b47      	ldr	r3, [pc, #284]	; (8004904 <TIM2_IRQHandler+0x34c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb fe88 	bl	8000500 <__aeabi_f2d>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4610      	mov	r0, r2
 80047f6:	4619      	mov	r1, r3
 80047f8:	f00c f90a 	bl	8010a10 <log>
 80047fc:	a32a      	add	r3, pc, #168	; (adr r3, 80048a8 <TIM2_IRQHandler+0x2f0>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fed5 	bl	80005b0 <__aeabi_dmul>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	a328      	add	r3, pc, #160	; (adr r3, 80048b0 <TIM2_IRQHandler+0x2f8>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb fd16 	bl	8000244 <__adddf3>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	f7fc f9be 	bl	8000ba0 <__aeabi_d2f>
 8004824:	4603      	mov	r3, r0
 8004826:	4a38      	ldr	r2, [pc, #224]	; (8004908 <TIM2_IRQHandler+0x350>)
 8004828:	6013      	str	r3, [r2, #0]

		Res_T4  = adc_value[6]*10000/(3900-adc_value[6]);
 800482a:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <TIM2_IRQHandler+0x318>)
 800482c:	899b      	ldrh	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f242 7310 	movw	r3, #10000	; 0x2710
 8004834:	fb03 f202 	mul.w	r2, r3, r2
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <TIM2_IRQHandler+0x318>)
 800483a:	899b      	ldrh	r3, [r3, #12]
 800483c:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004840:	330c      	adds	r3, #12
 8004842:	fb92 f3f3 	sdiv	r3, r2, r3
 8004846:	4618      	mov	r0, r3
 8004848:	f7fc fab4 	bl	8000db4 <__aeabi_i2f>
 800484c:	4603      	mov	r3, r0
 800484e:	4a2f      	ldr	r2, [pc, #188]	; (800490c <TIM2_IRQHandler+0x354>)
 8004850:	6013      	str	r3, [r2, #0]
		Suhu_T4 = -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8004852:	4b2e      	ldr	r3, [pc, #184]	; (800490c <TIM2_IRQHandler+0x354>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fb fe52 	bl	8000500 <__aeabi_f2d>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	f00c f8d4 	bl	8010a10 <log>
 8004868:	a30f      	add	r3, pc, #60	; (adr r3, 80048a8 <TIM2_IRQHandler+0x2f0>)
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	f7fb fe9f 	bl	80005b0 <__aeabi_dmul>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	a30d      	add	r3, pc, #52	; (adr r3, 80048b0 <TIM2_IRQHandler+0x2f8>)
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f7fb fce0 	bl	8000244 <__adddf3>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	f7fc f988 	bl	8000ba0 <__aeabi_d2f>
 8004890:	4603      	mov	r3, r0
 8004892:	e03d      	b.n	8004910 <TIM2_IRQHandler+0x358>
 8004894:	f3af 8000 	nop.w
 8004898:	366772dc 	.word	0x366772dc
 800489c:	3fb04585 	.word	0x3fb04585
 80048a0:	de138532 	.word	0xde138532
 80048a4:	405fbb1b 	.word	0x405fbb1b
 80048a8:	cccccccd 	.word	0xcccccccd
 80048ac:	c0380ccc 	.word	0xc0380ccc
 80048b0:	b851eb85 	.word	0xb851eb85
 80048b4:	406ecd1e 	.word	0x406ecd1e
 80048b8:	20000ccc 	.word	0x20000ccc
 80048bc:	20000c70 	.word	0x20000c70
 80048c0:	20000788 	.word	0x20000788
 80048c4:	20000c6c 	.word	0x20000c6c
 80048c8:	20000c54 	.word	0x20000c54
 80048cc:	20000aac 	.word	0x20000aac
 80048d0:	200006fc 	.word	0x200006fc
 80048d4:	51eb851f 	.word	0x51eb851f
 80048d8:	2000068c 	.word	0x2000068c
 80048dc:	20000844 	.word	0x20000844
 80048e0:	20000694 	.word	0x20000694
 80048e4:	bf800000 	.word	0xbf800000
 80048e8:	20000784 	.word	0x20000784
 80048ec:	2000070c 	.word	0x2000070c
 80048f0:	2000078c 	.word	0x2000078c
 80048f4:	200006f8 	.word	0x200006f8
 80048f8:	20000720 	.word	0x20000720
 80048fc:	20000750 	.word	0x20000750
 8004900:	200007a0 	.word	0x200007a0
 8004904:	2000077c 	.word	0x2000077c
 8004908:	20000698 	.word	0x20000698
 800490c:	20000710 	.word	0x20000710
 8004910:	4a67      	ldr	r2, [pc, #412]	; (8004ab0 <TIM2_IRQHandler+0x4f8>)
 8004912:	6013      	str	r3, [r2, #0]

		Res_T5 = adc_value[2]*10000/(3900-adc_value[2]);
 8004914:	4b67      	ldr	r3, [pc, #412]	; (8004ab4 <TIM2_IRQHandler+0x4fc>)
 8004916:	889b      	ldrh	r3, [r3, #4]
 8004918:	461a      	mov	r2, r3
 800491a:	f242 7310 	movw	r3, #10000	; 0x2710
 800491e:	fb03 f202 	mul.w	r2, r3, r2
 8004922:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <TIM2_IRQHandler+0x4fc>)
 8004924:	889b      	ldrh	r3, [r3, #4]
 8004926:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 800492a:	330c      	adds	r3, #12
 800492c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004930:	4618      	mov	r0, r3
 8004932:	f7fc fa3f 	bl	8000db4 <__aeabi_i2f>
 8004936:	4603      	mov	r3, r0
 8004938:	4a5f      	ldr	r2, [pc, #380]	; (8004ab8 <TIM2_IRQHandler+0x500>)
 800493a:	6013      	str	r3, [r2, #0]
		MOS_Temp = -24.05*log(Res_T5) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800493c:	4b5e      	ldr	r3, [pc, #376]	; (8004ab8 <TIM2_IRQHandler+0x500>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f7fb fddd 	bl	8000500 <__aeabi_f2d>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	f00c f85f 	bl	8010a10 <log>
 8004952:	a353      	add	r3, pc, #332	; (adr r3, 8004aa0 <TIM2_IRQHandler+0x4e8>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fe2a 	bl	80005b0 <__aeabi_dmul>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4610      	mov	r0, r2
 8004962:	4619      	mov	r1, r3
 8004964:	a350      	add	r3, pc, #320	; (adr r3, 8004aa8 <TIM2_IRQHandler+0x4f0>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fb fc6b 	bl	8000244 <__adddf3>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	f7fc f913 	bl	8000ba0 <__aeabi_d2f>
 800497a:	4603      	mov	r3, r0
 800497c:	4a4f      	ldr	r2, [pc, #316]	; (8004abc <TIM2_IRQHandler+0x504>)
 800497e:	6013      	str	r3, [r2, #0]

		Res_T6 = adc_value[3]*10000/(3900-adc_value[3]);
 8004980:	4b4c      	ldr	r3, [pc, #304]	; (8004ab4 <TIM2_IRQHandler+0x4fc>)
 8004982:	88db      	ldrh	r3, [r3, #6]
 8004984:	461a      	mov	r2, r3
 8004986:	f242 7310 	movw	r3, #10000	; 0x2710
 800498a:	fb03 f202 	mul.w	r2, r3, r2
 800498e:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <TIM2_IRQHandler+0x4fc>)
 8004990:	88db      	ldrh	r3, [r3, #6]
 8004992:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004996:	330c      	adds	r3, #12
 8004998:	fb92 f3f3 	sdiv	r3, r2, r3
 800499c:	4618      	mov	r0, r3
 800499e:	f7fc fa09 	bl	8000db4 <__aeabi_i2f>
 80049a2:	4603      	mov	r3, r0
 80049a4:	4a46      	ldr	r2, [pc, #280]	; (8004ac0 <TIM2_IRQHandler+0x508>)
 80049a6:	6013      	str	r3, [r2, #0]
		CurrentSensor_Temp = -24.05*log(Res_T6) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80049a8:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <TIM2_IRQHandler+0x508>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fb fda7 	bl	8000500 <__aeabi_f2d>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	f00c f829 	bl	8010a10 <log>
 80049be:	a338      	add	r3, pc, #224	; (adr r3, 8004aa0 <TIM2_IRQHandler+0x4e8>)
 80049c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c4:	f7fb fdf4 	bl	80005b0 <__aeabi_dmul>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4610      	mov	r0, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	a335      	add	r3, pc, #212	; (adr r3, 8004aa8 <TIM2_IRQHandler+0x4f0>)
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fb fc35 	bl	8000244 <__adddf3>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4610      	mov	r0, r2
 80049e0:	4619      	mov	r1, r3
 80049e2:	f7fc f8dd 	bl	8000ba0 <__aeabi_d2f>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4a36      	ldr	r2, [pc, #216]	; (8004ac4 <TIM2_IRQHandler+0x50c>)
 80049ea:	6013      	str	r3, [r2, #0]

		if(Suhu_T1>=130) Suhu_T1 = 130;
 80049ec:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <TIM2_IRQHandler+0x510>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4936      	ldr	r1, [pc, #216]	; (8004acc <TIM2_IRQHandler+0x514>)
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fc fbe4 	bl	80011c0 <__aeabi_fcmpge>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <TIM2_IRQHandler+0x44c>
 80049fe:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <TIM2_IRQHandler+0x510>)
 8004a00:	4a32      	ldr	r2, [pc, #200]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a02:	601a      	str	r2, [r3, #0]
		if(Suhu_T2>=130) Suhu_T2 = 130;
 8004a04:	4b32      	ldr	r3, [pc, #200]	; (8004ad0 <TIM2_IRQHandler+0x518>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4930      	ldr	r1, [pc, #192]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fbd8 	bl	80011c0 <__aeabi_fcmpge>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <TIM2_IRQHandler+0x464>
 8004a16:	4b2e      	ldr	r3, [pc, #184]	; (8004ad0 <TIM2_IRQHandler+0x518>)
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a1a:	601a      	str	r2, [r3, #0]
		if(Suhu_T3>=130) Suhu_T3 = 130;
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <TIM2_IRQHandler+0x51c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	492a      	ldr	r1, [pc, #168]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fc fbcc 	bl	80011c0 <__aeabi_fcmpge>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <TIM2_IRQHandler+0x47c>
 8004a2e:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <TIM2_IRQHandler+0x51c>)
 8004a30:	4a26      	ldr	r2, [pc, #152]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a32:	601a      	str	r2, [r3, #0]
		if(Suhu_T4>=130) Suhu_T4 = 130;
 8004a34:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <TIM2_IRQHandler+0x4f8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4924      	ldr	r1, [pc, #144]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fc fbc0 	bl	80011c0 <__aeabi_fcmpge>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <TIM2_IRQHandler+0x494>
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <TIM2_IRQHandler+0x4f8>)
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a4a:	601a      	str	r2, [r3, #0]
		if(MOS_Temp>=130) MOS_Temp = 130;
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <TIM2_IRQHandler+0x504>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	491e      	ldr	r1, [pc, #120]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc fbb4 	bl	80011c0 <__aeabi_fcmpge>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <TIM2_IRQHandler+0x4ac>
 8004a5e:	4b17      	ldr	r3, [pc, #92]	; (8004abc <TIM2_IRQHandler+0x504>)
 8004a60:	4a1a      	ldr	r2, [pc, #104]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a62:	601a      	str	r2, [r3, #0]
		if(CurrentSensor_Temp>=130) CurrentSensor_Temp = 130;
 8004a64:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <TIM2_IRQHandler+0x50c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4918      	ldr	r1, [pc, #96]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc fba8 	bl	80011c0 <__aeabi_fcmpge>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <TIM2_IRQHandler+0x4c4>
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <TIM2_IRQHandler+0x50c>)
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <TIM2_IRQHandler+0x514>)
 8004a7a:	601a      	str	r2, [r3, #0]

		hitung_suhu=0;
 8004a7c:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <TIM2_IRQHandler+0x520>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	801a      	strh	r2, [r3, #0]
	}

	if(BATT_Start_Up==1)
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <TIM2_IRQHandler+0x524>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	f040 80d3 	bne.w	8004c32 <TIM2_IRQHandler+0x67a>
	{
		if(BATT_State == STATE_DISCHARGE){
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <TIM2_IRQHandler+0x528>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d127      	bne.n	8004ae4 <TIM2_IRQHandler+0x52c>
			Batt_Protection_when_discharge();
 8004a94:	f000 fa24 	bl	8004ee0 <Batt_Protection_when_discharge>
 8004a98:	e02a      	b.n	8004af0 <TIM2_IRQHandler+0x538>
 8004a9a:	bf00      	nop
 8004a9c:	f3af 8000 	nop.w
 8004aa0:	cccccccd 	.word	0xcccccccd
 8004aa4:	c0380ccc 	.word	0xc0380ccc
 8004aa8:	b851eb85 	.word	0xb851eb85
 8004aac:	406ecd1e 	.word	0x406ecd1e
 8004ab0:	20000758 	.word	0x20000758
 8004ab4:	200006fc 	.word	0x200006fc
 8004ab8:	2000072c 	.word	0x2000072c
 8004abc:	2000073c 	.word	0x2000073c
 8004ac0:	20000790 	.word	0x20000790
 8004ac4:	20000718 	.word	0x20000718
 8004ac8:	20000720 	.word	0x20000720
 8004acc:	43020000 	.word	0x43020000
 8004ad0:	200007a0 	.word	0x200007a0
 8004ad4:	20000698 	.word	0x20000698
 8004ad8:	20000c70 	.word	0x20000c70
 8004adc:	20000241 	.word	0x20000241
 8004ae0:	20000aa4 	.word	0x20000aa4
		}
		else if(BATT_State == STATE_CHARGE){
 8004ae4:	4ba6      	ldr	r3, [pc, #664]	; (8004d80 <TIM2_IRQHandler+0x7c8>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <TIM2_IRQHandler+0x538>
			Batt_Protection_when_charge();
 8004aec:	f001 f898 	bl	8005c20 <Batt_Protection_when_charge>
		}
		if(BATT_State == STATE_FULL_CHARGE_DISCHARGE){
 8004af0:	4ba3      	ldr	r3, [pc, #652]	; (8004d80 <TIM2_IRQHandler+0x7c8>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d101      	bne.n	8004afc <TIM2_IRQHandler+0x544>
			Batt_Protection_when_chargedischarge();
 8004af8:	f001 fd7e 	bl	80065f8 <Batt_Protection_when_chargedischarge>
		}

		//********************* Clearing protection status *****************************////
		// ---> Clearing UnderVoltage
		if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON){
 8004afc:	4ba1      	ldr	r3, [pc, #644]	; (8004d84 <TIM2_IRQHandler+0x7cc>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d008      	beq.n	8004b16 <TIM2_IRQHandler+0x55e>
 8004b04:	4ba0      	ldr	r3, [pc, #640]	; (8004d88 <TIM2_IRQHandler+0x7d0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	49a0      	ldr	r1, [pc, #640]	; (8004d8c <TIM2_IRQHandler+0x7d4>)
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc fb62 	bl	80011d4 <__aeabi_fcmpgt>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <TIM2_IRQHandler+0x572>
 8004b16:	4b9e      	ldr	r3, [pc, #632]	; (8004d90 <TIM2_IRQHandler+0x7d8>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <TIM2_IRQHandler+0x572>
			flag_trip_undervoltage=OFF;
 8004b1e:	4b9c      	ldr	r3, [pc, #624]	; (8004d90 <TIM2_IRQHandler+0x7d8>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=0;
 8004b24:	4b97      	ldr	r3, [pc, #604]	; (8004d84 <TIM2_IRQHandler+0x7cc>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCurrent Discharge
		if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1){
 8004b2a:	4b9a      	ldr	r3, [pc, #616]	; (8004d94 <TIM2_IRQHandler+0x7dc>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d109      	bne.n	8004b46 <TIM2_IRQHandler+0x58e>
 8004b32:	4b99      	ldr	r3, [pc, #612]	; (8004d98 <TIM2_IRQHandler+0x7e0>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d105      	bne.n	8004b46 <TIM2_IRQHandler+0x58e>
			flag_trip_overcurrentdischarge=OFF;
 8004b3a:	4b96      	ldr	r3, [pc, #600]	; (8004d94 <TIM2_IRQHandler+0x7dc>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=0;
 8004b40:	4b95      	ldr	r3, [pc, #596]	; (8004d98 <TIM2_IRQHandler+0x7e0>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverTemperature
		if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50)){
 8004b46:	4b95      	ldr	r3, [pc, #596]	; (8004d9c <TIM2_IRQHandler+0x7e4>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d126      	bne.n	8004b9c <TIM2_IRQHandler+0x5e4>
 8004b4e:	4b94      	ldr	r3, [pc, #592]	; (8004da0 <TIM2_IRQHandler+0x7e8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4994      	ldr	r1, [pc, #592]	; (8004da4 <TIM2_IRQHandler+0x7ec>)
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fc fb1f 	bl	8001198 <__aeabi_fcmplt>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01d      	beq.n	8004b9c <TIM2_IRQHandler+0x5e4>
 8004b60:	4b91      	ldr	r3, [pc, #580]	; (8004da8 <TIM2_IRQHandler+0x7f0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4991      	ldr	r1, [pc, #580]	; (8004dac <TIM2_IRQHandler+0x7f4>)
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fc fb16 	bl	8001198 <__aeabi_fcmplt>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d014      	beq.n	8004b9c <TIM2_IRQHandler+0x5e4>
 8004b72:	4b8f      	ldr	r3, [pc, #572]	; (8004db0 <TIM2_IRQHandler+0x7f8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	498b      	ldr	r1, [pc, #556]	; (8004da4 <TIM2_IRQHandler+0x7ec>)
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fc fb0d 	bl	8001198 <__aeabi_fcmplt>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <TIM2_IRQHandler+0x5e4>
 8004b84:	4b8b      	ldr	r3, [pc, #556]	; (8004db4 <TIM2_IRQHandler+0x7fc>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4988      	ldr	r1, [pc, #544]	; (8004dac <TIM2_IRQHandler+0x7f4>)
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fc fb04 	bl	8001198 <__aeabi_fcmplt>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <TIM2_IRQHandler+0x5e4>
			flag_trip_overtemperature=OFF;
 8004b96:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <TIM2_IRQHandler+0x7e4>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing UnderTemperature
		if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20)){
 8004b9c:	4b86      	ldr	r3, [pc, #536]	; (8004db8 <TIM2_IRQHandler+0x800>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d126      	bne.n	8004bf2 <TIM2_IRQHandler+0x63a>
 8004ba4:	4b7e      	ldr	r3, [pc, #504]	; (8004da0 <TIM2_IRQHandler+0x7e8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4984      	ldr	r1, [pc, #528]	; (8004dbc <TIM2_IRQHandler+0x804>)
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc fb12 	bl	80011d4 <__aeabi_fcmpgt>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01d      	beq.n	8004bf2 <TIM2_IRQHandler+0x63a>
 8004bb6:	4b7c      	ldr	r3, [pc, #496]	; (8004da8 <TIM2_IRQHandler+0x7f0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4980      	ldr	r1, [pc, #512]	; (8004dbc <TIM2_IRQHandler+0x804>)
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fc fb09 	bl	80011d4 <__aeabi_fcmpgt>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d014      	beq.n	8004bf2 <TIM2_IRQHandler+0x63a>
 8004bc8:	4b79      	ldr	r3, [pc, #484]	; (8004db0 <TIM2_IRQHandler+0x7f8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	497b      	ldr	r1, [pc, #492]	; (8004dbc <TIM2_IRQHandler+0x804>)
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fb00 	bl	80011d4 <__aeabi_fcmpgt>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <TIM2_IRQHandler+0x63a>
 8004bda:	4b76      	ldr	r3, [pc, #472]	; (8004db4 <TIM2_IRQHandler+0x7fc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4977      	ldr	r1, [pc, #476]	; (8004dbc <TIM2_IRQHandler+0x804>)
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc faf7 	bl	80011d4 <__aeabi_fcmpgt>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <TIM2_IRQHandler+0x63a>
			flag_trip_undertemperature=OFF;
 8004bec:	4b72      	ldr	r3, [pc, #456]	; (8004db8 <TIM2_IRQHandler+0x800>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverDischarge
		if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20){
 8004bf2:	4b73      	ldr	r3, [pc, #460]	; (8004dc0 <TIM2_IRQHandler+0x808>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10b      	bne.n	8004c12 <TIM2_IRQHandler+0x65a>
 8004bfa:	4b72      	ldr	r3, [pc, #456]	; (8004dc4 <TIM2_IRQHandler+0x80c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	496f      	ldr	r1, [pc, #444]	; (8004dbc <TIM2_IRQHandler+0x804>)
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc fae7 	bl	80011d4 <__aeabi_fcmpgt>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <TIM2_IRQHandler+0x65a>
			flag_trip_SOCOverDischarge=OFF;
 8004c0c:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <TIM2_IRQHandler+0x808>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCharge
		if(flag_trip_SOCOverCharge==ON && Pack_SOC<70){
 8004c12:	4b6d      	ldr	r3, [pc, #436]	; (8004dc8 <TIM2_IRQHandler+0x810>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10b      	bne.n	8004c32 <TIM2_IRQHandler+0x67a>
 8004c1a:	4b6a      	ldr	r3, [pc, #424]	; (8004dc4 <TIM2_IRQHandler+0x80c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	496b      	ldr	r1, [pc, #428]	; (8004dcc <TIM2_IRQHandler+0x814>)
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fc fab9 	bl	8001198 <__aeabi_fcmplt>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <TIM2_IRQHandler+0x67a>
			flag_trip_SOCOverCharge=OFF;
 8004c2c:	4b66      	ldr	r3, [pc, #408]	; (8004dc8 <TIM2_IRQHandler+0x810>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
		}
	}

	i++;
 8004c32:	4b67      	ldr	r3, [pc, #412]	; (8004dd0 <TIM2_IRQHandler+0x818>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a65      	ldr	r2, [pc, #404]	; (8004dd0 <TIM2_IRQHandler+0x818>)
 8004c3a:	6013      	str	r3, [r2, #0]
	i=i%maxdata;
 8004c3c:	4b64      	ldr	r3, [pc, #400]	; (8004dd0 <TIM2_IRQHandler+0x818>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4b64      	ldr	r3, [pc, #400]	; (8004dd4 <TIM2_IRQHandler+0x81c>)
 8004c42:	fb83 1302 	smull	r1, r3, r3, r2
 8004c46:	1199      	asrs	r1, r3, #6
 8004c48:	17d3      	asrs	r3, r2, #31
 8004c4a:	1acb      	subs	r3, r1, r3
 8004c4c:	21c8      	movs	r1, #200	; 0xc8
 8004c4e:	fb01 f303 	mul.w	r3, r1, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	4a5e      	ldr	r2, [pc, #376]	; (8004dd0 <TIM2_IRQHandler+0x818>)
 8004c56:	6013      	str	r3, [r2, #0]

	//////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
	if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8004c58:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <TIM2_IRQHandler+0x7c8>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d008      	beq.n	8004c72 <TIM2_IRQHandler+0x6ba>
 8004c60:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <TIM2_IRQHandler+0x7c8>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d004      	beq.n	8004c72 <TIM2_IRQHandler+0x6ba>
 8004c68:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <TIM2_IRQHandler+0x7c8>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	f040 80e2 	bne.w	8004e36 <TIM2_IRQHandler+0x87e>
	{
		time_soc++;
 8004c72:	4b59      	ldr	r3, [pc, #356]	; (8004dd8 <TIM2_IRQHandler+0x820>)
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	3301      	adds	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	4b57      	ldr	r3, [pc, #348]	; (8004dd8 <TIM2_IRQHandler+0x820>)
 8004c7c:	801a      	strh	r2, [r3, #0]
		sum_current+=IBATT;
 8004c7e:	4b57      	ldr	r3, [pc, #348]	; (8004ddc <TIM2_IRQHandler+0x824>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a57      	ldr	r2, [pc, #348]	; (8004de0 <TIM2_IRQHandler+0x828>)
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fb ffdf 	bl	8000c4c <__addsf3>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b52      	ldr	r3, [pc, #328]	; (8004ddc <TIM2_IRQHandler+0x824>)
 8004c94:	601a      	str	r2, [r3, #0]
		if(time_soc>99)
 8004c96:	4b50      	ldr	r3, [pc, #320]	; (8004dd8 <TIM2_IRQHandler+0x820>)
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	2b63      	cmp	r3, #99	; 0x63
 8004c9c:	f240 80cb 	bls.w	8004e36 <TIM2_IRQHandler+0x87e>
		{
			AH_Consumption = (-1*sum_current/100*(1.0/3600.0))/Pack_Cap*100-(4e-5); //Konsumsi System 4e-5
 8004ca0:	4b4e      	ldr	r3, [pc, #312]	; (8004ddc <TIM2_IRQHandler+0x824>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004ca8:	494e      	ldr	r1, [pc, #312]	; (8004de4 <TIM2_IRQHandler+0x82c>)
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc f98a 	bl	8000fc4 <__aeabi_fdiv>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fb fc24 	bl	8000500 <__aeabi_f2d>
 8004cb8:	a32d      	add	r3, pc, #180	; (adr r3, 8004d70 <TIM2_IRQHandler+0x7b8>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f7fb fc77 	bl	80005b0 <__aeabi_dmul>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4614      	mov	r4, r2
 8004cc8:	461d      	mov	r5, r3
 8004cca:	4b47      	ldr	r3, [pc, #284]	; (8004de8 <TIM2_IRQHandler+0x830>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fc16 	bl	8000500 <__aeabi_f2d>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7fb fd92 	bl	8000804 <__aeabi_ddiv>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <TIM2_IRQHandler+0x834>)
 8004cee:	f7fb fc5f 	bl	80005b0 <__aeabi_dmul>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	a31f      	add	r3, pc, #124	; (adr r3, 8004d78 <TIM2_IRQHandler+0x7c0>)
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f7fb fa9e 	bl	8000240 <__aeabi_dsub>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f7fb ff48 	bl	8000ba0 <__aeabi_d2f>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4a37      	ldr	r2, [pc, #220]	; (8004df0 <TIM2_IRQHandler+0x838>)
 8004d14:	6013      	str	r3, [r2, #0]
			Pack_SOC=Pack_SOC+AH_Consumption;
 8004d16:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <TIM2_IRQHandler+0x80c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a35      	ldr	r2, [pc, #212]	; (8004df0 <TIM2_IRQHandler+0x838>)
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fb ff93 	bl	8000c4c <__addsf3>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <TIM2_IRQHandler+0x80c>)
 8004d2c:	601a      	str	r2, [r3, #0]
			time_soc=0;
 8004d2e:	4b2a      	ldr	r3, [pc, #168]	; (8004dd8 <TIM2_IRQHandler+0x820>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	801a      	strh	r2, [r3, #0]
			sum_current=0;
 8004d34:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <TIM2_IRQHandler+0x824>)
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

			grad=(100-0)/(batas_atas-batas_bawah);
 8004d3c:	4b2d      	ldr	r3, [pc, #180]	; (8004df4 <TIM2_IRQHandler+0x83c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2d      	ldr	r2, [pc, #180]	; (8004df8 <TIM2_IRQHandler+0x840>)
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb ff7e 	bl	8000c48 <__aeabi_fsub>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4824      	ldr	r0, [pc, #144]	; (8004de4 <TIM2_IRQHandler+0x82c>)
 8004d52:	f7fc f937 	bl	8000fc4 <__aeabi_fdiv>
 8004d56:	4603      	mov	r3, r0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <TIM2_IRQHandler+0x844>)
 8004d5c:	601a      	str	r2, [r3, #0]
			constanta=grad*batas_bawah*(-1);
 8004d5e:	4b27      	ldr	r3, [pc, #156]	; (8004dfc <TIM2_IRQHandler+0x844>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a25      	ldr	r2, [pc, #148]	; (8004df8 <TIM2_IRQHandler+0x840>)
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	e049      	b.n	8004e00 <TIM2_IRQHandler+0x848>
 8004d6c:	f3af 8000 	nop.w
 8004d70:	789abcdf 	.word	0x789abcdf
 8004d74:	3f323456 	.word	0x3f323456
 8004d78:	88e368f1 	.word	0x88e368f1
 8004d7c:	3f04f8b5 	.word	0x3f04f8b5
 8004d80:	20000aa4 	.word	0x20000aa4
 8004d84:	2000076c 	.word	0x2000076c
 8004d88:	20000694 	.word	0x20000694
 8004d8c:	42580000 	.word	0x42580000
 8004d90:	20000715 	.word	0x20000715
 8004d94:	20000728 	.word	0x20000728
 8004d98:	200006a4 	.word	0x200006a4
 8004d9c:	20000690 	.word	0x20000690
 8004da0:	20000720 	.word	0x20000720
 8004da4:	42200000 	.word	0x42200000
 8004da8:	200007a0 	.word	0x200007a0
 8004dac:	42480000 	.word	0x42480000
 8004db0:	20000698 	.word	0x20000698
 8004db4:	20000758 	.word	0x20000758
 8004db8:	20000714 	.word	0x20000714
 8004dbc:	41a00000 	.word	0x41a00000
 8004dc0:	2000074c 	.word	0x2000074c
 8004dc4:	20000798 	.word	0x20000798
 8004dc8:	20000671 	.word	0x20000671
 8004dcc:	428c0000 	.word	0x428c0000
 8004dd0:	20000c54 	.word	0x20000c54
 8004dd4:	51eb851f 	.word	0x51eb851f
 8004dd8:	20000c48 	.word	0x20000c48
 8004ddc:	20000c80 	.word	0x20000c80
 8004de0:	2000070c 	.word	0x2000070c
 8004de4:	42c80000 	.word	0x42c80000
 8004de8:	20000014 	.word	0x20000014
 8004dec:	40590000 	.word	0x40590000
 8004df0:	20000678 	.word	0x20000678
 8004df4:	20000664 	.word	0x20000664
 8004df8:	20000724 	.word	0x20000724
 8004dfc:	20000730 	.word	0x20000730
 8004e00:	f7fc f82c 	bl	8000e5c <__aeabi_fmul>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <TIM2_IRQHandler+0x884>)
 8004e0c:	6013      	str	r3, [r2, #0]
			SOC_manipulasi=grad*Pack_SOC+constanta;
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <TIM2_IRQHandler+0x888>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <TIM2_IRQHandler+0x88c>)
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	4611      	mov	r1, r2
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fc f81f 	bl	8000e5c <__aeabi_fmul>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <TIM2_IRQHandler+0x884>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4619      	mov	r1, r3
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fb ff0f 	bl	8000c4c <__addsf3>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <TIM2_IRQHandler+0x890>)
 8004e34:	601a      	str	r2, [r3, #0]
		}
	}
	/* USER CODE END TIM2_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bdb0      	pop	{r4, r5, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	200006a0 	.word	0x200006a0
 8004e40:	20000730 	.word	0x20000730
 8004e44:	20000798 	.word	0x20000798
 8004e48:	20000740 	.word	0x20000740

08004e4c <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8004e50:	481d      	ldr	r0, [pc, #116]	; (8004ec8 <TIM3_IRQHandler+0x7c>)
 8004e52:	f006 fd83 	bl	800b95c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */
	testtim3++;
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <TIM3_IRQHandler+0x80>)
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <TIM3_IRQHandler+0x80>)
 8004e60:	801a      	strh	r2, [r3, #0]
	if(flag_start_shutdown==1){
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <TIM3_IRQHandler+0x84>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d12b      	bne.n	8004ec2 <TIM3_IRQHandler+0x76>
		if(Tick_33ms == 1) CANTX_BattParameter();
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <TIM3_IRQHandler+0x88>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d102      	bne.n	8004e78 <TIM3_IRQHandler+0x2c>
 8004e72:	f7fd fe6d 	bl	8002b50 <CANTX_BattParameter>
 8004e76:	e00f      	b.n	8004e98 <TIM3_IRQHandler+0x4c>
		else if(Tick_33ms == 2) CANTX_BattProtection();
 8004e78:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <TIM3_IRQHandler+0x88>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d102      	bne.n	8004e86 <TIM3_IRQHandler+0x3a>
 8004e80:	f7fd ffb0 	bl	8002de4 <CANTX_BattProtection>
 8004e84:	e008      	b.n	8004e98 <TIM3_IRQHandler+0x4c>
		else if(Tick_33ms == 3) {
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <TIM3_IRQHandler+0x88>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d104      	bne.n	8004e98 <TIM3_IRQHandler+0x4c>
			CANTX_ReportToCharger();
 8004e8e:	f7fe f8ef 	bl	8003070 <CANTX_ReportToCharger>
			Tick_33ms = 0;
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <TIM3_IRQHandler+0x88>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
		}
		if(Tick_BattId > 30) {
 8004e98:	4b0f      	ldr	r3, [pc, #60]	; (8004ed8 <TIM3_IRQHandler+0x8c>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b1e      	cmp	r3, #30
 8004e9e:	d904      	bls.n	8004eaa <TIM3_IRQHandler+0x5e>
			CANTX_BattId();
 8004ea0:	f7fe f95e 	bl	8003160 <CANTX_BattId>
			Tick_BattId = 0;
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <TIM3_IRQHandler+0x8c>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
		}
		Tick_33ms++;
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <TIM3_IRQHandler+0x88>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <TIM3_IRQHandler+0x88>)
 8004eb4:	701a      	strb	r2, [r3, #0]
		Tick_BattId++;
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <TIM3_IRQHandler+0x8c>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <TIM3_IRQHandler+0x8c>)
 8004ec0:	701a      	strb	r2, [r3, #0]
	}
	/* USER CODE END TIM3_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000c84 	.word	0x20000c84
 8004ecc:	20000c72 	.word	0x20000c72
 8004ed0:	20000691 	.word	0x20000691
 8004ed4:	20000c66 	.word	0x20000c66
 8004ed8:	20000c60 	.word	0x20000c60
 8004edc:	00000000 	.word	0x00000000

08004ee0 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void) {
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT/0.5)) {
 8004ee4:	4b84      	ldr	r3, [pc, #528]	; (80050f8 <Batt_Protection_when_discharge+0x218>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb09 	bl	8000500 <__aeabi_f2d>
 8004eee:	4604      	mov	r4, r0
 8004ef0:	460d      	mov	r5, r1
 8004ef2:	4b82      	ldr	r3, [pc, #520]	; (80050fc <Batt_Protection_when_discharge+0x21c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fb fb02 	bl	8000500 <__aeabi_f2d>
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	4b7f      	ldr	r3, [pc, #508]	; (8005100 <Batt_Protection_when_discharge+0x220>)
 8004f02:	f7fb fc7f 	bl	8000804 <__aeabi_ddiv>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb fddf 	bl	8000ad0 <__aeabi_dcmpgt>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d017      	beq.n	8004f48 <Batt_Protection_when_discharge+0x68>
		Isc = IBATT;
 8004f18:	4b77      	ldr	r3, [pc, #476]	; (80050f8 <Batt_Protection_when_discharge+0x218>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a79      	ldr	r2, [pc, #484]	; (8005104 <Batt_Protection_when_discharge+0x224>)
 8004f1e:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 8004f20:	4b76      	ldr	r3, [pc, #472]	; (80050fc <Batt_Protection_when_discharge+0x21c>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a78      	ldr	r2, [pc, #480]	; (8005108 <Batt_Protection_when_discharge+0x228>)
 8004f26:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8004f28:	4b78      	ldr	r3, [pc, #480]	; (800510c <Batt_Protection_when_discharge+0x22c>)
 8004f2a:	220c      	movs	r2, #12
 8004f2c:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8004f2e:	f7fc fb05 	bl	800153c <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 8004f32:	4b77      	ldr	r3, [pc, #476]	; (8005110 <Batt_Protection_when_discharge+0x230>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f3e:	4875      	ldr	r0, [pc, #468]	; (8005114 <Batt_Protection_when_discharge+0x234>)
 8004f40:	f004 fc61 	bl	8009806 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 8004f44:	f000 be58 	b.w	8005bf8 <Batt_Protection_when_discharge+0xd18>
	else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 8004f48:	4b6c      	ldr	r3, [pc, #432]	; (80050fc <Batt_Protection_when_discharge+0x21c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a72      	ldr	r2, [pc, #456]	; (8005118 <Batt_Protection_when_discharge+0x238>)
 8004f4e:	6812      	ldr	r2, [r2, #0]
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fc f920 	bl	8001198 <__aeabi_fcmplt>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80f2 	beq.w	8005144 <Batt_Protection_when_discharge+0x264>
 8004f60:	4b6e      	ldr	r3, [pc, #440]	; (800511c <Batt_Protection_when_discharge+0x23c>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f040 80ed 	bne.w	8005144 <Batt_Protection_when_discharge+0x264>
		fault_code=1;
 8004f6a:	4b68      	ldr	r3, [pc, #416]	; (800510c <Batt_Protection_when_discharge+0x22c>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8004f70:	4b6b      	ldr	r3, [pc, #428]	; (8005120 <Batt_Protection_when_discharge+0x240>)
 8004f72:	681c      	ldr	r4, [r3, #0]
 8004f74:	4b61      	ldr	r3, [pc, #388]	; (80050fc <Batt_Protection_when_discharge+0x21c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a67      	ldr	r2, [pc, #412]	; (8005118 <Batt_Protection_when_discharge+0x238>)
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc f820 	bl	8000fc4 <__aeabi_fdiv>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4619      	mov	r1, r3
 8004f88:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004f8c:	f7fb fe5c 	bl	8000c48 <__aeabi_fsub>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4619      	mov	r1, r3
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7fc f815 	bl	8000fc4 <__aeabi_fdiv>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b61      	ldr	r3, [pc, #388]	; (8005124 <Batt_Protection_when_discharge+0x244>)
 8004fa0:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8004fa2:	4b61      	ldr	r3, [pc, #388]	; (8005128 <Batt_Protection_when_discharge+0x248>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb faaa 	bl	8000500 <__aeabi_f2d>
 8004fac:	a350      	add	r3, pc, #320	; (adr r3, 80050f0 <Batt_Protection_when_discharge+0x210>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb f947 	bl	8000244 <__adddf3>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fb fdef 	bl	8000ba0 <__aeabi_d2f>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4a58      	ldr	r2, [pc, #352]	; (8005128 <Batt_Protection_when_discharge+0x248>)
 8004fc6:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8004fc8:	4b57      	ldr	r3, [pc, #348]	; (8005128 <Batt_Protection_when_discharge+0x248>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a55      	ldr	r2, [pc, #340]	; (8005124 <Batt_Protection_when_discharge+0x244>)
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc f8fe 	bl	80011d4 <__aeabi_fcmpgt>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d012      	beq.n	8005004 <Batt_Protection_when_discharge+0x124>
 8004fde:	4b4f      	ldr	r3, [pc, #316]	; (800511c <Batt_Protection_when_discharge+0x23c>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10e      	bne.n	8005004 <Batt_Protection_when_discharge+0x124>
			Batt_Open_Mode();
 8004fe6:	f7fc faa9 	bl	800153c <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8004fea:	4b4e      	ldr	r3, [pc, #312]	; (8005124 <Batt_Protection_when_discharge+0x244>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a4e      	ldr	r2, [pc, #312]	; (8005128 <Batt_Protection_when_discharge+0x248>)
 8004ff0:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 8004ff2:	4b4a      	ldr	r3, [pc, #296]	; (800511c <Batt_Protection_when_discharge+0x23c>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ffe:	484b      	ldr	r0, [pc, #300]	; (800512c <Batt_Protection_when_discharge+0x24c>)
 8005000:	f004 fc01 	bl	8009806 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 8005004:	4b45      	ldr	r3, [pc, #276]	; (800511c <Batt_Protection_when_discharge+0x23c>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f040 85f2 	bne.w	8005bf2 <Batt_Protection_when_discharge+0xd12>
			if(T_Under_trip-T_trip_cycle>15) {
 800500e:	4b45      	ldr	r3, [pc, #276]	; (8005124 <Batt_Protection_when_discharge+0x244>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a45      	ldr	r2, [pc, #276]	; (8005128 <Batt_Protection_when_discharge+0x248>)
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f7fb fe15 	bl	8000c48 <__aeabi_fsub>
 800501e:	4603      	mov	r3, r0
 8005020:	4943      	ldr	r1, [pc, #268]	; (8005130 <Batt_Protection_when_discharge+0x250>)
 8005022:	4618      	mov	r0, r3
 8005024:	f7fc f8d6 	bl	80011d4 <__aeabi_fcmpgt>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d019      	beq.n	8005062 <Batt_Protection_when_discharge+0x182>
				if((test_tim2%1000)==0) {
 800502e:	4b41      	ldr	r3, [pc, #260]	; (8005134 <Batt_Protection_when_discharge+0x254>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b41      	ldr	r3, [pc, #260]	; (8005138 <Batt_Protection_when_discharge+0x258>)
 8005034:	fb83 1302 	smull	r1, r3, r3, r2
 8005038:	1199      	asrs	r1, r3, #6
 800503a:	17d3      	asrs	r3, r2, #31
 800503c:	1acb      	subs	r3, r1, r3
 800503e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	f040 85d2 	bne.w	8005bf2 <Batt_Protection_when_discharge+0xd12>
					BUZZ_Toggle;
 800504e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005052:	4830      	ldr	r0, [pc, #192]	; (8005114 <Batt_Protection_when_discharge+0x234>)
 8005054:	f004 fbef 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005058:	4b36      	ldr	r3, [pc, #216]	; (8005134 <Batt_Protection_when_discharge+0x254>)
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 800505e:	f000 bdc8 	b.w	8005bf2 <Batt_Protection_when_discharge+0xd12>
			else if(T_Under_trip-T_trip_cycle>10) {
 8005062:	4b30      	ldr	r3, [pc, #192]	; (8005124 <Batt_Protection_when_discharge+0x244>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a30      	ldr	r2, [pc, #192]	; (8005128 <Batt_Protection_when_discharge+0x248>)
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f7fb fdeb 	bl	8000c48 <__aeabi_fsub>
 8005072:	4603      	mov	r3, r0
 8005074:	4931      	ldr	r1, [pc, #196]	; (800513c <Batt_Protection_when_discharge+0x25c>)
 8005076:	4618      	mov	r0, r3
 8005078:	f7fc f8ac 	bl	80011d4 <__aeabi_fcmpgt>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d018      	beq.n	80050b4 <Batt_Protection_when_discharge+0x1d4>
				if((test_tim2%100)==0) {
 8005082:	4b2c      	ldr	r3, [pc, #176]	; (8005134 <Batt_Protection_when_discharge+0x254>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b2e      	ldr	r3, [pc, #184]	; (8005140 <Batt_Protection_when_discharge+0x260>)
 8005088:	fb83 1302 	smull	r1, r3, r3, r2
 800508c:	1159      	asrs	r1, r3, #5
 800508e:	17d3      	asrs	r3, r2, #31
 8005090:	1acb      	subs	r3, r1, r3
 8005092:	2164      	movs	r1, #100	; 0x64
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	f040 85a9 	bne.w	8005bf2 <Batt_Protection_when_discharge+0xd12>
					BUZZ_Toggle;
 80050a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050a4:	481b      	ldr	r0, [pc, #108]	; (8005114 <Batt_Protection_when_discharge+0x234>)
 80050a6:	f004 fbc6 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80050aa:	4b22      	ldr	r3, [pc, #136]	; (8005134 <Batt_Protection_when_discharge+0x254>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 80050b0:	f000 bd9f 	b.w	8005bf2 <Batt_Protection_when_discharge+0xd12>
			else if(T_Under_trip-T_trip_cycle>1) {
 80050b4:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <Batt_Protection_when_discharge+0x244>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <Batt_Protection_when_discharge+0x248>)
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fb fdc2 	bl	8000c48 <__aeabi_fsub>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc f882 	bl	80011d4 <__aeabi_fcmpgt>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <Batt_Protection_when_discharge+0x1fa>
		if(flag_trip_undervoltage==OFF) {
 80050d6:	f000 bd8c 	b.w	8005bf2 <Batt_Protection_when_discharge+0xd12>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80050da:	2201      	movs	r2, #1
 80050dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050e0:	480c      	ldr	r0, [pc, #48]	; (8005114 <Batt_Protection_when_discharge+0x234>)
 80050e2:	f004 fb90 	bl	8009806 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 80050e6:	f000 bd84 	b.w	8005bf2 <Batt_Protection_when_discharge+0xd12>
 80050ea:	bf00      	nop
 80050ec:	f3af 8000 	nop.w
 80050f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80050f4:	3f50624d 	.word	0x3f50624d
 80050f8:	2000070c 	.word	0x2000070c
 80050fc:	20000694 	.word	0x20000694
 8005100:	3fe00000 	.word	0x3fe00000
 8005104:	200006f0 	.word	0x200006f0
 8005108:	20000738 	.word	0x20000738
 800510c:	2000071e 	.word	0x2000071e
 8005110:	20000673 	.word	0x20000673
 8005114:	40011000 	.word	0x40011000
 8005118:	2000002c 	.word	0x2000002c
 800511c:	20000715 	.word	0x20000715
 8005120:	20000038 	.word	0x20000038
 8005124:	20000c3c 	.word	0x20000c3c
 8005128:	20000c5c 	.word	0x20000c5c
 800512c:	40010800 	.word	0x40010800
 8005130:	41700000 	.word	0x41700000
 8005134:	20000788 	.word	0x20000788
 8005138:	10624dd3 	.word	0x10624dd3
 800513c:	41200000 	.word	0x41200000
 8005140:	51eb851f 	.word	0x51eb851f
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {   //Indikasi terjadi Over Current
 8005144:	4b94      	ldr	r3, [pc, #592]	; (8005398 <Batt_Protection_when_discharge+0x4b8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a94      	ldr	r2, [pc, #592]	; (800539c <Batt_Protection_when_discharge+0x4bc>)
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	4611      	mov	r1, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f7fb fd7a 	bl	8000c48 <__aeabi_fsub>
 8005154:	4603      	mov	r3, r0
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	4618      	mov	r0, r3
 800515c:	f7fc f83a 	bl	80011d4 <__aeabi_fcmpgt>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 8138 	beq.w	80053d8 <Batt_Protection_when_discharge+0x4f8>
 8005168:	4b8d      	ldr	r3, [pc, #564]	; (80053a0 <Batt_Protection_when_discharge+0x4c0>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 8133 	bne.w	80053d8 <Batt_Protection_when_discharge+0x4f8>
		fault_code=2;
 8005172:	4b8c      	ldr	r3, [pc, #560]	; (80053a4 <Batt_Protection_when_discharge+0x4c4>)
 8005174:	2202      	movs	r2, #2
 8005176:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=50/(((IBATT/6.9)*(IBATT/6.9))-1);
 8005178:	4b87      	ldr	r3, [pc, #540]	; (8005398 <Batt_Protection_when_discharge+0x4b8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fb f9bf 	bl	8000500 <__aeabi_f2d>
 8005182:	a381      	add	r3, pc, #516	; (adr r3, 8005388 <Batt_Protection_when_discharge+0x4a8>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fb fb3c 	bl	8000804 <__aeabi_ddiv>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4614      	mov	r4, r2
 8005192:	461d      	mov	r5, r3
 8005194:	4b80      	ldr	r3, [pc, #512]	; (8005398 <Batt_Protection_when_discharge+0x4b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7fb f9b1 	bl	8000500 <__aeabi_f2d>
 800519e:	a37a      	add	r3, pc, #488	; (adr r3, 8005388 <Batt_Protection_when_discharge+0x4a8>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f7fb fb2e 	bl	8000804 <__aeabi_ddiv>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4620      	mov	r0, r4
 80051ae:	4629      	mov	r1, r5
 80051b0:	f7fb f9fe 	bl	80005b0 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4610      	mov	r0, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	4b79      	ldr	r3, [pc, #484]	; (80053a8 <Batt_Protection_when_discharge+0x4c8>)
 80051c2:	f7fb f83d 	bl	8000240 <__aeabi_dsub>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	f04f 0000 	mov.w	r0, #0
 80051ce:	4977      	ldr	r1, [pc, #476]	; (80053ac <Batt_Protection_when_discharge+0x4cc>)
 80051d0:	f7fb fb18 	bl	8000804 <__aeabi_ddiv>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4610      	mov	r0, r2
 80051da:	4619      	mov	r1, r3
 80051dc:	f7fb fce0 	bl	8000ba0 <__aeabi_d2f>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4a73      	ldr	r2, [pc, #460]	; (80053b0 <Batt_Protection_when_discharge+0x4d0>)
 80051e4:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 80051e6:	4b73      	ldr	r3, [pc, #460]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fb f988 	bl	8000500 <__aeabi_f2d>
 80051f0:	a367      	add	r3, pc, #412	; (adr r3, 8005390 <Batt_Protection_when_discharge+0x4b0>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb f825 	bl	8000244 <__adddf3>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	f7fb fccd 	bl	8000ba0 <__aeabi_d2f>
 8005206:	4603      	mov	r3, r0
 8005208:	4a6a      	ldr	r2, [pc, #424]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 800520a:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 800520c:	4b69      	ldr	r3, [pc, #420]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a67      	ldr	r2, [pc, #412]	; (80053b0 <Batt_Protection_when_discharge+0x4d0>)
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f7fb ffdc 	bl	80011d4 <__aeabi_fcmpgt>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d012      	beq.n	8005248 <Batt_Protection_when_discharge+0x368>
 8005222:	4b5f      	ldr	r3, [pc, #380]	; (80053a0 <Batt_Protection_when_discharge+0x4c0>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10e      	bne.n	8005248 <Batt_Protection_when_discharge+0x368>
			Batt_Open_Mode();
 800522a:	f7fc f987 	bl	800153c <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 800522e:	4b60      	ldr	r3, [pc, #384]	; (80053b0 <Batt_Protection_when_discharge+0x4d0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a60      	ldr	r2, [pc, #384]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 8005234:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 8005236:	4b5a      	ldr	r3, [pc, #360]	; (80053a0 <Batt_Protection_when_discharge+0x4c0>)
 8005238:	2201      	movs	r2, #1
 800523a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800523c:	2200      	movs	r2, #0
 800523e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005242:	485d      	ldr	r0, [pc, #372]	; (80053b8 <Batt_Protection_when_discharge+0x4d8>)
 8005244:	f004 fadf 	bl	8009806 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8005248:	4b55      	ldr	r3, [pc, #340]	; (80053a0 <Batt_Protection_when_discharge+0x4c0>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 84d2 	bne.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005252:	4b57      	ldr	r3, [pc, #348]	; (80053b0 <Batt_Protection_when_discharge+0x4d0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a57      	ldr	r2, [pc, #348]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	4611      	mov	r1, r2
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb fcf3 	bl	8000c48 <__aeabi_fsub>
 8005262:	4603      	mov	r3, r0
 8005264:	4955      	ldr	r1, [pc, #340]	; (80053bc <Batt_Protection_when_discharge+0x4dc>)
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb ffb4 	bl	80011d4 <__aeabi_fcmpgt>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d019      	beq.n	80052a6 <Batt_Protection_when_discharge+0x3c6>
				if((test_tim2%1000)==0) {
 8005272:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <Batt_Protection_when_discharge+0x4e0>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b53      	ldr	r3, [pc, #332]	; (80053c4 <Batt_Protection_when_discharge+0x4e4>)
 8005278:	fb83 1302 	smull	r1, r3, r3, r2
 800527c:	1199      	asrs	r1, r3, #6
 800527e:	17d3      	asrs	r3, r2, #31
 8005280:	1acb      	subs	r3, r1, r3
 8005282:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 84b2 	bne.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
					BUZZ_Toggle;
 8005292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005296:	4848      	ldr	r0, [pc, #288]	; (80053b8 <Batt_Protection_when_discharge+0x4d8>)
 8005298:	f004 facd 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800529c:	4b48      	ldr	r3, [pc, #288]	; (80053c0 <Batt_Protection_when_discharge+0x4e0>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 80052a2:	f000 bca8 	b.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10){
 80052a6:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <Batt_Protection_when_discharge+0x4d0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a42      	ldr	r2, [pc, #264]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fb fcc9 	bl	8000c48 <__aeabi_fsub>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4943      	ldr	r1, [pc, #268]	; (80053c8 <Batt_Protection_when_discharge+0x4e8>)
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb ff8a 	bl	80011d4 <__aeabi_fcmpgt>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <Batt_Protection_when_discharge+0x418>
				if((test_tim2%100)==0){
 80052c6:	4b3e      	ldr	r3, [pc, #248]	; (80053c0 <Batt_Protection_when_discharge+0x4e0>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b40      	ldr	r3, [pc, #256]	; (80053cc <Batt_Protection_when_discharge+0x4ec>)
 80052cc:	fb83 1302 	smull	r1, r3, r3, r2
 80052d0:	1159      	asrs	r1, r3, #5
 80052d2:	17d3      	asrs	r3, r2, #31
 80052d4:	1acb      	subs	r3, r1, r3
 80052d6:	2164      	movs	r1, #100	; 0x64
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 8489 	bne.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
					BUZZ_Toggle;
 80052e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052e8:	4833      	ldr	r0, [pc, #204]	; (80053b8 <Batt_Protection_when_discharge+0x4d8>)
 80052ea:	f004 faa4 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80052ee:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <Batt_Protection_when_discharge+0x4e0>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 80052f4:	f000 bc7f 	b.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3){
 80052f8:	4b2d      	ldr	r3, [pc, #180]	; (80053b0 <Batt_Protection_when_discharge+0x4d0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2d      	ldr	r2, [pc, #180]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 80052fe:	6812      	ldr	r2, [r2, #0]
 8005300:	4611      	mov	r1, r2
 8005302:	4618      	mov	r0, r3
 8005304:	f7fb fca0 	bl	8000c48 <__aeabi_fsub>
 8005308:	4603      	mov	r3, r0
 800530a:	4931      	ldr	r1, [pc, #196]	; (80053d0 <Batt_Protection_when_discharge+0x4f0>)
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb ff61 	bl	80011d4 <__aeabi_fcmpgt>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d019      	beq.n	800534c <Batt_Protection_when_discharge+0x46c>
				if((test_tim2%10)==0){
 8005318:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <Batt_Protection_when_discharge+0x4e0>)
 800531a:	6819      	ldr	r1, [r3, #0]
 800531c:	4b2d      	ldr	r3, [pc, #180]	; (80053d4 <Batt_Protection_when_discharge+0x4f4>)
 800531e:	fb83 2301 	smull	r2, r3, r3, r1
 8005322:	109a      	asrs	r2, r3, #2
 8005324:	17cb      	asrs	r3, r1, #31
 8005326:	1ad2      	subs	r2, r2, r3
 8005328:	4613      	mov	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	1aca      	subs	r2, r1, r3
 8005332:	2a00      	cmp	r2, #0
 8005334:	f040 845f 	bne.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
					BUZZ_Toggle;
 8005338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800533c:	481e      	ldr	r0, [pc, #120]	; (80053b8 <Batt_Protection_when_discharge+0x4d8>)
 800533e:	f004 fa7a 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005342:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <Batt_Protection_when_discharge+0x4e0>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8005348:	f000 bc55 	b.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1){
 800534c:	4b18      	ldr	r3, [pc, #96]	; (80053b0 <Batt_Protection_when_discharge+0x4d0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <Batt_Protection_when_discharge+0x4d4>)
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f7fb fc76 	bl	8000c48 <__aeabi_fsub>
 800535c:	4603      	mov	r3, r0
 800535e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb ff36 	bl	80011d4 <__aeabi_fcmpgt>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <Batt_Protection_when_discharge+0x492>
		if(flag_trip_overcurrentdischarge==OFF) {
 800536e:	f000 bc42 	b.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005372:	2201      	movs	r2, #1
 8005374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005378:	480f      	ldr	r0, [pc, #60]	; (80053b8 <Batt_Protection_when_discharge+0x4d8>)
 800537a:	f004 fa44 	bl	8009806 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 800537e:	f000 bc3a 	b.w	8005bf6 <Batt_Protection_when_discharge+0xd16>
 8005382:	bf00      	nop
 8005384:	f3af 8000 	nop.w
 8005388:	9999999a 	.word	0x9999999a
 800538c:	401b9999 	.word	0x401b9999
 8005390:	47ae147b 	.word	0x47ae147b
 8005394:	3f847ae1 	.word	0x3f847ae1
 8005398:	2000070c 	.word	0x2000070c
 800539c:	20000018 	.word	0x20000018
 80053a0:	20000728 	.word	0x20000728
 80053a4:	2000071e 	.word	0x2000071e
 80053a8:	3ff00000 	.word	0x3ff00000
 80053ac:	40490000 	.word	0x40490000
 80053b0:	20000680 	.word	0x20000680
 80053b4:	20000760 	.word	0x20000760
 80053b8:	40011000 	.word	0x40011000
 80053bc:	41700000 	.word	0x41700000
 80053c0:	20000788 	.word	0x20000788
 80053c4:	10624dd3 	.word	0x10624dd3
 80053c8:	41200000 	.word	0x41200000
 80053cc:	51eb851f 	.word	0x51eb851f
 80053d0:	40400000 	.word	0x40400000
 80053d4:	66666667 	.word	0x66666667
	else if(((Suhu_T1>Temp_Over_Set)||(Suhu_T2>Temp_Over_Set)||(Suhu_T3>Temp_Over_Set)||(Suhu_T4>Temp_Over_Set)) && flag_trip_overtemperature==OFF) {
 80053d8:	4b9a      	ldr	r3, [pc, #616]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a9a      	ldr	r2, [pc, #616]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb fef6 	bl	80011d4 <__aeabi_fcmpgt>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d121      	bne.n	8005432 <Batt_Protection_when_discharge+0x552>
 80053ee:	4b97      	ldr	r3, [pc, #604]	; (800564c <Batt_Protection_when_discharge+0x76c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a95      	ldr	r2, [pc, #596]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fb feeb 	bl	80011d4 <__aeabi_fcmpgt>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d116      	bne.n	8005432 <Batt_Protection_when_discharge+0x552>
 8005404:	4b92      	ldr	r3, [pc, #584]	; (8005650 <Batt_Protection_when_discharge+0x770>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a8f      	ldr	r2, [pc, #572]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f7fb fee0 	bl	80011d4 <__aeabi_fcmpgt>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <Batt_Protection_when_discharge+0x552>
 800541a:	4b8e      	ldr	r3, [pc, #568]	; (8005654 <Batt_Protection_when_discharge+0x774>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a8a      	ldr	r2, [pc, #552]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f7fb fed5 	bl	80011d4 <__aeabi_fcmpgt>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 811f 	beq.w	8005670 <Batt_Protection_when_discharge+0x790>
 8005432:	4b89      	ldr	r3, [pc, #548]	; (8005658 <Batt_Protection_when_discharge+0x778>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f040 811a 	bne.w	8005670 <Batt_Protection_when_discharge+0x790>
		fault_code=3;
 800543c:	4b87      	ldr	r3, [pc, #540]	; (800565c <Batt_Protection_when_discharge+0x77c>)
 800543e:	2203      	movs	r2, #3
 8005440:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8005442:	4b80      	ldr	r3, [pc, #512]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a80      	ldr	r2, [pc, #512]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f7fb fec1 	bl	80011d4 <__aeabi_fcmpgt>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02a      	beq.n	80054ae <Batt_Protection_when_discharge+0x5ce>
 8005458:	4b7b      	ldr	r3, [pc, #492]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005460:	4618      	mov	r0, r3
 8005462:	f7fb fbf3 	bl	8000c4c <__addsf3>
 8005466:	4603      	mov	r3, r0
 8005468:	461a      	mov	r2, r3
 800546a:	4b76      	ldr	r3, [pc, #472]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fb fea5 	bl	80011c0 <__aeabi_fcmpge>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d018      	beq.n	80054ae <Batt_Protection_when_discharge+0x5ce>
			if((test_tim2%1000)==0) {
 800547c:	4b78      	ldr	r3, [pc, #480]	; (8005660 <Batt_Protection_when_discharge+0x780>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b78      	ldr	r3, [pc, #480]	; (8005664 <Batt_Protection_when_discharge+0x784>)
 8005482:	fb83 1302 	smull	r1, r3, r3, r2
 8005486:	1199      	asrs	r1, r3, #6
 8005488:	17d3      	asrs	r3, r2, #31
 800548a:	1acb      	subs	r3, r1, r3
 800548c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 80d2 	bne.w	8005640 <Batt_Protection_when_discharge+0x760>
				BUZZ_Toggle;
 800549c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054a0:	4871      	ldr	r0, [pc, #452]	; (8005668 <Batt_Protection_when_discharge+0x788>)
 80054a2:	f004 f9c8 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80054a6:	4b6e      	ldr	r3, [pc, #440]	; (8005660 <Batt_Protection_when_discharge+0x780>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 80054ac:	e0c8      	b.n	8005640 <Batt_Protection_when_discharge+0x760>
		else if(Suhu_T1>Temp_Over_Set+1 && Suhu_T1<=Temp_Over_Set+2){
 80054ae:	4b66      	ldr	r3, [pc, #408]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fb fbc8 	bl	8000c4c <__addsf3>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	4b60      	ldr	r3, [pc, #384]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f7fb fe66 	bl	8001198 <__aeabi_fcmplt>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d02a      	beq.n	8005528 <Batt_Protection_when_discharge+0x648>
 80054d2:	4b5d      	ldr	r3, [pc, #372]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fb fbb6 	bl	8000c4c <__addsf3>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	4b57      	ldr	r3, [pc, #348]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f7fb fe68 	bl	80011c0 <__aeabi_fcmpge>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d018      	beq.n	8005528 <Batt_Protection_when_discharge+0x648>
			if((test_tim2%500)==0){
 80054f6:	4b5a      	ldr	r3, [pc, #360]	; (8005660 <Batt_Protection_when_discharge+0x780>)
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b5a      	ldr	r3, [pc, #360]	; (8005664 <Batt_Protection_when_discharge+0x784>)
 80054fc:	fb83 1302 	smull	r1, r3, r3, r2
 8005500:	1159      	asrs	r1, r3, #5
 8005502:	17d3      	asrs	r3, r2, #31
 8005504:	1acb      	subs	r3, r1, r3
 8005506:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800550a:	fb01 f303 	mul.w	r3, r1, r3
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 8095 	bne.w	8005640 <Batt_Protection_when_discharge+0x760>
				BUZZ_Toggle;
 8005516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800551a:	4853      	ldr	r0, [pc, #332]	; (8005668 <Batt_Protection_when_discharge+0x788>)
 800551c:	f004 f98b 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005520:	4b4f      	ldr	r3, [pc, #316]	; (8005660 <Batt_Protection_when_discharge+0x780>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005526:	e08b      	b.n	8005640 <Batt_Protection_when_discharge+0x760>
		else if(Suhu_T1>Temp_Over_Set+2 && Suhu_T1<=Temp_Over_Set+3){
 8005528:	4b47      	ldr	r3, [pc, #284]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005530:	4618      	mov	r0, r3
 8005532:	f7fb fb8b 	bl	8000c4c <__addsf3>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	4b42      	ldr	r3, [pc, #264]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	4610      	mov	r0, r2
 8005542:	f7fb fe29 	bl	8001198 <__aeabi_fcmplt>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d028      	beq.n	800559e <Batt_Protection_when_discharge+0x6be>
 800554c:	4b3e      	ldr	r3, [pc, #248]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4946      	ldr	r1, [pc, #280]	; (800566c <Batt_Protection_when_discharge+0x78c>)
 8005552:	4618      	mov	r0, r3
 8005554:	f7fb fb7a 	bl	8000c4c <__addsf3>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	4b39      	ldr	r3, [pc, #228]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f7fb fe2c 	bl	80011c0 <__aeabi_fcmpge>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d017      	beq.n	800559e <Batt_Protection_when_discharge+0x6be>
			if((test_tim2%500)==0){
 800556e:	4b3c      	ldr	r3, [pc, #240]	; (8005660 <Batt_Protection_when_discharge+0x780>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b3c      	ldr	r3, [pc, #240]	; (8005664 <Batt_Protection_when_discharge+0x784>)
 8005574:	fb83 1302 	smull	r1, r3, r3, r2
 8005578:	1159      	asrs	r1, r3, #5
 800557a:	17d3      	asrs	r3, r2, #31
 800557c:	1acb      	subs	r3, r1, r3
 800557e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d159      	bne.n	8005640 <Batt_Protection_when_discharge+0x760>
				BUZZ_Toggle;
 800558c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005590:	4835      	ldr	r0, [pc, #212]	; (8005668 <Batt_Protection_when_discharge+0x788>)
 8005592:	f004 f950 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005596:	4b32      	ldr	r3, [pc, #200]	; (8005660 <Batt_Protection_when_discharge+0x780>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800559c:	e050      	b.n	8005640 <Batt_Protection_when_discharge+0x760>
		else if(Suhu_T1>Temp_Over_Set+3||Suhu_T2>Temp_Over_Set+3||Suhu_T3>Temp_Over_Set+3||Suhu_T4>Temp_Over_Set+3){
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4932      	ldr	r1, [pc, #200]	; (800566c <Batt_Protection_when_discharge+0x78c>)
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fb fb51 	bl	8000c4c <__addsf3>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	4b25      	ldr	r3, [pc, #148]	; (8005644 <Batt_Protection_when_discharge+0x764>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f7fb fdef 	bl	8001198 <__aeabi_fcmplt>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d133      	bne.n	8005628 <Batt_Protection_when_discharge+0x748>
 80055c0:	4b21      	ldr	r3, [pc, #132]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4929      	ldr	r1, [pc, #164]	; (800566c <Batt_Protection_when_discharge+0x78c>)
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fb fb40 	bl	8000c4c <__addsf3>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	4b1e      	ldr	r3, [pc, #120]	; (800564c <Batt_Protection_when_discharge+0x76c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4619      	mov	r1, r3
 80055d6:	4610      	mov	r0, r2
 80055d8:	f7fb fdde 	bl	8001198 <__aeabi_fcmplt>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d122      	bne.n	8005628 <Batt_Protection_when_discharge+0x748>
 80055e2:	4b19      	ldr	r3, [pc, #100]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4921      	ldr	r1, [pc, #132]	; (800566c <Batt_Protection_when_discharge+0x78c>)
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fb fb2f 	bl	8000c4c <__addsf3>
 80055ee:	4603      	mov	r3, r0
 80055f0:	461a      	mov	r2, r3
 80055f2:	4b17      	ldr	r3, [pc, #92]	; (8005650 <Batt_Protection_when_discharge+0x770>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fb fdcd 	bl	8001198 <__aeabi_fcmplt>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d111      	bne.n	8005628 <Batt_Protection_when_discharge+0x748>
 8005604:	4b10      	ldr	r3, [pc, #64]	; (8005648 <Batt_Protection_when_discharge+0x768>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4918      	ldr	r1, [pc, #96]	; (800566c <Batt_Protection_when_discharge+0x78c>)
 800560a:	4618      	mov	r0, r3
 800560c:	f7fb fb1e 	bl	8000c4c <__addsf3>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	4b0f      	ldr	r3, [pc, #60]	; (8005654 <Batt_Protection_when_discharge+0x774>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7fb fdbc 	bl	8001198 <__aeabi_fcmplt>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d100      	bne.n	8005628 <Batt_Protection_when_discharge+0x748>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8005626:	e2e7      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
			Batt_Open_Mode();
 8005628:	f7fb ff88 	bl	800153c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 800562c:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <Batt_Protection_when_discharge+0x778>)
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005632:	2200      	movs	r2, #0
 8005634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005638:	480b      	ldr	r0, [pc, #44]	; (8005668 <Batt_Protection_when_discharge+0x788>)
 800563a:	f004 f8e4 	bl	8009806 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 800563e:	e2db      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
 8005640:	e2da      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
 8005642:	bf00      	nop
 8005644:	20000720 	.word	0x20000720
 8005648:	20000020 	.word	0x20000020
 800564c:	200007a0 	.word	0x200007a0
 8005650:	20000698 	.word	0x20000698
 8005654:	20000758 	.word	0x20000758
 8005658:	20000690 	.word	0x20000690
 800565c:	2000071e 	.word	0x2000071e
 8005660:	20000788 	.word	0x20000788
 8005664:	10624dd3 	.word	0x10624dd3
 8005668:	40011000 	.word	0x40011000
 800566c:	40400000 	.word	0x40400000
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8005670:	4b96      	ldr	r3, [pc, #600]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a96      	ldr	r2, [pc, #600]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f7fb fae4 	bl	8000c48 <__aeabi_fsub>
 8005680:	4603      	mov	r3, r0
 8005682:	4994      	ldr	r1, [pc, #592]	; (80058d4 <Batt_Protection_when_discharge+0x9f4>)
 8005684:	4618      	mov	r0, r3
 8005686:	f7fb fd91 	bl	80011ac <__aeabi_fcmple>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d130      	bne.n	80056f2 <Batt_Protection_when_discharge+0x812>
 8005690:	4b91      	ldr	r3, [pc, #580]	; (80058d8 <Batt_Protection_when_discharge+0x9f8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a8e      	ldr	r2, [pc, #568]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	4611      	mov	r1, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7fb fad4 	bl	8000c48 <__aeabi_fsub>
 80056a0:	4603      	mov	r3, r0
 80056a2:	498c      	ldr	r1, [pc, #560]	; (80058d4 <Batt_Protection_when_discharge+0x9f4>)
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fb fd81 	bl	80011ac <__aeabi_fcmple>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d120      	bne.n	80056f2 <Batt_Protection_when_discharge+0x812>
 80056b0:	4b8a      	ldr	r3, [pc, #552]	; (80058dc <Batt_Protection_when_discharge+0x9fc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a86      	ldr	r2, [pc, #536]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fb fac4 	bl	8000c48 <__aeabi_fsub>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4984      	ldr	r1, [pc, #528]	; (80058d4 <Batt_Protection_when_discharge+0x9f4>)
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fb fd71 	bl	80011ac <__aeabi_fcmple>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <Batt_Protection_when_discharge+0x812>
 80056d0:	4b83      	ldr	r3, [pc, #524]	; (80058e0 <Batt_Protection_when_discharge+0xa00>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a7e      	ldr	r2, [pc, #504]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fb fab4 	bl	8000c48 <__aeabi_fsub>
 80056e0:	4603      	mov	r3, r0
 80056e2:	497c      	ldr	r1, [pc, #496]	; (80058d4 <Batt_Protection_when_discharge+0x9f4>)
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fb fd61 	bl	80011ac <__aeabi_fcmple>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8105 	beq.w	80058fc <Batt_Protection_when_discharge+0xa1c>
 80056f2:	4b7c      	ldr	r3, [pc, #496]	; (80058e4 <Batt_Protection_when_discharge+0xa04>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f040 8100 	bne.w	80058fc <Batt_Protection_when_discharge+0xa1c>
		fault_code=4;
 80056fc:	4b7a      	ldr	r3, [pc, #488]	; (80058e8 <Batt_Protection_when_discharge+0xa08>)
 80056fe:	2204      	movs	r2, #4
 8005700:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005702:	4b73      	ldr	r3, [pc, #460]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4973      	ldr	r1, [pc, #460]	; (80058d4 <Batt_Protection_when_discharge+0x9f4>)
 8005708:	4618      	mov	r0, r3
 800570a:	f7fb fa9f 	bl	8000c4c <__addsf3>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	4b6e      	ldr	r3, [pc, #440]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7fb fd51 	bl	80011c0 <__aeabi_fcmpge>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d029      	beq.n	8005778 <Batt_Protection_when_discharge+0x898>
 8005724:	4b6a      	ldr	r3, [pc, #424]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4970      	ldr	r1, [pc, #448]	; (80058ec <Batt_Protection_when_discharge+0xa0c>)
 800572a:	4618      	mov	r0, r3
 800572c:	f7fb fa8e 	bl	8000c4c <__addsf3>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	4b65      	ldr	r3, [pc, #404]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f7fb fd2c 	bl	8001198 <__aeabi_fcmplt>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d018      	beq.n	8005778 <Batt_Protection_when_discharge+0x898>
			if((test_tim2%1000)==0){
 8005746:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <Batt_Protection_when_discharge+0xa10>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <Batt_Protection_when_discharge+0xa14>)
 800574c:	fb83 1302 	smull	r1, r3, r3, r2
 8005750:	1199      	asrs	r1, r3, #6
 8005752:	17d3      	asrs	r3, r2, #31
 8005754:	1acb      	subs	r3, r1, r3
 8005756:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	f040 80b2 	bne.w	80058ca <Batt_Protection_when_discharge+0x9ea>
				BUZZ_Toggle;
 8005766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800576a:	4863      	ldr	r0, [pc, #396]	; (80058f8 <Batt_Protection_when_discharge+0xa18>)
 800576c:	f004 f863 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005770:	4b5f      	ldr	r3, [pc, #380]	; (80058f0 <Batt_Protection_when_discharge+0xa10>)
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8005776:	e0a8      	b.n	80058ca <Batt_Protection_when_discharge+0x9ea>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8005778:	4b55      	ldr	r3, [pc, #340]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	495b      	ldr	r1, [pc, #364]	; (80058ec <Batt_Protection_when_discharge+0xa0c>)
 800577e:	4618      	mov	r0, r3
 8005780:	f7fb fa64 	bl	8000c4c <__addsf3>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	4b50      	ldr	r3, [pc, #320]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f7fb fd16 	bl	80011c0 <__aeabi_fcmpge>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d029      	beq.n	80057ee <Batt_Protection_when_discharge+0x90e>
 800579a:	4b4d      	ldr	r3, [pc, #308]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fb fa52 	bl	8000c4c <__addsf3>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	4b47      	ldr	r3, [pc, #284]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f7fb fcf0 	bl	8001198 <__aeabi_fcmplt>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d017      	beq.n	80057ee <Batt_Protection_when_discharge+0x90e>
			if((test_tim2%500)==0){
 80057be:	4b4c      	ldr	r3, [pc, #304]	; (80058f0 <Batt_Protection_when_discharge+0xa10>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b4c      	ldr	r3, [pc, #304]	; (80058f4 <Batt_Protection_when_discharge+0xa14>)
 80057c4:	fb83 1302 	smull	r1, r3, r3, r2
 80057c8:	1159      	asrs	r1, r3, #5
 80057ca:	17d3      	asrs	r3, r2, #31
 80057cc:	1acb      	subs	r3, r1, r3
 80057ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80057d2:	fb01 f303 	mul.w	r3, r1, r3
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d176      	bne.n	80058ca <Batt_Protection_when_discharge+0x9ea>
				BUZZ_Toggle;
 80057dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057e0:	4845      	ldr	r0, [pc, #276]	; (80058f8 <Batt_Protection_when_discharge+0xa18>)
 80057e2:	f004 f828 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80057e6:	4b42      	ldr	r3, [pc, #264]	; (80058f0 <Batt_Protection_when_discharge+0xa10>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80057ec:	e06d      	b.n	80058ca <Batt_Protection_when_discharge+0x9ea>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 80057ee:	4b38      	ldr	r3, [pc, #224]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fb fa28 	bl	8000c4c <__addsf3>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	4b32      	ldr	r3, [pc, #200]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fb fce4 	bl	80011d4 <__aeabi_fcmpgt>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d022      	beq.n	8005858 <Batt_Protection_when_discharge+0x978>
 8005812:	4b2e      	ldr	r3, [pc, #184]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2e      	ldr	r2, [pc, #184]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f7fb fccf 	bl	80011c0 <__aeabi_fcmpge>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d017      	beq.n	8005858 <Batt_Protection_when_discharge+0x978>
			if((test_tim2%500)==0){
 8005828:	4b31      	ldr	r3, [pc, #196]	; (80058f0 <Batt_Protection_when_discharge+0xa10>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <Batt_Protection_when_discharge+0xa14>)
 800582e:	fb83 1302 	smull	r1, r3, r3, r2
 8005832:	1159      	asrs	r1, r3, #5
 8005834:	17d3      	asrs	r3, r2, #31
 8005836:	1acb      	subs	r3, r1, r3
 8005838:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d141      	bne.n	80058ca <Batt_Protection_when_discharge+0x9ea>
				BUZZ_Toggle;
 8005846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800584a:	482b      	ldr	r0, [pc, #172]	; (80058f8 <Batt_Protection_when_discharge+0xa18>)
 800584c:	f003 fff3 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005850:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <Batt_Protection_when_discharge+0xa10>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005856:	e038      	b.n	80058ca <Batt_Protection_when_discharge+0x9ea>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 8005858:	4b1c      	ldr	r3, [pc, #112]	; (80058cc <Batt_Protection_when_discharge+0x9ec>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	4611      	mov	r1, r2
 8005862:	4618      	mov	r0, r3
 8005864:	f7fb fc98 	bl	8001198 <__aeabi_fcmplt>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d121      	bne.n	80058b2 <Batt_Protection_when_discharge+0x9d2>
 800586e:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <Batt_Protection_when_discharge+0x9f8>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f7fb fc8d 	bl	8001198 <__aeabi_fcmplt>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d116      	bne.n	80058b2 <Batt_Protection_when_discharge+0x9d2>
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <Batt_Protection_when_discharge+0x9fc>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a11      	ldr	r2, [pc, #68]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 800588a:	6812      	ldr	r2, [r2, #0]
 800588c:	4611      	mov	r1, r2
 800588e:	4618      	mov	r0, r3
 8005890:	f7fb fc82 	bl	8001198 <__aeabi_fcmplt>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10b      	bne.n	80058b2 <Batt_Protection_when_discharge+0x9d2>
 800589a:	4b11      	ldr	r3, [pc, #68]	; (80058e0 <Batt_Protection_when_discharge+0xa00>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a0c      	ldr	r2, [pc, #48]	; (80058d0 <Batt_Protection_when_discharge+0x9f0>)
 80058a0:	6812      	ldr	r2, [r2, #0]
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fb fc77 	bl	8001198 <__aeabi_fcmplt>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d100      	bne.n	80058b2 <Batt_Protection_when_discharge+0x9d2>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 80058b0:	e1a2      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
			Batt_Open_Mode();
 80058b2:	f7fb fe43 	bl	800153c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <Batt_Protection_when_discharge+0xa04>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80058bc:	2200      	movs	r2, #0
 80058be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058c2:	480d      	ldr	r0, [pc, #52]	; (80058f8 <Batt_Protection_when_discharge+0xa18>)
 80058c4:	f003 ff9f 	bl	8009806 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 80058c8:	e196      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
 80058ca:	e195      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
 80058cc:	20000720 	.word	0x20000720
 80058d0:	20000024 	.word	0x20000024
 80058d4:	41200000 	.word	0x41200000
 80058d8:	200007a0 	.word	0x200007a0
 80058dc:	20000698 	.word	0x20000698
 80058e0:	20000758 	.word	0x20000758
 80058e4:	20000714 	.word	0x20000714
 80058e8:	2000071e 	.word	0x2000071e
 80058ec:	40a00000 	.word	0x40a00000
 80058f0:	20000788 	.word	0x20000788
 80058f4:	10624dd3 	.word	0x10624dd3
 80058f8:	40011000 	.word	0x40011000
	else if(Pack_SOC-SOC_Under_Set<=5 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 80058fc:	4b83      	ldr	r3, [pc, #524]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a83      	ldr	r2, [pc, #524]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f7fb f99e 	bl	8000c48 <__aeabi_fsub>
 800590c:	4603      	mov	r3, r0
 800590e:	4981      	ldr	r1, [pc, #516]	; (8005b14 <Batt_Protection_when_discharge+0xc34>)
 8005910:	4618      	mov	r0, r3
 8005912:	f7fb fc4b 	bl	80011ac <__aeabi_fcmple>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80d1 	beq.w	8005ac0 <Batt_Protection_when_discharge+0xbe0>
 800591e:	4b7e      	ldr	r3, [pc, #504]	; (8005b18 <Batt_Protection_when_discharge+0xc38>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 80cc 	bne.w	8005ac0 <Batt_Protection_when_discharge+0xbe0>
 8005928:	4b7c      	ldr	r3, [pc, #496]	; (8005b1c <Batt_Protection_when_discharge+0xc3c>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b02      	cmp	r3, #2
 800592e:	f040 80c7 	bne.w	8005ac0 <Batt_Protection_when_discharge+0xbe0>
		fault_code=5;
 8005932:	4b7b      	ldr	r3, [pc, #492]	; (8005b20 <Batt_Protection_when_discharge+0xc40>)
 8005934:	2205      	movs	r2, #5
 8005936:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4975      	ldr	r1, [pc, #468]	; (8005b14 <Batt_Protection_when_discharge+0xc34>)
 800593e:	4618      	mov	r0, r3
 8005940:	f7fb f984 	bl	8000c4c <__addsf3>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	4b70      	ldr	r3, [pc, #448]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7fb fc36 	bl	80011c0 <__aeabi_fcmpge>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d029      	beq.n	80059ae <Batt_Protection_when_discharge+0xace>
 800595a:	4b6d      	ldr	r3, [pc, #436]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4971      	ldr	r1, [pc, #452]	; (8005b24 <Batt_Protection_when_discharge+0xc44>)
 8005960:	4618      	mov	r0, r3
 8005962:	f7fb f973 	bl	8000c4c <__addsf3>
 8005966:	4603      	mov	r3, r0
 8005968:	461a      	mov	r2, r3
 800596a:	4b68      	ldr	r3, [pc, #416]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f7fb fc11 	bl	8001198 <__aeabi_fcmplt>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d018      	beq.n	80059ae <Batt_Protection_when_discharge+0xace>
			if((test_tim2%1000)==0){
 800597c:	4b6a      	ldr	r3, [pc, #424]	; (8005b28 <Batt_Protection_when_discharge+0xc48>)
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <Batt_Protection_when_discharge+0xc4c>)
 8005982:	fb83 1302 	smull	r1, r3, r3, r2
 8005986:	1199      	asrs	r1, r3, #6
 8005988:	17d3      	asrs	r3, r2, #31
 800598a:	1acb      	subs	r3, r1, r3
 800598c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	f040 8091 	bne.w	8005abe <Batt_Protection_when_discharge+0xbde>
				BUZZ_Toggle;
 800599c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059a0:	4863      	ldr	r0, [pc, #396]	; (8005b30 <Batt_Protection_when_discharge+0xc50>)
 80059a2:	f003 ff48 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80059a6:	4b60      	ldr	r3, [pc, #384]	; (8005b28 <Batt_Protection_when_discharge+0xc48>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 80059ac:	e087      	b.n	8005abe <Batt_Protection_when_discharge+0xbde>
		else if(Pack_SOC<=SOC_Under_Set+3 && Pack_SOC>SOC_Under_Set+2){
 80059ae:	4b58      	ldr	r3, [pc, #352]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	495c      	ldr	r1, [pc, #368]	; (8005b24 <Batt_Protection_when_discharge+0xc44>)
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fb f949 	bl	8000c4c <__addsf3>
 80059ba:	4603      	mov	r3, r0
 80059bc:	461a      	mov	r2, r3
 80059be:	4b53      	ldr	r3, [pc, #332]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4619      	mov	r1, r3
 80059c4:	4610      	mov	r0, r2
 80059c6:	f7fb fbfb 	bl	80011c0 <__aeabi_fcmpge>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d029      	beq.n	8005a24 <Batt_Protection_when_discharge+0xb44>
 80059d0:	4b4f      	ldr	r3, [pc, #316]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fb f937 	bl	8000c4c <__addsf3>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	4b4a      	ldr	r3, [pc, #296]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f7fb fbd5 	bl	8001198 <__aeabi_fcmplt>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d017      	beq.n	8005a24 <Batt_Protection_when_discharge+0xb44>
			if((test_tim2%500)==0){
 80059f4:	4b4c      	ldr	r3, [pc, #304]	; (8005b28 <Batt_Protection_when_discharge+0xc48>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b4c      	ldr	r3, [pc, #304]	; (8005b2c <Batt_Protection_when_discharge+0xc4c>)
 80059fa:	fb83 1302 	smull	r1, r3, r3, r2
 80059fe:	1159      	asrs	r1, r3, #5
 8005a00:	17d3      	asrs	r3, r2, #31
 8005a02:	1acb      	subs	r3, r1, r3
 8005a04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d155      	bne.n	8005abe <Batt_Protection_when_discharge+0xbde>
				BUZZ_Toggle;
 8005a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a16:	4846      	ldr	r0, [pc, #280]	; (8005b30 <Batt_Protection_when_discharge+0xc50>)
 8005a18:	f003 ff0d 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005a1c:	4b42      	ldr	r3, [pc, #264]	; (8005b28 <Batt_Protection_when_discharge+0xc48>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005a22:	e04c      	b.n	8005abe <Batt_Protection_when_discharge+0xbde>
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set){
 8005a24:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fb f90d 	bl	8000c4c <__addsf3>
 8005a32:	4603      	mov	r3, r0
 8005a34:	461a      	mov	r2, r3
 8005a36:	4b35      	ldr	r3, [pc, #212]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7fb fbc9 	bl	80011d4 <__aeabi_fcmpgt>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d022      	beq.n	8005a8e <Batt_Protection_when_discharge+0xbae>
 8005a48:	4b30      	ldr	r3, [pc, #192]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a30      	ldr	r2, [pc, #192]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fb fbb4 	bl	80011c0 <__aeabi_fcmpge>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d017      	beq.n	8005a8e <Batt_Protection_when_discharge+0xbae>
			if((test_tim2%500)==0){
 8005a5e:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <Batt_Protection_when_discharge+0xc48>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b32      	ldr	r3, [pc, #200]	; (8005b2c <Batt_Protection_when_discharge+0xc4c>)
 8005a64:	fb83 1302 	smull	r1, r3, r3, r2
 8005a68:	1159      	asrs	r1, r3, #5
 8005a6a:	17d3      	asrs	r3, r2, #31
 8005a6c:	1acb      	subs	r3, r1, r3
 8005a6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d120      	bne.n	8005abe <Batt_Protection_when_discharge+0xbde>
				BUZZ_Toggle;
 8005a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a80:	482b      	ldr	r0, [pc, #172]	; (8005b30 <Batt_Protection_when_discharge+0xc50>)
 8005a82:	f003 fed8 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005a86:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <Batt_Protection_when_discharge+0xc48>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005a8c:	e017      	b.n	8005abe <Batt_Protection_when_discharge+0xbde>
		else if(Pack_SOC<SOC_Under_Set){
 8005a8e:	4b1f      	ldr	r3, [pc, #124]	; (8005b0c <Batt_Protection_when_discharge+0xc2c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <Batt_Protection_when_discharge+0xc30>)
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	4611      	mov	r1, r2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fb fb7d 	bl	8001198 <__aeabi_fcmplt>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d100      	bne.n	8005aa6 <Batt_Protection_when_discharge+0xbc6>
		if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8005aa4:	e0a8      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
			Batt_Open_Mode();
 8005aa6:	f7fb fd49 	bl	800153c <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <Batt_Protection_when_discharge+0xc38>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ab6:	481e      	ldr	r0, [pc, #120]	; (8005b30 <Batt_Protection_when_discharge+0xc50>)
 8005ab8:	f003 fea5 	bl	8009806 <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8005abc:	e09c      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
 8005abe:	e09b      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
	else if(Persen_Imbalance_Set-persen_imbalance <= 5)
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <Batt_Protection_when_discharge+0xc54>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <Batt_Protection_when_discharge+0xc58>)
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fb f8bc 	bl	8000c48 <__aeabi_fsub>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4910      	ldr	r1, [pc, #64]	; (8005b14 <Batt_Protection_when_discharge+0xc34>)
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fb fb69 	bl	80011ac <__aeabi_fcmple>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02f      	beq.n	8005b40 <Batt_Protection_when_discharge+0xc60>
		fault_code=6;
 8005ae0:	4b0f      	ldr	r3, [pc, #60]	; (8005b20 <Batt_Protection_when_discharge+0xc40>)
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance >= Persen_Imbalance_Set)
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <Batt_Protection_when_discharge+0xc58>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <Batt_Protection_when_discharge+0xc54>)
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fb fb65 	bl	80011c0 <__aeabi_fcmpge>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d100      	bne.n	8005afe <Batt_Protection_when_discharge+0xc1e>
}
 8005afc:	e07c      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
			flag_trip_unbalance=ON;
 8005afe:	4b0f      	ldr	r3, [pc, #60]	; (8005b3c <Batt_Protection_when_discharge+0xc5c>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8005b04:	f7fb fd1a 	bl	800153c <Batt_Open_Mode>
}
 8005b08:	e076      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
 8005b0a:	bf00      	nop
 8005b0c:	20000798 	.word	0x20000798
 8005b10:	20000650 	.word	0x20000650
 8005b14:	40a00000 	.word	0x40a00000
 8005b18:	2000074c 	.word	0x2000074c
 8005b1c:	20000aa4 	.word	0x20000aa4
 8005b20:	2000071e 	.word	0x2000071e
 8005b24:	40400000 	.word	0x40400000
 8005b28:	20000788 	.word	0x20000788
 8005b2c:	10624dd3 	.word	0x10624dd3
 8005b30:	40011000 	.word	0x40011000
 8005b34:	20000034 	.word	0x20000034
 8005b38:	20000754 	.word	0x20000754
 8005b3c:	20000670 	.word	0x20000670
		if(fault_code!=0)
 8005b40:	4b31      	ldr	r3, [pc, #196]	; (8005c08 <Batt_Protection_when_discharge+0xd28>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <Batt_Protection_when_discharge+0xc70>
			last_fault_code=fault_code;
 8005b48:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <Batt_Protection_when_discharge+0xd28>)
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <Batt_Protection_when_discharge+0xd2c>)
 8005b4e:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005b50:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <Batt_Protection_when_discharge+0xd28>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005b56:	2200      	movs	r2, #0
 8005b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b5c:	482c      	ldr	r0, [pc, #176]	; (8005c10 <Batt_Protection_when_discharge+0xd30>)
 8005b5e:	f003 fe52 	bl	8009806 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8005b62:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <Batt_Protection_when_discharge+0xd34>)
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8005b6a:	4b2b      	ldr	r3, [pc, #172]	; (8005c18 <Batt_Protection_when_discharge+0xd38>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fa fcc6 	bl	8000500 <__aeabi_f2d>
 8005b74:	a322      	add	r3, pc, #136	; (adr r3, 8005c00 <Batt_Protection_when_discharge+0xd20>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa fb61 	bl	8000240 <__aeabi_dsub>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4610      	mov	r0, r2
 8005b84:	4619      	mov	r1, r3
 8005b86:	f7fb f80b 	bl	8000ba0 <__aeabi_d2f>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4a22      	ldr	r2, [pc, #136]	; (8005c18 <Batt_Protection_when_discharge+0xd38>)
 8005b8e:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005b90:	4b22      	ldr	r3, [pc, #136]	; (8005c1c <Batt_Protection_when_discharge+0xd3c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fa fcb3 	bl	8000500 <__aeabi_f2d>
 8005b9a:	a319      	add	r3, pc, #100	; (adr r3, 8005c00 <Batt_Protection_when_discharge+0xd20>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fb4e 	bl	8000240 <__aeabi_dsub>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	f7fa fff8 	bl	8000ba0 <__aeabi_d2f>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <Batt_Protection_when_discharge+0xd3c>)
 8005bb4:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 8005bb6:	4b18      	ldr	r3, [pc, #96]	; (8005c18 <Batt_Protection_when_discharge+0xd38>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f04f 0100 	mov.w	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fb faea 	bl	8001198 <__aeabi_fcmplt>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <Batt_Protection_when_discharge+0xcf2>
			T_trip_cycle=0;
 8005bca:	4b13      	ldr	r3, [pc, #76]	; (8005c18 <Batt_Protection_when_discharge+0xd38>)
 8005bcc:	f04f 0200 	mov.w	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <Batt_Protection_when_discharge+0xd3c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f04f 0100 	mov.w	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fb fadc 	bl	8001198 <__aeabi_fcmplt>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d100      	bne.n	8005be8 <Batt_Protection_when_discharge+0xd08>
}
 8005be6:	e007      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
			T_I_Over_trip_cycle=0;
 8005be8:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <Batt_Protection_when_discharge+0xd3c>)
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
}
 8005bf0:	e002      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
		if(flag_trip_undervoltage==OFF) {
 8005bf2:	bf00      	nop
 8005bf4:	e000      	b.n	8005bf8 <Batt_Protection_when_discharge+0xd18>
		if(flag_trip_overcurrentdischarge==OFF) {
 8005bf6:	bf00      	nop
}
 8005bf8:	bf00      	nop
 8005bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8005bfc:	f3af 8000 	nop.w
 8005c00:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c04:	3f50624d 	.word	0x3f50624d
 8005c08:	2000071e 	.word	0x2000071e
 8005c0c:	20000795 	.word	0x20000795
 8005c10:	40011000 	.word	0x40011000
 8005c14:	20000c3c 	.word	0x20000c3c
 8005c18:	20000c5c 	.word	0x20000c5c
 8005c1c:	20000760 	.word	0x20000760

08005c20 <Batt_Protection_when_charge>:

void Batt_Protection_when_charge(void){
 8005c20:	b5b0      	push	{r4, r5, r7, lr}
 8005c22:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 8005c24:	4b9b      	ldr	r3, [pc, #620]	; (8005e94 <Batt_Protection_when_charge+0x274>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a9b      	ldr	r2, [pc, #620]	; (8005e98 <Batt_Protection_when_charge+0x278>)
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fb fad0 	bl	80011d4 <__aeabi_fcmpgt>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d017      	beq.n	8005c6a <Batt_Protection_when_charge+0x4a>
		Isc = IBATT;
 8005c3a:	4b96      	ldr	r3, [pc, #600]	; (8005e94 <Batt_Protection_when_charge+0x274>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a97      	ldr	r2, [pc, #604]	; (8005e9c <Batt_Protection_when_charge+0x27c>)
 8005c40:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 8005c42:	4b95      	ldr	r3, [pc, #596]	; (8005e98 <Batt_Protection_when_charge+0x278>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a96      	ldr	r2, [pc, #600]	; (8005ea0 <Batt_Protection_when_charge+0x280>)
 8005c48:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8005c4a:	4b96      	ldr	r3, [pc, #600]	; (8005ea4 <Batt_Protection_when_charge+0x284>)
 8005c4c:	220c      	movs	r2, #12
 8005c4e:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005c50:	f7fb fc74 	bl	800153c <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 8005c54:	4b94      	ldr	r3, [pc, #592]	; (8005ea8 <Batt_Protection_when_charge+0x288>)
 8005c56:	2201      	movs	r2, #1
 8005c58:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c60:	4892      	ldr	r0, [pc, #584]	; (8005eac <Batt_Protection_when_charge+0x28c>)
 8005c62:	f003 fdd0 	bl	8009806 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 8005c66:	f000 bcac 	b.w	80065c2 <Batt_Protection_when_charge+0x9a2>
	else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF) {
 8005c6a:	4b91      	ldr	r3, [pc, #580]	; (8005eb0 <Batt_Protection_when_charge+0x290>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a91      	ldr	r2, [pc, #580]	; (8005eb4 <Batt_Protection_when_charge+0x294>)
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f7fa ffe7 	bl	8000c48 <__aeabi_fsub>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	498e      	ldr	r1, [pc, #568]	; (8005eb8 <Batt_Protection_when_charge+0x298>)
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7fb fa94 	bl	80011ac <__aeabi_fcmple>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01f      	beq.n	8005cca <Batt_Protection_when_charge+0xaa>
 8005c8a:	4b8c      	ldr	r3, [pc, #560]	; (8005ebc <Batt_Protection_when_charge+0x29c>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d11b      	bne.n	8005cca <Batt_Protection_when_charge+0xaa>
		fault_code=7;
 8005c92:	4b84      	ldr	r3, [pc, #528]	; (8005ea4 <Batt_Protection_when_charge+0x284>)
 8005c94:	2207      	movs	r2, #7
 8005c96:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 8005c98:	4b86      	ldr	r3, [pc, #536]	; (8005eb4 <Batt_Protection_when_charge+0x294>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a84      	ldr	r2, [pc, #528]	; (8005eb0 <Batt_Protection_when_charge+0x290>)
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fb fa96 	bl	80011d4 <__aeabi_fcmpgt>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8489 	beq.w	80065c2 <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 8005cb0:	f7fb fc44 	bl	800153c <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 8005cb4:	4b81      	ldr	r3, [pc, #516]	; (8005ebc <Batt_Protection_when_charge+0x29c>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cc0:	487a      	ldr	r0, [pc, #488]	; (8005eac <Batt_Protection_when_charge+0x28c>)
 8005cc2:	f003 fda0 	bl	8009806 <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 8005cc6:	f000 bc7c 	b.w	80065c2 <Batt_Protection_when_charge+0x9a2>
	else if(((Suhu_T1>Temp_Over_Set)||(Suhu_T2>Temp_Over_Set)||(Suhu_T3>Temp_Over_Set)||(Suhu_T4>Temp_Over_Set)) && flag_trip_overtemperature==OFF) {
 8005cca:	4b7d      	ldr	r3, [pc, #500]	; (8005ec0 <Batt_Protection_when_charge+0x2a0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a7d      	ldr	r2, [pc, #500]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fb fa7d 	bl	80011d4 <__aeabi_fcmpgt>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d121      	bne.n	8005d24 <Batt_Protection_when_charge+0x104>
 8005ce0:	4b79      	ldr	r3, [pc, #484]	; (8005ec8 <Batt_Protection_when_charge+0x2a8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a77      	ldr	r2, [pc, #476]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fb fa72 	bl	80011d4 <__aeabi_fcmpgt>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d116      	bne.n	8005d24 <Batt_Protection_when_charge+0x104>
 8005cf6:	4b75      	ldr	r3, [pc, #468]	; (8005ecc <Batt_Protection_when_charge+0x2ac>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a72      	ldr	r2, [pc, #456]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fb fa67 	bl	80011d4 <__aeabi_fcmpgt>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10b      	bne.n	8005d24 <Batt_Protection_when_charge+0x104>
 8005d0c:	4b70      	ldr	r3, [pc, #448]	; (8005ed0 <Batt_Protection_when_charge+0x2b0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6c      	ldr	r2, [pc, #432]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fb fa5c 	bl	80011d4 <__aeabi_fcmpgt>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8132 	beq.w	8005f88 <Batt_Protection_when_charge+0x368>
 8005d24:	4b6b      	ldr	r3, [pc, #428]	; (8005ed4 <Batt_Protection_when_charge+0x2b4>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 812d 	bne.w	8005f88 <Batt_Protection_when_charge+0x368>
		fault_code=8;
 8005d2e:	4b5d      	ldr	r3, [pc, #372]	; (8005ea4 <Batt_Protection_when_charge+0x284>)
 8005d30:	2208      	movs	r2, #8
 8005d32:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8005d34:	4b62      	ldr	r3, [pc, #392]	; (8005ec0 <Batt_Protection_when_charge+0x2a0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a62      	ldr	r2, [pc, #392]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fb fa48 	bl	80011d4 <__aeabi_fcmpgt>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d02a      	beq.n	8005da0 <Batt_Protection_when_charge+0x180>
 8005d4a:	4b5e      	ldr	r3, [pc, #376]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fa ff7a 	bl	8000c4c <__addsf3>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b58      	ldr	r3, [pc, #352]	; (8005ec0 <Batt_Protection_when_charge+0x2a0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7fb fa2c 	bl	80011c0 <__aeabi_fcmpge>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d018      	beq.n	8005da0 <Batt_Protection_when_charge+0x180>
			if((test_tim2%1000)==0) {
 8005d6e:	4b5a      	ldr	r3, [pc, #360]	; (8005ed8 <Batt_Protection_when_charge+0x2b8>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b5a      	ldr	r3, [pc, #360]	; (8005edc <Batt_Protection_when_charge+0x2bc>)
 8005d74:	fb83 1302 	smull	r1, r3, r3, r2
 8005d78:	1199      	asrs	r1, r3, #6
 8005d7a:	17d3      	asrs	r3, r2, #31
 8005d7c:	1acb      	subs	r3, r1, r3
 8005d7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f040 80fc 	bne.w	8005f86 <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 8005d8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d92:	4846      	ldr	r0, [pc, #280]	; (8005eac <Batt_Protection_when_charge+0x28c>)
 8005d94:	f003 fd4f 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005d98:	4b4f      	ldr	r3, [pc, #316]	; (8005ed8 <Batt_Protection_when_charge+0x2b8>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8005d9e:	e0f2      	b.n	8005f86 <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Temp_Over_Set+1 && Suhu_T1<=Temp_Over_Set+2){
 8005da0:	4b48      	ldr	r3, [pc, #288]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa ff4f 	bl	8000c4c <__addsf3>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	4b43      	ldr	r3, [pc, #268]	; (8005ec0 <Batt_Protection_when_charge+0x2a0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f7fb f9ed 	bl	8001198 <__aeabi_fcmplt>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d02a      	beq.n	8005e1a <Batt_Protection_when_charge+0x1fa>
 8005dc4:	4b3f      	ldr	r3, [pc, #252]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fa ff3d 	bl	8000c4c <__addsf3>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	4b3a      	ldr	r3, [pc, #232]	; (8005ec0 <Batt_Protection_when_charge+0x2a0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f7fb f9ef 	bl	80011c0 <__aeabi_fcmpge>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d018      	beq.n	8005e1a <Batt_Protection_when_charge+0x1fa>
			if((test_tim2%500)==0){
 8005de8:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <Batt_Protection_when_charge+0x2b8>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <Batt_Protection_when_charge+0x2bc>)
 8005dee:	fb83 1302 	smull	r1, r3, r3, r2
 8005df2:	1159      	asrs	r1, r3, #5
 8005df4:	17d3      	asrs	r3, r2, #31
 8005df6:	1acb      	subs	r3, r1, r3
 8005df8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 80bf 	bne.w	8005f86 <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 8005e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e0c:	4827      	ldr	r0, [pc, #156]	; (8005eac <Batt_Protection_when_charge+0x28c>)
 8005e0e:	f003 fd12 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005e12:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <Batt_Protection_when_charge+0x2b8>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005e18:	e0b5      	b.n	8005f86 <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Temp_Over_Set+2 && Suhu_T1<=Temp_Over_Set+3){
 8005e1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa ff12 	bl	8000c4c <__addsf3>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4b24      	ldr	r3, [pc, #144]	; (8005ec0 <Batt_Protection_when_charge+0x2a0>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4619      	mov	r1, r3
 8005e32:	4610      	mov	r0, r2
 8005e34:	f7fb f9b0 	bl	8001198 <__aeabi_fcmplt>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d052      	beq.n	8005ee4 <Batt_Protection_when_charge+0x2c4>
 8005e3e:	4b21      	ldr	r3, [pc, #132]	; (8005ec4 <Batt_Protection_when_charge+0x2a4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4927      	ldr	r1, [pc, #156]	; (8005ee0 <Batt_Protection_when_charge+0x2c0>)
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa ff01 	bl	8000c4c <__addsf3>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ec0 <Batt_Protection_when_charge+0x2a0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f7fb f9b3 	bl	80011c0 <__aeabi_fcmpge>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d041      	beq.n	8005ee4 <Batt_Protection_when_charge+0x2c4>
			if((test_tim2%500)==0){
 8005e60:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <Batt_Protection_when_charge+0x2b8>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <Batt_Protection_when_charge+0x2bc>)
 8005e66:	fb83 1302 	smull	r1, r3, r3, r2
 8005e6a:	1159      	asrs	r1, r3, #5
 8005e6c:	17d3      	asrs	r3, r2, #31
 8005e6e:	1acb      	subs	r3, r1, r3
 8005e70:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 8083 	bne.w	8005f86 <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 8005e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e84:	4809      	ldr	r0, [pc, #36]	; (8005eac <Batt_Protection_when_charge+0x28c>)
 8005e86:	f003 fcd6 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005e8a:	4b13      	ldr	r3, [pc, #76]	; (8005ed8 <Batt_Protection_when_charge+0x2b8>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005e90:	e079      	b.n	8005f86 <Batt_Protection_when_charge+0x366>
 8005e92:	bf00      	nop
 8005e94:	2000070c 	.word	0x2000070c
 8005e98:	20000694 	.word	0x20000694
 8005e9c:	200006f0 	.word	0x200006f0
 8005ea0:	20000738 	.word	0x20000738
 8005ea4:	2000071e 	.word	0x2000071e
 8005ea8:	20000673 	.word	0x20000673
 8005eac:	40011000 	.word	0x40011000
 8005eb0:	20000028 	.word	0x20000028
 8005eb4:	20000798 	.word	0x20000798
 8005eb8:	41200000 	.word	0x41200000
 8005ebc:	20000671 	.word	0x20000671
 8005ec0:	20000720 	.word	0x20000720
 8005ec4:	20000020 	.word	0x20000020
 8005ec8:	200007a0 	.word	0x200007a0
 8005ecc:	20000698 	.word	0x20000698
 8005ed0:	20000758 	.word	0x20000758
 8005ed4:	20000690 	.word	0x20000690
 8005ed8:	20000788 	.word	0x20000788
 8005edc:	10624dd3 	.word	0x10624dd3
 8005ee0:	40400000 	.word	0x40400000
		else if(Suhu_T1>Temp_Over_Set+3||Suhu_T2>Temp_Over_Set+3||Suhu_T3>Temp_Over_Set+3||Suhu_T4>Temp_Over_Set+3){
 8005ee4:	4ba3      	ldr	r3, [pc, #652]	; (8006174 <Batt_Protection_when_charge+0x554>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	49a3      	ldr	r1, [pc, #652]	; (8006178 <Batt_Protection_when_charge+0x558>)
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fa feae 	bl	8000c4c <__addsf3>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4ba1      	ldr	r3, [pc, #644]	; (800617c <Batt_Protection_when_charge+0x55c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f7fb f94c 	bl	8001198 <__aeabi_fcmplt>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d133      	bne.n	8005f6e <Batt_Protection_when_charge+0x34e>
 8005f06:	4b9b      	ldr	r3, [pc, #620]	; (8006174 <Batt_Protection_when_charge+0x554>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	499b      	ldr	r1, [pc, #620]	; (8006178 <Batt_Protection_when_charge+0x558>)
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fa fe9d 	bl	8000c4c <__addsf3>
 8005f12:	4603      	mov	r3, r0
 8005f14:	461a      	mov	r2, r3
 8005f16:	4b9a      	ldr	r3, [pc, #616]	; (8006180 <Batt_Protection_when_charge+0x560>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	f7fb f93b 	bl	8001198 <__aeabi_fcmplt>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d122      	bne.n	8005f6e <Batt_Protection_when_charge+0x34e>
 8005f28:	4b92      	ldr	r3, [pc, #584]	; (8006174 <Batt_Protection_when_charge+0x554>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4992      	ldr	r1, [pc, #584]	; (8006178 <Batt_Protection_when_charge+0x558>)
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa fe8c 	bl	8000c4c <__addsf3>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	4b92      	ldr	r3, [pc, #584]	; (8006184 <Batt_Protection_when_charge+0x564>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f7fb f92a 	bl	8001198 <__aeabi_fcmplt>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d111      	bne.n	8005f6e <Batt_Protection_when_charge+0x34e>
 8005f4a:	4b8a      	ldr	r3, [pc, #552]	; (8006174 <Batt_Protection_when_charge+0x554>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	498a      	ldr	r1, [pc, #552]	; (8006178 <Batt_Protection_when_charge+0x558>)
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fa fe7b 	bl	8000c4c <__addsf3>
 8005f56:	4603      	mov	r3, r0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4b8b      	ldr	r3, [pc, #556]	; (8006188 <Batt_Protection_when_charge+0x568>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4610      	mov	r0, r2
 8005f62:	f7fb f919 	bl	8001198 <__aeabi_fcmplt>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d100      	bne.n	8005f6e <Batt_Protection_when_charge+0x34e>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8005f6c:	e329      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 8005f6e:	f7fb fae5 	bl	800153c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8005f72:	4b86      	ldr	r3, [pc, #536]	; (800618c <Batt_Protection_when_charge+0x56c>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f7e:	4884      	ldr	r0, [pc, #528]	; (8006190 <Batt_Protection_when_charge+0x570>)
 8005f80:	f003 fc41 	bl	8009806 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8005f84:	e31d      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
 8005f86:	e31c      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8005f88:	4b7c      	ldr	r3, [pc, #496]	; (800617c <Batt_Protection_when_charge+0x55c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a81      	ldr	r2, [pc, #516]	; (8006194 <Batt_Protection_when_charge+0x574>)
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4611      	mov	r1, r2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fa fe58 	bl	8000c48 <__aeabi_fsub>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	497f      	ldr	r1, [pc, #508]	; (8006198 <Batt_Protection_when_charge+0x578>)
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fb f905 	bl	80011ac <__aeabi_fcmple>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d130      	bne.n	800600a <Batt_Protection_when_charge+0x3ea>
 8005fa8:	4b75      	ldr	r3, [pc, #468]	; (8006180 <Batt_Protection_when_charge+0x560>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a79      	ldr	r2, [pc, #484]	; (8006194 <Batt_Protection_when_charge+0x574>)
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fa fe48 	bl	8000c48 <__aeabi_fsub>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	4977      	ldr	r1, [pc, #476]	; (8006198 <Batt_Protection_when_charge+0x578>)
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fb f8f5 	bl	80011ac <__aeabi_fcmple>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d120      	bne.n	800600a <Batt_Protection_when_charge+0x3ea>
 8005fc8:	4b6e      	ldr	r3, [pc, #440]	; (8006184 <Batt_Protection_when_charge+0x564>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a71      	ldr	r2, [pc, #452]	; (8006194 <Batt_Protection_when_charge+0x574>)
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fa fe38 	bl	8000c48 <__aeabi_fsub>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	496f      	ldr	r1, [pc, #444]	; (8006198 <Batt_Protection_when_charge+0x578>)
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fb f8e5 	bl	80011ac <__aeabi_fcmple>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d110      	bne.n	800600a <Batt_Protection_when_charge+0x3ea>
 8005fe8:	4b67      	ldr	r3, [pc, #412]	; (8006188 <Batt_Protection_when_charge+0x568>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a69      	ldr	r2, [pc, #420]	; (8006194 <Batt_Protection_when_charge+0x574>)
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fa fe28 	bl	8000c48 <__aeabi_fsub>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4967      	ldr	r1, [pc, #412]	; (8006198 <Batt_Protection_when_charge+0x578>)
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fb f8d5 	bl	80011ac <__aeabi_fcmple>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 810d 	beq.w	8006224 <Batt_Protection_when_charge+0x604>
 800600a:	4b64      	ldr	r3, [pc, #400]	; (800619c <Batt_Protection_when_charge+0x57c>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 8108 	bne.w	8006224 <Batt_Protection_when_charge+0x604>
		fault_code=4;
 8006014:	4b62      	ldr	r3, [pc, #392]	; (80061a0 <Batt_Protection_when_charge+0x580>)
 8006016:	2204      	movs	r2, #4
 8006018:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 800601a:	4b5e      	ldr	r3, [pc, #376]	; (8006194 <Batt_Protection_when_charge+0x574>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	495e      	ldr	r1, [pc, #376]	; (8006198 <Batt_Protection_when_charge+0x578>)
 8006020:	4618      	mov	r0, r3
 8006022:	f7fa fe13 	bl	8000c4c <__addsf3>
 8006026:	4603      	mov	r3, r0
 8006028:	461a      	mov	r2, r3
 800602a:	4b54      	ldr	r3, [pc, #336]	; (800617c <Batt_Protection_when_charge+0x55c>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7fb f8c5 	bl	80011c0 <__aeabi_fcmpge>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d029      	beq.n	8006090 <Batt_Protection_when_charge+0x470>
 800603c:	4b55      	ldr	r3, [pc, #340]	; (8006194 <Batt_Protection_when_charge+0x574>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4958      	ldr	r1, [pc, #352]	; (80061a4 <Batt_Protection_when_charge+0x584>)
 8006042:	4618      	mov	r0, r3
 8006044:	f7fa fe02 	bl	8000c4c <__addsf3>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	4b4b      	ldr	r3, [pc, #300]	; (800617c <Batt_Protection_when_charge+0x55c>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f7fb f8a0 	bl	8001198 <__aeabi_fcmplt>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <Batt_Protection_when_charge+0x470>
			if((test_tim2%1000)==0){
 800605e:	4b52      	ldr	r3, [pc, #328]	; (80061a8 <Batt_Protection_when_charge+0x588>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b52      	ldr	r3, [pc, #328]	; (80061ac <Batt_Protection_when_charge+0x58c>)
 8006064:	fb83 1302 	smull	r1, r3, r3, r2
 8006068:	1199      	asrs	r1, r3, #6
 800606a:	17d3      	asrs	r3, r2, #31
 800606c:	1acb      	subs	r3, r1, r3
 800606e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 80d2 	bne.w	8006222 <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 800607e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006082:	4843      	ldr	r0, [pc, #268]	; (8006190 <Batt_Protection_when_charge+0x570>)
 8006084:	f003 fbd7 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006088:	4b47      	ldr	r3, [pc, #284]	; (80061a8 <Batt_Protection_when_charge+0x588>)
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 800608e:	e0c8      	b.n	8006222 <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8006090:	4b40      	ldr	r3, [pc, #256]	; (8006194 <Batt_Protection_when_charge+0x574>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4943      	ldr	r1, [pc, #268]	; (80061a4 <Batt_Protection_when_charge+0x584>)
 8006096:	4618      	mov	r0, r3
 8006098:	f7fa fdd8 	bl	8000c4c <__addsf3>
 800609c:	4603      	mov	r3, r0
 800609e:	461a      	mov	r2, r3
 80060a0:	4b36      	ldr	r3, [pc, #216]	; (800617c <Batt_Protection_when_charge+0x55c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fb f88a 	bl	80011c0 <__aeabi_fcmpge>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d02a      	beq.n	8006108 <Batt_Protection_when_charge+0x4e8>
 80060b2:	4b38      	ldr	r3, [pc, #224]	; (8006194 <Batt_Protection_when_charge+0x574>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fa fdc6 	bl	8000c4c <__addsf3>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	4b2d      	ldr	r3, [pc, #180]	; (800617c <Batt_Protection_when_charge+0x55c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4619      	mov	r1, r3
 80060ca:	4610      	mov	r0, r2
 80060cc:	f7fb f864 	bl	8001198 <__aeabi_fcmplt>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d018      	beq.n	8006108 <Batt_Protection_when_charge+0x4e8>
			if((test_tim2%500)==0){
 80060d6:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <Batt_Protection_when_charge+0x588>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b34      	ldr	r3, [pc, #208]	; (80061ac <Batt_Protection_when_charge+0x58c>)
 80060dc:	fb83 1302 	smull	r1, r3, r3, r2
 80060e0:	1159      	asrs	r1, r3, #5
 80060e2:	17d3      	asrs	r3, r2, #31
 80060e4:	1acb      	subs	r3, r1, r3
 80060e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80060ea:	fb01 f303 	mul.w	r3, r1, r3
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 8096 	bne.w	8006222 <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 80060f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060fa:	4825      	ldr	r0, [pc, #148]	; (8006190 <Batt_Protection_when_charge+0x570>)
 80060fc:	f003 fb9b 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006100:	4b29      	ldr	r3, [pc, #164]	; (80061a8 <Batt_Protection_when_charge+0x588>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006106:	e08c      	b.n	8006222 <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 8006108:	4b22      	ldr	r3, [pc, #136]	; (8006194 <Batt_Protection_when_charge+0x574>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006110:	4618      	mov	r0, r3
 8006112:	f7fa fd9b 	bl	8000c4c <__addsf3>
 8006116:	4603      	mov	r3, r0
 8006118:	461a      	mov	r2, r3
 800611a:	4b18      	ldr	r3, [pc, #96]	; (800617c <Batt_Protection_when_charge+0x55c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fb f857 	bl	80011d4 <__aeabi_fcmpgt>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d041      	beq.n	80061b0 <Batt_Protection_when_charge+0x590>
 800612c:	4b13      	ldr	r3, [pc, #76]	; (800617c <Batt_Protection_when_charge+0x55c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a18      	ldr	r2, [pc, #96]	; (8006194 <Batt_Protection_when_charge+0x574>)
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	4611      	mov	r1, r2
 8006136:	4618      	mov	r0, r3
 8006138:	f7fb f842 	bl	80011c0 <__aeabi_fcmpge>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d036      	beq.n	80061b0 <Batt_Protection_when_charge+0x590>
			if((test_tim2%500)==0){
 8006142:	4b19      	ldr	r3, [pc, #100]	; (80061a8 <Batt_Protection_when_charge+0x588>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b19      	ldr	r3, [pc, #100]	; (80061ac <Batt_Protection_when_charge+0x58c>)
 8006148:	fb83 1302 	smull	r1, r3, r3, r2
 800614c:	1159      	asrs	r1, r3, #5
 800614e:	17d3      	asrs	r3, r2, #31
 8006150:	1acb      	subs	r3, r1, r3
 8006152:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d160      	bne.n	8006222 <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 8006160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006164:	480a      	ldr	r0, [pc, #40]	; (8006190 <Batt_Protection_when_charge+0x570>)
 8006166:	f003 fb66 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <Batt_Protection_when_charge+0x588>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006170:	e057      	b.n	8006222 <Batt_Protection_when_charge+0x602>
 8006172:	bf00      	nop
 8006174:	20000020 	.word	0x20000020
 8006178:	40400000 	.word	0x40400000
 800617c:	20000720 	.word	0x20000720
 8006180:	200007a0 	.word	0x200007a0
 8006184:	20000698 	.word	0x20000698
 8006188:	20000758 	.word	0x20000758
 800618c:	20000690 	.word	0x20000690
 8006190:	40011000 	.word	0x40011000
 8006194:	20000024 	.word	0x20000024
 8006198:	41200000 	.word	0x41200000
 800619c:	20000714 	.word	0x20000714
 80061a0:	2000071e 	.word	0x2000071e
 80061a4:	40a00000 	.word	0x40a00000
 80061a8:	20000788 	.word	0x20000788
 80061ac:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 80061b0:	4bb3      	ldr	r3, [pc, #716]	; (8006480 <Batt_Protection_when_charge+0x860>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4ab3      	ldr	r2, [pc, #716]	; (8006484 <Batt_Protection_when_charge+0x864>)
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fa ffec 	bl	8001198 <__aeabi_fcmplt>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d121      	bne.n	800620a <Batt_Protection_when_charge+0x5ea>
 80061c6:	4bb0      	ldr	r3, [pc, #704]	; (8006488 <Batt_Protection_when_charge+0x868>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4aae      	ldr	r2, [pc, #696]	; (8006484 <Batt_Protection_when_charge+0x864>)
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	4611      	mov	r1, r2
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fa ffe1 	bl	8001198 <__aeabi_fcmplt>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d116      	bne.n	800620a <Batt_Protection_when_charge+0x5ea>
 80061dc:	4bab      	ldr	r3, [pc, #684]	; (800648c <Batt_Protection_when_charge+0x86c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4aa8      	ldr	r2, [pc, #672]	; (8006484 <Batt_Protection_when_charge+0x864>)
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fa ffd6 	bl	8001198 <__aeabi_fcmplt>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <Batt_Protection_when_charge+0x5ea>
 80061f2:	4ba7      	ldr	r3, [pc, #668]	; (8006490 <Batt_Protection_when_charge+0x870>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4aa3      	ldr	r2, [pc, #652]	; (8006484 <Batt_Protection_when_charge+0x864>)
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	4611      	mov	r1, r2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fa ffcb 	bl	8001198 <__aeabi_fcmplt>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d100      	bne.n	800620a <Batt_Protection_when_charge+0x5ea>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8006208:	e1db      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 800620a:	f7fb f997 	bl	800153c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 800620e:	4ba1      	ldr	r3, [pc, #644]	; (8006494 <Batt_Protection_when_charge+0x874>)
 8006210:	2201      	movs	r2, #1
 8006212:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006214:	2200      	movs	r2, #0
 8006216:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800621a:	489f      	ldr	r0, [pc, #636]	; (8006498 <Batt_Protection_when_charge+0x878>)
 800621c:	f003 faf3 	bl	8009806 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8006220:	e1cf      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
 8006222:	e1ce      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
	else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 8006224:	4b9d      	ldr	r3, [pc, #628]	; (800649c <Batt_Protection_when_charge+0x87c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800622c:	4618      	mov	r0, r3
 800622e:	f7fa f967 	bl	8000500 <__aeabi_f2d>
 8006232:	4604      	mov	r4, r0
 8006234:	460d      	mov	r5, r1
 8006236:	4b9a      	ldr	r3, [pc, #616]	; (80064a0 <Batt_Protection_when_charge+0x880>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7fa f960 	bl	8000500 <__aeabi_f2d>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7f9 fffa 	bl	8000240 <__aeabi_dsub>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	f7fa fc38 	bl	8000ad0 <__aeabi_dcmpgt>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 813f 	beq.w	80064e6 <Batt_Protection_when_charge+0x8c6>
 8006268:	4b8e      	ldr	r3, [pc, #568]	; (80064a4 <Batt_Protection_when_charge+0x884>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 813a 	bne.w	80064e6 <Batt_Protection_when_charge+0x8c6>
		fault_code=10;
 8006272:	4b8d      	ldr	r3, [pc, #564]	; (80064a8 <Batt_Protection_when_charge+0x888>)
 8006274:	220a      	movs	r2, #10
 8006276:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 8006278:	4b88      	ldr	r3, [pc, #544]	; (800649c <Batt_Protection_when_charge+0x87c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f7fa f93f 	bl	8000500 <__aeabi_f2d>
 8006282:	a37b      	add	r3, pc, #492	; (adr r3, 8006470 <Batt_Protection_when_charge+0x850>)
 8006284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006288:	f7fa fabc 	bl	8000804 <__aeabi_ddiv>
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4614      	mov	r4, r2
 8006292:	461d      	mov	r5, r3
 8006294:	4b81      	ldr	r3, [pc, #516]	; (800649c <Batt_Protection_when_charge+0x87c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fa f931 	bl	8000500 <__aeabi_f2d>
 800629e:	a374      	add	r3, pc, #464	; (adr r3, 8006470 <Batt_Protection_when_charge+0x850>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa faae 	bl	8000804 <__aeabi_ddiv>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4620      	mov	r0, r4
 80062ae:	4629      	mov	r1, r5
 80062b0:	f7fa f97e 	bl	80005b0 <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4610      	mov	r0, r2
 80062ba:	4619      	mov	r1, r3
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	4b7a      	ldr	r3, [pc, #488]	; (80064ac <Batt_Protection_when_charge+0x88c>)
 80062c2:	f7f9 ffbd 	bl	8000240 <__aeabi_dsub>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	f04f 0000 	mov.w	r0, #0
 80062ce:	4978      	ldr	r1, [pc, #480]	; (80064b0 <Batt_Protection_when_charge+0x890>)
 80062d0:	f7fa fa98 	bl	8000804 <__aeabi_ddiv>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4610      	mov	r0, r2
 80062da:	4619      	mov	r1, r3
 80062dc:	f7fa fc60 	bl	8000ba0 <__aeabi_d2f>
 80062e0:	4603      	mov	r3, r0
 80062e2:	4a74      	ldr	r2, [pc, #464]	; (80064b4 <Batt_Protection_when_charge+0x894>)
 80062e4:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 80062e6:	4b74      	ldr	r3, [pc, #464]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fa f908 	bl	8000500 <__aeabi_f2d>
 80062f0:	a361      	add	r3, pc, #388	; (adr r3, 8006478 <Batt_Protection_when_charge+0x858>)
 80062f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f6:	f7f9 ffa5 	bl	8000244 <__adddf3>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	f7fa fc4d 	bl	8000ba0 <__aeabi_d2f>
 8006306:	4603      	mov	r3, r0
 8006308:	4a6b      	ldr	r2, [pc, #428]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 800630a:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 800630c:	4b6a      	ldr	r3, [pc, #424]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a68      	ldr	r2, [pc, #416]	; (80064b4 <Batt_Protection_when_charge+0x894>)
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f7fa ff5c 	bl	80011d4 <__aeabi_fcmpgt>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d012      	beq.n	8006348 <Batt_Protection_when_charge+0x728>
 8006322:	4b60      	ldr	r3, [pc, #384]	; (80064a4 <Batt_Protection_when_charge+0x884>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10e      	bne.n	8006348 <Batt_Protection_when_charge+0x728>
			Batt_Open_Mode();
 800632a:	f7fb f907 	bl	800153c <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 800632e:	4b61      	ldr	r3, [pc, #388]	; (80064b4 <Batt_Protection_when_charge+0x894>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a61      	ldr	r2, [pc, #388]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 8006334:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentcharge=ON;
 8006336:	4b5b      	ldr	r3, [pc, #364]	; (80064a4 <Batt_Protection_when_charge+0x884>)
 8006338:	2201      	movs	r2, #1
 800633a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800633c:	2200      	movs	r2, #0
 800633e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006342:	4855      	ldr	r0, [pc, #340]	; (8006498 <Batt_Protection_when_charge+0x878>)
 8006344:	f003 fa5f 	bl	8009806 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 8006348:	4b56      	ldr	r3, [pc, #344]	; (80064a4 <Batt_Protection_when_charge+0x884>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 8137 	bne.w	80065c0 <Batt_Protection_when_charge+0x9a0>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8006352:	4b58      	ldr	r3, [pc, #352]	; (80064b4 <Batt_Protection_when_charge+0x894>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a58      	ldr	r2, [pc, #352]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f7fa fc73 	bl	8000c48 <__aeabi_fsub>
 8006362:	4603      	mov	r3, r0
 8006364:	4955      	ldr	r1, [pc, #340]	; (80064bc <Batt_Protection_when_charge+0x89c>)
 8006366:	4618      	mov	r0, r3
 8006368:	f7fa ff34 	bl	80011d4 <__aeabi_fcmpgt>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d018      	beq.n	80063a4 <Batt_Protection_when_charge+0x784>
				if((test_tim2%1000)==0) {
 8006372:	4b53      	ldr	r3, [pc, #332]	; (80064c0 <Batt_Protection_when_charge+0x8a0>)
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b53      	ldr	r3, [pc, #332]	; (80064c4 <Batt_Protection_when_charge+0x8a4>)
 8006378:	fb83 1302 	smull	r1, r3, r3, r2
 800637c:	1199      	asrs	r1, r3, #6
 800637e:	17d3      	asrs	r3, r2, #31
 8006380:	1acb      	subs	r3, r1, r3
 8006382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006386:	fb01 f303 	mul.w	r3, r1, r3
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	f040 8117 	bne.w	80065c0 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8006392:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006396:	4840      	ldr	r0, [pc, #256]	; (8006498 <Batt_Protection_when_charge+0x878>)
 8006398:	f003 fa4d 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800639c:	4b48      	ldr	r3, [pc, #288]	; (80064c0 <Batt_Protection_when_charge+0x8a0>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 80063a2:	e10d      	b.n	80065c0 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 80063a4:	4b43      	ldr	r3, [pc, #268]	; (80064b4 <Batt_Protection_when_charge+0x894>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a43      	ldr	r2, [pc, #268]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	4611      	mov	r1, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa fc4a 	bl	8000c48 <__aeabi_fsub>
 80063b4:	4603      	mov	r3, r0
 80063b6:	4944      	ldr	r1, [pc, #272]	; (80064c8 <Batt_Protection_when_charge+0x8a8>)
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fa ff0b 	bl	80011d4 <__aeabi_fcmpgt>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d017      	beq.n	80063f4 <Batt_Protection_when_charge+0x7d4>
				if((test_tim2%100)==0) {
 80063c4:	4b3e      	ldr	r3, [pc, #248]	; (80064c0 <Batt_Protection_when_charge+0x8a0>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b40      	ldr	r3, [pc, #256]	; (80064cc <Batt_Protection_when_charge+0x8ac>)
 80063ca:	fb83 1302 	smull	r1, r3, r3, r2
 80063ce:	1159      	asrs	r1, r3, #5
 80063d0:	17d3      	asrs	r3, r2, #31
 80063d2:	1acb      	subs	r3, r1, r3
 80063d4:	2164      	movs	r1, #100	; 0x64
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 80ef 	bne.w	80065c0 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 80063e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063e6:	482c      	ldr	r0, [pc, #176]	; (8006498 <Batt_Protection_when_charge+0x878>)
 80063e8:	f003 fa25 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80063ec:	4b34      	ldr	r3, [pc, #208]	; (80064c0 <Batt_Protection_when_charge+0x8a0>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 80063f2:	e0e5      	b.n	80065c0 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 80063f4:	4b2f      	ldr	r3, [pc, #188]	; (80064b4 <Batt_Protection_when_charge+0x894>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a2f      	ldr	r2, [pc, #188]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 80063fa:	6812      	ldr	r2, [r2, #0]
 80063fc:	4611      	mov	r1, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fa fc22 	bl	8000c48 <__aeabi_fsub>
 8006404:	4603      	mov	r3, r0
 8006406:	4932      	ldr	r1, [pc, #200]	; (80064d0 <Batt_Protection_when_charge+0x8b0>)
 8006408:	4618      	mov	r0, r3
 800640a:	f7fa fee3 	bl	80011d4 <__aeabi_fcmpgt>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d018      	beq.n	8006446 <Batt_Protection_when_charge+0x826>
				if((test_tim2%10)==0) {
 8006414:	4b2a      	ldr	r3, [pc, #168]	; (80064c0 <Batt_Protection_when_charge+0x8a0>)
 8006416:	6819      	ldr	r1, [r3, #0]
 8006418:	4b2e      	ldr	r3, [pc, #184]	; (80064d4 <Batt_Protection_when_charge+0x8b4>)
 800641a:	fb83 2301 	smull	r2, r3, r3, r1
 800641e:	109a      	asrs	r2, r3, #2
 8006420:	17cb      	asrs	r3, r1, #31
 8006422:	1ad2      	subs	r2, r2, r3
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	1aca      	subs	r2, r1, r3
 800642e:	2a00      	cmp	r2, #0
 8006430:	f040 80c6 	bne.w	80065c0 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8006434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006438:	4817      	ldr	r0, [pc, #92]	; (8006498 <Batt_Protection_when_charge+0x878>)
 800643a:	f003 f9fc 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <Batt_Protection_when_charge+0x8a0>)
 8006440:	2200      	movs	r2, #0
 8006442:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8006444:	e0bc      	b.n	80065c0 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8006446:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <Batt_Protection_when_charge+0x894>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1b      	ldr	r2, [pc, #108]	; (80064b8 <Batt_Protection_when_charge+0x898>)
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	4611      	mov	r1, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f7fa fbf9 	bl	8000c48 <__aeabi_fsub>
 8006456:	4603      	mov	r3, r0
 8006458:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800645c:	4618      	mov	r0, r3
 800645e:	f7fa feb9 	bl	80011d4 <__aeabi_fcmpgt>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d137      	bne.n	80064d8 <Batt_Protection_when_charge+0x8b8>
		if(flag_trip_overcurrentcharge==OFF) {
 8006468:	e0aa      	b.n	80065c0 <Batt_Protection_when_charge+0x9a0>
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w
 8006470:	9999999a 	.word	0x9999999a
 8006474:	401b9999 	.word	0x401b9999
 8006478:	47ae147b 	.word	0x47ae147b
 800647c:	3f847ae1 	.word	0x3f847ae1
 8006480:	20000720 	.word	0x20000720
 8006484:	20000024 	.word	0x20000024
 8006488:	200007a0 	.word	0x200007a0
 800648c:	20000698 	.word	0x20000698
 8006490:	20000758 	.word	0x20000758
 8006494:	20000714 	.word	0x20000714
 8006498:	40011000 	.word	0x40011000
 800649c:	2000070c 	.word	0x2000070c
 80064a0:	2000001c 	.word	0x2000001c
 80064a4:	20000746 	.word	0x20000746
 80064a8:	2000071e 	.word	0x2000071e
 80064ac:	3ff00000 	.word	0x3ff00000
 80064b0:	40200000 	.word	0x40200000
 80064b4:	20000680 	.word	0x20000680
 80064b8:	20000760 	.word	0x20000760
 80064bc:	41700000 	.word	0x41700000
 80064c0:	20000788 	.word	0x20000788
 80064c4:	10624dd3 	.word	0x10624dd3
 80064c8:	41200000 	.word	0x41200000
 80064cc:	51eb851f 	.word	0x51eb851f
 80064d0:	40400000 	.word	0x40400000
 80064d4:	66666667 	.word	0x66666667
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80064d8:	2201      	movs	r2, #1
 80064da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064de:	483c      	ldr	r0, [pc, #240]	; (80065d0 <Batt_Protection_when_charge+0x9b0>)
 80064e0:	f003 f991 	bl	8009806 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 80064e4:	e06c      	b.n	80065c0 <Batt_Protection_when_charge+0x9a0>
	else if(VBATT>V_Over_Set) {
 80064e6:	4b3b      	ldr	r3, [pc, #236]	; (80065d4 <Batt_Protection_when_charge+0x9b4>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3b      	ldr	r2, [pc, #236]	; (80065d8 <Batt_Protection_when_charge+0x9b8>)
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fa fe6f 	bl	80011d4 <__aeabi_fcmpgt>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d008      	beq.n	800650e <Batt_Protection_when_charge+0x8ee>
		fault_code=11;
 80064fc:	4b37      	ldr	r3, [pc, #220]	; (80065dc <Batt_Protection_when_charge+0x9bc>)
 80064fe:	220b      	movs	r2, #11
 8006500:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=ON;
 8006502:	4b37      	ldr	r3, [pc, #220]	; (80065e0 <Batt_Protection_when_charge+0x9c0>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8006508:	f7fb f818 	bl	800153c <Batt_Open_Mode>
}
 800650c:	e059      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
		if(fault_code!=0)
 800650e:	4b33      	ldr	r3, [pc, #204]	; (80065dc <Batt_Protection_when_charge+0x9bc>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <Batt_Protection_when_charge+0x8fe>
			last_fault_code=fault_code;
 8006516:	4b31      	ldr	r3, [pc, #196]	; (80065dc <Batt_Protection_when_charge+0x9bc>)
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	4b32      	ldr	r3, [pc, #200]	; (80065e4 <Batt_Protection_when_charge+0x9c4>)
 800651c:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 800651e:	4b2f      	ldr	r3, [pc, #188]	; (80065dc <Batt_Protection_when_charge+0x9bc>)
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006524:	2200      	movs	r2, #0
 8006526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800652a:	4829      	ldr	r0, [pc, #164]	; (80065d0 <Batt_Protection_when_charge+0x9b0>)
 800652c:	f003 f96b 	bl	8009806 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8006530:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <Batt_Protection_when_charge+0x9c8>)
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8006538:	4b2c      	ldr	r3, [pc, #176]	; (80065ec <Batt_Protection_when_charge+0x9cc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f7f9 ffdf 	bl	8000500 <__aeabi_f2d>
 8006542:	a321      	add	r3, pc, #132	; (adr r3, 80065c8 <Batt_Protection_when_charge+0x9a8>)
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7f9 fe7a 	bl	8000240 <__aeabi_dsub>
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4610      	mov	r0, r2
 8006552:	4619      	mov	r1, r3
 8006554:	f7fa fb24 	bl	8000ba0 <__aeabi_d2f>
 8006558:	4603      	mov	r3, r0
 800655a:	4a24      	ldr	r2, [pc, #144]	; (80065ec <Batt_Protection_when_charge+0x9cc>)
 800655c:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <Batt_Protection_when_charge+0x9d0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7f9 ffcc 	bl	8000500 <__aeabi_f2d>
 8006568:	a317      	add	r3, pc, #92	; (adr r3, 80065c8 <Batt_Protection_when_charge+0x9a8>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7f9 fe67 	bl	8000240 <__aeabi_dsub>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4610      	mov	r0, r2
 8006578:	4619      	mov	r1, r3
 800657a:	f7fa fb11 	bl	8000ba0 <__aeabi_d2f>
 800657e:	4603      	mov	r3, r0
 8006580:	4a1b      	ldr	r2, [pc, #108]	; (80065f0 <Batt_Protection_when_charge+0x9d0>)
 8006582:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 8006584:	4b19      	ldr	r3, [pc, #100]	; (80065ec <Batt_Protection_when_charge+0x9cc>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f04f 0100 	mov.w	r1, #0
 800658c:	4618      	mov	r0, r3
 800658e:	f7fa fe03 	bl	8001198 <__aeabi_fcmplt>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d003      	beq.n	80065a0 <Batt_Protection_when_charge+0x980>
			T_trip_cycle=0;
 8006598:	4b14      	ldr	r3, [pc, #80]	; (80065ec <Batt_Protection_when_charge+0x9cc>)
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 80065a0:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <Batt_Protection_when_charge+0x9d0>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f04f 0100 	mov.w	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fa fdf5 	bl	8001198 <__aeabi_fcmplt>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d100      	bne.n	80065b6 <Batt_Protection_when_charge+0x996>
}
 80065b4:	e005      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
			T_I_Over_trip_cycle=0;
 80065b6:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <Batt_Protection_when_charge+0x9d0>)
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	e000      	b.n	80065c2 <Batt_Protection_when_charge+0x9a2>
		if(flag_trip_overcurrentcharge==OFF) {
 80065c0:	bf00      	nop
}
 80065c2:	bf00      	nop
 80065c4:	bdb0      	pop	{r4, r5, r7, pc}
 80065c6:	bf00      	nop
 80065c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80065cc:	3f50624d 	.word	0x3f50624d
 80065d0:	40011000 	.word	0x40011000
 80065d4:	20000694 	.word	0x20000694
 80065d8:	20000030 	.word	0x20000030
 80065dc:	2000071e 	.word	0x2000071e
 80065e0:	2000079c 	.word	0x2000079c
 80065e4:	20000795 	.word	0x20000795
 80065e8:	20000c3c 	.word	0x20000c3c
 80065ec:	20000c5c 	.word	0x20000c5c
 80065f0:	20000760 	.word	0x20000760
 80065f4:	00000000 	.word	0x00000000

080065f8 <Batt_Protection_when_chargedischarge>:

void Batt_Protection_when_chargedischarge(void) {
 80065f8:	b5b0      	push	{r4, r5, r7, lr}
 80065fa:	af00      	add	r7, sp, #0
	// Short circuit protection
	if(IBATT > (VBATT/0.9)) {
 80065fc:	4b76      	ldr	r3, [pc, #472]	; (80067d8 <Batt_Protection_when_chargedischarge+0x1e0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f7f9 ff7d 	bl	8000500 <__aeabi_f2d>
 8006606:	4604      	mov	r4, r0
 8006608:	460d      	mov	r5, r1
 800660a:	4b74      	ldr	r3, [pc, #464]	; (80067dc <Batt_Protection_when_chargedischarge+0x1e4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7f9 ff76 	bl	8000500 <__aeabi_f2d>
 8006614:	a36c      	add	r3, pc, #432	; (adr r3, 80067c8 <Batt_Protection_when_chargedischarge+0x1d0>)
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	f7fa f8f3 	bl	8000804 <__aeabi_ddiv>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	f7fa fa53 	bl	8000ad0 <__aeabi_dcmpgt>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d016      	beq.n	800665e <Batt_Protection_when_chargedischarge+0x66>
		Isc=IBATT;
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <Batt_Protection_when_chargedischarge+0x1e0>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a6a      	ldr	r2, [pc, #424]	; (80067e0 <Batt_Protection_when_chargedischarge+0x1e8>)
 8006636:	6013      	str	r3, [r2, #0]
		Vsc=VBATT;
 8006638:	4b68      	ldr	r3, [pc, #416]	; (80067dc <Batt_Protection_when_chargedischarge+0x1e4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a69      	ldr	r2, [pc, #420]	; (80067e4 <Batt_Protection_when_chargedischarge+0x1ec>)
 800663e:	6013      	str	r3, [r2, #0]
		fault_code=12;
 8006640:	4b69      	ldr	r3, [pc, #420]	; (80067e8 <Batt_Protection_when_chargedischarge+0x1f0>)
 8006642:	220c      	movs	r2, #12
 8006644:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8006646:	f7fa ff79 	bl	800153c <Batt_Open_Mode>
		flag_trip_shortcircuit=ON;
 800664a:	4b68      	ldr	r3, [pc, #416]	; (80067ec <Batt_Protection_when_chargedischarge+0x1f4>)
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006656:	4866      	ldr	r0, [pc, #408]	; (80067f0 <Batt_Protection_when_chargedischarge+0x1f8>)
 8006658:	f003 f8d5 	bl	8009806 <HAL_GPIO_WritePin>
 800665c:	e0f5      	b.n	800684a <Batt_Protection_when_chargedischarge+0x252>
	}

	// Under Voltage protection
	else if(VBATT < V_Under_Set && flag_trip_undervoltage == OFF ) { //Indikasi terjadi Undervoltage
 800665e:	4b5f      	ldr	r3, [pc, #380]	; (80067dc <Batt_Protection_when_chargedischarge+0x1e4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a64      	ldr	r2, [pc, #400]	; (80067f4 <Batt_Protection_when_chargedischarge+0x1fc>)
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	4611      	mov	r1, r2
 8006668:	4618      	mov	r0, r3
 800666a:	f7fa fd95 	bl	8001198 <__aeabi_fcmplt>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 80ea 	beq.w	800684a <Batt_Protection_when_chargedischarge+0x252>
 8006676:	4b60      	ldr	r3, [pc, #384]	; (80067f8 <Batt_Protection_when_chargedischarge+0x200>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 80e5 	bne.w	800684a <Batt_Protection_when_chargedischarge+0x252>
		fault_code=1;
 8006680:	4b59      	ldr	r3, [pc, #356]	; (80067e8 <Batt_Protection_when_chargedischarge+0x1f0>)
 8006682:	2201      	movs	r2, #1
 8006684:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8006686:	4b5d      	ldr	r3, [pc, #372]	; (80067fc <Batt_Protection_when_chargedischarge+0x204>)
 8006688:	681c      	ldr	r4, [r3, #0]
 800668a:	4b54      	ldr	r3, [pc, #336]	; (80067dc <Batt_Protection_when_chargedischarge+0x1e4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a59      	ldr	r2, [pc, #356]	; (80067f4 <Batt_Protection_when_chargedischarge+0x1fc>)
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	4611      	mov	r1, r2
 8006694:	4618      	mov	r0, r3
 8006696:	f7fa fc95 	bl	8000fc4 <__aeabi_fdiv>
 800669a:	4603      	mov	r3, r0
 800669c:	4619      	mov	r1, r3
 800669e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80066a2:	f7fa fad1 	bl	8000c48 <__aeabi_fsub>
 80066a6:	4603      	mov	r3, r0
 80066a8:	4619      	mov	r1, r3
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7fa fc8a 	bl	8000fc4 <__aeabi_fdiv>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	4b52      	ldr	r3, [pc, #328]	; (8006800 <Batt_Protection_when_chargedischarge+0x208>)
 80066b6:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 80066b8:	4b52      	ldr	r3, [pc, #328]	; (8006804 <Batt_Protection_when_chargedischarge+0x20c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7f9 ff1f 	bl	8000500 <__aeabi_f2d>
 80066c2:	a343      	add	r3, pc, #268	; (adr r3, 80067d0 <Batt_Protection_when_chargedischarge+0x1d8>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 fdbc 	bl	8000244 <__adddf3>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	f7fa fa64 	bl	8000ba0 <__aeabi_d2f>
 80066d8:	4603      	mov	r3, r0
 80066da:	4a4a      	ldr	r2, [pc, #296]	; (8006804 <Batt_Protection_when_chargedischarge+0x20c>)
 80066dc:	6013      	str	r3, [r2, #0]

		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 80066de:	4b49      	ldr	r3, [pc, #292]	; (8006804 <Batt_Protection_when_chargedischarge+0x20c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a47      	ldr	r2, [pc, #284]	; (8006800 <Batt_Protection_when_chargedischarge+0x208>)
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	4611      	mov	r1, r2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fa fd73 	bl	80011d4 <__aeabi_fcmpgt>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d012      	beq.n	800671a <Batt_Protection_when_chargedischarge+0x122>
 80066f4:	4b40      	ldr	r3, [pc, #256]	; (80067f8 <Batt_Protection_when_chargedischarge+0x200>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10e      	bne.n	800671a <Batt_Protection_when_chargedischarge+0x122>
			Batt_Open_Mode();
 80066fc:	f7fa ff1e 	bl	800153c <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <Batt_Protection_when_chargedischarge+0x208>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a3f      	ldr	r2, [pc, #252]	; (8006804 <Batt_Protection_when_chargedischarge+0x20c>)
 8006706:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 8006708:	4b3b      	ldr	r3, [pc, #236]	; (80067f8 <Batt_Protection_when_chargedischarge+0x200>)
 800670a:	2201      	movs	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800670e:	2200      	movs	r2, #0
 8006710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006714:	4836      	ldr	r0, [pc, #216]	; (80067f0 <Batt_Protection_when_chargedischarge+0x1f8>)
 8006716:	f003 f876 	bl	8009806 <HAL_GPIO_WritePin>
		}

		if(flag_trip_undervoltage==OFF) {
 800671a:	4b37      	ldr	r3, [pc, #220]	; (80067f8 <Batt_Protection_when_chargedischarge+0x200>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 8093 	bne.w	800684a <Batt_Protection_when_chargedischarge+0x252>
			if(T_Under_trip-T_trip_cycle>15) {
 8006724:	4b36      	ldr	r3, [pc, #216]	; (8006800 <Batt_Protection_when_chargedischarge+0x208>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a36      	ldr	r2, [pc, #216]	; (8006804 <Batt_Protection_when_chargedischarge+0x20c>)
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fa fa8a 	bl	8000c48 <__aeabi_fsub>
 8006734:	4603      	mov	r3, r0
 8006736:	4934      	ldr	r1, [pc, #208]	; (8006808 <Batt_Protection_when_chargedischarge+0x210>)
 8006738:	4618      	mov	r0, r3
 800673a:	f7fa fd4b 	bl	80011d4 <__aeabi_fcmpgt>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d017      	beq.n	8006774 <Batt_Protection_when_chargedischarge+0x17c>
				if((test_tim2%1000)==0) {
 8006744:	4b31      	ldr	r3, [pc, #196]	; (800680c <Batt_Protection_when_chargedischarge+0x214>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	4b31      	ldr	r3, [pc, #196]	; (8006810 <Batt_Protection_when_chargedischarge+0x218>)
 800674a:	fb83 1302 	smull	r1, r3, r3, r2
 800674e:	1199      	asrs	r1, r3, #6
 8006750:	17d3      	asrs	r3, r2, #31
 8006752:	1acb      	subs	r3, r1, r3
 8006754:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d173      	bne.n	800684a <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 8006762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006766:	4822      	ldr	r0, [pc, #136]	; (80067f0 <Batt_Protection_when_chargedischarge+0x1f8>)
 8006768:	f003 f865 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800676c:	4b27      	ldr	r3, [pc, #156]	; (800680c <Batt_Protection_when_chargedischarge+0x214>)
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	e06a      	b.n	800684a <Batt_Protection_when_chargedischarge+0x252>
				}
			}
			else if(T_Under_trip-T_trip_cycle>10) {
 8006774:	4b22      	ldr	r3, [pc, #136]	; (8006800 <Batt_Protection_when_chargedischarge+0x208>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a22      	ldr	r2, [pc, #136]	; (8006804 <Batt_Protection_when_chargedischarge+0x20c>)
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	4611      	mov	r1, r2
 800677e:	4618      	mov	r0, r3
 8006780:	f7fa fa62 	bl	8000c48 <__aeabi_fsub>
 8006784:	4603      	mov	r3, r0
 8006786:	4923      	ldr	r1, [pc, #140]	; (8006814 <Batt_Protection_when_chargedischarge+0x21c>)
 8006788:	4618      	mov	r0, r3
 800678a:	f7fa fd23 	bl	80011d4 <__aeabi_fcmpgt>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d043      	beq.n	800681c <Batt_Protection_when_chargedischarge+0x224>
				if((test_tim2%100)==0) {
 8006794:	4b1d      	ldr	r3, [pc, #116]	; (800680c <Batt_Protection_when_chargedischarge+0x214>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b1f      	ldr	r3, [pc, #124]	; (8006818 <Batt_Protection_when_chargedischarge+0x220>)
 800679a:	fb83 1302 	smull	r1, r3, r3, r2
 800679e:	1159      	asrs	r1, r3, #5
 80067a0:	17d3      	asrs	r3, r2, #31
 80067a2:	1acb      	subs	r3, r1, r3
 80067a4:	2164      	movs	r1, #100	; 0x64
 80067a6:	fb01 f303 	mul.w	r3, r1, r3
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d14c      	bne.n	800684a <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 80067b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067b4:	480e      	ldr	r0, [pc, #56]	; (80067f0 <Batt_Protection_when_chargedischarge+0x1f8>)
 80067b6:	f003 f83e 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <Batt_Protection_when_chargedischarge+0x214>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e043      	b.n	800684a <Batt_Protection_when_chargedischarge+0x252>
 80067c2:	bf00      	nop
 80067c4:	f3af 8000 	nop.w
 80067c8:	cccccccd 	.word	0xcccccccd
 80067cc:	3feccccc 	.word	0x3feccccc
 80067d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80067d4:	3f50624d 	.word	0x3f50624d
 80067d8:	2000070c 	.word	0x2000070c
 80067dc:	20000694 	.word	0x20000694
 80067e0:	200006f0 	.word	0x200006f0
 80067e4:	20000738 	.word	0x20000738
 80067e8:	2000071e 	.word	0x2000071e
 80067ec:	20000673 	.word	0x20000673
 80067f0:	40011000 	.word	0x40011000
 80067f4:	2000002c 	.word	0x2000002c
 80067f8:	20000715 	.word	0x20000715
 80067fc:	20000038 	.word	0x20000038
 8006800:	20000c3c 	.word	0x20000c3c
 8006804:	20000c5c 	.word	0x20000c5c
 8006808:	41700000 	.word	0x41700000
 800680c:	20000788 	.word	0x20000788
 8006810:	10624dd3 	.word	0x10624dd3
 8006814:	41200000 	.word	0x41200000
 8006818:	51eb851f 	.word	0x51eb851f
				}
			}
			else if(T_Under_trip-T_trip_cycle>1) {
 800681c:	4b78      	ldr	r3, [pc, #480]	; (8006a00 <Batt_Protection_when_chargedischarge+0x408>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a78      	ldr	r2, [pc, #480]	; (8006a04 <Batt_Protection_when_chargedischarge+0x40c>)
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f7fa fa0e 	bl	8000c48 <__aeabi_fsub>
 800682c:	4603      	mov	r3, r0
 800682e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006832:	4618      	mov	r0, r3
 8006834:	f7fa fcce 	bl	80011d4 <__aeabi_fcmpgt>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <Batt_Protection_when_chargedischarge+0x252>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800683e:	2201      	movs	r2, #1
 8006840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006844:	4870      	ldr	r0, [pc, #448]	; (8006a08 <Batt_Protection_when_chargedischarge+0x410>)
 8006846:	f002 ffde 	bl	8009806 <HAL_GPIO_WritePin>
			}
		}
	}

	// Over Current Protection
	if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {  //Indikasi terjadi Over Current
 800684a:	4b70      	ldr	r3, [pc, #448]	; (8006a0c <Batt_Protection_when_chargedischarge+0x414>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a70      	ldr	r2, [pc, #448]	; (8006a10 <Batt_Protection_when_chargedischarge+0x418>)
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	4611      	mov	r1, r2
 8006854:	4618      	mov	r0, r3
 8006856:	f7fa f9f7 	bl	8000c48 <__aeabi_fsub>
 800685a:	4603      	mov	r3, r0
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f7fa fcb7 	bl	80011d4 <__aeabi_fcmpgt>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80e7 	beq.w	8006a3c <Batt_Protection_when_chargedischarge+0x444>
 800686e:	4b69      	ldr	r3, [pc, #420]	; (8006a14 <Batt_Protection_when_chargedischarge+0x41c>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f040 80e2 	bne.w	8006a3c <Batt_Protection_when_chargedischarge+0x444>
		fault_code=2;
 8006878:	4b67      	ldr	r3, [pc, #412]	; (8006a18 <Batt_Protection_when_chargedischarge+0x420>)
 800687a:	2202      	movs	r2, #2
 800687c:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 800687e:	4b67      	ldr	r3, [pc, #412]	; (8006a1c <Batt_Protection_when_chargedischarge+0x424>)
 8006880:	681c      	ldr	r4, [r3, #0]
 8006882:	4b62      	ldr	r3, [pc, #392]	; (8006a0c <Batt_Protection_when_chargedischarge+0x414>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a62      	ldr	r2, [pc, #392]	; (8006a10 <Batt_Protection_when_chargedischarge+0x418>)
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	4611      	mov	r1, r2
 800688c:	4618      	mov	r0, r3
 800688e:	f7fa fb99 	bl	8000fc4 <__aeabi_fdiv>
 8006892:	4603      	mov	r3, r0
 8006894:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006898:	4618      	mov	r0, r3
 800689a:	f7fa f9d5 	bl	8000c48 <__aeabi_fsub>
 800689e:	4603      	mov	r3, r0
 80068a0:	4619      	mov	r1, r3
 80068a2:	4620      	mov	r0, r4
 80068a4:	f7fa fb8e 	bl	8000fc4 <__aeabi_fdiv>
 80068a8:	4603      	mov	r3, r0
 80068aa:	461a      	mov	r2, r3
 80068ac:	4b5c      	ldr	r3, [pc, #368]	; (8006a20 <Batt_Protection_when_chargedischarge+0x428>)
 80068ae:	601a      	str	r2, [r3, #0]
		T_I_Over_trip_cycle+=0.001;
 80068b0:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <Batt_Protection_when_chargedischarge+0x42c>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7f9 fe23 	bl	8000500 <__aeabi_f2d>
 80068ba:	a34f      	add	r3, pc, #316	; (adr r3, 80069f8 <Batt_Protection_when_chargedischarge+0x400>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fcc0 	bl	8000244 <__adddf3>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4610      	mov	r0, r2
 80068ca:	4619      	mov	r1, r3
 80068cc:	f7fa f968 	bl	8000ba0 <__aeabi_d2f>
 80068d0:	4603      	mov	r3, r0
 80068d2:	4a54      	ldr	r2, [pc, #336]	; (8006a24 <Batt_Protection_when_chargedischarge+0x42c>)
 80068d4:	6013      	str	r3, [r2, #0]

		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 80068d6:	4b53      	ldr	r3, [pc, #332]	; (8006a24 <Batt_Protection_when_chargedischarge+0x42c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a51      	ldr	r2, [pc, #324]	; (8006a20 <Batt_Protection_when_chargedischarge+0x428>)
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	4611      	mov	r1, r2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fa fc77 	bl	80011d4 <__aeabi_fcmpgt>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d012      	beq.n	8006912 <Batt_Protection_when_chargedischarge+0x31a>
 80068ec:	4b49      	ldr	r3, [pc, #292]	; (8006a14 <Batt_Protection_when_chargedischarge+0x41c>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10e      	bne.n	8006912 <Batt_Protection_when_chargedischarge+0x31a>
			T_I_Over_trip_cycle=T_I_Over_trip;
 80068f4:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <Batt_Protection_when_chargedischarge+0x428>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a4a      	ldr	r2, [pc, #296]	; (8006a24 <Batt_Protection_when_chargedischarge+0x42c>)
 80068fa:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 80068fc:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <Batt_Protection_when_chargedischarge+0x41c>)
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8006902:	f7fa fe1b 	bl	800153c <Batt_Open_Mode>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006906:	2200      	movs	r2, #0
 8006908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800690c:	483e      	ldr	r0, [pc, #248]	; (8006a08 <Batt_Protection_when_chargedischarge+0x410>)
 800690e:	f002 ff7a 	bl	8009806 <HAL_GPIO_WritePin>
		}
		if(flag_trip_overcurrentdischarge==OFF) {
 8006912:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <Batt_Protection_when_chargedischarge+0x41c>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 848b 	bne.w	8007232 <Batt_Protection_when_chargedischarge+0xc3a>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 800691c:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <Batt_Protection_when_chargedischarge+0x428>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a40      	ldr	r2, [pc, #256]	; (8006a24 <Batt_Protection_when_chargedischarge+0x42c>)
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	4611      	mov	r1, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f7fa f98e 	bl	8000c48 <__aeabi_fsub>
 800692c:	4603      	mov	r3, r0
 800692e:	493e      	ldr	r1, [pc, #248]	; (8006a28 <Batt_Protection_when_chargedischarge+0x430>)
 8006930:	4618      	mov	r0, r3
 8006932:	f7fa fc4f 	bl	80011d4 <__aeabi_fcmpgt>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d019      	beq.n	8006970 <Batt_Protection_when_chargedischarge+0x378>
				if((test_tim2%1000)==0) {
 800693c:	4b3b      	ldr	r3, [pc, #236]	; (8006a2c <Batt_Protection_when_chargedischarge+0x434>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4b3b      	ldr	r3, [pc, #236]	; (8006a30 <Batt_Protection_when_chargedischarge+0x438>)
 8006942:	fb83 1302 	smull	r1, r3, r3, r2
 8006946:	1199      	asrs	r1, r3, #6
 8006948:	17d3      	asrs	r3, r2, #31
 800694a:	1acb      	subs	r3, r1, r3
 800694c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006950:	fb01 f303 	mul.w	r3, r1, r3
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	f040 846b 	bne.w	8007232 <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 800695c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006960:	4829      	ldr	r0, [pc, #164]	; (8006a08 <Batt_Protection_when_chargedischarge+0x410>)
 8006962:	f002 ff68 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <Batt_Protection_when_chargedischarge+0x434>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 800696c:	f000 bc61 	b.w	8007232 <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8006970:	4b2b      	ldr	r3, [pc, #172]	; (8006a20 <Batt_Protection_when_chargedischarge+0x428>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2b      	ldr	r2, [pc, #172]	; (8006a24 <Batt_Protection_when_chargedischarge+0x42c>)
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	4611      	mov	r1, r2
 800697a:	4618      	mov	r0, r3
 800697c:	f7fa f964 	bl	8000c48 <__aeabi_fsub>
 8006980:	4603      	mov	r3, r0
 8006982:	492c      	ldr	r1, [pc, #176]	; (8006a34 <Batt_Protection_when_chargedischarge+0x43c>)
 8006984:	4618      	mov	r0, r3
 8006986:	f7fa fc25 	bl	80011d4 <__aeabi_fcmpgt>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d018      	beq.n	80069c2 <Batt_Protection_when_chargedischarge+0x3ca>
				if((test_tim2%100)==0) {
 8006990:	4b26      	ldr	r3, [pc, #152]	; (8006a2c <Batt_Protection_when_chargedischarge+0x434>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <Batt_Protection_when_chargedischarge+0x440>)
 8006996:	fb83 1302 	smull	r1, r3, r3, r2
 800699a:	1159      	asrs	r1, r3, #5
 800699c:	17d3      	asrs	r3, r2, #31
 800699e:	1acb      	subs	r3, r1, r3
 80069a0:	2164      	movs	r1, #100	; 0x64
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f040 8442 	bne.w	8007232 <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 80069ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069b2:	4815      	ldr	r0, [pc, #84]	; (8006a08 <Batt_Protection_when_chargedischarge+0x410>)
 80069b4:	f002 ff3f 	bl	8009836 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80069b8:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <Batt_Protection_when_chargedischarge+0x434>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 80069be:	f000 bc38 	b.w	8007232 <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 80069c2:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <Batt_Protection_when_chargedischarge+0x428>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a17      	ldr	r2, [pc, #92]	; (8006a24 <Batt_Protection_when_chargedischarge+0x42c>)
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fa f93b 	bl	8000c48 <__aeabi_fsub>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fa fbfb 	bl	80011d4 <__aeabi_fcmpgt>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <Batt_Protection_when_chargedischarge+0x3f0>
		if(flag_trip_overcurrentdischarge==OFF) {
 80069e4:	f000 bc25 	b.w	8007232 <Batt_Protection_when_chargedischarge+0xc3a>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80069e8:	2201      	movs	r2, #1
 80069ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069ee:	4806      	ldr	r0, [pc, #24]	; (8006a08 <Batt_Protection_when_chargedischarge+0x410>)
 80069f0:	f002 ff09 	bl	8009806 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 80069f4:	f000 bc1d 	b.w	8007232 <Batt_Protection_when_chargedischarge+0xc3a>
 80069f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80069fc:	3f50624d 	.word	0x3f50624d
 8006a00:	20000c3c 	.word	0x20000c3c
 8006a04:	20000c5c 	.word	0x20000c5c
 8006a08:	40011000 	.word	0x40011000
 8006a0c:	2000070c 	.word	0x2000070c
 8006a10:	20000018 	.word	0x20000018
 8006a14:	20000728 	.word	0x20000728
 8006a18:	2000071e 	.word	0x2000071e
 8006a1c:	2000003c 	.word	0x2000003c
 8006a20:	20000680 	.word	0x20000680
 8006a24:	20000760 	.word	0x20000760
 8006a28:	41700000 	.word	0x41700000
 8006a2c:	20000788 	.word	0x20000788
 8006a30:	10624dd3 	.word	0x10624dd3
 8006a34:	41200000 	.word	0x41200000
 8006a38:	51eb851f 	.word	0x51eb851f
			}
		}
	}

	// Over Temperature protection
	else if(((50-Suhu_T1 < 10)||(85-Suhu_T2 < 10)||(50-Suhu_T3 < 10)||(85-Suhu_T4 < 10)) && flag_trip_overtemperature==OFF) {
 8006a3c:	4b8e      	ldr	r3, [pc, #568]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4619      	mov	r1, r3
 8006a42:	488e      	ldr	r0, [pc, #568]	; (8006c7c <Batt_Protection_when_chargedischarge+0x684>)
 8006a44:	f7fa f900 	bl	8000c48 <__aeabi_fsub>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	498d      	ldr	r1, [pc, #564]	; (8006c80 <Batt_Protection_when_chargedischarge+0x688>)
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fa fba3 	bl	8001198 <__aeabi_fcmplt>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d12a      	bne.n	8006aae <Batt_Protection_when_chargedischarge+0x4b6>
 8006a58:	4b8a      	ldr	r3, [pc, #552]	; (8006c84 <Batt_Protection_when_chargedischarge+0x68c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	488a      	ldr	r0, [pc, #552]	; (8006c88 <Batt_Protection_when_chargedischarge+0x690>)
 8006a60:	f7fa f8f2 	bl	8000c48 <__aeabi_fsub>
 8006a64:	4603      	mov	r3, r0
 8006a66:	4986      	ldr	r1, [pc, #536]	; (8006c80 <Batt_Protection_when_chargedischarge+0x688>)
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fa fb95 	bl	8001198 <__aeabi_fcmplt>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d11c      	bne.n	8006aae <Batt_Protection_when_chargedischarge+0x4b6>
 8006a74:	4b85      	ldr	r3, [pc, #532]	; (8006c8c <Batt_Protection_when_chargedischarge+0x694>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4880      	ldr	r0, [pc, #512]	; (8006c7c <Batt_Protection_when_chargedischarge+0x684>)
 8006a7c:	f7fa f8e4 	bl	8000c48 <__aeabi_fsub>
 8006a80:	4603      	mov	r3, r0
 8006a82:	497f      	ldr	r1, [pc, #508]	; (8006c80 <Batt_Protection_when_chargedischarge+0x688>)
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fa fb87 	bl	8001198 <__aeabi_fcmplt>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10e      	bne.n	8006aae <Batt_Protection_when_chargedischarge+0x4b6>
 8006a90:	4b7f      	ldr	r3, [pc, #508]	; (8006c90 <Batt_Protection_when_chargedischarge+0x698>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4619      	mov	r1, r3
 8006a96:	487c      	ldr	r0, [pc, #496]	; (8006c88 <Batt_Protection_when_chargedischarge+0x690>)
 8006a98:	f7fa f8d6 	bl	8000c48 <__aeabi_fsub>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4978      	ldr	r1, [pc, #480]	; (8006c80 <Batt_Protection_when_chargedischarge+0x688>)
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fa fb79 	bl	8001198 <__aeabi_fcmplt>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8101 	beq.w	8006cb0 <Batt_Protection_when_chargedischarge+0x6b8>
 8006aae:	4b79      	ldr	r3, [pc, #484]	; (8006c94 <Batt_Protection_when_chargedischarge+0x69c>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 80fc 	bne.w	8006cb0 <Batt_Protection_when_chargedischarge+0x6b8>
		fault_code=3;
 8006ab8:	4b77      	ldr	r3, [pc, #476]	; (8006c98 <Batt_Protection_when_chargedischarge+0x6a0>)
 8006aba:	2203      	movs	r2, #3
 8006abc:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8006abe:	4b77      	ldr	r3, [pc, #476]	; (8006c9c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	496f      	ldr	r1, [pc, #444]	; (8006c80 <Batt_Protection_when_chargedischarge+0x688>)
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fa f8bf 	bl	8000c48 <__aeabi_fsub>
 8006aca:	4603      	mov	r3, r0
 8006acc:	461a      	mov	r2, r3
 8006ace:	4b6a      	ldr	r3, [pc, #424]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7fa fb5f 	bl	8001198 <__aeabi_fcmplt>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d029      	beq.n	8006b34 <Batt_Protection_when_chargedischarge+0x53c>
 8006ae0:	4b6e      	ldr	r3, [pc, #440]	; (8006c9c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	496e      	ldr	r1, [pc, #440]	; (8006ca0 <Batt_Protection_when_chargedischarge+0x6a8>)
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fa f8ae 	bl	8000c48 <__aeabi_fsub>
 8006aec:	4603      	mov	r3, r0
 8006aee:	461a      	mov	r2, r3
 8006af0:	4b61      	ldr	r3, [pc, #388]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fa fb62 	bl	80011c0 <__aeabi_fcmpge>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d018      	beq.n	8006b34 <Batt_Protection_when_chargedischarge+0x53c>
			if((test_tim2%1000)==0) {
 8006b02:	4b68      	ldr	r3, [pc, #416]	; (8006ca4 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b68      	ldr	r3, [pc, #416]	; (8006ca8 <Batt_Protection_when_chargedischarge+0x6b0>)
 8006b08:	fb83 1302 	smull	r1, r3, r3, r2
 8006b0c:	1199      	asrs	r1, r3, #6
 8006b0e:	17d3      	asrs	r3, r2, #31
 8006b10:	1acb      	subs	r3, r1, r3
 8006b12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 80aa 	bne.w	8006c76 <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 8006b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b26:	4861      	ldr	r0, [pc, #388]	; (8006cac <Batt_Protection_when_chargedischarge+0x6b4>)
 8006b28:	f002 fe85 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006b2c:	4b5d      	ldr	r3, [pc, #372]	; (8006ca4 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8006b32:	e0a0      	b.n	8006c76 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2){
 8006b34:	4b59      	ldr	r3, [pc, #356]	; (8006c9c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4959      	ldr	r1, [pc, #356]	; (8006ca0 <Batt_Protection_when_chargedischarge+0x6a8>)
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fa f884 	bl	8000c48 <__aeabi_fsub>
 8006b40:	4603      	mov	r3, r0
 8006b42:	461a      	mov	r2, r3
 8006b44:	4b4c      	ldr	r3, [pc, #304]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f7fa fb24 	bl	8001198 <__aeabi_fcmplt>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d029      	beq.n	8006baa <Batt_Protection_when_chargedischarge+0x5b2>
 8006b56:	4b51      	ldr	r3, [pc, #324]	; (8006c9c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fa f872 	bl	8000c48 <__aeabi_fsub>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	4b43      	ldr	r3, [pc, #268]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fa fb26 	bl	80011c0 <__aeabi_fcmpge>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d017      	beq.n	8006baa <Batt_Protection_when_chargedischarge+0x5b2>
			if((test_tim2%500)==0) {
 8006b7a:	4b4a      	ldr	r3, [pc, #296]	; (8006ca4 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b4a      	ldr	r3, [pc, #296]	; (8006ca8 <Batt_Protection_when_chargedischarge+0x6b0>)
 8006b80:	fb83 1302 	smull	r1, r3, r3, r2
 8006b84:	1159      	asrs	r1, r3, #5
 8006b86:	17d3      	asrs	r3, r2, #31
 8006b88:	1acb      	subs	r3, r1, r3
 8006b8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006b8e:	fb01 f303 	mul.w	r3, r1, r3
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d16e      	bne.n	8006c76 <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 8006b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b9c:	4843      	ldr	r0, [pc, #268]	; (8006cac <Batt_Protection_when_chargedischarge+0x6b4>)
 8006b9e:	f002 fe4a 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006ba2:	4b40      	ldr	r3, [pc, #256]	; (8006ca4 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006ba8:	e065      	b.n	8006c76 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set) {
 8006baa:	4b3c      	ldr	r3, [pc, #240]	; (8006c9c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fa f848 	bl	8000c48 <__aeabi_fsub>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fa fae8 	bl	8001198 <__aeabi_fcmplt>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d022      	beq.n	8006c14 <Batt_Protection_when_chargedischarge+0x61c>
 8006bce:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a32      	ldr	r2, [pc, #200]	; (8006c9c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fa fae7 	bl	80011ac <__aeabi_fcmple>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d017      	beq.n	8006c14 <Batt_Protection_when_chargedischarge+0x61c>
			if((test_tim2%500)==0)
 8006be4:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	4b2f      	ldr	r3, [pc, #188]	; (8006ca8 <Batt_Protection_when_chargedischarge+0x6b0>)
 8006bea:	fb83 1302 	smull	r1, r3, r3, r2
 8006bee:	1159      	asrs	r1, r3, #5
 8006bf0:	17d3      	asrs	r3, r2, #31
 8006bf2:	1acb      	subs	r3, r1, r3
 8006bf4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d139      	bne.n	8006c76 <Batt_Protection_when_chargedischarge+0x67e>
			{
				BUZZ_Toggle;
 8006c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c06:	4829      	ldr	r0, [pc, #164]	; (8006cac <Batt_Protection_when_chargedischarge+0x6b4>)
 8006c08:	f002 fe15 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006c0c:	4b25      	ldr	r3, [pc, #148]	; (8006ca4 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0)
 8006c12:	e030      	b.n	8006c76 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85) {
 8006c14:	4b18      	ldr	r3, [pc, #96]	; (8006c78 <Batt_Protection_when_chargedischarge+0x680>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4918      	ldr	r1, [pc, #96]	; (8006c7c <Batt_Protection_when_chargedischarge+0x684>)
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fa fada 	bl	80011d4 <__aeabi_fcmpgt>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d11b      	bne.n	8006c5e <Batt_Protection_when_chargedischarge+0x666>
 8006c26:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <Batt_Protection_when_chargedischarge+0x68c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4917      	ldr	r1, [pc, #92]	; (8006c88 <Batt_Protection_when_chargedischarge+0x690>)
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fa fad1 	bl	80011d4 <__aeabi_fcmpgt>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d112      	bne.n	8006c5e <Batt_Protection_when_chargedischarge+0x666>
 8006c38:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <Batt_Protection_when_chargedischarge+0x694>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	490f      	ldr	r1, [pc, #60]	; (8006c7c <Batt_Protection_when_chargedischarge+0x684>)
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fa fac8 	bl	80011d4 <__aeabi_fcmpgt>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <Batt_Protection_when_chargedischarge+0x666>
 8006c4a:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <Batt_Protection_when_chargedischarge+0x698>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	490e      	ldr	r1, [pc, #56]	; (8006c88 <Batt_Protection_when_chargedischarge+0x690>)
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fa fabf 	bl	80011d4 <__aeabi_fcmpgt>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d100      	bne.n	8006c5e <Batt_Protection_when_chargedischarge+0x666>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8006c5c:	e2ea      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 8006c5e:	f7fa fc6d 	bl	800153c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <Batt_Protection_when_chargedischarge+0x69c>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c6e:	480f      	ldr	r0, [pc, #60]	; (8006cac <Batt_Protection_when_chargedischarge+0x6b4>)
 8006c70:	f002 fdc9 	bl	8009806 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8006c74:	e2de      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
 8006c76:	e2dd      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
 8006c78:	20000720 	.word	0x20000720
 8006c7c:	42480000 	.word	0x42480000
 8006c80:	41200000 	.word	0x41200000
 8006c84:	200007a0 	.word	0x200007a0
 8006c88:	42aa0000 	.word	0x42aa0000
 8006c8c:	20000698 	.word	0x20000698
 8006c90:	20000758 	.word	0x20000758
 8006c94:	20000690 	.word	0x20000690
 8006c98:	2000071e 	.word	0x2000071e
 8006c9c:	20000020 	.word	0x20000020
 8006ca0:	40a00000 	.word	0x40a00000
 8006ca4:	20000788 	.word	0x20000788
 8006ca8:	10624dd3 	.word	0x10624dd3
 8006cac:	40011000 	.word	0x40011000
		}
	}

	// Under Temperature protection
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8006cb0:	4b96      	ldr	r3, [pc, #600]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a96      	ldr	r2, [pc, #600]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7f9 ffc4 	bl	8000c48 <__aeabi_fsub>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4994      	ldr	r1, [pc, #592]	; (8006f14 <Batt_Protection_when_chargedischarge+0x91c>)
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f7fa fa71 	bl	80011ac <__aeabi_fcmple>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d130      	bne.n	8006d32 <Batt_Protection_when_chargedischarge+0x73a>
 8006cd0:	4b91      	ldr	r3, [pc, #580]	; (8006f18 <Batt_Protection_when_chargedischarge+0x920>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a8e      	ldr	r2, [pc, #568]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7f9 ffb4 	bl	8000c48 <__aeabi_fsub>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	498c      	ldr	r1, [pc, #560]	; (8006f14 <Batt_Protection_when_chargedischarge+0x91c>)
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fa fa61 	bl	80011ac <__aeabi_fcmple>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d120      	bne.n	8006d32 <Batt_Protection_when_chargedischarge+0x73a>
 8006cf0:	4b8a      	ldr	r3, [pc, #552]	; (8006f1c <Batt_Protection_when_chargedischarge+0x924>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a86      	ldr	r2, [pc, #536]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7f9 ffa4 	bl	8000c48 <__aeabi_fsub>
 8006d00:	4603      	mov	r3, r0
 8006d02:	4984      	ldr	r1, [pc, #528]	; (8006f14 <Batt_Protection_when_chargedischarge+0x91c>)
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fa fa51 	bl	80011ac <__aeabi_fcmple>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d110      	bne.n	8006d32 <Batt_Protection_when_chargedischarge+0x73a>
 8006d10:	4b83      	ldr	r3, [pc, #524]	; (8006f20 <Batt_Protection_when_chargedischarge+0x928>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a7e      	ldr	r2, [pc, #504]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006d16:	6812      	ldr	r2, [r2, #0]
 8006d18:	4611      	mov	r1, r2
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7f9 ff94 	bl	8000c48 <__aeabi_fsub>
 8006d20:	4603      	mov	r3, r0
 8006d22:	497c      	ldr	r1, [pc, #496]	; (8006f14 <Batt_Protection_when_chargedischarge+0x91c>)
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fa fa41 	bl	80011ac <__aeabi_fcmple>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8105 	beq.w	8006f3c <Batt_Protection_when_chargedischarge+0x944>
 8006d32:	4b7c      	ldr	r3, [pc, #496]	; (8006f24 <Batt_Protection_when_chargedischarge+0x92c>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f040 8100 	bne.w	8006f3c <Batt_Protection_when_chargedischarge+0x944>
		fault_code=4;
 8006d3c:	4b7a      	ldr	r3, [pc, #488]	; (8006f28 <Batt_Protection_when_chargedischarge+0x930>)
 8006d3e:	2204      	movs	r2, #4
 8006d40:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006d42:	4b73      	ldr	r3, [pc, #460]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4973      	ldr	r1, [pc, #460]	; (8006f14 <Batt_Protection_when_chargedischarge+0x91c>)
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7f9 ff7f 	bl	8000c4c <__addsf3>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	461a      	mov	r2, r3
 8006d52:	4b6e      	ldr	r3, [pc, #440]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4619      	mov	r1, r3
 8006d58:	4610      	mov	r0, r2
 8006d5a:	f7fa fa31 	bl	80011c0 <__aeabi_fcmpge>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d029      	beq.n	8006db8 <Batt_Protection_when_chargedischarge+0x7c0>
 8006d64:	4b6a      	ldr	r3, [pc, #424]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4970      	ldr	r1, [pc, #448]	; (8006f2c <Batt_Protection_when_chargedischarge+0x934>)
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7f9 ff6e 	bl	8000c4c <__addsf3>
 8006d70:	4603      	mov	r3, r0
 8006d72:	461a      	mov	r2, r3
 8006d74:	4b65      	ldr	r3, [pc, #404]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f7fa fa0c 	bl	8001198 <__aeabi_fcmplt>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d018      	beq.n	8006db8 <Batt_Protection_when_chargedischarge+0x7c0>
			if((test_tim2%1000)==0) {
 8006d86:	4b6a      	ldr	r3, [pc, #424]	; (8006f30 <Batt_Protection_when_chargedischarge+0x938>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b6a      	ldr	r3, [pc, #424]	; (8006f34 <Batt_Protection_when_chargedischarge+0x93c>)
 8006d8c:	fb83 1302 	smull	r1, r3, r3, r2
 8006d90:	1199      	asrs	r1, r3, #6
 8006d92:	17d3      	asrs	r3, r2, #31
 8006d94:	1acb      	subs	r3, r1, r3
 8006d96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 80b2 	bne.w	8006f0a <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 8006da6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006daa:	4863      	ldr	r0, [pc, #396]	; (8006f38 <Batt_Protection_when_chargedischarge+0x940>)
 8006dac:	f002 fd43 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006db0:	4b5f      	ldr	r3, [pc, #380]	; (8006f30 <Batt_Protection_when_chargedischarge+0x938>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8006db6:	e0a8      	b.n	8006f0a <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 8006db8:	4b55      	ldr	r3, [pc, #340]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	495b      	ldr	r1, [pc, #364]	; (8006f2c <Batt_Protection_when_chargedischarge+0x934>)
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7f9 ff44 	bl	8000c4c <__addsf3>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4b50      	ldr	r3, [pc, #320]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f7fa f9f6 	bl	80011c0 <__aeabi_fcmpge>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d029      	beq.n	8006e2e <Batt_Protection_when_chargedischarge+0x836>
 8006dda:	4b4d      	ldr	r3, [pc, #308]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7f9 ff32 	bl	8000c4c <__addsf3>
 8006de8:	4603      	mov	r3, r0
 8006dea:	461a      	mov	r2, r3
 8006dec:	4b47      	ldr	r3, [pc, #284]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7fa f9d0 	bl	8001198 <__aeabi_fcmplt>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d017      	beq.n	8006e2e <Batt_Protection_when_chargedischarge+0x836>
			if((test_tim2%500)==0) {
 8006dfe:	4b4c      	ldr	r3, [pc, #304]	; (8006f30 <Batt_Protection_when_chargedischarge+0x938>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b4c      	ldr	r3, [pc, #304]	; (8006f34 <Batt_Protection_when_chargedischarge+0x93c>)
 8006e04:	fb83 1302 	smull	r1, r3, r3, r2
 8006e08:	1159      	asrs	r1, r3, #5
 8006e0a:	17d3      	asrs	r3, r2, #31
 8006e0c:	1acb      	subs	r3, r1, r3
 8006e0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d176      	bne.n	8006f0a <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 8006e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e20:	4845      	ldr	r0, [pc, #276]	; (8006f38 <Batt_Protection_when_chargedischarge+0x940>)
 8006e22:	f002 fd08 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006e26:	4b42      	ldr	r3, [pc, #264]	; (8006f30 <Batt_Protection_when_chargedischarge+0x938>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006e2c:	e06d      	b.n	8006f0a <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 8006e2e:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7f9 ff08 	bl	8000c4c <__addsf3>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4b32      	ldr	r3, [pc, #200]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f7fa f9c4 	bl	80011d4 <__aeabi_fcmpgt>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d022      	beq.n	8006e98 <Batt_Protection_when_chargedischarge+0x8a0>
 8006e52:	4b2e      	ldr	r3, [pc, #184]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2e      	ldr	r2, [pc, #184]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006e58:	6812      	ldr	r2, [r2, #0]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fa f9af 	bl	80011c0 <__aeabi_fcmpge>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d017      	beq.n	8006e98 <Batt_Protection_when_chargedischarge+0x8a0>
			if((test_tim2%500)==0) {
 8006e68:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <Batt_Protection_when_chargedischarge+0x938>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	4b31      	ldr	r3, [pc, #196]	; (8006f34 <Batt_Protection_when_chargedischarge+0x93c>)
 8006e6e:	fb83 1302 	smull	r1, r3, r3, r2
 8006e72:	1159      	asrs	r1, r3, #5
 8006e74:	17d3      	asrs	r3, r2, #31
 8006e76:	1acb      	subs	r3, r1, r3
 8006e78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006e7c:	fb01 f303 	mul.w	r3, r1, r3
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d141      	bne.n	8006f0a <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 8006e86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e8a:	482b      	ldr	r0, [pc, #172]	; (8006f38 <Batt_Protection_when_chargedischarge+0x940>)
 8006e8c:	f002 fcd3 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006e90:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <Batt_Protection_when_chargedischarge+0x938>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006e96:	e038      	b.n	8006f0a <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 8006e98:	4b1c      	ldr	r3, [pc, #112]	; (8006f0c <Batt_Protection_when_chargedischarge+0x914>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1c      	ldr	r2, [pc, #112]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fa f978 	bl	8001198 <__aeabi_fcmplt>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d121      	bne.n	8006ef2 <Batt_Protection_when_chargedischarge+0x8fa>
 8006eae:	4b1a      	ldr	r3, [pc, #104]	; (8006f18 <Batt_Protection_when_chargedischarge+0x920>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fa f96d 	bl	8001198 <__aeabi_fcmplt>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d116      	bne.n	8006ef2 <Batt_Protection_when_chargedischarge+0x8fa>
 8006ec4:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <Batt_Protection_when_chargedischarge+0x924>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a11      	ldr	r2, [pc, #68]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fa f962 	bl	8001198 <__aeabi_fcmplt>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <Batt_Protection_when_chargedischarge+0x8fa>
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <Batt_Protection_when_chargedischarge+0x928>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a0c      	ldr	r2, [pc, #48]	; (8006f10 <Batt_Protection_when_chargedischarge+0x918>)
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fa f957 	bl	8001198 <__aeabi_fcmplt>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d100      	bne.n	8006ef2 <Batt_Protection_when_chargedischarge+0x8fa>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006ef0:	e1a0      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 8006ef2:	f7fa fb23 	bl	800153c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <Batt_Protection_when_chargedischarge+0x92c>)
 8006ef8:	2201      	movs	r2, #1
 8006efa:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006efc:	2200      	movs	r2, #0
 8006efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f02:	480d      	ldr	r0, [pc, #52]	; (8006f38 <Batt_Protection_when_chargedischarge+0x940>)
 8006f04:	f002 fc7f 	bl	8009806 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006f08:	e194      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
 8006f0a:	e193      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
 8006f0c:	20000720 	.word	0x20000720
 8006f10:	20000024 	.word	0x20000024
 8006f14:	41200000 	.word	0x41200000
 8006f18:	200007a0 	.word	0x200007a0
 8006f1c:	20000698 	.word	0x20000698
 8006f20:	20000758 	.word	0x20000758
 8006f24:	20000714 	.word	0x20000714
 8006f28:	2000071e 	.word	0x2000071e
 8006f2c:	40a00000 	.word	0x40a00000
 8006f30:	20000788 	.word	0x20000788
 8006f34:	10624dd3 	.word	0x10624dd3
 8006f38:	40011000 	.word	0x40011000
		}
	}

	// SOC OverDischarge protection
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8006f3c:	4b83      	ldr	r3, [pc, #524]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a83      	ldr	r2, [pc, #524]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 8006f42:	6812      	ldr	r2, [r2, #0]
 8006f44:	4611      	mov	r1, r2
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7f9 fe7e 	bl	8000c48 <__aeabi_fsub>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	4981      	ldr	r1, [pc, #516]	; (8007154 <Batt_Protection_when_chargedischarge+0xb5c>)
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fa f92b 	bl	80011ac <__aeabi_fcmple>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80d1 	beq.w	8007100 <Batt_Protection_when_chargedischarge+0xb08>
 8006f5e:	4b7e      	ldr	r3, [pc, #504]	; (8007158 <Batt_Protection_when_chargedischarge+0xb60>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f040 80cc 	bne.w	8007100 <Batt_Protection_when_chargedischarge+0xb08>
 8006f68:	4b7c      	ldr	r3, [pc, #496]	; (800715c <Batt_Protection_when_chargedischarge+0xb64>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	f040 80c7 	bne.w	8007100 <Batt_Protection_when_chargedischarge+0xb08>
		fault_code=5;
 8006f72:	4b7b      	ldr	r3, [pc, #492]	; (8007160 <Batt_Protection_when_chargedischarge+0xb68>)
 8006f74:	2205      	movs	r2, #5
 8006f76:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 8006f78:	4b75      	ldr	r3, [pc, #468]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4975      	ldr	r1, [pc, #468]	; (8007154 <Batt_Protection_when_chargedischarge+0xb5c>)
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7f9 fe64 	bl	8000c4c <__addsf3>
 8006f84:	4603      	mov	r3, r0
 8006f86:	461a      	mov	r2, r3
 8006f88:	4b70      	ldr	r3, [pc, #448]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4610      	mov	r0, r2
 8006f90:	f7fa f916 	bl	80011c0 <__aeabi_fcmpge>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d029      	beq.n	8006fee <Batt_Protection_when_chargedischarge+0x9f6>
 8006f9a:	4b6d      	ldr	r3, [pc, #436]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4971      	ldr	r1, [pc, #452]	; (8007164 <Batt_Protection_when_chargedischarge+0xb6c>)
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7f9 fe53 	bl	8000c4c <__addsf3>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4b68      	ldr	r3, [pc, #416]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f7fa f8f1 	bl	8001198 <__aeabi_fcmplt>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d018      	beq.n	8006fee <Batt_Protection_when_chargedischarge+0x9f6>
			if((test_tim2%1000)==0) {
 8006fbc:	4b6a      	ldr	r3, [pc, #424]	; (8007168 <Batt_Protection_when_chargedischarge+0xb70>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	4b6a      	ldr	r3, [pc, #424]	; (800716c <Batt_Protection_when_chargedischarge+0xb74>)
 8006fc2:	fb83 1302 	smull	r1, r3, r3, r2
 8006fc6:	1199      	asrs	r1, r3, #6
 8006fc8:	17d3      	asrs	r3, r2, #31
 8006fca:	1acb      	subs	r3, r1, r3
 8006fcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f040 8091 	bne.w	80070fe <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 8006fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fe0:	4863      	ldr	r0, [pc, #396]	; (8007170 <Batt_Protection_when_chargedischarge+0xb78>)
 8006fe2:	f002 fc28 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006fe6:	4b60      	ldr	r3, [pc, #384]	; (8007168 <Batt_Protection_when_chargedischarge+0xb70>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8006fec:	e087      	b.n	80070fe <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2) {
 8006fee:	4b58      	ldr	r3, [pc, #352]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	495c      	ldr	r1, [pc, #368]	; (8007164 <Batt_Protection_when_chargedischarge+0xb6c>)
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7f9 fe29 	bl	8000c4c <__addsf3>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b53      	ldr	r3, [pc, #332]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f7fa f8db 	bl	80011c0 <__aeabi_fcmpge>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d029      	beq.n	8007064 <Batt_Protection_when_chargedischarge+0xa6c>
 8007010:	4b4f      	ldr	r3, [pc, #316]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007018:	4618      	mov	r0, r3
 800701a:	f7f9 fe17 	bl	8000c4c <__addsf3>
 800701e:	4603      	mov	r3, r0
 8007020:	461a      	mov	r2, r3
 8007022:	4b4a      	ldr	r3, [pc, #296]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f7fa f8b5 	bl	8001198 <__aeabi_fcmplt>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <Batt_Protection_when_chargedischarge+0xa6c>
			if((test_tim2%500)==0) {
 8007034:	4b4c      	ldr	r3, [pc, #304]	; (8007168 <Batt_Protection_when_chargedischarge+0xb70>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b4c      	ldr	r3, [pc, #304]	; (800716c <Batt_Protection_when_chargedischarge+0xb74>)
 800703a:	fb83 1302 	smull	r1, r3, r3, r2
 800703e:	1159      	asrs	r1, r3, #5
 8007040:	17d3      	asrs	r3, r2, #31
 8007042:	1acb      	subs	r3, r1, r3
 8007044:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007048:	fb01 f303 	mul.w	r3, r1, r3
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d155      	bne.n	80070fe <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 8007052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007056:	4846      	ldr	r0, [pc, #280]	; (8007170 <Batt_Protection_when_chargedischarge+0xb78>)
 8007058:	f002 fbed 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800705c:	4b42      	ldr	r3, [pc, #264]	; (8007168 <Batt_Protection_when_chargedischarge+0xb70>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8007062:	e04c      	b.n	80070fe <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set) {
 8007064:	4b3a      	ldr	r3, [pc, #232]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800706c:	4618      	mov	r0, r3
 800706e:	f7f9 fded 	bl	8000c4c <__addsf3>
 8007072:	4603      	mov	r3, r0
 8007074:	461a      	mov	r2, r3
 8007076:	4b35      	ldr	r3, [pc, #212]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fa f8a9 	bl	80011d4 <__aeabi_fcmpgt>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d022      	beq.n	80070ce <Batt_Protection_when_chargedischarge+0xad6>
 8007088:	4b30      	ldr	r3, [pc, #192]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a30      	ldr	r2, [pc, #192]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	4611      	mov	r1, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f7fa f894 	bl	80011c0 <__aeabi_fcmpge>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d017      	beq.n	80070ce <Batt_Protection_when_chargedischarge+0xad6>
			if((test_tim2%500)==0){
 800709e:	4b32      	ldr	r3, [pc, #200]	; (8007168 <Batt_Protection_when_chargedischarge+0xb70>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4b32      	ldr	r3, [pc, #200]	; (800716c <Batt_Protection_when_chargedischarge+0xb74>)
 80070a4:	fb83 1302 	smull	r1, r3, r3, r2
 80070a8:	1159      	asrs	r1, r3, #5
 80070aa:	17d3      	asrs	r3, r2, #31
 80070ac:	1acb      	subs	r3, r1, r3
 80070ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80070b2:	fb01 f303 	mul.w	r3, r1, r3
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d120      	bne.n	80070fe <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 80070bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070c0:	482b      	ldr	r0, [pc, #172]	; (8007170 <Batt_Protection_when_chargedischarge+0xb78>)
 80070c2:	f002 fbb8 	bl	8009836 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80070c6:	4b28      	ldr	r3, [pc, #160]	; (8007168 <Batt_Protection_when_chargedischarge+0xb70>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80070cc:	e017      	b.n	80070fe <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set) {
 80070ce:	4b1f      	ldr	r3, [pc, #124]	; (800714c <Batt_Protection_when_chargedischarge+0xb54>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1f      	ldr	r2, [pc, #124]	; (8007150 <Batt_Protection_when_chargedischarge+0xb58>)
 80070d4:	6812      	ldr	r2, [r2, #0]
 80070d6:	4611      	mov	r1, r2
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fa f85d 	bl	8001198 <__aeabi_fcmplt>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d100      	bne.n	80070e6 <Batt_Protection_when_chargedischarge+0xaee>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 80070e4:	e0a6      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 80070e6:	f7fa fa29 	bl	800153c <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 80070ea:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <Batt_Protection_when_chargedischarge+0xb60>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80070f0:	2200      	movs	r2, #0
 80070f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070f6:	481e      	ldr	r0, [pc, #120]	; (8007170 <Batt_Protection_when_chargedischarge+0xb78>)
 80070f8:	f002 fb85 	bl	8009806 <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 80070fc:	e09a      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
 80070fe:	e099      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
		}
	}

	// Imbalance Protection
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 8007100:	4b1c      	ldr	r3, [pc, #112]	; (8007174 <Batt_Protection_when_chargedischarge+0xb7c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1c      	ldr	r2, [pc, #112]	; (8007178 <Batt_Protection_when_chargedischarge+0xb80>)
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7f9 fd9c 	bl	8000c48 <__aeabi_fsub>
 8007110:	4603      	mov	r3, r0
 8007112:	4910      	ldr	r1, [pc, #64]	; (8007154 <Batt_Protection_when_chargedischarge+0xb5c>)
 8007114:	4618      	mov	r0, r3
 8007116:	f7fa f83f 	bl	8001198 <__aeabi_fcmplt>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d02f      	beq.n	8007180 <Batt_Protection_when_chargedischarge+0xb88>
	{
		fault_code=6;
 8007120:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <Batt_Protection_when_chargedischarge+0xb68>)
 8007122:	2206      	movs	r2, #6
 8007124:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance>Persen_Imbalance_Set)
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <Batt_Protection_when_chargedischarge+0xb80>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a12      	ldr	r2, [pc, #72]	; (8007174 <Batt_Protection_when_chargedischarge+0xb7c>)
 800712c:	6812      	ldr	r2, [r2, #0]
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fa f84f 	bl	80011d4 <__aeabi_fcmpgt>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d100      	bne.n	800713e <Batt_Protection_when_chargedischarge+0xb46>
		if(T_trip_cycle < 0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle < 0)
			T_I_Over_trip_cycle=0;
	}
}
 800713c:	e07a      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
			flag_trip_unbalance=ON;
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <Batt_Protection_when_chargedischarge+0xb84>)
 8007140:	2201      	movs	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8007144:	f7fa f9fa 	bl	800153c <Batt_Open_Mode>
}
 8007148:	e074      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
 800714a:	bf00      	nop
 800714c:	20000798 	.word	0x20000798
 8007150:	20000650 	.word	0x20000650
 8007154:	41200000 	.word	0x41200000
 8007158:	2000074c 	.word	0x2000074c
 800715c:	20000aa4 	.word	0x20000aa4
 8007160:	2000071e 	.word	0x2000071e
 8007164:	40a00000 	.word	0x40a00000
 8007168:	20000788 	.word	0x20000788
 800716c:	10624dd3 	.word	0x10624dd3
 8007170:	40011000 	.word	0x40011000
 8007174:	20000034 	.word	0x20000034
 8007178:	20000754 	.word	0x20000754
 800717c:	20000670 	.word	0x20000670
		if(fault_code!=0)
 8007180:	4b2f      	ldr	r3, [pc, #188]	; (8007240 <Batt_Protection_when_chargedischarge+0xc48>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <Batt_Protection_when_chargedischarge+0xb98>
			last_fault_code=fault_code;
 8007188:	4b2d      	ldr	r3, [pc, #180]	; (8007240 <Batt_Protection_when_chargedischarge+0xc48>)
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	4b2d      	ldr	r3, [pc, #180]	; (8007244 <Batt_Protection_when_chargedischarge+0xc4c>)
 800718e:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8007190:	4b2b      	ldr	r3, [pc, #172]	; (8007240 <Batt_Protection_when_chargedischarge+0xc48>)
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8007196:	2200      	movs	r2, #0
 8007198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800719c:	482a      	ldr	r0, [pc, #168]	; (8007248 <Batt_Protection_when_chargedischarge+0xc50>)
 800719e:	f002 fb32 	bl	8009806 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 80071a2:	4b2a      	ldr	r3, [pc, #168]	; (800724c <Batt_Protection_when_chargedischarge+0xc54>)
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 80071aa:	4b29      	ldr	r3, [pc, #164]	; (8007250 <Batt_Protection_when_chargedischarge+0xc58>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f9 f9a6 	bl	8000500 <__aeabi_f2d>
 80071b4:	a320      	add	r3, pc, #128	; (adr r3, 8007238 <Batt_Protection_when_chargedischarge+0xc40>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f841 	bl	8000240 <__aeabi_dsub>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	4610      	mov	r0, r2
 80071c4:	4619      	mov	r1, r3
 80071c6:	f7f9 fceb 	bl	8000ba0 <__aeabi_d2f>
 80071ca:	4603      	mov	r3, r0
 80071cc:	4a20      	ldr	r2, [pc, #128]	; (8007250 <Batt_Protection_when_chargedischarge+0xc58>)
 80071ce:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <Batt_Protection_when_chargedischarge+0xc5c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7f9 f993 	bl	8000500 <__aeabi_f2d>
 80071da:	a317      	add	r3, pc, #92	; (adr r3, 8007238 <Batt_Protection_when_chargedischarge+0xc40>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 f82e 	bl	8000240 <__aeabi_dsub>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4610      	mov	r0, r2
 80071ea:	4619      	mov	r1, r3
 80071ec:	f7f9 fcd8 	bl	8000ba0 <__aeabi_d2f>
 80071f0:	4603      	mov	r3, r0
 80071f2:	4a18      	ldr	r2, [pc, #96]	; (8007254 <Batt_Protection_when_chargedischarge+0xc5c>)
 80071f4:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle < 0)
 80071f6:	4b16      	ldr	r3, [pc, #88]	; (8007250 <Batt_Protection_when_chargedischarge+0xc58>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f04f 0100 	mov.w	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f7f9 ffca 	bl	8001198 <__aeabi_fcmplt>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <Batt_Protection_when_chargedischarge+0xc1a>
			T_trip_cycle=0;
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <Batt_Protection_when_chargedischarge+0xc58>)
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle < 0)
 8007212:	4b10      	ldr	r3, [pc, #64]	; (8007254 <Batt_Protection_when_chargedischarge+0xc5c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f04f 0100 	mov.w	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f7f9 ffbc 	bl	8001198 <__aeabi_fcmplt>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d100      	bne.n	8007228 <Batt_Protection_when_chargedischarge+0xc30>
}
 8007226:	e005      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
			T_I_Over_trip_cycle=0;
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <Batt_Protection_when_chargedischarge+0xc5c>)
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	601a      	str	r2, [r3, #0]
}
 8007230:	e000      	b.n	8007234 <Batt_Protection_when_chargedischarge+0xc3c>
		if(flag_trip_overcurrentdischarge==OFF) {
 8007232:	bf00      	nop
}
 8007234:	bf00      	nop
 8007236:	bdb0      	pop	{r4, r5, r7, pc}
 8007238:	d2f1a9fc 	.word	0xd2f1a9fc
 800723c:	3f50624d 	.word	0x3f50624d
 8007240:	2000071e 	.word	0x2000071e
 8007244:	20000795 	.word	0x20000795
 8007248:	40011000 	.word	0x40011000
 800724c:	20000c3c 	.word	0x20000c3c
 8007250:	20000c5c 	.word	0x20000c5c
 8007254:	20000760 	.word	0x20000760

08007258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
	return 1;
 800725c:	2301      	movs	r3, #1
}
 800725e:	4618      	mov	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr

08007266 <_kill>:

int _kill(int pid, int sig)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007270:	f004 ff2e 	bl	800c0d0 <__errno>
 8007274:	4603      	mov	r3, r0
 8007276:	2216      	movs	r2, #22
 8007278:	601a      	str	r2, [r3, #0]
	return -1;
 800727a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <_exit>:

void _exit (int status)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800728e:	f04f 31ff 	mov.w	r1, #4294967295
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff ffe7 	bl	8007266 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007298:	e7fe      	b.n	8007298 <_exit+0x12>

0800729a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	e00a      	b.n	80072c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80072ac:	f3af 8000 	nop.w
 80072b0:	4601      	mov	r1, r0
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	60ba      	str	r2, [r7, #8]
 80072b8:	b2ca      	uxtb	r2, r1
 80072ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3301      	adds	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	dbf0      	blt.n	80072ac <_read+0x12>
	}

return len;
 80072ca:	687b      	ldr	r3, [r7, #4]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e009      	b.n	80072fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	60ba      	str	r2, [r7, #8]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	3301      	adds	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	429a      	cmp	r2, r3
 8007300:	dbf1      	blt.n	80072e6 <_write+0x12>
	}
	return len;
 8007302:	687b      	ldr	r3, [r7, #4]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <_close>:

int _close(int file)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	return -1;
 8007314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr

08007322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007332:	605a      	str	r2, [r3, #4]
	return 0;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <_isatty>:

int _isatty(int file)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
	return 1;
 8007348:	2301      	movs	r3, #1
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
	return 0;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr

0800736c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007374:	4a14      	ldr	r2, [pc, #80]	; (80073c8 <_sbrk+0x5c>)
 8007376:	4b15      	ldr	r3, [pc, #84]	; (80073cc <_sbrk+0x60>)
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007380:	4b13      	ldr	r3, [pc, #76]	; (80073d0 <_sbrk+0x64>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <_sbrk+0x64>)
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <_sbrk+0x68>)
 800738c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800738e:	4b10      	ldr	r3, [pc, #64]	; (80073d0 <_sbrk+0x64>)
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	429a      	cmp	r2, r3
 800739a:	d207      	bcs.n	80073ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800739c:	f004 fe98 	bl	800c0d0 <__errno>
 80073a0:	4603      	mov	r3, r0
 80073a2:	220c      	movs	r2, #12
 80073a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295
 80073aa:	e009      	b.n	80073c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80073ac:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <_sbrk+0x64>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <_sbrk+0x64>)
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4413      	add	r3, r2
 80073ba:	4a05      	ldr	r2, [pc, #20]	; (80073d0 <_sbrk+0x64>)
 80073bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80073be:	68fb      	ldr	r3, [r7, #12]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20018000 	.word	0x20018000
 80073cc:	00000400 	.word	0x00000400
 80073d0:	20000654 	.word	0x20000654
 80073d4:	20000d28 	.word	0x20000d28

080073d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80073dc:	bf00      	nop
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	605a      	str	r2, [r3, #4]
 80073f4:	609a      	str	r2, [r3, #8]
 80073f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073f8:	463b      	mov	r3, r7
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007400:	4b1e      	ldr	r3, [pc, #120]	; (800747c <MX_TIM2_Init+0x98>)
 8007402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007406:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8007408:	4b1c      	ldr	r3, [pc, #112]	; (800747c <MX_TIM2_Init+0x98>)
 800740a:	f240 227f 	movw	r2, #639	; 0x27f
 800740e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007410:	4b1a      	ldr	r3, [pc, #104]	; (800747c <MX_TIM2_Init+0x98>)
 8007412:	2200      	movs	r2, #0
 8007414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8007416:	4b19      	ldr	r3, [pc, #100]	; (800747c <MX_TIM2_Init+0x98>)
 8007418:	f240 32e7 	movw	r2, #999	; 0x3e7
 800741c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800741e:	4b17      	ldr	r3, [pc, #92]	; (800747c <MX_TIM2_Init+0x98>)
 8007420:	2200      	movs	r2, #0
 8007422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007424:	4b15      	ldr	r3, [pc, #84]	; (800747c <MX_TIM2_Init+0x98>)
 8007426:	2200      	movs	r2, #0
 8007428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800742a:	4814      	ldr	r0, [pc, #80]	; (800747c <MX_TIM2_Init+0x98>)
 800742c:	f004 f9d8 	bl	800b7e0 <HAL_TIM_Base_Init>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007436:	f7fc fda3 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800743a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800743e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	4619      	mov	r1, r3
 8007446:	480d      	ldr	r0, [pc, #52]	; (800747c <MX_TIM2_Init+0x98>)
 8007448:	f004 fb90 	bl	800bb6c <HAL_TIM_ConfigClockSource>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007452:	f7fc fd95 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007456:	2300      	movs	r3, #0
 8007458:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800745a:	2300      	movs	r3, #0
 800745c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800745e:	463b      	mov	r3, r7
 8007460:	4619      	mov	r1, r3
 8007462:	4806      	ldr	r0, [pc, #24]	; (800747c <MX_TIM2_Init+0x98>)
 8007464:	f004 fda8 	bl	800bfb8 <HAL_TIMEx_MasterConfigSynchronization>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800746e:	f7fc fd87 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007472:	bf00      	nop
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000ccc 	.word	0x20000ccc

08007480 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	605a      	str	r2, [r3, #4]
 8007490:	609a      	str	r2, [r3, #8]
 8007492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007494:	463b      	mov	r3, r7
 8007496:	2200      	movs	r2, #0
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800749c:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <MX_TIM3_Init+0x94>)
 800749e:	4a1e      	ldr	r2, [pc, #120]	; (8007518 <MX_TIM3_Init+0x98>)
 80074a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 80074a2:	4b1c      	ldr	r3, [pc, #112]	; (8007514 <MX_TIM3_Init+0x94>)
 80074a4:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80074a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <MX_TIM3_Init+0x94>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 333;
 80074b0:	4b18      	ldr	r3, [pc, #96]	; (8007514 <MX_TIM3_Init+0x94>)
 80074b2:	f240 124d 	movw	r2, #333	; 0x14d
 80074b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074b8:	4b16      	ldr	r3, [pc, #88]	; (8007514 <MX_TIM3_Init+0x94>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <MX_TIM3_Init+0x94>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80074c4:	4813      	ldr	r0, [pc, #76]	; (8007514 <MX_TIM3_Init+0x94>)
 80074c6:	f004 f98b 	bl	800b7e0 <HAL_TIM_Base_Init>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80074d0:	f7fc fd56 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80074da:	f107 0308 	add.w	r3, r7, #8
 80074de:	4619      	mov	r1, r3
 80074e0:	480c      	ldr	r0, [pc, #48]	; (8007514 <MX_TIM3_Init+0x94>)
 80074e2:	f004 fb43 	bl	800bb6c <HAL_TIM_ConfigClockSource>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80074ec:	f7fc fd48 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074f0:	2300      	movs	r3, #0
 80074f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074f4:	2300      	movs	r3, #0
 80074f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80074f8:	463b      	mov	r3, r7
 80074fa:	4619      	mov	r1, r3
 80074fc:	4805      	ldr	r0, [pc, #20]	; (8007514 <MX_TIM3_Init+0x94>)
 80074fe:	f004 fd5b 	bl	800bfb8 <HAL_TIMEx_MasterConfigSynchronization>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007508:	f7fc fd3a 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000c84 	.word	0x20000c84
 8007518:	40000400 	.word	0x40000400

0800751c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752c:	d114      	bne.n	8007558 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800752e:	4b19      	ldr	r3, [pc, #100]	; (8007594 <HAL_TIM_Base_MspInit+0x78>)
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	4a18      	ldr	r2, [pc, #96]	; (8007594 <HAL_TIM_Base_MspInit+0x78>)
 8007534:	f043 0301 	orr.w	r3, r3, #1
 8007538:	61d3      	str	r3, [r2, #28]
 800753a:	4b16      	ldr	r3, [pc, #88]	; (8007594 <HAL_TIM_Base_MspInit+0x78>)
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	201c      	movs	r0, #28
 800754c:	f001 fc39 	bl	8008dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007550:	201c      	movs	r0, #28
 8007552:	f001 fc52 	bl	8008dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007556:	e018      	b.n	800758a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a0e      	ldr	r2, [pc, #56]	; (8007598 <HAL_TIM_Base_MspInit+0x7c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d113      	bne.n	800758a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007562:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <HAL_TIM_Base_MspInit+0x78>)
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	4a0b      	ldr	r2, [pc, #44]	; (8007594 <HAL_TIM_Base_MspInit+0x78>)
 8007568:	f043 0302 	orr.w	r3, r3, #2
 800756c:	61d3      	str	r3, [r2, #28]
 800756e:	4b09      	ldr	r3, [pc, #36]	; (8007594 <HAL_TIM_Base_MspInit+0x78>)
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	60bb      	str	r3, [r7, #8]
 8007578:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800757a:	2200      	movs	r2, #0
 800757c:	2100      	movs	r1, #0
 800757e:	201d      	movs	r0, #29
 8007580:	f001 fc1f 	bl	8008dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007584:	201d      	movs	r0, #29
 8007586:	f001 fc38 	bl	8008dfa <HAL_NVIC_EnableIRQ>
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40021000 	.word	0x40021000
 8007598:	40000400 	.word	0x40000400

0800759c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800759c:	480c      	ldr	r0, [pc, #48]	; (80075d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800759e:	490d      	ldr	r1, [pc, #52]	; (80075d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80075a0:	4a0d      	ldr	r2, [pc, #52]	; (80075d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80075a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075a4:	e002      	b.n	80075ac <LoopCopyDataInit>

080075a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075aa:	3304      	adds	r3, #4

080075ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80075ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80075ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80075b0:	d3f9      	bcc.n	80075a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80075b2:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80075b4:	4c0a      	ldr	r4, [pc, #40]	; (80075e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80075b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075b8:	e001      	b.n	80075be <LoopFillZerobss>

080075ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075bc:	3204      	adds	r2, #4

080075be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075c0:	d3fb      	bcc.n	80075ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80075c2:	f7ff ff09 	bl	80073d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075c6:	f004 fd89 	bl	800c0dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80075ca:	f7fc f8d1 	bl	8003770 <main>
  bx lr
 80075ce:	4770      	bx	lr
  ldr r0, =_sdata
 80075d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075d4:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80075d8:	08011f54 	.word	0x08011f54
  ldr r2, =_sbss
 80075dc:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80075e0:	20000d28 	.word	0x20000d28

080075e4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80075e4:	e7fe      	b.n	80075e4 <ADC1_2_IRQHandler>
	...

080075e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075ec:	4b08      	ldr	r3, [pc, #32]	; (8007610 <HAL_Init+0x28>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a07      	ldr	r2, [pc, #28]	; (8007610 <HAL_Init+0x28>)
 80075f2:	f043 0310 	orr.w	r3, r3, #16
 80075f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075f8:	2003      	movs	r0, #3
 80075fa:	f001 fbd7 	bl	8008dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80075fe:	200f      	movs	r0, #15
 8007600:	f000 f808 	bl	8007614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007604:	f7fc ff6a 	bl	80044dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40022000 	.word	0x40022000

08007614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800761c:	4b12      	ldr	r3, [pc, #72]	; (8007668 <HAL_InitTick+0x54>)
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	4b12      	ldr	r3, [pc, #72]	; (800766c <HAL_InitTick+0x58>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	4619      	mov	r1, r3
 8007626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800762a:	fbb3 f3f1 	udiv	r3, r3, r1
 800762e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fbef 	bl	8008e16 <HAL_SYSTICK_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e00e      	b.n	8007660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2b0f      	cmp	r3, #15
 8007646:	d80a      	bhi.n	800765e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007648:	2200      	movs	r2, #0
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	f04f 30ff 	mov.w	r0, #4294967295
 8007650:	f001 fbb7 	bl	8008dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007654:	4a06      	ldr	r2, [pc, #24]	; (8007670 <HAL_InitTick+0x5c>)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e000      	b.n	8007660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000040 	.word	0x20000040
 800766c:	20000048 	.word	0x20000048
 8007670:	20000044 	.word	0x20000044

08007674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_IncTick+0x1c>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	4b05      	ldr	r3, [pc, #20]	; (8007694 <HAL_IncTick+0x20>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4413      	add	r3, r2
 8007684:	4a03      	ldr	r2, [pc, #12]	; (8007694 <HAL_IncTick+0x20>)
 8007686:	6013      	str	r3, [r2, #0]
}
 8007688:	bf00      	nop
 800768a:	46bd      	mov	sp, r7
 800768c:	bc80      	pop	{r7}
 800768e:	4770      	bx	lr
 8007690:	20000048 	.word	0x20000048
 8007694:	20000d14 	.word	0x20000d14

08007698 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  return uwTick;
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <HAL_GetTick+0x10>)
 800769e:	681b      	ldr	r3, [r3, #0]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr
 80076a8:	20000d14 	.word	0x20000d14

080076ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076b4:	f7ff fff0 	bl	8007698 <HAL_GetTick>
 80076b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c4:	d005      	beq.n	80076d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <HAL_Delay+0x44>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076d2:	bf00      	nop
 80076d4:	f7ff ffe0 	bl	8007698 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d8f7      	bhi.n	80076d4 <HAL_Delay+0x28>
  {
  }
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000048 	.word	0x20000048

080076f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e0ce      	b.n	80078b4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7fb f8ee 	bl	8002914 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fb11 	bl	8007d60 <ADC_ConversionStop_Disable>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	2b00      	cmp	r3, #0
 800774c:	f040 80a9 	bne.w	80078a2 <HAL_ADC_Init+0x1ae>
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f040 80a5 	bne.w	80078a2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007760:	f023 0302 	bic.w	r3, r3, #2
 8007764:	f043 0202 	orr.w	r2, r3, #2
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4951      	ldr	r1, [pc, #324]	; (80078bc <HAL_ADC_Init+0x1c8>)
 8007776:	428b      	cmp	r3, r1
 8007778:	d10a      	bne.n	8007790 <HAL_ADC_Init+0x9c>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007782:	d002      	beq.n	800778a <HAL_ADC_Init+0x96>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	e004      	b.n	8007794 <HAL_ADC_Init+0xa0>
 800778a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800778e:	e001      	b.n	8007794 <HAL_ADC_Init+0xa0>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007794:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	7b1b      	ldrb	r3, [r3, #12]
 800779a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800779c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ac:	d003      	beq.n	80077b6 <HAL_ADC_Init+0xc2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d102      	bne.n	80077bc <HAL_ADC_Init+0xc8>
 80077b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077ba:	e000      	b.n	80077be <HAL_ADC_Init+0xca>
 80077bc:	2300      	movs	r3, #0
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7d1b      	ldrb	r3, [r3, #20]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d119      	bne.n	8007800 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	7b1b      	ldrb	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	3b01      	subs	r3, #1
 80077da:	035a      	lsls	r2, r3, #13
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077e4:	613b      	str	r3, [r7, #16]
 80077e6:	e00b      	b.n	8007800 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f043 0201 	orr.w	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	430a      	orrs	r2, r1
 8007812:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	4b29      	ldr	r3, [pc, #164]	; (80078c0 <HAL_ADC_Init+0x1cc>)
 800781c:	4013      	ands	r3, r2
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	430b      	orrs	r3, r1
 8007826:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007830:	d003      	beq.n	800783a <HAL_ADC_Init+0x146>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d104      	bne.n	8007844 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	3b01      	subs	r3, #1
 8007840:	051b      	lsls	r3, r3, #20
 8007842:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	430a      	orrs	r2, r1
 8007856:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <HAL_ADC_Init+0x1d0>)
 8007860:	4013      	ands	r3, r2
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	429a      	cmp	r2, r3
 8007866:	d10b      	bne.n	8007880 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007872:	f023 0303 	bic.w	r3, r3, #3
 8007876:	f043 0201 	orr.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800787e:	e018      	b.n	80078b2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007884:	f023 0312 	bic.w	r3, r3, #18
 8007888:	f043 0210 	orr.w	r2, r3, #16
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	f043 0201 	orr.w	r2, r3, #1
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80078a0:	e007      	b.n	80078b2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	f043 0210 	orr.w	r2, r3, #16
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80078b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	40013c00 	.word	0x40013c00
 80078c0:	ffe1f7fd 	.word	0xffe1f7fd
 80078c4:	ff1f0efe 	.word	0xff1f0efe

080078c8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a64      	ldr	r2, [pc, #400]	; (8007a70 <HAL_ADC_Start_DMA+0x1a8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <HAL_ADC_Start_DMA+0x24>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a63      	ldr	r2, [pc, #396]	; (8007a74 <HAL_ADC_Start_DMA+0x1ac>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d106      	bne.n	80078fa <HAL_ADC_Start_DMA+0x32>
 80078ec:	4b60      	ldr	r3, [pc, #384]	; (8007a70 <HAL_ADC_Start_DMA+0x1a8>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f040 80b3 	bne.w	8007a60 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_ADC_Start_DMA+0x40>
 8007904:	2302      	movs	r3, #2
 8007906:	e0ae      	b.n	8007a66 <HAL_ADC_Start_DMA+0x19e>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f9cb 	bl	8007cac <ADC_Enable>
 8007916:	4603      	mov	r3, r0
 8007918:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f040 809a 	bne.w	8007a56 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800792a:	f023 0301 	bic.w	r3, r3, #1
 800792e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a4e      	ldr	r2, [pc, #312]	; (8007a74 <HAL_ADC_Start_DMA+0x1ac>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d105      	bne.n	800794c <HAL_ADC_Start_DMA+0x84>
 8007940:	4b4b      	ldr	r3, [pc, #300]	; (8007a70 <HAL_ADC_Start_DMA+0x1a8>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d115      	bne.n	8007978 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007962:	2b00      	cmp	r3, #0
 8007964:	d026      	beq.n	80079b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800796e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007976:	e01d      	b.n	80079b4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a39      	ldr	r2, [pc, #228]	; (8007a70 <HAL_ADC_Start_DMA+0x1a8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d004      	beq.n	8007998 <HAL_ADC_Start_DMA+0xd0>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a38      	ldr	r2, [pc, #224]	; (8007a74 <HAL_ADC_Start_DMA+0x1ac>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d10d      	bne.n	80079b4 <HAL_ADC_Start_DMA+0xec>
 8007998:	4b35      	ldr	r3, [pc, #212]	; (8007a70 <HAL_ADC_Start_DMA+0x1a8>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d007      	beq.n	80079b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80079ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	f023 0206 	bic.w	r2, r3, #6
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80079cc:	e002      	b.n	80079d4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	4a25      	ldr	r2, [pc, #148]	; (8007a78 <HAL_ADC_Start_DMA+0x1b0>)
 80079e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	4a24      	ldr	r2, [pc, #144]	; (8007a7c <HAL_ADC_Start_DMA+0x1b4>)
 80079ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	4a23      	ldr	r2, [pc, #140]	; (8007a80 <HAL_ADC_Start_DMA+0x1b8>)
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f06f 0202 	mvn.w	r2, #2
 80079fc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a0c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6a18      	ldr	r0, [r3, #32]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	334c      	adds	r3, #76	; 0x4c
 8007a18:	4619      	mov	r1, r3
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f001 fa7d 	bl	8008f1c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007a2c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007a30:	d108      	bne.n	8007a44 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8007a40:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007a42:	e00f      	b.n	8007a64 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007a52:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007a54:	e006      	b.n	8007a64 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8007a5e:	e001      	b.n	8007a64 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40012400 	.word	0x40012400
 8007a74:	40012800 	.word	0x40012800
 8007a78:	08007de3 	.word	0x08007de3
 8007a7c:	08007e5f 	.word	0x08007e5f
 8007a80:	08007e7b 	.word	0x08007e7b

08007a84 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_ADC_ConfigChannel+0x20>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e0dc      	b.n	8007c96 <HAL_ADC_ConfigChannel+0x1da>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b06      	cmp	r3, #6
 8007aea:	d81c      	bhi.n	8007b26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	3b05      	subs	r3, #5
 8007afe:	221f      	movs	r2, #31
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	4019      	ands	r1, r3
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6818      	ldr	r0, [r3, #0]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	3b05      	subs	r3, #5
 8007b18:	fa00 f203 	lsl.w	r2, r0, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34
 8007b24:	e03c      	b.n	8007ba0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b0c      	cmp	r3, #12
 8007b2c:	d81c      	bhi.n	8007b68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3b23      	subs	r3, #35	; 0x23
 8007b40:	221f      	movs	r2, #31
 8007b42:	fa02 f303 	lsl.w	r3, r2, r3
 8007b46:	43db      	mvns	r3, r3
 8007b48:	4019      	ands	r1, r3
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	3b23      	subs	r3, #35	; 0x23
 8007b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
 8007b66:	e01b      	b.n	8007ba0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	3b41      	subs	r3, #65	; 0x41
 8007b7a:	221f      	movs	r2, #31
 8007b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b80:	43db      	mvns	r3, r3
 8007b82:	4019      	ands	r1, r3
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	3b41      	subs	r3, #65	; 0x41
 8007b94:	fa00 f203 	lsl.w	r2, r0, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d91c      	bls.n	8007be2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68d9      	ldr	r1, [r3, #12]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3b1e      	subs	r3, #30
 8007bba:	2207      	movs	r2, #7
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	4019      	ands	r1, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	6898      	ldr	r0, [r3, #8]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	4413      	add	r3, r2
 8007bd2:	3b1e      	subs	r3, #30
 8007bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	60da      	str	r2, [r3, #12]
 8007be0:	e019      	b.n	8007c16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6919      	ldr	r1, [r3, #16]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	4613      	mov	r3, r2
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	4413      	add	r3, r2
 8007bf2:	2207      	movs	r2, #7
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	43db      	mvns	r3, r3
 8007bfa:	4019      	ands	r1, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6898      	ldr	r0, [r3, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	4613      	mov	r3, r2
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	4413      	add	r3, r2
 8007c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b10      	cmp	r3, #16
 8007c1c:	d003      	beq.n	8007c26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007c22:	2b11      	cmp	r3, #17
 8007c24:	d132      	bne.n	8007c8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <HAL_ADC_ConfigChannel+0x1e4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d125      	bne.n	8007c7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d126      	bne.n	8007c8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007c4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d11a      	bne.n	8007c8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007c56:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <HAL_ADC_ConfigChannel+0x1e8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <HAL_ADC_ConfigChannel+0x1ec>)
 8007c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c60:	0c9a      	lsrs	r2, r3, #18
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007c6c:	e002      	b.n	8007c74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f9      	bne.n	8007c6e <HAL_ADC_ConfigChannel+0x1b2>
 8007c7a:	e007      	b.n	8007c8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c80:	f043 0220 	orr.w	r2, r3, #32
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	40012400 	.word	0x40012400
 8007ca4:	20000040 	.word	0x20000040
 8007ca8:	431bde83 	.word	0x431bde83

08007cac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d040      	beq.n	8007d4c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007cda:	4b1f      	ldr	r3, [pc, #124]	; (8007d58 <ADC_Enable+0xac>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <ADC_Enable+0xb0>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	0c9b      	lsrs	r3, r3, #18
 8007ce6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007ce8:	e002      	b.n	8007cf0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f9      	bne.n	8007cea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007cf6:	f7ff fccf 	bl	8007698 <HAL_GetTick>
 8007cfa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007cfc:	e01f      	b.n	8007d3e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007cfe:	f7ff fccb 	bl	8007698 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d918      	bls.n	8007d3e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d011      	beq.n	8007d3e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1e:	f043 0210 	orr.w	r2, r3, #16
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	f043 0201 	orr.w	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e007      	b.n	8007d4e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d1d8      	bne.n	8007cfe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000040 	.word	0x20000040
 8007d5c:	431bde83 	.word	0x431bde83

08007d60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d12e      	bne.n	8007dd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689a      	ldr	r2, [r3, #8]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007d8a:	f7ff fc85 	bl	8007698 <HAL_GetTick>
 8007d8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007d90:	e01b      	b.n	8007dca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007d92:	f7ff fc81 	bl	8007698 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d914      	bls.n	8007dca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d10d      	bne.n	8007dca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	f043 0210 	orr.w	r2, r3, #16
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	f043 0201 	orr.w	r2, r3, #1
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e007      	b.n	8007dda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d0dc      	beq.n	8007d92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d127      	bne.n	8007e4c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007e12:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007e16:	d115      	bne.n	8007e44 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d111      	bne.n	8007e44 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	f043 0201 	orr.w	r2, r3, #1
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f7ff fe1d 	bl	8007a84 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007e4a:	e004      	b.n	8007e56 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7ff fe12 	bl	8007a96 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e72:	bf00      	nop
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	f043 0204 	orr.w	r2, r3, #4
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff fe01 	bl	8007aa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ea6:	bf00      	nop
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e0ed      	b.n	800809c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d102      	bne.n	8007ed2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7fa fdd7 	bl	8002a80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0201 	orr.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ee2:	f7ff fbd9 	bl	8007698 <HAL_GetTick>
 8007ee6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007ee8:	e012      	b.n	8007f10 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007eea:	f7ff fbd5 	bl	8007698 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b0a      	cmp	r3, #10
 8007ef6:	d90b      	bls.n	8007f10 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2205      	movs	r2, #5
 8007f08:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e0c5      	b.n	800809c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0e5      	beq.n	8007eea <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0202 	bic.w	r2, r2, #2
 8007f2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f2e:	f7ff fbb3 	bl	8007698 <HAL_GetTick>
 8007f32:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007f34:	e012      	b.n	8007f5c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f36:	f7ff fbaf 	bl	8007698 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b0a      	cmp	r3, #10
 8007f42:	d90b      	bls.n	8007f5c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2205      	movs	r2, #5
 8007f54:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e09f      	b.n	800809c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d1e5      	bne.n	8007f36 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7e1b      	ldrb	r3, [r3, #24]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d108      	bne.n	8007f84 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	e007      	b.n	8007f94 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7e5b      	ldrb	r3, [r3, #25]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d108      	bne.n	8007fae <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	e007      	b.n	8007fbe <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7e9b      	ldrb	r3, [r3, #26]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d108      	bne.n	8007fd8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0220 	orr.w	r2, r2, #32
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	e007      	b.n	8007fe8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f022 0220 	bic.w	r2, r2, #32
 8007fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	7edb      	ldrb	r3, [r3, #27]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d108      	bne.n	8008002 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0210 	bic.w	r2, r2, #16
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	e007      	b.n	8008012 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0210 	orr.w	r2, r2, #16
 8008010:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	7f1b      	ldrb	r3, [r3, #28]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d108      	bne.n	800802c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0208 	orr.w	r2, r2, #8
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	e007      	b.n	800803c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f022 0208 	bic.w	r2, r2, #8
 800803a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7f5b      	ldrb	r3, [r3, #29]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d108      	bne.n	8008056 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0204 	orr.w	r2, r2, #4
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	e007      	b.n	8008066 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0204 	bic.w	r2, r2, #4
 8008064:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	431a      	orrs	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	ea42 0103 	orr.w	r1, r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	1e5a      	subs	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80080bc:	7cfb      	ldrb	r3, [r7, #19]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d003      	beq.n	80080ca <HAL_CAN_ConfigFilter+0x26>
 80080c2:	7cfb      	ldrb	r3, [r7, #19]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	f040 80aa 	bne.w	800821e <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80080d0:	f043 0201 	orr.w	r2, r3, #1
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	f003 031f 	and.w	r3, r3, #31
 80080e2:	2201      	movs	r2, #1
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	43db      	mvns	r3, r3
 80080f4:	401a      	ands	r2, r3
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d123      	bne.n	800814c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	43db      	mvns	r3, r3
 800810e:	401a      	ands	r2, r3
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008126:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	3248      	adds	r2, #72	; 0x48
 800812c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008140:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008142:	6979      	ldr	r1, [r7, #20]
 8008144:	3348      	adds	r3, #72	; 0x48
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	440b      	add	r3, r1
 800814a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d122      	bne.n	800819a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	431a      	orrs	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008174:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	3248      	adds	r2, #72	; 0x48
 800817a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800818e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008190:	6979      	ldr	r1, [r7, #20]
 8008192:	3348      	adds	r3, #72	; 0x48
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	440b      	add	r3, r1
 8008198:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d109      	bne.n	80081b6 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	43db      	mvns	r3, r3
 80081ac:	401a      	ands	r2, r3
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80081b4:	e007      	b.n	80081c6 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	431a      	orrs	r2, r3
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	43db      	mvns	r3, r3
 80081d8:	401a      	ands	r2, r3
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80081e0:	e007      	b.n	80081f2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d107      	bne.n	800820a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	431a      	orrs	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008210:	f023 0201 	bic.w	r2, r3, #1
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e006      	b.n	800822c <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
  }
}
 800822c:	4618      	mov	r0, r3
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr

08008236 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b01      	cmp	r3, #1
 8008248:	d12e      	bne.n	80082a8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008262:	f7ff fa19 	bl	8007698 <HAL_GetTick>
 8008266:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008268:	e012      	b.n	8008290 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800826a:	f7ff fa15 	bl	8007698 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b0a      	cmp	r3, #10
 8008276:	d90b      	bls.n	8008290 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2205      	movs	r2, #5
 8008288:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e012      	b.n	80082b6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e006      	b.n	80082b6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
  }
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80082be:	b480      	push	{r7}
 80082c0:	b089      	sub	sp, #36	; 0x24
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	60f8      	str	r0, [r7, #12]
 80082c6:	60b9      	str	r1, [r7, #8]
 80082c8:	607a      	str	r2, [r7, #4]
 80082ca:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80082dc:	7ffb      	ldrb	r3, [r7, #31]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d003      	beq.n	80082ea <HAL_CAN_AddTxMessage+0x2c>
 80082e2:	7ffb      	ldrb	r3, [r7, #31]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	f040 80b8 	bne.w	800845a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80a0 	beq.w	800844a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	0e1b      	lsrs	r3, r3, #24
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d907      	bls.n	800832a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e09e      	b.n	8008468 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800832a:	2201      	movs	r2, #1
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	409a      	lsls	r2, r3
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d10d      	bne.n	8008358 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008346:	68f9      	ldr	r1, [r7, #12]
 8008348:	6809      	ldr	r1, [r1, #0]
 800834a:	431a      	orrs	r2, r3
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	3318      	adds	r3, #24
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	440b      	add	r3, r1
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e00f      	b.n	8008378 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008362:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008368:	68f9      	ldr	r1, [r7, #12]
 800836a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800836c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	3318      	adds	r3, #24
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	440b      	add	r3, r1
 8008376:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6819      	ldr	r1, [r3, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	3318      	adds	r3, #24
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	440b      	add	r3, r1
 8008388:	3304      	adds	r3, #4
 800838a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	7d1b      	ldrb	r3, [r3, #20]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d111      	bne.n	80083b8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	3318      	adds	r3, #24
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	4413      	add	r3, r2
 80083a0:	3304      	adds	r3, #4
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	6811      	ldr	r1, [r2, #0]
 80083a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	3318      	adds	r3, #24
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	440b      	add	r3, r1
 80083b4:	3304      	adds	r3, #4
 80083b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3307      	adds	r3, #7
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	061a      	lsls	r2, r3, #24
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3306      	adds	r3, #6
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3305      	adds	r3, #5
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	021b      	lsls	r3, r3, #8
 80083d2:	4313      	orrs	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	3204      	adds	r2, #4
 80083d8:	7812      	ldrb	r2, [r2, #0]
 80083da:	4610      	mov	r0, r2
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	6811      	ldr	r1, [r2, #0]
 80083e0:	ea43 0200 	orr.w	r2, r3, r0
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	440b      	add	r3, r1
 80083ea:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80083ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	3303      	adds	r3, #3
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	061a      	lsls	r2, r3, #24
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3302      	adds	r3, #2
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3301      	adds	r3, #1
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	4313      	orrs	r3, r2
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	7812      	ldrb	r2, [r2, #0]
 8008410:	4610      	mov	r0, r2
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	6811      	ldr	r1, [r2, #0]
 8008416:	ea43 0200 	orr.w	r2, r3, r0
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	440b      	add	r3, r1
 8008420:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008424:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	3318      	adds	r3, #24
 800842e:	011b      	lsls	r3, r3, #4
 8008430:	4413      	add	r3, r2
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	6811      	ldr	r1, [r2, #0]
 8008438:	f043 0201 	orr.w	r2, r3, #1
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	3318      	adds	r3, #24
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	440b      	add	r3, r1
 8008444:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	e00e      	b.n	8008468 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e006      	b.n	8008468 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
  }
}
 8008468:	4618      	mov	r0, r3
 800846a:	3724      	adds	r7, #36	; 0x24
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr

08008472 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008482:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d002      	beq.n	8008490 <HAL_CAN_AbortTxRequest+0x1e>
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d128      	bne.n	80084e2 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d007      	beq.n	80084aa <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084a8:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084c2:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	f003 0304 	and.w	r3, r3, #4
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80084dc:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	e006      	b.n	80084f0 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
  }
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr

080084fa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800850c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d002      	beq.n	800851a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d11d      	bne.n	8008556 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8008556:	68fb      	ldr	r3, [r7, #12]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr

08008562 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008562:	b480      	push	{r7}
 8008564:	b087      	sub	sp, #28
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
 800856e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008576:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008578:	7dfb      	ldrb	r3, [r7, #23]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d003      	beq.n	8008586 <HAL_CAN_GetRxMessage+0x24>
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	2b02      	cmp	r3, #2
 8008582:	f040 80f3 	bne.w	800876c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10e      	bne.n	80085aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d116      	bne.n	80085c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e0e7      	b.n	800877a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d107      	bne.n	80085c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0d8      	b.n	800877a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	331b      	adds	r3, #27
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	4413      	add	r3, r2
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0204 	and.w	r2, r3, #4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10c      	bne.n	8008600 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	331b      	adds	r3, #27
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	4413      	add	r3, r2
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	0d5b      	lsrs	r3, r3, #21
 80085f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e00b      	b.n	8008618 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	331b      	adds	r3, #27
 8008608:	011b      	lsls	r3, r3, #4
 800860a:	4413      	add	r3, r2
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	08db      	lsrs	r3, r3, #3
 8008610:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	331b      	adds	r3, #27
 8008620:	011b      	lsls	r3, r3, #4
 8008622:	4413      	add	r3, r2
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0202 	and.w	r2, r3, #2
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	331b      	adds	r3, #27
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	4413      	add	r3, r2
 800863a:	3304      	adds	r3, #4
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 020f 	and.w	r2, r3, #15
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	331b      	adds	r3, #27
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	4413      	add	r3, r2
 8008652:	3304      	adds	r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	b2da      	uxtb	r2, r3
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	331b      	adds	r3, #27
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	0c1b      	lsrs	r3, r3, #16
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	4413      	add	r3, r2
 8008680:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	b2da      	uxtb	r2, r3
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	4413      	add	r3, r2
 8008696:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	0a1a      	lsrs	r2, r3, #8
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	b2d2      	uxtb	r2, r2
 80086a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	0c1a      	lsrs	r2, r3, #16
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	3302      	adds	r3, #2
 80086bc:	b2d2      	uxtb	r2, r2
 80086be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	011b      	lsls	r3, r3, #4
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	0e1a      	lsrs	r2, r3, #24
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	3303      	adds	r3, #3
 80086d6:	b2d2      	uxtb	r2, r2
 80086d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	3304      	adds	r3, #4
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	0a1a      	lsrs	r2, r3, #8
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	3305      	adds	r3, #5
 8008708:	b2d2      	uxtb	r2, r2
 800870a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	4413      	add	r3, r2
 8008716:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	0c1a      	lsrs	r2, r3, #16
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	3306      	adds	r3, #6
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	4413      	add	r3, r2
 8008730:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	0e1a      	lsrs	r2, r3, #24
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	3307      	adds	r3, #7
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d108      	bne.n	8008758 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f042 0220 	orr.w	r2, r2, #32
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	e007      	b.n	8008768 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691a      	ldr	r2, [r3, #16]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0220 	orr.w	r2, r2, #32
 8008766:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	e006      	b.n	800877a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
  }
}
 800877a:	4618      	mov	r0, r3
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	bc80      	pop	{r7}
 8008782:	4770      	bx	lr

08008784 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008794:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d002      	beq.n	80087a2 <HAL_CAN_ActivateNotification+0x1e>
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d109      	bne.n	80087b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6959      	ldr	r1, [r3, #20]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e006      	b.n	80087c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
  }
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc80      	pop	{r7}
 80087cc:	4770      	bx	lr

080087ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b08a      	sub	sp, #40	; 0x28
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80087d6:	2300      	movs	r3, #0
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d07c      	beq.n	800890e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d023      	beq.n	8008866 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2201      	movs	r2, #1
 8008824:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f983 	bl	8008b3c <HAL_CAN_TxMailbox0CompleteCallback>
 8008836:	e016      	b.n	8008866 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f003 0304 	and.w	r3, r3, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	d004      	beq.n	800884c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
 800884a:	e00c      	b.n	8008866 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	f003 0308 	and.w	r3, r3, #8
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
 800885e:	e002      	b.n	8008866 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f986 	bl	8008b72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d024      	beq.n	80088ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008878:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f962 	bl	8008b4e <HAL_CAN_TxMailbox1CompleteCallback>
 800888a:	e016      	b.n	80088ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
 800889e:	e00c      	b.n	80088ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d004      	beq.n	80088b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
 80088b2:	e002      	b.n	80088ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f965 	bl	8008b84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d024      	beq.n	800890e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80088cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f941 	bl	8008b60 <HAL_CAN_TxMailbox2CompleteCallback>
 80088de:	e016      	b.n	800890e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d004      	beq.n	80088f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
 80088f2:	e00c      	b.n	800890e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d004      	beq.n	8008908 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
 8008906:	e002      	b.n	800890e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f944 	bl	8008b96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800890e:	6a3b      	ldr	r3, [r7, #32]
 8008910:	f003 0308 	and.w	r3, r3, #8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f003 0310 	and.w	r3, r3, #16
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008928:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2210      	movs	r2, #16
 8008930:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f003 0308 	and.w	r3, r3, #8
 8008942:	2b00      	cmp	r3, #0
 8008944:	d006      	beq.n	8008954 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2208      	movs	r2, #8
 800894c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f92a 	bl	8008ba8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fa fc4f 	bl	8003210 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00c      	beq.n	8008996 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f003 0310 	and.w	r3, r3, #16
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800898c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2210      	movs	r2, #16
 8008994:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d006      	beq.n	80089b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2208      	movs	r2, #8
 80089b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f90a 	bl	8008bcc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	f003 0310 	and.w	r3, r3, #16
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f8f2 	bl	8008bba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f003 0310 	and.w	r3, r3, #16
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d006      	beq.n	80089f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2210      	movs	r2, #16
 80089f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f8f3 	bl	8008bde <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d006      	beq.n	8008a1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2208      	movs	r2, #8
 8008a12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f8eb 	bl	8008bf0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d07b      	beq.n	8008b1c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d072      	beq.n	8008b14 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a44:	f043 0301 	orr.w	r3, r3, #1
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d008      	beq.n	8008a66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a60:	f043 0302 	orr.w	r3, r3, #2
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d008      	beq.n	8008a82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	f043 0304 	orr.w	r3, r3, #4
 8008a80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d043      	beq.n	8008b14 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d03e      	beq.n	8008b14 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a9c:	2b60      	cmp	r3, #96	; 0x60
 8008a9e:	d02b      	beq.n	8008af8 <HAL_CAN_IRQHandler+0x32a>
 8008aa0:	2b60      	cmp	r3, #96	; 0x60
 8008aa2:	d82e      	bhi.n	8008b02 <HAL_CAN_IRQHandler+0x334>
 8008aa4:	2b50      	cmp	r3, #80	; 0x50
 8008aa6:	d022      	beq.n	8008aee <HAL_CAN_IRQHandler+0x320>
 8008aa8:	2b50      	cmp	r3, #80	; 0x50
 8008aaa:	d82a      	bhi.n	8008b02 <HAL_CAN_IRQHandler+0x334>
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d019      	beq.n	8008ae4 <HAL_CAN_IRQHandler+0x316>
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d826      	bhi.n	8008b02 <HAL_CAN_IRQHandler+0x334>
 8008ab4:	2b30      	cmp	r3, #48	; 0x30
 8008ab6:	d010      	beq.n	8008ada <HAL_CAN_IRQHandler+0x30c>
 8008ab8:	2b30      	cmp	r3, #48	; 0x30
 8008aba:	d822      	bhi.n	8008b02 <HAL_CAN_IRQHandler+0x334>
 8008abc:	2b10      	cmp	r3, #16
 8008abe:	d002      	beq.n	8008ac6 <HAL_CAN_IRQHandler+0x2f8>
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	d005      	beq.n	8008ad0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008ac4:	e01d      	b.n	8008b02 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	f043 0308 	orr.w	r3, r3, #8
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008ace:	e019      	b.n	8008b04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	f043 0310 	orr.w	r3, r3, #16
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008ad8:	e014      	b.n	8008b04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008adc:	f043 0320 	orr.w	r3, r3, #32
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008ae2:	e00f      	b.n	8008b04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008aec:	e00a      	b.n	8008b04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008af6:	e005      	b.n	8008b04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b00:	e000      	b.n	8008b04 <HAL_CAN_IRQHandler+0x336>
            break;
 8008b02:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699a      	ldr	r2, [r3, #24]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b12:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2204      	movs	r2, #4
 8008b1a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f867 	bl	8008c02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008b34:	bf00      	nop
 8008b36:	3728      	adds	r7, #40	; 0x28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr

08008b72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr

08008b84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr

08008b96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bc80      	pop	{r7}
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bc80      	pop	{r7}
 8008bb8:	4770      	bx	lr

08008bba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr

08008bcc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr

08008bde <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr

08008bf0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bc80      	pop	{r7}
 8008c00:	4770      	bx	lr

08008c02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <__NVIC_SetPriorityGrouping+0x44>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c30:	4013      	ands	r3, r2
 8008c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c46:	4a04      	ldr	r2, [pc, #16]	; (8008c58 <__NVIC_SetPriorityGrouping+0x44>)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	60d3      	str	r3, [r2, #12]
}
 8008c4c:	bf00      	nop
 8008c4e:	3714      	adds	r7, #20
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	e000ed00 	.word	0xe000ed00

08008c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c60:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <__NVIC_GetPriorityGrouping+0x18>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	0a1b      	lsrs	r3, r3, #8
 8008c66:	f003 0307 	and.w	r3, r3, #7
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	e000ed00 	.word	0xe000ed00

08008c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	db0b      	blt.n	8008ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	f003 021f 	and.w	r2, r3, #31
 8008c90:	4906      	ldr	r1, [pc, #24]	; (8008cac <__NVIC_EnableIRQ+0x34>)
 8008c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c96:	095b      	lsrs	r3, r3, #5
 8008c98:	2001      	movs	r0, #1
 8008c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8008c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr
 8008cac:	e000e100 	.word	0xe000e100

08008cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	db0a      	blt.n	8008cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	490c      	ldr	r1, [pc, #48]	; (8008cfc <__NVIC_SetPriority+0x4c>)
 8008cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cce:	0112      	lsls	r2, r2, #4
 8008cd0:	b2d2      	uxtb	r2, r2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008cd8:	e00a      	b.n	8008cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	4908      	ldr	r1, [pc, #32]	; (8008d00 <__NVIC_SetPriority+0x50>)
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	f003 030f 	and.w	r3, r3, #15
 8008ce6:	3b04      	subs	r3, #4
 8008ce8:	0112      	lsls	r2, r2, #4
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	440b      	add	r3, r1
 8008cee:	761a      	strb	r2, [r3, #24]
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bc80      	pop	{r7}
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	e000e100 	.word	0xe000e100
 8008d00:	e000ed00 	.word	0xe000ed00

08008d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b089      	sub	sp, #36	; 0x24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f1c3 0307 	rsb	r3, r3, #7
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	bf28      	it	cs
 8008d22:	2304      	movcs	r3, #4
 8008d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	2b06      	cmp	r3, #6
 8008d2c:	d902      	bls.n	8008d34 <NVIC_EncodePriority+0x30>
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	3b03      	subs	r3, #3
 8008d32:	e000      	b.n	8008d36 <NVIC_EncodePriority+0x32>
 8008d34:	2300      	movs	r3, #0
 8008d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d38:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	43da      	mvns	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	401a      	ands	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	fa01 f303 	lsl.w	r3, r1, r3
 8008d56:	43d9      	mvns	r1, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d5c:	4313      	orrs	r3, r2
         );
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3724      	adds	r7, #36	; 0x24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d78:	d301      	bcc.n	8008d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e00f      	b.n	8008d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <SysTick_Config+0x40>)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d86:	210f      	movs	r1, #15
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8c:	f7ff ff90 	bl	8008cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d90:	4b05      	ldr	r3, [pc, #20]	; (8008da8 <SysTick_Config+0x40>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d96:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <SysTick_Config+0x40>)
 8008d98:	2207      	movs	r2, #7
 8008d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	e000e010 	.word	0xe000e010

08008dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff ff2d 	bl	8008c14 <__NVIC_SetPriorityGrouping>
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	4603      	mov	r3, r0
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	607a      	str	r2, [r7, #4]
 8008dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008dd4:	f7ff ff42 	bl	8008c5c <__NVIC_GetPriorityGrouping>
 8008dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	6978      	ldr	r0, [r7, #20]
 8008de0:	f7ff ff90 	bl	8008d04 <NVIC_EncodePriority>
 8008de4:	4602      	mov	r2, r0
 8008de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7ff ff5f 	bl	8008cb0 <__NVIC_SetPriority>
}
 8008df2:	bf00      	nop
 8008df4:	3718      	adds	r7, #24
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	4603      	mov	r3, r0
 8008e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff ff35 	bl	8008c78 <__NVIC_EnableIRQ>
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7ff ffa2 	bl	8008d68 <SysTick_Config>
 8008e24:	4603      	mov	r3, r0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e059      	b.n	8008efa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	4b2d      	ldr	r3, [pc, #180]	; (8008f04 <HAL_DMA_Init+0xd4>)
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d80f      	bhi.n	8008e72 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	4b2b      	ldr	r3, [pc, #172]	; (8008f08 <HAL_DMA_Init+0xd8>)
 8008e5a:	4413      	add	r3, r2
 8008e5c:	4a2b      	ldr	r2, [pc, #172]	; (8008f0c <HAL_DMA_Init+0xdc>)
 8008e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e62:	091b      	lsrs	r3, r3, #4
 8008e64:	009a      	lsls	r2, r3, #2
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a28      	ldr	r2, [pc, #160]	; (8008f10 <HAL_DMA_Init+0xe0>)
 8008e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008e70:	e00e      	b.n	8008e90 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	4b26      	ldr	r3, [pc, #152]	; (8008f14 <HAL_DMA_Init+0xe4>)
 8008e7a:	4413      	add	r3, r2
 8008e7c:	4a23      	ldr	r2, [pc, #140]	; (8008f0c <HAL_DMA_Init+0xdc>)
 8008e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e82:	091b      	lsrs	r3, r3, #4
 8008e84:	009a      	lsls	r2, r3, #2
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a22      	ldr	r2, [pc, #136]	; (8008f18 <HAL_DMA_Init+0xe8>)
 8008e8e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ea6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008eaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ecc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr
 8008f04:	40020407 	.word	0x40020407
 8008f08:	bffdfff8 	.word	0xbffdfff8
 8008f0c:	cccccccd 	.word	0xcccccccd
 8008f10:	40020000 	.word	0x40020000
 8008f14:	bffdfbf8 	.word	0xbffdfbf8
 8008f18:	40020400 	.word	0x40020400

08008f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_DMA_Start_IT+0x20>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e04a      	b.n	8008fd2 <HAL_DMA_Start_IT+0xb6>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d13a      	bne.n	8008fc4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2202      	movs	r2, #2
 8008f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0201 	bic.w	r2, r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	68b9      	ldr	r1, [r7, #8]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fa6e 	bl	8009454 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d008      	beq.n	8008f92 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 020e 	orr.w	r2, r2, #14
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	e00f      	b.n	8008fb2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0204 	bic.w	r2, r2, #4
 8008fa0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f042 020a 	orr.w	r2, r2, #10
 8008fb0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f042 0201 	orr.w	r2, r2, #1
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	e005      	b.n	8008fd0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	2204      	movs	r2, #4
 8008ffa:	409a      	lsls	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4013      	ands	r3, r2
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 80d6 	beq.w	80091b2 <HAL_DMA_IRQHandler+0x1d6>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80d0 	beq.w	80091b2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d107      	bne.n	8009030 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f022 0204 	bic.w	r2, r2, #4
 800902e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	4b9b      	ldr	r3, [pc, #620]	; (80092a4 <HAL_DMA_IRQHandler+0x2c8>)
 8009038:	429a      	cmp	r2, r3
 800903a:	d958      	bls.n	80090ee <HAL_DMA_IRQHandler+0x112>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a99      	ldr	r2, [pc, #612]	; (80092a8 <HAL_DMA_IRQHandler+0x2cc>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d04f      	beq.n	80090e6 <HAL_DMA_IRQHandler+0x10a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a98      	ldr	r2, [pc, #608]	; (80092ac <HAL_DMA_IRQHandler+0x2d0>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d048      	beq.n	80090e2 <HAL_DMA_IRQHandler+0x106>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a96      	ldr	r2, [pc, #600]	; (80092b0 <HAL_DMA_IRQHandler+0x2d4>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d040      	beq.n	80090dc <HAL_DMA_IRQHandler+0x100>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a95      	ldr	r2, [pc, #596]	; (80092b4 <HAL_DMA_IRQHandler+0x2d8>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d038      	beq.n	80090d6 <HAL_DMA_IRQHandler+0xfa>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a93      	ldr	r2, [pc, #588]	; (80092b8 <HAL_DMA_IRQHandler+0x2dc>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d030      	beq.n	80090d0 <HAL_DMA_IRQHandler+0xf4>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a92      	ldr	r2, [pc, #584]	; (80092bc <HAL_DMA_IRQHandler+0x2e0>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d028      	beq.n	80090ca <HAL_DMA_IRQHandler+0xee>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a89      	ldr	r2, [pc, #548]	; (80092a4 <HAL_DMA_IRQHandler+0x2c8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d020      	beq.n	80090c4 <HAL_DMA_IRQHandler+0xe8>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a8e      	ldr	r2, [pc, #568]	; (80092c0 <HAL_DMA_IRQHandler+0x2e4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d019      	beq.n	80090c0 <HAL_DMA_IRQHandler+0xe4>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a8c      	ldr	r2, [pc, #560]	; (80092c4 <HAL_DMA_IRQHandler+0x2e8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d012      	beq.n	80090bc <HAL_DMA_IRQHandler+0xe0>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a8b      	ldr	r2, [pc, #556]	; (80092c8 <HAL_DMA_IRQHandler+0x2ec>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00a      	beq.n	80090b6 <HAL_DMA_IRQHandler+0xda>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a89      	ldr	r2, [pc, #548]	; (80092cc <HAL_DMA_IRQHandler+0x2f0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d102      	bne.n	80090b0 <HAL_DMA_IRQHandler+0xd4>
 80090aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090ae:	e01b      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090b4:	e018      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ba:	e015      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	e013      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090c0:	2304      	movs	r3, #4
 80090c2:	e011      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80090c8:	e00e      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090ce:	e00b      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80090d4:	e008      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090da:	e005      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090e0:	e002      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090e2:	2340      	movs	r3, #64	; 0x40
 80090e4:	e000      	b.n	80090e8 <HAL_DMA_IRQHandler+0x10c>
 80090e6:	2304      	movs	r3, #4
 80090e8:	4a79      	ldr	r2, [pc, #484]	; (80092d0 <HAL_DMA_IRQHandler+0x2f4>)
 80090ea:	6053      	str	r3, [r2, #4]
 80090ec:	e057      	b.n	800919e <HAL_DMA_IRQHandler+0x1c2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a6d      	ldr	r2, [pc, #436]	; (80092a8 <HAL_DMA_IRQHandler+0x2cc>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d04f      	beq.n	8009198 <HAL_DMA_IRQHandler+0x1bc>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a6b      	ldr	r2, [pc, #428]	; (80092ac <HAL_DMA_IRQHandler+0x2d0>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d048      	beq.n	8009194 <HAL_DMA_IRQHandler+0x1b8>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a6a      	ldr	r2, [pc, #424]	; (80092b0 <HAL_DMA_IRQHandler+0x2d4>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d040      	beq.n	800918e <HAL_DMA_IRQHandler+0x1b2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a68      	ldr	r2, [pc, #416]	; (80092b4 <HAL_DMA_IRQHandler+0x2d8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d038      	beq.n	8009188 <HAL_DMA_IRQHandler+0x1ac>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a67      	ldr	r2, [pc, #412]	; (80092b8 <HAL_DMA_IRQHandler+0x2dc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d030      	beq.n	8009182 <HAL_DMA_IRQHandler+0x1a6>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a65      	ldr	r2, [pc, #404]	; (80092bc <HAL_DMA_IRQHandler+0x2e0>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d028      	beq.n	800917c <HAL_DMA_IRQHandler+0x1a0>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a5d      	ldr	r2, [pc, #372]	; (80092a4 <HAL_DMA_IRQHandler+0x2c8>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d020      	beq.n	8009176 <HAL_DMA_IRQHandler+0x19a>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a61      	ldr	r2, [pc, #388]	; (80092c0 <HAL_DMA_IRQHandler+0x2e4>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d019      	beq.n	8009172 <HAL_DMA_IRQHandler+0x196>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a60      	ldr	r2, [pc, #384]	; (80092c4 <HAL_DMA_IRQHandler+0x2e8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d012      	beq.n	800916e <HAL_DMA_IRQHandler+0x192>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a5e      	ldr	r2, [pc, #376]	; (80092c8 <HAL_DMA_IRQHandler+0x2ec>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00a      	beq.n	8009168 <HAL_DMA_IRQHandler+0x18c>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a5d      	ldr	r2, [pc, #372]	; (80092cc <HAL_DMA_IRQHandler+0x2f0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d102      	bne.n	8009162 <HAL_DMA_IRQHandler+0x186>
 800915c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009160:	e01b      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009162:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009166:	e018      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916c:	e015      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	e013      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009172:	2304      	movs	r3, #4
 8009174:	e011      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009176:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800917a:	e00e      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 800917c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009180:	e00b      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009182:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009186:	e008      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800918c:	e005      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 800918e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009192:	e002      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009194:	2340      	movs	r3, #64	; 0x40
 8009196:	e000      	b.n	800919a <HAL_DMA_IRQHandler+0x1be>
 8009198:	2304      	movs	r3, #4
 800919a:	4a4e      	ldr	r2, [pc, #312]	; (80092d4 <HAL_DMA_IRQHandler+0x2f8>)
 800919c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 8136 	beq.w	8009414 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80091b0:	e130      	b.n	8009414 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b6:	2202      	movs	r2, #2
 80091b8:	409a      	lsls	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4013      	ands	r3, r2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 80f8 	beq.w	80093b4 <HAL_DMA_IRQHandler+0x3d8>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 80f2 	beq.w	80093b4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10b      	bne.n	80091f6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 020a 	bic.w	r2, r2, #10
 80091ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	4b29      	ldr	r3, [pc, #164]	; (80092a4 <HAL_DMA_IRQHandler+0x2c8>)
 80091fe:	429a      	cmp	r2, r3
 8009200:	d973      	bls.n	80092ea <HAL_DMA_IRQHandler+0x30e>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a28      	ldr	r2, [pc, #160]	; (80092a8 <HAL_DMA_IRQHandler+0x2cc>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d06a      	beq.n	80092e2 <HAL_DMA_IRQHandler+0x306>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a26      	ldr	r2, [pc, #152]	; (80092ac <HAL_DMA_IRQHandler+0x2d0>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d063      	beq.n	80092de <HAL_DMA_IRQHandler+0x302>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a25      	ldr	r2, [pc, #148]	; (80092b0 <HAL_DMA_IRQHandler+0x2d4>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d05b      	beq.n	80092d8 <HAL_DMA_IRQHandler+0x2fc>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a23      	ldr	r2, [pc, #140]	; (80092b4 <HAL_DMA_IRQHandler+0x2d8>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d038      	beq.n	800929c <HAL_DMA_IRQHandler+0x2c0>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <HAL_DMA_IRQHandler+0x2dc>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d030      	beq.n	8009296 <HAL_DMA_IRQHandler+0x2ba>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a20      	ldr	r2, [pc, #128]	; (80092bc <HAL_DMA_IRQHandler+0x2e0>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d028      	beq.n	8009290 <HAL_DMA_IRQHandler+0x2b4>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a18      	ldr	r2, [pc, #96]	; (80092a4 <HAL_DMA_IRQHandler+0x2c8>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d020      	beq.n	800928a <HAL_DMA_IRQHandler+0x2ae>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a1c      	ldr	r2, [pc, #112]	; (80092c0 <HAL_DMA_IRQHandler+0x2e4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d019      	beq.n	8009286 <HAL_DMA_IRQHandler+0x2aa>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a1b      	ldr	r2, [pc, #108]	; (80092c4 <HAL_DMA_IRQHandler+0x2e8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d012      	beq.n	8009282 <HAL_DMA_IRQHandler+0x2a6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a19      	ldr	r2, [pc, #100]	; (80092c8 <HAL_DMA_IRQHandler+0x2ec>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d00a      	beq.n	800927c <HAL_DMA_IRQHandler+0x2a0>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a18      	ldr	r2, [pc, #96]	; (80092cc <HAL_DMA_IRQHandler+0x2f0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d102      	bne.n	8009276 <HAL_DMA_IRQHandler+0x29a>
 8009270:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009274:	e036      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 8009276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800927a:	e033      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 800927c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009280:	e030      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 8009282:	2320      	movs	r3, #32
 8009284:	e02e      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 8009286:	2302      	movs	r3, #2
 8009288:	e02c      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 800928a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800928e:	e029      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 8009290:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009294:	e026      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 8009296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800929a:	e023      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 800929c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092a0:	e020      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 80092a2:	bf00      	nop
 80092a4:	40020080 	.word	0x40020080
 80092a8:	40020008 	.word	0x40020008
 80092ac:	4002001c 	.word	0x4002001c
 80092b0:	40020030 	.word	0x40020030
 80092b4:	40020044 	.word	0x40020044
 80092b8:	40020058 	.word	0x40020058
 80092bc:	4002006c 	.word	0x4002006c
 80092c0:	40020408 	.word	0x40020408
 80092c4:	4002041c 	.word	0x4002041c
 80092c8:	40020430 	.word	0x40020430
 80092cc:	40020444 	.word	0x40020444
 80092d0:	40020400 	.word	0x40020400
 80092d4:	40020000 	.word	0x40020000
 80092d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092dc:	e002      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 80092de:	2320      	movs	r3, #32
 80092e0:	e000      	b.n	80092e4 <HAL_DMA_IRQHandler+0x308>
 80092e2:	2302      	movs	r3, #2
 80092e4:	4a4e      	ldr	r2, [pc, #312]	; (8009420 <HAL_DMA_IRQHandler+0x444>)
 80092e6:	6053      	str	r3, [r2, #4]
 80092e8:	e057      	b.n	800939a <HAL_DMA_IRQHandler+0x3be>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a4d      	ldr	r2, [pc, #308]	; (8009424 <HAL_DMA_IRQHandler+0x448>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d04f      	beq.n	8009394 <HAL_DMA_IRQHandler+0x3b8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a4b      	ldr	r2, [pc, #300]	; (8009428 <HAL_DMA_IRQHandler+0x44c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d048      	beq.n	8009390 <HAL_DMA_IRQHandler+0x3b4>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a4a      	ldr	r2, [pc, #296]	; (800942c <HAL_DMA_IRQHandler+0x450>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d040      	beq.n	800938a <HAL_DMA_IRQHandler+0x3ae>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a48      	ldr	r2, [pc, #288]	; (8009430 <HAL_DMA_IRQHandler+0x454>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d038      	beq.n	8009384 <HAL_DMA_IRQHandler+0x3a8>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a47      	ldr	r2, [pc, #284]	; (8009434 <HAL_DMA_IRQHandler+0x458>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d030      	beq.n	800937e <HAL_DMA_IRQHandler+0x3a2>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a45      	ldr	r2, [pc, #276]	; (8009438 <HAL_DMA_IRQHandler+0x45c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d028      	beq.n	8009378 <HAL_DMA_IRQHandler+0x39c>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a44      	ldr	r2, [pc, #272]	; (800943c <HAL_DMA_IRQHandler+0x460>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d020      	beq.n	8009372 <HAL_DMA_IRQHandler+0x396>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a42      	ldr	r2, [pc, #264]	; (8009440 <HAL_DMA_IRQHandler+0x464>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d019      	beq.n	800936e <HAL_DMA_IRQHandler+0x392>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a41      	ldr	r2, [pc, #260]	; (8009444 <HAL_DMA_IRQHandler+0x468>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d012      	beq.n	800936a <HAL_DMA_IRQHandler+0x38e>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a3f      	ldr	r2, [pc, #252]	; (8009448 <HAL_DMA_IRQHandler+0x46c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00a      	beq.n	8009364 <HAL_DMA_IRQHandler+0x388>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a3e      	ldr	r2, [pc, #248]	; (800944c <HAL_DMA_IRQHandler+0x470>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d102      	bne.n	800935e <HAL_DMA_IRQHandler+0x382>
 8009358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800935c:	e01b      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 800935e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009362:	e018      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 8009364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009368:	e015      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 800936a:	2320      	movs	r3, #32
 800936c:	e013      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 800936e:	2302      	movs	r3, #2
 8009370:	e011      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 8009372:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009376:	e00e      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 8009378:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800937c:	e00b      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 800937e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009382:	e008      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 8009384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009388:	e005      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 800938a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800938e:	e002      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 8009390:	2320      	movs	r3, #32
 8009392:	e000      	b.n	8009396 <HAL_DMA_IRQHandler+0x3ba>
 8009394:	2302      	movs	r3, #2
 8009396:	4a2e      	ldr	r2, [pc, #184]	; (8009450 <HAL_DMA_IRQHandler+0x474>)
 8009398:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d034      	beq.n	8009414 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80093b2:	e02f      	b.n	8009414 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b8:	2208      	movs	r2, #8
 80093ba:	409a      	lsls	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4013      	ands	r3, r2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d028      	beq.n	8009416 <HAL_DMA_IRQHandler+0x43a>
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d023      	beq.n	8009416 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f022 020e 	bic.w	r2, r2, #14
 80093dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	2101      	movs	r1, #1
 80093e8:	fa01 f202 	lsl.w	r2, r1, r2
 80093ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	4798      	blx	r3
    }
  }
  return;
 8009414:	bf00      	nop
 8009416:	bf00      	nop
}
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40020400 	.word	0x40020400
 8009424:	40020008 	.word	0x40020008
 8009428:	4002001c 	.word	0x4002001c
 800942c:	40020030 	.word	0x40020030
 8009430:	40020044 	.word	0x40020044
 8009434:	40020058 	.word	0x40020058
 8009438:	4002006c 	.word	0x4002006c
 800943c:	40020080 	.word	0x40020080
 8009440:	40020408 	.word	0x40020408
 8009444:	4002041c 	.word	0x4002041c
 8009448:	40020430 	.word	0x40020430
 800944c:	40020444 	.word	0x40020444
 8009450:	40020000 	.word	0x40020000

08009454 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
 8009460:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946a:	2101      	movs	r1, #1
 800946c:	fa01 f202 	lsl.w	r2, r1, r2
 8009470:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2b10      	cmp	r3, #16
 8009480:	d108      	bne.n	8009494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009492:	e007      	b.n	80094a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	60da      	str	r2, [r3, #12]
}
 80094a4:	bf00      	nop
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bc80      	pop	{r7}
 80094ac:	4770      	bx	lr
	...

080094b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b08b      	sub	sp, #44	; 0x2c
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80094ba:	2300      	movs	r3, #0
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80094be:	2300      	movs	r3, #0
 80094c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80094c2:	e179      	b.n	80097b8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80094c4:	2201      	movs	r2, #1
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	4013      	ands	r3, r2
 80094d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	429a      	cmp	r2, r3
 80094de:	f040 8168 	bne.w	80097b2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4aa0      	ldr	r2, [pc, #640]	; (8009768 <HAL_GPIO_Init+0x2b8>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d05e      	beq.n	80095aa <HAL_GPIO_Init+0xfa>
 80094ec:	4a9e      	ldr	r2, [pc, #632]	; (8009768 <HAL_GPIO_Init+0x2b8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d875      	bhi.n	80095de <HAL_GPIO_Init+0x12e>
 80094f2:	4a9e      	ldr	r2, [pc, #632]	; (800976c <HAL_GPIO_Init+0x2bc>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d058      	beq.n	80095aa <HAL_GPIO_Init+0xfa>
 80094f8:	4a9c      	ldr	r2, [pc, #624]	; (800976c <HAL_GPIO_Init+0x2bc>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d86f      	bhi.n	80095de <HAL_GPIO_Init+0x12e>
 80094fe:	4a9c      	ldr	r2, [pc, #624]	; (8009770 <HAL_GPIO_Init+0x2c0>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d052      	beq.n	80095aa <HAL_GPIO_Init+0xfa>
 8009504:	4a9a      	ldr	r2, [pc, #616]	; (8009770 <HAL_GPIO_Init+0x2c0>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d869      	bhi.n	80095de <HAL_GPIO_Init+0x12e>
 800950a:	4a9a      	ldr	r2, [pc, #616]	; (8009774 <HAL_GPIO_Init+0x2c4>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d04c      	beq.n	80095aa <HAL_GPIO_Init+0xfa>
 8009510:	4a98      	ldr	r2, [pc, #608]	; (8009774 <HAL_GPIO_Init+0x2c4>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d863      	bhi.n	80095de <HAL_GPIO_Init+0x12e>
 8009516:	4a98      	ldr	r2, [pc, #608]	; (8009778 <HAL_GPIO_Init+0x2c8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d046      	beq.n	80095aa <HAL_GPIO_Init+0xfa>
 800951c:	4a96      	ldr	r2, [pc, #600]	; (8009778 <HAL_GPIO_Init+0x2c8>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d85d      	bhi.n	80095de <HAL_GPIO_Init+0x12e>
 8009522:	2b12      	cmp	r3, #18
 8009524:	d82a      	bhi.n	800957c <HAL_GPIO_Init+0xcc>
 8009526:	2b12      	cmp	r3, #18
 8009528:	d859      	bhi.n	80095de <HAL_GPIO_Init+0x12e>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <HAL_GPIO_Init+0x80>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	080095ab 	.word	0x080095ab
 8009534:	08009585 	.word	0x08009585
 8009538:	08009597 	.word	0x08009597
 800953c:	080095d9 	.word	0x080095d9
 8009540:	080095df 	.word	0x080095df
 8009544:	080095df 	.word	0x080095df
 8009548:	080095df 	.word	0x080095df
 800954c:	080095df 	.word	0x080095df
 8009550:	080095df 	.word	0x080095df
 8009554:	080095df 	.word	0x080095df
 8009558:	080095df 	.word	0x080095df
 800955c:	080095df 	.word	0x080095df
 8009560:	080095df 	.word	0x080095df
 8009564:	080095df 	.word	0x080095df
 8009568:	080095df 	.word	0x080095df
 800956c:	080095df 	.word	0x080095df
 8009570:	080095df 	.word	0x080095df
 8009574:	0800958d 	.word	0x0800958d
 8009578:	080095a1 	.word	0x080095a1
 800957c:	4a7f      	ldr	r2, [pc, #508]	; (800977c <HAL_GPIO_Init+0x2cc>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d013      	beq.n	80095aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009582:	e02c      	b.n	80095de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	623b      	str	r3, [r7, #32]
          break;
 800958a:	e029      	b.n	80095e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	3304      	adds	r3, #4
 8009592:	623b      	str	r3, [r7, #32]
          break;
 8009594:	e024      	b.n	80095e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	3308      	adds	r3, #8
 800959c:	623b      	str	r3, [r7, #32]
          break;
 800959e:	e01f      	b.n	80095e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	330c      	adds	r3, #12
 80095a6:	623b      	str	r3, [r7, #32]
          break;
 80095a8:	e01a      	b.n	80095e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80095b2:	2304      	movs	r3, #4
 80095b4:	623b      	str	r3, [r7, #32]
          break;
 80095b6:	e013      	b.n	80095e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d105      	bne.n	80095cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80095c0:	2308      	movs	r3, #8
 80095c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	611a      	str	r2, [r3, #16]
          break;
 80095ca:	e009      	b.n	80095e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80095cc:	2308      	movs	r3, #8
 80095ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	615a      	str	r2, [r3, #20]
          break;
 80095d6:	e003      	b.n	80095e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80095d8:	2300      	movs	r3, #0
 80095da:	623b      	str	r3, [r7, #32]
          break;
 80095dc:	e000      	b.n	80095e0 <HAL_GPIO_Init+0x130>
          break;
 80095de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	2bff      	cmp	r3, #255	; 0xff
 80095e4:	d801      	bhi.n	80095ea <HAL_GPIO_Init+0x13a>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	e001      	b.n	80095ee <HAL_GPIO_Init+0x13e>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3304      	adds	r3, #4
 80095ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	2bff      	cmp	r3, #255	; 0xff
 80095f4:	d802      	bhi.n	80095fc <HAL_GPIO_Init+0x14c>
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	e002      	b.n	8009602 <HAL_GPIO_Init+0x152>
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	3b08      	subs	r3, #8
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	210f      	movs	r1, #15
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	fa01 f303 	lsl.w	r3, r1, r3
 8009610:	43db      	mvns	r3, r3
 8009612:	401a      	ands	r2, r3
 8009614:	6a39      	ldr	r1, [r7, #32]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	431a      	orrs	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 80c1 	beq.w	80097b2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009630:	4b53      	ldr	r3, [pc, #332]	; (8009780 <HAL_GPIO_Init+0x2d0>)
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	4a52      	ldr	r2, [pc, #328]	; (8009780 <HAL_GPIO_Init+0x2d0>)
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	6193      	str	r3, [r2, #24]
 800963c:	4b50      	ldr	r3, [pc, #320]	; (8009780 <HAL_GPIO_Init+0x2d0>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	60bb      	str	r3, [r7, #8]
 8009646:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009648:	4a4e      	ldr	r2, [pc, #312]	; (8009784 <HAL_GPIO_Init+0x2d4>)
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	089b      	lsrs	r3, r3, #2
 800964e:	3302      	adds	r3, #2
 8009650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009654:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	f003 0303 	and.w	r3, r3, #3
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	220f      	movs	r2, #15
 8009660:	fa02 f303 	lsl.w	r3, r2, r3
 8009664:	43db      	mvns	r3, r3
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4013      	ands	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a46      	ldr	r2, [pc, #280]	; (8009788 <HAL_GPIO_Init+0x2d8>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d01f      	beq.n	80096b4 <HAL_GPIO_Init+0x204>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a45      	ldr	r2, [pc, #276]	; (800978c <HAL_GPIO_Init+0x2dc>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d019      	beq.n	80096b0 <HAL_GPIO_Init+0x200>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a44      	ldr	r2, [pc, #272]	; (8009790 <HAL_GPIO_Init+0x2e0>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d013      	beq.n	80096ac <HAL_GPIO_Init+0x1fc>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a43      	ldr	r2, [pc, #268]	; (8009794 <HAL_GPIO_Init+0x2e4>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00d      	beq.n	80096a8 <HAL_GPIO_Init+0x1f8>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a42      	ldr	r2, [pc, #264]	; (8009798 <HAL_GPIO_Init+0x2e8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d007      	beq.n	80096a4 <HAL_GPIO_Init+0x1f4>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a41      	ldr	r2, [pc, #260]	; (800979c <HAL_GPIO_Init+0x2ec>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d101      	bne.n	80096a0 <HAL_GPIO_Init+0x1f0>
 800969c:	2305      	movs	r3, #5
 800969e:	e00a      	b.n	80096b6 <HAL_GPIO_Init+0x206>
 80096a0:	2306      	movs	r3, #6
 80096a2:	e008      	b.n	80096b6 <HAL_GPIO_Init+0x206>
 80096a4:	2304      	movs	r3, #4
 80096a6:	e006      	b.n	80096b6 <HAL_GPIO_Init+0x206>
 80096a8:	2303      	movs	r3, #3
 80096aa:	e004      	b.n	80096b6 <HAL_GPIO_Init+0x206>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e002      	b.n	80096b6 <HAL_GPIO_Init+0x206>
 80096b0:	2301      	movs	r3, #1
 80096b2:	e000      	b.n	80096b6 <HAL_GPIO_Init+0x206>
 80096b4:	2300      	movs	r3, #0
 80096b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b8:	f002 0203 	and.w	r2, r2, #3
 80096bc:	0092      	lsls	r2, r2, #2
 80096be:	4093      	lsls	r3, r2
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80096c6:	492f      	ldr	r1, [pc, #188]	; (8009784 <HAL_GPIO_Init+0x2d4>)
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	089b      	lsrs	r3, r3, #2
 80096cc:	3302      	adds	r3, #2
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d006      	beq.n	80096ee <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80096e0:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	492e      	ldr	r1, [pc, #184]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	600b      	str	r3, [r1, #0]
 80096ec:	e006      	b.n	80096fc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80096ee:	4b2c      	ldr	r3, [pc, #176]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	43db      	mvns	r3, r3
 80096f6:	492a      	ldr	r1, [pc, #168]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 80096f8:	4013      	ands	r3, r2
 80096fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d006      	beq.n	8009716 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009708:	4b25      	ldr	r3, [pc, #148]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	4924      	ldr	r1, [pc, #144]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4313      	orrs	r3, r2
 8009712:	604b      	str	r3, [r1, #4]
 8009714:	e006      	b.n	8009724 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009716:	4b22      	ldr	r3, [pc, #136]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	43db      	mvns	r3, r3
 800971e:	4920      	ldr	r1, [pc, #128]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 8009720:	4013      	ands	r3, r2
 8009722:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d006      	beq.n	800973e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009730:	4b1b      	ldr	r3, [pc, #108]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 8009732:	689a      	ldr	r2, [r3, #8]
 8009734:	491a      	ldr	r1, [pc, #104]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	4313      	orrs	r3, r2
 800973a:	608b      	str	r3, [r1, #8]
 800973c:	e006      	b.n	800974c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800973e:	4b18      	ldr	r3, [pc, #96]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	43db      	mvns	r3, r3
 8009746:	4916      	ldr	r1, [pc, #88]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 8009748:	4013      	ands	r3, r2
 800974a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009754:	2b00      	cmp	r3, #0
 8009756:	d025      	beq.n	80097a4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009758:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	4910      	ldr	r1, [pc, #64]	; (80097a0 <HAL_GPIO_Init+0x2f0>)
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	4313      	orrs	r3, r2
 8009762:	60cb      	str	r3, [r1, #12]
 8009764:	e025      	b.n	80097b2 <HAL_GPIO_Init+0x302>
 8009766:	bf00      	nop
 8009768:	10320000 	.word	0x10320000
 800976c:	10310000 	.word	0x10310000
 8009770:	10220000 	.word	0x10220000
 8009774:	10210000 	.word	0x10210000
 8009778:	10120000 	.word	0x10120000
 800977c:	10110000 	.word	0x10110000
 8009780:	40021000 	.word	0x40021000
 8009784:	40010000 	.word	0x40010000
 8009788:	40010800 	.word	0x40010800
 800978c:	40010c00 	.word	0x40010c00
 8009790:	40011000 	.word	0x40011000
 8009794:	40011400 	.word	0x40011400
 8009798:	40011800 	.word	0x40011800
 800979c:	40011c00 	.word	0x40011c00
 80097a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80097a4:	4b0b      	ldr	r3, [pc, #44]	; (80097d4 <HAL_GPIO_Init+0x324>)
 80097a6:	68da      	ldr	r2, [r3, #12]
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	43db      	mvns	r3, r3
 80097ac:	4909      	ldr	r1, [pc, #36]	; (80097d4 <HAL_GPIO_Init+0x324>)
 80097ae:	4013      	ands	r3, r2
 80097b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	3301      	adds	r3, #1
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	fa22 f303 	lsr.w	r3, r2, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f47f ae7e 	bne.w	80094c4 <HAL_GPIO_Init+0x14>
  }
}
 80097c8:	bf00      	nop
 80097ca:	bf00      	nop
 80097cc:	372c      	adds	r7, #44	; 0x2c
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr
 80097d4:	40010400 	.word	0x40010400

080097d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	460b      	mov	r3, r1
 80097e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689a      	ldr	r2, [r3, #8]
 80097e8:	887b      	ldrh	r3, [r7, #2]
 80097ea:	4013      	ands	r3, r2
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80097f0:	2301      	movs	r3, #1
 80097f2:	73fb      	strb	r3, [r7, #15]
 80097f4:	e001      	b.n	80097fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr

08009806 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	807b      	strh	r3, [r7, #2]
 8009812:	4613      	mov	r3, r2
 8009814:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009816:	787b      	ldrb	r3, [r7, #1]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d003      	beq.n	8009824 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800981c:	887a      	ldrh	r2, [r7, #2]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009822:	e003      	b.n	800982c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009824:	887b      	ldrh	r3, [r7, #2]
 8009826:	041a      	lsls	r2, r3, #16
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	611a      	str	r2, [r3, #16]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	bc80      	pop	{r7}
 8009834:	4770      	bx	lr

08009836 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009848:	887a      	ldrh	r2, [r7, #2]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4013      	ands	r3, r2
 800984e:	041a      	lsls	r2, r3, #16
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	43d9      	mvns	r1, r3
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	400b      	ands	r3, r1
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	611a      	str	r2, [r3, #16]
}
 800985e:	bf00      	nop
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr

08009868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e12b      	b.n	8009ad2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f7f9 fee8 	bl	8003664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2224      	movs	r2, #36	; 0x24
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f022 0201 	bic.w	r2, r2, #1
 80098aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80098cc:	f001 fea0 	bl	800b610 <HAL_RCC_GetPCLK1Freq>
 80098d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	4a81      	ldr	r2, [pc, #516]	; (8009adc <HAL_I2C_Init+0x274>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d807      	bhi.n	80098ec <HAL_I2C_Init+0x84>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4a80      	ldr	r2, [pc, #512]	; (8009ae0 <HAL_I2C_Init+0x278>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	bf94      	ite	ls
 80098e4:	2301      	movls	r3, #1
 80098e6:	2300      	movhi	r3, #0
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	e006      	b.n	80098fa <HAL_I2C_Init+0x92>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4a7d      	ldr	r2, [pc, #500]	; (8009ae4 <HAL_I2C_Init+0x27c>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bf94      	ite	ls
 80098f4:	2301      	movls	r3, #1
 80098f6:	2300      	movhi	r3, #0
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e0e7      	b.n	8009ad2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a78      	ldr	r2, [pc, #480]	; (8009ae8 <HAL_I2C_Init+0x280>)
 8009906:	fba2 2303 	umull	r2, r3, r2, r3
 800990a:	0c9b      	lsrs	r3, r3, #18
 800990c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	430a      	orrs	r2, r1
 8009920:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	4a6a      	ldr	r2, [pc, #424]	; (8009adc <HAL_I2C_Init+0x274>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d802      	bhi.n	800993c <HAL_I2C_Init+0xd4>
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	3301      	adds	r3, #1
 800993a:	e009      	b.n	8009950 <HAL_I2C_Init+0xe8>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009942:	fb02 f303 	mul.w	r3, r2, r3
 8009946:	4a69      	ldr	r2, [pc, #420]	; (8009aec <HAL_I2C_Init+0x284>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	099b      	lsrs	r3, r3, #6
 800994e:	3301      	adds	r3, #1
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	6812      	ldr	r2, [r2, #0]
 8009954:	430b      	orrs	r3, r1
 8009956:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009962:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	495c      	ldr	r1, [pc, #368]	; (8009adc <HAL_I2C_Init+0x274>)
 800996c:	428b      	cmp	r3, r1
 800996e:	d819      	bhi.n	80099a4 <HAL_I2C_Init+0x13c>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	1e59      	subs	r1, r3, #1
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	fbb1 f3f3 	udiv	r3, r1, r3
 800997e:	1c59      	adds	r1, r3, #1
 8009980:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009984:	400b      	ands	r3, r1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <HAL_I2C_Init+0x138>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	1e59      	subs	r1, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	fbb1 f3f3 	udiv	r3, r1, r3
 8009998:	3301      	adds	r3, #1
 800999a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800999e:	e051      	b.n	8009a44 <HAL_I2C_Init+0x1dc>
 80099a0:	2304      	movs	r3, #4
 80099a2:	e04f      	b.n	8009a44 <HAL_I2C_Init+0x1dc>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d111      	bne.n	80099d0 <HAL_I2C_Init+0x168>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	1e58      	subs	r0, r3, #1
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6859      	ldr	r1, [r3, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	440b      	add	r3, r1
 80099ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80099be:	3301      	adds	r3, #1
 80099c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bf0c      	ite	eq
 80099c8:	2301      	moveq	r3, #1
 80099ca:	2300      	movne	r3, #0
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	e012      	b.n	80099f6 <HAL_I2C_Init+0x18e>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	1e58      	subs	r0, r3, #1
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6859      	ldr	r1, [r3, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	0099      	lsls	r1, r3, #2
 80099e0:	440b      	add	r3, r1
 80099e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80099e6:	3301      	adds	r3, #1
 80099e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bf0c      	ite	eq
 80099f0:	2301      	moveq	r3, #1
 80099f2:	2300      	movne	r3, #0
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <HAL_I2C_Init+0x196>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e022      	b.n	8009a44 <HAL_I2C_Init+0x1dc>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689b      	ldr	r3, [r3, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d10e      	bne.n	8009a24 <HAL_I2C_Init+0x1bc>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	1e58      	subs	r0, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6859      	ldr	r1, [r3, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	440b      	add	r3, r1
 8009a14:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a18:	3301      	adds	r3, #1
 8009a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a22:	e00f      	b.n	8009a44 <HAL_I2C_Init+0x1dc>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	1e58      	subs	r0, r3, #1
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6859      	ldr	r1, [r3, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	0099      	lsls	r1, r3, #2
 8009a34:	440b      	add	r3, r1
 8009a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	6809      	ldr	r1, [r1, #0]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69da      	ldr	r2, [r3, #28]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009a72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	6911      	ldr	r1, [r2, #16]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	68d2      	ldr	r2, [r2, #12]
 8009a7e:	4311      	orrs	r1, r2
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6812      	ldr	r2, [r2, #0]
 8009a84:	430b      	orrs	r3, r1
 8009a86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	695a      	ldr	r2, [r3, #20]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0201 	orr.w	r2, r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	000186a0 	.word	0x000186a0
 8009ae0:	001e847f 	.word	0x001e847f
 8009ae4:	003d08ff 	.word	0x003d08ff
 8009ae8:	431bde83 	.word	0x431bde83
 8009aec:	10624dd3 	.word	0x10624dd3

08009af0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	607a      	str	r2, [r7, #4]
 8009afa:	461a      	mov	r2, r3
 8009afc:	460b      	mov	r3, r1
 8009afe:	817b      	strh	r3, [r7, #10]
 8009b00:	4613      	mov	r3, r2
 8009b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b04:	f7fd fdc8 	bl	8007698 <HAL_GetTick>
 8009b08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b20      	cmp	r3, #32
 8009b14:	f040 80e0 	bne.w	8009cd8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	2319      	movs	r3, #25
 8009b1e:	2201      	movs	r2, #1
 8009b20:	4970      	ldr	r1, [pc, #448]	; (8009ce4 <HAL_I2C_Master_Transmit+0x1f4>)
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 ff72 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	e0d3      	b.n	8009cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d101      	bne.n	8009b40 <HAL_I2C_Master_Transmit+0x50>
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e0cc      	b.n	8009cda <HAL_I2C_Master_Transmit+0x1ea>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d007      	beq.n	8009b66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0201 	orr.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2221      	movs	r2, #33	; 0x21
 8009b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2210      	movs	r2, #16
 8009b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	893a      	ldrh	r2, [r7, #8]
 8009b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	4a50      	ldr	r2, [pc, #320]	; (8009ce8 <HAL_I2C_Master_Transmit+0x1f8>)
 8009ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009ba8:	8979      	ldrh	r1, [r7, #10]
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	6a3a      	ldr	r2, [r7, #32]
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f000 fd2c 	bl	800a60c <I2C_MasterRequestWrite>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e08d      	b.n	8009cda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	613b      	str	r3, [r7, #16]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	613b      	str	r3, [r7, #16]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	613b      	str	r3, [r7, #16]
 8009bd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009bd4:	e066      	b.n	8009ca4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	6a39      	ldr	r1, [r7, #32]
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f000 ffec 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00d      	beq.n	8009c02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	d107      	bne.n	8009bfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e06b      	b.n	8009cda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d11b      	bne.n	8009c78 <HAL_I2C_Master_Transmit+0x188>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d017      	beq.n	8009c78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	3b01      	subs	r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c70:	3b01      	subs	r3, #1
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	6a39      	ldr	r1, [r7, #32]
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 ffdc 	bl	800ac3a <I2C_WaitOnBTFFlagUntilTimeout>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00d      	beq.n	8009ca4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8c:	2b04      	cmp	r3, #4
 8009c8e:	d107      	bne.n	8009ca0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e01a      	b.n	8009cda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d194      	bne.n	8009bd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e000      	b.n	8009cda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009cd8:	2302      	movs	r3, #2
  }
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	00100002 	.word	0x00100002
 8009ce8:	ffff0000 	.word	0xffff0000

08009cec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	817b      	strh	r3, [r7, #10]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	813b      	strh	r3, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d06:	f7fd fcc7 	bl	8007698 <HAL_GetTick>
 8009d0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	f040 80d9 	bne.w	8009ecc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	2319      	movs	r3, #25
 8009d20:	2201      	movs	r2, #1
 8009d22:	496d      	ldr	r1, [pc, #436]	; (8009ed8 <HAL_I2C_Mem_Write+0x1ec>)
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 fe71 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
 8009d32:	e0cc      	b.n	8009ece <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <HAL_I2C_Mem_Write+0x56>
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e0c5      	b.n	8009ece <HAL_I2C_Mem_Write+0x1e2>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d007      	beq.n	8009d68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 0201 	orr.w	r2, r2, #1
 8009d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2221      	movs	r2, #33	; 0x21
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2240      	movs	r2, #64	; 0x40
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6a3a      	ldr	r2, [r7, #32]
 8009d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a4d      	ldr	r2, [pc, #308]	; (8009edc <HAL_I2C_Mem_Write+0x1f0>)
 8009da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009daa:	88f8      	ldrh	r0, [r7, #6]
 8009dac:	893a      	ldrh	r2, [r7, #8]
 8009dae:	8979      	ldrh	r1, [r7, #10]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	4603      	mov	r3, r0
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fca8 	bl	800a710 <I2C_RequestMemoryWrite>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d052      	beq.n	8009e6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e081      	b.n	8009ece <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 fef2 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00d      	beq.n	8009df6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d107      	bne.n	8009df2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009df0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e06b      	b.n	8009ece <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	781a      	ldrb	r2, [r3, #0]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	695b      	ldr	r3, [r3, #20]
 8009e2c:	f003 0304 	and.w	r3, r3, #4
 8009e30:	2b04      	cmp	r3, #4
 8009e32:	d11b      	bne.n	8009e6c <HAL_I2C_Mem_Write+0x180>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d017      	beq.n	8009e6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	781a      	ldrb	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e56:	3b01      	subs	r3, #1
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	3b01      	subs	r3, #1
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1aa      	bne.n	8009dca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 fede 	bl	800ac3a <I2C_WaitOnBTFFlagUntilTimeout>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00d      	beq.n	8009ea0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e88:	2b04      	cmp	r3, #4
 8009e8a:	d107      	bne.n	8009e9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e016      	b.n	8009ece <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e000      	b.n	8009ece <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009ecc:	2302      	movs	r3, #2
  }
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	00100002 	.word	0x00100002
 8009edc:	ffff0000 	.word	0xffff0000

08009ee0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	; 0x30
 8009ee4:	af02      	add	r7, sp, #8
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	4608      	mov	r0, r1
 8009eea:	4611      	mov	r1, r2
 8009eec:	461a      	mov	r2, r3
 8009eee:	4603      	mov	r3, r0
 8009ef0:	817b      	strh	r3, [r7, #10]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	813b      	strh	r3, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009efe:	f7fd fbcb 	bl	8007698 <HAL_GetTick>
 8009f02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	f040 8244 	bne.w	800a39a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	2319      	movs	r3, #25
 8009f18:	2201      	movs	r2, #1
 8009f1a:	4982      	ldr	r1, [pc, #520]	; (800a124 <HAL_I2C_Mem_Read+0x244>)
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fd75 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	e237      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d101      	bne.n	8009f3a <HAL_I2C_Mem_Read+0x5a>
 8009f36:	2302      	movs	r3, #2
 8009f38:	e230      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d007      	beq.n	8009f60 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f042 0201 	orr.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2222      	movs	r2, #34	; 0x22
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2240      	movs	r2, #64	; 0x40
 8009f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4a62      	ldr	r2, [pc, #392]	; (800a128 <HAL_I2C_Mem_Read+0x248>)
 8009fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009fa2:	88f8      	ldrh	r0, [r7, #6]
 8009fa4:	893a      	ldrh	r2, [r7, #8]
 8009fa6:	8979      	ldrh	r1, [r7, #10]
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	9301      	str	r3, [sp, #4]
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	68f8      	ldr	r0, [r7, #12]
 8009fb4:	f000 fc42 	bl	800a83c <I2C_RequestMemoryRead>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e1ec      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d113      	bne.n	8009ff2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e1c0      	b.n	800a374 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d11e      	bne.n	800a038 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a008:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a00a:	b672      	cpsid	i
}
 800a00c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a00e:	2300      	movs	r3, #0
 800a010:	61bb      	str	r3, [r7, #24]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	695b      	ldr	r3, [r3, #20]
 800a018:	61bb      	str	r3, [r7, #24]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a032:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a034:	b662      	cpsie	i
}
 800a036:	e035      	b.n	800a0a4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d11e      	bne.n	800a07e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a04e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a050:	b672      	cpsid	i
}
 800a052:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a054:	2300      	movs	r3, #0
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	695b      	ldr	r3, [r3, #20]
 800a05e:	617b      	str	r3, [r7, #20]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a078:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a07a:	b662      	cpsie	i
}
 800a07c:	e012      	b.n	800a0a4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a08c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a08e:	2300      	movs	r3, #0
 800a090:	613b      	str	r3, [r7, #16]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	613b      	str	r3, [r7, #16]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	613b      	str	r3, [r7, #16]
 800a0a2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a0a4:	e166      	b.n	800a374 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	f200 811f 	bhi.w	800a2ee <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d123      	bne.n	800a100 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f000 fdfd 	bl	800acbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e167      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691a      	ldr	r2, [r3, #16]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0fe:	e139      	b.n	800a374 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a104:	2b02      	cmp	r3, #2
 800a106:	d152      	bne.n	800a1ae <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	2200      	movs	r2, #0
 800a110:	4906      	ldr	r1, [pc, #24]	; (800a12c <HAL_I2C_Mem_Read+0x24c>)
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 fc7a 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d008      	beq.n	800a130 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e13c      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
 800a122:	bf00      	nop
 800a124:	00100002 	.word	0x00100002
 800a128:	ffff0000 	.word	0xffff0000
 800a12c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a130:	b672      	cpsid	i
}
 800a132:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	691a      	ldr	r2, [r3, #16]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	b2d2      	uxtb	r2, r2
 800a150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a160:	3b01      	subs	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	3b01      	subs	r3, #1
 800a170:	b29a      	uxth	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a176:	b662      	cpsie	i
}
 800a178:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	691a      	ldr	r2, [r3, #16]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	b2d2      	uxtb	r2, r2
 800a186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a196:	3b01      	subs	r3, #1
 800a198:	b29a      	uxth	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1ac:	e0e2      	b.n	800a374 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	497b      	ldr	r1, [pc, #492]	; (800a3a4 <HAL_I2C_Mem_Read+0x4c4>)
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 fc27 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e0e9      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1d8:	b672      	cpsid	i
}
 800a1da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691a      	ldr	r2, [r3, #16]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	b2d2      	uxtb	r2, r2
 800a1e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a204:	b29b      	uxth	r3, r3
 800a206:	3b01      	subs	r3, #1
 800a208:	b29a      	uxth	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a20e:	4b66      	ldr	r3, [pc, #408]	; (800a3a8 <HAL_I2C_Mem_Read+0x4c8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	08db      	lsrs	r3, r3, #3
 800a214:	4a65      	ldr	r2, [pc, #404]	; (800a3ac <HAL_I2C_Mem_Read+0x4cc>)
 800a216:	fba2 2303 	umull	r2, r3, r2, r3
 800a21a:	0a1a      	lsrs	r2, r3, #8
 800a21c:	4613      	mov	r3, r2
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	00da      	lsls	r2, r3, #3
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d118      	bne.n	800a266 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	f043 0220 	orr.w	r2, r3, #32
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a256:	b662      	cpsie	i
}
 800a258:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e09a      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b04      	cmp	r3, #4
 800a272:	d1d9      	bne.n	800a228 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	691a      	ldr	r2, [r3, #16]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	b2d2      	uxtb	r2, r2
 800a290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a296:	1c5a      	adds	r2, r3, #1
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	b29a      	uxth	r2, r3
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a2b6:	b662      	cpsie	i
}
 800a2b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	691a      	ldr	r2, [r3, #16]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c4:	b2d2      	uxtb	r2, r2
 800a2c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a2ec:	e042      	b.n	800a374 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fce2 	bl	800acbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e04c      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	691a      	ldr	r2, [r3, #16]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30c:	b2d2      	uxtb	r2, r2
 800a30e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a314:	1c5a      	adds	r2, r3, #1
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a31e:	3b01      	subs	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	f003 0304 	and.w	r3, r3, #4
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d118      	bne.n	800a374 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	691a      	ldr	r2, [r3, #16]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34c:	b2d2      	uxtb	r2, r2
 800a34e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a35e:	3b01      	subs	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	3b01      	subs	r3, #1
 800a36e:	b29a      	uxth	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f47f ae94 	bne.w	800a0a6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2220      	movs	r2, #32
 800a382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	e000      	b.n	800a39c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a39a:	2302      	movs	r3, #2
  }
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3728      	adds	r7, #40	; 0x28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	00010004 	.word	0x00010004
 800a3a8:	20000040 	.word	0x20000040
 800a3ac:	14f8b589 	.word	0x14f8b589

0800a3b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08a      	sub	sp, #40	; 0x28
 800a3b4:	af02      	add	r7, sp, #8
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	607a      	str	r2, [r7, #4]
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	460b      	mov	r3, r1
 800a3be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a3c0:	f7fd f96a 	bl	8007698 <HAL_GetTick>
 800a3c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	2b20      	cmp	r3, #32
 800a3d4:	f040 8111 	bne.w	800a5fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	2319      	movs	r3, #25
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4988      	ldr	r1, [pc, #544]	; (800a604 <HAL_I2C_IsDeviceReady+0x254>)
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 fb12 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	e104      	b.n	800a5fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d101      	bne.n	800a400 <HAL_I2C_IsDeviceReady+0x50>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e0fd      	b.n	800a5fc <HAL_I2C_IsDeviceReady+0x24c>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b01      	cmp	r3, #1
 800a414:	d007      	beq.n	800a426 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0201 	orr.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a434:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2224      	movs	r2, #36	; 0x24
 800a43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4a70      	ldr	r2, [pc, #448]	; (800a608 <HAL_I2C_IsDeviceReady+0x258>)
 800a448:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a458:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2200      	movs	r2, #0
 800a462:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 fad0 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00d      	beq.n	800a48e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a480:	d103      	bne.n	800a48a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a488:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e0b6      	b.n	800a5fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a48e:	897b      	ldrh	r3, [r7, #10]
 800a490:	b2db      	uxtb	r3, r3
 800a492:	461a      	mov	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a49c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a49e:	f7fd f8fb 	bl	8007698 <HAL_GetTick>
 800a4a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	bf0c      	ite	eq
 800a4b2:	2301      	moveq	r3, #1
 800a4b4:	2300      	movne	r3, #0
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4c8:	bf0c      	ite	eq
 800a4ca:	2301      	moveq	r3, #1
 800a4cc:	2300      	movne	r3, #0
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a4d2:	e025      	b.n	800a520 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a4d4:	f7fd f8e0 	bl	8007698 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d302      	bcc.n	800a4ea <HAL_I2C_IsDeviceReady+0x13a>
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d103      	bne.n	800a4f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	22a0      	movs	r2, #160	; 0xa0
 800a4ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	695b      	ldr	r3, [r3, #20]
 800a4f8:	f003 0302 	and.w	r3, r3, #2
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	bf0c      	ite	eq
 800a500:	2301      	moveq	r3, #1
 800a502:	2300      	movne	r3, #0
 800a504:	b2db      	uxtb	r3, r3
 800a506:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a516:	bf0c      	ite	eq
 800a518:	2301      	moveq	r3, #1
 800a51a:	2300      	movne	r3, #0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2ba0      	cmp	r3, #160	; 0xa0
 800a52a:	d005      	beq.n	800a538 <HAL_I2C_IsDeviceReady+0x188>
 800a52c:	7dfb      	ldrb	r3, [r7, #23]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d102      	bne.n	800a538 <HAL_I2C_IsDeviceReady+0x188>
 800a532:	7dbb      	ldrb	r3, [r7, #22]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d0cd      	beq.n	800a4d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2220      	movs	r2, #32
 800a53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d129      	bne.n	800a5a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a55c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a55e:	2300      	movs	r3, #0
 800a560:	613b      	str	r3, [r7, #16]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	613b      	str	r3, [r7, #16]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	613b      	str	r3, [r7, #16]
 800a572:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	2319      	movs	r3, #25
 800a57a:	2201      	movs	r2, #1
 800a57c:	4921      	ldr	r1, [pc, #132]	; (800a604 <HAL_I2C_IsDeviceReady+0x254>)
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 fa44 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e036      	b.n	800a5fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2220      	movs	r2, #32
 800a592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e02c      	b.n	800a5fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	2319      	movs	r3, #25
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	490f      	ldr	r1, [pc, #60]	; (800a604 <HAL_I2C_IsDeviceReady+0x254>)
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f000 fa20 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e012      	b.n	800a5fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	f4ff af32 	bcc.w	800a44a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	e000      	b.n	800a5fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800a5fa:	2302      	movs	r3, #2
  }
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3720      	adds	r7, #32
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	00100002 	.word	0x00100002
 800a608:	ffff0000 	.word	0xffff0000

0800a60c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af02      	add	r7, sp, #8
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	607a      	str	r2, [r7, #4]
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	460b      	mov	r3, r1
 800a61a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	2b08      	cmp	r3, #8
 800a626:	d006      	beq.n	800a636 <I2C_MasterRequestWrite+0x2a>
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d003      	beq.n	800a636 <I2C_MasterRequestWrite+0x2a>
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a634:	d108      	bne.n	800a648 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e00b      	b.n	800a660 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64c:	2b12      	cmp	r3, #18
 800a64e:	d107      	bne.n	800a660 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a65e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f9cd 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00d      	beq.n	800a694 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a686:	d103      	bne.n	800a690 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a68e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e035      	b.n	800a700 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a69c:	d108      	bne.n	800a6b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a69e:	897b      	ldrh	r3, [r7, #10]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6ac:	611a      	str	r2, [r3, #16]
 800a6ae:	e01b      	b.n	800a6e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a6b0:	897b      	ldrh	r3, [r7, #10]
 800a6b2:	11db      	asrs	r3, r3, #7
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	f003 0306 	and.w	r3, r3, #6
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f063 030f 	orn	r3, r3, #15
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	490e      	ldr	r1, [pc, #56]	; (800a708 <I2C_MasterRequestWrite+0xfc>)
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 f9f3 	bl	800aaba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e010      	b.n	800a700 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a6de:	897b      	ldrh	r3, [r7, #10]
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	4907      	ldr	r1, [pc, #28]	; (800a70c <I2C_MasterRequestWrite+0x100>)
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f9e3 	bl	800aaba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e000      	b.n	800a700 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	00010008 	.word	0x00010008
 800a70c:	00010002 	.word	0x00010002

0800a710 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af02      	add	r7, sp, #8
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	4608      	mov	r0, r1
 800a71a:	4611      	mov	r1, r2
 800a71c:	461a      	mov	r2, r3
 800a71e:	4603      	mov	r3, r0
 800a720:	817b      	strh	r3, [r7, #10]
 800a722:	460b      	mov	r3, r1
 800a724:	813b      	strh	r3, [r7, #8]
 800a726:	4613      	mov	r3, r2
 800a728:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a738:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	6a3b      	ldr	r3, [r7, #32]
 800a740:	2200      	movs	r2, #0
 800a742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f960 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00d      	beq.n	800a76e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a75c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a760:	d103      	bne.n	800a76a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a768:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e05f      	b.n	800a82e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a76e:	897b      	ldrh	r3, [r7, #10]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	461a      	mov	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a77c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	6a3a      	ldr	r2, [r7, #32]
 800a782:	492d      	ldr	r1, [pc, #180]	; (800a838 <I2C_RequestMemoryWrite+0x128>)
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 f998 	bl	800aaba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e04c      	b.n	800a82e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a794:	2300      	movs	r3, #0
 800a796:	617b      	str	r3, [r7, #20]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	695b      	ldr	r3, [r3, #20]
 800a79e:	617b      	str	r3, [r7, #20]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ac:	6a39      	ldr	r1, [r7, #32]
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 fa02 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00d      	beq.n	800a7d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	2b04      	cmp	r3, #4
 800a7c0:	d107      	bne.n	800a7d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e02b      	b.n	800a82e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7d6:	88fb      	ldrh	r3, [r7, #6]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d105      	bne.n	800a7e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7dc:	893b      	ldrh	r3, [r7, #8]
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	611a      	str	r2, [r3, #16]
 800a7e6:	e021      	b.n	800a82c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7e8:	893b      	ldrh	r3, [r7, #8]
 800a7ea:	0a1b      	lsrs	r3, r3, #8
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f8:	6a39      	ldr	r1, [r7, #32]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 f9dc 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00d      	beq.n	800a822 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80a:	2b04      	cmp	r3, #4
 800a80c:	d107      	bne.n	800a81e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a81c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e005      	b.n	800a82e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a822:	893b      	ldrh	r3, [r7, #8]
 800a824:	b2da      	uxtb	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3718      	adds	r7, #24
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	00010002 	.word	0x00010002

0800a83c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af02      	add	r7, sp, #8
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	4608      	mov	r0, r1
 800a846:	4611      	mov	r1, r2
 800a848:	461a      	mov	r2, r3
 800a84a:	4603      	mov	r3, r0
 800a84c:	817b      	strh	r3, [r7, #10]
 800a84e:	460b      	mov	r3, r1
 800a850:	813b      	strh	r3, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a864:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a874:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 f8c2 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a89c:	d103      	bne.n	800a8a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e0aa      	b.n	800aa00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8aa:	897b      	ldrh	r3, [r7, #10]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a8b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	6a3a      	ldr	r2, [r7, #32]
 800a8be:	4952      	ldr	r1, [pc, #328]	; (800aa08 <I2C_RequestMemoryRead+0x1cc>)
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 f8fa 	bl	800aaba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e097      	b.n	800aa00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	617b      	str	r3, [r7, #20]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	617b      	str	r3, [r7, #20]
 800a8e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e8:	6a39      	ldr	r1, [r7, #32]
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 f964 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00d      	beq.n	800a912 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fa:	2b04      	cmp	r3, #4
 800a8fc:	d107      	bne.n	800a90e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a90c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	e076      	b.n	800aa00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a912:	88fb      	ldrh	r3, [r7, #6]
 800a914:	2b01      	cmp	r3, #1
 800a916:	d105      	bne.n	800a924 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a918:	893b      	ldrh	r3, [r7, #8]
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	611a      	str	r2, [r3, #16]
 800a922:	e021      	b.n	800a968 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a924:	893b      	ldrh	r3, [r7, #8]
 800a926:	0a1b      	lsrs	r3, r3, #8
 800a928:	b29b      	uxth	r3, r3
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a934:	6a39      	ldr	r1, [r7, #32]
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 f93e 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00d      	beq.n	800a95e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a946:	2b04      	cmp	r3, #4
 800a948:	d107      	bne.n	800a95a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a958:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e050      	b.n	800aa00 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a95e:	893b      	ldrh	r3, [r7, #8]
 800a960:	b2da      	uxtb	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96a:	6a39      	ldr	r1, [r7, #32]
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f000 f923 	bl	800abb8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00d      	beq.n	800a994 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97c:	2b04      	cmp	r3, #4
 800a97e:	d107      	bne.n	800a990 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a98e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e035      	b.n	800aa00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f000 f82b 	bl	800aa0c <I2C_WaitOnFlagUntilTimeout>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00d      	beq.n	800a9d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ca:	d103      	bne.n	800a9d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e013      	b.n	800aa00 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a9d8:	897b      	ldrh	r3, [r7, #10]
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f043 0301 	orr.w	r3, r3, #1
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	6a3a      	ldr	r2, [r7, #32]
 800a9ec:	4906      	ldr	r1, [pc, #24]	; (800aa08 <I2C_RequestMemoryRead+0x1cc>)
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 f863 	bl	800aaba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	00010002 	.word	0x00010002

0800aa0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa1c:	e025      	b.n	800aa6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa24:	d021      	beq.n	800aa6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa26:	f7fc fe37 	bl	8007698 <HAL_GetTick>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	683a      	ldr	r2, [r7, #0]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d302      	bcc.n	800aa3c <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d116      	bne.n	800aa6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2220      	movs	r2, #32
 800aa46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa56:	f043 0220 	orr.w	r2, r3, #32
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e023      	b.n	800aab2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	0c1b      	lsrs	r3, r3, #16
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d10d      	bne.n	800aa90 <I2C_WaitOnFlagUntilTimeout+0x84>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	43da      	mvns	r2, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4013      	ands	r3, r2
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bf0c      	ite	eq
 800aa86:	2301      	moveq	r3, #1
 800aa88:	2300      	movne	r3, #0
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	e00c      	b.n	800aaaa <I2C_WaitOnFlagUntilTimeout+0x9e>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	43da      	mvns	r2, r3
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	bf0c      	ite	eq
 800aaa2:	2301      	moveq	r3, #1
 800aaa4:	2300      	movne	r3, #0
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d0b6      	beq.n	800aa1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	60f8      	str	r0, [r7, #12]
 800aac2:	60b9      	str	r1, [r7, #8]
 800aac4:	607a      	str	r2, [r7, #4]
 800aac6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aac8:	e051      	b.n	800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aad8:	d123      	bne.n	800ab22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aae8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aaf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2220      	movs	r2, #32
 800aafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0e:	f043 0204 	orr.w	r2, r3, #4
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e046      	b.n	800abb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab28:	d021      	beq.n	800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab2a:	f7fc fdb5 	bl	8007698 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d302      	bcc.n	800ab40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d116      	bne.n	800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5a:	f043 0220 	orr.w	r2, r3, #32
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e020      	b.n	800abb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	0c1b      	lsrs	r3, r3, #16
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d10c      	bne.n	800ab92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	43da      	mvns	r2, r3
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	4013      	ands	r3, r2
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	bf14      	ite	ne
 800ab8a:	2301      	movne	r3, #1
 800ab8c:	2300      	moveq	r3, #0
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	e00b      	b.n	800abaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	43da      	mvns	r2, r3
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	b29b      	uxth	r3, r3
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bf14      	ite	ne
 800aba4:	2301      	movne	r3, #1
 800aba6:	2300      	moveq	r3, #0
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d18d      	bne.n	800aaca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abc4:	e02d      	b.n	800ac22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 f8ce 	bl	800ad68 <I2C_IsAcknowledgeFailed>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e02d      	b.n	800ac32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d021      	beq.n	800ac22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abde:	f7fc fd5b 	bl	8007698 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	429a      	cmp	r2, r3
 800abec:	d302      	bcc.n	800abf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d116      	bne.n	800ac22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0e:	f043 0220 	orr.w	r2, r3, #32
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e007      	b.n	800ac32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2c:	2b80      	cmp	r3, #128	; 0x80
 800ac2e:	d1ca      	bne.n	800abc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	60f8      	str	r0, [r7, #12]
 800ac42:	60b9      	str	r1, [r7, #8]
 800ac44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac46:	e02d      	b.n	800aca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f88d 	bl	800ad68 <I2C_IsAcknowledgeFailed>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d001      	beq.n	800ac58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e02d      	b.n	800acb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5e:	d021      	beq.n	800aca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac60:	f7fc fd1a 	bl	8007698 <HAL_GetTick>
 800ac64:	4602      	mov	r2, r0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d302      	bcc.n	800ac76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d116      	bne.n	800aca4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2220      	movs	r2, #32
 800ac80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac90:	f043 0220 	orr.w	r2, r3, #32
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e007      	b.n	800acb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f003 0304 	and.w	r3, r3, #4
 800acae:	2b04      	cmp	r3, #4
 800acb0:	d1ca      	bne.n	800ac48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acc8:	e042      	b.n	800ad50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	695b      	ldr	r3, [r3, #20]
 800acd0:	f003 0310 	and.w	r3, r3, #16
 800acd4:	2b10      	cmp	r3, #16
 800acd6:	d119      	bne.n	800ad0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f06f 0210 	mvn.w	r2, #16
 800ace0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e029      	b.n	800ad60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0c:	f7fc fcc4 	bl	8007698 <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	68ba      	ldr	r2, [r7, #8]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d302      	bcc.n	800ad22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d116      	bne.n	800ad50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3c:	f043 0220 	orr.w	r2, r3, #32
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e007      	b.n	800ad60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad5a:	2b40      	cmp	r3, #64	; 0x40
 800ad5c:	d1b5      	bne.n	800acca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ad5e:	2300      	movs	r3, #0
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3710      	adds	r7, #16
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad7e:	d11b      	bne.n	800adb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2220      	movs	r2, #32
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	f043 0204 	orr.w	r2, r3, #4
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e000      	b.n	800adba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bc80      	pop	{r7}
 800adc2:	4770      	bx	lr

0800adc4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e034      	b.n	800ae40 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800adde:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f245 5255 	movw	r2, #21845	; 0x5555
 800ade8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6852      	ldr	r2, [r2, #4]
 800adf2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6892      	ldr	r2, [r2, #8]
 800adfc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800adfe:	f7fc fc4b 	bl	8007698 <HAL_GetTick>
 800ae02:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ae04:	e00f      	b.n	800ae26 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ae06:	f7fc fc47 	bl	8007698 <HAL_GetTick>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	2b27      	cmp	r3, #39	; 0x27
 800ae12:	d908      	bls.n	800ae26 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	f003 0303 	and.w	r3, r3, #3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ae22:	2303      	movs	r3, #3
 800ae24:	e00c      	b.n	800ae40 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1e8      	bne.n	800ae06 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ae3c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ae58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr
	...

0800ae68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e26c      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 8087 	beq.w	800af96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ae88:	4b92      	ldr	r3, [pc, #584]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f003 030c 	and.w	r3, r3, #12
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d00c      	beq.n	800aeae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ae94:	4b8f      	ldr	r3, [pc, #572]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f003 030c 	and.w	r3, r3, #12
 800ae9c:	2b08      	cmp	r3, #8
 800ae9e:	d112      	bne.n	800aec6 <HAL_RCC_OscConfig+0x5e>
 800aea0:	4b8c      	ldr	r3, [pc, #560]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeac:	d10b      	bne.n	800aec6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeae:	4b89      	ldr	r3, [pc, #548]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d06c      	beq.n	800af94 <HAL_RCC_OscConfig+0x12c>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d168      	bne.n	800af94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e246      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aece:	d106      	bne.n	800aede <HAL_RCC_OscConfig+0x76>
 800aed0:	4b80      	ldr	r3, [pc, #512]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a7f      	ldr	r2, [pc, #508]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	e02e      	b.n	800af3c <HAL_RCC_OscConfig+0xd4>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10c      	bne.n	800af00 <HAL_RCC_OscConfig+0x98>
 800aee6:	4b7b      	ldr	r3, [pc, #492]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a7a      	ldr	r2, [pc, #488]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aeec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aef0:	6013      	str	r3, [r2, #0]
 800aef2:	4b78      	ldr	r3, [pc, #480]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a77      	ldr	r2, [pc, #476]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800aef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	e01d      	b.n	800af3c <HAL_RCC_OscConfig+0xd4>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af08:	d10c      	bne.n	800af24 <HAL_RCC_OscConfig+0xbc>
 800af0a:	4b72      	ldr	r3, [pc, #456]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a71      	ldr	r2, [pc, #452]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	4b6f      	ldr	r3, [pc, #444]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a6e      	ldr	r2, [pc, #440]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af20:	6013      	str	r3, [r2, #0]
 800af22:	e00b      	b.n	800af3c <HAL_RCC_OscConfig+0xd4>
 800af24:	4b6b      	ldr	r3, [pc, #428]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a6a      	ldr	r2, [pc, #424]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	4b68      	ldr	r3, [pc, #416]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a67      	ldr	r2, [pc, #412]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d013      	beq.n	800af6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af44:	f7fc fba8 	bl	8007698 <HAL_GetTick>
 800af48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af4a:	e008      	b.n	800af5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af4c:	f7fc fba4 	bl	8007698 <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	2b64      	cmp	r3, #100	; 0x64
 800af58:	d901      	bls.n	800af5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800af5a:	2303      	movs	r3, #3
 800af5c:	e1fa      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af5e:	4b5d      	ldr	r3, [pc, #372]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af66:	2b00      	cmp	r3, #0
 800af68:	d0f0      	beq.n	800af4c <HAL_RCC_OscConfig+0xe4>
 800af6a:	e014      	b.n	800af96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af6c:	f7fc fb94 	bl	8007698 <HAL_GetTick>
 800af70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af72:	e008      	b.n	800af86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af74:	f7fc fb90 	bl	8007698 <HAL_GetTick>
 800af78:	4602      	mov	r2, r0
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	2b64      	cmp	r3, #100	; 0x64
 800af80:	d901      	bls.n	800af86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e1e6      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af86:	4b53      	ldr	r3, [pc, #332]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1f0      	bne.n	800af74 <HAL_RCC_OscConfig+0x10c>
 800af92:	e000      	b.n	800af96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d063      	beq.n	800b06a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800afa2:	4b4c      	ldr	r3, [pc, #304]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f003 030c 	and.w	r3, r3, #12
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00b      	beq.n	800afc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800afae:	4b49      	ldr	r3, [pc, #292]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	f003 030c 	and.w	r3, r3, #12
 800afb6:	2b08      	cmp	r3, #8
 800afb8:	d11c      	bne.n	800aff4 <HAL_RCC_OscConfig+0x18c>
 800afba:	4b46      	ldr	r3, [pc, #280]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d116      	bne.n	800aff4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800afc6:	4b43      	ldr	r3, [pc, #268]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0302 	and.w	r3, r3, #2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d005      	beq.n	800afde <HAL_RCC_OscConfig+0x176>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d001      	beq.n	800afde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e1ba      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afde:	4b3d      	ldr	r3, [pc, #244]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	4939      	ldr	r1, [pc, #228]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aff2:	e03a      	b.n	800b06a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d020      	beq.n	800b03e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800affc:	4b36      	ldr	r3, [pc, #216]	; (800b0d8 <HAL_RCC_OscConfig+0x270>)
 800affe:	2201      	movs	r2, #1
 800b000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b002:	f7fc fb49 	bl	8007698 <HAL_GetTick>
 800b006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b008:	e008      	b.n	800b01c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b00a:	f7fc fb45 	bl	8007698 <HAL_GetTick>
 800b00e:	4602      	mov	r2, r0
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	2b02      	cmp	r3, #2
 800b016:	d901      	bls.n	800b01c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e19b      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b01c:	4b2d      	ldr	r3, [pc, #180]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0f0      	beq.n	800b00a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b028:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	00db      	lsls	r3, r3, #3
 800b036:	4927      	ldr	r1, [pc, #156]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800b038:	4313      	orrs	r3, r2
 800b03a:	600b      	str	r3, [r1, #0]
 800b03c:	e015      	b.n	800b06a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b03e:	4b26      	ldr	r3, [pc, #152]	; (800b0d8 <HAL_RCC_OscConfig+0x270>)
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b044:	f7fc fb28 	bl	8007698 <HAL_GetTick>
 800b048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b04a:	e008      	b.n	800b05e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b04c:	f7fc fb24 	bl	8007698 <HAL_GetTick>
 800b050:	4602      	mov	r2, r0
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	2b02      	cmp	r3, #2
 800b058:	d901      	bls.n	800b05e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e17a      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b05e:	4b1d      	ldr	r3, [pc, #116]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0302 	and.w	r3, r3, #2
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f0      	bne.n	800b04c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0308 	and.w	r3, r3, #8
 800b072:	2b00      	cmp	r3, #0
 800b074:	d03a      	beq.n	800b0ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d019      	beq.n	800b0b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b07e:	4b17      	ldr	r3, [pc, #92]	; (800b0dc <HAL_RCC_OscConfig+0x274>)
 800b080:	2201      	movs	r2, #1
 800b082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b084:	f7fc fb08 	bl	8007698 <HAL_GetTick>
 800b088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b08c:	f7fc fb04 	bl	8007698 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e15a      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b09e:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <HAL_RCC_OscConfig+0x26c>)
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d0f0      	beq.n	800b08c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b0aa:	2001      	movs	r0, #1
 800b0ac:	f000 fac4 	bl	800b638 <RCC_Delay>
 800b0b0:	e01c      	b.n	800b0ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0b2:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <HAL_RCC_OscConfig+0x274>)
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0b8:	f7fc faee 	bl	8007698 <HAL_GetTick>
 800b0bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0be:	e00f      	b.n	800b0e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0c0:	f7fc faea 	bl	8007698 <HAL_GetTick>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d908      	bls.n	800b0e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e140      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
 800b0d2:	bf00      	nop
 800b0d4:	40021000 	.word	0x40021000
 800b0d8:	42420000 	.word	0x42420000
 800b0dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0e0:	4b9e      	ldr	r3, [pc, #632]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	f003 0302 	and.w	r3, r3, #2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e9      	bne.n	800b0c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0304 	and.w	r3, r3, #4
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 80a6 	beq.w	800b246 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0fe:	4b97      	ldr	r3, [pc, #604]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10d      	bne.n	800b126 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b10a:	4b94      	ldr	r3, [pc, #592]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	4a93      	ldr	r2, [pc, #588]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b114:	61d3      	str	r3, [r2, #28]
 800b116:	4b91      	ldr	r3, [pc, #580]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b11e:	60bb      	str	r3, [r7, #8]
 800b120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b122:	2301      	movs	r3, #1
 800b124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b126:	4b8e      	ldr	r3, [pc, #568]	; (800b360 <HAL_RCC_OscConfig+0x4f8>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d118      	bne.n	800b164 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b132:	4b8b      	ldr	r3, [pc, #556]	; (800b360 <HAL_RCC_OscConfig+0x4f8>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a8a      	ldr	r2, [pc, #552]	; (800b360 <HAL_RCC_OscConfig+0x4f8>)
 800b138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b13c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b13e:	f7fc faab 	bl	8007698 <HAL_GetTick>
 800b142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b144:	e008      	b.n	800b158 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b146:	f7fc faa7 	bl	8007698 <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	2b64      	cmp	r3, #100	; 0x64
 800b152:	d901      	bls.n	800b158 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e0fd      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b158:	4b81      	ldr	r3, [pc, #516]	; (800b360 <HAL_RCC_OscConfig+0x4f8>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0f0      	beq.n	800b146 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d106      	bne.n	800b17a <HAL_RCC_OscConfig+0x312>
 800b16c:	4b7b      	ldr	r3, [pc, #492]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	4a7a      	ldr	r2, [pc, #488]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b172:	f043 0301 	orr.w	r3, r3, #1
 800b176:	6213      	str	r3, [r2, #32]
 800b178:	e02d      	b.n	800b1d6 <HAL_RCC_OscConfig+0x36e>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10c      	bne.n	800b19c <HAL_RCC_OscConfig+0x334>
 800b182:	4b76      	ldr	r3, [pc, #472]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	4a75      	ldr	r2, [pc, #468]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b188:	f023 0301 	bic.w	r3, r3, #1
 800b18c:	6213      	str	r3, [r2, #32]
 800b18e:	4b73      	ldr	r3, [pc, #460]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	4a72      	ldr	r2, [pc, #456]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b194:	f023 0304 	bic.w	r3, r3, #4
 800b198:	6213      	str	r3, [r2, #32]
 800b19a:	e01c      	b.n	800b1d6 <HAL_RCC_OscConfig+0x36e>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b05      	cmp	r3, #5
 800b1a2:	d10c      	bne.n	800b1be <HAL_RCC_OscConfig+0x356>
 800b1a4:	4b6d      	ldr	r3, [pc, #436]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1a6:	6a1b      	ldr	r3, [r3, #32]
 800b1a8:	4a6c      	ldr	r2, [pc, #432]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1aa:	f043 0304 	orr.w	r3, r3, #4
 800b1ae:	6213      	str	r3, [r2, #32]
 800b1b0:	4b6a      	ldr	r3, [pc, #424]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	4a69      	ldr	r2, [pc, #420]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	6213      	str	r3, [r2, #32]
 800b1bc:	e00b      	b.n	800b1d6 <HAL_RCC_OscConfig+0x36e>
 800b1be:	4b67      	ldr	r3, [pc, #412]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	4a66      	ldr	r2, [pc, #408]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1c4:	f023 0301 	bic.w	r3, r3, #1
 800b1c8:	6213      	str	r3, [r2, #32]
 800b1ca:	4b64      	ldr	r3, [pc, #400]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	4a63      	ldr	r2, [pc, #396]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1d0:	f023 0304 	bic.w	r3, r3, #4
 800b1d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d015      	beq.n	800b20a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1de:	f7fc fa5b 	bl	8007698 <HAL_GetTick>
 800b1e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1e4:	e00a      	b.n	800b1fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1e6:	f7fc fa57 	bl	8007698 <HAL_GetTick>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d901      	bls.n	800b1fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e0ab      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1fc:	4b57      	ldr	r3, [pc, #348]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b1fe:	6a1b      	ldr	r3, [r3, #32]
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d0ee      	beq.n	800b1e6 <HAL_RCC_OscConfig+0x37e>
 800b208:	e014      	b.n	800b234 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b20a:	f7fc fa45 	bl	8007698 <HAL_GetTick>
 800b20e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b210:	e00a      	b.n	800b228 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b212:	f7fc fa41 	bl	8007698 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b220:	4293      	cmp	r3, r2
 800b222:	d901      	bls.n	800b228 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b224:	2303      	movs	r3, #3
 800b226:	e095      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b228:	4b4c      	ldr	r3, [pc, #304]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b22a:	6a1b      	ldr	r3, [r3, #32]
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1ee      	bne.n	800b212 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b234:	7dfb      	ldrb	r3, [r7, #23]
 800b236:	2b01      	cmp	r3, #1
 800b238:	d105      	bne.n	800b246 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b23a:	4b48      	ldr	r3, [pc, #288]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	4a47      	ldr	r2, [pc, #284]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b244:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f000 8081 	beq.w	800b352 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b250:	4b42      	ldr	r3, [pc, #264]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f003 030c 	and.w	r3, r3, #12
 800b258:	2b08      	cmp	r3, #8
 800b25a:	d061      	beq.n	800b320 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	2b02      	cmp	r3, #2
 800b262:	d146      	bne.n	800b2f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b264:	4b3f      	ldr	r3, [pc, #252]	; (800b364 <HAL_RCC_OscConfig+0x4fc>)
 800b266:	2200      	movs	r2, #0
 800b268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b26a:	f7fc fa15 	bl	8007698 <HAL_GetTick>
 800b26e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b270:	e008      	b.n	800b284 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b272:	f7fc fa11 	bl	8007698 <HAL_GetTick>
 800b276:	4602      	mov	r2, r0
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d901      	bls.n	800b284 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b280:	2303      	movs	r3, #3
 800b282:	e067      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b284:	4b35      	ldr	r3, [pc, #212]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1f0      	bne.n	800b272 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6a1b      	ldr	r3, [r3, #32]
 800b294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b298:	d108      	bne.n	800b2ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b29a:	4b30      	ldr	r3, [pc, #192]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	492d      	ldr	r1, [pc, #180]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b2ac:	4b2b      	ldr	r3, [pc, #172]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a19      	ldr	r1, [r3, #32]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	430b      	orrs	r3, r1
 800b2be:	4927      	ldr	r1, [pc, #156]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b2c4:	4b27      	ldr	r3, [pc, #156]	; (800b364 <HAL_RCC_OscConfig+0x4fc>)
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2ca:	f7fc f9e5 	bl	8007698 <HAL_GetTick>
 800b2ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b2d0:	e008      	b.n	800b2e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2d2:	f7fc f9e1 	bl	8007698 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d901      	bls.n	800b2e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e037      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b2e4:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0f0      	beq.n	800b2d2 <HAL_RCC_OscConfig+0x46a>
 800b2f0:	e02f      	b.n	800b352 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2f2:	4b1c      	ldr	r3, [pc, #112]	; (800b364 <HAL_RCC_OscConfig+0x4fc>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2f8:	f7fc f9ce 	bl	8007698 <HAL_GetTick>
 800b2fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b2fe:	e008      	b.n	800b312 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b300:	f7fc f9ca 	bl	8007698 <HAL_GetTick>
 800b304:	4602      	mov	r2, r0
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d901      	bls.n	800b312 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e020      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1f0      	bne.n	800b300 <HAL_RCC_OscConfig+0x498>
 800b31e:	e018      	b.n	800b352 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	69db      	ldr	r3, [r3, #28]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d101      	bne.n	800b32c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	e013      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b32c:	4b0b      	ldr	r3, [pc, #44]	; (800b35c <HAL_RCC_OscConfig+0x4f4>)
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a1b      	ldr	r3, [r3, #32]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d106      	bne.n	800b34e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d001      	beq.n	800b352 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800b34e:	2301      	movs	r3, #1
 800b350:	e000      	b.n	800b354 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	40021000 	.word	0x40021000
 800b360:	40007000 	.word	0x40007000
 800b364:	42420060 	.word	0x42420060

0800b368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d101      	bne.n	800b37c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	e0d0      	b.n	800b51e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b37c:	4b6a      	ldr	r3, [pc, #424]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f003 0307 	and.w	r3, r3, #7
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	429a      	cmp	r2, r3
 800b388:	d910      	bls.n	800b3ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b38a:	4b67      	ldr	r3, [pc, #412]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f023 0207 	bic.w	r2, r3, #7
 800b392:	4965      	ldr	r1, [pc, #404]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	4313      	orrs	r3, r2
 800b398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b39a:	4b63      	ldr	r3, [pc, #396]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d001      	beq.n	800b3ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e0b8      	b.n	800b51e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d020      	beq.n	800b3fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0304 	and.w	r3, r3, #4
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d005      	beq.n	800b3d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3c4:	4b59      	ldr	r3, [pc, #356]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	4a58      	ldr	r2, [pc, #352]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b3ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f003 0308 	and.w	r3, r3, #8
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b3dc:	4b53      	ldr	r3, [pc, #332]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	4a52      	ldr	r2, [pc, #328]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b3e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b3e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3e8:	4b50      	ldr	r3, [pc, #320]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	494d      	ldr	r1, [pc, #308]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d040      	beq.n	800b488 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d107      	bne.n	800b41e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b40e:	4b47      	ldr	r3, [pc, #284]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d115      	bne.n	800b446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e07f      	b.n	800b51e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	2b02      	cmp	r3, #2
 800b424:	d107      	bne.n	800b436 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b426:	4b41      	ldr	r3, [pc, #260]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d109      	bne.n	800b446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e073      	b.n	800b51e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b436:	4b3d      	ldr	r3, [pc, #244]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d101      	bne.n	800b446 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
 800b444:	e06b      	b.n	800b51e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b446:	4b39      	ldr	r3, [pc, #228]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f023 0203 	bic.w	r2, r3, #3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	4936      	ldr	r1, [pc, #216]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b454:	4313      	orrs	r3, r2
 800b456:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b458:	f7fc f91e 	bl	8007698 <HAL_GetTick>
 800b45c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b45e:	e00a      	b.n	800b476 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b460:	f7fc f91a 	bl	8007698 <HAL_GetTick>
 800b464:	4602      	mov	r2, r0
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b46e:	4293      	cmp	r3, r2
 800b470:	d901      	bls.n	800b476 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e053      	b.n	800b51e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b476:	4b2d      	ldr	r3, [pc, #180]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f003 020c 	and.w	r2, r3, #12
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	429a      	cmp	r2, r3
 800b486:	d1eb      	bne.n	800b460 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b488:	4b27      	ldr	r3, [pc, #156]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0307 	and.w	r3, r3, #7
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	429a      	cmp	r2, r3
 800b494:	d210      	bcs.n	800b4b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b496:	4b24      	ldr	r3, [pc, #144]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f023 0207 	bic.w	r2, r3, #7
 800b49e:	4922      	ldr	r1, [pc, #136]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4a6:	4b20      	ldr	r3, [pc, #128]	; (800b528 <HAL_RCC_ClockConfig+0x1c0>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0307 	and.w	r3, r3, #7
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d001      	beq.n	800b4b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e032      	b.n	800b51e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d008      	beq.n	800b4d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b4c4:	4b19      	ldr	r3, [pc, #100]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	4916      	ldr	r1, [pc, #88]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0308 	and.w	r3, r3, #8
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d009      	beq.n	800b4f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b4e2:	4b12      	ldr	r3, [pc, #72]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	490e      	ldr	r1, [pc, #56]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b4f6:	f000 f821 	bl	800b53c <HAL_RCC_GetSysClockFreq>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <HAL_RCC_ClockConfig+0x1c4>)
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	091b      	lsrs	r3, r3, #4
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	490a      	ldr	r1, [pc, #40]	; (800b530 <HAL_RCC_ClockConfig+0x1c8>)
 800b508:	5ccb      	ldrb	r3, [r1, r3]
 800b50a:	fa22 f303 	lsr.w	r3, r2, r3
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <HAL_RCC_ClockConfig+0x1cc>)
 800b510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b512:	4b09      	ldr	r3, [pc, #36]	; (800b538 <HAL_RCC_ClockConfig+0x1d0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	f7fc f87c 	bl	8007614 <HAL_InitTick>

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	40022000 	.word	0x40022000
 800b52c:	40021000 	.word	0x40021000
 800b530:	08011a5c 	.word	0x08011a5c
 800b534:	20000040 	.word	0x20000040
 800b538:	20000044 	.word	0x20000044

0800b53c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b53c:	b490      	push	{r4, r7}
 800b53e:	b08a      	sub	sp, #40	; 0x28
 800b540:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800b542:	4b2a      	ldr	r3, [pc, #168]	; (800b5ec <HAL_RCC_GetSysClockFreq+0xb0>)
 800b544:	1d3c      	adds	r4, r7, #4
 800b546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800b54c:	f240 2301 	movw	r3, #513	; 0x201
 800b550:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	61fb      	str	r3, [r7, #28]
 800b556:	2300      	movs	r3, #0
 800b558:	61bb      	str	r3, [r7, #24]
 800b55a:	2300      	movs	r3, #0
 800b55c:	627b      	str	r3, [r7, #36]	; 0x24
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800b562:	2300      	movs	r3, #0
 800b564:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b566:	4b22      	ldr	r3, [pc, #136]	; (800b5f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	f003 030c 	and.w	r3, r3, #12
 800b572:	2b04      	cmp	r3, #4
 800b574:	d002      	beq.n	800b57c <HAL_RCC_GetSysClockFreq+0x40>
 800b576:	2b08      	cmp	r3, #8
 800b578:	d003      	beq.n	800b582 <HAL_RCC_GetSysClockFreq+0x46>
 800b57a:	e02d      	b.n	800b5d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b57c:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b57e:	623b      	str	r3, [r7, #32]
      break;
 800b580:	e02d      	b.n	800b5de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	0c9b      	lsrs	r3, r3, #18
 800b586:	f003 030f 	and.w	r3, r3, #15
 800b58a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b58e:	4413      	add	r3, r2
 800b590:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800b594:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d013      	beq.n	800b5c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b5a0:	4b13      	ldr	r3, [pc, #76]	; (800b5f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	0c5b      	lsrs	r3, r3, #17
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800b5b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	4a0e      	ldr	r2, [pc, #56]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5ba:	fb02 f203 	mul.w	r2, r2, r3
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b5c6:	e004      	b.n	800b5d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	4a0b      	ldr	r2, [pc, #44]	; (800b5f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b5cc:	fb02 f303 	mul.w	r3, r2, r3
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800b5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d4:	623b      	str	r3, [r7, #32]
      break;
 800b5d6:	e002      	b.n	800b5de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b5d8:	4b06      	ldr	r3, [pc, #24]	; (800b5f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b5da:	623b      	str	r3, [r7, #32]
      break;
 800b5dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5de:	6a3b      	ldr	r3, [r7, #32]
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3728      	adds	r7, #40	; 0x28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bc90      	pop	{r4, r7}
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	08010ee0 	.word	0x08010ee0
 800b5f0:	40021000 	.word	0x40021000
 800b5f4:	007a1200 	.word	0x007a1200
 800b5f8:	003d0900 	.word	0x003d0900

0800b5fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b600:	4b02      	ldr	r3, [pc, #8]	; (800b60c <HAL_RCC_GetHCLKFreq+0x10>)
 800b602:	681b      	ldr	r3, [r3, #0]
}
 800b604:	4618      	mov	r0, r3
 800b606:	46bd      	mov	sp, r7
 800b608:	bc80      	pop	{r7}
 800b60a:	4770      	bx	lr
 800b60c:	20000040 	.word	0x20000040

0800b610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b614:	f7ff fff2 	bl	800b5fc <HAL_RCC_GetHCLKFreq>
 800b618:	4602      	mov	r2, r0
 800b61a:	4b05      	ldr	r3, [pc, #20]	; (800b630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	0a1b      	lsrs	r3, r3, #8
 800b620:	f003 0307 	and.w	r3, r3, #7
 800b624:	4903      	ldr	r1, [pc, #12]	; (800b634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b626:	5ccb      	ldrb	r3, [r1, r3]
 800b628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	40021000 	.word	0x40021000
 800b634:	08011a6c 	.word	0x08011a6c

0800b638 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b640:	4b0a      	ldr	r3, [pc, #40]	; (800b66c <RCC_Delay+0x34>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a0a      	ldr	r2, [pc, #40]	; (800b670 <RCC_Delay+0x38>)
 800b646:	fba2 2303 	umull	r2, r3, r2, r3
 800b64a:	0a5b      	lsrs	r3, r3, #9
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	fb02 f303 	mul.w	r3, r2, r3
 800b652:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b654:	bf00      	nop
  }
  while (Delay --);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	1e5a      	subs	r2, r3, #1
 800b65a:	60fa      	str	r2, [r7, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f9      	bne.n	800b654 <RCC_Delay+0x1c>
}
 800b660:	bf00      	nop
 800b662:	bf00      	nop
 800b664:	3714      	adds	r7, #20
 800b666:	46bd      	mov	sp, r7
 800b668:	bc80      	pop	{r7}
 800b66a:	4770      	bx	lr
 800b66c:	20000040 	.word	0x20000040
 800b670:	10624dd3 	.word	0x10624dd3

0800b674 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800b67c:	2300      	movs	r3, #0
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d07d      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800b690:	2300      	movs	r3, #0
 800b692:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b694:	4b4f      	ldr	r3, [pc, #316]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b696:	69db      	ldr	r3, [r3, #28]
 800b698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10d      	bne.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6a0:	4b4c      	ldr	r3, [pc, #304]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6a2:	69db      	ldr	r3, [r3, #28]
 800b6a4:	4a4b      	ldr	r2, [pc, #300]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6aa:	61d3      	str	r3, [r2, #28]
 800b6ac:	4b49      	ldr	r3, [pc, #292]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6ae:	69db      	ldr	r3, [r3, #28]
 800b6b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6b4:	60bb      	str	r3, [r7, #8]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6bc:	4b46      	ldr	r3, [pc, #280]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d118      	bne.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b6c8:	4b43      	ldr	r3, [pc, #268]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a42      	ldr	r2, [pc, #264]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b6ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6d4:	f7fb ffe0 	bl	8007698 <HAL_GetTick>
 800b6d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6da:	e008      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6dc:	f7fb ffdc 	bl	8007698 <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	2b64      	cmp	r3, #100	; 0x64
 800b6e8:	d901      	bls.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e06d      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6ee:	4b3a      	ldr	r3, [pc, #232]	; (800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d0f0      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6fa:	4b36      	ldr	r3, [pc, #216]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b702:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d02e      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	429a      	cmp	r2, r3
 800b716:	d027      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b718:	4b2e      	ldr	r3, [pc, #184]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b722:	4b2e      	ldr	r3, [pc, #184]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b724:	2201      	movs	r2, #1
 800b726:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b728:	4b2c      	ldr	r3, [pc, #176]	; (800b7dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b72e:	4a29      	ldr	r2, [pc, #164]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d014      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b73e:	f7fb ffab 	bl	8007698 <HAL_GetTick>
 800b742:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b744:	e00a      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b746:	f7fb ffa7 	bl	8007698 <HAL_GetTick>
 800b74a:	4602      	mov	r2, r0
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	f241 3288 	movw	r2, #5000	; 0x1388
 800b754:	4293      	cmp	r3, r2
 800b756:	d901      	bls.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e036      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b75c:	4b1d      	ldr	r3, [pc, #116]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	f003 0302 	and.w	r3, r3, #2
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0ee      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b768:	4b1a      	ldr	r3, [pc, #104]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	4917      	ldr	r1, [pc, #92]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b776:	4313      	orrs	r3, r2
 800b778:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b77a:	7dfb      	ldrb	r3, [r7, #23]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d105      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b780:	4b14      	ldr	r3, [pc, #80]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	4a13      	ldr	r2, [pc, #76]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b78a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 0302 	and.w	r3, r3, #2
 800b794:	2b00      	cmp	r3, #0
 800b796:	d008      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b798:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	490b      	ldr	r1, [pc, #44]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 0310 	and.w	r3, r3, #16
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d008      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7b6:	4b07      	ldr	r3, [pc, #28]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	4904      	ldr	r1, [pc, #16]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	40021000 	.word	0x40021000
 800b7d8:	40007000 	.word	0x40007000
 800b7dc:	42420440 	.word	0x42420440

0800b7e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e041      	b.n	800b876 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7fb fe88 	bl	800751c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681a      	ldr	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3304      	adds	r3, #4
 800b81c:	4619      	mov	r1, r3
 800b81e:	4610      	mov	r0, r2
 800b820:	f000 fa96 	bl	800bd50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b01      	cmp	r3, #1
 800b892:	d001      	beq.n	800b898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e04e      	b.n	800b936 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68da      	ldr	r2, [r3, #12]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f042 0201 	orr.w	r2, r2, #1
 800b8ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a22      	ldr	r2, [pc, #136]	; (800b940 <HAL_TIM_Base_Start_IT+0xc0>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d022      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x80>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a21      	ldr	r2, [pc, #132]	; (800b944 <HAL_TIM_Base_Start_IT+0xc4>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d01d      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x80>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8cc:	d018      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x80>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a1d      	ldr	r2, [pc, #116]	; (800b948 <HAL_TIM_Base_Start_IT+0xc8>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d013      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x80>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a1b      	ldr	r2, [pc, #108]	; (800b94c <HAL_TIM_Base_Start_IT+0xcc>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d00e      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x80>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a1a      	ldr	r2, [pc, #104]	; (800b950 <HAL_TIM_Base_Start_IT+0xd0>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d009      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x80>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a18      	ldr	r2, [pc, #96]	; (800b954 <HAL_TIM_Base_Start_IT+0xd4>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d004      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x80>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a17      	ldr	r2, [pc, #92]	; (800b958 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d111      	bne.n	800b924 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f003 0307 	and.w	r3, r3, #7
 800b90a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b06      	cmp	r3, #6
 800b910:	d010      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f042 0201 	orr.w	r2, r2, #1
 800b920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b922:	e007      	b.n	800b934 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bc80      	pop	{r7}
 800b93e:	4770      	bx	lr
 800b940:	40012c00 	.word	0x40012c00
 800b944:	40013400 	.word	0x40013400
 800b948:	40000400 	.word	0x40000400
 800b94c:	40000800 	.word	0x40000800
 800b950:	40000c00 	.word	0x40000c00
 800b954:	40014c00 	.word	0x40014c00
 800b958:	40001800 	.word	0x40001800

0800b95c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	f003 0302 	and.w	r3, r3, #2
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d122      	bne.n	800b9b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d11b      	bne.n	800b9b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f06f 0202 	mvn.w	r2, #2
 800b988:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	f003 0303 	and.w	r3, r3, #3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f9ba 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800b9a4:	e005      	b.n	800b9b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f9ad 	bl	800bd06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f9bc 	bl	800bd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	f003 0304 	and.w	r3, r3, #4
 800b9c2:	2b04      	cmp	r3, #4
 800b9c4:	d122      	bne.n	800ba0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f003 0304 	and.w	r3, r3, #4
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	d11b      	bne.n	800ba0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f06f 0204 	mvn.w	r2, #4
 800b9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f990 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800b9f8:	e005      	b.n	800ba06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f983 	bl	800bd06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f992 	bl	800bd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	f003 0308 	and.w	r3, r3, #8
 800ba16:	2b08      	cmp	r3, #8
 800ba18:	d122      	bne.n	800ba60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f003 0308 	and.w	r3, r3, #8
 800ba24:	2b08      	cmp	r3, #8
 800ba26:	d11b      	bne.n	800ba60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f06f 0208 	mvn.w	r2, #8
 800ba30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2204      	movs	r2, #4
 800ba36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	f003 0303 	and.w	r3, r3, #3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f966 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800ba4c:	e005      	b.n	800ba5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f959 	bl	800bd06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f968 	bl	800bd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	f003 0310 	and.w	r3, r3, #16
 800ba6a:	2b10      	cmp	r3, #16
 800ba6c:	d122      	bne.n	800bab4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	f003 0310 	and.w	r3, r3, #16
 800ba78:	2b10      	cmp	r3, #16
 800ba7a:	d11b      	bne.n	800bab4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f06f 0210 	mvn.w	r2, #16
 800ba84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2208      	movs	r2, #8
 800ba8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d003      	beq.n	800baa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 f93c 	bl	800bd18 <HAL_TIM_IC_CaptureCallback>
 800baa0:	e005      	b.n	800baae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f92f 	bl	800bd06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f93e 	bl	800bd2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d10e      	bne.n	800bae0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d107      	bne.n	800bae0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f06f 0201 	mvn.w	r2, #1
 800bad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f90a 	bl	800bcf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baea:	2b80      	cmp	r3, #128	; 0x80
 800baec:	d10e      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf8:	2b80      	cmp	r3, #128	; 0x80
 800bafa:	d107      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fad9 	bl	800c0be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d10e      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb24:	2b40      	cmp	r3, #64	; 0x40
 800bb26:	d107      	bne.n	800bb38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f902 	bl	800bd3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	f003 0320 	and.w	r3, r3, #32
 800bb42:	2b20      	cmp	r3, #32
 800bb44:	d10e      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	f003 0320 	and.w	r3, r3, #32
 800bb50:	2b20      	cmp	r3, #32
 800bb52:	d107      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f06f 0220 	mvn.w	r2, #32
 800bb5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 faa4 	bl	800c0ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb64:	bf00      	nop
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_TIM_ConfigClockSource+0x18>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e0b3      	b.n	800bcec <HAL_TIM_ConfigClockSource+0x180>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbbc:	d03e      	beq.n	800bc3c <HAL_TIM_ConfigClockSource+0xd0>
 800bbbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbc2:	f200 8087 	bhi.w	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bbc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbca:	f000 8085 	beq.w	800bcd8 <HAL_TIM_ConfigClockSource+0x16c>
 800bbce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbd2:	d87f      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bbd4:	2b70      	cmp	r3, #112	; 0x70
 800bbd6:	d01a      	beq.n	800bc0e <HAL_TIM_ConfigClockSource+0xa2>
 800bbd8:	2b70      	cmp	r3, #112	; 0x70
 800bbda:	d87b      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bbdc:	2b60      	cmp	r3, #96	; 0x60
 800bbde:	d050      	beq.n	800bc82 <HAL_TIM_ConfigClockSource+0x116>
 800bbe0:	2b60      	cmp	r3, #96	; 0x60
 800bbe2:	d877      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bbe4:	2b50      	cmp	r3, #80	; 0x50
 800bbe6:	d03c      	beq.n	800bc62 <HAL_TIM_ConfigClockSource+0xf6>
 800bbe8:	2b50      	cmp	r3, #80	; 0x50
 800bbea:	d873      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bbec:	2b40      	cmp	r3, #64	; 0x40
 800bbee:	d058      	beq.n	800bca2 <HAL_TIM_ConfigClockSource+0x136>
 800bbf0:	2b40      	cmp	r3, #64	; 0x40
 800bbf2:	d86f      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bbf4:	2b30      	cmp	r3, #48	; 0x30
 800bbf6:	d064      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x156>
 800bbf8:	2b30      	cmp	r3, #48	; 0x30
 800bbfa:	d86b      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bbfc:	2b20      	cmp	r3, #32
 800bbfe:	d060      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x156>
 800bc00:	2b20      	cmp	r3, #32
 800bc02:	d867      	bhi.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d05c      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x156>
 800bc08:	2b10      	cmp	r3, #16
 800bc0a:	d05a      	beq.n	800bcc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bc0c:	e062      	b.n	800bcd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6818      	ldr	r0, [r3, #0]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6899      	ldr	r1, [r3, #8]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	685a      	ldr	r2, [r3, #4]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	f000 f9ac 	bl	800bf7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	609a      	str	r2, [r3, #8]
      break;
 800bc3a:	e04e      	b.n	800bcda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	6899      	ldr	r1, [r3, #8]
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	f000 f995 	bl	800bf7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	689a      	ldr	r2, [r3, #8]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc5e:	609a      	str	r2, [r3, #8]
      break;
 800bc60:	e03b      	b.n	800bcda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	6859      	ldr	r1, [r3, #4]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	f000 f90c 	bl	800be8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2150      	movs	r1, #80	; 0x50
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 f963 	bl	800bf46 <TIM_ITRx_SetConfig>
      break;
 800bc80:	e02b      	b.n	800bcda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	6859      	ldr	r1, [r3, #4]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f000 f92a 	bl	800bee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2160      	movs	r1, #96	; 0x60
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 f953 	bl	800bf46 <TIM_ITRx_SetConfig>
      break;
 800bca0:	e01b      	b.n	800bcda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6818      	ldr	r0, [r3, #0]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	6859      	ldr	r1, [r3, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	461a      	mov	r2, r3
 800bcb0:	f000 f8ec 	bl	800be8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2140      	movs	r1, #64	; 0x40
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 f943 	bl	800bf46 <TIM_ITRx_SetConfig>
      break;
 800bcc0:	e00b      	b.n	800bcda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4619      	mov	r1, r3
 800bccc:	4610      	mov	r0, r2
 800bcce:	f000 f93a 	bl	800bf46 <TIM_ITRx_SetConfig>
        break;
 800bcd2:	e002      	b.n	800bcda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bcd4:	bf00      	nop
 800bcd6:	e000      	b.n	800bcda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bcd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcea:	2300      	movs	r3, #0
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bc80      	pop	{r7}
 800bd04:	4770      	bx	lr

0800bd06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bc80      	pop	{r7}
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bc80      	pop	{r7}
 800bd28:	4770      	bx	lr

0800bd2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd32:	bf00      	nop
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bc80      	pop	{r7}
 800bd3a:	4770      	bx	lr

0800bd3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bc80      	pop	{r7}
 800bd4c:	4770      	bx	lr
	...

0800bd50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b085      	sub	sp, #20
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a3f      	ldr	r2, [pc, #252]	; (800be60 <TIM_Base_SetConfig+0x110>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d013      	beq.n	800bd90 <TIM_Base_SetConfig+0x40>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a3e      	ldr	r2, [pc, #248]	; (800be64 <TIM_Base_SetConfig+0x114>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d00f      	beq.n	800bd90 <TIM_Base_SetConfig+0x40>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd76:	d00b      	beq.n	800bd90 <TIM_Base_SetConfig+0x40>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a3b      	ldr	r2, [pc, #236]	; (800be68 <TIM_Base_SetConfig+0x118>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d007      	beq.n	800bd90 <TIM_Base_SetConfig+0x40>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a3a      	ldr	r2, [pc, #232]	; (800be6c <TIM_Base_SetConfig+0x11c>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d003      	beq.n	800bd90 <TIM_Base_SetConfig+0x40>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a39      	ldr	r2, [pc, #228]	; (800be70 <TIM_Base_SetConfig+0x120>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d108      	bne.n	800bda2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4a2e      	ldr	r2, [pc, #184]	; (800be60 <TIM_Base_SetConfig+0x110>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d02b      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4a2d      	ldr	r2, [pc, #180]	; (800be64 <TIM_Base_SetConfig+0x114>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d027      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdb8:	d023      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a2a      	ldr	r2, [pc, #168]	; (800be68 <TIM_Base_SetConfig+0x118>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d01f      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4a29      	ldr	r2, [pc, #164]	; (800be6c <TIM_Base_SetConfig+0x11c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d01b      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a28      	ldr	r2, [pc, #160]	; (800be70 <TIM_Base_SetConfig+0x120>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d017      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	4a27      	ldr	r2, [pc, #156]	; (800be74 <TIM_Base_SetConfig+0x124>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d013      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a26      	ldr	r2, [pc, #152]	; (800be78 <TIM_Base_SetConfig+0x128>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d00f      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a25      	ldr	r2, [pc, #148]	; (800be7c <TIM_Base_SetConfig+0x12c>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d00b      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4a24      	ldr	r2, [pc, #144]	; (800be80 <TIM_Base_SetConfig+0x130>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d007      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4a23      	ldr	r2, [pc, #140]	; (800be84 <TIM_Base_SetConfig+0x134>)
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	d003      	beq.n	800be02 <TIM_Base_SetConfig+0xb2>
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4a22      	ldr	r2, [pc, #136]	; (800be88 <TIM_Base_SetConfig+0x138>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d108      	bne.n	800be14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	4313      	orrs	r3, r2
 800be12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	695b      	ldr	r3, [r3, #20]
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a09      	ldr	r2, [pc, #36]	; (800be60 <TIM_Base_SetConfig+0x110>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d003      	beq.n	800be48 <TIM_Base_SetConfig+0xf8>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a08      	ldr	r2, [pc, #32]	; (800be64 <TIM_Base_SetConfig+0x114>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d103      	bne.n	800be50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	691a      	ldr	r2, [r3, #16]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	615a      	str	r2, [r3, #20]
}
 800be56:	bf00      	nop
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bc80      	pop	{r7}
 800be5e:	4770      	bx	lr
 800be60:	40012c00 	.word	0x40012c00
 800be64:	40013400 	.word	0x40013400
 800be68:	40000400 	.word	0x40000400
 800be6c:	40000800 	.word	0x40000800
 800be70:	40000c00 	.word	0x40000c00
 800be74:	40014c00 	.word	0x40014c00
 800be78:	40015000 	.word	0x40015000
 800be7c:	40015400 	.word	0x40015400
 800be80:	40001800 	.word	0x40001800
 800be84:	40001c00 	.word	0x40001c00
 800be88:	40002000 	.word	0x40002000

0800be8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b087      	sub	sp, #28
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6a1b      	ldr	r3, [r3, #32]
 800be9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	f023 0201 	bic.w	r2, r3, #1
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800beb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	011b      	lsls	r3, r3, #4
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f023 030a 	bic.w	r3, r3, #10
 800bec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	4313      	orrs	r3, r2
 800bed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	621a      	str	r2, [r3, #32]
}
 800bede:	bf00      	nop
 800bee0:	371c      	adds	r7, #28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bc80      	pop	{r7}
 800bee6:	4770      	bx	lr

0800bee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6a1b      	ldr	r3, [r3, #32]
 800bef8:	f023 0210 	bic.w	r2, r3, #16
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6a1b      	ldr	r3, [r3, #32]
 800bf0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	031b      	lsls	r3, r3, #12
 800bf18:	697a      	ldr	r2, [r7, #20]
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bf24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	011b      	lsls	r3, r3, #4
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	697a      	ldr	r2, [r7, #20]
 800bf34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	621a      	str	r2, [r3, #32]
}
 800bf3c:	bf00      	nop
 800bf3e:	371c      	adds	r7, #28
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bc80      	pop	{r7}
 800bf44:	4770      	bx	lr

0800bf46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b085      	sub	sp, #20
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f043 0307 	orr.w	r3, r3, #7
 800bf68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	609a      	str	r2, [r3, #8]
}
 800bf70:	bf00      	nop
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bc80      	pop	{r7}
 800bf78:	4770      	bx	lr

0800bf7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b087      	sub	sp, #28
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	60f8      	str	r0, [r7, #12]
 800bf82:	60b9      	str	r1, [r7, #8]
 800bf84:	607a      	str	r2, [r7, #4]
 800bf86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	021a      	lsls	r2, r3, #8
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	609a      	str	r2, [r3, #8]
}
 800bfae:	bf00      	nop
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bc80      	pop	{r7}
 800bfb6:	4770      	bx	lr

0800bfb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b085      	sub	sp, #20
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d101      	bne.n	800bfd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfcc:	2302      	movs	r3, #2
 800bfce:	e05a      	b.n	800c086 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4a20      	ldr	r2, [pc, #128]	; (800c090 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d022      	beq.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a1e      	ldr	r2, [pc, #120]	; (800c094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	d01d      	beq.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c026:	d018      	beq.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a1a      	ldr	r2, [pc, #104]	; (800c098 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d013      	beq.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a19      	ldr	r2, [pc, #100]	; (800c09c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d00e      	beq.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a17      	ldr	r2, [pc, #92]	; (800c0a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d009      	beq.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a16      	ldr	r2, [pc, #88]	; (800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d004      	beq.n	800c05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a14      	ldr	r2, [pc, #80]	; (800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d10c      	bne.n	800c074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	4313      	orrs	r3, r2
 800c06a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	68ba      	ldr	r2, [r7, #8]
 800c072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bc80      	pop	{r7}
 800c08e:	4770      	bx	lr
 800c090:	40012c00 	.word	0x40012c00
 800c094:	40013400 	.word	0x40013400
 800c098:	40000400 	.word	0x40000400
 800c09c:	40000800 	.word	0x40000800
 800c0a0:	40000c00 	.word	0x40000c00
 800c0a4:	40014c00 	.word	0x40014c00
 800c0a8:	40001800 	.word	0x40001800

0800c0ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bc80      	pop	{r7}
 800c0bc:	4770      	bx	lr

0800c0be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bc80      	pop	{r7}
 800c0ce:	4770      	bx	lr

0800c0d0 <__errno>:
 800c0d0:	4b01      	ldr	r3, [pc, #4]	; (800c0d8 <__errno+0x8>)
 800c0d2:	6818      	ldr	r0, [r3, #0]
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	2000004c 	.word	0x2000004c

0800c0dc <__libc_init_array>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	2600      	movs	r6, #0
 800c0e0:	4d0c      	ldr	r5, [pc, #48]	; (800c114 <__libc_init_array+0x38>)
 800c0e2:	4c0d      	ldr	r4, [pc, #52]	; (800c118 <__libc_init_array+0x3c>)
 800c0e4:	1b64      	subs	r4, r4, r5
 800c0e6:	10a4      	asrs	r4, r4, #2
 800c0e8:	42a6      	cmp	r6, r4
 800c0ea:	d109      	bne.n	800c100 <__libc_init_array+0x24>
 800c0ec:	f004 fe7e 	bl	8010dec <_init>
 800c0f0:	2600      	movs	r6, #0
 800c0f2:	4d0a      	ldr	r5, [pc, #40]	; (800c11c <__libc_init_array+0x40>)
 800c0f4:	4c0a      	ldr	r4, [pc, #40]	; (800c120 <__libc_init_array+0x44>)
 800c0f6:	1b64      	subs	r4, r4, r5
 800c0f8:	10a4      	asrs	r4, r4, #2
 800c0fa:	42a6      	cmp	r6, r4
 800c0fc:	d105      	bne.n	800c10a <__libc_init_array+0x2e>
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}
 800c100:	f855 3b04 	ldr.w	r3, [r5], #4
 800c104:	4798      	blx	r3
 800c106:	3601      	adds	r6, #1
 800c108:	e7ee      	b.n	800c0e8 <__libc_init_array+0xc>
 800c10a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c10e:	4798      	blx	r3
 800c110:	3601      	adds	r6, #1
 800c112:	e7f2      	b.n	800c0fa <__libc_init_array+0x1e>
 800c114:	08011f4c 	.word	0x08011f4c
 800c118:	08011f4c 	.word	0x08011f4c
 800c11c:	08011f4c 	.word	0x08011f4c
 800c120:	08011f50 	.word	0x08011f50

0800c124 <__itoa>:
 800c124:	1e93      	subs	r3, r2, #2
 800c126:	2b22      	cmp	r3, #34	; 0x22
 800c128:	b510      	push	{r4, lr}
 800c12a:	460c      	mov	r4, r1
 800c12c:	d904      	bls.n	800c138 <__itoa+0x14>
 800c12e:	2300      	movs	r3, #0
 800c130:	461c      	mov	r4, r3
 800c132:	700b      	strb	r3, [r1, #0]
 800c134:	4620      	mov	r0, r4
 800c136:	bd10      	pop	{r4, pc}
 800c138:	2a0a      	cmp	r2, #10
 800c13a:	d109      	bne.n	800c150 <__itoa+0x2c>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	da07      	bge.n	800c150 <__itoa+0x2c>
 800c140:	232d      	movs	r3, #45	; 0x2d
 800c142:	700b      	strb	r3, [r1, #0]
 800c144:	2101      	movs	r1, #1
 800c146:	4240      	negs	r0, r0
 800c148:	4421      	add	r1, r4
 800c14a:	f001 fe0f 	bl	800dd6c <__utoa>
 800c14e:	e7f1      	b.n	800c134 <__itoa+0x10>
 800c150:	2100      	movs	r1, #0
 800c152:	e7f9      	b.n	800c148 <__itoa+0x24>

0800c154 <itoa>:
 800c154:	f7ff bfe6 	b.w	800c124 <__itoa>

0800c158 <malloc>:
 800c158:	4b02      	ldr	r3, [pc, #8]	; (800c164 <malloc+0xc>)
 800c15a:	4601      	mov	r1, r0
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f000 b85f 	b.w	800c220 <_malloc_r>
 800c162:	bf00      	nop
 800c164:	2000004c 	.word	0x2000004c

0800c168 <free>:
 800c168:	4b02      	ldr	r3, [pc, #8]	; (800c174 <free+0xc>)
 800c16a:	4601      	mov	r1, r0
 800c16c:	6818      	ldr	r0, [r3, #0]
 800c16e:	f000 b80b 	b.w	800c188 <_free_r>
 800c172:	bf00      	nop
 800c174:	2000004c 	.word	0x2000004c

0800c178 <memset>:
 800c178:	4603      	mov	r3, r0
 800c17a:	4402      	add	r2, r0
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d100      	bne.n	800c182 <memset+0xa>
 800c180:	4770      	bx	lr
 800c182:	f803 1b01 	strb.w	r1, [r3], #1
 800c186:	e7f9      	b.n	800c17c <memset+0x4>

0800c188 <_free_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4605      	mov	r5, r0
 800c18c:	2900      	cmp	r1, #0
 800c18e:	d043      	beq.n	800c218 <_free_r+0x90>
 800c190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c194:	1f0c      	subs	r4, r1, #4
 800c196:	2b00      	cmp	r3, #0
 800c198:	bfb8      	it	lt
 800c19a:	18e4      	addlt	r4, r4, r3
 800c19c:	f003 f83e 	bl	800f21c <__malloc_lock>
 800c1a0:	4a1e      	ldr	r2, [pc, #120]	; (800c21c <_free_r+0x94>)
 800c1a2:	6813      	ldr	r3, [r2, #0]
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	b933      	cbnz	r3, 800c1b6 <_free_r+0x2e>
 800c1a8:	6063      	str	r3, [r4, #4]
 800c1aa:	6014      	str	r4, [r2, #0]
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1b2:	f003 b839 	b.w	800f228 <__malloc_unlock>
 800c1b6:	42a3      	cmp	r3, r4
 800c1b8:	d90a      	bls.n	800c1d0 <_free_r+0x48>
 800c1ba:	6821      	ldr	r1, [r4, #0]
 800c1bc:	1862      	adds	r2, r4, r1
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	bf01      	itttt	eq
 800c1c2:	681a      	ldreq	r2, [r3, #0]
 800c1c4:	685b      	ldreq	r3, [r3, #4]
 800c1c6:	1852      	addeq	r2, r2, r1
 800c1c8:	6022      	streq	r2, [r4, #0]
 800c1ca:	6063      	str	r3, [r4, #4]
 800c1cc:	6004      	str	r4, [r0, #0]
 800c1ce:	e7ed      	b.n	800c1ac <_free_r+0x24>
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	b10b      	cbz	r3, 800c1da <_free_r+0x52>
 800c1d6:	42a3      	cmp	r3, r4
 800c1d8:	d9fa      	bls.n	800c1d0 <_free_r+0x48>
 800c1da:	6811      	ldr	r1, [r2, #0]
 800c1dc:	1850      	adds	r0, r2, r1
 800c1de:	42a0      	cmp	r0, r4
 800c1e0:	d10b      	bne.n	800c1fa <_free_r+0x72>
 800c1e2:	6820      	ldr	r0, [r4, #0]
 800c1e4:	4401      	add	r1, r0
 800c1e6:	1850      	adds	r0, r2, r1
 800c1e8:	4283      	cmp	r3, r0
 800c1ea:	6011      	str	r1, [r2, #0]
 800c1ec:	d1de      	bne.n	800c1ac <_free_r+0x24>
 800c1ee:	6818      	ldr	r0, [r3, #0]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	4401      	add	r1, r0
 800c1f4:	6011      	str	r1, [r2, #0]
 800c1f6:	6053      	str	r3, [r2, #4]
 800c1f8:	e7d8      	b.n	800c1ac <_free_r+0x24>
 800c1fa:	d902      	bls.n	800c202 <_free_r+0x7a>
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	602b      	str	r3, [r5, #0]
 800c200:	e7d4      	b.n	800c1ac <_free_r+0x24>
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	1821      	adds	r1, r4, r0
 800c206:	428b      	cmp	r3, r1
 800c208:	bf01      	itttt	eq
 800c20a:	6819      	ldreq	r1, [r3, #0]
 800c20c:	685b      	ldreq	r3, [r3, #4]
 800c20e:	1809      	addeq	r1, r1, r0
 800c210:	6021      	streq	r1, [r4, #0]
 800c212:	6063      	str	r3, [r4, #4]
 800c214:	6054      	str	r4, [r2, #4]
 800c216:	e7c9      	b.n	800c1ac <_free_r+0x24>
 800c218:	bd38      	pop	{r3, r4, r5, pc}
 800c21a:	bf00      	nop
 800c21c:	20000658 	.word	0x20000658

0800c220 <_malloc_r>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	1ccd      	adds	r5, r1, #3
 800c224:	f025 0503 	bic.w	r5, r5, #3
 800c228:	3508      	adds	r5, #8
 800c22a:	2d0c      	cmp	r5, #12
 800c22c:	bf38      	it	cc
 800c22e:	250c      	movcc	r5, #12
 800c230:	2d00      	cmp	r5, #0
 800c232:	4606      	mov	r6, r0
 800c234:	db01      	blt.n	800c23a <_malloc_r+0x1a>
 800c236:	42a9      	cmp	r1, r5
 800c238:	d903      	bls.n	800c242 <_malloc_r+0x22>
 800c23a:	230c      	movs	r3, #12
 800c23c:	6033      	str	r3, [r6, #0]
 800c23e:	2000      	movs	r0, #0
 800c240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c242:	f002 ffeb 	bl	800f21c <__malloc_lock>
 800c246:	4921      	ldr	r1, [pc, #132]	; (800c2cc <_malloc_r+0xac>)
 800c248:	680a      	ldr	r2, [r1, #0]
 800c24a:	4614      	mov	r4, r2
 800c24c:	b99c      	cbnz	r4, 800c276 <_malloc_r+0x56>
 800c24e:	4f20      	ldr	r7, [pc, #128]	; (800c2d0 <_malloc_r+0xb0>)
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	b923      	cbnz	r3, 800c25e <_malloc_r+0x3e>
 800c254:	4621      	mov	r1, r4
 800c256:	4630      	mov	r0, r6
 800c258:	f000 feae 	bl	800cfb8 <_sbrk_r>
 800c25c:	6038      	str	r0, [r7, #0]
 800c25e:	4629      	mov	r1, r5
 800c260:	4630      	mov	r0, r6
 800c262:	f000 fea9 	bl	800cfb8 <_sbrk_r>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	d123      	bne.n	800c2b2 <_malloc_r+0x92>
 800c26a:	230c      	movs	r3, #12
 800c26c:	4630      	mov	r0, r6
 800c26e:	6033      	str	r3, [r6, #0]
 800c270:	f002 ffda 	bl	800f228 <__malloc_unlock>
 800c274:	e7e3      	b.n	800c23e <_malloc_r+0x1e>
 800c276:	6823      	ldr	r3, [r4, #0]
 800c278:	1b5b      	subs	r3, r3, r5
 800c27a:	d417      	bmi.n	800c2ac <_malloc_r+0x8c>
 800c27c:	2b0b      	cmp	r3, #11
 800c27e:	d903      	bls.n	800c288 <_malloc_r+0x68>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	441c      	add	r4, r3
 800c284:	6025      	str	r5, [r4, #0]
 800c286:	e004      	b.n	800c292 <_malloc_r+0x72>
 800c288:	6863      	ldr	r3, [r4, #4]
 800c28a:	42a2      	cmp	r2, r4
 800c28c:	bf0c      	ite	eq
 800c28e:	600b      	streq	r3, [r1, #0]
 800c290:	6053      	strne	r3, [r2, #4]
 800c292:	4630      	mov	r0, r6
 800c294:	f002 ffc8 	bl	800f228 <__malloc_unlock>
 800c298:	f104 000b 	add.w	r0, r4, #11
 800c29c:	1d23      	adds	r3, r4, #4
 800c29e:	f020 0007 	bic.w	r0, r0, #7
 800c2a2:	1ac2      	subs	r2, r0, r3
 800c2a4:	d0cc      	beq.n	800c240 <_malloc_r+0x20>
 800c2a6:	1a1b      	subs	r3, r3, r0
 800c2a8:	50a3      	str	r3, [r4, r2]
 800c2aa:	e7c9      	b.n	800c240 <_malloc_r+0x20>
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	6864      	ldr	r4, [r4, #4]
 800c2b0:	e7cc      	b.n	800c24c <_malloc_r+0x2c>
 800c2b2:	1cc4      	adds	r4, r0, #3
 800c2b4:	f024 0403 	bic.w	r4, r4, #3
 800c2b8:	42a0      	cmp	r0, r4
 800c2ba:	d0e3      	beq.n	800c284 <_malloc_r+0x64>
 800c2bc:	1a21      	subs	r1, r4, r0
 800c2be:	4630      	mov	r0, r6
 800c2c0:	f000 fe7a 	bl	800cfb8 <_sbrk_r>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d1dd      	bne.n	800c284 <_malloc_r+0x64>
 800c2c8:	e7cf      	b.n	800c26a <_malloc_r+0x4a>
 800c2ca:	bf00      	nop
 800c2cc:	20000658 	.word	0x20000658
 800c2d0:	2000065c 	.word	0x2000065c

0800c2d4 <__cvt>:
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2da:	461f      	mov	r7, r3
 800c2dc:	bfbb      	ittet	lt
 800c2de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c2e2:	461f      	movlt	r7, r3
 800c2e4:	2300      	movge	r3, #0
 800c2e6:	232d      	movlt	r3, #45	; 0x2d
 800c2e8:	b088      	sub	sp, #32
 800c2ea:	4614      	mov	r4, r2
 800c2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c2f0:	7013      	strb	r3, [r2, #0]
 800c2f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c2f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c2f8:	f023 0820 	bic.w	r8, r3, #32
 800c2fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c300:	d005      	beq.n	800c30e <__cvt+0x3a>
 800c302:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c306:	d100      	bne.n	800c30a <__cvt+0x36>
 800c308:	3501      	adds	r5, #1
 800c30a:	2302      	movs	r3, #2
 800c30c:	e000      	b.n	800c310 <__cvt+0x3c>
 800c30e:	2303      	movs	r3, #3
 800c310:	aa07      	add	r2, sp, #28
 800c312:	9204      	str	r2, [sp, #16]
 800c314:	aa06      	add	r2, sp, #24
 800c316:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c31a:	e9cd 3500 	strd	r3, r5, [sp]
 800c31e:	4622      	mov	r2, r4
 800c320:	463b      	mov	r3, r7
 800c322:	f001 fdf5 	bl	800df10 <_dtoa_r>
 800c326:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c32a:	4606      	mov	r6, r0
 800c32c:	d102      	bne.n	800c334 <__cvt+0x60>
 800c32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c330:	07db      	lsls	r3, r3, #31
 800c332:	d522      	bpl.n	800c37a <__cvt+0xa6>
 800c334:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c338:	eb06 0905 	add.w	r9, r6, r5
 800c33c:	d110      	bne.n	800c360 <__cvt+0x8c>
 800c33e:	7833      	ldrb	r3, [r6, #0]
 800c340:	2b30      	cmp	r3, #48	; 0x30
 800c342:	d10a      	bne.n	800c35a <__cvt+0x86>
 800c344:	2200      	movs	r2, #0
 800c346:	2300      	movs	r3, #0
 800c348:	4620      	mov	r0, r4
 800c34a:	4639      	mov	r1, r7
 800c34c:	f7f4 fb98 	bl	8000a80 <__aeabi_dcmpeq>
 800c350:	b918      	cbnz	r0, 800c35a <__cvt+0x86>
 800c352:	f1c5 0501 	rsb	r5, r5, #1
 800c356:	f8ca 5000 	str.w	r5, [sl]
 800c35a:	f8da 3000 	ldr.w	r3, [sl]
 800c35e:	4499      	add	r9, r3
 800c360:	2200      	movs	r2, #0
 800c362:	2300      	movs	r3, #0
 800c364:	4620      	mov	r0, r4
 800c366:	4639      	mov	r1, r7
 800c368:	f7f4 fb8a 	bl	8000a80 <__aeabi_dcmpeq>
 800c36c:	b108      	cbz	r0, 800c372 <__cvt+0x9e>
 800c36e:	f8cd 901c 	str.w	r9, [sp, #28]
 800c372:	2230      	movs	r2, #48	; 0x30
 800c374:	9b07      	ldr	r3, [sp, #28]
 800c376:	454b      	cmp	r3, r9
 800c378:	d307      	bcc.n	800c38a <__cvt+0xb6>
 800c37a:	4630      	mov	r0, r6
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c380:	1b9b      	subs	r3, r3, r6
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	b008      	add	sp, #32
 800c386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38a:	1c59      	adds	r1, r3, #1
 800c38c:	9107      	str	r1, [sp, #28]
 800c38e:	701a      	strb	r2, [r3, #0]
 800c390:	e7f0      	b.n	800c374 <__cvt+0xa0>

0800c392 <__exponent>:
 800c392:	4603      	mov	r3, r0
 800c394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c396:	2900      	cmp	r1, #0
 800c398:	f803 2b02 	strb.w	r2, [r3], #2
 800c39c:	bfb6      	itet	lt
 800c39e:	222d      	movlt	r2, #45	; 0x2d
 800c3a0:	222b      	movge	r2, #43	; 0x2b
 800c3a2:	4249      	neglt	r1, r1
 800c3a4:	2909      	cmp	r1, #9
 800c3a6:	7042      	strb	r2, [r0, #1]
 800c3a8:	dd2b      	ble.n	800c402 <__exponent+0x70>
 800c3aa:	f10d 0407 	add.w	r4, sp, #7
 800c3ae:	46a4      	mov	ip, r4
 800c3b0:	270a      	movs	r7, #10
 800c3b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c3b6:	460a      	mov	r2, r1
 800c3b8:	46a6      	mov	lr, r4
 800c3ba:	fb07 1516 	mls	r5, r7, r6, r1
 800c3be:	2a63      	cmp	r2, #99	; 0x63
 800c3c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c3ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c3ce:	dcf0      	bgt.n	800c3b2 <__exponent+0x20>
 800c3d0:	3130      	adds	r1, #48	; 0x30
 800c3d2:	f1ae 0502 	sub.w	r5, lr, #2
 800c3d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c3da:	4629      	mov	r1, r5
 800c3dc:	1c44      	adds	r4, r0, #1
 800c3de:	4561      	cmp	r1, ip
 800c3e0:	d30a      	bcc.n	800c3f8 <__exponent+0x66>
 800c3e2:	f10d 0209 	add.w	r2, sp, #9
 800c3e6:	eba2 020e 	sub.w	r2, r2, lr
 800c3ea:	4565      	cmp	r5, ip
 800c3ec:	bf88      	it	hi
 800c3ee:	2200      	movhi	r2, #0
 800c3f0:	4413      	add	r3, r2
 800c3f2:	1a18      	subs	r0, r3, r0
 800c3f4:	b003      	add	sp, #12
 800c3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c400:	e7ed      	b.n	800c3de <__exponent+0x4c>
 800c402:	2330      	movs	r3, #48	; 0x30
 800c404:	3130      	adds	r1, #48	; 0x30
 800c406:	7083      	strb	r3, [r0, #2]
 800c408:	70c1      	strb	r1, [r0, #3]
 800c40a:	1d03      	adds	r3, r0, #4
 800c40c:	e7f1      	b.n	800c3f2 <__exponent+0x60>
	...

0800c410 <_printf_float>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	b091      	sub	sp, #68	; 0x44
 800c416:	460c      	mov	r4, r1
 800c418:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c41c:	4616      	mov	r6, r2
 800c41e:	461f      	mov	r7, r3
 800c420:	4605      	mov	r5, r0
 800c422:	f002 fec9 	bl	800f1b8 <_localeconv_r>
 800c426:	6803      	ldr	r3, [r0, #0]
 800c428:	4618      	mov	r0, r3
 800c42a:	9309      	str	r3, [sp, #36]	; 0x24
 800c42c:	f7f3 fefc 	bl	8000228 <strlen>
 800c430:	2300      	movs	r3, #0
 800c432:	930e      	str	r3, [sp, #56]	; 0x38
 800c434:	f8d8 3000 	ldr.w	r3, [r8]
 800c438:	900a      	str	r0, [sp, #40]	; 0x28
 800c43a:	3307      	adds	r3, #7
 800c43c:	f023 0307 	bic.w	r3, r3, #7
 800c440:	f103 0208 	add.w	r2, r3, #8
 800c444:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c448:	f8d4 b000 	ldr.w	fp, [r4]
 800c44c:	f8c8 2000 	str.w	r2, [r8]
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c458:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c45c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c460:	930b      	str	r3, [sp, #44]	; 0x2c
 800c462:	f04f 32ff 	mov.w	r2, #4294967295
 800c466:	4640      	mov	r0, r8
 800c468:	4b9c      	ldr	r3, [pc, #624]	; (800c6dc <_printf_float+0x2cc>)
 800c46a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c46c:	f7f4 fb3a 	bl	8000ae4 <__aeabi_dcmpun>
 800c470:	bb70      	cbnz	r0, 800c4d0 <_printf_float+0xc0>
 800c472:	f04f 32ff 	mov.w	r2, #4294967295
 800c476:	4640      	mov	r0, r8
 800c478:	4b98      	ldr	r3, [pc, #608]	; (800c6dc <_printf_float+0x2cc>)
 800c47a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c47c:	f7f4 fb14 	bl	8000aa8 <__aeabi_dcmple>
 800c480:	bb30      	cbnz	r0, 800c4d0 <_printf_float+0xc0>
 800c482:	2200      	movs	r2, #0
 800c484:	2300      	movs	r3, #0
 800c486:	4640      	mov	r0, r8
 800c488:	4651      	mov	r1, sl
 800c48a:	f7f4 fb03 	bl	8000a94 <__aeabi_dcmplt>
 800c48e:	b110      	cbz	r0, 800c496 <_printf_float+0x86>
 800c490:	232d      	movs	r3, #45	; 0x2d
 800c492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c496:	4b92      	ldr	r3, [pc, #584]	; (800c6e0 <_printf_float+0x2d0>)
 800c498:	4892      	ldr	r0, [pc, #584]	; (800c6e4 <_printf_float+0x2d4>)
 800c49a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c49e:	bf94      	ite	ls
 800c4a0:	4698      	movls	r8, r3
 800c4a2:	4680      	movhi	r8, r0
 800c4a4:	2303      	movs	r3, #3
 800c4a6:	f04f 0a00 	mov.w	sl, #0
 800c4aa:	6123      	str	r3, [r4, #16]
 800c4ac:	f02b 0304 	bic.w	r3, fp, #4
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	4633      	mov	r3, r6
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	9700      	str	r7, [sp, #0]
 800c4ba:	aa0f      	add	r2, sp, #60	; 0x3c
 800c4bc:	f000 f9d4 	bl	800c868 <_printf_common>
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	f040 8090 	bne.w	800c5e6 <_printf_float+0x1d6>
 800c4c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ca:	b011      	add	sp, #68	; 0x44
 800c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d0:	4642      	mov	r2, r8
 800c4d2:	4653      	mov	r3, sl
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4651      	mov	r1, sl
 800c4d8:	f7f4 fb04 	bl	8000ae4 <__aeabi_dcmpun>
 800c4dc:	b148      	cbz	r0, 800c4f2 <_printf_float+0xe2>
 800c4de:	f1ba 0f00 	cmp.w	sl, #0
 800c4e2:	bfb8      	it	lt
 800c4e4:	232d      	movlt	r3, #45	; 0x2d
 800c4e6:	4880      	ldr	r0, [pc, #512]	; (800c6e8 <_printf_float+0x2d8>)
 800c4e8:	bfb8      	it	lt
 800c4ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c4ee:	4b7f      	ldr	r3, [pc, #508]	; (800c6ec <_printf_float+0x2dc>)
 800c4f0:	e7d3      	b.n	800c49a <_printf_float+0x8a>
 800c4f2:	6863      	ldr	r3, [r4, #4]
 800c4f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	d142      	bne.n	800c582 <_printf_float+0x172>
 800c4fc:	2306      	movs	r3, #6
 800c4fe:	6063      	str	r3, [r4, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	9206      	str	r2, [sp, #24]
 800c504:	aa0e      	add	r2, sp, #56	; 0x38
 800c506:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c50a:	aa0d      	add	r2, sp, #52	; 0x34
 800c50c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c510:	9203      	str	r2, [sp, #12]
 800c512:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c516:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	6863      	ldr	r3, [r4, #4]
 800c51e:	4642      	mov	r2, r8
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	4628      	mov	r0, r5
 800c524:	4653      	mov	r3, sl
 800c526:	910b      	str	r1, [sp, #44]	; 0x2c
 800c528:	f7ff fed4 	bl	800c2d4 <__cvt>
 800c52c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c52e:	4680      	mov	r8, r0
 800c530:	2947      	cmp	r1, #71	; 0x47
 800c532:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c534:	d108      	bne.n	800c548 <_printf_float+0x138>
 800c536:	1cc8      	adds	r0, r1, #3
 800c538:	db02      	blt.n	800c540 <_printf_float+0x130>
 800c53a:	6863      	ldr	r3, [r4, #4]
 800c53c:	4299      	cmp	r1, r3
 800c53e:	dd40      	ble.n	800c5c2 <_printf_float+0x1b2>
 800c540:	f1a9 0902 	sub.w	r9, r9, #2
 800c544:	fa5f f989 	uxtb.w	r9, r9
 800c548:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c54c:	d81f      	bhi.n	800c58e <_printf_float+0x17e>
 800c54e:	464a      	mov	r2, r9
 800c550:	3901      	subs	r1, #1
 800c552:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c556:	910d      	str	r1, [sp, #52]	; 0x34
 800c558:	f7ff ff1b 	bl	800c392 <__exponent>
 800c55c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c55e:	4682      	mov	sl, r0
 800c560:	1813      	adds	r3, r2, r0
 800c562:	2a01      	cmp	r2, #1
 800c564:	6123      	str	r3, [r4, #16]
 800c566:	dc02      	bgt.n	800c56e <_printf_float+0x15e>
 800c568:	6822      	ldr	r2, [r4, #0]
 800c56a:	07d2      	lsls	r2, r2, #31
 800c56c:	d501      	bpl.n	800c572 <_printf_float+0x162>
 800c56e:	3301      	adds	r3, #1
 800c570:	6123      	str	r3, [r4, #16]
 800c572:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c576:	2b00      	cmp	r3, #0
 800c578:	d09b      	beq.n	800c4b2 <_printf_float+0xa2>
 800c57a:	232d      	movs	r3, #45	; 0x2d
 800c57c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c580:	e797      	b.n	800c4b2 <_printf_float+0xa2>
 800c582:	2947      	cmp	r1, #71	; 0x47
 800c584:	d1bc      	bne.n	800c500 <_printf_float+0xf0>
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1ba      	bne.n	800c500 <_printf_float+0xf0>
 800c58a:	2301      	movs	r3, #1
 800c58c:	e7b7      	b.n	800c4fe <_printf_float+0xee>
 800c58e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c592:	d118      	bne.n	800c5c6 <_printf_float+0x1b6>
 800c594:	2900      	cmp	r1, #0
 800c596:	6863      	ldr	r3, [r4, #4]
 800c598:	dd0b      	ble.n	800c5b2 <_printf_float+0x1a2>
 800c59a:	6121      	str	r1, [r4, #16]
 800c59c:	b913      	cbnz	r3, 800c5a4 <_printf_float+0x194>
 800c59e:	6822      	ldr	r2, [r4, #0]
 800c5a0:	07d0      	lsls	r0, r2, #31
 800c5a2:	d502      	bpl.n	800c5aa <_printf_float+0x19a>
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	440b      	add	r3, r1
 800c5a8:	6123      	str	r3, [r4, #16]
 800c5aa:	f04f 0a00 	mov.w	sl, #0
 800c5ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800c5b0:	e7df      	b.n	800c572 <_printf_float+0x162>
 800c5b2:	b913      	cbnz	r3, 800c5ba <_printf_float+0x1aa>
 800c5b4:	6822      	ldr	r2, [r4, #0]
 800c5b6:	07d2      	lsls	r2, r2, #31
 800c5b8:	d501      	bpl.n	800c5be <_printf_float+0x1ae>
 800c5ba:	3302      	adds	r3, #2
 800c5bc:	e7f4      	b.n	800c5a8 <_printf_float+0x198>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e7f2      	b.n	800c5a8 <_printf_float+0x198>
 800c5c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c5c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	db05      	blt.n	800c5d8 <_printf_float+0x1c8>
 800c5cc:	6823      	ldr	r3, [r4, #0]
 800c5ce:	6121      	str	r1, [r4, #16]
 800c5d0:	07d8      	lsls	r0, r3, #31
 800c5d2:	d5ea      	bpl.n	800c5aa <_printf_float+0x19a>
 800c5d4:	1c4b      	adds	r3, r1, #1
 800c5d6:	e7e7      	b.n	800c5a8 <_printf_float+0x198>
 800c5d8:	2900      	cmp	r1, #0
 800c5da:	bfcc      	ite	gt
 800c5dc:	2201      	movgt	r2, #1
 800c5de:	f1c1 0202 	rsble	r2, r1, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	e7e0      	b.n	800c5a8 <_printf_float+0x198>
 800c5e6:	6823      	ldr	r3, [r4, #0]
 800c5e8:	055a      	lsls	r2, r3, #21
 800c5ea:	d407      	bmi.n	800c5fc <_printf_float+0x1ec>
 800c5ec:	6923      	ldr	r3, [r4, #16]
 800c5ee:	4642      	mov	r2, r8
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	47b8      	blx	r7
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	d12b      	bne.n	800c652 <_printf_float+0x242>
 800c5fa:	e764      	b.n	800c4c6 <_printf_float+0xb6>
 800c5fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c600:	f240 80dd 	bls.w	800c7be <_printf_float+0x3ae>
 800c604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c608:	2200      	movs	r2, #0
 800c60a:	2300      	movs	r3, #0
 800c60c:	f7f4 fa38 	bl	8000a80 <__aeabi_dcmpeq>
 800c610:	2800      	cmp	r0, #0
 800c612:	d033      	beq.n	800c67c <_printf_float+0x26c>
 800c614:	2301      	movs	r3, #1
 800c616:	4631      	mov	r1, r6
 800c618:	4628      	mov	r0, r5
 800c61a:	4a35      	ldr	r2, [pc, #212]	; (800c6f0 <_printf_float+0x2e0>)
 800c61c:	47b8      	blx	r7
 800c61e:	3001      	adds	r0, #1
 800c620:	f43f af51 	beq.w	800c4c6 <_printf_float+0xb6>
 800c624:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c628:	429a      	cmp	r2, r3
 800c62a:	db02      	blt.n	800c632 <_printf_float+0x222>
 800c62c:	6823      	ldr	r3, [r4, #0]
 800c62e:	07d8      	lsls	r0, r3, #31
 800c630:	d50f      	bpl.n	800c652 <_printf_float+0x242>
 800c632:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c636:	4631      	mov	r1, r6
 800c638:	4628      	mov	r0, r5
 800c63a:	47b8      	blx	r7
 800c63c:	3001      	adds	r0, #1
 800c63e:	f43f af42 	beq.w	800c4c6 <_printf_float+0xb6>
 800c642:	f04f 0800 	mov.w	r8, #0
 800c646:	f104 091a 	add.w	r9, r4, #26
 800c64a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c64c:	3b01      	subs	r3, #1
 800c64e:	4543      	cmp	r3, r8
 800c650:	dc09      	bgt.n	800c666 <_printf_float+0x256>
 800c652:	6823      	ldr	r3, [r4, #0]
 800c654:	079b      	lsls	r3, r3, #30
 800c656:	f100 8102 	bmi.w	800c85e <_printf_float+0x44e>
 800c65a:	68e0      	ldr	r0, [r4, #12]
 800c65c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c65e:	4298      	cmp	r0, r3
 800c660:	bfb8      	it	lt
 800c662:	4618      	movlt	r0, r3
 800c664:	e731      	b.n	800c4ca <_printf_float+0xba>
 800c666:	2301      	movs	r3, #1
 800c668:	464a      	mov	r2, r9
 800c66a:	4631      	mov	r1, r6
 800c66c:	4628      	mov	r0, r5
 800c66e:	47b8      	blx	r7
 800c670:	3001      	adds	r0, #1
 800c672:	f43f af28 	beq.w	800c4c6 <_printf_float+0xb6>
 800c676:	f108 0801 	add.w	r8, r8, #1
 800c67a:	e7e6      	b.n	800c64a <_printf_float+0x23a>
 800c67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c67e:	2b00      	cmp	r3, #0
 800c680:	dc38      	bgt.n	800c6f4 <_printf_float+0x2e4>
 800c682:	2301      	movs	r3, #1
 800c684:	4631      	mov	r1, r6
 800c686:	4628      	mov	r0, r5
 800c688:	4a19      	ldr	r2, [pc, #100]	; (800c6f0 <_printf_float+0x2e0>)
 800c68a:	47b8      	blx	r7
 800c68c:	3001      	adds	r0, #1
 800c68e:	f43f af1a 	beq.w	800c4c6 <_printf_float+0xb6>
 800c692:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c696:	4313      	orrs	r3, r2
 800c698:	d102      	bne.n	800c6a0 <_printf_float+0x290>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	07d9      	lsls	r1, r3, #31
 800c69e:	d5d8      	bpl.n	800c652 <_printf_float+0x242>
 800c6a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	47b8      	blx	r7
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	f43f af0b 	beq.w	800c4c6 <_printf_float+0xb6>
 800c6b0:	f04f 0900 	mov.w	r9, #0
 800c6b4:	f104 0a1a 	add.w	sl, r4, #26
 800c6b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ba:	425b      	negs	r3, r3
 800c6bc:	454b      	cmp	r3, r9
 800c6be:	dc01      	bgt.n	800c6c4 <_printf_float+0x2b4>
 800c6c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6c2:	e794      	b.n	800c5ee <_printf_float+0x1de>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	4652      	mov	r2, sl
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b8      	blx	r7
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f43f aef9 	beq.w	800c4c6 <_printf_float+0xb6>
 800c6d4:	f109 0901 	add.w	r9, r9, #1
 800c6d8:	e7ee      	b.n	800c6b8 <_printf_float+0x2a8>
 800c6da:	bf00      	nop
 800c6dc:	7fefffff 	.word	0x7fefffff
 800c6e0:	08011b7c 	.word	0x08011b7c
 800c6e4:	08011b80 	.word	0x08011b80
 800c6e8:	08011b88 	.word	0x08011b88
 800c6ec:	08011b84 	.word	0x08011b84
 800c6f0:	08011b8c 	.word	0x08011b8c
 800c6f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	bfa8      	it	ge
 800c6fc:	461a      	movge	r2, r3
 800c6fe:	2a00      	cmp	r2, #0
 800c700:	4691      	mov	r9, r2
 800c702:	dc37      	bgt.n	800c774 <_printf_float+0x364>
 800c704:	f04f 0b00 	mov.w	fp, #0
 800c708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c70c:	f104 021a 	add.w	r2, r4, #26
 800c710:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c714:	ebaa 0309 	sub.w	r3, sl, r9
 800c718:	455b      	cmp	r3, fp
 800c71a:	dc33      	bgt.n	800c784 <_printf_float+0x374>
 800c71c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c720:	429a      	cmp	r2, r3
 800c722:	db3b      	blt.n	800c79c <_printf_float+0x38c>
 800c724:	6823      	ldr	r3, [r4, #0]
 800c726:	07da      	lsls	r2, r3, #31
 800c728:	d438      	bmi.n	800c79c <_printf_float+0x38c>
 800c72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c72c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c72e:	eba2 030a 	sub.w	r3, r2, sl
 800c732:	eba2 0901 	sub.w	r9, r2, r1
 800c736:	4599      	cmp	r9, r3
 800c738:	bfa8      	it	ge
 800c73a:	4699      	movge	r9, r3
 800c73c:	f1b9 0f00 	cmp.w	r9, #0
 800c740:	dc34      	bgt.n	800c7ac <_printf_float+0x39c>
 800c742:	f04f 0800 	mov.w	r8, #0
 800c746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c74a:	f104 0a1a 	add.w	sl, r4, #26
 800c74e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c752:	1a9b      	subs	r3, r3, r2
 800c754:	eba3 0309 	sub.w	r3, r3, r9
 800c758:	4543      	cmp	r3, r8
 800c75a:	f77f af7a 	ble.w	800c652 <_printf_float+0x242>
 800c75e:	2301      	movs	r3, #1
 800c760:	4652      	mov	r2, sl
 800c762:	4631      	mov	r1, r6
 800c764:	4628      	mov	r0, r5
 800c766:	47b8      	blx	r7
 800c768:	3001      	adds	r0, #1
 800c76a:	f43f aeac 	beq.w	800c4c6 <_printf_float+0xb6>
 800c76e:	f108 0801 	add.w	r8, r8, #1
 800c772:	e7ec      	b.n	800c74e <_printf_float+0x33e>
 800c774:	4613      	mov	r3, r2
 800c776:	4631      	mov	r1, r6
 800c778:	4642      	mov	r2, r8
 800c77a:	4628      	mov	r0, r5
 800c77c:	47b8      	blx	r7
 800c77e:	3001      	adds	r0, #1
 800c780:	d1c0      	bne.n	800c704 <_printf_float+0x2f4>
 800c782:	e6a0      	b.n	800c4c6 <_printf_float+0xb6>
 800c784:	2301      	movs	r3, #1
 800c786:	4631      	mov	r1, r6
 800c788:	4628      	mov	r0, r5
 800c78a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f ae99 	beq.w	800c4c6 <_printf_float+0xb6>
 800c794:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c796:	f10b 0b01 	add.w	fp, fp, #1
 800c79a:	e7b9      	b.n	800c710 <_printf_float+0x300>
 800c79c:	4631      	mov	r1, r6
 800c79e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b8      	blx	r7
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d1bf      	bne.n	800c72a <_printf_float+0x31a>
 800c7aa:	e68c      	b.n	800c4c6 <_printf_float+0xb6>
 800c7ac:	464b      	mov	r3, r9
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	eb08 020a 	add.w	r2, r8, sl
 800c7b6:	47b8      	blx	r7
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d1c2      	bne.n	800c742 <_printf_float+0x332>
 800c7bc:	e683      	b.n	800c4c6 <_printf_float+0xb6>
 800c7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7c0:	2a01      	cmp	r2, #1
 800c7c2:	dc01      	bgt.n	800c7c8 <_printf_float+0x3b8>
 800c7c4:	07db      	lsls	r3, r3, #31
 800c7c6:	d537      	bpl.n	800c838 <_printf_float+0x428>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	4642      	mov	r2, r8
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f43f ae77 	beq.w	800c4c6 <_printf_float+0xb6>
 800c7d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	f43f ae6f 	beq.w	800c4c6 <_printf_float+0xb6>
 800c7e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	f7f4 f946 	bl	8000a80 <__aeabi_dcmpeq>
 800c7f4:	b9d8      	cbnz	r0, 800c82e <_printf_float+0x41e>
 800c7f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7f8:	f108 0201 	add.w	r2, r8, #1
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	4631      	mov	r1, r6
 800c800:	4628      	mov	r0, r5
 800c802:	47b8      	blx	r7
 800c804:	3001      	adds	r0, #1
 800c806:	d10e      	bne.n	800c826 <_printf_float+0x416>
 800c808:	e65d      	b.n	800c4c6 <_printf_float+0xb6>
 800c80a:	2301      	movs	r3, #1
 800c80c:	464a      	mov	r2, r9
 800c80e:	4631      	mov	r1, r6
 800c810:	4628      	mov	r0, r5
 800c812:	47b8      	blx	r7
 800c814:	3001      	adds	r0, #1
 800c816:	f43f ae56 	beq.w	800c4c6 <_printf_float+0xb6>
 800c81a:	f108 0801 	add.w	r8, r8, #1
 800c81e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c820:	3b01      	subs	r3, #1
 800c822:	4543      	cmp	r3, r8
 800c824:	dcf1      	bgt.n	800c80a <_printf_float+0x3fa>
 800c826:	4653      	mov	r3, sl
 800c828:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c82c:	e6e0      	b.n	800c5f0 <_printf_float+0x1e0>
 800c82e:	f04f 0800 	mov.w	r8, #0
 800c832:	f104 091a 	add.w	r9, r4, #26
 800c836:	e7f2      	b.n	800c81e <_printf_float+0x40e>
 800c838:	2301      	movs	r3, #1
 800c83a:	4642      	mov	r2, r8
 800c83c:	e7df      	b.n	800c7fe <_printf_float+0x3ee>
 800c83e:	2301      	movs	r3, #1
 800c840:	464a      	mov	r2, r9
 800c842:	4631      	mov	r1, r6
 800c844:	4628      	mov	r0, r5
 800c846:	47b8      	blx	r7
 800c848:	3001      	adds	r0, #1
 800c84a:	f43f ae3c 	beq.w	800c4c6 <_printf_float+0xb6>
 800c84e:	f108 0801 	add.w	r8, r8, #1
 800c852:	68e3      	ldr	r3, [r4, #12]
 800c854:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c856:	1a5b      	subs	r3, r3, r1
 800c858:	4543      	cmp	r3, r8
 800c85a:	dcf0      	bgt.n	800c83e <_printf_float+0x42e>
 800c85c:	e6fd      	b.n	800c65a <_printf_float+0x24a>
 800c85e:	f04f 0800 	mov.w	r8, #0
 800c862:	f104 0919 	add.w	r9, r4, #25
 800c866:	e7f4      	b.n	800c852 <_printf_float+0x442>

0800c868 <_printf_common>:
 800c868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c86c:	4616      	mov	r6, r2
 800c86e:	4699      	mov	r9, r3
 800c870:	688a      	ldr	r2, [r1, #8]
 800c872:	690b      	ldr	r3, [r1, #16]
 800c874:	4607      	mov	r7, r0
 800c876:	4293      	cmp	r3, r2
 800c878:	bfb8      	it	lt
 800c87a:	4613      	movlt	r3, r2
 800c87c:	6033      	str	r3, [r6, #0]
 800c87e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c882:	460c      	mov	r4, r1
 800c884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c888:	b10a      	cbz	r2, 800c88e <_printf_common+0x26>
 800c88a:	3301      	adds	r3, #1
 800c88c:	6033      	str	r3, [r6, #0]
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	0699      	lsls	r1, r3, #26
 800c892:	bf42      	ittt	mi
 800c894:	6833      	ldrmi	r3, [r6, #0]
 800c896:	3302      	addmi	r3, #2
 800c898:	6033      	strmi	r3, [r6, #0]
 800c89a:	6825      	ldr	r5, [r4, #0]
 800c89c:	f015 0506 	ands.w	r5, r5, #6
 800c8a0:	d106      	bne.n	800c8b0 <_printf_common+0x48>
 800c8a2:	f104 0a19 	add.w	sl, r4, #25
 800c8a6:	68e3      	ldr	r3, [r4, #12]
 800c8a8:	6832      	ldr	r2, [r6, #0]
 800c8aa:	1a9b      	subs	r3, r3, r2
 800c8ac:	42ab      	cmp	r3, r5
 800c8ae:	dc28      	bgt.n	800c902 <_printf_common+0x9a>
 800c8b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8b4:	1e13      	subs	r3, r2, #0
 800c8b6:	6822      	ldr	r2, [r4, #0]
 800c8b8:	bf18      	it	ne
 800c8ba:	2301      	movne	r3, #1
 800c8bc:	0692      	lsls	r2, r2, #26
 800c8be:	d42d      	bmi.n	800c91c <_printf_common+0xb4>
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	4638      	mov	r0, r7
 800c8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8c8:	47c0      	blx	r8
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	d020      	beq.n	800c910 <_printf_common+0xa8>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	68e5      	ldr	r5, [r4, #12]
 800c8d2:	f003 0306 	and.w	r3, r3, #6
 800c8d6:	2b04      	cmp	r3, #4
 800c8d8:	bf18      	it	ne
 800c8da:	2500      	movne	r5, #0
 800c8dc:	6832      	ldr	r2, [r6, #0]
 800c8de:	f04f 0600 	mov.w	r6, #0
 800c8e2:	68a3      	ldr	r3, [r4, #8]
 800c8e4:	bf08      	it	eq
 800c8e6:	1aad      	subeq	r5, r5, r2
 800c8e8:	6922      	ldr	r2, [r4, #16]
 800c8ea:	bf08      	it	eq
 800c8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	bfc4      	itt	gt
 800c8f4:	1a9b      	subgt	r3, r3, r2
 800c8f6:	18ed      	addgt	r5, r5, r3
 800c8f8:	341a      	adds	r4, #26
 800c8fa:	42b5      	cmp	r5, r6
 800c8fc:	d11a      	bne.n	800c934 <_printf_common+0xcc>
 800c8fe:	2000      	movs	r0, #0
 800c900:	e008      	b.n	800c914 <_printf_common+0xac>
 800c902:	2301      	movs	r3, #1
 800c904:	4652      	mov	r2, sl
 800c906:	4649      	mov	r1, r9
 800c908:	4638      	mov	r0, r7
 800c90a:	47c0      	blx	r8
 800c90c:	3001      	adds	r0, #1
 800c90e:	d103      	bne.n	800c918 <_printf_common+0xb0>
 800c910:	f04f 30ff 	mov.w	r0, #4294967295
 800c914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c918:	3501      	adds	r5, #1
 800c91a:	e7c4      	b.n	800c8a6 <_printf_common+0x3e>
 800c91c:	2030      	movs	r0, #48	; 0x30
 800c91e:	18e1      	adds	r1, r4, r3
 800c920:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c924:	1c5a      	adds	r2, r3, #1
 800c926:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c92a:	4422      	add	r2, r4
 800c92c:	3302      	adds	r3, #2
 800c92e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c932:	e7c5      	b.n	800c8c0 <_printf_common+0x58>
 800c934:	2301      	movs	r3, #1
 800c936:	4622      	mov	r2, r4
 800c938:	4649      	mov	r1, r9
 800c93a:	4638      	mov	r0, r7
 800c93c:	47c0      	blx	r8
 800c93e:	3001      	adds	r0, #1
 800c940:	d0e6      	beq.n	800c910 <_printf_common+0xa8>
 800c942:	3601      	adds	r6, #1
 800c944:	e7d9      	b.n	800c8fa <_printf_common+0x92>
	...

0800c948 <_printf_i>:
 800c948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c94c:	460c      	mov	r4, r1
 800c94e:	7e27      	ldrb	r7, [r4, #24]
 800c950:	4691      	mov	r9, r2
 800c952:	2f78      	cmp	r7, #120	; 0x78
 800c954:	4680      	mov	r8, r0
 800c956:	469a      	mov	sl, r3
 800c958:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c95a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c95e:	d807      	bhi.n	800c970 <_printf_i+0x28>
 800c960:	2f62      	cmp	r7, #98	; 0x62
 800c962:	d80a      	bhi.n	800c97a <_printf_i+0x32>
 800c964:	2f00      	cmp	r7, #0
 800c966:	f000 80d9 	beq.w	800cb1c <_printf_i+0x1d4>
 800c96a:	2f58      	cmp	r7, #88	; 0x58
 800c96c:	f000 80a4 	beq.w	800cab8 <_printf_i+0x170>
 800c970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c978:	e03a      	b.n	800c9f0 <_printf_i+0xa8>
 800c97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c97e:	2b15      	cmp	r3, #21
 800c980:	d8f6      	bhi.n	800c970 <_printf_i+0x28>
 800c982:	a001      	add	r0, pc, #4	; (adr r0, 800c988 <_printf_i+0x40>)
 800c984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c988:	0800c9e1 	.word	0x0800c9e1
 800c98c:	0800c9f5 	.word	0x0800c9f5
 800c990:	0800c971 	.word	0x0800c971
 800c994:	0800c971 	.word	0x0800c971
 800c998:	0800c971 	.word	0x0800c971
 800c99c:	0800c971 	.word	0x0800c971
 800c9a0:	0800c9f5 	.word	0x0800c9f5
 800c9a4:	0800c971 	.word	0x0800c971
 800c9a8:	0800c971 	.word	0x0800c971
 800c9ac:	0800c971 	.word	0x0800c971
 800c9b0:	0800c971 	.word	0x0800c971
 800c9b4:	0800cb03 	.word	0x0800cb03
 800c9b8:	0800ca25 	.word	0x0800ca25
 800c9bc:	0800cae5 	.word	0x0800cae5
 800c9c0:	0800c971 	.word	0x0800c971
 800c9c4:	0800c971 	.word	0x0800c971
 800c9c8:	0800cb25 	.word	0x0800cb25
 800c9cc:	0800c971 	.word	0x0800c971
 800c9d0:	0800ca25 	.word	0x0800ca25
 800c9d4:	0800c971 	.word	0x0800c971
 800c9d8:	0800c971 	.word	0x0800c971
 800c9dc:	0800caed 	.word	0x0800caed
 800c9e0:	680b      	ldr	r3, [r1, #0]
 800c9e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c9e6:	1d1a      	adds	r2, r3, #4
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	600a      	str	r2, [r1, #0]
 800c9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e0a4      	b.n	800cb3e <_printf_i+0x1f6>
 800c9f4:	6825      	ldr	r5, [r4, #0]
 800c9f6:	6808      	ldr	r0, [r1, #0]
 800c9f8:	062e      	lsls	r6, r5, #24
 800c9fa:	f100 0304 	add.w	r3, r0, #4
 800c9fe:	d50a      	bpl.n	800ca16 <_printf_i+0xce>
 800ca00:	6805      	ldr	r5, [r0, #0]
 800ca02:	600b      	str	r3, [r1, #0]
 800ca04:	2d00      	cmp	r5, #0
 800ca06:	da03      	bge.n	800ca10 <_printf_i+0xc8>
 800ca08:	232d      	movs	r3, #45	; 0x2d
 800ca0a:	426d      	negs	r5, r5
 800ca0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca10:	230a      	movs	r3, #10
 800ca12:	485e      	ldr	r0, [pc, #376]	; (800cb8c <_printf_i+0x244>)
 800ca14:	e019      	b.n	800ca4a <_printf_i+0x102>
 800ca16:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ca1a:	6805      	ldr	r5, [r0, #0]
 800ca1c:	600b      	str	r3, [r1, #0]
 800ca1e:	bf18      	it	ne
 800ca20:	b22d      	sxthne	r5, r5
 800ca22:	e7ef      	b.n	800ca04 <_printf_i+0xbc>
 800ca24:	680b      	ldr	r3, [r1, #0]
 800ca26:	6825      	ldr	r5, [r4, #0]
 800ca28:	1d18      	adds	r0, r3, #4
 800ca2a:	6008      	str	r0, [r1, #0]
 800ca2c:	0628      	lsls	r0, r5, #24
 800ca2e:	d501      	bpl.n	800ca34 <_printf_i+0xec>
 800ca30:	681d      	ldr	r5, [r3, #0]
 800ca32:	e002      	b.n	800ca3a <_printf_i+0xf2>
 800ca34:	0669      	lsls	r1, r5, #25
 800ca36:	d5fb      	bpl.n	800ca30 <_printf_i+0xe8>
 800ca38:	881d      	ldrh	r5, [r3, #0]
 800ca3a:	2f6f      	cmp	r7, #111	; 0x6f
 800ca3c:	bf0c      	ite	eq
 800ca3e:	2308      	moveq	r3, #8
 800ca40:	230a      	movne	r3, #10
 800ca42:	4852      	ldr	r0, [pc, #328]	; (800cb8c <_printf_i+0x244>)
 800ca44:	2100      	movs	r1, #0
 800ca46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca4a:	6866      	ldr	r6, [r4, #4]
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	bfa8      	it	ge
 800ca50:	6821      	ldrge	r1, [r4, #0]
 800ca52:	60a6      	str	r6, [r4, #8]
 800ca54:	bfa4      	itt	ge
 800ca56:	f021 0104 	bicge.w	r1, r1, #4
 800ca5a:	6021      	strge	r1, [r4, #0]
 800ca5c:	b90d      	cbnz	r5, 800ca62 <_printf_i+0x11a>
 800ca5e:	2e00      	cmp	r6, #0
 800ca60:	d04d      	beq.n	800cafe <_printf_i+0x1b6>
 800ca62:	4616      	mov	r6, r2
 800ca64:	fbb5 f1f3 	udiv	r1, r5, r3
 800ca68:	fb03 5711 	mls	r7, r3, r1, r5
 800ca6c:	5dc7      	ldrb	r7, [r0, r7]
 800ca6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ca72:	462f      	mov	r7, r5
 800ca74:	42bb      	cmp	r3, r7
 800ca76:	460d      	mov	r5, r1
 800ca78:	d9f4      	bls.n	800ca64 <_printf_i+0x11c>
 800ca7a:	2b08      	cmp	r3, #8
 800ca7c:	d10b      	bne.n	800ca96 <_printf_i+0x14e>
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	07df      	lsls	r7, r3, #31
 800ca82:	d508      	bpl.n	800ca96 <_printf_i+0x14e>
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	6861      	ldr	r1, [r4, #4]
 800ca88:	4299      	cmp	r1, r3
 800ca8a:	bfde      	ittt	le
 800ca8c:	2330      	movle	r3, #48	; 0x30
 800ca8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ca92:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ca96:	1b92      	subs	r2, r2, r6
 800ca98:	6122      	str	r2, [r4, #16]
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	4640      	mov	r0, r8
 800caa0:	f8cd a000 	str.w	sl, [sp]
 800caa4:	aa03      	add	r2, sp, #12
 800caa6:	f7ff fedf 	bl	800c868 <_printf_common>
 800caaa:	3001      	adds	r0, #1
 800caac:	d14c      	bne.n	800cb48 <_printf_i+0x200>
 800caae:	f04f 30ff 	mov.w	r0, #4294967295
 800cab2:	b004      	add	sp, #16
 800cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cab8:	4834      	ldr	r0, [pc, #208]	; (800cb8c <_printf_i+0x244>)
 800caba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cabe:	680e      	ldr	r6, [r1, #0]
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	f856 5b04 	ldr.w	r5, [r6], #4
 800cac6:	061f      	lsls	r7, r3, #24
 800cac8:	600e      	str	r6, [r1, #0]
 800caca:	d514      	bpl.n	800caf6 <_printf_i+0x1ae>
 800cacc:	07d9      	lsls	r1, r3, #31
 800cace:	bf44      	itt	mi
 800cad0:	f043 0320 	orrmi.w	r3, r3, #32
 800cad4:	6023      	strmi	r3, [r4, #0]
 800cad6:	b91d      	cbnz	r5, 800cae0 <_printf_i+0x198>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	f023 0320 	bic.w	r3, r3, #32
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	2310      	movs	r3, #16
 800cae2:	e7af      	b.n	800ca44 <_printf_i+0xfc>
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	f043 0320 	orr.w	r3, r3, #32
 800caea:	6023      	str	r3, [r4, #0]
 800caec:	2378      	movs	r3, #120	; 0x78
 800caee:	4828      	ldr	r0, [pc, #160]	; (800cb90 <_printf_i+0x248>)
 800caf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800caf4:	e7e3      	b.n	800cabe <_printf_i+0x176>
 800caf6:	065e      	lsls	r6, r3, #25
 800caf8:	bf48      	it	mi
 800cafa:	b2ad      	uxthmi	r5, r5
 800cafc:	e7e6      	b.n	800cacc <_printf_i+0x184>
 800cafe:	4616      	mov	r6, r2
 800cb00:	e7bb      	b.n	800ca7a <_printf_i+0x132>
 800cb02:	680b      	ldr	r3, [r1, #0]
 800cb04:	6826      	ldr	r6, [r4, #0]
 800cb06:	1d1d      	adds	r5, r3, #4
 800cb08:	6960      	ldr	r0, [r4, #20]
 800cb0a:	600d      	str	r5, [r1, #0]
 800cb0c:	0635      	lsls	r5, r6, #24
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	d501      	bpl.n	800cb16 <_printf_i+0x1ce>
 800cb12:	6018      	str	r0, [r3, #0]
 800cb14:	e002      	b.n	800cb1c <_printf_i+0x1d4>
 800cb16:	0671      	lsls	r1, r6, #25
 800cb18:	d5fb      	bpl.n	800cb12 <_printf_i+0x1ca>
 800cb1a:	8018      	strh	r0, [r3, #0]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4616      	mov	r6, r2
 800cb20:	6123      	str	r3, [r4, #16]
 800cb22:	e7ba      	b.n	800ca9a <_printf_i+0x152>
 800cb24:	680b      	ldr	r3, [r1, #0]
 800cb26:	1d1a      	adds	r2, r3, #4
 800cb28:	600a      	str	r2, [r1, #0]
 800cb2a:	681e      	ldr	r6, [r3, #0]
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4630      	mov	r0, r6
 800cb30:	6862      	ldr	r2, [r4, #4]
 800cb32:	f002 fb57 	bl	800f1e4 <memchr>
 800cb36:	b108      	cbz	r0, 800cb3c <_printf_i+0x1f4>
 800cb38:	1b80      	subs	r0, r0, r6
 800cb3a:	6060      	str	r0, [r4, #4]
 800cb3c:	6863      	ldr	r3, [r4, #4]
 800cb3e:	6123      	str	r3, [r4, #16]
 800cb40:	2300      	movs	r3, #0
 800cb42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb46:	e7a8      	b.n	800ca9a <_printf_i+0x152>
 800cb48:	4632      	mov	r2, r6
 800cb4a:	4649      	mov	r1, r9
 800cb4c:	4640      	mov	r0, r8
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	47d0      	blx	sl
 800cb52:	3001      	adds	r0, #1
 800cb54:	d0ab      	beq.n	800caae <_printf_i+0x166>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	079b      	lsls	r3, r3, #30
 800cb5a:	d413      	bmi.n	800cb84 <_printf_i+0x23c>
 800cb5c:	68e0      	ldr	r0, [r4, #12]
 800cb5e:	9b03      	ldr	r3, [sp, #12]
 800cb60:	4298      	cmp	r0, r3
 800cb62:	bfb8      	it	lt
 800cb64:	4618      	movlt	r0, r3
 800cb66:	e7a4      	b.n	800cab2 <_printf_i+0x16a>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	4632      	mov	r2, r6
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	4640      	mov	r0, r8
 800cb70:	47d0      	blx	sl
 800cb72:	3001      	adds	r0, #1
 800cb74:	d09b      	beq.n	800caae <_printf_i+0x166>
 800cb76:	3501      	adds	r5, #1
 800cb78:	68e3      	ldr	r3, [r4, #12]
 800cb7a:	9903      	ldr	r1, [sp, #12]
 800cb7c:	1a5b      	subs	r3, r3, r1
 800cb7e:	42ab      	cmp	r3, r5
 800cb80:	dcf2      	bgt.n	800cb68 <_printf_i+0x220>
 800cb82:	e7eb      	b.n	800cb5c <_printf_i+0x214>
 800cb84:	2500      	movs	r5, #0
 800cb86:	f104 0619 	add.w	r6, r4, #25
 800cb8a:	e7f5      	b.n	800cb78 <_printf_i+0x230>
 800cb8c:	08011b8e 	.word	0x08011b8e
 800cb90:	08011b9f 	.word	0x08011b9f

0800cb94 <_scanf_float>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	b087      	sub	sp, #28
 800cb9a:	9303      	str	r3, [sp, #12]
 800cb9c:	688b      	ldr	r3, [r1, #8]
 800cb9e:	4617      	mov	r7, r2
 800cba0:	1e5a      	subs	r2, r3, #1
 800cba2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cba6:	bf85      	ittet	hi
 800cba8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cbac:	195b      	addhi	r3, r3, r5
 800cbae:	2300      	movls	r3, #0
 800cbb0:	9302      	strhi	r3, [sp, #8]
 800cbb2:	bf88      	it	hi
 800cbb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cbb8:	468b      	mov	fp, r1
 800cbba:	f04f 0500 	mov.w	r5, #0
 800cbbe:	bf8c      	ite	hi
 800cbc0:	608b      	strhi	r3, [r1, #8]
 800cbc2:	9302      	strls	r3, [sp, #8]
 800cbc4:	680b      	ldr	r3, [r1, #0]
 800cbc6:	4680      	mov	r8, r0
 800cbc8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cbcc:	f84b 3b1c 	str.w	r3, [fp], #28
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	465e      	mov	r6, fp
 800cbd4:	46aa      	mov	sl, r5
 800cbd6:	46a9      	mov	r9, r5
 800cbd8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cbdc:	9501      	str	r5, [sp, #4]
 800cbde:	68a2      	ldr	r2, [r4, #8]
 800cbe0:	b152      	cbz	r2, 800cbf8 <_scanf_float+0x64>
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	2b4e      	cmp	r3, #78	; 0x4e
 800cbe8:	d864      	bhi.n	800ccb4 <_scanf_float+0x120>
 800cbea:	2b40      	cmp	r3, #64	; 0x40
 800cbec:	d83c      	bhi.n	800cc68 <_scanf_float+0xd4>
 800cbee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cbf2:	b2c8      	uxtb	r0, r1
 800cbf4:	280e      	cmp	r0, #14
 800cbf6:	d93a      	bls.n	800cc6e <_scanf_float+0xda>
 800cbf8:	f1b9 0f00 	cmp.w	r9, #0
 800cbfc:	d003      	beq.n	800cc06 <_scanf_float+0x72>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc0a:	f1ba 0f01 	cmp.w	sl, #1
 800cc0e:	f200 8113 	bhi.w	800ce38 <_scanf_float+0x2a4>
 800cc12:	455e      	cmp	r6, fp
 800cc14:	f200 8105 	bhi.w	800ce22 <_scanf_float+0x28e>
 800cc18:	2501      	movs	r5, #1
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	b007      	add	sp, #28
 800cc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc22:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cc26:	2a0d      	cmp	r2, #13
 800cc28:	d8e6      	bhi.n	800cbf8 <_scanf_float+0x64>
 800cc2a:	a101      	add	r1, pc, #4	; (adr r1, 800cc30 <_scanf_float+0x9c>)
 800cc2c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cc30:	0800cd6f 	.word	0x0800cd6f
 800cc34:	0800cbf9 	.word	0x0800cbf9
 800cc38:	0800cbf9 	.word	0x0800cbf9
 800cc3c:	0800cbf9 	.word	0x0800cbf9
 800cc40:	0800cdcf 	.word	0x0800cdcf
 800cc44:	0800cda7 	.word	0x0800cda7
 800cc48:	0800cbf9 	.word	0x0800cbf9
 800cc4c:	0800cbf9 	.word	0x0800cbf9
 800cc50:	0800cd7d 	.word	0x0800cd7d
 800cc54:	0800cbf9 	.word	0x0800cbf9
 800cc58:	0800cbf9 	.word	0x0800cbf9
 800cc5c:	0800cbf9 	.word	0x0800cbf9
 800cc60:	0800cbf9 	.word	0x0800cbf9
 800cc64:	0800cd35 	.word	0x0800cd35
 800cc68:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cc6c:	e7db      	b.n	800cc26 <_scanf_float+0x92>
 800cc6e:	290e      	cmp	r1, #14
 800cc70:	d8c2      	bhi.n	800cbf8 <_scanf_float+0x64>
 800cc72:	a001      	add	r0, pc, #4	; (adr r0, 800cc78 <_scanf_float+0xe4>)
 800cc74:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cc78:	0800cd27 	.word	0x0800cd27
 800cc7c:	0800cbf9 	.word	0x0800cbf9
 800cc80:	0800cd27 	.word	0x0800cd27
 800cc84:	0800cdbb 	.word	0x0800cdbb
 800cc88:	0800cbf9 	.word	0x0800cbf9
 800cc8c:	0800ccd5 	.word	0x0800ccd5
 800cc90:	0800cd11 	.word	0x0800cd11
 800cc94:	0800cd11 	.word	0x0800cd11
 800cc98:	0800cd11 	.word	0x0800cd11
 800cc9c:	0800cd11 	.word	0x0800cd11
 800cca0:	0800cd11 	.word	0x0800cd11
 800cca4:	0800cd11 	.word	0x0800cd11
 800cca8:	0800cd11 	.word	0x0800cd11
 800ccac:	0800cd11 	.word	0x0800cd11
 800ccb0:	0800cd11 	.word	0x0800cd11
 800ccb4:	2b6e      	cmp	r3, #110	; 0x6e
 800ccb6:	d809      	bhi.n	800cccc <_scanf_float+0x138>
 800ccb8:	2b60      	cmp	r3, #96	; 0x60
 800ccba:	d8b2      	bhi.n	800cc22 <_scanf_float+0x8e>
 800ccbc:	2b54      	cmp	r3, #84	; 0x54
 800ccbe:	d077      	beq.n	800cdb0 <_scanf_float+0x21c>
 800ccc0:	2b59      	cmp	r3, #89	; 0x59
 800ccc2:	d199      	bne.n	800cbf8 <_scanf_float+0x64>
 800ccc4:	2d07      	cmp	r5, #7
 800ccc6:	d197      	bne.n	800cbf8 <_scanf_float+0x64>
 800ccc8:	2508      	movs	r5, #8
 800ccca:	e029      	b.n	800cd20 <_scanf_float+0x18c>
 800cccc:	2b74      	cmp	r3, #116	; 0x74
 800ccce:	d06f      	beq.n	800cdb0 <_scanf_float+0x21c>
 800ccd0:	2b79      	cmp	r3, #121	; 0x79
 800ccd2:	e7f6      	b.n	800ccc2 <_scanf_float+0x12e>
 800ccd4:	6821      	ldr	r1, [r4, #0]
 800ccd6:	05c8      	lsls	r0, r1, #23
 800ccd8:	d51a      	bpl.n	800cd10 <_scanf_float+0x17c>
 800ccda:	9b02      	ldr	r3, [sp, #8]
 800ccdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cce0:	6021      	str	r1, [r4, #0]
 800cce2:	f109 0901 	add.w	r9, r9, #1
 800cce6:	b11b      	cbz	r3, 800ccf0 <_scanf_float+0x15c>
 800cce8:	3b01      	subs	r3, #1
 800ccea:	3201      	adds	r2, #1
 800ccec:	9302      	str	r3, [sp, #8]
 800ccee:	60a2      	str	r2, [r4, #8]
 800ccf0:	68a3      	ldr	r3, [r4, #8]
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	60a3      	str	r3, [r4, #8]
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	6123      	str	r3, [r4, #16]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3b01      	subs	r3, #1
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	607b      	str	r3, [r7, #4]
 800cd04:	f340 8084 	ble.w	800ce10 <_scanf_float+0x27c>
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	603b      	str	r3, [r7, #0]
 800cd0e:	e766      	b.n	800cbde <_scanf_float+0x4a>
 800cd10:	eb1a 0f05 	cmn.w	sl, r5
 800cd14:	f47f af70 	bne.w	800cbf8 <_scanf_float+0x64>
 800cd18:	6822      	ldr	r2, [r4, #0]
 800cd1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cd1e:	6022      	str	r2, [r4, #0]
 800cd20:	f806 3b01 	strb.w	r3, [r6], #1
 800cd24:	e7e4      	b.n	800ccf0 <_scanf_float+0x15c>
 800cd26:	6822      	ldr	r2, [r4, #0]
 800cd28:	0610      	lsls	r0, r2, #24
 800cd2a:	f57f af65 	bpl.w	800cbf8 <_scanf_float+0x64>
 800cd2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd32:	e7f4      	b.n	800cd1e <_scanf_float+0x18a>
 800cd34:	f1ba 0f00 	cmp.w	sl, #0
 800cd38:	d10e      	bne.n	800cd58 <_scanf_float+0x1c4>
 800cd3a:	f1b9 0f00 	cmp.w	r9, #0
 800cd3e:	d10e      	bne.n	800cd5e <_scanf_float+0x1ca>
 800cd40:	6822      	ldr	r2, [r4, #0]
 800cd42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd4a:	d108      	bne.n	800cd5e <_scanf_float+0x1ca>
 800cd4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd50:	f04f 0a01 	mov.w	sl, #1
 800cd54:	6022      	str	r2, [r4, #0]
 800cd56:	e7e3      	b.n	800cd20 <_scanf_float+0x18c>
 800cd58:	f1ba 0f02 	cmp.w	sl, #2
 800cd5c:	d055      	beq.n	800ce0a <_scanf_float+0x276>
 800cd5e:	2d01      	cmp	r5, #1
 800cd60:	d002      	beq.n	800cd68 <_scanf_float+0x1d4>
 800cd62:	2d04      	cmp	r5, #4
 800cd64:	f47f af48 	bne.w	800cbf8 <_scanf_float+0x64>
 800cd68:	3501      	adds	r5, #1
 800cd6a:	b2ed      	uxtb	r5, r5
 800cd6c:	e7d8      	b.n	800cd20 <_scanf_float+0x18c>
 800cd6e:	f1ba 0f01 	cmp.w	sl, #1
 800cd72:	f47f af41 	bne.w	800cbf8 <_scanf_float+0x64>
 800cd76:	f04f 0a02 	mov.w	sl, #2
 800cd7a:	e7d1      	b.n	800cd20 <_scanf_float+0x18c>
 800cd7c:	b97d      	cbnz	r5, 800cd9e <_scanf_float+0x20a>
 800cd7e:	f1b9 0f00 	cmp.w	r9, #0
 800cd82:	f47f af3c 	bne.w	800cbfe <_scanf_float+0x6a>
 800cd86:	6822      	ldr	r2, [r4, #0]
 800cd88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cd8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cd90:	f47f af39 	bne.w	800cc06 <_scanf_float+0x72>
 800cd94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cd98:	2501      	movs	r5, #1
 800cd9a:	6022      	str	r2, [r4, #0]
 800cd9c:	e7c0      	b.n	800cd20 <_scanf_float+0x18c>
 800cd9e:	2d03      	cmp	r5, #3
 800cda0:	d0e2      	beq.n	800cd68 <_scanf_float+0x1d4>
 800cda2:	2d05      	cmp	r5, #5
 800cda4:	e7de      	b.n	800cd64 <_scanf_float+0x1d0>
 800cda6:	2d02      	cmp	r5, #2
 800cda8:	f47f af26 	bne.w	800cbf8 <_scanf_float+0x64>
 800cdac:	2503      	movs	r5, #3
 800cdae:	e7b7      	b.n	800cd20 <_scanf_float+0x18c>
 800cdb0:	2d06      	cmp	r5, #6
 800cdb2:	f47f af21 	bne.w	800cbf8 <_scanf_float+0x64>
 800cdb6:	2507      	movs	r5, #7
 800cdb8:	e7b2      	b.n	800cd20 <_scanf_float+0x18c>
 800cdba:	6822      	ldr	r2, [r4, #0]
 800cdbc:	0591      	lsls	r1, r2, #22
 800cdbe:	f57f af1b 	bpl.w	800cbf8 <_scanf_float+0x64>
 800cdc2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cdc6:	6022      	str	r2, [r4, #0]
 800cdc8:	f8cd 9004 	str.w	r9, [sp, #4]
 800cdcc:	e7a8      	b.n	800cd20 <_scanf_float+0x18c>
 800cdce:	6822      	ldr	r2, [r4, #0]
 800cdd0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cdd4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cdd8:	d006      	beq.n	800cde8 <_scanf_float+0x254>
 800cdda:	0550      	lsls	r0, r2, #21
 800cddc:	f57f af0c 	bpl.w	800cbf8 <_scanf_float+0x64>
 800cde0:	f1b9 0f00 	cmp.w	r9, #0
 800cde4:	f43f af0f 	beq.w	800cc06 <_scanf_float+0x72>
 800cde8:	0591      	lsls	r1, r2, #22
 800cdea:	bf58      	it	pl
 800cdec:	9901      	ldrpl	r1, [sp, #4]
 800cdee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cdf2:	bf58      	it	pl
 800cdf4:	eba9 0101 	subpl.w	r1, r9, r1
 800cdf8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cdfc:	f04f 0900 	mov.w	r9, #0
 800ce00:	bf58      	it	pl
 800ce02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ce06:	6022      	str	r2, [r4, #0]
 800ce08:	e78a      	b.n	800cd20 <_scanf_float+0x18c>
 800ce0a:	f04f 0a03 	mov.w	sl, #3
 800ce0e:	e787      	b.n	800cd20 <_scanf_float+0x18c>
 800ce10:	4639      	mov	r1, r7
 800ce12:	4640      	mov	r0, r8
 800ce14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ce18:	4798      	blx	r3
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	f43f aedf 	beq.w	800cbde <_scanf_float+0x4a>
 800ce20:	e6ea      	b.n	800cbf8 <_scanf_float+0x64>
 800ce22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce26:	463a      	mov	r2, r7
 800ce28:	4640      	mov	r0, r8
 800ce2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce2e:	4798      	blx	r3
 800ce30:	6923      	ldr	r3, [r4, #16]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	6123      	str	r3, [r4, #16]
 800ce36:	e6ec      	b.n	800cc12 <_scanf_float+0x7e>
 800ce38:	1e6b      	subs	r3, r5, #1
 800ce3a:	2b06      	cmp	r3, #6
 800ce3c:	d825      	bhi.n	800ce8a <_scanf_float+0x2f6>
 800ce3e:	2d02      	cmp	r5, #2
 800ce40:	d836      	bhi.n	800ceb0 <_scanf_float+0x31c>
 800ce42:	455e      	cmp	r6, fp
 800ce44:	f67f aee8 	bls.w	800cc18 <_scanf_float+0x84>
 800ce48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce4c:	463a      	mov	r2, r7
 800ce4e:	4640      	mov	r0, r8
 800ce50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ce54:	4798      	blx	r3
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	6123      	str	r3, [r4, #16]
 800ce5c:	e7f1      	b.n	800ce42 <_scanf_float+0x2ae>
 800ce5e:	9802      	ldr	r0, [sp, #8]
 800ce60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ce68:	463a      	mov	r2, r7
 800ce6a:	9002      	str	r0, [sp, #8]
 800ce6c:	4640      	mov	r0, r8
 800ce6e:	4798      	blx	r3
 800ce70:	6923      	ldr	r3, [r4, #16]
 800ce72:	3b01      	subs	r3, #1
 800ce74:	6123      	str	r3, [r4, #16]
 800ce76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce7a:	fa5f fa8a 	uxtb.w	sl, sl
 800ce7e:	f1ba 0f02 	cmp.w	sl, #2
 800ce82:	d1ec      	bne.n	800ce5e <_scanf_float+0x2ca>
 800ce84:	3d03      	subs	r5, #3
 800ce86:	b2ed      	uxtb	r5, r5
 800ce88:	1b76      	subs	r6, r6, r5
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	05da      	lsls	r2, r3, #23
 800ce8e:	d52f      	bpl.n	800cef0 <_scanf_float+0x35c>
 800ce90:	055b      	lsls	r3, r3, #21
 800ce92:	d510      	bpl.n	800ceb6 <_scanf_float+0x322>
 800ce94:	455e      	cmp	r6, fp
 800ce96:	f67f aebf 	bls.w	800cc18 <_scanf_float+0x84>
 800ce9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce9e:	463a      	mov	r2, r7
 800cea0:	4640      	mov	r0, r8
 800cea2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cea6:	4798      	blx	r3
 800cea8:	6923      	ldr	r3, [r4, #16]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	6123      	str	r3, [r4, #16]
 800ceae:	e7f1      	b.n	800ce94 <_scanf_float+0x300>
 800ceb0:	46aa      	mov	sl, r5
 800ceb2:	9602      	str	r6, [sp, #8]
 800ceb4:	e7df      	b.n	800ce76 <_scanf_float+0x2e2>
 800ceb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	2965      	cmp	r1, #101	; 0x65
 800cebe:	f103 33ff 	add.w	r3, r3, #4294967295
 800cec2:	f106 35ff 	add.w	r5, r6, #4294967295
 800cec6:	6123      	str	r3, [r4, #16]
 800cec8:	d00c      	beq.n	800cee4 <_scanf_float+0x350>
 800ceca:	2945      	cmp	r1, #69	; 0x45
 800cecc:	d00a      	beq.n	800cee4 <_scanf_float+0x350>
 800cece:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ced2:	463a      	mov	r2, r7
 800ced4:	4640      	mov	r0, r8
 800ced6:	4798      	blx	r3
 800ced8:	6923      	ldr	r3, [r4, #16]
 800ceda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cede:	3b01      	subs	r3, #1
 800cee0:	1eb5      	subs	r5, r6, #2
 800cee2:	6123      	str	r3, [r4, #16]
 800cee4:	463a      	mov	r2, r7
 800cee6:	4640      	mov	r0, r8
 800cee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ceec:	4798      	blx	r3
 800ceee:	462e      	mov	r6, r5
 800cef0:	6825      	ldr	r5, [r4, #0]
 800cef2:	f015 0510 	ands.w	r5, r5, #16
 800cef6:	d159      	bne.n	800cfac <_scanf_float+0x418>
 800cef8:	7035      	strb	r5, [r6, #0]
 800cefa:	6823      	ldr	r3, [r4, #0]
 800cefc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cf00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf04:	d11c      	bne.n	800cf40 <_scanf_float+0x3ac>
 800cf06:	9b01      	ldr	r3, [sp, #4]
 800cf08:	454b      	cmp	r3, r9
 800cf0a:	eba3 0209 	sub.w	r2, r3, r9
 800cf0e:	d124      	bne.n	800cf5a <_scanf_float+0x3c6>
 800cf10:	2200      	movs	r2, #0
 800cf12:	4659      	mov	r1, fp
 800cf14:	4640      	mov	r0, r8
 800cf16:	f000 fe9b 	bl	800dc50 <_strtod_r>
 800cf1a:	f8d4 c000 	ldr.w	ip, [r4]
 800cf1e:	9b03      	ldr	r3, [sp, #12]
 800cf20:	f01c 0f02 	tst.w	ip, #2
 800cf24:	4606      	mov	r6, r0
 800cf26:	460f      	mov	r7, r1
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	d021      	beq.n	800cf70 <_scanf_float+0x3dc>
 800cf2c:	9903      	ldr	r1, [sp, #12]
 800cf2e:	1d1a      	adds	r2, r3, #4
 800cf30:	600a      	str	r2, [r1, #0]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	e9c3 6700 	strd	r6, r7, [r3]
 800cf38:	68e3      	ldr	r3, [r4, #12]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	60e3      	str	r3, [r4, #12]
 800cf3e:	e66c      	b.n	800cc1a <_scanf_float+0x86>
 800cf40:	9b04      	ldr	r3, [sp, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d0e4      	beq.n	800cf10 <_scanf_float+0x37c>
 800cf46:	9905      	ldr	r1, [sp, #20]
 800cf48:	230a      	movs	r3, #10
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	4640      	mov	r0, r8
 800cf4e:	3101      	adds	r1, #1
 800cf50:	f000 ff0a 	bl	800dd68 <_strtol_r>
 800cf54:	9b04      	ldr	r3, [sp, #16]
 800cf56:	9e05      	ldr	r6, [sp, #20]
 800cf58:	1ac2      	subs	r2, r0, r3
 800cf5a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cf5e:	429e      	cmp	r6, r3
 800cf60:	bf28      	it	cs
 800cf62:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cf66:	4630      	mov	r0, r6
 800cf68:	4911      	ldr	r1, [pc, #68]	; (800cfb0 <_scanf_float+0x41c>)
 800cf6a:	f000 f839 	bl	800cfe0 <siprintf>
 800cf6e:	e7cf      	b.n	800cf10 <_scanf_float+0x37c>
 800cf70:	f01c 0f04 	tst.w	ip, #4
 800cf74:	f103 0e04 	add.w	lr, r3, #4
 800cf78:	d003      	beq.n	800cf82 <_scanf_float+0x3ee>
 800cf7a:	9903      	ldr	r1, [sp, #12]
 800cf7c:	f8c1 e000 	str.w	lr, [r1]
 800cf80:	e7d7      	b.n	800cf32 <_scanf_float+0x39e>
 800cf82:	9a03      	ldr	r2, [sp, #12]
 800cf84:	f8c2 e000 	str.w	lr, [r2]
 800cf88:	f8d3 8000 	ldr.w	r8, [r3]
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	f7f3 fda8 	bl	8000ae4 <__aeabi_dcmpun>
 800cf94:	b128      	cbz	r0, 800cfa2 <_scanf_float+0x40e>
 800cf96:	4807      	ldr	r0, [pc, #28]	; (800cfb4 <_scanf_float+0x420>)
 800cf98:	f000 f81e 	bl	800cfd8 <nanf>
 800cf9c:	f8c8 0000 	str.w	r0, [r8]
 800cfa0:	e7ca      	b.n	800cf38 <_scanf_float+0x3a4>
 800cfa2:	4630      	mov	r0, r6
 800cfa4:	4639      	mov	r1, r7
 800cfa6:	f7f3 fdfb 	bl	8000ba0 <__aeabi_d2f>
 800cfaa:	e7f7      	b.n	800cf9c <_scanf_float+0x408>
 800cfac:	2500      	movs	r5, #0
 800cfae:	e634      	b.n	800cc1a <_scanf_float+0x86>
 800cfb0:	08011bb0 	.word	0x08011bb0
 800cfb4:	08011ee8 	.word	0x08011ee8

0800cfb8 <_sbrk_r>:
 800cfb8:	b538      	push	{r3, r4, r5, lr}
 800cfba:	2300      	movs	r3, #0
 800cfbc:	4d05      	ldr	r5, [pc, #20]	; (800cfd4 <_sbrk_r+0x1c>)
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	4608      	mov	r0, r1
 800cfc2:	602b      	str	r3, [r5, #0]
 800cfc4:	f7fa f9d2 	bl	800736c <_sbrk>
 800cfc8:	1c43      	adds	r3, r0, #1
 800cfca:	d102      	bne.n	800cfd2 <_sbrk_r+0x1a>
 800cfcc:	682b      	ldr	r3, [r5, #0]
 800cfce:	b103      	cbz	r3, 800cfd2 <_sbrk_r+0x1a>
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	bd38      	pop	{r3, r4, r5, pc}
 800cfd4:	20000d18 	.word	0x20000d18

0800cfd8 <nanf>:
 800cfd8:	4800      	ldr	r0, [pc, #0]	; (800cfdc <nanf+0x4>)
 800cfda:	4770      	bx	lr
 800cfdc:	7fc00000 	.word	0x7fc00000

0800cfe0 <siprintf>:
 800cfe0:	b40e      	push	{r1, r2, r3}
 800cfe2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfe6:	b500      	push	{lr}
 800cfe8:	b09c      	sub	sp, #112	; 0x70
 800cfea:	ab1d      	add	r3, sp, #116	; 0x74
 800cfec:	9002      	str	r0, [sp, #8]
 800cfee:	9006      	str	r0, [sp, #24]
 800cff0:	9107      	str	r1, [sp, #28]
 800cff2:	9104      	str	r1, [sp, #16]
 800cff4:	4808      	ldr	r0, [pc, #32]	; (800d018 <siprintf+0x38>)
 800cff6:	4909      	ldr	r1, [pc, #36]	; (800d01c <siprintf+0x3c>)
 800cff8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cffc:	9105      	str	r1, [sp, #20]
 800cffe:	6800      	ldr	r0, [r0, #0]
 800d000:	a902      	add	r1, sp, #8
 800d002:	9301      	str	r3, [sp, #4]
 800d004:	f002 fe38 	bl	800fc78 <_svfiprintf_r>
 800d008:	2200      	movs	r2, #0
 800d00a:	9b02      	ldr	r3, [sp, #8]
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	b01c      	add	sp, #112	; 0x70
 800d010:	f85d eb04 	ldr.w	lr, [sp], #4
 800d014:	b003      	add	sp, #12
 800d016:	4770      	bx	lr
 800d018:	2000004c 	.word	0x2000004c
 800d01c:	ffff0208 	.word	0xffff0208

0800d020 <sulp>:
 800d020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d024:	460f      	mov	r7, r1
 800d026:	4690      	mov	r8, r2
 800d028:	f002 fc74 	bl	800f914 <__ulp>
 800d02c:	4604      	mov	r4, r0
 800d02e:	460d      	mov	r5, r1
 800d030:	f1b8 0f00 	cmp.w	r8, #0
 800d034:	d011      	beq.n	800d05a <sulp+0x3a>
 800d036:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d03a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d03e:	2b00      	cmp	r3, #0
 800d040:	dd0b      	ble.n	800d05a <sulp+0x3a>
 800d042:	2400      	movs	r4, #0
 800d044:	051b      	lsls	r3, r3, #20
 800d046:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d04a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d04e:	4622      	mov	r2, r4
 800d050:	462b      	mov	r3, r5
 800d052:	f7f3 faad 	bl	80005b0 <__aeabi_dmul>
 800d056:	4604      	mov	r4, r0
 800d058:	460d      	mov	r5, r1
 800d05a:	4620      	mov	r0, r4
 800d05c:	4629      	mov	r1, r5
 800d05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d062:	0000      	movs	r0, r0
 800d064:	0000      	movs	r0, r0
	...

0800d068 <_strtod_l>:
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	469b      	mov	fp, r3
 800d06e:	2300      	movs	r3, #0
 800d070:	b0a1      	sub	sp, #132	; 0x84
 800d072:	931c      	str	r3, [sp, #112]	; 0x70
 800d074:	4ba1      	ldr	r3, [pc, #644]	; (800d2fc <_strtod_l+0x294>)
 800d076:	4682      	mov	sl, r0
 800d078:	681f      	ldr	r7, [r3, #0]
 800d07a:	460e      	mov	r6, r1
 800d07c:	4638      	mov	r0, r7
 800d07e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d080:	f7f3 f8d2 	bl	8000228 <strlen>
 800d084:	f04f 0800 	mov.w	r8, #0
 800d088:	4604      	mov	r4, r0
 800d08a:	f04f 0900 	mov.w	r9, #0
 800d08e:	961b      	str	r6, [sp, #108]	; 0x6c
 800d090:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d092:	781a      	ldrb	r2, [r3, #0]
 800d094:	2a2b      	cmp	r2, #43	; 0x2b
 800d096:	d04c      	beq.n	800d132 <_strtod_l+0xca>
 800d098:	d83a      	bhi.n	800d110 <_strtod_l+0xa8>
 800d09a:	2a0d      	cmp	r2, #13
 800d09c:	d833      	bhi.n	800d106 <_strtod_l+0x9e>
 800d09e:	2a08      	cmp	r2, #8
 800d0a0:	d833      	bhi.n	800d10a <_strtod_l+0xa2>
 800d0a2:	2a00      	cmp	r2, #0
 800d0a4:	d03d      	beq.n	800d122 <_strtod_l+0xba>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	930c      	str	r3, [sp, #48]	; 0x30
 800d0aa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d0ac:	782b      	ldrb	r3, [r5, #0]
 800d0ae:	2b30      	cmp	r3, #48	; 0x30
 800d0b0:	f040 80af 	bne.w	800d212 <_strtod_l+0x1aa>
 800d0b4:	786b      	ldrb	r3, [r5, #1]
 800d0b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0ba:	2b58      	cmp	r3, #88	; 0x58
 800d0bc:	d16c      	bne.n	800d198 <_strtod_l+0x130>
 800d0be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0c0:	4650      	mov	r0, sl
 800d0c2:	9301      	str	r3, [sp, #4]
 800d0c4:	ab1c      	add	r3, sp, #112	; 0x70
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	4a8d      	ldr	r2, [pc, #564]	; (800d300 <_strtod_l+0x298>)
 800d0ca:	f8cd b008 	str.w	fp, [sp, #8]
 800d0ce:	ab1d      	add	r3, sp, #116	; 0x74
 800d0d0:	a91b      	add	r1, sp, #108	; 0x6c
 800d0d2:	f001 fd73 	bl	800ebbc <__gethex>
 800d0d6:	f010 0607 	ands.w	r6, r0, #7
 800d0da:	4604      	mov	r4, r0
 800d0dc:	d005      	beq.n	800d0ea <_strtod_l+0x82>
 800d0de:	2e06      	cmp	r6, #6
 800d0e0:	d129      	bne.n	800d136 <_strtod_l+0xce>
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	3501      	adds	r5, #1
 800d0e6:	951b      	str	r5, [sp, #108]	; 0x6c
 800d0e8:	930c      	str	r3, [sp, #48]	; 0x30
 800d0ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f040 8596 	bne.w	800dc1e <_strtod_l+0xbb6>
 800d0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0f4:	b1d3      	cbz	r3, 800d12c <_strtod_l+0xc4>
 800d0f6:	4642      	mov	r2, r8
 800d0f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	4619      	mov	r1, r3
 800d100:	b021      	add	sp, #132	; 0x84
 800d102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d106:	2a20      	cmp	r2, #32
 800d108:	d1cd      	bne.n	800d0a6 <_strtod_l+0x3e>
 800d10a:	3301      	adds	r3, #1
 800d10c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d10e:	e7bf      	b.n	800d090 <_strtod_l+0x28>
 800d110:	2a2d      	cmp	r2, #45	; 0x2d
 800d112:	d1c8      	bne.n	800d0a6 <_strtod_l+0x3e>
 800d114:	2201      	movs	r2, #1
 800d116:	920c      	str	r2, [sp, #48]	; 0x30
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d11c:	785b      	ldrb	r3, [r3, #1]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1c3      	bne.n	800d0aa <_strtod_l+0x42>
 800d122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d124:	961b      	str	r6, [sp, #108]	; 0x6c
 800d126:	2b00      	cmp	r3, #0
 800d128:	f040 8577 	bne.w	800dc1a <_strtod_l+0xbb2>
 800d12c:	4642      	mov	r2, r8
 800d12e:	464b      	mov	r3, r9
 800d130:	e7e4      	b.n	800d0fc <_strtod_l+0x94>
 800d132:	2200      	movs	r2, #0
 800d134:	e7ef      	b.n	800d116 <_strtod_l+0xae>
 800d136:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d138:	b13a      	cbz	r2, 800d14a <_strtod_l+0xe2>
 800d13a:	2135      	movs	r1, #53	; 0x35
 800d13c:	a81e      	add	r0, sp, #120	; 0x78
 800d13e:	f002 fced 	bl	800fb1c <__copybits>
 800d142:	4650      	mov	r0, sl
 800d144:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d146:	f002 f8b5 	bl	800f2b4 <_Bfree>
 800d14a:	3e01      	subs	r6, #1
 800d14c:	2e05      	cmp	r6, #5
 800d14e:	d807      	bhi.n	800d160 <_strtod_l+0xf8>
 800d150:	e8df f006 	tbb	[pc, r6]
 800d154:	1d180b0e 	.word	0x1d180b0e
 800d158:	030e      	.short	0x030e
 800d15a:	f04f 0900 	mov.w	r9, #0
 800d15e:	46c8      	mov	r8, r9
 800d160:	0721      	lsls	r1, r4, #28
 800d162:	d5c2      	bpl.n	800d0ea <_strtod_l+0x82>
 800d164:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800d168:	e7bf      	b.n	800d0ea <_strtod_l+0x82>
 800d16a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800d16e:	e7f7      	b.n	800d160 <_strtod_l+0xf8>
 800d170:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d172:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800d176:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d17a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d17e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d182:	e7ed      	b.n	800d160 <_strtod_l+0xf8>
 800d184:	f04f 0800 	mov.w	r8, #0
 800d188:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d304 <_strtod_l+0x29c>
 800d18c:	e7e8      	b.n	800d160 <_strtod_l+0xf8>
 800d18e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d192:	f04f 38ff 	mov.w	r8, #4294967295
 800d196:	e7e3      	b.n	800d160 <_strtod_l+0xf8>
 800d198:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d19a:	1c5a      	adds	r2, r3, #1
 800d19c:	921b      	str	r2, [sp, #108]	; 0x6c
 800d19e:	785b      	ldrb	r3, [r3, #1]
 800d1a0:	2b30      	cmp	r3, #48	; 0x30
 800d1a2:	d0f9      	beq.n	800d198 <_strtod_l+0x130>
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d0a0      	beq.n	800d0ea <_strtod_l+0x82>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	9307      	str	r3, [sp, #28]
 800d1ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1ae:	220a      	movs	r2, #10
 800d1b0:	9308      	str	r3, [sp, #32]
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	469b      	mov	fp, r3
 800d1b6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d1ba:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d1bc:	7805      	ldrb	r5, [r0, #0]
 800d1be:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d1c2:	b2d9      	uxtb	r1, r3
 800d1c4:	2909      	cmp	r1, #9
 800d1c6:	d926      	bls.n	800d216 <_strtod_l+0x1ae>
 800d1c8:	4622      	mov	r2, r4
 800d1ca:	4639      	mov	r1, r7
 800d1cc:	f002 fe5a 	bl	800fe84 <strncmp>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d032      	beq.n	800d23a <_strtod_l+0x1d2>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	462b      	mov	r3, r5
 800d1d8:	465c      	mov	r4, fp
 800d1da:	4602      	mov	r2, r0
 800d1dc:	9004      	str	r0, [sp, #16]
 800d1de:	2b65      	cmp	r3, #101	; 0x65
 800d1e0:	d001      	beq.n	800d1e6 <_strtod_l+0x17e>
 800d1e2:	2b45      	cmp	r3, #69	; 0x45
 800d1e4:	d113      	bne.n	800d20e <_strtod_l+0x1a6>
 800d1e6:	b91c      	cbnz	r4, 800d1f0 <_strtod_l+0x188>
 800d1e8:	9b07      	ldr	r3, [sp, #28]
 800d1ea:	4303      	orrs	r3, r0
 800d1ec:	d099      	beq.n	800d122 <_strtod_l+0xba>
 800d1ee:	2400      	movs	r4, #0
 800d1f0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d1f2:	1c73      	adds	r3, r6, #1
 800d1f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1f6:	7873      	ldrb	r3, [r6, #1]
 800d1f8:	2b2b      	cmp	r3, #43	; 0x2b
 800d1fa:	d078      	beq.n	800d2ee <_strtod_l+0x286>
 800d1fc:	2b2d      	cmp	r3, #45	; 0x2d
 800d1fe:	d07b      	beq.n	800d2f8 <_strtod_l+0x290>
 800d200:	2700      	movs	r7, #0
 800d202:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d206:	2909      	cmp	r1, #9
 800d208:	f240 8082 	bls.w	800d310 <_strtod_l+0x2a8>
 800d20c:	961b      	str	r6, [sp, #108]	; 0x6c
 800d20e:	2500      	movs	r5, #0
 800d210:	e09e      	b.n	800d350 <_strtod_l+0x2e8>
 800d212:	2300      	movs	r3, #0
 800d214:	e7c9      	b.n	800d1aa <_strtod_l+0x142>
 800d216:	f1bb 0f08 	cmp.w	fp, #8
 800d21a:	bfd5      	itete	le
 800d21c:	9906      	ldrle	r1, [sp, #24]
 800d21e:	9905      	ldrgt	r1, [sp, #20]
 800d220:	fb02 3301 	mlale	r3, r2, r1, r3
 800d224:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d228:	f100 0001 	add.w	r0, r0, #1
 800d22c:	bfd4      	ite	le
 800d22e:	9306      	strle	r3, [sp, #24]
 800d230:	9305      	strgt	r3, [sp, #20]
 800d232:	f10b 0b01 	add.w	fp, fp, #1
 800d236:	901b      	str	r0, [sp, #108]	; 0x6c
 800d238:	e7bf      	b.n	800d1ba <_strtod_l+0x152>
 800d23a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d23c:	191a      	adds	r2, r3, r4
 800d23e:	921b      	str	r2, [sp, #108]	; 0x6c
 800d240:	5d1b      	ldrb	r3, [r3, r4]
 800d242:	f1bb 0f00 	cmp.w	fp, #0
 800d246:	d036      	beq.n	800d2b6 <_strtod_l+0x24e>
 800d248:	465c      	mov	r4, fp
 800d24a:	9004      	str	r0, [sp, #16]
 800d24c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d250:	2a09      	cmp	r2, #9
 800d252:	d912      	bls.n	800d27a <_strtod_l+0x212>
 800d254:	2201      	movs	r2, #1
 800d256:	e7c2      	b.n	800d1de <_strtod_l+0x176>
 800d258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d25a:	3001      	adds	r0, #1
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	921b      	str	r2, [sp, #108]	; 0x6c
 800d260:	785b      	ldrb	r3, [r3, #1]
 800d262:	2b30      	cmp	r3, #48	; 0x30
 800d264:	d0f8      	beq.n	800d258 <_strtod_l+0x1f0>
 800d266:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d26a:	2a08      	cmp	r2, #8
 800d26c:	f200 84dc 	bhi.w	800dc28 <_strtod_l+0xbc0>
 800d270:	9004      	str	r0, [sp, #16]
 800d272:	2000      	movs	r0, #0
 800d274:	4604      	mov	r4, r0
 800d276:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d278:	9208      	str	r2, [sp, #32]
 800d27a:	3b30      	subs	r3, #48	; 0x30
 800d27c:	f100 0201 	add.w	r2, r0, #1
 800d280:	d013      	beq.n	800d2aa <_strtod_l+0x242>
 800d282:	9904      	ldr	r1, [sp, #16]
 800d284:	1905      	adds	r5, r0, r4
 800d286:	4411      	add	r1, r2
 800d288:	9104      	str	r1, [sp, #16]
 800d28a:	4622      	mov	r2, r4
 800d28c:	210a      	movs	r1, #10
 800d28e:	42aa      	cmp	r2, r5
 800d290:	d113      	bne.n	800d2ba <_strtod_l+0x252>
 800d292:	1822      	adds	r2, r4, r0
 800d294:	2a08      	cmp	r2, #8
 800d296:	f104 0401 	add.w	r4, r4, #1
 800d29a:	4404      	add	r4, r0
 800d29c:	dc1b      	bgt.n	800d2d6 <_strtod_l+0x26e>
 800d29e:	220a      	movs	r2, #10
 800d2a0:	9906      	ldr	r1, [sp, #24]
 800d2a2:	fb02 3301 	mla	r3, r2, r1, r3
 800d2a6:	9306      	str	r3, [sp, #24]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	1c59      	adds	r1, r3, #1
 800d2b0:	911b      	str	r1, [sp, #108]	; 0x6c
 800d2b2:	785b      	ldrb	r3, [r3, #1]
 800d2b4:	e7ca      	b.n	800d24c <_strtod_l+0x1e4>
 800d2b6:	4658      	mov	r0, fp
 800d2b8:	e7d3      	b.n	800d262 <_strtod_l+0x1fa>
 800d2ba:	2a08      	cmp	r2, #8
 800d2bc:	dc04      	bgt.n	800d2c8 <_strtod_l+0x260>
 800d2be:	9f06      	ldr	r7, [sp, #24]
 800d2c0:	434f      	muls	r7, r1
 800d2c2:	9706      	str	r7, [sp, #24]
 800d2c4:	3201      	adds	r2, #1
 800d2c6:	e7e2      	b.n	800d28e <_strtod_l+0x226>
 800d2c8:	1c57      	adds	r7, r2, #1
 800d2ca:	2f10      	cmp	r7, #16
 800d2cc:	bfde      	ittt	le
 800d2ce:	9f05      	ldrle	r7, [sp, #20]
 800d2d0:	434f      	mulle	r7, r1
 800d2d2:	9705      	strle	r7, [sp, #20]
 800d2d4:	e7f6      	b.n	800d2c4 <_strtod_l+0x25c>
 800d2d6:	2c10      	cmp	r4, #16
 800d2d8:	bfdf      	itttt	le
 800d2da:	220a      	movle	r2, #10
 800d2dc:	9905      	ldrle	r1, [sp, #20]
 800d2de:	fb02 3301 	mlale	r3, r2, r1, r3
 800d2e2:	9305      	strle	r3, [sp, #20]
 800d2e4:	e7e0      	b.n	800d2a8 <_strtod_l+0x240>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	9304      	str	r3, [sp, #16]
 800d2ec:	e77c      	b.n	800d1e8 <_strtod_l+0x180>
 800d2ee:	2700      	movs	r7, #0
 800d2f0:	1cb3      	adds	r3, r6, #2
 800d2f2:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2f4:	78b3      	ldrb	r3, [r6, #2]
 800d2f6:	e784      	b.n	800d202 <_strtod_l+0x19a>
 800d2f8:	2701      	movs	r7, #1
 800d2fa:	e7f9      	b.n	800d2f0 <_strtod_l+0x288>
 800d2fc:	08011d2c 	.word	0x08011d2c
 800d300:	08011bb8 	.word	0x08011bb8
 800d304:	7ff00000 	.word	0x7ff00000
 800d308:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d30a:	1c59      	adds	r1, r3, #1
 800d30c:	911b      	str	r1, [sp, #108]	; 0x6c
 800d30e:	785b      	ldrb	r3, [r3, #1]
 800d310:	2b30      	cmp	r3, #48	; 0x30
 800d312:	d0f9      	beq.n	800d308 <_strtod_l+0x2a0>
 800d314:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d318:	2908      	cmp	r1, #8
 800d31a:	f63f af78 	bhi.w	800d20e <_strtod_l+0x1a6>
 800d31e:	f04f 0e0a 	mov.w	lr, #10
 800d322:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800d326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d328:	9309      	str	r3, [sp, #36]	; 0x24
 800d32a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d32c:	1c59      	adds	r1, r3, #1
 800d32e:	911b      	str	r1, [sp, #108]	; 0x6c
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800d336:	2d09      	cmp	r5, #9
 800d338:	d935      	bls.n	800d3a6 <_strtod_l+0x33e>
 800d33a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d33c:	1b49      	subs	r1, r1, r5
 800d33e:	2908      	cmp	r1, #8
 800d340:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800d344:	dc02      	bgt.n	800d34c <_strtod_l+0x2e4>
 800d346:	4565      	cmp	r5, ip
 800d348:	bfa8      	it	ge
 800d34a:	4665      	movge	r5, ip
 800d34c:	b107      	cbz	r7, 800d350 <_strtod_l+0x2e8>
 800d34e:	426d      	negs	r5, r5
 800d350:	2c00      	cmp	r4, #0
 800d352:	d14c      	bne.n	800d3ee <_strtod_l+0x386>
 800d354:	9907      	ldr	r1, [sp, #28]
 800d356:	4301      	orrs	r1, r0
 800d358:	f47f aec7 	bne.w	800d0ea <_strtod_l+0x82>
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	f47f aee0 	bne.w	800d122 <_strtod_l+0xba>
 800d362:	2b69      	cmp	r3, #105	; 0x69
 800d364:	d026      	beq.n	800d3b4 <_strtod_l+0x34c>
 800d366:	dc23      	bgt.n	800d3b0 <_strtod_l+0x348>
 800d368:	2b49      	cmp	r3, #73	; 0x49
 800d36a:	d023      	beq.n	800d3b4 <_strtod_l+0x34c>
 800d36c:	2b4e      	cmp	r3, #78	; 0x4e
 800d36e:	f47f aed8 	bne.w	800d122 <_strtod_l+0xba>
 800d372:	499c      	ldr	r1, [pc, #624]	; (800d5e4 <_strtod_l+0x57c>)
 800d374:	a81b      	add	r0, sp, #108	; 0x6c
 800d376:	f001 fe6f 	bl	800f058 <__match>
 800d37a:	2800      	cmp	r0, #0
 800d37c:	f43f aed1 	beq.w	800d122 <_strtod_l+0xba>
 800d380:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b28      	cmp	r3, #40	; 0x28
 800d386:	d12c      	bne.n	800d3e2 <_strtod_l+0x37a>
 800d388:	4997      	ldr	r1, [pc, #604]	; (800d5e8 <_strtod_l+0x580>)
 800d38a:	aa1e      	add	r2, sp, #120	; 0x78
 800d38c:	a81b      	add	r0, sp, #108	; 0x6c
 800d38e:	f001 fe77 	bl	800f080 <__hexnan>
 800d392:	2805      	cmp	r0, #5
 800d394:	d125      	bne.n	800d3e2 <_strtod_l+0x37a>
 800d396:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d398:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d39c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d3a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d3a4:	e6a1      	b.n	800d0ea <_strtod_l+0x82>
 800d3a6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800d3aa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800d3ae:	e7bc      	b.n	800d32a <_strtod_l+0x2c2>
 800d3b0:	2b6e      	cmp	r3, #110	; 0x6e
 800d3b2:	e7dc      	b.n	800d36e <_strtod_l+0x306>
 800d3b4:	498d      	ldr	r1, [pc, #564]	; (800d5ec <_strtod_l+0x584>)
 800d3b6:	a81b      	add	r0, sp, #108	; 0x6c
 800d3b8:	f001 fe4e 	bl	800f058 <__match>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	f43f aeb0 	beq.w	800d122 <_strtod_l+0xba>
 800d3c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3c4:	498a      	ldr	r1, [pc, #552]	; (800d5f0 <_strtod_l+0x588>)
 800d3c6:	3b01      	subs	r3, #1
 800d3c8:	a81b      	add	r0, sp, #108	; 0x6c
 800d3ca:	931b      	str	r3, [sp, #108]	; 0x6c
 800d3cc:	f001 fe44 	bl	800f058 <__match>
 800d3d0:	b910      	cbnz	r0, 800d3d8 <_strtod_l+0x370>
 800d3d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d3d8:	f04f 0800 	mov.w	r8, #0
 800d3dc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800d600 <_strtod_l+0x598>
 800d3e0:	e683      	b.n	800d0ea <_strtod_l+0x82>
 800d3e2:	4884      	ldr	r0, [pc, #528]	; (800d5f4 <_strtod_l+0x58c>)
 800d3e4:	f002 fd48 	bl	800fe78 <nan>
 800d3e8:	4680      	mov	r8, r0
 800d3ea:	4689      	mov	r9, r1
 800d3ec:	e67d      	b.n	800d0ea <_strtod_l+0x82>
 800d3ee:	9b04      	ldr	r3, [sp, #16]
 800d3f0:	f1bb 0f00 	cmp.w	fp, #0
 800d3f4:	bf08      	it	eq
 800d3f6:	46a3      	moveq	fp, r4
 800d3f8:	1aeb      	subs	r3, r5, r3
 800d3fa:	2c10      	cmp	r4, #16
 800d3fc:	9806      	ldr	r0, [sp, #24]
 800d3fe:	4626      	mov	r6, r4
 800d400:	9307      	str	r3, [sp, #28]
 800d402:	bfa8      	it	ge
 800d404:	2610      	movge	r6, #16
 800d406:	f7f3 f859 	bl	80004bc <__aeabi_ui2d>
 800d40a:	2c09      	cmp	r4, #9
 800d40c:	4680      	mov	r8, r0
 800d40e:	4689      	mov	r9, r1
 800d410:	dd13      	ble.n	800d43a <_strtod_l+0x3d2>
 800d412:	4b79      	ldr	r3, [pc, #484]	; (800d5f8 <_strtod_l+0x590>)
 800d414:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d418:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d41c:	f7f3 f8c8 	bl	80005b0 <__aeabi_dmul>
 800d420:	4680      	mov	r8, r0
 800d422:	9805      	ldr	r0, [sp, #20]
 800d424:	4689      	mov	r9, r1
 800d426:	f7f3 f849 	bl	80004bc <__aeabi_ui2d>
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4640      	mov	r0, r8
 800d430:	4649      	mov	r1, r9
 800d432:	f7f2 ff07 	bl	8000244 <__adddf3>
 800d436:	4680      	mov	r8, r0
 800d438:	4689      	mov	r9, r1
 800d43a:	2c0f      	cmp	r4, #15
 800d43c:	dc36      	bgt.n	800d4ac <_strtod_l+0x444>
 800d43e:	9b07      	ldr	r3, [sp, #28]
 800d440:	2b00      	cmp	r3, #0
 800d442:	f43f ae52 	beq.w	800d0ea <_strtod_l+0x82>
 800d446:	dd22      	ble.n	800d48e <_strtod_l+0x426>
 800d448:	2b16      	cmp	r3, #22
 800d44a:	dc09      	bgt.n	800d460 <_strtod_l+0x3f8>
 800d44c:	4c6a      	ldr	r4, [pc, #424]	; (800d5f8 <_strtod_l+0x590>)
 800d44e:	4642      	mov	r2, r8
 800d450:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800d454:	464b      	mov	r3, r9
 800d456:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d45a:	f7f3 f8a9 	bl	80005b0 <__aeabi_dmul>
 800d45e:	e7c3      	b.n	800d3e8 <_strtod_l+0x380>
 800d460:	9a07      	ldr	r2, [sp, #28]
 800d462:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d466:	4293      	cmp	r3, r2
 800d468:	db20      	blt.n	800d4ac <_strtod_l+0x444>
 800d46a:	4d63      	ldr	r5, [pc, #396]	; (800d5f8 <_strtod_l+0x590>)
 800d46c:	f1c4 040f 	rsb	r4, r4, #15
 800d470:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d474:	4642      	mov	r2, r8
 800d476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d47a:	464b      	mov	r3, r9
 800d47c:	f7f3 f898 	bl	80005b0 <__aeabi_dmul>
 800d480:	9b07      	ldr	r3, [sp, #28]
 800d482:	1b1c      	subs	r4, r3, r4
 800d484:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d488:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d48c:	e7e5      	b.n	800d45a <_strtod_l+0x3f2>
 800d48e:	9b07      	ldr	r3, [sp, #28]
 800d490:	3316      	adds	r3, #22
 800d492:	db0b      	blt.n	800d4ac <_strtod_l+0x444>
 800d494:	9b04      	ldr	r3, [sp, #16]
 800d496:	4a58      	ldr	r2, [pc, #352]	; (800d5f8 <_strtod_l+0x590>)
 800d498:	1b5d      	subs	r5, r3, r5
 800d49a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d49e:	4640      	mov	r0, r8
 800d4a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4a4:	4649      	mov	r1, r9
 800d4a6:	f7f3 f9ad 	bl	8000804 <__aeabi_ddiv>
 800d4aa:	e79d      	b.n	800d3e8 <_strtod_l+0x380>
 800d4ac:	9b07      	ldr	r3, [sp, #28]
 800d4ae:	1ba6      	subs	r6, r4, r6
 800d4b0:	441e      	add	r6, r3
 800d4b2:	2e00      	cmp	r6, #0
 800d4b4:	dd71      	ble.n	800d59a <_strtod_l+0x532>
 800d4b6:	f016 030f 	ands.w	r3, r6, #15
 800d4ba:	d00a      	beq.n	800d4d2 <_strtod_l+0x46a>
 800d4bc:	494e      	ldr	r1, [pc, #312]	; (800d5f8 <_strtod_l+0x590>)
 800d4be:	4642      	mov	r2, r8
 800d4c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c8:	464b      	mov	r3, r9
 800d4ca:	f7f3 f871 	bl	80005b0 <__aeabi_dmul>
 800d4ce:	4680      	mov	r8, r0
 800d4d0:	4689      	mov	r9, r1
 800d4d2:	f036 060f 	bics.w	r6, r6, #15
 800d4d6:	d050      	beq.n	800d57a <_strtod_l+0x512>
 800d4d8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800d4dc:	dd27      	ble.n	800d52e <_strtod_l+0x4c6>
 800d4de:	f04f 0b00 	mov.w	fp, #0
 800d4e2:	f8cd b010 	str.w	fp, [sp, #16]
 800d4e6:	f8cd b020 	str.w	fp, [sp, #32]
 800d4ea:	f8cd b018 	str.w	fp, [sp, #24]
 800d4ee:	2322      	movs	r3, #34	; 0x22
 800d4f0:	f04f 0800 	mov.w	r8, #0
 800d4f4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d600 <_strtod_l+0x598>
 800d4f8:	f8ca 3000 	str.w	r3, [sl]
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f43f adf3 	beq.w	800d0ea <_strtod_l+0x82>
 800d504:	4650      	mov	r0, sl
 800d506:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d508:	f001 fed4 	bl	800f2b4 <_Bfree>
 800d50c:	4650      	mov	r0, sl
 800d50e:	9906      	ldr	r1, [sp, #24]
 800d510:	f001 fed0 	bl	800f2b4 <_Bfree>
 800d514:	4650      	mov	r0, sl
 800d516:	9904      	ldr	r1, [sp, #16]
 800d518:	f001 fecc 	bl	800f2b4 <_Bfree>
 800d51c:	4650      	mov	r0, sl
 800d51e:	9908      	ldr	r1, [sp, #32]
 800d520:	f001 fec8 	bl	800f2b4 <_Bfree>
 800d524:	4659      	mov	r1, fp
 800d526:	4650      	mov	r0, sl
 800d528:	f001 fec4 	bl	800f2b4 <_Bfree>
 800d52c:	e5dd      	b.n	800d0ea <_strtod_l+0x82>
 800d52e:	2300      	movs	r3, #0
 800d530:	4640      	mov	r0, r8
 800d532:	4649      	mov	r1, r9
 800d534:	461f      	mov	r7, r3
 800d536:	1136      	asrs	r6, r6, #4
 800d538:	2e01      	cmp	r6, #1
 800d53a:	dc21      	bgt.n	800d580 <_strtod_l+0x518>
 800d53c:	b10b      	cbz	r3, 800d542 <_strtod_l+0x4da>
 800d53e:	4680      	mov	r8, r0
 800d540:	4689      	mov	r9, r1
 800d542:	4b2e      	ldr	r3, [pc, #184]	; (800d5fc <_strtod_l+0x594>)
 800d544:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d548:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d54c:	4642      	mov	r2, r8
 800d54e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d552:	464b      	mov	r3, r9
 800d554:	f7f3 f82c 	bl	80005b0 <__aeabi_dmul>
 800d558:	4b29      	ldr	r3, [pc, #164]	; (800d600 <_strtod_l+0x598>)
 800d55a:	460a      	mov	r2, r1
 800d55c:	400b      	ands	r3, r1
 800d55e:	4929      	ldr	r1, [pc, #164]	; (800d604 <_strtod_l+0x59c>)
 800d560:	4680      	mov	r8, r0
 800d562:	428b      	cmp	r3, r1
 800d564:	d8bb      	bhi.n	800d4de <_strtod_l+0x476>
 800d566:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d56a:	428b      	cmp	r3, r1
 800d56c:	bf86      	itte	hi
 800d56e:	f04f 38ff 	movhi.w	r8, #4294967295
 800d572:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800d608 <_strtod_l+0x5a0>
 800d576:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d57a:	2300      	movs	r3, #0
 800d57c:	9305      	str	r3, [sp, #20]
 800d57e:	e07e      	b.n	800d67e <_strtod_l+0x616>
 800d580:	07f2      	lsls	r2, r6, #31
 800d582:	d507      	bpl.n	800d594 <_strtod_l+0x52c>
 800d584:	4b1d      	ldr	r3, [pc, #116]	; (800d5fc <_strtod_l+0x594>)
 800d586:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58e:	f7f3 f80f 	bl	80005b0 <__aeabi_dmul>
 800d592:	2301      	movs	r3, #1
 800d594:	3701      	adds	r7, #1
 800d596:	1076      	asrs	r6, r6, #1
 800d598:	e7ce      	b.n	800d538 <_strtod_l+0x4d0>
 800d59a:	d0ee      	beq.n	800d57a <_strtod_l+0x512>
 800d59c:	4276      	negs	r6, r6
 800d59e:	f016 020f 	ands.w	r2, r6, #15
 800d5a2:	d00a      	beq.n	800d5ba <_strtod_l+0x552>
 800d5a4:	4b14      	ldr	r3, [pc, #80]	; (800d5f8 <_strtod_l+0x590>)
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ac:	4649      	mov	r1, r9
 800d5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b2:	f7f3 f927 	bl	8000804 <__aeabi_ddiv>
 800d5b6:	4680      	mov	r8, r0
 800d5b8:	4689      	mov	r9, r1
 800d5ba:	1136      	asrs	r6, r6, #4
 800d5bc:	d0dd      	beq.n	800d57a <_strtod_l+0x512>
 800d5be:	2e1f      	cmp	r6, #31
 800d5c0:	dd24      	ble.n	800d60c <_strtod_l+0x5a4>
 800d5c2:	f04f 0b00 	mov.w	fp, #0
 800d5c6:	f8cd b010 	str.w	fp, [sp, #16]
 800d5ca:	f8cd b020 	str.w	fp, [sp, #32]
 800d5ce:	f8cd b018 	str.w	fp, [sp, #24]
 800d5d2:	2322      	movs	r3, #34	; 0x22
 800d5d4:	f04f 0800 	mov.w	r8, #0
 800d5d8:	f04f 0900 	mov.w	r9, #0
 800d5dc:	f8ca 3000 	str.w	r3, [sl]
 800d5e0:	e78c      	b.n	800d4fc <_strtod_l+0x494>
 800d5e2:	bf00      	nop
 800d5e4:	08011b89 	.word	0x08011b89
 800d5e8:	08011bcc 	.word	0x08011bcc
 800d5ec:	08011b81 	.word	0x08011b81
 800d5f0:	08011c30 	.word	0x08011c30
 800d5f4:	08011ee8 	.word	0x08011ee8
 800d5f8:	08011dc8 	.word	0x08011dc8
 800d5fc:	08011da0 	.word	0x08011da0
 800d600:	7ff00000 	.word	0x7ff00000
 800d604:	7ca00000 	.word	0x7ca00000
 800d608:	7fefffff 	.word	0x7fefffff
 800d60c:	f016 0310 	ands.w	r3, r6, #16
 800d610:	bf18      	it	ne
 800d612:	236a      	movne	r3, #106	; 0x6a
 800d614:	4640      	mov	r0, r8
 800d616:	9305      	str	r3, [sp, #20]
 800d618:	4649      	mov	r1, r9
 800d61a:	2300      	movs	r3, #0
 800d61c:	4fb2      	ldr	r7, [pc, #712]	; (800d8e8 <_strtod_l+0x880>)
 800d61e:	07f2      	lsls	r2, r6, #31
 800d620:	d504      	bpl.n	800d62c <_strtod_l+0x5c4>
 800d622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d626:	f7f2 ffc3 	bl	80005b0 <__aeabi_dmul>
 800d62a:	2301      	movs	r3, #1
 800d62c:	1076      	asrs	r6, r6, #1
 800d62e:	f107 0708 	add.w	r7, r7, #8
 800d632:	d1f4      	bne.n	800d61e <_strtod_l+0x5b6>
 800d634:	b10b      	cbz	r3, 800d63a <_strtod_l+0x5d2>
 800d636:	4680      	mov	r8, r0
 800d638:	4689      	mov	r9, r1
 800d63a:	9b05      	ldr	r3, [sp, #20]
 800d63c:	b1bb      	cbz	r3, 800d66e <_strtod_l+0x606>
 800d63e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800d642:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d646:	2b00      	cmp	r3, #0
 800d648:	4649      	mov	r1, r9
 800d64a:	dd10      	ble.n	800d66e <_strtod_l+0x606>
 800d64c:	2b1f      	cmp	r3, #31
 800d64e:	f340 812b 	ble.w	800d8a8 <_strtod_l+0x840>
 800d652:	2b34      	cmp	r3, #52	; 0x34
 800d654:	bfd8      	it	le
 800d656:	f04f 32ff 	movle.w	r2, #4294967295
 800d65a:	f04f 0800 	mov.w	r8, #0
 800d65e:	bfcf      	iteee	gt
 800d660:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d664:	3b20      	suble	r3, #32
 800d666:	fa02 f303 	lslle.w	r3, r2, r3
 800d66a:	ea03 0901 	andle.w	r9, r3, r1
 800d66e:	2200      	movs	r2, #0
 800d670:	2300      	movs	r3, #0
 800d672:	4640      	mov	r0, r8
 800d674:	4649      	mov	r1, r9
 800d676:	f7f3 fa03 	bl	8000a80 <__aeabi_dcmpeq>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d1a1      	bne.n	800d5c2 <_strtod_l+0x55a>
 800d67e:	9b06      	ldr	r3, [sp, #24]
 800d680:	465a      	mov	r2, fp
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	4650      	mov	r0, sl
 800d686:	4623      	mov	r3, r4
 800d688:	9908      	ldr	r1, [sp, #32]
 800d68a:	f001 fe7f 	bl	800f38c <__s2b>
 800d68e:	9008      	str	r0, [sp, #32]
 800d690:	2800      	cmp	r0, #0
 800d692:	f43f af24 	beq.w	800d4de <_strtod_l+0x476>
 800d696:	9b04      	ldr	r3, [sp, #16]
 800d698:	f04f 0b00 	mov.w	fp, #0
 800d69c:	1b5d      	subs	r5, r3, r5
 800d69e:	9b07      	ldr	r3, [sp, #28]
 800d6a0:	f8cd b010 	str.w	fp, [sp, #16]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	bfb4      	ite	lt
 800d6a8:	462b      	movlt	r3, r5
 800d6aa:	2300      	movge	r3, #0
 800d6ac:	930e      	str	r3, [sp, #56]	; 0x38
 800d6ae:	9b07      	ldr	r3, [sp, #28]
 800d6b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d6b4:	9316      	str	r3, [sp, #88]	; 0x58
 800d6b6:	9b08      	ldr	r3, [sp, #32]
 800d6b8:	4650      	mov	r0, sl
 800d6ba:	6859      	ldr	r1, [r3, #4]
 800d6bc:	f001 fdba 	bl	800f234 <_Balloc>
 800d6c0:	9006      	str	r0, [sp, #24]
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	f43f af13 	beq.w	800d4ee <_strtod_l+0x486>
 800d6c8:	9b08      	ldr	r3, [sp, #32]
 800d6ca:	300c      	adds	r0, #12
 800d6cc:	691a      	ldr	r2, [r3, #16]
 800d6ce:	f103 010c 	add.w	r1, r3, #12
 800d6d2:	3202      	adds	r2, #2
 800d6d4:	0092      	lsls	r2, r2, #2
 800d6d6:	f001 fd93 	bl	800f200 <memcpy>
 800d6da:	ab1e      	add	r3, sp, #120	; 0x78
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	ab1d      	add	r3, sp, #116	; 0x74
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	4642      	mov	r2, r8
 800d6e4:	464b      	mov	r3, r9
 800d6e6:	4650      	mov	r0, sl
 800d6e8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800d6ec:	f002 f98c 	bl	800fa08 <__d2b>
 800d6f0:	901c      	str	r0, [sp, #112]	; 0x70
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	f43f aefb 	beq.w	800d4ee <_strtod_l+0x486>
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	f001 fede 	bl	800f4bc <__i2b>
 800d700:	4603      	mov	r3, r0
 800d702:	9004      	str	r0, [sp, #16]
 800d704:	2800      	cmp	r0, #0
 800d706:	f43f aef2 	beq.w	800d4ee <_strtod_l+0x486>
 800d70a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800d70c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d70e:	2d00      	cmp	r5, #0
 800d710:	bfab      	itete	ge
 800d712:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d714:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d716:	18ee      	addge	r6, r5, r3
 800d718:	1b5c      	sublt	r4, r3, r5
 800d71a:	9b05      	ldr	r3, [sp, #20]
 800d71c:	bfa8      	it	ge
 800d71e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800d720:	eba5 0503 	sub.w	r5, r5, r3
 800d724:	4415      	add	r5, r2
 800d726:	4b71      	ldr	r3, [pc, #452]	; (800d8ec <_strtod_l+0x884>)
 800d728:	f105 35ff 	add.w	r5, r5, #4294967295
 800d72c:	bfb8      	it	lt
 800d72e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800d730:	429d      	cmp	r5, r3
 800d732:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d736:	f280 80c9 	bge.w	800d8cc <_strtod_l+0x864>
 800d73a:	1b5b      	subs	r3, r3, r5
 800d73c:	2b1f      	cmp	r3, #31
 800d73e:	f04f 0701 	mov.w	r7, #1
 800d742:	eba2 0203 	sub.w	r2, r2, r3
 800d746:	f300 80b6 	bgt.w	800d8b6 <_strtod_l+0x84e>
 800d74a:	2500      	movs	r5, #0
 800d74c:	fa07 f303 	lsl.w	r3, r7, r3
 800d750:	930f      	str	r3, [sp, #60]	; 0x3c
 800d752:	18b7      	adds	r7, r6, r2
 800d754:	9b05      	ldr	r3, [sp, #20]
 800d756:	42be      	cmp	r6, r7
 800d758:	4414      	add	r4, r2
 800d75a:	441c      	add	r4, r3
 800d75c:	4633      	mov	r3, r6
 800d75e:	bfa8      	it	ge
 800d760:	463b      	movge	r3, r7
 800d762:	42a3      	cmp	r3, r4
 800d764:	bfa8      	it	ge
 800d766:	4623      	movge	r3, r4
 800d768:	2b00      	cmp	r3, #0
 800d76a:	bfc2      	ittt	gt
 800d76c:	1aff      	subgt	r7, r7, r3
 800d76e:	1ae4      	subgt	r4, r4, r3
 800d770:	1af6      	subgt	r6, r6, r3
 800d772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d774:	2b00      	cmp	r3, #0
 800d776:	dd17      	ble.n	800d7a8 <_strtod_l+0x740>
 800d778:	461a      	mov	r2, r3
 800d77a:	4650      	mov	r0, sl
 800d77c:	9904      	ldr	r1, [sp, #16]
 800d77e:	f001 ff57 	bl	800f630 <__pow5mult>
 800d782:	9004      	str	r0, [sp, #16]
 800d784:	2800      	cmp	r0, #0
 800d786:	f43f aeb2 	beq.w	800d4ee <_strtod_l+0x486>
 800d78a:	4601      	mov	r1, r0
 800d78c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d78e:	4650      	mov	r0, sl
 800d790:	f001 feaa 	bl	800f4e8 <__multiply>
 800d794:	9009      	str	r0, [sp, #36]	; 0x24
 800d796:	2800      	cmp	r0, #0
 800d798:	f43f aea9 	beq.w	800d4ee <_strtod_l+0x486>
 800d79c:	4650      	mov	r0, sl
 800d79e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7a0:	f001 fd88 	bl	800f2b4 <_Bfree>
 800d7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a6:	931c      	str	r3, [sp, #112]	; 0x70
 800d7a8:	2f00      	cmp	r7, #0
 800d7aa:	f300 8093 	bgt.w	800d8d4 <_strtod_l+0x86c>
 800d7ae:	9b07      	ldr	r3, [sp, #28]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	dd08      	ble.n	800d7c6 <_strtod_l+0x75e>
 800d7b4:	4650      	mov	r0, sl
 800d7b6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7b8:	9906      	ldr	r1, [sp, #24]
 800d7ba:	f001 ff39 	bl	800f630 <__pow5mult>
 800d7be:	9006      	str	r0, [sp, #24]
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	f43f ae94 	beq.w	800d4ee <_strtod_l+0x486>
 800d7c6:	2c00      	cmp	r4, #0
 800d7c8:	dd08      	ble.n	800d7dc <_strtod_l+0x774>
 800d7ca:	4622      	mov	r2, r4
 800d7cc:	4650      	mov	r0, sl
 800d7ce:	9906      	ldr	r1, [sp, #24]
 800d7d0:	f001 ff88 	bl	800f6e4 <__lshift>
 800d7d4:	9006      	str	r0, [sp, #24]
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	f43f ae89 	beq.w	800d4ee <_strtod_l+0x486>
 800d7dc:	2e00      	cmp	r6, #0
 800d7de:	dd08      	ble.n	800d7f2 <_strtod_l+0x78a>
 800d7e0:	4632      	mov	r2, r6
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	9904      	ldr	r1, [sp, #16]
 800d7e6:	f001 ff7d 	bl	800f6e4 <__lshift>
 800d7ea:	9004      	str	r0, [sp, #16]
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f43f ae7e 	beq.w	800d4ee <_strtod_l+0x486>
 800d7f2:	4650      	mov	r0, sl
 800d7f4:	9a06      	ldr	r2, [sp, #24]
 800d7f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7f8:	f001 fffc 	bl	800f7f4 <__mdiff>
 800d7fc:	4683      	mov	fp, r0
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f43f ae75 	beq.w	800d4ee <_strtod_l+0x486>
 800d804:	2400      	movs	r4, #0
 800d806:	68c3      	ldr	r3, [r0, #12]
 800d808:	9904      	ldr	r1, [sp, #16]
 800d80a:	60c4      	str	r4, [r0, #12]
 800d80c:	930d      	str	r3, [sp, #52]	; 0x34
 800d80e:	f001 ffd5 	bl	800f7bc <__mcmp>
 800d812:	42a0      	cmp	r0, r4
 800d814:	da70      	bge.n	800d8f8 <_strtod_l+0x890>
 800d816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d818:	ea53 0308 	orrs.w	r3, r3, r8
 800d81c:	f040 8096 	bne.w	800d94c <_strtod_l+0x8e4>
 800d820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d824:	2b00      	cmp	r3, #0
 800d826:	f040 8091 	bne.w	800d94c <_strtod_l+0x8e4>
 800d82a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d82e:	0d1b      	lsrs	r3, r3, #20
 800d830:	051b      	lsls	r3, r3, #20
 800d832:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d836:	f240 8089 	bls.w	800d94c <_strtod_l+0x8e4>
 800d83a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800d83e:	b923      	cbnz	r3, 800d84a <_strtod_l+0x7e2>
 800d840:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d844:	2b01      	cmp	r3, #1
 800d846:	f340 8081 	ble.w	800d94c <_strtod_l+0x8e4>
 800d84a:	4659      	mov	r1, fp
 800d84c:	2201      	movs	r2, #1
 800d84e:	4650      	mov	r0, sl
 800d850:	f001 ff48 	bl	800f6e4 <__lshift>
 800d854:	9904      	ldr	r1, [sp, #16]
 800d856:	4683      	mov	fp, r0
 800d858:	f001 ffb0 	bl	800f7bc <__mcmp>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	dd75      	ble.n	800d94c <_strtod_l+0x8e4>
 800d860:	9905      	ldr	r1, [sp, #20]
 800d862:	464b      	mov	r3, r9
 800d864:	4a22      	ldr	r2, [pc, #136]	; (800d8f0 <_strtod_l+0x888>)
 800d866:	2900      	cmp	r1, #0
 800d868:	f000 8091 	beq.w	800d98e <_strtod_l+0x926>
 800d86c:	ea02 0109 	and.w	r1, r2, r9
 800d870:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d874:	f300 808b 	bgt.w	800d98e <_strtod_l+0x926>
 800d878:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d87c:	f77f aea9 	ble.w	800d5d2 <_strtod_l+0x56a>
 800d880:	2300      	movs	r3, #0
 800d882:	4a1c      	ldr	r2, [pc, #112]	; (800d8f4 <_strtod_l+0x88c>)
 800d884:	4640      	mov	r0, r8
 800d886:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d88a:	4649      	mov	r1, r9
 800d88c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d890:	f7f2 fe8e 	bl	80005b0 <__aeabi_dmul>
 800d894:	460b      	mov	r3, r1
 800d896:	4303      	orrs	r3, r0
 800d898:	bf08      	it	eq
 800d89a:	2322      	moveq	r3, #34	; 0x22
 800d89c:	4680      	mov	r8, r0
 800d89e:	4689      	mov	r9, r1
 800d8a0:	bf08      	it	eq
 800d8a2:	f8ca 3000 	streq.w	r3, [sl]
 800d8a6:	e62d      	b.n	800d504 <_strtod_l+0x49c>
 800d8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b0:	ea03 0808 	and.w	r8, r3, r8
 800d8b4:	e6db      	b.n	800d66e <_strtod_l+0x606>
 800d8b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800d8ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800d8be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800d8c2:	35e2      	adds	r5, #226	; 0xe2
 800d8c4:	fa07 f505 	lsl.w	r5, r7, r5
 800d8c8:	970f      	str	r7, [sp, #60]	; 0x3c
 800d8ca:	e742      	b.n	800d752 <_strtod_l+0x6ea>
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	2500      	movs	r5, #0
 800d8d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8d2:	e73e      	b.n	800d752 <_strtod_l+0x6ea>
 800d8d4:	463a      	mov	r2, r7
 800d8d6:	4650      	mov	r0, sl
 800d8d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d8da:	f001 ff03 	bl	800f6e4 <__lshift>
 800d8de:	901c      	str	r0, [sp, #112]	; 0x70
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	f47f af64 	bne.w	800d7ae <_strtod_l+0x746>
 800d8e6:	e602      	b.n	800d4ee <_strtod_l+0x486>
 800d8e8:	08011be0 	.word	0x08011be0
 800d8ec:	fffffc02 	.word	0xfffffc02
 800d8f0:	7ff00000 	.word	0x7ff00000
 800d8f4:	39500000 	.word	0x39500000
 800d8f8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d8fc:	d166      	bne.n	800d9cc <_strtod_l+0x964>
 800d8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d904:	b35a      	cbz	r2, 800d95e <_strtod_l+0x8f6>
 800d906:	4a9c      	ldr	r2, [pc, #624]	; (800db78 <_strtod_l+0xb10>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d12c      	bne.n	800d966 <_strtod_l+0x8fe>
 800d90c:	9b05      	ldr	r3, [sp, #20]
 800d90e:	4640      	mov	r0, r8
 800d910:	b303      	cbz	r3, 800d954 <_strtod_l+0x8ec>
 800d912:	464b      	mov	r3, r9
 800d914:	4a99      	ldr	r2, [pc, #612]	; (800db7c <_strtod_l+0xb14>)
 800d916:	f04f 31ff 	mov.w	r1, #4294967295
 800d91a:	401a      	ands	r2, r3
 800d91c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d920:	d81b      	bhi.n	800d95a <_strtod_l+0x8f2>
 800d922:	0d12      	lsrs	r2, r2, #20
 800d924:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d928:	fa01 f303 	lsl.w	r3, r1, r3
 800d92c:	4298      	cmp	r0, r3
 800d92e:	d11a      	bne.n	800d966 <_strtod_l+0x8fe>
 800d930:	4b93      	ldr	r3, [pc, #588]	; (800db80 <_strtod_l+0xb18>)
 800d932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d934:	429a      	cmp	r2, r3
 800d936:	d102      	bne.n	800d93e <_strtod_l+0x8d6>
 800d938:	3001      	adds	r0, #1
 800d93a:	f43f add8 	beq.w	800d4ee <_strtod_l+0x486>
 800d93e:	f04f 0800 	mov.w	r8, #0
 800d942:	4b8e      	ldr	r3, [pc, #568]	; (800db7c <_strtod_l+0xb14>)
 800d944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d946:	401a      	ands	r2, r3
 800d948:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800d94c:	9b05      	ldr	r3, [sp, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d196      	bne.n	800d880 <_strtod_l+0x818>
 800d952:	e5d7      	b.n	800d504 <_strtod_l+0x49c>
 800d954:	f04f 33ff 	mov.w	r3, #4294967295
 800d958:	e7e8      	b.n	800d92c <_strtod_l+0x8c4>
 800d95a:	460b      	mov	r3, r1
 800d95c:	e7e6      	b.n	800d92c <_strtod_l+0x8c4>
 800d95e:	ea53 0308 	orrs.w	r3, r3, r8
 800d962:	f43f af7d 	beq.w	800d860 <_strtod_l+0x7f8>
 800d966:	b1e5      	cbz	r5, 800d9a2 <_strtod_l+0x93a>
 800d968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d96a:	421d      	tst	r5, r3
 800d96c:	d0ee      	beq.n	800d94c <_strtod_l+0x8e4>
 800d96e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d970:	4640      	mov	r0, r8
 800d972:	4649      	mov	r1, r9
 800d974:	9a05      	ldr	r2, [sp, #20]
 800d976:	b1c3      	cbz	r3, 800d9aa <_strtod_l+0x942>
 800d978:	f7ff fb52 	bl	800d020 <sulp>
 800d97c:	4602      	mov	r2, r0
 800d97e:	460b      	mov	r3, r1
 800d980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d984:	f7f2 fc5e 	bl	8000244 <__adddf3>
 800d988:	4680      	mov	r8, r0
 800d98a:	4689      	mov	r9, r1
 800d98c:	e7de      	b.n	800d94c <_strtod_l+0x8e4>
 800d98e:	4013      	ands	r3, r2
 800d990:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d994:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d998:	f04f 38ff 	mov.w	r8, #4294967295
 800d99c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d9a0:	e7d4      	b.n	800d94c <_strtod_l+0x8e4>
 800d9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9a4:	ea13 0f08 	tst.w	r3, r8
 800d9a8:	e7e0      	b.n	800d96c <_strtod_l+0x904>
 800d9aa:	f7ff fb39 	bl	800d020 <sulp>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d9b6:	f7f2 fc43 	bl	8000240 <__aeabi_dsub>
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4680      	mov	r8, r0
 800d9c0:	4689      	mov	r9, r1
 800d9c2:	f7f3 f85d 	bl	8000a80 <__aeabi_dcmpeq>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d0c0      	beq.n	800d94c <_strtod_l+0x8e4>
 800d9ca:	e602      	b.n	800d5d2 <_strtod_l+0x56a>
 800d9cc:	4658      	mov	r0, fp
 800d9ce:	9904      	ldr	r1, [sp, #16]
 800d9d0:	f002 f876 	bl	800fac0 <__ratio>
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9da:	4606      	mov	r6, r0
 800d9dc:	460f      	mov	r7, r1
 800d9de:	f7f3 f863 	bl	8000aa8 <__aeabi_dcmple>
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d075      	beq.n	800dad2 <_strtod_l+0xa6a>
 800d9e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d047      	beq.n	800da7c <_strtod_l+0xa14>
 800d9ec:	2600      	movs	r6, #0
 800d9ee:	4f65      	ldr	r7, [pc, #404]	; (800db84 <_strtod_l+0xb1c>)
 800d9f0:	4d64      	ldr	r5, [pc, #400]	; (800db84 <_strtod_l+0xb1c>)
 800d9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9f8:	0d1b      	lsrs	r3, r3, #20
 800d9fa:	051b      	lsls	r3, r3, #20
 800d9fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da00:	4b61      	ldr	r3, [pc, #388]	; (800db88 <_strtod_l+0xb20>)
 800da02:	429a      	cmp	r2, r3
 800da04:	f040 80c8 	bne.w	800db98 <_strtod_l+0xb30>
 800da08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da0c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800da10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da12:	4640      	mov	r0, r8
 800da14:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800da18:	4649      	mov	r1, r9
 800da1a:	f001 ff7b 	bl	800f914 <__ulp>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	4630      	mov	r0, r6
 800da24:	4639      	mov	r1, r7
 800da26:	f7f2 fdc3 	bl	80005b0 <__aeabi_dmul>
 800da2a:	4642      	mov	r2, r8
 800da2c:	464b      	mov	r3, r9
 800da2e:	f7f2 fc09 	bl	8000244 <__adddf3>
 800da32:	460b      	mov	r3, r1
 800da34:	4951      	ldr	r1, [pc, #324]	; (800db7c <_strtod_l+0xb14>)
 800da36:	4a55      	ldr	r2, [pc, #340]	; (800db8c <_strtod_l+0xb24>)
 800da38:	4019      	ands	r1, r3
 800da3a:	4291      	cmp	r1, r2
 800da3c:	4680      	mov	r8, r0
 800da3e:	d95e      	bls.n	800dafe <_strtod_l+0xa96>
 800da40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da42:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da46:	4293      	cmp	r3, r2
 800da48:	d103      	bne.n	800da52 <_strtod_l+0x9ea>
 800da4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da4c:	3301      	adds	r3, #1
 800da4e:	f43f ad4e 	beq.w	800d4ee <_strtod_l+0x486>
 800da52:	f04f 38ff 	mov.w	r8, #4294967295
 800da56:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800db80 <_strtod_l+0xb18>
 800da5a:	4650      	mov	r0, sl
 800da5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800da5e:	f001 fc29 	bl	800f2b4 <_Bfree>
 800da62:	4650      	mov	r0, sl
 800da64:	9906      	ldr	r1, [sp, #24]
 800da66:	f001 fc25 	bl	800f2b4 <_Bfree>
 800da6a:	4650      	mov	r0, sl
 800da6c:	9904      	ldr	r1, [sp, #16]
 800da6e:	f001 fc21 	bl	800f2b4 <_Bfree>
 800da72:	4659      	mov	r1, fp
 800da74:	4650      	mov	r0, sl
 800da76:	f001 fc1d 	bl	800f2b4 <_Bfree>
 800da7a:	e61c      	b.n	800d6b6 <_strtod_l+0x64e>
 800da7c:	f1b8 0f00 	cmp.w	r8, #0
 800da80:	d119      	bne.n	800dab6 <_strtod_l+0xa4e>
 800da82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da88:	b9e3      	cbnz	r3, 800dac4 <_strtod_l+0xa5c>
 800da8a:	2200      	movs	r2, #0
 800da8c:	4630      	mov	r0, r6
 800da8e:	4639      	mov	r1, r7
 800da90:	4b3c      	ldr	r3, [pc, #240]	; (800db84 <_strtod_l+0xb1c>)
 800da92:	f7f2 ffff 	bl	8000a94 <__aeabi_dcmplt>
 800da96:	b9c8      	cbnz	r0, 800dacc <_strtod_l+0xa64>
 800da98:	2200      	movs	r2, #0
 800da9a:	4630      	mov	r0, r6
 800da9c:	4639      	mov	r1, r7
 800da9e:	4b3c      	ldr	r3, [pc, #240]	; (800db90 <_strtod_l+0xb28>)
 800daa0:	f7f2 fd86 	bl	80005b0 <__aeabi_dmul>
 800daa4:	4604      	mov	r4, r0
 800daa6:	460d      	mov	r5, r1
 800daa8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800daac:	9418      	str	r4, [sp, #96]	; 0x60
 800daae:	9319      	str	r3, [sp, #100]	; 0x64
 800dab0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800dab4:	e79d      	b.n	800d9f2 <_strtod_l+0x98a>
 800dab6:	f1b8 0f01 	cmp.w	r8, #1
 800daba:	d103      	bne.n	800dac4 <_strtod_l+0xa5c>
 800dabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f43f ad87 	beq.w	800d5d2 <_strtod_l+0x56a>
 800dac4:	2600      	movs	r6, #0
 800dac6:	2400      	movs	r4, #0
 800dac8:	4f32      	ldr	r7, [pc, #200]	; (800db94 <_strtod_l+0xb2c>)
 800daca:	e791      	b.n	800d9f0 <_strtod_l+0x988>
 800dacc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800dace:	4d30      	ldr	r5, [pc, #192]	; (800db90 <_strtod_l+0xb28>)
 800dad0:	e7ea      	b.n	800daa8 <_strtod_l+0xa40>
 800dad2:	4b2f      	ldr	r3, [pc, #188]	; (800db90 <_strtod_l+0xb28>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	4630      	mov	r0, r6
 800dad8:	4639      	mov	r1, r7
 800dada:	f7f2 fd69 	bl	80005b0 <__aeabi_dmul>
 800dade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	b933      	cbnz	r3, 800daf4 <_strtod_l+0xa8c>
 800dae6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800daea:	9010      	str	r0, [sp, #64]	; 0x40
 800daec:	9311      	str	r3, [sp, #68]	; 0x44
 800daee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800daf2:	e77e      	b.n	800d9f2 <_strtod_l+0x98a>
 800daf4:	4602      	mov	r2, r0
 800daf6:	460b      	mov	r3, r1
 800daf8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800dafc:	e7f7      	b.n	800daee <_strtod_l+0xa86>
 800dafe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800db02:	9b05      	ldr	r3, [sp, #20]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1a8      	bne.n	800da5a <_strtod_l+0x9f2>
 800db08:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800db0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db0e:	0d1b      	lsrs	r3, r3, #20
 800db10:	051b      	lsls	r3, r3, #20
 800db12:	429a      	cmp	r2, r3
 800db14:	d1a1      	bne.n	800da5a <_strtod_l+0x9f2>
 800db16:	4620      	mov	r0, r4
 800db18:	4629      	mov	r1, r5
 800db1a:	f7f3 fbab 	bl	8001274 <__aeabi_d2lz>
 800db1e:	f7f2 fd19 	bl	8000554 <__aeabi_l2d>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	4620      	mov	r0, r4
 800db28:	4629      	mov	r1, r5
 800db2a:	f7f2 fb89 	bl	8000240 <__aeabi_dsub>
 800db2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db34:	ea43 0308 	orr.w	r3, r3, r8
 800db38:	4313      	orrs	r3, r2
 800db3a:	4604      	mov	r4, r0
 800db3c:	460d      	mov	r5, r1
 800db3e:	d066      	beq.n	800dc0e <_strtod_l+0xba6>
 800db40:	a309      	add	r3, pc, #36	; (adr r3, 800db68 <_strtod_l+0xb00>)
 800db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db46:	f7f2 ffa5 	bl	8000a94 <__aeabi_dcmplt>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	f47f acda 	bne.w	800d504 <_strtod_l+0x49c>
 800db50:	a307      	add	r3, pc, #28	; (adr r3, 800db70 <_strtod_l+0xb08>)
 800db52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db56:	4620      	mov	r0, r4
 800db58:	4629      	mov	r1, r5
 800db5a:	f7f2 ffb9 	bl	8000ad0 <__aeabi_dcmpgt>
 800db5e:	2800      	cmp	r0, #0
 800db60:	f43f af7b 	beq.w	800da5a <_strtod_l+0x9f2>
 800db64:	e4ce      	b.n	800d504 <_strtod_l+0x49c>
 800db66:	bf00      	nop
 800db68:	94a03595 	.word	0x94a03595
 800db6c:	3fdfffff 	.word	0x3fdfffff
 800db70:	35afe535 	.word	0x35afe535
 800db74:	3fe00000 	.word	0x3fe00000
 800db78:	000fffff 	.word	0x000fffff
 800db7c:	7ff00000 	.word	0x7ff00000
 800db80:	7fefffff 	.word	0x7fefffff
 800db84:	3ff00000 	.word	0x3ff00000
 800db88:	7fe00000 	.word	0x7fe00000
 800db8c:	7c9fffff 	.word	0x7c9fffff
 800db90:	3fe00000 	.word	0x3fe00000
 800db94:	bff00000 	.word	0xbff00000
 800db98:	9b05      	ldr	r3, [sp, #20]
 800db9a:	b313      	cbz	r3, 800dbe2 <_strtod_l+0xb7a>
 800db9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dba2:	d81e      	bhi.n	800dbe2 <_strtod_l+0xb7a>
 800dba4:	a326      	add	r3, pc, #152	; (adr r3, 800dc40 <_strtod_l+0xbd8>)
 800dba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbaa:	4620      	mov	r0, r4
 800dbac:	4629      	mov	r1, r5
 800dbae:	f7f2 ff7b 	bl	8000aa8 <__aeabi_dcmple>
 800dbb2:	b190      	cbz	r0, 800dbda <_strtod_l+0xb72>
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f7f2 ffd2 	bl	8000b60 <__aeabi_d2uiz>
 800dbbc:	2801      	cmp	r0, #1
 800dbbe:	bf38      	it	cc
 800dbc0:	2001      	movcc	r0, #1
 800dbc2:	f7f2 fc7b 	bl	80004bc <__aeabi_ui2d>
 800dbc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbc8:	4604      	mov	r4, r0
 800dbca:	460d      	mov	r5, r1
 800dbcc:	b9d3      	cbnz	r3, 800dc04 <_strtod_l+0xb9c>
 800dbce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd2:	9012      	str	r0, [sp, #72]	; 0x48
 800dbd4:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbd6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800dbda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dbdc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800dbe0:	1a9f      	subs	r7, r3, r2
 800dbe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dbe6:	f001 fe95 	bl	800f914 <__ulp>
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	4630      	mov	r0, r6
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	f7f2 fcdd 	bl	80005b0 <__aeabi_dmul>
 800dbf6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dbfa:	f7f2 fb23 	bl	8000244 <__adddf3>
 800dbfe:	4680      	mov	r8, r0
 800dc00:	4689      	mov	r9, r1
 800dc02:	e77e      	b.n	800db02 <_strtod_l+0xa9a>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800dc0c:	e7e3      	b.n	800dbd6 <_strtod_l+0xb6e>
 800dc0e:	a30e      	add	r3, pc, #56	; (adr r3, 800dc48 <_strtod_l+0xbe0>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f7f2 ff3e 	bl	8000a94 <__aeabi_dcmplt>
 800dc18:	e7a1      	b.n	800db5e <_strtod_l+0xaf6>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	930c      	str	r3, [sp, #48]	; 0x30
 800dc1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc22:	6013      	str	r3, [r2, #0]
 800dc24:	f7ff ba65 	b.w	800d0f2 <_strtod_l+0x8a>
 800dc28:	2b65      	cmp	r3, #101	; 0x65
 800dc2a:	f43f ab5c 	beq.w	800d2e6 <_strtod_l+0x27e>
 800dc2e:	2b45      	cmp	r3, #69	; 0x45
 800dc30:	f43f ab59 	beq.w	800d2e6 <_strtod_l+0x27e>
 800dc34:	2201      	movs	r2, #1
 800dc36:	f7ff bb8d 	b.w	800d354 <_strtod_l+0x2ec>
 800dc3a:	bf00      	nop
 800dc3c:	f3af 8000 	nop.w
 800dc40:	ffc00000 	.word	0xffc00000
 800dc44:	41dfffff 	.word	0x41dfffff
 800dc48:	94a03595 	.word	0x94a03595
 800dc4c:	3fcfffff 	.word	0x3fcfffff

0800dc50 <_strtod_r>:
 800dc50:	4b01      	ldr	r3, [pc, #4]	; (800dc58 <_strtod_r+0x8>)
 800dc52:	f7ff ba09 	b.w	800d068 <_strtod_l>
 800dc56:	bf00      	nop
 800dc58:	200000b4 	.word	0x200000b4

0800dc5c <_strtol_l.isra.0>:
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc62:	4686      	mov	lr, r0
 800dc64:	d001      	beq.n	800dc6a <_strtol_l.isra.0+0xe>
 800dc66:	2b24      	cmp	r3, #36	; 0x24
 800dc68:	d906      	bls.n	800dc78 <_strtol_l.isra.0+0x1c>
 800dc6a:	f7fe fa31 	bl	800c0d0 <__errno>
 800dc6e:	2316      	movs	r3, #22
 800dc70:	6003      	str	r3, [r0, #0]
 800dc72:	2000      	movs	r0, #0
 800dc74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc78:	468c      	mov	ip, r1
 800dc7a:	4e3a      	ldr	r6, [pc, #232]	; (800dd64 <_strtol_l.isra.0+0x108>)
 800dc7c:	4660      	mov	r0, ip
 800dc7e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dc82:	5da5      	ldrb	r5, [r4, r6]
 800dc84:	f015 0508 	ands.w	r5, r5, #8
 800dc88:	d1f8      	bne.n	800dc7c <_strtol_l.isra.0+0x20>
 800dc8a:	2c2d      	cmp	r4, #45	; 0x2d
 800dc8c:	d133      	bne.n	800dcf6 <_strtol_l.isra.0+0x9a>
 800dc8e:	f04f 0801 	mov.w	r8, #1
 800dc92:	f89c 4000 	ldrb.w	r4, [ip]
 800dc96:	f100 0c02 	add.w	ip, r0, #2
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d05d      	beq.n	800dd5a <_strtol_l.isra.0+0xfe>
 800dc9e:	2b10      	cmp	r3, #16
 800dca0:	d10c      	bne.n	800dcbc <_strtol_l.isra.0+0x60>
 800dca2:	2c30      	cmp	r4, #48	; 0x30
 800dca4:	d10a      	bne.n	800dcbc <_strtol_l.isra.0+0x60>
 800dca6:	f89c 0000 	ldrb.w	r0, [ip]
 800dcaa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dcae:	2858      	cmp	r0, #88	; 0x58
 800dcb0:	d14e      	bne.n	800dd50 <_strtol_l.isra.0+0xf4>
 800dcb2:	2310      	movs	r3, #16
 800dcb4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800dcb8:	f10c 0c02 	add.w	ip, ip, #2
 800dcbc:	2500      	movs	r5, #0
 800dcbe:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800dcc2:	3f01      	subs	r7, #1
 800dcc4:	fbb7 f9f3 	udiv	r9, r7, r3
 800dcc8:	4628      	mov	r0, r5
 800dcca:	fb03 7a19 	mls	sl, r3, r9, r7
 800dcce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800dcd2:	2e09      	cmp	r6, #9
 800dcd4:	d818      	bhi.n	800dd08 <_strtol_l.isra.0+0xac>
 800dcd6:	4634      	mov	r4, r6
 800dcd8:	42a3      	cmp	r3, r4
 800dcda:	dd24      	ble.n	800dd26 <_strtol_l.isra.0+0xca>
 800dcdc:	2d00      	cmp	r5, #0
 800dcde:	db1f      	blt.n	800dd20 <_strtol_l.isra.0+0xc4>
 800dce0:	4581      	cmp	r9, r0
 800dce2:	d31d      	bcc.n	800dd20 <_strtol_l.isra.0+0xc4>
 800dce4:	d101      	bne.n	800dcea <_strtol_l.isra.0+0x8e>
 800dce6:	45a2      	cmp	sl, r4
 800dce8:	db1a      	blt.n	800dd20 <_strtol_l.isra.0+0xc4>
 800dcea:	2501      	movs	r5, #1
 800dcec:	fb00 4003 	mla	r0, r0, r3, r4
 800dcf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dcf4:	e7eb      	b.n	800dcce <_strtol_l.isra.0+0x72>
 800dcf6:	2c2b      	cmp	r4, #43	; 0x2b
 800dcf8:	bf08      	it	eq
 800dcfa:	f89c 4000 	ldrbeq.w	r4, [ip]
 800dcfe:	46a8      	mov	r8, r5
 800dd00:	bf08      	it	eq
 800dd02:	f100 0c02 	addeq.w	ip, r0, #2
 800dd06:	e7c8      	b.n	800dc9a <_strtol_l.isra.0+0x3e>
 800dd08:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800dd0c:	2e19      	cmp	r6, #25
 800dd0e:	d801      	bhi.n	800dd14 <_strtol_l.isra.0+0xb8>
 800dd10:	3c37      	subs	r4, #55	; 0x37
 800dd12:	e7e1      	b.n	800dcd8 <_strtol_l.isra.0+0x7c>
 800dd14:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800dd18:	2e19      	cmp	r6, #25
 800dd1a:	d804      	bhi.n	800dd26 <_strtol_l.isra.0+0xca>
 800dd1c:	3c57      	subs	r4, #87	; 0x57
 800dd1e:	e7db      	b.n	800dcd8 <_strtol_l.isra.0+0x7c>
 800dd20:	f04f 35ff 	mov.w	r5, #4294967295
 800dd24:	e7e4      	b.n	800dcf0 <_strtol_l.isra.0+0x94>
 800dd26:	2d00      	cmp	r5, #0
 800dd28:	da08      	bge.n	800dd3c <_strtol_l.isra.0+0xe0>
 800dd2a:	2322      	movs	r3, #34	; 0x22
 800dd2c:	4638      	mov	r0, r7
 800dd2e:	f8ce 3000 	str.w	r3, [lr]
 800dd32:	2a00      	cmp	r2, #0
 800dd34:	d09e      	beq.n	800dc74 <_strtol_l.isra.0+0x18>
 800dd36:	f10c 31ff 	add.w	r1, ip, #4294967295
 800dd3a:	e007      	b.n	800dd4c <_strtol_l.isra.0+0xf0>
 800dd3c:	f1b8 0f00 	cmp.w	r8, #0
 800dd40:	d000      	beq.n	800dd44 <_strtol_l.isra.0+0xe8>
 800dd42:	4240      	negs	r0, r0
 800dd44:	2a00      	cmp	r2, #0
 800dd46:	d095      	beq.n	800dc74 <_strtol_l.isra.0+0x18>
 800dd48:	2d00      	cmp	r5, #0
 800dd4a:	d1f4      	bne.n	800dd36 <_strtol_l.isra.0+0xda>
 800dd4c:	6011      	str	r1, [r2, #0]
 800dd4e:	e791      	b.n	800dc74 <_strtol_l.isra.0+0x18>
 800dd50:	2430      	movs	r4, #48	; 0x30
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1b2      	bne.n	800dcbc <_strtol_l.isra.0+0x60>
 800dd56:	2308      	movs	r3, #8
 800dd58:	e7b0      	b.n	800dcbc <_strtol_l.isra.0+0x60>
 800dd5a:	2c30      	cmp	r4, #48	; 0x30
 800dd5c:	d0a3      	beq.n	800dca6 <_strtol_l.isra.0+0x4a>
 800dd5e:	230a      	movs	r3, #10
 800dd60:	e7ac      	b.n	800dcbc <_strtol_l.isra.0+0x60>
 800dd62:	bf00      	nop
 800dd64:	08011a75 	.word	0x08011a75

0800dd68 <_strtol_r>:
 800dd68:	f7ff bf78 	b.w	800dc5c <_strtol_l.isra.0>

0800dd6c <__utoa>:
 800dd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd6e:	b08b      	sub	sp, #44	; 0x2c
 800dd70:	4605      	mov	r5, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	466e      	mov	r6, sp
 800dd76:	4c1d      	ldr	r4, [pc, #116]	; (800ddec <__utoa+0x80>)
 800dd78:	f104 0c20 	add.w	ip, r4, #32
 800dd7c:	4637      	mov	r7, r6
 800dd7e:	6820      	ldr	r0, [r4, #0]
 800dd80:	6861      	ldr	r1, [r4, #4]
 800dd82:	3408      	adds	r4, #8
 800dd84:	c703      	stmia	r7!, {r0, r1}
 800dd86:	4564      	cmp	r4, ip
 800dd88:	463e      	mov	r6, r7
 800dd8a:	d1f7      	bne.n	800dd7c <__utoa+0x10>
 800dd8c:	7921      	ldrb	r1, [r4, #4]
 800dd8e:	6820      	ldr	r0, [r4, #0]
 800dd90:	7139      	strb	r1, [r7, #4]
 800dd92:	1e91      	subs	r1, r2, #2
 800dd94:	2922      	cmp	r1, #34	; 0x22
 800dd96:	6038      	str	r0, [r7, #0]
 800dd98:	f04f 0100 	mov.w	r1, #0
 800dd9c:	d904      	bls.n	800dda8 <__utoa+0x3c>
 800dd9e:	7019      	strb	r1, [r3, #0]
 800dda0:	460b      	mov	r3, r1
 800dda2:	4618      	mov	r0, r3
 800dda4:	b00b      	add	sp, #44	; 0x2c
 800dda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dda8:	1e58      	subs	r0, r3, #1
 800ddaa:	4684      	mov	ip, r0
 800ddac:	fbb5 f7f2 	udiv	r7, r5, r2
 800ddb0:	fb02 5617 	mls	r6, r2, r7, r5
 800ddb4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800ddb8:	4476      	add	r6, lr
 800ddba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ddbe:	460c      	mov	r4, r1
 800ddc0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ddc4:	462e      	mov	r6, r5
 800ddc6:	42b2      	cmp	r2, r6
 800ddc8:	463d      	mov	r5, r7
 800ddca:	f101 0101 	add.w	r1, r1, #1
 800ddce:	d9ed      	bls.n	800ddac <__utoa+0x40>
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	545a      	strb	r2, [r3, r1]
 800ddd4:	1919      	adds	r1, r3, r4
 800ddd6:	1aa5      	subs	r5, r4, r2
 800ddd8:	42aa      	cmp	r2, r5
 800ddda:	dae2      	bge.n	800dda2 <__utoa+0x36>
 800dddc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800dde0:	780e      	ldrb	r6, [r1, #0]
 800dde2:	3201      	adds	r2, #1
 800dde4:	7006      	strb	r6, [r0, #0]
 800dde6:	f801 5901 	strb.w	r5, [r1], #-1
 800ddea:	e7f4      	b.n	800ddd6 <__utoa+0x6a>
 800ddec:	08011c08 	.word	0x08011c08

0800ddf0 <quorem>:
 800ddf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf4:	6903      	ldr	r3, [r0, #16]
 800ddf6:	690c      	ldr	r4, [r1, #16]
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	f2c0 8083 	blt.w	800df06 <quorem+0x116>
 800de00:	3c01      	subs	r4, #1
 800de02:	f100 0514 	add.w	r5, r0, #20
 800de06:	f101 0814 	add.w	r8, r1, #20
 800de0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de0e:	9301      	str	r3, [sp, #4]
 800de10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de18:	3301      	adds	r3, #1
 800de1a:	429a      	cmp	r2, r3
 800de1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800de20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800de24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de28:	d332      	bcc.n	800de90 <quorem+0xa0>
 800de2a:	f04f 0e00 	mov.w	lr, #0
 800de2e:	4640      	mov	r0, r8
 800de30:	46ac      	mov	ip, r5
 800de32:	46f2      	mov	sl, lr
 800de34:	f850 2b04 	ldr.w	r2, [r0], #4
 800de38:	b293      	uxth	r3, r2
 800de3a:	fb06 e303 	mla	r3, r6, r3, lr
 800de3e:	0c12      	lsrs	r2, r2, #16
 800de40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800de44:	fb06 e202 	mla	r2, r6, r2, lr
 800de48:	b29b      	uxth	r3, r3
 800de4a:	ebaa 0303 	sub.w	r3, sl, r3
 800de4e:	f8dc a000 	ldr.w	sl, [ip]
 800de52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de56:	fa1f fa8a 	uxth.w	sl, sl
 800de5a:	4453      	add	r3, sl
 800de5c:	fa1f fa82 	uxth.w	sl, r2
 800de60:	f8dc 2000 	ldr.w	r2, [ip]
 800de64:	4581      	cmp	r9, r0
 800de66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800de6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de6e:	b29b      	uxth	r3, r3
 800de70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de74:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de78:	f84c 3b04 	str.w	r3, [ip], #4
 800de7c:	d2da      	bcs.n	800de34 <quorem+0x44>
 800de7e:	f855 300b 	ldr.w	r3, [r5, fp]
 800de82:	b92b      	cbnz	r3, 800de90 <quorem+0xa0>
 800de84:	9b01      	ldr	r3, [sp, #4]
 800de86:	3b04      	subs	r3, #4
 800de88:	429d      	cmp	r5, r3
 800de8a:	461a      	mov	r2, r3
 800de8c:	d32f      	bcc.n	800deee <quorem+0xfe>
 800de8e:	613c      	str	r4, [r7, #16]
 800de90:	4638      	mov	r0, r7
 800de92:	f001 fc93 	bl	800f7bc <__mcmp>
 800de96:	2800      	cmp	r0, #0
 800de98:	db25      	blt.n	800dee6 <quorem+0xf6>
 800de9a:	4628      	mov	r0, r5
 800de9c:	f04f 0c00 	mov.w	ip, #0
 800dea0:	3601      	adds	r6, #1
 800dea2:	f858 1b04 	ldr.w	r1, [r8], #4
 800dea6:	f8d0 e000 	ldr.w	lr, [r0]
 800deaa:	b28b      	uxth	r3, r1
 800deac:	ebac 0303 	sub.w	r3, ip, r3
 800deb0:	fa1f f28e 	uxth.w	r2, lr
 800deb4:	4413      	add	r3, r2
 800deb6:	0c0a      	lsrs	r2, r1, #16
 800deb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800debc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dec6:	45c1      	cmp	r9, r8
 800dec8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800decc:	f840 3b04 	str.w	r3, [r0], #4
 800ded0:	d2e7      	bcs.n	800dea2 <quorem+0xb2>
 800ded2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ded6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800deda:	b922      	cbnz	r2, 800dee6 <quorem+0xf6>
 800dedc:	3b04      	subs	r3, #4
 800dede:	429d      	cmp	r5, r3
 800dee0:	461a      	mov	r2, r3
 800dee2:	d30a      	bcc.n	800defa <quorem+0x10a>
 800dee4:	613c      	str	r4, [r7, #16]
 800dee6:	4630      	mov	r0, r6
 800dee8:	b003      	add	sp, #12
 800deea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deee:	6812      	ldr	r2, [r2, #0]
 800def0:	3b04      	subs	r3, #4
 800def2:	2a00      	cmp	r2, #0
 800def4:	d1cb      	bne.n	800de8e <quorem+0x9e>
 800def6:	3c01      	subs	r4, #1
 800def8:	e7c6      	b.n	800de88 <quorem+0x98>
 800defa:	6812      	ldr	r2, [r2, #0]
 800defc:	3b04      	subs	r3, #4
 800defe:	2a00      	cmp	r2, #0
 800df00:	d1f0      	bne.n	800dee4 <quorem+0xf4>
 800df02:	3c01      	subs	r4, #1
 800df04:	e7eb      	b.n	800dede <quorem+0xee>
 800df06:	2000      	movs	r0, #0
 800df08:	e7ee      	b.n	800dee8 <quorem+0xf8>
 800df0a:	0000      	movs	r0, r0
 800df0c:	0000      	movs	r0, r0
	...

0800df10 <_dtoa_r>:
 800df10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df14:	4616      	mov	r6, r2
 800df16:	461f      	mov	r7, r3
 800df18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800df1a:	b099      	sub	sp, #100	; 0x64
 800df1c:	4605      	mov	r5, r0
 800df1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800df22:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800df26:	b974      	cbnz	r4, 800df46 <_dtoa_r+0x36>
 800df28:	2010      	movs	r0, #16
 800df2a:	f7fe f915 	bl	800c158 <malloc>
 800df2e:	4602      	mov	r2, r0
 800df30:	6268      	str	r0, [r5, #36]	; 0x24
 800df32:	b920      	cbnz	r0, 800df3e <_dtoa_r+0x2e>
 800df34:	21ea      	movs	r1, #234	; 0xea
 800df36:	4bae      	ldr	r3, [pc, #696]	; (800e1f0 <_dtoa_r+0x2e0>)
 800df38:	48ae      	ldr	r0, [pc, #696]	; (800e1f4 <_dtoa_r+0x2e4>)
 800df3a:	f001 ffc3 	bl	800fec4 <__assert_func>
 800df3e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df42:	6004      	str	r4, [r0, #0]
 800df44:	60c4      	str	r4, [r0, #12]
 800df46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df48:	6819      	ldr	r1, [r3, #0]
 800df4a:	b151      	cbz	r1, 800df62 <_dtoa_r+0x52>
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	2301      	movs	r3, #1
 800df50:	4093      	lsls	r3, r2
 800df52:	604a      	str	r2, [r1, #4]
 800df54:	608b      	str	r3, [r1, #8]
 800df56:	4628      	mov	r0, r5
 800df58:	f001 f9ac 	bl	800f2b4 <_Bfree>
 800df5c:	2200      	movs	r2, #0
 800df5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df60:	601a      	str	r2, [r3, #0]
 800df62:	1e3b      	subs	r3, r7, #0
 800df64:	bfaf      	iteee	ge
 800df66:	2300      	movge	r3, #0
 800df68:	2201      	movlt	r2, #1
 800df6a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df6e:	9305      	strlt	r3, [sp, #20]
 800df70:	bfa8      	it	ge
 800df72:	f8c8 3000 	strge.w	r3, [r8]
 800df76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800df7a:	4b9f      	ldr	r3, [pc, #636]	; (800e1f8 <_dtoa_r+0x2e8>)
 800df7c:	bfb8      	it	lt
 800df7e:	f8c8 2000 	strlt.w	r2, [r8]
 800df82:	ea33 0309 	bics.w	r3, r3, r9
 800df86:	d119      	bne.n	800dfbc <_dtoa_r+0xac>
 800df88:	f242 730f 	movw	r3, #9999	; 0x270f
 800df8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800df8e:	6013      	str	r3, [r2, #0]
 800df90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df94:	4333      	orrs	r3, r6
 800df96:	f000 8580 	beq.w	800ea9a <_dtoa_r+0xb8a>
 800df9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df9c:	b953      	cbnz	r3, 800dfb4 <_dtoa_r+0xa4>
 800df9e:	4b97      	ldr	r3, [pc, #604]	; (800e1fc <_dtoa_r+0x2ec>)
 800dfa0:	e022      	b.n	800dfe8 <_dtoa_r+0xd8>
 800dfa2:	4b97      	ldr	r3, [pc, #604]	; (800e200 <_dtoa_r+0x2f0>)
 800dfa4:	9308      	str	r3, [sp, #32]
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800dfaa:	6013      	str	r3, [r2, #0]
 800dfac:	9808      	ldr	r0, [sp, #32]
 800dfae:	b019      	add	sp, #100	; 0x64
 800dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb4:	4b91      	ldr	r3, [pc, #580]	; (800e1fc <_dtoa_r+0x2ec>)
 800dfb6:	9308      	str	r3, [sp, #32]
 800dfb8:	3303      	adds	r3, #3
 800dfba:	e7f5      	b.n	800dfa8 <_dtoa_r+0x98>
 800dfbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800dfc0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800dfc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f7f2 fd58 	bl	8000a80 <__aeabi_dcmpeq>
 800dfd0:	4680      	mov	r8, r0
 800dfd2:	b158      	cbz	r0, 800dfec <_dtoa_r+0xdc>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800dfd8:	6013      	str	r3, [r2, #0]
 800dfda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f000 8559 	beq.w	800ea94 <_dtoa_r+0xb84>
 800dfe2:	4888      	ldr	r0, [pc, #544]	; (800e204 <_dtoa_r+0x2f4>)
 800dfe4:	6018      	str	r0, [r3, #0]
 800dfe6:	1e43      	subs	r3, r0, #1
 800dfe8:	9308      	str	r3, [sp, #32]
 800dfea:	e7df      	b.n	800dfac <_dtoa_r+0x9c>
 800dfec:	ab16      	add	r3, sp, #88	; 0x58
 800dfee:	9301      	str	r3, [sp, #4]
 800dff0:	ab17      	add	r3, sp, #92	; 0x5c
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	4628      	mov	r0, r5
 800dff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dffa:	f001 fd05 	bl	800fa08 <__d2b>
 800dffe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e002:	4682      	mov	sl, r0
 800e004:	2c00      	cmp	r4, #0
 800e006:	d07e      	beq.n	800e106 <_dtoa_r+0x1f6>
 800e008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e00c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e00e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e012:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e016:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e01a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e01e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e022:	2200      	movs	r2, #0
 800e024:	4b78      	ldr	r3, [pc, #480]	; (800e208 <_dtoa_r+0x2f8>)
 800e026:	f7f2 f90b 	bl	8000240 <__aeabi_dsub>
 800e02a:	a36b      	add	r3, pc, #428	; (adr r3, 800e1d8 <_dtoa_r+0x2c8>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 fabe 	bl	80005b0 <__aeabi_dmul>
 800e034:	a36a      	add	r3, pc, #424	; (adr r3, 800e1e0 <_dtoa_r+0x2d0>)
 800e036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03a:	f7f2 f903 	bl	8000244 <__adddf3>
 800e03e:	4606      	mov	r6, r0
 800e040:	4620      	mov	r0, r4
 800e042:	460f      	mov	r7, r1
 800e044:	f7f2 fa4a 	bl	80004dc <__aeabi_i2d>
 800e048:	a367      	add	r3, pc, #412	; (adr r3, 800e1e8 <_dtoa_r+0x2d8>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	f7f2 faaf 	bl	80005b0 <__aeabi_dmul>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4630      	mov	r0, r6
 800e058:	4639      	mov	r1, r7
 800e05a:	f7f2 f8f3 	bl	8000244 <__adddf3>
 800e05e:	4606      	mov	r6, r0
 800e060:	460f      	mov	r7, r1
 800e062:	f7f2 fd55 	bl	8000b10 <__aeabi_d2iz>
 800e066:	2200      	movs	r2, #0
 800e068:	4681      	mov	r9, r0
 800e06a:	2300      	movs	r3, #0
 800e06c:	4630      	mov	r0, r6
 800e06e:	4639      	mov	r1, r7
 800e070:	f7f2 fd10 	bl	8000a94 <__aeabi_dcmplt>
 800e074:	b148      	cbz	r0, 800e08a <_dtoa_r+0x17a>
 800e076:	4648      	mov	r0, r9
 800e078:	f7f2 fa30 	bl	80004dc <__aeabi_i2d>
 800e07c:	4632      	mov	r2, r6
 800e07e:	463b      	mov	r3, r7
 800e080:	f7f2 fcfe 	bl	8000a80 <__aeabi_dcmpeq>
 800e084:	b908      	cbnz	r0, 800e08a <_dtoa_r+0x17a>
 800e086:	f109 39ff 	add.w	r9, r9, #4294967295
 800e08a:	f1b9 0f16 	cmp.w	r9, #22
 800e08e:	d857      	bhi.n	800e140 <_dtoa_r+0x230>
 800e090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e094:	4b5d      	ldr	r3, [pc, #372]	; (800e20c <_dtoa_r+0x2fc>)
 800e096:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09e:	f7f2 fcf9 	bl	8000a94 <__aeabi_dcmplt>
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d04e      	beq.n	800e144 <_dtoa_r+0x234>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800e0ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e0b0:	1b1c      	subs	r4, r3, r4
 800e0b2:	1e63      	subs	r3, r4, #1
 800e0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b6:	bf49      	itett	mi
 800e0b8:	f1c4 0301 	rsbmi	r3, r4, #1
 800e0bc:	2300      	movpl	r3, #0
 800e0be:	9306      	strmi	r3, [sp, #24]
 800e0c0:	2300      	movmi	r3, #0
 800e0c2:	bf54      	ite	pl
 800e0c4:	9306      	strpl	r3, [sp, #24]
 800e0c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e0c8:	f1b9 0f00 	cmp.w	r9, #0
 800e0cc:	db3c      	blt.n	800e148 <_dtoa_r+0x238>
 800e0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e0d4:	444b      	add	r3, r9
 800e0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d8:	2300      	movs	r3, #0
 800e0da:	930a      	str	r3, [sp, #40]	; 0x28
 800e0dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e0de:	2b09      	cmp	r3, #9
 800e0e0:	d86c      	bhi.n	800e1bc <_dtoa_r+0x2ac>
 800e0e2:	2b05      	cmp	r3, #5
 800e0e4:	bfc4      	itt	gt
 800e0e6:	3b04      	subgt	r3, #4
 800e0e8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e0ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e0ec:	bfc8      	it	gt
 800e0ee:	2400      	movgt	r4, #0
 800e0f0:	f1a3 0302 	sub.w	r3, r3, #2
 800e0f4:	bfd8      	it	le
 800e0f6:	2401      	movle	r4, #1
 800e0f8:	2b03      	cmp	r3, #3
 800e0fa:	f200 808b 	bhi.w	800e214 <_dtoa_r+0x304>
 800e0fe:	e8df f003 	tbb	[pc, r3]
 800e102:	4f2d      	.short	0x4f2d
 800e104:	5b4d      	.short	0x5b4d
 800e106:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e10a:	441c      	add	r4, r3
 800e10c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e110:	2b20      	cmp	r3, #32
 800e112:	bfc3      	ittte	gt
 800e114:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e118:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e11c:	fa09 f303 	lslgt.w	r3, r9, r3
 800e120:	f1c3 0320 	rsble	r3, r3, #32
 800e124:	bfc6      	itte	gt
 800e126:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e12a:	4318      	orrgt	r0, r3
 800e12c:	fa06 f003 	lslle.w	r0, r6, r3
 800e130:	f7f2 f9c4 	bl	80004bc <__aeabi_ui2d>
 800e134:	2301      	movs	r3, #1
 800e136:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e13a:	3c01      	subs	r4, #1
 800e13c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e13e:	e770      	b.n	800e022 <_dtoa_r+0x112>
 800e140:	2301      	movs	r3, #1
 800e142:	e7b3      	b.n	800e0ac <_dtoa_r+0x19c>
 800e144:	900f      	str	r0, [sp, #60]	; 0x3c
 800e146:	e7b2      	b.n	800e0ae <_dtoa_r+0x19e>
 800e148:	9b06      	ldr	r3, [sp, #24]
 800e14a:	eba3 0309 	sub.w	r3, r3, r9
 800e14e:	9306      	str	r3, [sp, #24]
 800e150:	f1c9 0300 	rsb	r3, r9, #0
 800e154:	930a      	str	r3, [sp, #40]	; 0x28
 800e156:	2300      	movs	r3, #0
 800e158:	930e      	str	r3, [sp, #56]	; 0x38
 800e15a:	e7bf      	b.n	800e0dc <_dtoa_r+0x1cc>
 800e15c:	2300      	movs	r3, #0
 800e15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e160:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e162:	2b00      	cmp	r3, #0
 800e164:	dc59      	bgt.n	800e21a <_dtoa_r+0x30a>
 800e166:	f04f 0b01 	mov.w	fp, #1
 800e16a:	465b      	mov	r3, fp
 800e16c:	f8cd b008 	str.w	fp, [sp, #8]
 800e170:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800e174:	2200      	movs	r2, #0
 800e176:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e178:	6042      	str	r2, [r0, #4]
 800e17a:	2204      	movs	r2, #4
 800e17c:	f102 0614 	add.w	r6, r2, #20
 800e180:	429e      	cmp	r6, r3
 800e182:	6841      	ldr	r1, [r0, #4]
 800e184:	d94f      	bls.n	800e226 <_dtoa_r+0x316>
 800e186:	4628      	mov	r0, r5
 800e188:	f001 f854 	bl	800f234 <_Balloc>
 800e18c:	9008      	str	r0, [sp, #32]
 800e18e:	2800      	cmp	r0, #0
 800e190:	d14d      	bne.n	800e22e <_dtoa_r+0x31e>
 800e192:	4602      	mov	r2, r0
 800e194:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e198:	4b1d      	ldr	r3, [pc, #116]	; (800e210 <_dtoa_r+0x300>)
 800e19a:	e6cd      	b.n	800df38 <_dtoa_r+0x28>
 800e19c:	2301      	movs	r3, #1
 800e19e:	e7de      	b.n	800e15e <_dtoa_r+0x24e>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e1a6:	eb09 0b03 	add.w	fp, r9, r3
 800e1aa:	f10b 0301 	add.w	r3, fp, #1
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	9302      	str	r3, [sp, #8]
 800e1b2:	bfb8      	it	lt
 800e1b4:	2301      	movlt	r3, #1
 800e1b6:	e7dd      	b.n	800e174 <_dtoa_r+0x264>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e7f2      	b.n	800e1a2 <_dtoa_r+0x292>
 800e1bc:	2401      	movs	r4, #1
 800e1be:	2300      	movs	r3, #0
 800e1c0:	940b      	str	r4, [sp, #44]	; 0x2c
 800e1c2:	9322      	str	r3, [sp, #136]	; 0x88
 800e1c4:	f04f 3bff 	mov.w	fp, #4294967295
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2312      	movs	r3, #18
 800e1cc:	f8cd b008 	str.w	fp, [sp, #8]
 800e1d0:	9223      	str	r2, [sp, #140]	; 0x8c
 800e1d2:	e7cf      	b.n	800e174 <_dtoa_r+0x264>
 800e1d4:	f3af 8000 	nop.w
 800e1d8:	636f4361 	.word	0x636f4361
 800e1dc:	3fd287a7 	.word	0x3fd287a7
 800e1e0:	8b60c8b3 	.word	0x8b60c8b3
 800e1e4:	3fc68a28 	.word	0x3fc68a28
 800e1e8:	509f79fb 	.word	0x509f79fb
 800e1ec:	3fd34413 	.word	0x3fd34413
 800e1f0:	08011c3a 	.word	0x08011c3a
 800e1f4:	08011c51 	.word	0x08011c51
 800e1f8:	7ff00000 	.word	0x7ff00000
 800e1fc:	08011c36 	.word	0x08011c36
 800e200:	08011c2d 	.word	0x08011c2d
 800e204:	08011b8d 	.word	0x08011b8d
 800e208:	3ff80000 	.word	0x3ff80000
 800e20c:	08011dc8 	.word	0x08011dc8
 800e210:	08011cb0 	.word	0x08011cb0
 800e214:	2301      	movs	r3, #1
 800e216:	930b      	str	r3, [sp, #44]	; 0x2c
 800e218:	e7d4      	b.n	800e1c4 <_dtoa_r+0x2b4>
 800e21a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800e21e:	465b      	mov	r3, fp
 800e220:	f8cd b008 	str.w	fp, [sp, #8]
 800e224:	e7a6      	b.n	800e174 <_dtoa_r+0x264>
 800e226:	3101      	adds	r1, #1
 800e228:	6041      	str	r1, [r0, #4]
 800e22a:	0052      	lsls	r2, r2, #1
 800e22c:	e7a6      	b.n	800e17c <_dtoa_r+0x26c>
 800e22e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e230:	9a08      	ldr	r2, [sp, #32]
 800e232:	601a      	str	r2, [r3, #0]
 800e234:	9b02      	ldr	r3, [sp, #8]
 800e236:	2b0e      	cmp	r3, #14
 800e238:	f200 80a8 	bhi.w	800e38c <_dtoa_r+0x47c>
 800e23c:	2c00      	cmp	r4, #0
 800e23e:	f000 80a5 	beq.w	800e38c <_dtoa_r+0x47c>
 800e242:	f1b9 0f00 	cmp.w	r9, #0
 800e246:	dd34      	ble.n	800e2b2 <_dtoa_r+0x3a2>
 800e248:	4a9a      	ldr	r2, [pc, #616]	; (800e4b4 <_dtoa_r+0x5a4>)
 800e24a:	f009 030f 	and.w	r3, r9, #15
 800e24e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e252:	f419 7f80 	tst.w	r9, #256	; 0x100
 800e256:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e25a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e25e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800e262:	d016      	beq.n	800e292 <_dtoa_r+0x382>
 800e264:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e268:	4b93      	ldr	r3, [pc, #588]	; (800e4b8 <_dtoa_r+0x5a8>)
 800e26a:	2703      	movs	r7, #3
 800e26c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e270:	f7f2 fac8 	bl	8000804 <__aeabi_ddiv>
 800e274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e278:	f004 040f 	and.w	r4, r4, #15
 800e27c:	4e8e      	ldr	r6, [pc, #568]	; (800e4b8 <_dtoa_r+0x5a8>)
 800e27e:	b954      	cbnz	r4, 800e296 <_dtoa_r+0x386>
 800e280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e288:	f7f2 fabc 	bl	8000804 <__aeabi_ddiv>
 800e28c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e290:	e029      	b.n	800e2e6 <_dtoa_r+0x3d6>
 800e292:	2702      	movs	r7, #2
 800e294:	e7f2      	b.n	800e27c <_dtoa_r+0x36c>
 800e296:	07e1      	lsls	r1, r4, #31
 800e298:	d508      	bpl.n	800e2ac <_dtoa_r+0x39c>
 800e29a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e29e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e2a2:	f7f2 f985 	bl	80005b0 <__aeabi_dmul>
 800e2a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e2aa:	3701      	adds	r7, #1
 800e2ac:	1064      	asrs	r4, r4, #1
 800e2ae:	3608      	adds	r6, #8
 800e2b0:	e7e5      	b.n	800e27e <_dtoa_r+0x36e>
 800e2b2:	f000 80a5 	beq.w	800e400 <_dtoa_r+0x4f0>
 800e2b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e2ba:	f1c9 0400 	rsb	r4, r9, #0
 800e2be:	4b7d      	ldr	r3, [pc, #500]	; (800e4b4 <_dtoa_r+0x5a4>)
 800e2c0:	f004 020f 	and.w	r2, r4, #15
 800e2c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	f7f2 f970 	bl	80005b0 <__aeabi_dmul>
 800e2d0:	2702      	movs	r7, #2
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2d8:	4e77      	ldr	r6, [pc, #476]	; (800e4b8 <_dtoa_r+0x5a8>)
 800e2da:	1124      	asrs	r4, r4, #4
 800e2dc:	2c00      	cmp	r4, #0
 800e2de:	f040 8084 	bne.w	800e3ea <_dtoa_r+0x4da>
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1d2      	bne.n	800e28c <_dtoa_r+0x37c>
 800e2e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 808b 	beq.w	800e404 <_dtoa_r+0x4f4>
 800e2ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e2f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e2f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4b6f      	ldr	r3, [pc, #444]	; (800e4bc <_dtoa_r+0x5ac>)
 800e2fe:	f7f2 fbc9 	bl	8000a94 <__aeabi_dcmplt>
 800e302:	2800      	cmp	r0, #0
 800e304:	d07e      	beq.n	800e404 <_dtoa_r+0x4f4>
 800e306:	9b02      	ldr	r3, [sp, #8]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d07b      	beq.n	800e404 <_dtoa_r+0x4f4>
 800e30c:	f1bb 0f00 	cmp.w	fp, #0
 800e310:	dd38      	ble.n	800e384 <_dtoa_r+0x474>
 800e312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e316:	2200      	movs	r2, #0
 800e318:	4b69      	ldr	r3, [pc, #420]	; (800e4c0 <_dtoa_r+0x5b0>)
 800e31a:	f7f2 f949 	bl	80005b0 <__aeabi_dmul>
 800e31e:	465c      	mov	r4, fp
 800e320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e324:	f109 38ff 	add.w	r8, r9, #4294967295
 800e328:	3701      	adds	r7, #1
 800e32a:	4638      	mov	r0, r7
 800e32c:	f7f2 f8d6 	bl	80004dc <__aeabi_i2d>
 800e330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e334:	f7f2 f93c 	bl	80005b0 <__aeabi_dmul>
 800e338:	2200      	movs	r2, #0
 800e33a:	4b62      	ldr	r3, [pc, #392]	; (800e4c4 <_dtoa_r+0x5b4>)
 800e33c:	f7f1 ff82 	bl	8000244 <__adddf3>
 800e340:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e344:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e348:	9611      	str	r6, [sp, #68]	; 0x44
 800e34a:	2c00      	cmp	r4, #0
 800e34c:	d15d      	bne.n	800e40a <_dtoa_r+0x4fa>
 800e34e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e352:	2200      	movs	r2, #0
 800e354:	4b5c      	ldr	r3, [pc, #368]	; (800e4c8 <_dtoa_r+0x5b8>)
 800e356:	f7f1 ff73 	bl	8000240 <__aeabi_dsub>
 800e35a:	4602      	mov	r2, r0
 800e35c:	460b      	mov	r3, r1
 800e35e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e362:	4633      	mov	r3, r6
 800e364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e366:	f7f2 fbb3 	bl	8000ad0 <__aeabi_dcmpgt>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	f040 829e 	bne.w	800e8ac <_dtoa_r+0x99c>
 800e370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e376:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e37a:	f7f2 fb8b 	bl	8000a94 <__aeabi_dcmplt>
 800e37e:	2800      	cmp	r0, #0
 800e380:	f040 8292 	bne.w	800e8a8 <_dtoa_r+0x998>
 800e384:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800e388:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e38c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f2c0 8153 	blt.w	800e63a <_dtoa_r+0x72a>
 800e394:	f1b9 0f0e 	cmp.w	r9, #14
 800e398:	f300 814f 	bgt.w	800e63a <_dtoa_r+0x72a>
 800e39c:	4b45      	ldr	r3, [pc, #276]	; (800e4b4 <_dtoa_r+0x5a4>)
 800e39e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e3a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e3a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e3aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f280 80db 	bge.w	800e568 <_dtoa_r+0x658>
 800e3b2:	9b02      	ldr	r3, [sp, #8]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f300 80d7 	bgt.w	800e568 <_dtoa_r+0x658>
 800e3ba:	f040 8274 	bne.w	800e8a6 <_dtoa_r+0x996>
 800e3be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	4b40      	ldr	r3, [pc, #256]	; (800e4c8 <_dtoa_r+0x5b8>)
 800e3c6:	f7f2 f8f3 	bl	80005b0 <__aeabi_dmul>
 800e3ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3ce:	f7f2 fb75 	bl	8000abc <__aeabi_dcmpge>
 800e3d2:	9c02      	ldr	r4, [sp, #8]
 800e3d4:	4626      	mov	r6, r4
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	f040 824a 	bne.w	800e870 <_dtoa_r+0x960>
 800e3dc:	2331      	movs	r3, #49	; 0x31
 800e3de:	9f08      	ldr	r7, [sp, #32]
 800e3e0:	f109 0901 	add.w	r9, r9, #1
 800e3e4:	f807 3b01 	strb.w	r3, [r7], #1
 800e3e8:	e246      	b.n	800e878 <_dtoa_r+0x968>
 800e3ea:	07e2      	lsls	r2, r4, #31
 800e3ec:	d505      	bpl.n	800e3fa <_dtoa_r+0x4ea>
 800e3ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e3f2:	f7f2 f8dd 	bl	80005b0 <__aeabi_dmul>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	3701      	adds	r7, #1
 800e3fa:	1064      	asrs	r4, r4, #1
 800e3fc:	3608      	adds	r6, #8
 800e3fe:	e76d      	b.n	800e2dc <_dtoa_r+0x3cc>
 800e400:	2702      	movs	r7, #2
 800e402:	e770      	b.n	800e2e6 <_dtoa_r+0x3d6>
 800e404:	46c8      	mov	r8, r9
 800e406:	9c02      	ldr	r4, [sp, #8]
 800e408:	e78f      	b.n	800e32a <_dtoa_r+0x41a>
 800e40a:	9908      	ldr	r1, [sp, #32]
 800e40c:	4b29      	ldr	r3, [pc, #164]	; (800e4b4 <_dtoa_r+0x5a4>)
 800e40e:	4421      	add	r1, r4
 800e410:	9112      	str	r1, [sp, #72]	; 0x48
 800e412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e418:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e41c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e420:	2900      	cmp	r1, #0
 800e422:	d055      	beq.n	800e4d0 <_dtoa_r+0x5c0>
 800e424:	2000      	movs	r0, #0
 800e426:	4929      	ldr	r1, [pc, #164]	; (800e4cc <_dtoa_r+0x5bc>)
 800e428:	f7f2 f9ec 	bl	8000804 <__aeabi_ddiv>
 800e42c:	463b      	mov	r3, r7
 800e42e:	4632      	mov	r2, r6
 800e430:	f7f1 ff06 	bl	8000240 <__aeabi_dsub>
 800e434:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e438:	9f08      	ldr	r7, [sp, #32]
 800e43a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e43e:	f7f2 fb67 	bl	8000b10 <__aeabi_d2iz>
 800e442:	4604      	mov	r4, r0
 800e444:	f7f2 f84a 	bl	80004dc <__aeabi_i2d>
 800e448:	4602      	mov	r2, r0
 800e44a:	460b      	mov	r3, r1
 800e44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e450:	f7f1 fef6 	bl	8000240 <__aeabi_dsub>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	3430      	adds	r4, #48	; 0x30
 800e45a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e45e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e462:	f807 4b01 	strb.w	r4, [r7], #1
 800e466:	f7f2 fb15 	bl	8000a94 <__aeabi_dcmplt>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d174      	bne.n	800e558 <_dtoa_r+0x648>
 800e46e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e472:	2000      	movs	r0, #0
 800e474:	4911      	ldr	r1, [pc, #68]	; (800e4bc <_dtoa_r+0x5ac>)
 800e476:	f7f1 fee3 	bl	8000240 <__aeabi_dsub>
 800e47a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e47e:	f7f2 fb09 	bl	8000a94 <__aeabi_dcmplt>
 800e482:	2800      	cmp	r0, #0
 800e484:	f040 80b6 	bne.w	800e5f4 <_dtoa_r+0x6e4>
 800e488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e48a:	429f      	cmp	r7, r3
 800e48c:	f43f af7a 	beq.w	800e384 <_dtoa_r+0x474>
 800e490:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e494:	2200      	movs	r2, #0
 800e496:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <_dtoa_r+0x5b0>)
 800e498:	f7f2 f88a 	bl	80005b0 <__aeabi_dmul>
 800e49c:	2200      	movs	r2, #0
 800e49e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4a6:	4b06      	ldr	r3, [pc, #24]	; (800e4c0 <_dtoa_r+0x5b0>)
 800e4a8:	f7f2 f882 	bl	80005b0 <__aeabi_dmul>
 800e4ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4b0:	e7c3      	b.n	800e43a <_dtoa_r+0x52a>
 800e4b2:	bf00      	nop
 800e4b4:	08011dc8 	.word	0x08011dc8
 800e4b8:	08011da0 	.word	0x08011da0
 800e4bc:	3ff00000 	.word	0x3ff00000
 800e4c0:	40240000 	.word	0x40240000
 800e4c4:	401c0000 	.word	0x401c0000
 800e4c8:	40140000 	.word	0x40140000
 800e4cc:	3fe00000 	.word	0x3fe00000
 800e4d0:	4630      	mov	r0, r6
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	f7f2 f86c 	bl	80005b0 <__aeabi_dmul>
 800e4d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e4de:	9c08      	ldr	r4, [sp, #32]
 800e4e0:	9314      	str	r3, [sp, #80]	; 0x50
 800e4e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4e6:	f7f2 fb13 	bl	8000b10 <__aeabi_d2iz>
 800e4ea:	9015      	str	r0, [sp, #84]	; 0x54
 800e4ec:	f7f1 fff6 	bl	80004dc <__aeabi_i2d>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4f8:	f7f1 fea2 	bl	8000240 <__aeabi_dsub>
 800e4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4fe:	4606      	mov	r6, r0
 800e500:	3330      	adds	r3, #48	; 0x30
 800e502:	f804 3b01 	strb.w	r3, [r4], #1
 800e506:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e508:	460f      	mov	r7, r1
 800e50a:	429c      	cmp	r4, r3
 800e50c:	f04f 0200 	mov.w	r2, #0
 800e510:	d124      	bne.n	800e55c <_dtoa_r+0x64c>
 800e512:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e516:	4bb3      	ldr	r3, [pc, #716]	; (800e7e4 <_dtoa_r+0x8d4>)
 800e518:	f7f1 fe94 	bl	8000244 <__adddf3>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	4630      	mov	r0, r6
 800e522:	4639      	mov	r1, r7
 800e524:	f7f2 fad4 	bl	8000ad0 <__aeabi_dcmpgt>
 800e528:	2800      	cmp	r0, #0
 800e52a:	d162      	bne.n	800e5f2 <_dtoa_r+0x6e2>
 800e52c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e530:	2000      	movs	r0, #0
 800e532:	49ac      	ldr	r1, [pc, #688]	; (800e7e4 <_dtoa_r+0x8d4>)
 800e534:	f7f1 fe84 	bl	8000240 <__aeabi_dsub>
 800e538:	4602      	mov	r2, r0
 800e53a:	460b      	mov	r3, r1
 800e53c:	4630      	mov	r0, r6
 800e53e:	4639      	mov	r1, r7
 800e540:	f7f2 faa8 	bl	8000a94 <__aeabi_dcmplt>
 800e544:	2800      	cmp	r0, #0
 800e546:	f43f af1d 	beq.w	800e384 <_dtoa_r+0x474>
 800e54a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e54c:	1e7b      	subs	r3, r7, #1
 800e54e:	9314      	str	r3, [sp, #80]	; 0x50
 800e550:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e554:	2b30      	cmp	r3, #48	; 0x30
 800e556:	d0f8      	beq.n	800e54a <_dtoa_r+0x63a>
 800e558:	46c1      	mov	r9, r8
 800e55a:	e03a      	b.n	800e5d2 <_dtoa_r+0x6c2>
 800e55c:	4ba2      	ldr	r3, [pc, #648]	; (800e7e8 <_dtoa_r+0x8d8>)
 800e55e:	f7f2 f827 	bl	80005b0 <__aeabi_dmul>
 800e562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e566:	e7bc      	b.n	800e4e2 <_dtoa_r+0x5d2>
 800e568:	9f08      	ldr	r7, [sp, #32]
 800e56a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e56e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e572:	f7f2 f947 	bl	8000804 <__aeabi_ddiv>
 800e576:	f7f2 facb 	bl	8000b10 <__aeabi_d2iz>
 800e57a:	4604      	mov	r4, r0
 800e57c:	f7f1 ffae 	bl	80004dc <__aeabi_i2d>
 800e580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e584:	f7f2 f814 	bl	80005b0 <__aeabi_dmul>
 800e588:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e58c:	460b      	mov	r3, r1
 800e58e:	4602      	mov	r2, r0
 800e590:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e594:	f7f1 fe54 	bl	8000240 <__aeabi_dsub>
 800e598:	f807 6b01 	strb.w	r6, [r7], #1
 800e59c:	9e08      	ldr	r6, [sp, #32]
 800e59e:	9b02      	ldr	r3, [sp, #8]
 800e5a0:	1bbe      	subs	r6, r7, r6
 800e5a2:	42b3      	cmp	r3, r6
 800e5a4:	d13a      	bne.n	800e61c <_dtoa_r+0x70c>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	f7f1 fe4b 	bl	8000244 <__adddf3>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5ba:	f7f2 fa89 	bl	8000ad0 <__aeabi_dcmpgt>
 800e5be:	bb58      	cbnz	r0, 800e618 <_dtoa_r+0x708>
 800e5c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5c8:	f7f2 fa5a 	bl	8000a80 <__aeabi_dcmpeq>
 800e5cc:	b108      	cbz	r0, 800e5d2 <_dtoa_r+0x6c2>
 800e5ce:	07e1      	lsls	r1, r4, #31
 800e5d0:	d422      	bmi.n	800e618 <_dtoa_r+0x708>
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	4651      	mov	r1, sl
 800e5d6:	f000 fe6d 	bl	800f2b4 <_Bfree>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	703b      	strb	r3, [r7, #0]
 800e5de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e5e0:	f109 0001 	add.w	r0, r9, #1
 800e5e4:	6018      	str	r0, [r3, #0]
 800e5e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f43f acdf 	beq.w	800dfac <_dtoa_r+0x9c>
 800e5ee:	601f      	str	r7, [r3, #0]
 800e5f0:	e4dc      	b.n	800dfac <_dtoa_r+0x9c>
 800e5f2:	4627      	mov	r7, r4
 800e5f4:	463b      	mov	r3, r7
 800e5f6:	461f      	mov	r7, r3
 800e5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5fc:	2a39      	cmp	r2, #57	; 0x39
 800e5fe:	d107      	bne.n	800e610 <_dtoa_r+0x700>
 800e600:	9a08      	ldr	r2, [sp, #32]
 800e602:	429a      	cmp	r2, r3
 800e604:	d1f7      	bne.n	800e5f6 <_dtoa_r+0x6e6>
 800e606:	2230      	movs	r2, #48	; 0x30
 800e608:	9908      	ldr	r1, [sp, #32]
 800e60a:	f108 0801 	add.w	r8, r8, #1
 800e60e:	700a      	strb	r2, [r1, #0]
 800e610:	781a      	ldrb	r2, [r3, #0]
 800e612:	3201      	adds	r2, #1
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	e79f      	b.n	800e558 <_dtoa_r+0x648>
 800e618:	46c8      	mov	r8, r9
 800e61a:	e7eb      	b.n	800e5f4 <_dtoa_r+0x6e4>
 800e61c:	2200      	movs	r2, #0
 800e61e:	4b72      	ldr	r3, [pc, #456]	; (800e7e8 <_dtoa_r+0x8d8>)
 800e620:	f7f1 ffc6 	bl	80005b0 <__aeabi_dmul>
 800e624:	4602      	mov	r2, r0
 800e626:	460b      	mov	r3, r1
 800e628:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e62c:	2200      	movs	r2, #0
 800e62e:	2300      	movs	r3, #0
 800e630:	f7f2 fa26 	bl	8000a80 <__aeabi_dcmpeq>
 800e634:	2800      	cmp	r0, #0
 800e636:	d098      	beq.n	800e56a <_dtoa_r+0x65a>
 800e638:	e7cb      	b.n	800e5d2 <_dtoa_r+0x6c2>
 800e63a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e63c:	2a00      	cmp	r2, #0
 800e63e:	f000 80cd 	beq.w	800e7dc <_dtoa_r+0x8cc>
 800e642:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e644:	2a01      	cmp	r2, #1
 800e646:	f300 80af 	bgt.w	800e7a8 <_dtoa_r+0x898>
 800e64a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e64c:	2a00      	cmp	r2, #0
 800e64e:	f000 80a7 	beq.w	800e7a0 <_dtoa_r+0x890>
 800e652:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e656:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e658:	9f06      	ldr	r7, [sp, #24]
 800e65a:	9a06      	ldr	r2, [sp, #24]
 800e65c:	2101      	movs	r1, #1
 800e65e:	441a      	add	r2, r3
 800e660:	9206      	str	r2, [sp, #24]
 800e662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e664:	4628      	mov	r0, r5
 800e666:	441a      	add	r2, r3
 800e668:	9209      	str	r2, [sp, #36]	; 0x24
 800e66a:	f000 ff27 	bl	800f4bc <__i2b>
 800e66e:	4606      	mov	r6, r0
 800e670:	2f00      	cmp	r7, #0
 800e672:	dd0c      	ble.n	800e68e <_dtoa_r+0x77e>
 800e674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	dd09      	ble.n	800e68e <_dtoa_r+0x77e>
 800e67a:	42bb      	cmp	r3, r7
 800e67c:	bfa8      	it	ge
 800e67e:	463b      	movge	r3, r7
 800e680:	9a06      	ldr	r2, [sp, #24]
 800e682:	1aff      	subs	r7, r7, r3
 800e684:	1ad2      	subs	r2, r2, r3
 800e686:	9206      	str	r2, [sp, #24]
 800e688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e68a:	1ad3      	subs	r3, r2, r3
 800e68c:	9309      	str	r3, [sp, #36]	; 0x24
 800e68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e690:	b1f3      	cbz	r3, 800e6d0 <_dtoa_r+0x7c0>
 800e692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 80a9 	beq.w	800e7ec <_dtoa_r+0x8dc>
 800e69a:	2c00      	cmp	r4, #0
 800e69c:	dd10      	ble.n	800e6c0 <_dtoa_r+0x7b0>
 800e69e:	4631      	mov	r1, r6
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	f000 ffc4 	bl	800f630 <__pow5mult>
 800e6a8:	4652      	mov	r2, sl
 800e6aa:	4601      	mov	r1, r0
 800e6ac:	4606      	mov	r6, r0
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f000 ff1a 	bl	800f4e8 <__multiply>
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	4651      	mov	r1, sl
 800e6b8:	4628      	mov	r0, r5
 800e6ba:	f000 fdfb 	bl	800f2b4 <_Bfree>
 800e6be:	46c2      	mov	sl, r8
 800e6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6c2:	1b1a      	subs	r2, r3, r4
 800e6c4:	d004      	beq.n	800e6d0 <_dtoa_r+0x7c0>
 800e6c6:	4651      	mov	r1, sl
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	f000 ffb1 	bl	800f630 <__pow5mult>
 800e6ce:	4682      	mov	sl, r0
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	4628      	mov	r0, r5
 800e6d4:	f000 fef2 	bl	800f4bc <__i2b>
 800e6d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e6da:	4604      	mov	r4, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f340 8087 	ble.w	800e7f0 <_dtoa_r+0x8e0>
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	4601      	mov	r1, r0
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	f000 ffa2 	bl	800f630 <__pow5mult>
 800e6ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	f340 8080 	ble.w	800e7f6 <_dtoa_r+0x8e6>
 800e6f6:	f04f 0800 	mov.w	r8, #0
 800e6fa:	6923      	ldr	r3, [r4, #16]
 800e6fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e700:	6918      	ldr	r0, [r3, #16]
 800e702:	f000 fe8d 	bl	800f420 <__hi0bits>
 800e706:	f1c0 0020 	rsb	r0, r0, #32
 800e70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e70c:	4418      	add	r0, r3
 800e70e:	f010 001f 	ands.w	r0, r0, #31
 800e712:	f000 8092 	beq.w	800e83a <_dtoa_r+0x92a>
 800e716:	f1c0 0320 	rsb	r3, r0, #32
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	f340 808a 	ble.w	800e834 <_dtoa_r+0x924>
 800e720:	f1c0 001c 	rsb	r0, r0, #28
 800e724:	9b06      	ldr	r3, [sp, #24]
 800e726:	4407      	add	r7, r0
 800e728:	4403      	add	r3, r0
 800e72a:	9306      	str	r3, [sp, #24]
 800e72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e72e:	4403      	add	r3, r0
 800e730:	9309      	str	r3, [sp, #36]	; 0x24
 800e732:	9b06      	ldr	r3, [sp, #24]
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd05      	ble.n	800e744 <_dtoa_r+0x834>
 800e738:	4651      	mov	r1, sl
 800e73a:	461a      	mov	r2, r3
 800e73c:	4628      	mov	r0, r5
 800e73e:	f000 ffd1 	bl	800f6e4 <__lshift>
 800e742:	4682      	mov	sl, r0
 800e744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e746:	2b00      	cmp	r3, #0
 800e748:	dd05      	ble.n	800e756 <_dtoa_r+0x846>
 800e74a:	4621      	mov	r1, r4
 800e74c:	461a      	mov	r2, r3
 800e74e:	4628      	mov	r0, r5
 800e750:	f000 ffc8 	bl	800f6e4 <__lshift>
 800e754:	4604      	mov	r4, r0
 800e756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d070      	beq.n	800e83e <_dtoa_r+0x92e>
 800e75c:	4621      	mov	r1, r4
 800e75e:	4650      	mov	r0, sl
 800e760:	f001 f82c 	bl	800f7bc <__mcmp>
 800e764:	2800      	cmp	r0, #0
 800e766:	da6a      	bge.n	800e83e <_dtoa_r+0x92e>
 800e768:	2300      	movs	r3, #0
 800e76a:	4651      	mov	r1, sl
 800e76c:	220a      	movs	r2, #10
 800e76e:	4628      	mov	r0, r5
 800e770:	f000 fdc2 	bl	800f2f8 <__multadd>
 800e774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e776:	4682      	mov	sl, r0
 800e778:	f109 39ff 	add.w	r9, r9, #4294967295
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f000 8193 	beq.w	800eaa8 <_dtoa_r+0xb98>
 800e782:	4631      	mov	r1, r6
 800e784:	2300      	movs	r3, #0
 800e786:	220a      	movs	r2, #10
 800e788:	4628      	mov	r0, r5
 800e78a:	f000 fdb5 	bl	800f2f8 <__multadd>
 800e78e:	f1bb 0f00 	cmp.w	fp, #0
 800e792:	4606      	mov	r6, r0
 800e794:	f300 8093 	bgt.w	800e8be <_dtoa_r+0x9ae>
 800e798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	dc57      	bgt.n	800e84e <_dtoa_r+0x93e>
 800e79e:	e08e      	b.n	800e8be <_dtoa_r+0x9ae>
 800e7a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e7a6:	e756      	b.n	800e656 <_dtoa_r+0x746>
 800e7a8:	9b02      	ldr	r3, [sp, #8]
 800e7aa:	1e5c      	subs	r4, r3, #1
 800e7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ae:	42a3      	cmp	r3, r4
 800e7b0:	bfb7      	itett	lt
 800e7b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e7b4:	1b1c      	subge	r4, r3, r4
 800e7b6:	1ae2      	sublt	r2, r4, r3
 800e7b8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e7ba:	bfbe      	ittt	lt
 800e7bc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e7be:	189b      	addlt	r3, r3, r2
 800e7c0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e7c2:	9b02      	ldr	r3, [sp, #8]
 800e7c4:	bfb8      	it	lt
 800e7c6:	2400      	movlt	r4, #0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	bfbb      	ittet	lt
 800e7cc:	9b06      	ldrlt	r3, [sp, #24]
 800e7ce:	9a02      	ldrlt	r2, [sp, #8]
 800e7d0:	9f06      	ldrge	r7, [sp, #24]
 800e7d2:	1a9f      	sublt	r7, r3, r2
 800e7d4:	bfac      	ite	ge
 800e7d6:	9b02      	ldrge	r3, [sp, #8]
 800e7d8:	2300      	movlt	r3, #0
 800e7da:	e73e      	b.n	800e65a <_dtoa_r+0x74a>
 800e7dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e7de:	9f06      	ldr	r7, [sp, #24]
 800e7e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e7e2:	e745      	b.n	800e670 <_dtoa_r+0x760>
 800e7e4:	3fe00000 	.word	0x3fe00000
 800e7e8:	40240000 	.word	0x40240000
 800e7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7ee:	e76a      	b.n	800e6c6 <_dtoa_r+0x7b6>
 800e7f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	dc19      	bgt.n	800e82a <_dtoa_r+0x91a>
 800e7f6:	9b04      	ldr	r3, [sp, #16]
 800e7f8:	b9bb      	cbnz	r3, 800e82a <_dtoa_r+0x91a>
 800e7fa:	9b05      	ldr	r3, [sp, #20]
 800e7fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e800:	b99b      	cbnz	r3, 800e82a <_dtoa_r+0x91a>
 800e802:	9b05      	ldr	r3, [sp, #20]
 800e804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e808:	0d1b      	lsrs	r3, r3, #20
 800e80a:	051b      	lsls	r3, r3, #20
 800e80c:	b183      	cbz	r3, 800e830 <_dtoa_r+0x920>
 800e80e:	f04f 0801 	mov.w	r8, #1
 800e812:	9b06      	ldr	r3, [sp, #24]
 800e814:	3301      	adds	r3, #1
 800e816:	9306      	str	r3, [sp, #24]
 800e818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e81a:	3301      	adds	r3, #1
 800e81c:	9309      	str	r3, [sp, #36]	; 0x24
 800e81e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e820:	2b00      	cmp	r3, #0
 800e822:	f47f af6a 	bne.w	800e6fa <_dtoa_r+0x7ea>
 800e826:	2001      	movs	r0, #1
 800e828:	e76f      	b.n	800e70a <_dtoa_r+0x7fa>
 800e82a:	f04f 0800 	mov.w	r8, #0
 800e82e:	e7f6      	b.n	800e81e <_dtoa_r+0x90e>
 800e830:	4698      	mov	r8, r3
 800e832:	e7f4      	b.n	800e81e <_dtoa_r+0x90e>
 800e834:	f43f af7d 	beq.w	800e732 <_dtoa_r+0x822>
 800e838:	4618      	mov	r0, r3
 800e83a:	301c      	adds	r0, #28
 800e83c:	e772      	b.n	800e724 <_dtoa_r+0x814>
 800e83e:	9b02      	ldr	r3, [sp, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	dc36      	bgt.n	800e8b2 <_dtoa_r+0x9a2>
 800e844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e846:	2b02      	cmp	r3, #2
 800e848:	dd33      	ble.n	800e8b2 <_dtoa_r+0x9a2>
 800e84a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e84e:	f1bb 0f00 	cmp.w	fp, #0
 800e852:	d10d      	bne.n	800e870 <_dtoa_r+0x960>
 800e854:	4621      	mov	r1, r4
 800e856:	465b      	mov	r3, fp
 800e858:	2205      	movs	r2, #5
 800e85a:	4628      	mov	r0, r5
 800e85c:	f000 fd4c 	bl	800f2f8 <__multadd>
 800e860:	4601      	mov	r1, r0
 800e862:	4604      	mov	r4, r0
 800e864:	4650      	mov	r0, sl
 800e866:	f000 ffa9 	bl	800f7bc <__mcmp>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	f73f adb6 	bgt.w	800e3dc <_dtoa_r+0x4cc>
 800e870:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e872:	9f08      	ldr	r7, [sp, #32]
 800e874:	ea6f 0903 	mvn.w	r9, r3
 800e878:	f04f 0800 	mov.w	r8, #0
 800e87c:	4621      	mov	r1, r4
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 fd18 	bl	800f2b4 <_Bfree>
 800e884:	2e00      	cmp	r6, #0
 800e886:	f43f aea4 	beq.w	800e5d2 <_dtoa_r+0x6c2>
 800e88a:	f1b8 0f00 	cmp.w	r8, #0
 800e88e:	d005      	beq.n	800e89c <_dtoa_r+0x98c>
 800e890:	45b0      	cmp	r8, r6
 800e892:	d003      	beq.n	800e89c <_dtoa_r+0x98c>
 800e894:	4641      	mov	r1, r8
 800e896:	4628      	mov	r0, r5
 800e898:	f000 fd0c 	bl	800f2b4 <_Bfree>
 800e89c:	4631      	mov	r1, r6
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f000 fd08 	bl	800f2b4 <_Bfree>
 800e8a4:	e695      	b.n	800e5d2 <_dtoa_r+0x6c2>
 800e8a6:	2400      	movs	r4, #0
 800e8a8:	4626      	mov	r6, r4
 800e8aa:	e7e1      	b.n	800e870 <_dtoa_r+0x960>
 800e8ac:	46c1      	mov	r9, r8
 800e8ae:	4626      	mov	r6, r4
 800e8b0:	e594      	b.n	800e3dc <_dtoa_r+0x4cc>
 800e8b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8b4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f000 80fc 	beq.w	800eab6 <_dtoa_r+0xba6>
 800e8be:	2f00      	cmp	r7, #0
 800e8c0:	dd05      	ble.n	800e8ce <_dtoa_r+0x9be>
 800e8c2:	4631      	mov	r1, r6
 800e8c4:	463a      	mov	r2, r7
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f000 ff0c 	bl	800f6e4 <__lshift>
 800e8cc:	4606      	mov	r6, r0
 800e8ce:	f1b8 0f00 	cmp.w	r8, #0
 800e8d2:	d05c      	beq.n	800e98e <_dtoa_r+0xa7e>
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	6871      	ldr	r1, [r6, #4]
 800e8d8:	f000 fcac 	bl	800f234 <_Balloc>
 800e8dc:	4607      	mov	r7, r0
 800e8de:	b928      	cbnz	r0, 800e8ec <_dtoa_r+0x9dc>
 800e8e0:	4602      	mov	r2, r0
 800e8e2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e8e6:	4b7e      	ldr	r3, [pc, #504]	; (800eae0 <_dtoa_r+0xbd0>)
 800e8e8:	f7ff bb26 	b.w	800df38 <_dtoa_r+0x28>
 800e8ec:	6932      	ldr	r2, [r6, #16]
 800e8ee:	f106 010c 	add.w	r1, r6, #12
 800e8f2:	3202      	adds	r2, #2
 800e8f4:	0092      	lsls	r2, r2, #2
 800e8f6:	300c      	adds	r0, #12
 800e8f8:	f000 fc82 	bl	800f200 <memcpy>
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	4639      	mov	r1, r7
 800e900:	4628      	mov	r0, r5
 800e902:	f000 feef 	bl	800f6e4 <__lshift>
 800e906:	46b0      	mov	r8, r6
 800e908:	4606      	mov	r6, r0
 800e90a:	9b08      	ldr	r3, [sp, #32]
 800e90c:	3301      	adds	r3, #1
 800e90e:	9302      	str	r3, [sp, #8]
 800e910:	9b08      	ldr	r3, [sp, #32]
 800e912:	445b      	add	r3, fp
 800e914:	930a      	str	r3, [sp, #40]	; 0x28
 800e916:	9b04      	ldr	r3, [sp, #16]
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	9309      	str	r3, [sp, #36]	; 0x24
 800e91e:	9b02      	ldr	r3, [sp, #8]
 800e920:	4621      	mov	r1, r4
 800e922:	4650      	mov	r0, sl
 800e924:	f103 3bff 	add.w	fp, r3, #4294967295
 800e928:	f7ff fa62 	bl	800ddf0 <quorem>
 800e92c:	4603      	mov	r3, r0
 800e92e:	4641      	mov	r1, r8
 800e930:	3330      	adds	r3, #48	; 0x30
 800e932:	9004      	str	r0, [sp, #16]
 800e934:	4650      	mov	r0, sl
 800e936:	930b      	str	r3, [sp, #44]	; 0x2c
 800e938:	f000 ff40 	bl	800f7bc <__mcmp>
 800e93c:	4632      	mov	r2, r6
 800e93e:	9006      	str	r0, [sp, #24]
 800e940:	4621      	mov	r1, r4
 800e942:	4628      	mov	r0, r5
 800e944:	f000 ff56 	bl	800f7f4 <__mdiff>
 800e948:	68c2      	ldr	r2, [r0, #12]
 800e94a:	4607      	mov	r7, r0
 800e94c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e94e:	bb02      	cbnz	r2, 800e992 <_dtoa_r+0xa82>
 800e950:	4601      	mov	r1, r0
 800e952:	4650      	mov	r0, sl
 800e954:	f000 ff32 	bl	800f7bc <__mcmp>
 800e958:	4602      	mov	r2, r0
 800e95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e95c:	4639      	mov	r1, r7
 800e95e:	4628      	mov	r0, r5
 800e960:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e964:	f000 fca6 	bl	800f2b4 <_Bfree>
 800e968:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e96a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e96c:	9f02      	ldr	r7, [sp, #8]
 800e96e:	ea43 0102 	orr.w	r1, r3, r2
 800e972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e974:	430b      	orrs	r3, r1
 800e976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e978:	d10d      	bne.n	800e996 <_dtoa_r+0xa86>
 800e97a:	2b39      	cmp	r3, #57	; 0x39
 800e97c:	d027      	beq.n	800e9ce <_dtoa_r+0xabe>
 800e97e:	9a06      	ldr	r2, [sp, #24]
 800e980:	2a00      	cmp	r2, #0
 800e982:	dd01      	ble.n	800e988 <_dtoa_r+0xa78>
 800e984:	9b04      	ldr	r3, [sp, #16]
 800e986:	3331      	adds	r3, #49	; 0x31
 800e988:	f88b 3000 	strb.w	r3, [fp]
 800e98c:	e776      	b.n	800e87c <_dtoa_r+0x96c>
 800e98e:	4630      	mov	r0, r6
 800e990:	e7b9      	b.n	800e906 <_dtoa_r+0x9f6>
 800e992:	2201      	movs	r2, #1
 800e994:	e7e2      	b.n	800e95c <_dtoa_r+0xa4c>
 800e996:	9906      	ldr	r1, [sp, #24]
 800e998:	2900      	cmp	r1, #0
 800e99a:	db04      	blt.n	800e9a6 <_dtoa_r+0xa96>
 800e99c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800e99e:	4301      	orrs	r1, r0
 800e9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9a2:	4301      	orrs	r1, r0
 800e9a4:	d120      	bne.n	800e9e8 <_dtoa_r+0xad8>
 800e9a6:	2a00      	cmp	r2, #0
 800e9a8:	ddee      	ble.n	800e988 <_dtoa_r+0xa78>
 800e9aa:	4651      	mov	r1, sl
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	9302      	str	r3, [sp, #8]
 800e9b2:	f000 fe97 	bl	800f6e4 <__lshift>
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	4682      	mov	sl, r0
 800e9ba:	f000 feff 	bl	800f7bc <__mcmp>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	9b02      	ldr	r3, [sp, #8]
 800e9c2:	dc02      	bgt.n	800e9ca <_dtoa_r+0xaba>
 800e9c4:	d1e0      	bne.n	800e988 <_dtoa_r+0xa78>
 800e9c6:	07da      	lsls	r2, r3, #31
 800e9c8:	d5de      	bpl.n	800e988 <_dtoa_r+0xa78>
 800e9ca:	2b39      	cmp	r3, #57	; 0x39
 800e9cc:	d1da      	bne.n	800e984 <_dtoa_r+0xa74>
 800e9ce:	2339      	movs	r3, #57	; 0x39
 800e9d0:	f88b 3000 	strb.w	r3, [fp]
 800e9d4:	463b      	mov	r3, r7
 800e9d6:	461f      	mov	r7, r3
 800e9d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	2a39      	cmp	r2, #57	; 0x39
 800e9e0:	d050      	beq.n	800ea84 <_dtoa_r+0xb74>
 800e9e2:	3201      	adds	r2, #1
 800e9e4:	701a      	strb	r2, [r3, #0]
 800e9e6:	e749      	b.n	800e87c <_dtoa_r+0x96c>
 800e9e8:	2a00      	cmp	r2, #0
 800e9ea:	dd03      	ble.n	800e9f4 <_dtoa_r+0xae4>
 800e9ec:	2b39      	cmp	r3, #57	; 0x39
 800e9ee:	d0ee      	beq.n	800e9ce <_dtoa_r+0xabe>
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	e7c9      	b.n	800e988 <_dtoa_r+0xa78>
 800e9f4:	9a02      	ldr	r2, [sp, #8]
 800e9f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e9fc:	428a      	cmp	r2, r1
 800e9fe:	d02a      	beq.n	800ea56 <_dtoa_r+0xb46>
 800ea00:	4651      	mov	r1, sl
 800ea02:	2300      	movs	r3, #0
 800ea04:	220a      	movs	r2, #10
 800ea06:	4628      	mov	r0, r5
 800ea08:	f000 fc76 	bl	800f2f8 <__multadd>
 800ea0c:	45b0      	cmp	r8, r6
 800ea0e:	4682      	mov	sl, r0
 800ea10:	f04f 0300 	mov.w	r3, #0
 800ea14:	f04f 020a 	mov.w	r2, #10
 800ea18:	4641      	mov	r1, r8
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	d107      	bne.n	800ea2e <_dtoa_r+0xb1e>
 800ea1e:	f000 fc6b 	bl	800f2f8 <__multadd>
 800ea22:	4680      	mov	r8, r0
 800ea24:	4606      	mov	r6, r0
 800ea26:	9b02      	ldr	r3, [sp, #8]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	9302      	str	r3, [sp, #8]
 800ea2c:	e777      	b.n	800e91e <_dtoa_r+0xa0e>
 800ea2e:	f000 fc63 	bl	800f2f8 <__multadd>
 800ea32:	4631      	mov	r1, r6
 800ea34:	4680      	mov	r8, r0
 800ea36:	2300      	movs	r3, #0
 800ea38:	220a      	movs	r2, #10
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	f000 fc5c 	bl	800f2f8 <__multadd>
 800ea40:	4606      	mov	r6, r0
 800ea42:	e7f0      	b.n	800ea26 <_dtoa_r+0xb16>
 800ea44:	f1bb 0f00 	cmp.w	fp, #0
 800ea48:	bfcc      	ite	gt
 800ea4a:	465f      	movgt	r7, fp
 800ea4c:	2701      	movle	r7, #1
 800ea4e:	f04f 0800 	mov.w	r8, #0
 800ea52:	9a08      	ldr	r2, [sp, #32]
 800ea54:	4417      	add	r7, r2
 800ea56:	4651      	mov	r1, sl
 800ea58:	2201      	movs	r2, #1
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	9302      	str	r3, [sp, #8]
 800ea5e:	f000 fe41 	bl	800f6e4 <__lshift>
 800ea62:	4621      	mov	r1, r4
 800ea64:	4682      	mov	sl, r0
 800ea66:	f000 fea9 	bl	800f7bc <__mcmp>
 800ea6a:	2800      	cmp	r0, #0
 800ea6c:	dcb2      	bgt.n	800e9d4 <_dtoa_r+0xac4>
 800ea6e:	d102      	bne.n	800ea76 <_dtoa_r+0xb66>
 800ea70:	9b02      	ldr	r3, [sp, #8]
 800ea72:	07db      	lsls	r3, r3, #31
 800ea74:	d4ae      	bmi.n	800e9d4 <_dtoa_r+0xac4>
 800ea76:	463b      	mov	r3, r7
 800ea78:	461f      	mov	r7, r3
 800ea7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea7e:	2a30      	cmp	r2, #48	; 0x30
 800ea80:	d0fa      	beq.n	800ea78 <_dtoa_r+0xb68>
 800ea82:	e6fb      	b.n	800e87c <_dtoa_r+0x96c>
 800ea84:	9a08      	ldr	r2, [sp, #32]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d1a5      	bne.n	800e9d6 <_dtoa_r+0xac6>
 800ea8a:	2331      	movs	r3, #49	; 0x31
 800ea8c:	f109 0901 	add.w	r9, r9, #1
 800ea90:	7013      	strb	r3, [r2, #0]
 800ea92:	e6f3      	b.n	800e87c <_dtoa_r+0x96c>
 800ea94:	4b13      	ldr	r3, [pc, #76]	; (800eae4 <_dtoa_r+0xbd4>)
 800ea96:	f7ff baa7 	b.w	800dfe8 <_dtoa_r+0xd8>
 800ea9a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f47f aa80 	bne.w	800dfa2 <_dtoa_r+0x92>
 800eaa2:	4b11      	ldr	r3, [pc, #68]	; (800eae8 <_dtoa_r+0xbd8>)
 800eaa4:	f7ff baa0 	b.w	800dfe8 <_dtoa_r+0xd8>
 800eaa8:	f1bb 0f00 	cmp.w	fp, #0
 800eaac:	dc03      	bgt.n	800eab6 <_dtoa_r+0xba6>
 800eaae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	f73f aecc 	bgt.w	800e84e <_dtoa_r+0x93e>
 800eab6:	9f08      	ldr	r7, [sp, #32]
 800eab8:	4621      	mov	r1, r4
 800eaba:	4650      	mov	r0, sl
 800eabc:	f7ff f998 	bl	800ddf0 <quorem>
 800eac0:	9a08      	ldr	r2, [sp, #32]
 800eac2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800eac6:	f807 3b01 	strb.w	r3, [r7], #1
 800eaca:	1aba      	subs	r2, r7, r2
 800eacc:	4593      	cmp	fp, r2
 800eace:	ddb9      	ble.n	800ea44 <_dtoa_r+0xb34>
 800ead0:	4651      	mov	r1, sl
 800ead2:	2300      	movs	r3, #0
 800ead4:	220a      	movs	r2, #10
 800ead6:	4628      	mov	r0, r5
 800ead8:	f000 fc0e 	bl	800f2f8 <__multadd>
 800eadc:	4682      	mov	sl, r0
 800eade:	e7eb      	b.n	800eab8 <_dtoa_r+0xba8>
 800eae0:	08011cb0 	.word	0x08011cb0
 800eae4:	08011b8c 	.word	0x08011b8c
 800eae8:	08011c2d 	.word	0x08011c2d

0800eaec <rshift>:
 800eaec:	6903      	ldr	r3, [r0, #16]
 800eaee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eaf2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eaf6:	f100 0414 	add.w	r4, r0, #20
 800eafa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eafe:	dd46      	ble.n	800eb8e <rshift+0xa2>
 800eb00:	f011 011f 	ands.w	r1, r1, #31
 800eb04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eb08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eb0c:	d10c      	bne.n	800eb28 <rshift+0x3c>
 800eb0e:	4629      	mov	r1, r5
 800eb10:	f100 0710 	add.w	r7, r0, #16
 800eb14:	42b1      	cmp	r1, r6
 800eb16:	d335      	bcc.n	800eb84 <rshift+0x98>
 800eb18:	1a9b      	subs	r3, r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	1eea      	subs	r2, r5, #3
 800eb1e:	4296      	cmp	r6, r2
 800eb20:	bf38      	it	cc
 800eb22:	2300      	movcc	r3, #0
 800eb24:	4423      	add	r3, r4
 800eb26:	e015      	b.n	800eb54 <rshift+0x68>
 800eb28:	46a1      	mov	r9, r4
 800eb2a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eb2e:	f1c1 0820 	rsb	r8, r1, #32
 800eb32:	40cf      	lsrs	r7, r1
 800eb34:	f105 0e04 	add.w	lr, r5, #4
 800eb38:	4576      	cmp	r6, lr
 800eb3a:	46f4      	mov	ip, lr
 800eb3c:	d816      	bhi.n	800eb6c <rshift+0x80>
 800eb3e:	1a9b      	subs	r3, r3, r2
 800eb40:	009a      	lsls	r2, r3, #2
 800eb42:	3a04      	subs	r2, #4
 800eb44:	3501      	adds	r5, #1
 800eb46:	42ae      	cmp	r6, r5
 800eb48:	bf38      	it	cc
 800eb4a:	2200      	movcc	r2, #0
 800eb4c:	18a3      	adds	r3, r4, r2
 800eb4e:	50a7      	str	r7, [r4, r2]
 800eb50:	b107      	cbz	r7, 800eb54 <rshift+0x68>
 800eb52:	3304      	adds	r3, #4
 800eb54:	42a3      	cmp	r3, r4
 800eb56:	eba3 0204 	sub.w	r2, r3, r4
 800eb5a:	bf08      	it	eq
 800eb5c:	2300      	moveq	r3, #0
 800eb5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eb62:	6102      	str	r2, [r0, #16]
 800eb64:	bf08      	it	eq
 800eb66:	6143      	streq	r3, [r0, #20]
 800eb68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb6c:	f8dc c000 	ldr.w	ip, [ip]
 800eb70:	fa0c fc08 	lsl.w	ip, ip, r8
 800eb74:	ea4c 0707 	orr.w	r7, ip, r7
 800eb78:	f849 7b04 	str.w	r7, [r9], #4
 800eb7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eb80:	40cf      	lsrs	r7, r1
 800eb82:	e7d9      	b.n	800eb38 <rshift+0x4c>
 800eb84:	f851 cb04 	ldr.w	ip, [r1], #4
 800eb88:	f847 cf04 	str.w	ip, [r7, #4]!
 800eb8c:	e7c2      	b.n	800eb14 <rshift+0x28>
 800eb8e:	4623      	mov	r3, r4
 800eb90:	e7e0      	b.n	800eb54 <rshift+0x68>

0800eb92 <__hexdig_fun>:
 800eb92:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eb96:	2b09      	cmp	r3, #9
 800eb98:	d802      	bhi.n	800eba0 <__hexdig_fun+0xe>
 800eb9a:	3820      	subs	r0, #32
 800eb9c:	b2c0      	uxtb	r0, r0
 800eb9e:	4770      	bx	lr
 800eba0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eba4:	2b05      	cmp	r3, #5
 800eba6:	d801      	bhi.n	800ebac <__hexdig_fun+0x1a>
 800eba8:	3847      	subs	r0, #71	; 0x47
 800ebaa:	e7f7      	b.n	800eb9c <__hexdig_fun+0xa>
 800ebac:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ebb0:	2b05      	cmp	r3, #5
 800ebb2:	d801      	bhi.n	800ebb8 <__hexdig_fun+0x26>
 800ebb4:	3827      	subs	r0, #39	; 0x27
 800ebb6:	e7f1      	b.n	800eb9c <__hexdig_fun+0xa>
 800ebb8:	2000      	movs	r0, #0
 800ebba:	4770      	bx	lr

0800ebbc <__gethex>:
 800ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc0:	b08b      	sub	sp, #44	; 0x2c
 800ebc2:	9306      	str	r3, [sp, #24]
 800ebc4:	4bb9      	ldr	r3, [pc, #740]	; (800eeac <__gethex+0x2f0>)
 800ebc6:	9002      	str	r0, [sp, #8]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	468b      	mov	fp, r1
 800ebcc:	4618      	mov	r0, r3
 800ebce:	4690      	mov	r8, r2
 800ebd0:	9303      	str	r3, [sp, #12]
 800ebd2:	f7f1 fb29 	bl	8000228 <strlen>
 800ebd6:	4682      	mov	sl, r0
 800ebd8:	9b03      	ldr	r3, [sp, #12]
 800ebda:	f8db 2000 	ldr.w	r2, [fp]
 800ebde:	4403      	add	r3, r0
 800ebe0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ebe4:	9307      	str	r3, [sp, #28]
 800ebe6:	1c93      	adds	r3, r2, #2
 800ebe8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ebec:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ebf0:	32fe      	adds	r2, #254	; 0xfe
 800ebf2:	18d1      	adds	r1, r2, r3
 800ebf4:	461f      	mov	r7, r3
 800ebf6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ebfa:	9101      	str	r1, [sp, #4]
 800ebfc:	2830      	cmp	r0, #48	; 0x30
 800ebfe:	d0f8      	beq.n	800ebf2 <__gethex+0x36>
 800ec00:	f7ff ffc7 	bl	800eb92 <__hexdig_fun>
 800ec04:	4604      	mov	r4, r0
 800ec06:	2800      	cmp	r0, #0
 800ec08:	d13a      	bne.n	800ec80 <__gethex+0xc4>
 800ec0a:	4652      	mov	r2, sl
 800ec0c:	4638      	mov	r0, r7
 800ec0e:	9903      	ldr	r1, [sp, #12]
 800ec10:	f001 f938 	bl	800fe84 <strncmp>
 800ec14:	4605      	mov	r5, r0
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d166      	bne.n	800ece8 <__gethex+0x12c>
 800ec1a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ec1e:	eb07 060a 	add.w	r6, r7, sl
 800ec22:	f7ff ffb6 	bl	800eb92 <__hexdig_fun>
 800ec26:	2800      	cmp	r0, #0
 800ec28:	d060      	beq.n	800ecec <__gethex+0x130>
 800ec2a:	4633      	mov	r3, r6
 800ec2c:	7818      	ldrb	r0, [r3, #0]
 800ec2e:	461f      	mov	r7, r3
 800ec30:	2830      	cmp	r0, #48	; 0x30
 800ec32:	f103 0301 	add.w	r3, r3, #1
 800ec36:	d0f9      	beq.n	800ec2c <__gethex+0x70>
 800ec38:	f7ff ffab 	bl	800eb92 <__hexdig_fun>
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	fab0 f480 	clz	r4, r0
 800ec42:	4635      	mov	r5, r6
 800ec44:	0964      	lsrs	r4, r4, #5
 800ec46:	9301      	str	r3, [sp, #4]
 800ec48:	463a      	mov	r2, r7
 800ec4a:	4616      	mov	r6, r2
 800ec4c:	7830      	ldrb	r0, [r6, #0]
 800ec4e:	3201      	adds	r2, #1
 800ec50:	f7ff ff9f 	bl	800eb92 <__hexdig_fun>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	d1f8      	bne.n	800ec4a <__gethex+0x8e>
 800ec58:	4652      	mov	r2, sl
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	9903      	ldr	r1, [sp, #12]
 800ec5e:	f001 f911 	bl	800fe84 <strncmp>
 800ec62:	b980      	cbnz	r0, 800ec86 <__gethex+0xca>
 800ec64:	b94d      	cbnz	r5, 800ec7a <__gethex+0xbe>
 800ec66:	eb06 050a 	add.w	r5, r6, sl
 800ec6a:	462a      	mov	r2, r5
 800ec6c:	4616      	mov	r6, r2
 800ec6e:	7830      	ldrb	r0, [r6, #0]
 800ec70:	3201      	adds	r2, #1
 800ec72:	f7ff ff8e 	bl	800eb92 <__hexdig_fun>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d1f8      	bne.n	800ec6c <__gethex+0xb0>
 800ec7a:	1bad      	subs	r5, r5, r6
 800ec7c:	00ad      	lsls	r5, r5, #2
 800ec7e:	e004      	b.n	800ec8a <__gethex+0xce>
 800ec80:	2400      	movs	r4, #0
 800ec82:	4625      	mov	r5, r4
 800ec84:	e7e0      	b.n	800ec48 <__gethex+0x8c>
 800ec86:	2d00      	cmp	r5, #0
 800ec88:	d1f7      	bne.n	800ec7a <__gethex+0xbe>
 800ec8a:	7833      	ldrb	r3, [r6, #0]
 800ec8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec90:	2b50      	cmp	r3, #80	; 0x50
 800ec92:	d139      	bne.n	800ed08 <__gethex+0x14c>
 800ec94:	7873      	ldrb	r3, [r6, #1]
 800ec96:	2b2b      	cmp	r3, #43	; 0x2b
 800ec98:	d02a      	beq.n	800ecf0 <__gethex+0x134>
 800ec9a:	2b2d      	cmp	r3, #45	; 0x2d
 800ec9c:	d02c      	beq.n	800ecf8 <__gethex+0x13c>
 800ec9e:	f04f 0900 	mov.w	r9, #0
 800eca2:	1c71      	adds	r1, r6, #1
 800eca4:	7808      	ldrb	r0, [r1, #0]
 800eca6:	f7ff ff74 	bl	800eb92 <__hexdig_fun>
 800ecaa:	1e43      	subs	r3, r0, #1
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b18      	cmp	r3, #24
 800ecb0:	d82a      	bhi.n	800ed08 <__gethex+0x14c>
 800ecb2:	f1a0 0210 	sub.w	r2, r0, #16
 800ecb6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ecba:	f7ff ff6a 	bl	800eb92 <__hexdig_fun>
 800ecbe:	1e43      	subs	r3, r0, #1
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	2b18      	cmp	r3, #24
 800ecc4:	d91b      	bls.n	800ecfe <__gethex+0x142>
 800ecc6:	f1b9 0f00 	cmp.w	r9, #0
 800ecca:	d000      	beq.n	800ecce <__gethex+0x112>
 800eccc:	4252      	negs	r2, r2
 800ecce:	4415      	add	r5, r2
 800ecd0:	f8cb 1000 	str.w	r1, [fp]
 800ecd4:	b1d4      	cbz	r4, 800ed0c <__gethex+0x150>
 800ecd6:	9b01      	ldr	r3, [sp, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	bf14      	ite	ne
 800ecdc:	2700      	movne	r7, #0
 800ecde:	2706      	moveq	r7, #6
 800ece0:	4638      	mov	r0, r7
 800ece2:	b00b      	add	sp, #44	; 0x2c
 800ece4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece8:	463e      	mov	r6, r7
 800ecea:	4625      	mov	r5, r4
 800ecec:	2401      	movs	r4, #1
 800ecee:	e7cc      	b.n	800ec8a <__gethex+0xce>
 800ecf0:	f04f 0900 	mov.w	r9, #0
 800ecf4:	1cb1      	adds	r1, r6, #2
 800ecf6:	e7d5      	b.n	800eca4 <__gethex+0xe8>
 800ecf8:	f04f 0901 	mov.w	r9, #1
 800ecfc:	e7fa      	b.n	800ecf4 <__gethex+0x138>
 800ecfe:	230a      	movs	r3, #10
 800ed00:	fb03 0202 	mla	r2, r3, r2, r0
 800ed04:	3a10      	subs	r2, #16
 800ed06:	e7d6      	b.n	800ecb6 <__gethex+0xfa>
 800ed08:	4631      	mov	r1, r6
 800ed0a:	e7e1      	b.n	800ecd0 <__gethex+0x114>
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	1bf3      	subs	r3, r6, r7
 800ed10:	3b01      	subs	r3, #1
 800ed12:	2b07      	cmp	r3, #7
 800ed14:	dc0a      	bgt.n	800ed2c <__gethex+0x170>
 800ed16:	9802      	ldr	r0, [sp, #8]
 800ed18:	f000 fa8c 	bl	800f234 <_Balloc>
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	b940      	cbnz	r0, 800ed32 <__gethex+0x176>
 800ed20:	4602      	mov	r2, r0
 800ed22:	21de      	movs	r1, #222	; 0xde
 800ed24:	4b62      	ldr	r3, [pc, #392]	; (800eeb0 <__gethex+0x2f4>)
 800ed26:	4863      	ldr	r0, [pc, #396]	; (800eeb4 <__gethex+0x2f8>)
 800ed28:	f001 f8cc 	bl	800fec4 <__assert_func>
 800ed2c:	3101      	adds	r1, #1
 800ed2e:	105b      	asrs	r3, r3, #1
 800ed30:	e7ef      	b.n	800ed12 <__gethex+0x156>
 800ed32:	f04f 0b00 	mov.w	fp, #0
 800ed36:	f100 0914 	add.w	r9, r0, #20
 800ed3a:	f1ca 0301 	rsb	r3, sl, #1
 800ed3e:	f8cd 9010 	str.w	r9, [sp, #16]
 800ed42:	f8cd b004 	str.w	fp, [sp, #4]
 800ed46:	9308      	str	r3, [sp, #32]
 800ed48:	42b7      	cmp	r7, r6
 800ed4a:	d33f      	bcc.n	800edcc <__gethex+0x210>
 800ed4c:	9f04      	ldr	r7, [sp, #16]
 800ed4e:	9b01      	ldr	r3, [sp, #4]
 800ed50:	f847 3b04 	str.w	r3, [r7], #4
 800ed54:	eba7 0709 	sub.w	r7, r7, r9
 800ed58:	10bf      	asrs	r7, r7, #2
 800ed5a:	6127      	str	r7, [r4, #16]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f000 fb5f 	bl	800f420 <__hi0bits>
 800ed62:	017f      	lsls	r7, r7, #5
 800ed64:	f8d8 6000 	ldr.w	r6, [r8]
 800ed68:	1a3f      	subs	r7, r7, r0
 800ed6a:	42b7      	cmp	r7, r6
 800ed6c:	dd62      	ble.n	800ee34 <__gethex+0x278>
 800ed6e:	1bbf      	subs	r7, r7, r6
 800ed70:	4639      	mov	r1, r7
 800ed72:	4620      	mov	r0, r4
 800ed74:	f000 fef5 	bl	800fb62 <__any_on>
 800ed78:	4682      	mov	sl, r0
 800ed7a:	b1a8      	cbz	r0, 800eda8 <__gethex+0x1ec>
 800ed7c:	f04f 0a01 	mov.w	sl, #1
 800ed80:	1e7b      	subs	r3, r7, #1
 800ed82:	1159      	asrs	r1, r3, #5
 800ed84:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ed88:	f003 021f 	and.w	r2, r3, #31
 800ed8c:	fa0a f202 	lsl.w	r2, sl, r2
 800ed90:	420a      	tst	r2, r1
 800ed92:	d009      	beq.n	800eda8 <__gethex+0x1ec>
 800ed94:	4553      	cmp	r3, sl
 800ed96:	dd05      	ble.n	800eda4 <__gethex+0x1e8>
 800ed98:	4620      	mov	r0, r4
 800ed9a:	1eb9      	subs	r1, r7, #2
 800ed9c:	f000 fee1 	bl	800fb62 <__any_on>
 800eda0:	2800      	cmp	r0, #0
 800eda2:	d144      	bne.n	800ee2e <__gethex+0x272>
 800eda4:	f04f 0a02 	mov.w	sl, #2
 800eda8:	4639      	mov	r1, r7
 800edaa:	4620      	mov	r0, r4
 800edac:	f7ff fe9e 	bl	800eaec <rshift>
 800edb0:	443d      	add	r5, r7
 800edb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800edb6:	42ab      	cmp	r3, r5
 800edb8:	da4a      	bge.n	800ee50 <__gethex+0x294>
 800edba:	4621      	mov	r1, r4
 800edbc:	9802      	ldr	r0, [sp, #8]
 800edbe:	f000 fa79 	bl	800f2b4 <_Bfree>
 800edc2:	2300      	movs	r3, #0
 800edc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800edc6:	27a3      	movs	r7, #163	; 0xa3
 800edc8:	6013      	str	r3, [r2, #0]
 800edca:	e789      	b.n	800ece0 <__gethex+0x124>
 800edcc:	1e73      	subs	r3, r6, #1
 800edce:	9a07      	ldr	r2, [sp, #28]
 800edd0:	9305      	str	r3, [sp, #20]
 800edd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800edd6:	4293      	cmp	r3, r2
 800edd8:	d019      	beq.n	800ee0e <__gethex+0x252>
 800edda:	f1bb 0f20 	cmp.w	fp, #32
 800edde:	d107      	bne.n	800edf0 <__gethex+0x234>
 800ede0:	9b04      	ldr	r3, [sp, #16]
 800ede2:	9a01      	ldr	r2, [sp, #4]
 800ede4:	f843 2b04 	str.w	r2, [r3], #4
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	2300      	movs	r3, #0
 800edec:	469b      	mov	fp, r3
 800edee:	9301      	str	r3, [sp, #4]
 800edf0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800edf4:	f7ff fecd 	bl	800eb92 <__hexdig_fun>
 800edf8:	9b01      	ldr	r3, [sp, #4]
 800edfa:	f000 000f 	and.w	r0, r0, #15
 800edfe:	fa00 f00b 	lsl.w	r0, r0, fp
 800ee02:	4303      	orrs	r3, r0
 800ee04:	9301      	str	r3, [sp, #4]
 800ee06:	f10b 0b04 	add.w	fp, fp, #4
 800ee0a:	9b05      	ldr	r3, [sp, #20]
 800ee0c:	e00d      	b.n	800ee2a <__gethex+0x26e>
 800ee0e:	9b05      	ldr	r3, [sp, #20]
 800ee10:	9a08      	ldr	r2, [sp, #32]
 800ee12:	4413      	add	r3, r2
 800ee14:	42bb      	cmp	r3, r7
 800ee16:	d3e0      	bcc.n	800edda <__gethex+0x21e>
 800ee18:	4618      	mov	r0, r3
 800ee1a:	4652      	mov	r2, sl
 800ee1c:	9903      	ldr	r1, [sp, #12]
 800ee1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee20:	f001 f830 	bl	800fe84 <strncmp>
 800ee24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee26:	2800      	cmp	r0, #0
 800ee28:	d1d7      	bne.n	800edda <__gethex+0x21e>
 800ee2a:	461e      	mov	r6, r3
 800ee2c:	e78c      	b.n	800ed48 <__gethex+0x18c>
 800ee2e:	f04f 0a03 	mov.w	sl, #3
 800ee32:	e7b9      	b.n	800eda8 <__gethex+0x1ec>
 800ee34:	da09      	bge.n	800ee4a <__gethex+0x28e>
 800ee36:	1bf7      	subs	r7, r6, r7
 800ee38:	4621      	mov	r1, r4
 800ee3a:	463a      	mov	r2, r7
 800ee3c:	9802      	ldr	r0, [sp, #8]
 800ee3e:	f000 fc51 	bl	800f6e4 <__lshift>
 800ee42:	4604      	mov	r4, r0
 800ee44:	1bed      	subs	r5, r5, r7
 800ee46:	f100 0914 	add.w	r9, r0, #20
 800ee4a:	f04f 0a00 	mov.w	sl, #0
 800ee4e:	e7b0      	b.n	800edb2 <__gethex+0x1f6>
 800ee50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ee54:	42a8      	cmp	r0, r5
 800ee56:	dd71      	ble.n	800ef3c <__gethex+0x380>
 800ee58:	1b45      	subs	r5, r0, r5
 800ee5a:	42ae      	cmp	r6, r5
 800ee5c:	dc34      	bgt.n	800eec8 <__gethex+0x30c>
 800ee5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d028      	beq.n	800eeb8 <__gethex+0x2fc>
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	d02a      	beq.n	800eec0 <__gethex+0x304>
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d115      	bne.n	800ee9a <__gethex+0x2de>
 800ee6e:	42ae      	cmp	r6, r5
 800ee70:	d113      	bne.n	800ee9a <__gethex+0x2de>
 800ee72:	2e01      	cmp	r6, #1
 800ee74:	d10b      	bne.n	800ee8e <__gethex+0x2d2>
 800ee76:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ee7a:	9a06      	ldr	r2, [sp, #24]
 800ee7c:	2762      	movs	r7, #98	; 0x62
 800ee7e:	6013      	str	r3, [r2, #0]
 800ee80:	2301      	movs	r3, #1
 800ee82:	6123      	str	r3, [r4, #16]
 800ee84:	f8c9 3000 	str.w	r3, [r9]
 800ee88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee8a:	601c      	str	r4, [r3, #0]
 800ee8c:	e728      	b.n	800ece0 <__gethex+0x124>
 800ee8e:	4620      	mov	r0, r4
 800ee90:	1e71      	subs	r1, r6, #1
 800ee92:	f000 fe66 	bl	800fb62 <__any_on>
 800ee96:	2800      	cmp	r0, #0
 800ee98:	d1ed      	bne.n	800ee76 <__gethex+0x2ba>
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	9802      	ldr	r0, [sp, #8]
 800ee9e:	f000 fa09 	bl	800f2b4 <_Bfree>
 800eea2:	2300      	movs	r3, #0
 800eea4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eea6:	2750      	movs	r7, #80	; 0x50
 800eea8:	6013      	str	r3, [r2, #0]
 800eeaa:	e719      	b.n	800ece0 <__gethex+0x124>
 800eeac:	08011d2c 	.word	0x08011d2c
 800eeb0:	08011cb0 	.word	0x08011cb0
 800eeb4:	08011cc1 	.word	0x08011cc1
 800eeb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d1ed      	bne.n	800ee9a <__gethex+0x2de>
 800eebe:	e7da      	b.n	800ee76 <__gethex+0x2ba>
 800eec0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1d7      	bne.n	800ee76 <__gethex+0x2ba>
 800eec6:	e7e8      	b.n	800ee9a <__gethex+0x2de>
 800eec8:	1e6f      	subs	r7, r5, #1
 800eeca:	f1ba 0f00 	cmp.w	sl, #0
 800eece:	d132      	bne.n	800ef36 <__gethex+0x37a>
 800eed0:	b127      	cbz	r7, 800eedc <__gethex+0x320>
 800eed2:	4639      	mov	r1, r7
 800eed4:	4620      	mov	r0, r4
 800eed6:	f000 fe44 	bl	800fb62 <__any_on>
 800eeda:	4682      	mov	sl, r0
 800eedc:	2101      	movs	r1, #1
 800eede:	117b      	asrs	r3, r7, #5
 800eee0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800eee4:	f007 071f 	and.w	r7, r7, #31
 800eee8:	fa01 f707 	lsl.w	r7, r1, r7
 800eeec:	421f      	tst	r7, r3
 800eeee:	f04f 0702 	mov.w	r7, #2
 800eef2:	4629      	mov	r1, r5
 800eef4:	4620      	mov	r0, r4
 800eef6:	bf18      	it	ne
 800eef8:	f04a 0a02 	orrne.w	sl, sl, #2
 800eefc:	1b76      	subs	r6, r6, r5
 800eefe:	f7ff fdf5 	bl	800eaec <rshift>
 800ef02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef06:	f1ba 0f00 	cmp.w	sl, #0
 800ef0a:	d048      	beq.n	800ef9e <__gethex+0x3e2>
 800ef0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	d015      	beq.n	800ef40 <__gethex+0x384>
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d017      	beq.n	800ef48 <__gethex+0x38c>
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d109      	bne.n	800ef30 <__gethex+0x374>
 800ef1c:	f01a 0f02 	tst.w	sl, #2
 800ef20:	d006      	beq.n	800ef30 <__gethex+0x374>
 800ef22:	f8d9 0000 	ldr.w	r0, [r9]
 800ef26:	ea4a 0a00 	orr.w	sl, sl, r0
 800ef2a:	f01a 0f01 	tst.w	sl, #1
 800ef2e:	d10e      	bne.n	800ef4e <__gethex+0x392>
 800ef30:	f047 0710 	orr.w	r7, r7, #16
 800ef34:	e033      	b.n	800ef9e <__gethex+0x3e2>
 800ef36:	f04f 0a01 	mov.w	sl, #1
 800ef3a:	e7cf      	b.n	800eedc <__gethex+0x320>
 800ef3c:	2701      	movs	r7, #1
 800ef3e:	e7e2      	b.n	800ef06 <__gethex+0x34a>
 800ef40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef42:	f1c3 0301 	rsb	r3, r3, #1
 800ef46:	9315      	str	r3, [sp, #84]	; 0x54
 800ef48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0f0      	beq.n	800ef30 <__gethex+0x374>
 800ef4e:	f04f 0c00 	mov.w	ip, #0
 800ef52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ef56:	f104 0314 	add.w	r3, r4, #20
 800ef5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ef5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef68:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ef6c:	d01c      	beq.n	800efa8 <__gethex+0x3ec>
 800ef6e:	3201      	adds	r2, #1
 800ef70:	6002      	str	r2, [r0, #0]
 800ef72:	2f02      	cmp	r7, #2
 800ef74:	f104 0314 	add.w	r3, r4, #20
 800ef78:	d13d      	bne.n	800eff6 <__gethex+0x43a>
 800ef7a:	f8d8 2000 	ldr.w	r2, [r8]
 800ef7e:	3a01      	subs	r2, #1
 800ef80:	42b2      	cmp	r2, r6
 800ef82:	d10a      	bne.n	800ef9a <__gethex+0x3de>
 800ef84:	2201      	movs	r2, #1
 800ef86:	1171      	asrs	r1, r6, #5
 800ef88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef8c:	f006 061f 	and.w	r6, r6, #31
 800ef90:	fa02 f606 	lsl.w	r6, r2, r6
 800ef94:	421e      	tst	r6, r3
 800ef96:	bf18      	it	ne
 800ef98:	4617      	movne	r7, r2
 800ef9a:	f047 0720 	orr.w	r7, r7, #32
 800ef9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800efa0:	601c      	str	r4, [r3, #0]
 800efa2:	9b06      	ldr	r3, [sp, #24]
 800efa4:	601d      	str	r5, [r3, #0]
 800efa6:	e69b      	b.n	800ece0 <__gethex+0x124>
 800efa8:	4299      	cmp	r1, r3
 800efaa:	f843 cc04 	str.w	ip, [r3, #-4]
 800efae:	d8d8      	bhi.n	800ef62 <__gethex+0x3a6>
 800efb0:	68a3      	ldr	r3, [r4, #8]
 800efb2:	459b      	cmp	fp, r3
 800efb4:	db17      	blt.n	800efe6 <__gethex+0x42a>
 800efb6:	6861      	ldr	r1, [r4, #4]
 800efb8:	9802      	ldr	r0, [sp, #8]
 800efba:	3101      	adds	r1, #1
 800efbc:	f000 f93a 	bl	800f234 <_Balloc>
 800efc0:	4681      	mov	r9, r0
 800efc2:	b918      	cbnz	r0, 800efcc <__gethex+0x410>
 800efc4:	4602      	mov	r2, r0
 800efc6:	2184      	movs	r1, #132	; 0x84
 800efc8:	4b19      	ldr	r3, [pc, #100]	; (800f030 <__gethex+0x474>)
 800efca:	e6ac      	b.n	800ed26 <__gethex+0x16a>
 800efcc:	6922      	ldr	r2, [r4, #16]
 800efce:	f104 010c 	add.w	r1, r4, #12
 800efd2:	3202      	adds	r2, #2
 800efd4:	0092      	lsls	r2, r2, #2
 800efd6:	300c      	adds	r0, #12
 800efd8:	f000 f912 	bl	800f200 <memcpy>
 800efdc:	4621      	mov	r1, r4
 800efde:	9802      	ldr	r0, [sp, #8]
 800efe0:	f000 f968 	bl	800f2b4 <_Bfree>
 800efe4:	464c      	mov	r4, r9
 800efe6:	6923      	ldr	r3, [r4, #16]
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	6122      	str	r2, [r4, #16]
 800efec:	2201      	movs	r2, #1
 800efee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eff2:	615a      	str	r2, [r3, #20]
 800eff4:	e7bd      	b.n	800ef72 <__gethex+0x3b6>
 800eff6:	6922      	ldr	r2, [r4, #16]
 800eff8:	455a      	cmp	r2, fp
 800effa:	dd0b      	ble.n	800f014 <__gethex+0x458>
 800effc:	2101      	movs	r1, #1
 800effe:	4620      	mov	r0, r4
 800f000:	f7ff fd74 	bl	800eaec <rshift>
 800f004:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f008:	3501      	adds	r5, #1
 800f00a:	42ab      	cmp	r3, r5
 800f00c:	f6ff aed5 	blt.w	800edba <__gethex+0x1fe>
 800f010:	2701      	movs	r7, #1
 800f012:	e7c2      	b.n	800ef9a <__gethex+0x3de>
 800f014:	f016 061f 	ands.w	r6, r6, #31
 800f018:	d0fa      	beq.n	800f010 <__gethex+0x454>
 800f01a:	449a      	add	sl, r3
 800f01c:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f020:	f000 f9fe 	bl	800f420 <__hi0bits>
 800f024:	f1c6 0620 	rsb	r6, r6, #32
 800f028:	42b0      	cmp	r0, r6
 800f02a:	dbe7      	blt.n	800effc <__gethex+0x440>
 800f02c:	e7f0      	b.n	800f010 <__gethex+0x454>
 800f02e:	bf00      	nop
 800f030:	08011cb0 	.word	0x08011cb0

0800f034 <L_shift>:
 800f034:	f1c2 0208 	rsb	r2, r2, #8
 800f038:	0092      	lsls	r2, r2, #2
 800f03a:	b570      	push	{r4, r5, r6, lr}
 800f03c:	f1c2 0620 	rsb	r6, r2, #32
 800f040:	6843      	ldr	r3, [r0, #4]
 800f042:	6804      	ldr	r4, [r0, #0]
 800f044:	fa03 f506 	lsl.w	r5, r3, r6
 800f048:	432c      	orrs	r4, r5
 800f04a:	40d3      	lsrs	r3, r2
 800f04c:	6004      	str	r4, [r0, #0]
 800f04e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f052:	4288      	cmp	r0, r1
 800f054:	d3f4      	bcc.n	800f040 <L_shift+0xc>
 800f056:	bd70      	pop	{r4, r5, r6, pc}

0800f058 <__match>:
 800f058:	b530      	push	{r4, r5, lr}
 800f05a:	6803      	ldr	r3, [r0, #0]
 800f05c:	3301      	adds	r3, #1
 800f05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f062:	b914      	cbnz	r4, 800f06a <__match+0x12>
 800f064:	6003      	str	r3, [r0, #0]
 800f066:	2001      	movs	r0, #1
 800f068:	bd30      	pop	{r4, r5, pc}
 800f06a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f06e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f072:	2d19      	cmp	r5, #25
 800f074:	bf98      	it	ls
 800f076:	3220      	addls	r2, #32
 800f078:	42a2      	cmp	r2, r4
 800f07a:	d0f0      	beq.n	800f05e <__match+0x6>
 800f07c:	2000      	movs	r0, #0
 800f07e:	e7f3      	b.n	800f068 <__match+0x10>

0800f080 <__hexnan>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	2500      	movs	r5, #0
 800f086:	680b      	ldr	r3, [r1, #0]
 800f088:	4682      	mov	sl, r0
 800f08a:	115e      	asrs	r6, r3, #5
 800f08c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f090:	f013 031f 	ands.w	r3, r3, #31
 800f094:	bf18      	it	ne
 800f096:	3604      	addne	r6, #4
 800f098:	1f37      	subs	r7, r6, #4
 800f09a:	4690      	mov	r8, r2
 800f09c:	46b9      	mov	r9, r7
 800f09e:	463c      	mov	r4, r7
 800f0a0:	46ab      	mov	fp, r5
 800f0a2:	b087      	sub	sp, #28
 800f0a4:	6801      	ldr	r1, [r0, #0]
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	f846 5c04 	str.w	r5, [r6, #-4]
 800f0ac:	9502      	str	r5, [sp, #8]
 800f0ae:	784a      	ldrb	r2, [r1, #1]
 800f0b0:	1c4b      	adds	r3, r1, #1
 800f0b2:	9303      	str	r3, [sp, #12]
 800f0b4:	b342      	cbz	r2, 800f108 <__hexnan+0x88>
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	9105      	str	r1, [sp, #20]
 800f0ba:	9204      	str	r2, [sp, #16]
 800f0bc:	f7ff fd69 	bl	800eb92 <__hexdig_fun>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d14f      	bne.n	800f164 <__hexnan+0xe4>
 800f0c4:	9a04      	ldr	r2, [sp, #16]
 800f0c6:	9905      	ldr	r1, [sp, #20]
 800f0c8:	2a20      	cmp	r2, #32
 800f0ca:	d818      	bhi.n	800f0fe <__hexnan+0x7e>
 800f0cc:	9b02      	ldr	r3, [sp, #8]
 800f0ce:	459b      	cmp	fp, r3
 800f0d0:	dd13      	ble.n	800f0fa <__hexnan+0x7a>
 800f0d2:	454c      	cmp	r4, r9
 800f0d4:	d206      	bcs.n	800f0e4 <__hexnan+0x64>
 800f0d6:	2d07      	cmp	r5, #7
 800f0d8:	dc04      	bgt.n	800f0e4 <__hexnan+0x64>
 800f0da:	462a      	mov	r2, r5
 800f0dc:	4649      	mov	r1, r9
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f7ff ffa8 	bl	800f034 <L_shift>
 800f0e4:	4544      	cmp	r4, r8
 800f0e6:	d950      	bls.n	800f18a <__hexnan+0x10a>
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	f1a4 0904 	sub.w	r9, r4, #4
 800f0ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0f2:	461d      	mov	r5, r3
 800f0f4:	464c      	mov	r4, r9
 800f0f6:	f8cd b008 	str.w	fp, [sp, #8]
 800f0fa:	9903      	ldr	r1, [sp, #12]
 800f0fc:	e7d7      	b.n	800f0ae <__hexnan+0x2e>
 800f0fe:	2a29      	cmp	r2, #41	; 0x29
 800f100:	d156      	bne.n	800f1b0 <__hexnan+0x130>
 800f102:	3102      	adds	r1, #2
 800f104:	f8ca 1000 	str.w	r1, [sl]
 800f108:	f1bb 0f00 	cmp.w	fp, #0
 800f10c:	d050      	beq.n	800f1b0 <__hexnan+0x130>
 800f10e:	454c      	cmp	r4, r9
 800f110:	d206      	bcs.n	800f120 <__hexnan+0xa0>
 800f112:	2d07      	cmp	r5, #7
 800f114:	dc04      	bgt.n	800f120 <__hexnan+0xa0>
 800f116:	462a      	mov	r2, r5
 800f118:	4649      	mov	r1, r9
 800f11a:	4620      	mov	r0, r4
 800f11c:	f7ff ff8a 	bl	800f034 <L_shift>
 800f120:	4544      	cmp	r4, r8
 800f122:	d934      	bls.n	800f18e <__hexnan+0x10e>
 800f124:	4623      	mov	r3, r4
 800f126:	f1a8 0204 	sub.w	r2, r8, #4
 800f12a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f12e:	429f      	cmp	r7, r3
 800f130:	f842 1f04 	str.w	r1, [r2, #4]!
 800f134:	d2f9      	bcs.n	800f12a <__hexnan+0xaa>
 800f136:	1b3b      	subs	r3, r7, r4
 800f138:	f023 0303 	bic.w	r3, r3, #3
 800f13c:	3304      	adds	r3, #4
 800f13e:	3401      	adds	r4, #1
 800f140:	3e03      	subs	r6, #3
 800f142:	42b4      	cmp	r4, r6
 800f144:	bf88      	it	hi
 800f146:	2304      	movhi	r3, #4
 800f148:	2200      	movs	r2, #0
 800f14a:	4443      	add	r3, r8
 800f14c:	f843 2b04 	str.w	r2, [r3], #4
 800f150:	429f      	cmp	r7, r3
 800f152:	d2fb      	bcs.n	800f14c <__hexnan+0xcc>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	b91b      	cbnz	r3, 800f160 <__hexnan+0xe0>
 800f158:	4547      	cmp	r7, r8
 800f15a:	d127      	bne.n	800f1ac <__hexnan+0x12c>
 800f15c:	2301      	movs	r3, #1
 800f15e:	603b      	str	r3, [r7, #0]
 800f160:	2005      	movs	r0, #5
 800f162:	e026      	b.n	800f1b2 <__hexnan+0x132>
 800f164:	3501      	adds	r5, #1
 800f166:	2d08      	cmp	r5, #8
 800f168:	f10b 0b01 	add.w	fp, fp, #1
 800f16c:	dd06      	ble.n	800f17c <__hexnan+0xfc>
 800f16e:	4544      	cmp	r4, r8
 800f170:	d9c3      	bls.n	800f0fa <__hexnan+0x7a>
 800f172:	2300      	movs	r3, #0
 800f174:	2501      	movs	r5, #1
 800f176:	f844 3c04 	str.w	r3, [r4, #-4]
 800f17a:	3c04      	subs	r4, #4
 800f17c:	6822      	ldr	r2, [r4, #0]
 800f17e:	f000 000f 	and.w	r0, r0, #15
 800f182:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f186:	6022      	str	r2, [r4, #0]
 800f188:	e7b7      	b.n	800f0fa <__hexnan+0x7a>
 800f18a:	2508      	movs	r5, #8
 800f18c:	e7b5      	b.n	800f0fa <__hexnan+0x7a>
 800f18e:	9b01      	ldr	r3, [sp, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d0df      	beq.n	800f154 <__hexnan+0xd4>
 800f194:	f04f 32ff 	mov.w	r2, #4294967295
 800f198:	f1c3 0320 	rsb	r3, r3, #32
 800f19c:	fa22 f303 	lsr.w	r3, r2, r3
 800f1a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f1a4:	401a      	ands	r2, r3
 800f1a6:	f846 2c04 	str.w	r2, [r6, #-4]
 800f1aa:	e7d3      	b.n	800f154 <__hexnan+0xd4>
 800f1ac:	3f04      	subs	r7, #4
 800f1ae:	e7d1      	b.n	800f154 <__hexnan+0xd4>
 800f1b0:	2004      	movs	r0, #4
 800f1b2:	b007      	add	sp, #28
 800f1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f1b8 <_localeconv_r>:
 800f1b8:	4800      	ldr	r0, [pc, #0]	; (800f1bc <_localeconv_r+0x4>)
 800f1ba:	4770      	bx	lr
 800f1bc:	200001a4 	.word	0x200001a4

0800f1c0 <__ascii_mbtowc>:
 800f1c0:	b082      	sub	sp, #8
 800f1c2:	b901      	cbnz	r1, 800f1c6 <__ascii_mbtowc+0x6>
 800f1c4:	a901      	add	r1, sp, #4
 800f1c6:	b142      	cbz	r2, 800f1da <__ascii_mbtowc+0x1a>
 800f1c8:	b14b      	cbz	r3, 800f1de <__ascii_mbtowc+0x1e>
 800f1ca:	7813      	ldrb	r3, [r2, #0]
 800f1cc:	600b      	str	r3, [r1, #0]
 800f1ce:	7812      	ldrb	r2, [r2, #0]
 800f1d0:	1e10      	subs	r0, r2, #0
 800f1d2:	bf18      	it	ne
 800f1d4:	2001      	movne	r0, #1
 800f1d6:	b002      	add	sp, #8
 800f1d8:	4770      	bx	lr
 800f1da:	4610      	mov	r0, r2
 800f1dc:	e7fb      	b.n	800f1d6 <__ascii_mbtowc+0x16>
 800f1de:	f06f 0001 	mvn.w	r0, #1
 800f1e2:	e7f8      	b.n	800f1d6 <__ascii_mbtowc+0x16>

0800f1e4 <memchr>:
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	b510      	push	{r4, lr}
 800f1e8:	b2c9      	uxtb	r1, r1
 800f1ea:	4402      	add	r2, r0
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	d101      	bne.n	800f1f6 <memchr+0x12>
 800f1f2:	2000      	movs	r0, #0
 800f1f4:	e003      	b.n	800f1fe <memchr+0x1a>
 800f1f6:	7804      	ldrb	r4, [r0, #0]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	428c      	cmp	r4, r1
 800f1fc:	d1f6      	bne.n	800f1ec <memchr+0x8>
 800f1fe:	bd10      	pop	{r4, pc}

0800f200 <memcpy>:
 800f200:	440a      	add	r2, r1
 800f202:	4291      	cmp	r1, r2
 800f204:	f100 33ff 	add.w	r3, r0, #4294967295
 800f208:	d100      	bne.n	800f20c <memcpy+0xc>
 800f20a:	4770      	bx	lr
 800f20c:	b510      	push	{r4, lr}
 800f20e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f212:	4291      	cmp	r1, r2
 800f214:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f218:	d1f9      	bne.n	800f20e <memcpy+0xe>
 800f21a:	bd10      	pop	{r4, pc}

0800f21c <__malloc_lock>:
 800f21c:	4801      	ldr	r0, [pc, #4]	; (800f224 <__malloc_lock+0x8>)
 800f21e:	f000 be82 	b.w	800ff26 <__retarget_lock_acquire_recursive>
 800f222:	bf00      	nop
 800f224:	20000d20 	.word	0x20000d20

0800f228 <__malloc_unlock>:
 800f228:	4801      	ldr	r0, [pc, #4]	; (800f230 <__malloc_unlock+0x8>)
 800f22a:	f000 be7d 	b.w	800ff28 <__retarget_lock_release_recursive>
 800f22e:	bf00      	nop
 800f230:	20000d20 	.word	0x20000d20

0800f234 <_Balloc>:
 800f234:	b570      	push	{r4, r5, r6, lr}
 800f236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f238:	4604      	mov	r4, r0
 800f23a:	460d      	mov	r5, r1
 800f23c:	b976      	cbnz	r6, 800f25c <_Balloc+0x28>
 800f23e:	2010      	movs	r0, #16
 800f240:	f7fc ff8a 	bl	800c158 <malloc>
 800f244:	4602      	mov	r2, r0
 800f246:	6260      	str	r0, [r4, #36]	; 0x24
 800f248:	b920      	cbnz	r0, 800f254 <_Balloc+0x20>
 800f24a:	2166      	movs	r1, #102	; 0x66
 800f24c:	4b17      	ldr	r3, [pc, #92]	; (800f2ac <_Balloc+0x78>)
 800f24e:	4818      	ldr	r0, [pc, #96]	; (800f2b0 <_Balloc+0x7c>)
 800f250:	f000 fe38 	bl	800fec4 <__assert_func>
 800f254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f258:	6006      	str	r6, [r0, #0]
 800f25a:	60c6      	str	r6, [r0, #12]
 800f25c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f25e:	68f3      	ldr	r3, [r6, #12]
 800f260:	b183      	cbz	r3, 800f284 <_Balloc+0x50>
 800f262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f26a:	b9b8      	cbnz	r0, 800f29c <_Balloc+0x68>
 800f26c:	2101      	movs	r1, #1
 800f26e:	fa01 f605 	lsl.w	r6, r1, r5
 800f272:	1d72      	adds	r2, r6, #5
 800f274:	4620      	mov	r0, r4
 800f276:	0092      	lsls	r2, r2, #2
 800f278:	f000 fc94 	bl	800fba4 <_calloc_r>
 800f27c:	b160      	cbz	r0, 800f298 <_Balloc+0x64>
 800f27e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f282:	e00e      	b.n	800f2a2 <_Balloc+0x6e>
 800f284:	2221      	movs	r2, #33	; 0x21
 800f286:	2104      	movs	r1, #4
 800f288:	4620      	mov	r0, r4
 800f28a:	f000 fc8b 	bl	800fba4 <_calloc_r>
 800f28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f290:	60f0      	str	r0, [r6, #12]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1e4      	bne.n	800f262 <_Balloc+0x2e>
 800f298:	2000      	movs	r0, #0
 800f29a:	bd70      	pop	{r4, r5, r6, pc}
 800f29c:	6802      	ldr	r2, [r0, #0]
 800f29e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2a8:	e7f7      	b.n	800f29a <_Balloc+0x66>
 800f2aa:	bf00      	nop
 800f2ac:	08011c3a 	.word	0x08011c3a
 800f2b0:	08011d40 	.word	0x08011d40

0800f2b4 <_Bfree>:
 800f2b4:	b570      	push	{r4, r5, r6, lr}
 800f2b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	460c      	mov	r4, r1
 800f2bc:	b976      	cbnz	r6, 800f2dc <_Bfree+0x28>
 800f2be:	2010      	movs	r0, #16
 800f2c0:	f7fc ff4a 	bl	800c158 <malloc>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	6268      	str	r0, [r5, #36]	; 0x24
 800f2c8:	b920      	cbnz	r0, 800f2d4 <_Bfree+0x20>
 800f2ca:	218a      	movs	r1, #138	; 0x8a
 800f2cc:	4b08      	ldr	r3, [pc, #32]	; (800f2f0 <_Bfree+0x3c>)
 800f2ce:	4809      	ldr	r0, [pc, #36]	; (800f2f4 <_Bfree+0x40>)
 800f2d0:	f000 fdf8 	bl	800fec4 <__assert_func>
 800f2d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2d8:	6006      	str	r6, [r0, #0]
 800f2da:	60c6      	str	r6, [r0, #12]
 800f2dc:	b13c      	cbz	r4, 800f2ee <_Bfree+0x3a>
 800f2de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f2e0:	6862      	ldr	r2, [r4, #4]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f2e8:	6021      	str	r1, [r4, #0]
 800f2ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f2ee:	bd70      	pop	{r4, r5, r6, pc}
 800f2f0:	08011c3a 	.word	0x08011c3a
 800f2f4:	08011d40 	.word	0x08011d40

0800f2f8 <__multadd>:
 800f2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2fc:	4698      	mov	r8, r3
 800f2fe:	460c      	mov	r4, r1
 800f300:	2300      	movs	r3, #0
 800f302:	690e      	ldr	r6, [r1, #16]
 800f304:	4607      	mov	r7, r0
 800f306:	f101 0014 	add.w	r0, r1, #20
 800f30a:	6805      	ldr	r5, [r0, #0]
 800f30c:	3301      	adds	r3, #1
 800f30e:	b2a9      	uxth	r1, r5
 800f310:	fb02 8101 	mla	r1, r2, r1, r8
 800f314:	0c2d      	lsrs	r5, r5, #16
 800f316:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f31a:	fb02 c505 	mla	r5, r2, r5, ip
 800f31e:	b289      	uxth	r1, r1
 800f320:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f324:	429e      	cmp	r6, r3
 800f326:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f32a:	f840 1b04 	str.w	r1, [r0], #4
 800f32e:	dcec      	bgt.n	800f30a <__multadd+0x12>
 800f330:	f1b8 0f00 	cmp.w	r8, #0
 800f334:	d022      	beq.n	800f37c <__multadd+0x84>
 800f336:	68a3      	ldr	r3, [r4, #8]
 800f338:	42b3      	cmp	r3, r6
 800f33a:	dc19      	bgt.n	800f370 <__multadd+0x78>
 800f33c:	6861      	ldr	r1, [r4, #4]
 800f33e:	4638      	mov	r0, r7
 800f340:	3101      	adds	r1, #1
 800f342:	f7ff ff77 	bl	800f234 <_Balloc>
 800f346:	4605      	mov	r5, r0
 800f348:	b928      	cbnz	r0, 800f356 <__multadd+0x5e>
 800f34a:	4602      	mov	r2, r0
 800f34c:	21b5      	movs	r1, #181	; 0xb5
 800f34e:	4b0d      	ldr	r3, [pc, #52]	; (800f384 <__multadd+0x8c>)
 800f350:	480d      	ldr	r0, [pc, #52]	; (800f388 <__multadd+0x90>)
 800f352:	f000 fdb7 	bl	800fec4 <__assert_func>
 800f356:	6922      	ldr	r2, [r4, #16]
 800f358:	f104 010c 	add.w	r1, r4, #12
 800f35c:	3202      	adds	r2, #2
 800f35e:	0092      	lsls	r2, r2, #2
 800f360:	300c      	adds	r0, #12
 800f362:	f7ff ff4d 	bl	800f200 <memcpy>
 800f366:	4621      	mov	r1, r4
 800f368:	4638      	mov	r0, r7
 800f36a:	f7ff ffa3 	bl	800f2b4 <_Bfree>
 800f36e:	462c      	mov	r4, r5
 800f370:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f374:	3601      	adds	r6, #1
 800f376:	f8c3 8014 	str.w	r8, [r3, #20]
 800f37a:	6126      	str	r6, [r4, #16]
 800f37c:	4620      	mov	r0, r4
 800f37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f382:	bf00      	nop
 800f384:	08011cb0 	.word	0x08011cb0
 800f388:	08011d40 	.word	0x08011d40

0800f38c <__s2b>:
 800f38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f390:	4615      	mov	r5, r2
 800f392:	2209      	movs	r2, #9
 800f394:	461f      	mov	r7, r3
 800f396:	3308      	adds	r3, #8
 800f398:	460c      	mov	r4, r1
 800f39a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f39e:	4606      	mov	r6, r0
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	db09      	blt.n	800f3bc <__s2b+0x30>
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f7ff ff43 	bl	800f234 <_Balloc>
 800f3ae:	b940      	cbnz	r0, 800f3c2 <__s2b+0x36>
 800f3b0:	4602      	mov	r2, r0
 800f3b2:	21ce      	movs	r1, #206	; 0xce
 800f3b4:	4b18      	ldr	r3, [pc, #96]	; (800f418 <__s2b+0x8c>)
 800f3b6:	4819      	ldr	r0, [pc, #100]	; (800f41c <__s2b+0x90>)
 800f3b8:	f000 fd84 	bl	800fec4 <__assert_func>
 800f3bc:	0052      	lsls	r2, r2, #1
 800f3be:	3101      	adds	r1, #1
 800f3c0:	e7f0      	b.n	800f3a4 <__s2b+0x18>
 800f3c2:	9b08      	ldr	r3, [sp, #32]
 800f3c4:	2d09      	cmp	r5, #9
 800f3c6:	6143      	str	r3, [r0, #20]
 800f3c8:	f04f 0301 	mov.w	r3, #1
 800f3cc:	6103      	str	r3, [r0, #16]
 800f3ce:	dd16      	ble.n	800f3fe <__s2b+0x72>
 800f3d0:	f104 0909 	add.w	r9, r4, #9
 800f3d4:	46c8      	mov	r8, r9
 800f3d6:	442c      	add	r4, r5
 800f3d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f3dc:	4601      	mov	r1, r0
 800f3de:	220a      	movs	r2, #10
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	3b30      	subs	r3, #48	; 0x30
 800f3e4:	f7ff ff88 	bl	800f2f8 <__multadd>
 800f3e8:	45a0      	cmp	r8, r4
 800f3ea:	d1f5      	bne.n	800f3d8 <__s2b+0x4c>
 800f3ec:	f1a5 0408 	sub.w	r4, r5, #8
 800f3f0:	444c      	add	r4, r9
 800f3f2:	1b2d      	subs	r5, r5, r4
 800f3f4:	1963      	adds	r3, r4, r5
 800f3f6:	42bb      	cmp	r3, r7
 800f3f8:	db04      	blt.n	800f404 <__s2b+0x78>
 800f3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3fe:	2509      	movs	r5, #9
 800f400:	340a      	adds	r4, #10
 800f402:	e7f6      	b.n	800f3f2 <__s2b+0x66>
 800f404:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f408:	4601      	mov	r1, r0
 800f40a:	220a      	movs	r2, #10
 800f40c:	4630      	mov	r0, r6
 800f40e:	3b30      	subs	r3, #48	; 0x30
 800f410:	f7ff ff72 	bl	800f2f8 <__multadd>
 800f414:	e7ee      	b.n	800f3f4 <__s2b+0x68>
 800f416:	bf00      	nop
 800f418:	08011cb0 	.word	0x08011cb0
 800f41c:	08011d40 	.word	0x08011d40

0800f420 <__hi0bits>:
 800f420:	0c02      	lsrs	r2, r0, #16
 800f422:	0412      	lsls	r2, r2, #16
 800f424:	4603      	mov	r3, r0
 800f426:	b9ca      	cbnz	r2, 800f45c <__hi0bits+0x3c>
 800f428:	0403      	lsls	r3, r0, #16
 800f42a:	2010      	movs	r0, #16
 800f42c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f430:	bf04      	itt	eq
 800f432:	021b      	lsleq	r3, r3, #8
 800f434:	3008      	addeq	r0, #8
 800f436:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f43a:	bf04      	itt	eq
 800f43c:	011b      	lsleq	r3, r3, #4
 800f43e:	3004      	addeq	r0, #4
 800f440:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f444:	bf04      	itt	eq
 800f446:	009b      	lsleq	r3, r3, #2
 800f448:	3002      	addeq	r0, #2
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	db05      	blt.n	800f45a <__hi0bits+0x3a>
 800f44e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f452:	f100 0001 	add.w	r0, r0, #1
 800f456:	bf08      	it	eq
 800f458:	2020      	moveq	r0, #32
 800f45a:	4770      	bx	lr
 800f45c:	2000      	movs	r0, #0
 800f45e:	e7e5      	b.n	800f42c <__hi0bits+0xc>

0800f460 <__lo0bits>:
 800f460:	6803      	ldr	r3, [r0, #0]
 800f462:	4602      	mov	r2, r0
 800f464:	f013 0007 	ands.w	r0, r3, #7
 800f468:	d00b      	beq.n	800f482 <__lo0bits+0x22>
 800f46a:	07d9      	lsls	r1, r3, #31
 800f46c:	d422      	bmi.n	800f4b4 <__lo0bits+0x54>
 800f46e:	0798      	lsls	r0, r3, #30
 800f470:	bf49      	itett	mi
 800f472:	085b      	lsrmi	r3, r3, #1
 800f474:	089b      	lsrpl	r3, r3, #2
 800f476:	2001      	movmi	r0, #1
 800f478:	6013      	strmi	r3, [r2, #0]
 800f47a:	bf5c      	itt	pl
 800f47c:	2002      	movpl	r0, #2
 800f47e:	6013      	strpl	r3, [r2, #0]
 800f480:	4770      	bx	lr
 800f482:	b299      	uxth	r1, r3
 800f484:	b909      	cbnz	r1, 800f48a <__lo0bits+0x2a>
 800f486:	2010      	movs	r0, #16
 800f488:	0c1b      	lsrs	r3, r3, #16
 800f48a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f48e:	bf04      	itt	eq
 800f490:	0a1b      	lsreq	r3, r3, #8
 800f492:	3008      	addeq	r0, #8
 800f494:	0719      	lsls	r1, r3, #28
 800f496:	bf04      	itt	eq
 800f498:	091b      	lsreq	r3, r3, #4
 800f49a:	3004      	addeq	r0, #4
 800f49c:	0799      	lsls	r1, r3, #30
 800f49e:	bf04      	itt	eq
 800f4a0:	089b      	lsreq	r3, r3, #2
 800f4a2:	3002      	addeq	r0, #2
 800f4a4:	07d9      	lsls	r1, r3, #31
 800f4a6:	d403      	bmi.n	800f4b0 <__lo0bits+0x50>
 800f4a8:	085b      	lsrs	r3, r3, #1
 800f4aa:	f100 0001 	add.w	r0, r0, #1
 800f4ae:	d003      	beq.n	800f4b8 <__lo0bits+0x58>
 800f4b0:	6013      	str	r3, [r2, #0]
 800f4b2:	4770      	bx	lr
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	4770      	bx	lr
 800f4b8:	2020      	movs	r0, #32
 800f4ba:	4770      	bx	lr

0800f4bc <__i2b>:
 800f4bc:	b510      	push	{r4, lr}
 800f4be:	460c      	mov	r4, r1
 800f4c0:	2101      	movs	r1, #1
 800f4c2:	f7ff feb7 	bl	800f234 <_Balloc>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	b928      	cbnz	r0, 800f4d6 <__i2b+0x1a>
 800f4ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f4ce:	4b04      	ldr	r3, [pc, #16]	; (800f4e0 <__i2b+0x24>)
 800f4d0:	4804      	ldr	r0, [pc, #16]	; (800f4e4 <__i2b+0x28>)
 800f4d2:	f000 fcf7 	bl	800fec4 <__assert_func>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	6144      	str	r4, [r0, #20]
 800f4da:	6103      	str	r3, [r0, #16]
 800f4dc:	bd10      	pop	{r4, pc}
 800f4de:	bf00      	nop
 800f4e0:	08011cb0 	.word	0x08011cb0
 800f4e4:	08011d40 	.word	0x08011d40

0800f4e8 <__multiply>:
 800f4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ec:	4614      	mov	r4, r2
 800f4ee:	690a      	ldr	r2, [r1, #16]
 800f4f0:	6923      	ldr	r3, [r4, #16]
 800f4f2:	460d      	mov	r5, r1
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	bfbe      	ittt	lt
 800f4f8:	460b      	movlt	r3, r1
 800f4fa:	4625      	movlt	r5, r4
 800f4fc:	461c      	movlt	r4, r3
 800f4fe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f502:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f506:	68ab      	ldr	r3, [r5, #8]
 800f508:	6869      	ldr	r1, [r5, #4]
 800f50a:	eb0a 0709 	add.w	r7, sl, r9
 800f50e:	42bb      	cmp	r3, r7
 800f510:	b085      	sub	sp, #20
 800f512:	bfb8      	it	lt
 800f514:	3101      	addlt	r1, #1
 800f516:	f7ff fe8d 	bl	800f234 <_Balloc>
 800f51a:	b930      	cbnz	r0, 800f52a <__multiply+0x42>
 800f51c:	4602      	mov	r2, r0
 800f51e:	f240 115d 	movw	r1, #349	; 0x15d
 800f522:	4b41      	ldr	r3, [pc, #260]	; (800f628 <__multiply+0x140>)
 800f524:	4841      	ldr	r0, [pc, #260]	; (800f62c <__multiply+0x144>)
 800f526:	f000 fccd 	bl	800fec4 <__assert_func>
 800f52a:	f100 0614 	add.w	r6, r0, #20
 800f52e:	4633      	mov	r3, r6
 800f530:	2200      	movs	r2, #0
 800f532:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f536:	4543      	cmp	r3, r8
 800f538:	d31e      	bcc.n	800f578 <__multiply+0x90>
 800f53a:	f105 0c14 	add.w	ip, r5, #20
 800f53e:	f104 0314 	add.w	r3, r4, #20
 800f542:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f546:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f54a:	9202      	str	r2, [sp, #8]
 800f54c:	ebac 0205 	sub.w	r2, ip, r5
 800f550:	3a15      	subs	r2, #21
 800f552:	f022 0203 	bic.w	r2, r2, #3
 800f556:	3204      	adds	r2, #4
 800f558:	f105 0115 	add.w	r1, r5, #21
 800f55c:	458c      	cmp	ip, r1
 800f55e:	bf38      	it	cc
 800f560:	2204      	movcc	r2, #4
 800f562:	9201      	str	r2, [sp, #4]
 800f564:	9a02      	ldr	r2, [sp, #8]
 800f566:	9303      	str	r3, [sp, #12]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d808      	bhi.n	800f57e <__multiply+0x96>
 800f56c:	2f00      	cmp	r7, #0
 800f56e:	dc55      	bgt.n	800f61c <__multiply+0x134>
 800f570:	6107      	str	r7, [r0, #16]
 800f572:	b005      	add	sp, #20
 800f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f578:	f843 2b04 	str.w	r2, [r3], #4
 800f57c:	e7db      	b.n	800f536 <__multiply+0x4e>
 800f57e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f582:	f1ba 0f00 	cmp.w	sl, #0
 800f586:	d020      	beq.n	800f5ca <__multiply+0xe2>
 800f588:	46b1      	mov	r9, r6
 800f58a:	2200      	movs	r2, #0
 800f58c:	f105 0e14 	add.w	lr, r5, #20
 800f590:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f594:	f8d9 b000 	ldr.w	fp, [r9]
 800f598:	b2a1      	uxth	r1, r4
 800f59a:	fa1f fb8b 	uxth.w	fp, fp
 800f59e:	fb0a b101 	mla	r1, sl, r1, fp
 800f5a2:	4411      	add	r1, r2
 800f5a4:	f8d9 2000 	ldr.w	r2, [r9]
 800f5a8:	0c24      	lsrs	r4, r4, #16
 800f5aa:	0c12      	lsrs	r2, r2, #16
 800f5ac:	fb0a 2404 	mla	r4, sl, r4, r2
 800f5b0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f5b4:	b289      	uxth	r1, r1
 800f5b6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f5ba:	45f4      	cmp	ip, lr
 800f5bc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f5c0:	f849 1b04 	str.w	r1, [r9], #4
 800f5c4:	d8e4      	bhi.n	800f590 <__multiply+0xa8>
 800f5c6:	9901      	ldr	r1, [sp, #4]
 800f5c8:	5072      	str	r2, [r6, r1]
 800f5ca:	9a03      	ldr	r2, [sp, #12]
 800f5cc:	3304      	adds	r3, #4
 800f5ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f5d2:	f1b9 0f00 	cmp.w	r9, #0
 800f5d6:	d01f      	beq.n	800f618 <__multiply+0x130>
 800f5d8:	46b6      	mov	lr, r6
 800f5da:	f04f 0a00 	mov.w	sl, #0
 800f5de:	6834      	ldr	r4, [r6, #0]
 800f5e0:	f105 0114 	add.w	r1, r5, #20
 800f5e4:	880a      	ldrh	r2, [r1, #0]
 800f5e6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f5ea:	b2a4      	uxth	r4, r4
 800f5ec:	fb09 b202 	mla	r2, r9, r2, fp
 800f5f0:	4492      	add	sl, r2
 800f5f2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f5f6:	f84e 4b04 	str.w	r4, [lr], #4
 800f5fa:	f851 4b04 	ldr.w	r4, [r1], #4
 800f5fe:	f8be 2000 	ldrh.w	r2, [lr]
 800f602:	0c24      	lsrs	r4, r4, #16
 800f604:	fb09 2404 	mla	r4, r9, r4, r2
 800f608:	458c      	cmp	ip, r1
 800f60a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f60e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f612:	d8e7      	bhi.n	800f5e4 <__multiply+0xfc>
 800f614:	9a01      	ldr	r2, [sp, #4]
 800f616:	50b4      	str	r4, [r6, r2]
 800f618:	3604      	adds	r6, #4
 800f61a:	e7a3      	b.n	800f564 <__multiply+0x7c>
 800f61c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1a5      	bne.n	800f570 <__multiply+0x88>
 800f624:	3f01      	subs	r7, #1
 800f626:	e7a1      	b.n	800f56c <__multiply+0x84>
 800f628:	08011cb0 	.word	0x08011cb0
 800f62c:	08011d40 	.word	0x08011d40

0800f630 <__pow5mult>:
 800f630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f634:	4615      	mov	r5, r2
 800f636:	f012 0203 	ands.w	r2, r2, #3
 800f63a:	4606      	mov	r6, r0
 800f63c:	460f      	mov	r7, r1
 800f63e:	d007      	beq.n	800f650 <__pow5mult+0x20>
 800f640:	4c25      	ldr	r4, [pc, #148]	; (800f6d8 <__pow5mult+0xa8>)
 800f642:	3a01      	subs	r2, #1
 800f644:	2300      	movs	r3, #0
 800f646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f64a:	f7ff fe55 	bl	800f2f8 <__multadd>
 800f64e:	4607      	mov	r7, r0
 800f650:	10ad      	asrs	r5, r5, #2
 800f652:	d03d      	beq.n	800f6d0 <__pow5mult+0xa0>
 800f654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f656:	b97c      	cbnz	r4, 800f678 <__pow5mult+0x48>
 800f658:	2010      	movs	r0, #16
 800f65a:	f7fc fd7d 	bl	800c158 <malloc>
 800f65e:	4602      	mov	r2, r0
 800f660:	6270      	str	r0, [r6, #36]	; 0x24
 800f662:	b928      	cbnz	r0, 800f670 <__pow5mult+0x40>
 800f664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f668:	4b1c      	ldr	r3, [pc, #112]	; (800f6dc <__pow5mult+0xac>)
 800f66a:	481d      	ldr	r0, [pc, #116]	; (800f6e0 <__pow5mult+0xb0>)
 800f66c:	f000 fc2a 	bl	800fec4 <__assert_func>
 800f670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f674:	6004      	str	r4, [r0, #0]
 800f676:	60c4      	str	r4, [r0, #12]
 800f678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f67c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f680:	b94c      	cbnz	r4, 800f696 <__pow5mult+0x66>
 800f682:	f240 2171 	movw	r1, #625	; 0x271
 800f686:	4630      	mov	r0, r6
 800f688:	f7ff ff18 	bl	800f4bc <__i2b>
 800f68c:	2300      	movs	r3, #0
 800f68e:	4604      	mov	r4, r0
 800f690:	f8c8 0008 	str.w	r0, [r8, #8]
 800f694:	6003      	str	r3, [r0, #0]
 800f696:	f04f 0900 	mov.w	r9, #0
 800f69a:	07eb      	lsls	r3, r5, #31
 800f69c:	d50a      	bpl.n	800f6b4 <__pow5mult+0x84>
 800f69e:	4639      	mov	r1, r7
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f7ff ff20 	bl	800f4e8 <__multiply>
 800f6a8:	4680      	mov	r8, r0
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	4630      	mov	r0, r6
 800f6ae:	f7ff fe01 	bl	800f2b4 <_Bfree>
 800f6b2:	4647      	mov	r7, r8
 800f6b4:	106d      	asrs	r5, r5, #1
 800f6b6:	d00b      	beq.n	800f6d0 <__pow5mult+0xa0>
 800f6b8:	6820      	ldr	r0, [r4, #0]
 800f6ba:	b938      	cbnz	r0, 800f6cc <__pow5mult+0x9c>
 800f6bc:	4622      	mov	r2, r4
 800f6be:	4621      	mov	r1, r4
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	f7ff ff11 	bl	800f4e8 <__multiply>
 800f6c6:	6020      	str	r0, [r4, #0]
 800f6c8:	f8c0 9000 	str.w	r9, [r0]
 800f6cc:	4604      	mov	r4, r0
 800f6ce:	e7e4      	b.n	800f69a <__pow5mult+0x6a>
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6d6:	bf00      	nop
 800f6d8:	08011e90 	.word	0x08011e90
 800f6dc:	08011c3a 	.word	0x08011c3a
 800f6e0:	08011d40 	.word	0x08011d40

0800f6e4 <__lshift>:
 800f6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	4607      	mov	r7, r0
 800f6ec:	4691      	mov	r9, r2
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	6849      	ldr	r1, [r1, #4]
 800f6f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f6f6:	68a3      	ldr	r3, [r4, #8]
 800f6f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f6fc:	f108 0601 	add.w	r6, r8, #1
 800f700:	42b3      	cmp	r3, r6
 800f702:	db0b      	blt.n	800f71c <__lshift+0x38>
 800f704:	4638      	mov	r0, r7
 800f706:	f7ff fd95 	bl	800f234 <_Balloc>
 800f70a:	4605      	mov	r5, r0
 800f70c:	b948      	cbnz	r0, 800f722 <__lshift+0x3e>
 800f70e:	4602      	mov	r2, r0
 800f710:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f714:	4b27      	ldr	r3, [pc, #156]	; (800f7b4 <__lshift+0xd0>)
 800f716:	4828      	ldr	r0, [pc, #160]	; (800f7b8 <__lshift+0xd4>)
 800f718:	f000 fbd4 	bl	800fec4 <__assert_func>
 800f71c:	3101      	adds	r1, #1
 800f71e:	005b      	lsls	r3, r3, #1
 800f720:	e7ee      	b.n	800f700 <__lshift+0x1c>
 800f722:	2300      	movs	r3, #0
 800f724:	f100 0114 	add.w	r1, r0, #20
 800f728:	f100 0210 	add.w	r2, r0, #16
 800f72c:	4618      	mov	r0, r3
 800f72e:	4553      	cmp	r3, sl
 800f730:	db33      	blt.n	800f79a <__lshift+0xb6>
 800f732:	6920      	ldr	r0, [r4, #16]
 800f734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f738:	f104 0314 	add.w	r3, r4, #20
 800f73c:	f019 091f 	ands.w	r9, r9, #31
 800f740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f748:	d02b      	beq.n	800f7a2 <__lshift+0xbe>
 800f74a:	468a      	mov	sl, r1
 800f74c:	2200      	movs	r2, #0
 800f74e:	f1c9 0e20 	rsb	lr, r9, #32
 800f752:	6818      	ldr	r0, [r3, #0]
 800f754:	fa00 f009 	lsl.w	r0, r0, r9
 800f758:	4302      	orrs	r2, r0
 800f75a:	f84a 2b04 	str.w	r2, [sl], #4
 800f75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f762:	459c      	cmp	ip, r3
 800f764:	fa22 f20e 	lsr.w	r2, r2, lr
 800f768:	d8f3      	bhi.n	800f752 <__lshift+0x6e>
 800f76a:	ebac 0304 	sub.w	r3, ip, r4
 800f76e:	3b15      	subs	r3, #21
 800f770:	f023 0303 	bic.w	r3, r3, #3
 800f774:	3304      	adds	r3, #4
 800f776:	f104 0015 	add.w	r0, r4, #21
 800f77a:	4584      	cmp	ip, r0
 800f77c:	bf38      	it	cc
 800f77e:	2304      	movcc	r3, #4
 800f780:	50ca      	str	r2, [r1, r3]
 800f782:	b10a      	cbz	r2, 800f788 <__lshift+0xa4>
 800f784:	f108 0602 	add.w	r6, r8, #2
 800f788:	3e01      	subs	r6, #1
 800f78a:	4638      	mov	r0, r7
 800f78c:	4621      	mov	r1, r4
 800f78e:	612e      	str	r6, [r5, #16]
 800f790:	f7ff fd90 	bl	800f2b4 <_Bfree>
 800f794:	4628      	mov	r0, r5
 800f796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f79a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f79e:	3301      	adds	r3, #1
 800f7a0:	e7c5      	b.n	800f72e <__lshift+0x4a>
 800f7a2:	3904      	subs	r1, #4
 800f7a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a8:	459c      	cmp	ip, r3
 800f7aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7ae:	d8f9      	bhi.n	800f7a4 <__lshift+0xc0>
 800f7b0:	e7ea      	b.n	800f788 <__lshift+0xa4>
 800f7b2:	bf00      	nop
 800f7b4:	08011cb0 	.word	0x08011cb0
 800f7b8:	08011d40 	.word	0x08011d40

0800f7bc <__mcmp>:
 800f7bc:	4603      	mov	r3, r0
 800f7be:	690a      	ldr	r2, [r1, #16]
 800f7c0:	6900      	ldr	r0, [r0, #16]
 800f7c2:	b530      	push	{r4, r5, lr}
 800f7c4:	1a80      	subs	r0, r0, r2
 800f7c6:	d10d      	bne.n	800f7e4 <__mcmp+0x28>
 800f7c8:	3314      	adds	r3, #20
 800f7ca:	3114      	adds	r1, #20
 800f7cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f7d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f7d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f7d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f7dc:	4295      	cmp	r5, r2
 800f7de:	d002      	beq.n	800f7e6 <__mcmp+0x2a>
 800f7e0:	d304      	bcc.n	800f7ec <__mcmp+0x30>
 800f7e2:	2001      	movs	r0, #1
 800f7e4:	bd30      	pop	{r4, r5, pc}
 800f7e6:	42a3      	cmp	r3, r4
 800f7e8:	d3f4      	bcc.n	800f7d4 <__mcmp+0x18>
 800f7ea:	e7fb      	b.n	800f7e4 <__mcmp+0x28>
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f0:	e7f8      	b.n	800f7e4 <__mcmp+0x28>
	...

0800f7f4 <__mdiff>:
 800f7f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	460c      	mov	r4, r1
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	4620      	mov	r0, r4
 800f800:	4692      	mov	sl, r2
 800f802:	f7ff ffdb 	bl	800f7bc <__mcmp>
 800f806:	1e05      	subs	r5, r0, #0
 800f808:	d111      	bne.n	800f82e <__mdiff+0x3a>
 800f80a:	4629      	mov	r1, r5
 800f80c:	4630      	mov	r0, r6
 800f80e:	f7ff fd11 	bl	800f234 <_Balloc>
 800f812:	4602      	mov	r2, r0
 800f814:	b928      	cbnz	r0, 800f822 <__mdiff+0x2e>
 800f816:	f240 2132 	movw	r1, #562	; 0x232
 800f81a:	4b3c      	ldr	r3, [pc, #240]	; (800f90c <__mdiff+0x118>)
 800f81c:	483c      	ldr	r0, [pc, #240]	; (800f910 <__mdiff+0x11c>)
 800f81e:	f000 fb51 	bl	800fec4 <__assert_func>
 800f822:	2301      	movs	r3, #1
 800f824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f828:	4610      	mov	r0, r2
 800f82a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82e:	bfa4      	itt	ge
 800f830:	4653      	movge	r3, sl
 800f832:	46a2      	movge	sl, r4
 800f834:	4630      	mov	r0, r6
 800f836:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f83a:	bfa6      	itte	ge
 800f83c:	461c      	movge	r4, r3
 800f83e:	2500      	movge	r5, #0
 800f840:	2501      	movlt	r5, #1
 800f842:	f7ff fcf7 	bl	800f234 <_Balloc>
 800f846:	4602      	mov	r2, r0
 800f848:	b918      	cbnz	r0, 800f852 <__mdiff+0x5e>
 800f84a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f84e:	4b2f      	ldr	r3, [pc, #188]	; (800f90c <__mdiff+0x118>)
 800f850:	e7e4      	b.n	800f81c <__mdiff+0x28>
 800f852:	f100 0814 	add.w	r8, r0, #20
 800f856:	f8da 7010 	ldr.w	r7, [sl, #16]
 800f85a:	60c5      	str	r5, [r0, #12]
 800f85c:	f04f 0c00 	mov.w	ip, #0
 800f860:	f10a 0514 	add.w	r5, sl, #20
 800f864:	f10a 0010 	add.w	r0, sl, #16
 800f868:	46c2      	mov	sl, r8
 800f86a:	6926      	ldr	r6, [r4, #16]
 800f86c:	f104 0914 	add.w	r9, r4, #20
 800f870:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800f874:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f878:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800f87c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f880:	fa1f f18b 	uxth.w	r1, fp
 800f884:	4461      	add	r1, ip
 800f886:	fa1f fc83 	uxth.w	ip, r3
 800f88a:	0c1b      	lsrs	r3, r3, #16
 800f88c:	eba1 010c 	sub.w	r1, r1, ip
 800f890:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f894:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f898:	b289      	uxth	r1, r1
 800f89a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f89e:	454e      	cmp	r6, r9
 800f8a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f8a4:	f84a 3b04 	str.w	r3, [sl], #4
 800f8a8:	d8e6      	bhi.n	800f878 <__mdiff+0x84>
 800f8aa:	1b33      	subs	r3, r6, r4
 800f8ac:	3b15      	subs	r3, #21
 800f8ae:	f023 0303 	bic.w	r3, r3, #3
 800f8b2:	3415      	adds	r4, #21
 800f8b4:	3304      	adds	r3, #4
 800f8b6:	42a6      	cmp	r6, r4
 800f8b8:	bf38      	it	cc
 800f8ba:	2304      	movcc	r3, #4
 800f8bc:	441d      	add	r5, r3
 800f8be:	4443      	add	r3, r8
 800f8c0:	461e      	mov	r6, r3
 800f8c2:	462c      	mov	r4, r5
 800f8c4:	4574      	cmp	r4, lr
 800f8c6:	d30e      	bcc.n	800f8e6 <__mdiff+0xf2>
 800f8c8:	f10e 0103 	add.w	r1, lr, #3
 800f8cc:	1b49      	subs	r1, r1, r5
 800f8ce:	f021 0103 	bic.w	r1, r1, #3
 800f8d2:	3d03      	subs	r5, #3
 800f8d4:	45ae      	cmp	lr, r5
 800f8d6:	bf38      	it	cc
 800f8d8:	2100      	movcc	r1, #0
 800f8da:	4419      	add	r1, r3
 800f8dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f8e0:	b18b      	cbz	r3, 800f906 <__mdiff+0x112>
 800f8e2:	6117      	str	r7, [r2, #16]
 800f8e4:	e7a0      	b.n	800f828 <__mdiff+0x34>
 800f8e6:	f854 8b04 	ldr.w	r8, [r4], #4
 800f8ea:	fa1f f188 	uxth.w	r1, r8
 800f8ee:	4461      	add	r1, ip
 800f8f0:	1408      	asrs	r0, r1, #16
 800f8f2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800f8f6:	b289      	uxth	r1, r1
 800f8f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f8fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f900:	f846 1b04 	str.w	r1, [r6], #4
 800f904:	e7de      	b.n	800f8c4 <__mdiff+0xd0>
 800f906:	3f01      	subs	r7, #1
 800f908:	e7e8      	b.n	800f8dc <__mdiff+0xe8>
 800f90a:	bf00      	nop
 800f90c:	08011cb0 	.word	0x08011cb0
 800f910:	08011d40 	.word	0x08011d40

0800f914 <__ulp>:
 800f914:	4b11      	ldr	r3, [pc, #68]	; (800f95c <__ulp+0x48>)
 800f916:	400b      	ands	r3, r1
 800f918:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	dd02      	ble.n	800f926 <__ulp+0x12>
 800f920:	2000      	movs	r0, #0
 800f922:	4619      	mov	r1, r3
 800f924:	4770      	bx	lr
 800f926:	425b      	negs	r3, r3
 800f928:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f92c:	f04f 0000 	mov.w	r0, #0
 800f930:	f04f 0100 	mov.w	r1, #0
 800f934:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f938:	da04      	bge.n	800f944 <__ulp+0x30>
 800f93a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f93e:	fa43 f102 	asr.w	r1, r3, r2
 800f942:	4770      	bx	lr
 800f944:	f1a2 0314 	sub.w	r3, r2, #20
 800f948:	2b1e      	cmp	r3, #30
 800f94a:	bfd6      	itet	le
 800f94c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f950:	2301      	movgt	r3, #1
 800f952:	fa22 f303 	lsrle.w	r3, r2, r3
 800f956:	4618      	mov	r0, r3
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	7ff00000 	.word	0x7ff00000

0800f960 <__b2d>:
 800f960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f964:	6907      	ldr	r7, [r0, #16]
 800f966:	f100 0914 	add.w	r9, r0, #20
 800f96a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800f96e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800f972:	f1a7 0804 	sub.w	r8, r7, #4
 800f976:	4630      	mov	r0, r6
 800f978:	f7ff fd52 	bl	800f420 <__hi0bits>
 800f97c:	f1c0 0320 	rsb	r3, r0, #32
 800f980:	280a      	cmp	r0, #10
 800f982:	600b      	str	r3, [r1, #0]
 800f984:	491f      	ldr	r1, [pc, #124]	; (800fa04 <__b2d+0xa4>)
 800f986:	dc17      	bgt.n	800f9b8 <__b2d+0x58>
 800f988:	45c1      	cmp	r9, r8
 800f98a:	bf28      	it	cs
 800f98c:	2200      	movcs	r2, #0
 800f98e:	f1c0 0c0b 	rsb	ip, r0, #11
 800f992:	fa26 f30c 	lsr.w	r3, r6, ip
 800f996:	bf38      	it	cc
 800f998:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f99c:	ea43 0501 	orr.w	r5, r3, r1
 800f9a0:	f100 0315 	add.w	r3, r0, #21
 800f9a4:	fa06 f303 	lsl.w	r3, r6, r3
 800f9a8:	fa22 f20c 	lsr.w	r2, r2, ip
 800f9ac:	ea43 0402 	orr.w	r4, r3, r2
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9b8:	45c1      	cmp	r9, r8
 800f9ba:	bf2e      	itee	cs
 800f9bc:	2200      	movcs	r2, #0
 800f9be:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f9c2:	f1a7 0808 	subcc.w	r8, r7, #8
 800f9c6:	f1b0 030b 	subs.w	r3, r0, #11
 800f9ca:	d016      	beq.n	800f9fa <__b2d+0x9a>
 800f9cc:	f1c3 0720 	rsb	r7, r3, #32
 800f9d0:	fa22 f107 	lsr.w	r1, r2, r7
 800f9d4:	45c8      	cmp	r8, r9
 800f9d6:	fa06 f603 	lsl.w	r6, r6, r3
 800f9da:	ea46 0601 	orr.w	r6, r6, r1
 800f9de:	bf94      	ite	ls
 800f9e0:	2100      	movls	r1, #0
 800f9e2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f9e6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800f9ea:	fa02 f003 	lsl.w	r0, r2, r3
 800f9ee:	40f9      	lsrs	r1, r7
 800f9f0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f9f4:	ea40 0401 	orr.w	r4, r0, r1
 800f9f8:	e7da      	b.n	800f9b0 <__b2d+0x50>
 800f9fa:	4614      	mov	r4, r2
 800f9fc:	ea46 0501 	orr.w	r5, r6, r1
 800fa00:	e7d6      	b.n	800f9b0 <__b2d+0x50>
 800fa02:	bf00      	nop
 800fa04:	3ff00000 	.word	0x3ff00000

0800fa08 <__d2b>:
 800fa08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fa0c:	2101      	movs	r1, #1
 800fa0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800fa12:	4690      	mov	r8, r2
 800fa14:	461d      	mov	r5, r3
 800fa16:	f7ff fc0d 	bl	800f234 <_Balloc>
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	b930      	cbnz	r0, 800fa2c <__d2b+0x24>
 800fa1e:	4602      	mov	r2, r0
 800fa20:	f240 310a 	movw	r1, #778	; 0x30a
 800fa24:	4b24      	ldr	r3, [pc, #144]	; (800fab8 <__d2b+0xb0>)
 800fa26:	4825      	ldr	r0, [pc, #148]	; (800fabc <__d2b+0xb4>)
 800fa28:	f000 fa4c 	bl	800fec4 <__assert_func>
 800fa2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800fa30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800fa34:	bb2d      	cbnz	r5, 800fa82 <__d2b+0x7a>
 800fa36:	9301      	str	r3, [sp, #4]
 800fa38:	f1b8 0300 	subs.w	r3, r8, #0
 800fa3c:	d026      	beq.n	800fa8c <__d2b+0x84>
 800fa3e:	4668      	mov	r0, sp
 800fa40:	9300      	str	r3, [sp, #0]
 800fa42:	f7ff fd0d 	bl	800f460 <__lo0bits>
 800fa46:	9900      	ldr	r1, [sp, #0]
 800fa48:	b1f0      	cbz	r0, 800fa88 <__d2b+0x80>
 800fa4a:	9a01      	ldr	r2, [sp, #4]
 800fa4c:	f1c0 0320 	rsb	r3, r0, #32
 800fa50:	fa02 f303 	lsl.w	r3, r2, r3
 800fa54:	430b      	orrs	r3, r1
 800fa56:	40c2      	lsrs	r2, r0
 800fa58:	6163      	str	r3, [r4, #20]
 800fa5a:	9201      	str	r2, [sp, #4]
 800fa5c:	9b01      	ldr	r3, [sp, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	bf14      	ite	ne
 800fa62:	2102      	movne	r1, #2
 800fa64:	2101      	moveq	r1, #1
 800fa66:	61a3      	str	r3, [r4, #24]
 800fa68:	6121      	str	r1, [r4, #16]
 800fa6a:	b1c5      	cbz	r5, 800fa9e <__d2b+0x96>
 800fa6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fa70:	4405      	add	r5, r0
 800fa72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa76:	603d      	str	r5, [r7, #0]
 800fa78:	6030      	str	r0, [r6, #0]
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	b002      	add	sp, #8
 800fa7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa86:	e7d6      	b.n	800fa36 <__d2b+0x2e>
 800fa88:	6161      	str	r1, [r4, #20]
 800fa8a:	e7e7      	b.n	800fa5c <__d2b+0x54>
 800fa8c:	a801      	add	r0, sp, #4
 800fa8e:	f7ff fce7 	bl	800f460 <__lo0bits>
 800fa92:	2101      	movs	r1, #1
 800fa94:	9b01      	ldr	r3, [sp, #4]
 800fa96:	6121      	str	r1, [r4, #16]
 800fa98:	6163      	str	r3, [r4, #20]
 800fa9a:	3020      	adds	r0, #32
 800fa9c:	e7e5      	b.n	800fa6a <__d2b+0x62>
 800fa9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800faa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800faa6:	6038      	str	r0, [r7, #0]
 800faa8:	6918      	ldr	r0, [r3, #16]
 800faaa:	f7ff fcb9 	bl	800f420 <__hi0bits>
 800faae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800fab2:	6031      	str	r1, [r6, #0]
 800fab4:	e7e1      	b.n	800fa7a <__d2b+0x72>
 800fab6:	bf00      	nop
 800fab8:	08011cb0 	.word	0x08011cb0
 800fabc:	08011d40 	.word	0x08011d40

0800fac0 <__ratio>:
 800fac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac4:	4688      	mov	r8, r1
 800fac6:	4669      	mov	r1, sp
 800fac8:	4681      	mov	r9, r0
 800faca:	f7ff ff49 	bl	800f960 <__b2d>
 800face:	460f      	mov	r7, r1
 800fad0:	4604      	mov	r4, r0
 800fad2:	460d      	mov	r5, r1
 800fad4:	4640      	mov	r0, r8
 800fad6:	a901      	add	r1, sp, #4
 800fad8:	f7ff ff42 	bl	800f960 <__b2d>
 800fadc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fae0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fae4:	468b      	mov	fp, r1
 800fae6:	eba3 0c02 	sub.w	ip, r3, r2
 800faea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800faee:	1a9b      	subs	r3, r3, r2
 800faf0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	bfd5      	itete	le
 800faf8:	460a      	movle	r2, r1
 800fafa:	462a      	movgt	r2, r5
 800fafc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb00:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb04:	bfd8      	it	le
 800fb06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fb0a:	465b      	mov	r3, fp
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	4639      	mov	r1, r7
 800fb10:	4620      	mov	r0, r4
 800fb12:	f7f0 fe77 	bl	8000804 <__aeabi_ddiv>
 800fb16:	b003      	add	sp, #12
 800fb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb1c <__copybits>:
 800fb1c:	3901      	subs	r1, #1
 800fb1e:	b570      	push	{r4, r5, r6, lr}
 800fb20:	1149      	asrs	r1, r1, #5
 800fb22:	6914      	ldr	r4, [r2, #16]
 800fb24:	3101      	adds	r1, #1
 800fb26:	f102 0314 	add.w	r3, r2, #20
 800fb2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb32:	1f05      	subs	r5, r0, #4
 800fb34:	42a3      	cmp	r3, r4
 800fb36:	d30c      	bcc.n	800fb52 <__copybits+0x36>
 800fb38:	1aa3      	subs	r3, r4, r2
 800fb3a:	3b11      	subs	r3, #17
 800fb3c:	f023 0303 	bic.w	r3, r3, #3
 800fb40:	3211      	adds	r2, #17
 800fb42:	42a2      	cmp	r2, r4
 800fb44:	bf88      	it	hi
 800fb46:	2300      	movhi	r3, #0
 800fb48:	4418      	add	r0, r3
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	4288      	cmp	r0, r1
 800fb4e:	d305      	bcc.n	800fb5c <__copybits+0x40>
 800fb50:	bd70      	pop	{r4, r5, r6, pc}
 800fb52:	f853 6b04 	ldr.w	r6, [r3], #4
 800fb56:	f845 6f04 	str.w	r6, [r5, #4]!
 800fb5a:	e7eb      	b.n	800fb34 <__copybits+0x18>
 800fb5c:	f840 3b04 	str.w	r3, [r0], #4
 800fb60:	e7f4      	b.n	800fb4c <__copybits+0x30>

0800fb62 <__any_on>:
 800fb62:	f100 0214 	add.w	r2, r0, #20
 800fb66:	6900      	ldr	r0, [r0, #16]
 800fb68:	114b      	asrs	r3, r1, #5
 800fb6a:	4298      	cmp	r0, r3
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	db11      	blt.n	800fb94 <__any_on+0x32>
 800fb70:	dd0a      	ble.n	800fb88 <__any_on+0x26>
 800fb72:	f011 011f 	ands.w	r1, r1, #31
 800fb76:	d007      	beq.n	800fb88 <__any_on+0x26>
 800fb78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fb7c:	fa24 f001 	lsr.w	r0, r4, r1
 800fb80:	fa00 f101 	lsl.w	r1, r0, r1
 800fb84:	428c      	cmp	r4, r1
 800fb86:	d10b      	bne.n	800fba0 <__any_on+0x3e>
 800fb88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fb8c:	4293      	cmp	r3, r2
 800fb8e:	d803      	bhi.n	800fb98 <__any_on+0x36>
 800fb90:	2000      	movs	r0, #0
 800fb92:	bd10      	pop	{r4, pc}
 800fb94:	4603      	mov	r3, r0
 800fb96:	e7f7      	b.n	800fb88 <__any_on+0x26>
 800fb98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb9c:	2900      	cmp	r1, #0
 800fb9e:	d0f5      	beq.n	800fb8c <__any_on+0x2a>
 800fba0:	2001      	movs	r0, #1
 800fba2:	e7f6      	b.n	800fb92 <__any_on+0x30>

0800fba4 <_calloc_r>:
 800fba4:	b538      	push	{r3, r4, r5, lr}
 800fba6:	fb02 f501 	mul.w	r5, r2, r1
 800fbaa:	4629      	mov	r1, r5
 800fbac:	f7fc fb38 	bl	800c220 <_malloc_r>
 800fbb0:	4604      	mov	r4, r0
 800fbb2:	b118      	cbz	r0, 800fbbc <_calloc_r+0x18>
 800fbb4:	462a      	mov	r2, r5
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	f7fc fade 	bl	800c178 <memset>
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	bd38      	pop	{r3, r4, r5, pc}

0800fbc0 <__ssputs_r>:
 800fbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc4:	688e      	ldr	r6, [r1, #8]
 800fbc6:	4682      	mov	sl, r0
 800fbc8:	429e      	cmp	r6, r3
 800fbca:	460c      	mov	r4, r1
 800fbcc:	4690      	mov	r8, r2
 800fbce:	461f      	mov	r7, r3
 800fbd0:	d838      	bhi.n	800fc44 <__ssputs_r+0x84>
 800fbd2:	898a      	ldrh	r2, [r1, #12]
 800fbd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fbd8:	d032      	beq.n	800fc40 <__ssputs_r+0x80>
 800fbda:	6825      	ldr	r5, [r4, #0]
 800fbdc:	6909      	ldr	r1, [r1, #16]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	eba5 0901 	sub.w	r9, r5, r1
 800fbe4:	6965      	ldr	r5, [r4, #20]
 800fbe6:	444b      	add	r3, r9
 800fbe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fbec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fbf0:	106d      	asrs	r5, r5, #1
 800fbf2:	429d      	cmp	r5, r3
 800fbf4:	bf38      	it	cc
 800fbf6:	461d      	movcc	r5, r3
 800fbf8:	0553      	lsls	r3, r2, #21
 800fbfa:	d531      	bpl.n	800fc60 <__ssputs_r+0xa0>
 800fbfc:	4629      	mov	r1, r5
 800fbfe:	f7fc fb0f 	bl	800c220 <_malloc_r>
 800fc02:	4606      	mov	r6, r0
 800fc04:	b950      	cbnz	r0, 800fc1c <__ssputs_r+0x5c>
 800fc06:	230c      	movs	r3, #12
 800fc08:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0c:	f8ca 3000 	str.w	r3, [sl]
 800fc10:	89a3      	ldrh	r3, [r4, #12]
 800fc12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc16:	81a3      	strh	r3, [r4, #12]
 800fc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1c:	464a      	mov	r2, r9
 800fc1e:	6921      	ldr	r1, [r4, #16]
 800fc20:	f7ff faee 	bl	800f200 <memcpy>
 800fc24:	89a3      	ldrh	r3, [r4, #12]
 800fc26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc2e:	81a3      	strh	r3, [r4, #12]
 800fc30:	6126      	str	r6, [r4, #16]
 800fc32:	444e      	add	r6, r9
 800fc34:	6026      	str	r6, [r4, #0]
 800fc36:	463e      	mov	r6, r7
 800fc38:	6165      	str	r5, [r4, #20]
 800fc3a:	eba5 0509 	sub.w	r5, r5, r9
 800fc3e:	60a5      	str	r5, [r4, #8]
 800fc40:	42be      	cmp	r6, r7
 800fc42:	d900      	bls.n	800fc46 <__ssputs_r+0x86>
 800fc44:	463e      	mov	r6, r7
 800fc46:	4632      	mov	r2, r6
 800fc48:	4641      	mov	r1, r8
 800fc4a:	6820      	ldr	r0, [r4, #0]
 800fc4c:	f000 f96d 	bl	800ff2a <memmove>
 800fc50:	68a3      	ldr	r3, [r4, #8]
 800fc52:	6822      	ldr	r2, [r4, #0]
 800fc54:	1b9b      	subs	r3, r3, r6
 800fc56:	4432      	add	r2, r6
 800fc58:	2000      	movs	r0, #0
 800fc5a:	60a3      	str	r3, [r4, #8]
 800fc5c:	6022      	str	r2, [r4, #0]
 800fc5e:	e7db      	b.n	800fc18 <__ssputs_r+0x58>
 800fc60:	462a      	mov	r2, r5
 800fc62:	f000 f97c 	bl	800ff5e <_realloc_r>
 800fc66:	4606      	mov	r6, r0
 800fc68:	2800      	cmp	r0, #0
 800fc6a:	d1e1      	bne.n	800fc30 <__ssputs_r+0x70>
 800fc6c:	4650      	mov	r0, sl
 800fc6e:	6921      	ldr	r1, [r4, #16]
 800fc70:	f7fc fa8a 	bl	800c188 <_free_r>
 800fc74:	e7c7      	b.n	800fc06 <__ssputs_r+0x46>
	...

0800fc78 <_svfiprintf_r>:
 800fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	4698      	mov	r8, r3
 800fc7e:	898b      	ldrh	r3, [r1, #12]
 800fc80:	4607      	mov	r7, r0
 800fc82:	061b      	lsls	r3, r3, #24
 800fc84:	460d      	mov	r5, r1
 800fc86:	4614      	mov	r4, r2
 800fc88:	b09d      	sub	sp, #116	; 0x74
 800fc8a:	d50e      	bpl.n	800fcaa <_svfiprintf_r+0x32>
 800fc8c:	690b      	ldr	r3, [r1, #16]
 800fc8e:	b963      	cbnz	r3, 800fcaa <_svfiprintf_r+0x32>
 800fc90:	2140      	movs	r1, #64	; 0x40
 800fc92:	f7fc fac5 	bl	800c220 <_malloc_r>
 800fc96:	6028      	str	r0, [r5, #0]
 800fc98:	6128      	str	r0, [r5, #16]
 800fc9a:	b920      	cbnz	r0, 800fca6 <_svfiprintf_r+0x2e>
 800fc9c:	230c      	movs	r3, #12
 800fc9e:	603b      	str	r3, [r7, #0]
 800fca0:	f04f 30ff 	mov.w	r0, #4294967295
 800fca4:	e0d1      	b.n	800fe4a <_svfiprintf_r+0x1d2>
 800fca6:	2340      	movs	r3, #64	; 0x40
 800fca8:	616b      	str	r3, [r5, #20]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	9309      	str	r3, [sp, #36]	; 0x24
 800fcae:	2320      	movs	r3, #32
 800fcb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcb4:	2330      	movs	r3, #48	; 0x30
 800fcb6:	f04f 0901 	mov.w	r9, #1
 800fcba:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fe64 <_svfiprintf_r+0x1ec>
 800fcc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcc6:	4623      	mov	r3, r4
 800fcc8:	469a      	mov	sl, r3
 800fcca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcce:	b10a      	cbz	r2, 800fcd4 <_svfiprintf_r+0x5c>
 800fcd0:	2a25      	cmp	r2, #37	; 0x25
 800fcd2:	d1f9      	bne.n	800fcc8 <_svfiprintf_r+0x50>
 800fcd4:	ebba 0b04 	subs.w	fp, sl, r4
 800fcd8:	d00b      	beq.n	800fcf2 <_svfiprintf_r+0x7a>
 800fcda:	465b      	mov	r3, fp
 800fcdc:	4622      	mov	r2, r4
 800fcde:	4629      	mov	r1, r5
 800fce0:	4638      	mov	r0, r7
 800fce2:	f7ff ff6d 	bl	800fbc0 <__ssputs_r>
 800fce6:	3001      	adds	r0, #1
 800fce8:	f000 80aa 	beq.w	800fe40 <_svfiprintf_r+0x1c8>
 800fcec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcee:	445a      	add	r2, fp
 800fcf0:	9209      	str	r2, [sp, #36]	; 0x24
 800fcf2:	f89a 3000 	ldrb.w	r3, [sl]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	f000 80a2 	beq.w	800fe40 <_svfiprintf_r+0x1c8>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	f04f 32ff 	mov.w	r2, #4294967295
 800fd02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd06:	f10a 0a01 	add.w	sl, sl, #1
 800fd0a:	9304      	str	r3, [sp, #16]
 800fd0c:	9307      	str	r3, [sp, #28]
 800fd0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd12:	931a      	str	r3, [sp, #104]	; 0x68
 800fd14:	4654      	mov	r4, sl
 800fd16:	2205      	movs	r2, #5
 800fd18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd1c:	4851      	ldr	r0, [pc, #324]	; (800fe64 <_svfiprintf_r+0x1ec>)
 800fd1e:	f7ff fa61 	bl	800f1e4 <memchr>
 800fd22:	9a04      	ldr	r2, [sp, #16]
 800fd24:	b9d8      	cbnz	r0, 800fd5e <_svfiprintf_r+0xe6>
 800fd26:	06d0      	lsls	r0, r2, #27
 800fd28:	bf44      	itt	mi
 800fd2a:	2320      	movmi	r3, #32
 800fd2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd30:	0711      	lsls	r1, r2, #28
 800fd32:	bf44      	itt	mi
 800fd34:	232b      	movmi	r3, #43	; 0x2b
 800fd36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd3e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd40:	d015      	beq.n	800fd6e <_svfiprintf_r+0xf6>
 800fd42:	4654      	mov	r4, sl
 800fd44:	2000      	movs	r0, #0
 800fd46:	f04f 0c0a 	mov.w	ip, #10
 800fd4a:	9a07      	ldr	r2, [sp, #28]
 800fd4c:	4621      	mov	r1, r4
 800fd4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd52:	3b30      	subs	r3, #48	; 0x30
 800fd54:	2b09      	cmp	r3, #9
 800fd56:	d94e      	bls.n	800fdf6 <_svfiprintf_r+0x17e>
 800fd58:	b1b0      	cbz	r0, 800fd88 <_svfiprintf_r+0x110>
 800fd5a:	9207      	str	r2, [sp, #28]
 800fd5c:	e014      	b.n	800fd88 <_svfiprintf_r+0x110>
 800fd5e:	eba0 0308 	sub.w	r3, r0, r8
 800fd62:	fa09 f303 	lsl.w	r3, r9, r3
 800fd66:	4313      	orrs	r3, r2
 800fd68:	46a2      	mov	sl, r4
 800fd6a:	9304      	str	r3, [sp, #16]
 800fd6c:	e7d2      	b.n	800fd14 <_svfiprintf_r+0x9c>
 800fd6e:	9b03      	ldr	r3, [sp, #12]
 800fd70:	1d19      	adds	r1, r3, #4
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	9103      	str	r1, [sp, #12]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	bfbb      	ittet	lt
 800fd7a:	425b      	neglt	r3, r3
 800fd7c:	f042 0202 	orrlt.w	r2, r2, #2
 800fd80:	9307      	strge	r3, [sp, #28]
 800fd82:	9307      	strlt	r3, [sp, #28]
 800fd84:	bfb8      	it	lt
 800fd86:	9204      	strlt	r2, [sp, #16]
 800fd88:	7823      	ldrb	r3, [r4, #0]
 800fd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800fd8c:	d10c      	bne.n	800fda8 <_svfiprintf_r+0x130>
 800fd8e:	7863      	ldrb	r3, [r4, #1]
 800fd90:	2b2a      	cmp	r3, #42	; 0x2a
 800fd92:	d135      	bne.n	800fe00 <_svfiprintf_r+0x188>
 800fd94:	9b03      	ldr	r3, [sp, #12]
 800fd96:	3402      	adds	r4, #2
 800fd98:	1d1a      	adds	r2, r3, #4
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	9203      	str	r2, [sp, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	bfb8      	it	lt
 800fda2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fda6:	9305      	str	r3, [sp, #20]
 800fda8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fe74 <_svfiprintf_r+0x1fc>
 800fdac:	2203      	movs	r2, #3
 800fdae:	4650      	mov	r0, sl
 800fdb0:	7821      	ldrb	r1, [r4, #0]
 800fdb2:	f7ff fa17 	bl	800f1e4 <memchr>
 800fdb6:	b140      	cbz	r0, 800fdca <_svfiprintf_r+0x152>
 800fdb8:	2340      	movs	r3, #64	; 0x40
 800fdba:	eba0 000a 	sub.w	r0, r0, sl
 800fdbe:	fa03 f000 	lsl.w	r0, r3, r0
 800fdc2:	9b04      	ldr	r3, [sp, #16]
 800fdc4:	3401      	adds	r4, #1
 800fdc6:	4303      	orrs	r3, r0
 800fdc8:	9304      	str	r3, [sp, #16]
 800fdca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdce:	2206      	movs	r2, #6
 800fdd0:	4825      	ldr	r0, [pc, #148]	; (800fe68 <_svfiprintf_r+0x1f0>)
 800fdd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fdd6:	f7ff fa05 	bl	800f1e4 <memchr>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	d038      	beq.n	800fe50 <_svfiprintf_r+0x1d8>
 800fdde:	4b23      	ldr	r3, [pc, #140]	; (800fe6c <_svfiprintf_r+0x1f4>)
 800fde0:	bb1b      	cbnz	r3, 800fe2a <_svfiprintf_r+0x1b2>
 800fde2:	9b03      	ldr	r3, [sp, #12]
 800fde4:	3307      	adds	r3, #7
 800fde6:	f023 0307 	bic.w	r3, r3, #7
 800fdea:	3308      	adds	r3, #8
 800fdec:	9303      	str	r3, [sp, #12]
 800fdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf0:	4433      	add	r3, r6
 800fdf2:	9309      	str	r3, [sp, #36]	; 0x24
 800fdf4:	e767      	b.n	800fcc6 <_svfiprintf_r+0x4e>
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdfe:	e7a5      	b.n	800fd4c <_svfiprintf_r+0xd4>
 800fe00:	2300      	movs	r3, #0
 800fe02:	f04f 0c0a 	mov.w	ip, #10
 800fe06:	4619      	mov	r1, r3
 800fe08:	3401      	adds	r4, #1
 800fe0a:	9305      	str	r3, [sp, #20]
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe12:	3a30      	subs	r2, #48	; 0x30
 800fe14:	2a09      	cmp	r2, #9
 800fe16:	d903      	bls.n	800fe20 <_svfiprintf_r+0x1a8>
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d0c5      	beq.n	800fda8 <_svfiprintf_r+0x130>
 800fe1c:	9105      	str	r1, [sp, #20]
 800fe1e:	e7c3      	b.n	800fda8 <_svfiprintf_r+0x130>
 800fe20:	4604      	mov	r4, r0
 800fe22:	2301      	movs	r3, #1
 800fe24:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe28:	e7f0      	b.n	800fe0c <_svfiprintf_r+0x194>
 800fe2a:	ab03      	add	r3, sp, #12
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	462a      	mov	r2, r5
 800fe30:	4638      	mov	r0, r7
 800fe32:	4b0f      	ldr	r3, [pc, #60]	; (800fe70 <_svfiprintf_r+0x1f8>)
 800fe34:	a904      	add	r1, sp, #16
 800fe36:	f7fc faeb 	bl	800c410 <_printf_float>
 800fe3a:	1c42      	adds	r2, r0, #1
 800fe3c:	4606      	mov	r6, r0
 800fe3e:	d1d6      	bne.n	800fdee <_svfiprintf_r+0x176>
 800fe40:	89ab      	ldrh	r3, [r5, #12]
 800fe42:	065b      	lsls	r3, r3, #25
 800fe44:	f53f af2c 	bmi.w	800fca0 <_svfiprintf_r+0x28>
 800fe48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe4a:	b01d      	add	sp, #116	; 0x74
 800fe4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe50:	ab03      	add	r3, sp, #12
 800fe52:	9300      	str	r3, [sp, #0]
 800fe54:	462a      	mov	r2, r5
 800fe56:	4638      	mov	r0, r7
 800fe58:	4b05      	ldr	r3, [pc, #20]	; (800fe70 <_svfiprintf_r+0x1f8>)
 800fe5a:	a904      	add	r1, sp, #16
 800fe5c:	f7fc fd74 	bl	800c948 <_printf_i>
 800fe60:	e7eb      	b.n	800fe3a <_svfiprintf_r+0x1c2>
 800fe62:	bf00      	nop
 800fe64:	08011e9c 	.word	0x08011e9c
 800fe68:	08011ea6 	.word	0x08011ea6
 800fe6c:	0800c411 	.word	0x0800c411
 800fe70:	0800fbc1 	.word	0x0800fbc1
 800fe74:	08011ea2 	.word	0x08011ea2

0800fe78 <nan>:
 800fe78:	2000      	movs	r0, #0
 800fe7a:	4901      	ldr	r1, [pc, #4]	; (800fe80 <nan+0x8>)
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	7ff80000 	.word	0x7ff80000

0800fe84 <strncmp>:
 800fe84:	b510      	push	{r4, lr}
 800fe86:	b16a      	cbz	r2, 800fea4 <strncmp+0x20>
 800fe88:	3901      	subs	r1, #1
 800fe8a:	1884      	adds	r4, r0, r2
 800fe8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fe90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d103      	bne.n	800fea0 <strncmp+0x1c>
 800fe98:	42a0      	cmp	r0, r4
 800fe9a:	d001      	beq.n	800fea0 <strncmp+0x1c>
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1f5      	bne.n	800fe8c <strncmp+0x8>
 800fea0:	1a98      	subs	r0, r3, r2
 800fea2:	bd10      	pop	{r4, pc}
 800fea4:	4610      	mov	r0, r2
 800fea6:	e7fc      	b.n	800fea2 <strncmp+0x1e>

0800fea8 <__ascii_wctomb>:
 800fea8:	4603      	mov	r3, r0
 800feaa:	4608      	mov	r0, r1
 800feac:	b141      	cbz	r1, 800fec0 <__ascii_wctomb+0x18>
 800feae:	2aff      	cmp	r2, #255	; 0xff
 800feb0:	d904      	bls.n	800febc <__ascii_wctomb+0x14>
 800feb2:	228a      	movs	r2, #138	; 0x8a
 800feb4:	f04f 30ff 	mov.w	r0, #4294967295
 800feb8:	601a      	str	r2, [r3, #0]
 800feba:	4770      	bx	lr
 800febc:	2001      	movs	r0, #1
 800febe:	700a      	strb	r2, [r1, #0]
 800fec0:	4770      	bx	lr
	...

0800fec4 <__assert_func>:
 800fec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fec6:	4614      	mov	r4, r2
 800fec8:	461a      	mov	r2, r3
 800feca:	4b09      	ldr	r3, [pc, #36]	; (800fef0 <__assert_func+0x2c>)
 800fecc:	4605      	mov	r5, r0
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	68d8      	ldr	r0, [r3, #12]
 800fed2:	b14c      	cbz	r4, 800fee8 <__assert_func+0x24>
 800fed4:	4b07      	ldr	r3, [pc, #28]	; (800fef4 <__assert_func+0x30>)
 800fed6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800feda:	9100      	str	r1, [sp, #0]
 800fedc:	462b      	mov	r3, r5
 800fede:	4906      	ldr	r1, [pc, #24]	; (800fef8 <__assert_func+0x34>)
 800fee0:	f000 f80e 	bl	800ff00 <fiprintf>
 800fee4:	f000 fa78 	bl	80103d8 <abort>
 800fee8:	4b04      	ldr	r3, [pc, #16]	; (800fefc <__assert_func+0x38>)
 800feea:	461c      	mov	r4, r3
 800feec:	e7f3      	b.n	800fed6 <__assert_func+0x12>
 800feee:	bf00      	nop
 800fef0:	2000004c 	.word	0x2000004c
 800fef4:	08011ead 	.word	0x08011ead
 800fef8:	08011eba 	.word	0x08011eba
 800fefc:	08011ee8 	.word	0x08011ee8

0800ff00 <fiprintf>:
 800ff00:	b40e      	push	{r1, r2, r3}
 800ff02:	b503      	push	{r0, r1, lr}
 800ff04:	4601      	mov	r1, r0
 800ff06:	ab03      	add	r3, sp, #12
 800ff08:	4805      	ldr	r0, [pc, #20]	; (800ff20 <fiprintf+0x20>)
 800ff0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff0e:	6800      	ldr	r0, [r0, #0]
 800ff10:	9301      	str	r3, [sp, #4]
 800ff12:	f000 f871 	bl	800fff8 <_vfiprintf_r>
 800ff16:	b002      	add	sp, #8
 800ff18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff1c:	b003      	add	sp, #12
 800ff1e:	4770      	bx	lr
 800ff20:	2000004c 	.word	0x2000004c

0800ff24 <__retarget_lock_init_recursive>:
 800ff24:	4770      	bx	lr

0800ff26 <__retarget_lock_acquire_recursive>:
 800ff26:	4770      	bx	lr

0800ff28 <__retarget_lock_release_recursive>:
 800ff28:	4770      	bx	lr

0800ff2a <memmove>:
 800ff2a:	4288      	cmp	r0, r1
 800ff2c:	b510      	push	{r4, lr}
 800ff2e:	eb01 0402 	add.w	r4, r1, r2
 800ff32:	d902      	bls.n	800ff3a <memmove+0x10>
 800ff34:	4284      	cmp	r4, r0
 800ff36:	4623      	mov	r3, r4
 800ff38:	d807      	bhi.n	800ff4a <memmove+0x20>
 800ff3a:	1e43      	subs	r3, r0, #1
 800ff3c:	42a1      	cmp	r1, r4
 800ff3e:	d008      	beq.n	800ff52 <memmove+0x28>
 800ff40:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff44:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff48:	e7f8      	b.n	800ff3c <memmove+0x12>
 800ff4a:	4601      	mov	r1, r0
 800ff4c:	4402      	add	r2, r0
 800ff4e:	428a      	cmp	r2, r1
 800ff50:	d100      	bne.n	800ff54 <memmove+0x2a>
 800ff52:	bd10      	pop	{r4, pc}
 800ff54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff5c:	e7f7      	b.n	800ff4e <memmove+0x24>

0800ff5e <_realloc_r>:
 800ff5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff60:	4607      	mov	r7, r0
 800ff62:	4614      	mov	r4, r2
 800ff64:	460e      	mov	r6, r1
 800ff66:	b921      	cbnz	r1, 800ff72 <_realloc_r+0x14>
 800ff68:	4611      	mov	r1, r2
 800ff6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ff6e:	f7fc b957 	b.w	800c220 <_malloc_r>
 800ff72:	b922      	cbnz	r2, 800ff7e <_realloc_r+0x20>
 800ff74:	f7fc f908 	bl	800c188 <_free_r>
 800ff78:	4625      	mov	r5, r4
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff7e:	f000 fc4f 	bl	8010820 <_malloc_usable_size_r>
 800ff82:	42a0      	cmp	r0, r4
 800ff84:	d20f      	bcs.n	800ffa6 <_realloc_r+0x48>
 800ff86:	4621      	mov	r1, r4
 800ff88:	4638      	mov	r0, r7
 800ff8a:	f7fc f949 	bl	800c220 <_malloc_r>
 800ff8e:	4605      	mov	r5, r0
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0f2      	beq.n	800ff7a <_realloc_r+0x1c>
 800ff94:	4631      	mov	r1, r6
 800ff96:	4622      	mov	r2, r4
 800ff98:	f7ff f932 	bl	800f200 <memcpy>
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4638      	mov	r0, r7
 800ffa0:	f7fc f8f2 	bl	800c188 <_free_r>
 800ffa4:	e7e9      	b.n	800ff7a <_realloc_r+0x1c>
 800ffa6:	4635      	mov	r5, r6
 800ffa8:	e7e7      	b.n	800ff7a <_realloc_r+0x1c>

0800ffaa <__sfputc_r>:
 800ffaa:	6893      	ldr	r3, [r2, #8]
 800ffac:	b410      	push	{r4}
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	6093      	str	r3, [r2, #8]
 800ffb4:	da07      	bge.n	800ffc6 <__sfputc_r+0x1c>
 800ffb6:	6994      	ldr	r4, [r2, #24]
 800ffb8:	42a3      	cmp	r3, r4
 800ffba:	db01      	blt.n	800ffc0 <__sfputc_r+0x16>
 800ffbc:	290a      	cmp	r1, #10
 800ffbe:	d102      	bne.n	800ffc6 <__sfputc_r+0x1c>
 800ffc0:	bc10      	pop	{r4}
 800ffc2:	f000 b949 	b.w	8010258 <__swbuf_r>
 800ffc6:	6813      	ldr	r3, [r2, #0]
 800ffc8:	1c58      	adds	r0, r3, #1
 800ffca:	6010      	str	r0, [r2, #0]
 800ffcc:	7019      	strb	r1, [r3, #0]
 800ffce:	4608      	mov	r0, r1
 800ffd0:	bc10      	pop	{r4}
 800ffd2:	4770      	bx	lr

0800ffd4 <__sfputs_r>:
 800ffd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd6:	4606      	mov	r6, r0
 800ffd8:	460f      	mov	r7, r1
 800ffda:	4614      	mov	r4, r2
 800ffdc:	18d5      	adds	r5, r2, r3
 800ffde:	42ac      	cmp	r4, r5
 800ffe0:	d101      	bne.n	800ffe6 <__sfputs_r+0x12>
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	e007      	b.n	800fff6 <__sfputs_r+0x22>
 800ffe6:	463a      	mov	r2, r7
 800ffe8:	4630      	mov	r0, r6
 800ffea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffee:	f7ff ffdc 	bl	800ffaa <__sfputc_r>
 800fff2:	1c43      	adds	r3, r0, #1
 800fff4:	d1f3      	bne.n	800ffde <__sfputs_r+0xa>
 800fff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fff8 <_vfiprintf_r>:
 800fff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffc:	460d      	mov	r5, r1
 800fffe:	4614      	mov	r4, r2
 8010000:	4698      	mov	r8, r3
 8010002:	4606      	mov	r6, r0
 8010004:	b09d      	sub	sp, #116	; 0x74
 8010006:	b118      	cbz	r0, 8010010 <_vfiprintf_r+0x18>
 8010008:	6983      	ldr	r3, [r0, #24]
 801000a:	b90b      	cbnz	r3, 8010010 <_vfiprintf_r+0x18>
 801000c:	f000 fb06 	bl	801061c <__sinit>
 8010010:	4b89      	ldr	r3, [pc, #548]	; (8010238 <_vfiprintf_r+0x240>)
 8010012:	429d      	cmp	r5, r3
 8010014:	d11b      	bne.n	801004e <_vfiprintf_r+0x56>
 8010016:	6875      	ldr	r5, [r6, #4]
 8010018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801001a:	07d9      	lsls	r1, r3, #31
 801001c:	d405      	bmi.n	801002a <_vfiprintf_r+0x32>
 801001e:	89ab      	ldrh	r3, [r5, #12]
 8010020:	059a      	lsls	r2, r3, #22
 8010022:	d402      	bmi.n	801002a <_vfiprintf_r+0x32>
 8010024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010026:	f7ff ff7e 	bl	800ff26 <__retarget_lock_acquire_recursive>
 801002a:	89ab      	ldrh	r3, [r5, #12]
 801002c:	071b      	lsls	r3, r3, #28
 801002e:	d501      	bpl.n	8010034 <_vfiprintf_r+0x3c>
 8010030:	692b      	ldr	r3, [r5, #16]
 8010032:	b9eb      	cbnz	r3, 8010070 <_vfiprintf_r+0x78>
 8010034:	4629      	mov	r1, r5
 8010036:	4630      	mov	r0, r6
 8010038:	f000 f960 	bl	80102fc <__swsetup_r>
 801003c:	b1c0      	cbz	r0, 8010070 <_vfiprintf_r+0x78>
 801003e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010040:	07dc      	lsls	r4, r3, #31
 8010042:	d50e      	bpl.n	8010062 <_vfiprintf_r+0x6a>
 8010044:	f04f 30ff 	mov.w	r0, #4294967295
 8010048:	b01d      	add	sp, #116	; 0x74
 801004a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801004e:	4b7b      	ldr	r3, [pc, #492]	; (801023c <_vfiprintf_r+0x244>)
 8010050:	429d      	cmp	r5, r3
 8010052:	d101      	bne.n	8010058 <_vfiprintf_r+0x60>
 8010054:	68b5      	ldr	r5, [r6, #8]
 8010056:	e7df      	b.n	8010018 <_vfiprintf_r+0x20>
 8010058:	4b79      	ldr	r3, [pc, #484]	; (8010240 <_vfiprintf_r+0x248>)
 801005a:	429d      	cmp	r5, r3
 801005c:	bf08      	it	eq
 801005e:	68f5      	ldreq	r5, [r6, #12]
 8010060:	e7da      	b.n	8010018 <_vfiprintf_r+0x20>
 8010062:	89ab      	ldrh	r3, [r5, #12]
 8010064:	0598      	lsls	r0, r3, #22
 8010066:	d4ed      	bmi.n	8010044 <_vfiprintf_r+0x4c>
 8010068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801006a:	f7ff ff5d 	bl	800ff28 <__retarget_lock_release_recursive>
 801006e:	e7e9      	b.n	8010044 <_vfiprintf_r+0x4c>
 8010070:	2300      	movs	r3, #0
 8010072:	9309      	str	r3, [sp, #36]	; 0x24
 8010074:	2320      	movs	r3, #32
 8010076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801007a:	2330      	movs	r3, #48	; 0x30
 801007c:	f04f 0901 	mov.w	r9, #1
 8010080:	f8cd 800c 	str.w	r8, [sp, #12]
 8010084:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010244 <_vfiprintf_r+0x24c>
 8010088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801008c:	4623      	mov	r3, r4
 801008e:	469a      	mov	sl, r3
 8010090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010094:	b10a      	cbz	r2, 801009a <_vfiprintf_r+0xa2>
 8010096:	2a25      	cmp	r2, #37	; 0x25
 8010098:	d1f9      	bne.n	801008e <_vfiprintf_r+0x96>
 801009a:	ebba 0b04 	subs.w	fp, sl, r4
 801009e:	d00b      	beq.n	80100b8 <_vfiprintf_r+0xc0>
 80100a0:	465b      	mov	r3, fp
 80100a2:	4622      	mov	r2, r4
 80100a4:	4629      	mov	r1, r5
 80100a6:	4630      	mov	r0, r6
 80100a8:	f7ff ff94 	bl	800ffd4 <__sfputs_r>
 80100ac:	3001      	adds	r0, #1
 80100ae:	f000 80aa 	beq.w	8010206 <_vfiprintf_r+0x20e>
 80100b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100b4:	445a      	add	r2, fp
 80100b6:	9209      	str	r2, [sp, #36]	; 0x24
 80100b8:	f89a 3000 	ldrb.w	r3, [sl]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f000 80a2 	beq.w	8010206 <_vfiprintf_r+0x20e>
 80100c2:	2300      	movs	r3, #0
 80100c4:	f04f 32ff 	mov.w	r2, #4294967295
 80100c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100cc:	f10a 0a01 	add.w	sl, sl, #1
 80100d0:	9304      	str	r3, [sp, #16]
 80100d2:	9307      	str	r3, [sp, #28]
 80100d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100d8:	931a      	str	r3, [sp, #104]	; 0x68
 80100da:	4654      	mov	r4, sl
 80100dc:	2205      	movs	r2, #5
 80100de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e2:	4858      	ldr	r0, [pc, #352]	; (8010244 <_vfiprintf_r+0x24c>)
 80100e4:	f7ff f87e 	bl	800f1e4 <memchr>
 80100e8:	9a04      	ldr	r2, [sp, #16]
 80100ea:	b9d8      	cbnz	r0, 8010124 <_vfiprintf_r+0x12c>
 80100ec:	06d1      	lsls	r1, r2, #27
 80100ee:	bf44      	itt	mi
 80100f0:	2320      	movmi	r3, #32
 80100f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100f6:	0713      	lsls	r3, r2, #28
 80100f8:	bf44      	itt	mi
 80100fa:	232b      	movmi	r3, #43	; 0x2b
 80100fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010100:	f89a 3000 	ldrb.w	r3, [sl]
 8010104:	2b2a      	cmp	r3, #42	; 0x2a
 8010106:	d015      	beq.n	8010134 <_vfiprintf_r+0x13c>
 8010108:	4654      	mov	r4, sl
 801010a:	2000      	movs	r0, #0
 801010c:	f04f 0c0a 	mov.w	ip, #10
 8010110:	9a07      	ldr	r2, [sp, #28]
 8010112:	4621      	mov	r1, r4
 8010114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010118:	3b30      	subs	r3, #48	; 0x30
 801011a:	2b09      	cmp	r3, #9
 801011c:	d94e      	bls.n	80101bc <_vfiprintf_r+0x1c4>
 801011e:	b1b0      	cbz	r0, 801014e <_vfiprintf_r+0x156>
 8010120:	9207      	str	r2, [sp, #28]
 8010122:	e014      	b.n	801014e <_vfiprintf_r+0x156>
 8010124:	eba0 0308 	sub.w	r3, r0, r8
 8010128:	fa09 f303 	lsl.w	r3, r9, r3
 801012c:	4313      	orrs	r3, r2
 801012e:	46a2      	mov	sl, r4
 8010130:	9304      	str	r3, [sp, #16]
 8010132:	e7d2      	b.n	80100da <_vfiprintf_r+0xe2>
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	1d19      	adds	r1, r3, #4
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	9103      	str	r1, [sp, #12]
 801013c:	2b00      	cmp	r3, #0
 801013e:	bfbb      	ittet	lt
 8010140:	425b      	neglt	r3, r3
 8010142:	f042 0202 	orrlt.w	r2, r2, #2
 8010146:	9307      	strge	r3, [sp, #28]
 8010148:	9307      	strlt	r3, [sp, #28]
 801014a:	bfb8      	it	lt
 801014c:	9204      	strlt	r2, [sp, #16]
 801014e:	7823      	ldrb	r3, [r4, #0]
 8010150:	2b2e      	cmp	r3, #46	; 0x2e
 8010152:	d10c      	bne.n	801016e <_vfiprintf_r+0x176>
 8010154:	7863      	ldrb	r3, [r4, #1]
 8010156:	2b2a      	cmp	r3, #42	; 0x2a
 8010158:	d135      	bne.n	80101c6 <_vfiprintf_r+0x1ce>
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	3402      	adds	r4, #2
 801015e:	1d1a      	adds	r2, r3, #4
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	9203      	str	r2, [sp, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	bfb8      	it	lt
 8010168:	f04f 33ff 	movlt.w	r3, #4294967295
 801016c:	9305      	str	r3, [sp, #20]
 801016e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010254 <_vfiprintf_r+0x25c>
 8010172:	2203      	movs	r2, #3
 8010174:	4650      	mov	r0, sl
 8010176:	7821      	ldrb	r1, [r4, #0]
 8010178:	f7ff f834 	bl	800f1e4 <memchr>
 801017c:	b140      	cbz	r0, 8010190 <_vfiprintf_r+0x198>
 801017e:	2340      	movs	r3, #64	; 0x40
 8010180:	eba0 000a 	sub.w	r0, r0, sl
 8010184:	fa03 f000 	lsl.w	r0, r3, r0
 8010188:	9b04      	ldr	r3, [sp, #16]
 801018a:	3401      	adds	r4, #1
 801018c:	4303      	orrs	r3, r0
 801018e:	9304      	str	r3, [sp, #16]
 8010190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010194:	2206      	movs	r2, #6
 8010196:	482c      	ldr	r0, [pc, #176]	; (8010248 <_vfiprintf_r+0x250>)
 8010198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801019c:	f7ff f822 	bl	800f1e4 <memchr>
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d03f      	beq.n	8010224 <_vfiprintf_r+0x22c>
 80101a4:	4b29      	ldr	r3, [pc, #164]	; (801024c <_vfiprintf_r+0x254>)
 80101a6:	bb1b      	cbnz	r3, 80101f0 <_vfiprintf_r+0x1f8>
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	3307      	adds	r3, #7
 80101ac:	f023 0307 	bic.w	r3, r3, #7
 80101b0:	3308      	adds	r3, #8
 80101b2:	9303      	str	r3, [sp, #12]
 80101b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b6:	443b      	add	r3, r7
 80101b8:	9309      	str	r3, [sp, #36]	; 0x24
 80101ba:	e767      	b.n	801008c <_vfiprintf_r+0x94>
 80101bc:	460c      	mov	r4, r1
 80101be:	2001      	movs	r0, #1
 80101c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80101c4:	e7a5      	b.n	8010112 <_vfiprintf_r+0x11a>
 80101c6:	2300      	movs	r3, #0
 80101c8:	f04f 0c0a 	mov.w	ip, #10
 80101cc:	4619      	mov	r1, r3
 80101ce:	3401      	adds	r4, #1
 80101d0:	9305      	str	r3, [sp, #20]
 80101d2:	4620      	mov	r0, r4
 80101d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101d8:	3a30      	subs	r2, #48	; 0x30
 80101da:	2a09      	cmp	r2, #9
 80101dc:	d903      	bls.n	80101e6 <_vfiprintf_r+0x1ee>
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d0c5      	beq.n	801016e <_vfiprintf_r+0x176>
 80101e2:	9105      	str	r1, [sp, #20]
 80101e4:	e7c3      	b.n	801016e <_vfiprintf_r+0x176>
 80101e6:	4604      	mov	r4, r0
 80101e8:	2301      	movs	r3, #1
 80101ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80101ee:	e7f0      	b.n	80101d2 <_vfiprintf_r+0x1da>
 80101f0:	ab03      	add	r3, sp, #12
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	462a      	mov	r2, r5
 80101f6:	4630      	mov	r0, r6
 80101f8:	4b15      	ldr	r3, [pc, #84]	; (8010250 <_vfiprintf_r+0x258>)
 80101fa:	a904      	add	r1, sp, #16
 80101fc:	f7fc f908 	bl	800c410 <_printf_float>
 8010200:	4607      	mov	r7, r0
 8010202:	1c78      	adds	r0, r7, #1
 8010204:	d1d6      	bne.n	80101b4 <_vfiprintf_r+0x1bc>
 8010206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010208:	07d9      	lsls	r1, r3, #31
 801020a:	d405      	bmi.n	8010218 <_vfiprintf_r+0x220>
 801020c:	89ab      	ldrh	r3, [r5, #12]
 801020e:	059a      	lsls	r2, r3, #22
 8010210:	d402      	bmi.n	8010218 <_vfiprintf_r+0x220>
 8010212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010214:	f7ff fe88 	bl	800ff28 <__retarget_lock_release_recursive>
 8010218:	89ab      	ldrh	r3, [r5, #12]
 801021a:	065b      	lsls	r3, r3, #25
 801021c:	f53f af12 	bmi.w	8010044 <_vfiprintf_r+0x4c>
 8010220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010222:	e711      	b.n	8010048 <_vfiprintf_r+0x50>
 8010224:	ab03      	add	r3, sp, #12
 8010226:	9300      	str	r3, [sp, #0]
 8010228:	462a      	mov	r2, r5
 801022a:	4630      	mov	r0, r6
 801022c:	4b08      	ldr	r3, [pc, #32]	; (8010250 <_vfiprintf_r+0x258>)
 801022e:	a904      	add	r1, sp, #16
 8010230:	f7fc fb8a 	bl	800c948 <_printf_i>
 8010234:	e7e4      	b.n	8010200 <_vfiprintf_r+0x208>
 8010236:	bf00      	nop
 8010238:	08011f0c 	.word	0x08011f0c
 801023c:	08011f2c 	.word	0x08011f2c
 8010240:	08011eec 	.word	0x08011eec
 8010244:	08011e9c 	.word	0x08011e9c
 8010248:	08011ea6 	.word	0x08011ea6
 801024c:	0800c411 	.word	0x0800c411
 8010250:	0800ffd5 	.word	0x0800ffd5
 8010254:	08011ea2 	.word	0x08011ea2

08010258 <__swbuf_r>:
 8010258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025a:	460e      	mov	r6, r1
 801025c:	4614      	mov	r4, r2
 801025e:	4605      	mov	r5, r0
 8010260:	b118      	cbz	r0, 801026a <__swbuf_r+0x12>
 8010262:	6983      	ldr	r3, [r0, #24]
 8010264:	b90b      	cbnz	r3, 801026a <__swbuf_r+0x12>
 8010266:	f000 f9d9 	bl	801061c <__sinit>
 801026a:	4b21      	ldr	r3, [pc, #132]	; (80102f0 <__swbuf_r+0x98>)
 801026c:	429c      	cmp	r4, r3
 801026e:	d12b      	bne.n	80102c8 <__swbuf_r+0x70>
 8010270:	686c      	ldr	r4, [r5, #4]
 8010272:	69a3      	ldr	r3, [r4, #24]
 8010274:	60a3      	str	r3, [r4, #8]
 8010276:	89a3      	ldrh	r3, [r4, #12]
 8010278:	071a      	lsls	r2, r3, #28
 801027a:	d52f      	bpl.n	80102dc <__swbuf_r+0x84>
 801027c:	6923      	ldr	r3, [r4, #16]
 801027e:	b36b      	cbz	r3, 80102dc <__swbuf_r+0x84>
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	6820      	ldr	r0, [r4, #0]
 8010284:	b2f6      	uxtb	r6, r6
 8010286:	1ac0      	subs	r0, r0, r3
 8010288:	6963      	ldr	r3, [r4, #20]
 801028a:	4637      	mov	r7, r6
 801028c:	4283      	cmp	r3, r0
 801028e:	dc04      	bgt.n	801029a <__swbuf_r+0x42>
 8010290:	4621      	mov	r1, r4
 8010292:	4628      	mov	r0, r5
 8010294:	f000 f92e 	bl	80104f4 <_fflush_r>
 8010298:	bb30      	cbnz	r0, 80102e8 <__swbuf_r+0x90>
 801029a:	68a3      	ldr	r3, [r4, #8]
 801029c:	3001      	adds	r0, #1
 801029e:	3b01      	subs	r3, #1
 80102a0:	60a3      	str	r3, [r4, #8]
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	6022      	str	r2, [r4, #0]
 80102a8:	701e      	strb	r6, [r3, #0]
 80102aa:	6963      	ldr	r3, [r4, #20]
 80102ac:	4283      	cmp	r3, r0
 80102ae:	d004      	beq.n	80102ba <__swbuf_r+0x62>
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	07db      	lsls	r3, r3, #31
 80102b4:	d506      	bpl.n	80102c4 <__swbuf_r+0x6c>
 80102b6:	2e0a      	cmp	r6, #10
 80102b8:	d104      	bne.n	80102c4 <__swbuf_r+0x6c>
 80102ba:	4621      	mov	r1, r4
 80102bc:	4628      	mov	r0, r5
 80102be:	f000 f919 	bl	80104f4 <_fflush_r>
 80102c2:	b988      	cbnz	r0, 80102e8 <__swbuf_r+0x90>
 80102c4:	4638      	mov	r0, r7
 80102c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102c8:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <__swbuf_r+0x9c>)
 80102ca:	429c      	cmp	r4, r3
 80102cc:	d101      	bne.n	80102d2 <__swbuf_r+0x7a>
 80102ce:	68ac      	ldr	r4, [r5, #8]
 80102d0:	e7cf      	b.n	8010272 <__swbuf_r+0x1a>
 80102d2:	4b09      	ldr	r3, [pc, #36]	; (80102f8 <__swbuf_r+0xa0>)
 80102d4:	429c      	cmp	r4, r3
 80102d6:	bf08      	it	eq
 80102d8:	68ec      	ldreq	r4, [r5, #12]
 80102da:	e7ca      	b.n	8010272 <__swbuf_r+0x1a>
 80102dc:	4621      	mov	r1, r4
 80102de:	4628      	mov	r0, r5
 80102e0:	f000 f80c 	bl	80102fc <__swsetup_r>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d0cb      	beq.n	8010280 <__swbuf_r+0x28>
 80102e8:	f04f 37ff 	mov.w	r7, #4294967295
 80102ec:	e7ea      	b.n	80102c4 <__swbuf_r+0x6c>
 80102ee:	bf00      	nop
 80102f0:	08011f0c 	.word	0x08011f0c
 80102f4:	08011f2c 	.word	0x08011f2c
 80102f8:	08011eec 	.word	0x08011eec

080102fc <__swsetup_r>:
 80102fc:	4b32      	ldr	r3, [pc, #200]	; (80103c8 <__swsetup_r+0xcc>)
 80102fe:	b570      	push	{r4, r5, r6, lr}
 8010300:	681d      	ldr	r5, [r3, #0]
 8010302:	4606      	mov	r6, r0
 8010304:	460c      	mov	r4, r1
 8010306:	b125      	cbz	r5, 8010312 <__swsetup_r+0x16>
 8010308:	69ab      	ldr	r3, [r5, #24]
 801030a:	b913      	cbnz	r3, 8010312 <__swsetup_r+0x16>
 801030c:	4628      	mov	r0, r5
 801030e:	f000 f985 	bl	801061c <__sinit>
 8010312:	4b2e      	ldr	r3, [pc, #184]	; (80103cc <__swsetup_r+0xd0>)
 8010314:	429c      	cmp	r4, r3
 8010316:	d10f      	bne.n	8010338 <__swsetup_r+0x3c>
 8010318:	686c      	ldr	r4, [r5, #4]
 801031a:	89a3      	ldrh	r3, [r4, #12]
 801031c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010320:	0719      	lsls	r1, r3, #28
 8010322:	d42c      	bmi.n	801037e <__swsetup_r+0x82>
 8010324:	06dd      	lsls	r5, r3, #27
 8010326:	d411      	bmi.n	801034c <__swsetup_r+0x50>
 8010328:	2309      	movs	r3, #9
 801032a:	6033      	str	r3, [r6, #0]
 801032c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010330:	f04f 30ff 	mov.w	r0, #4294967295
 8010334:	81a3      	strh	r3, [r4, #12]
 8010336:	e03e      	b.n	80103b6 <__swsetup_r+0xba>
 8010338:	4b25      	ldr	r3, [pc, #148]	; (80103d0 <__swsetup_r+0xd4>)
 801033a:	429c      	cmp	r4, r3
 801033c:	d101      	bne.n	8010342 <__swsetup_r+0x46>
 801033e:	68ac      	ldr	r4, [r5, #8]
 8010340:	e7eb      	b.n	801031a <__swsetup_r+0x1e>
 8010342:	4b24      	ldr	r3, [pc, #144]	; (80103d4 <__swsetup_r+0xd8>)
 8010344:	429c      	cmp	r4, r3
 8010346:	bf08      	it	eq
 8010348:	68ec      	ldreq	r4, [r5, #12]
 801034a:	e7e6      	b.n	801031a <__swsetup_r+0x1e>
 801034c:	0758      	lsls	r0, r3, #29
 801034e:	d512      	bpl.n	8010376 <__swsetup_r+0x7a>
 8010350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010352:	b141      	cbz	r1, 8010366 <__swsetup_r+0x6a>
 8010354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010358:	4299      	cmp	r1, r3
 801035a:	d002      	beq.n	8010362 <__swsetup_r+0x66>
 801035c:	4630      	mov	r0, r6
 801035e:	f7fb ff13 	bl	800c188 <_free_r>
 8010362:	2300      	movs	r3, #0
 8010364:	6363      	str	r3, [r4, #52]	; 0x34
 8010366:	89a3      	ldrh	r3, [r4, #12]
 8010368:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801036c:	81a3      	strh	r3, [r4, #12]
 801036e:	2300      	movs	r3, #0
 8010370:	6063      	str	r3, [r4, #4]
 8010372:	6923      	ldr	r3, [r4, #16]
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	89a3      	ldrh	r3, [r4, #12]
 8010378:	f043 0308 	orr.w	r3, r3, #8
 801037c:	81a3      	strh	r3, [r4, #12]
 801037e:	6923      	ldr	r3, [r4, #16]
 8010380:	b94b      	cbnz	r3, 8010396 <__swsetup_r+0x9a>
 8010382:	89a3      	ldrh	r3, [r4, #12]
 8010384:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801038c:	d003      	beq.n	8010396 <__swsetup_r+0x9a>
 801038e:	4621      	mov	r1, r4
 8010390:	4630      	mov	r0, r6
 8010392:	f000 fa05 	bl	80107a0 <__smakebuf_r>
 8010396:	89a0      	ldrh	r0, [r4, #12]
 8010398:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801039c:	f010 0301 	ands.w	r3, r0, #1
 80103a0:	d00a      	beq.n	80103b8 <__swsetup_r+0xbc>
 80103a2:	2300      	movs	r3, #0
 80103a4:	60a3      	str	r3, [r4, #8]
 80103a6:	6963      	ldr	r3, [r4, #20]
 80103a8:	425b      	negs	r3, r3
 80103aa:	61a3      	str	r3, [r4, #24]
 80103ac:	6923      	ldr	r3, [r4, #16]
 80103ae:	b943      	cbnz	r3, 80103c2 <__swsetup_r+0xc6>
 80103b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80103b4:	d1ba      	bne.n	801032c <__swsetup_r+0x30>
 80103b6:	bd70      	pop	{r4, r5, r6, pc}
 80103b8:	0781      	lsls	r1, r0, #30
 80103ba:	bf58      	it	pl
 80103bc:	6963      	ldrpl	r3, [r4, #20]
 80103be:	60a3      	str	r3, [r4, #8]
 80103c0:	e7f4      	b.n	80103ac <__swsetup_r+0xb0>
 80103c2:	2000      	movs	r0, #0
 80103c4:	e7f7      	b.n	80103b6 <__swsetup_r+0xba>
 80103c6:	bf00      	nop
 80103c8:	2000004c 	.word	0x2000004c
 80103cc:	08011f0c 	.word	0x08011f0c
 80103d0:	08011f2c 	.word	0x08011f2c
 80103d4:	08011eec 	.word	0x08011eec

080103d8 <abort>:
 80103d8:	2006      	movs	r0, #6
 80103da:	b508      	push	{r3, lr}
 80103dc:	f000 fa50 	bl	8010880 <raise>
 80103e0:	2001      	movs	r0, #1
 80103e2:	f7f6 ff50 	bl	8007286 <_exit>
	...

080103e8 <__sflush_r>:
 80103e8:	898a      	ldrh	r2, [r1, #12]
 80103ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ee:	4605      	mov	r5, r0
 80103f0:	0710      	lsls	r0, r2, #28
 80103f2:	460c      	mov	r4, r1
 80103f4:	d458      	bmi.n	80104a8 <__sflush_r+0xc0>
 80103f6:	684b      	ldr	r3, [r1, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	dc05      	bgt.n	8010408 <__sflush_r+0x20>
 80103fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103fe:	2b00      	cmp	r3, #0
 8010400:	dc02      	bgt.n	8010408 <__sflush_r+0x20>
 8010402:	2000      	movs	r0, #0
 8010404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801040a:	2e00      	cmp	r6, #0
 801040c:	d0f9      	beq.n	8010402 <__sflush_r+0x1a>
 801040e:	2300      	movs	r3, #0
 8010410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010414:	682f      	ldr	r7, [r5, #0]
 8010416:	602b      	str	r3, [r5, #0]
 8010418:	d032      	beq.n	8010480 <__sflush_r+0x98>
 801041a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801041c:	89a3      	ldrh	r3, [r4, #12]
 801041e:	075a      	lsls	r2, r3, #29
 8010420:	d505      	bpl.n	801042e <__sflush_r+0x46>
 8010422:	6863      	ldr	r3, [r4, #4]
 8010424:	1ac0      	subs	r0, r0, r3
 8010426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010428:	b10b      	cbz	r3, 801042e <__sflush_r+0x46>
 801042a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801042c:	1ac0      	subs	r0, r0, r3
 801042e:	2300      	movs	r3, #0
 8010430:	4602      	mov	r2, r0
 8010432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010434:	4628      	mov	r0, r5
 8010436:	6a21      	ldr	r1, [r4, #32]
 8010438:	47b0      	blx	r6
 801043a:	1c43      	adds	r3, r0, #1
 801043c:	89a3      	ldrh	r3, [r4, #12]
 801043e:	d106      	bne.n	801044e <__sflush_r+0x66>
 8010440:	6829      	ldr	r1, [r5, #0]
 8010442:	291d      	cmp	r1, #29
 8010444:	d82c      	bhi.n	80104a0 <__sflush_r+0xb8>
 8010446:	4a2a      	ldr	r2, [pc, #168]	; (80104f0 <__sflush_r+0x108>)
 8010448:	40ca      	lsrs	r2, r1
 801044a:	07d6      	lsls	r6, r2, #31
 801044c:	d528      	bpl.n	80104a0 <__sflush_r+0xb8>
 801044e:	2200      	movs	r2, #0
 8010450:	6062      	str	r2, [r4, #4]
 8010452:	6922      	ldr	r2, [r4, #16]
 8010454:	04d9      	lsls	r1, r3, #19
 8010456:	6022      	str	r2, [r4, #0]
 8010458:	d504      	bpl.n	8010464 <__sflush_r+0x7c>
 801045a:	1c42      	adds	r2, r0, #1
 801045c:	d101      	bne.n	8010462 <__sflush_r+0x7a>
 801045e:	682b      	ldr	r3, [r5, #0]
 8010460:	b903      	cbnz	r3, 8010464 <__sflush_r+0x7c>
 8010462:	6560      	str	r0, [r4, #84]	; 0x54
 8010464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010466:	602f      	str	r7, [r5, #0]
 8010468:	2900      	cmp	r1, #0
 801046a:	d0ca      	beq.n	8010402 <__sflush_r+0x1a>
 801046c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010470:	4299      	cmp	r1, r3
 8010472:	d002      	beq.n	801047a <__sflush_r+0x92>
 8010474:	4628      	mov	r0, r5
 8010476:	f7fb fe87 	bl	800c188 <_free_r>
 801047a:	2000      	movs	r0, #0
 801047c:	6360      	str	r0, [r4, #52]	; 0x34
 801047e:	e7c1      	b.n	8010404 <__sflush_r+0x1c>
 8010480:	6a21      	ldr	r1, [r4, #32]
 8010482:	2301      	movs	r3, #1
 8010484:	4628      	mov	r0, r5
 8010486:	47b0      	blx	r6
 8010488:	1c41      	adds	r1, r0, #1
 801048a:	d1c7      	bne.n	801041c <__sflush_r+0x34>
 801048c:	682b      	ldr	r3, [r5, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d0c4      	beq.n	801041c <__sflush_r+0x34>
 8010492:	2b1d      	cmp	r3, #29
 8010494:	d001      	beq.n	801049a <__sflush_r+0xb2>
 8010496:	2b16      	cmp	r3, #22
 8010498:	d101      	bne.n	801049e <__sflush_r+0xb6>
 801049a:	602f      	str	r7, [r5, #0]
 801049c:	e7b1      	b.n	8010402 <__sflush_r+0x1a>
 801049e:	89a3      	ldrh	r3, [r4, #12]
 80104a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104a4:	81a3      	strh	r3, [r4, #12]
 80104a6:	e7ad      	b.n	8010404 <__sflush_r+0x1c>
 80104a8:	690f      	ldr	r7, [r1, #16]
 80104aa:	2f00      	cmp	r7, #0
 80104ac:	d0a9      	beq.n	8010402 <__sflush_r+0x1a>
 80104ae:	0793      	lsls	r3, r2, #30
 80104b0:	bf18      	it	ne
 80104b2:	2300      	movne	r3, #0
 80104b4:	680e      	ldr	r6, [r1, #0]
 80104b6:	bf08      	it	eq
 80104b8:	694b      	ldreq	r3, [r1, #20]
 80104ba:	eba6 0807 	sub.w	r8, r6, r7
 80104be:	600f      	str	r7, [r1, #0]
 80104c0:	608b      	str	r3, [r1, #8]
 80104c2:	f1b8 0f00 	cmp.w	r8, #0
 80104c6:	dd9c      	ble.n	8010402 <__sflush_r+0x1a>
 80104c8:	4643      	mov	r3, r8
 80104ca:	463a      	mov	r2, r7
 80104cc:	4628      	mov	r0, r5
 80104ce:	6a21      	ldr	r1, [r4, #32]
 80104d0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80104d2:	47b0      	blx	r6
 80104d4:	2800      	cmp	r0, #0
 80104d6:	dc06      	bgt.n	80104e6 <__sflush_r+0xfe>
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	f04f 30ff 	mov.w	r0, #4294967295
 80104de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104e2:	81a3      	strh	r3, [r4, #12]
 80104e4:	e78e      	b.n	8010404 <__sflush_r+0x1c>
 80104e6:	4407      	add	r7, r0
 80104e8:	eba8 0800 	sub.w	r8, r8, r0
 80104ec:	e7e9      	b.n	80104c2 <__sflush_r+0xda>
 80104ee:	bf00      	nop
 80104f0:	20400001 	.word	0x20400001

080104f4 <_fflush_r>:
 80104f4:	b538      	push	{r3, r4, r5, lr}
 80104f6:	690b      	ldr	r3, [r1, #16]
 80104f8:	4605      	mov	r5, r0
 80104fa:	460c      	mov	r4, r1
 80104fc:	b913      	cbnz	r3, 8010504 <_fflush_r+0x10>
 80104fe:	2500      	movs	r5, #0
 8010500:	4628      	mov	r0, r5
 8010502:	bd38      	pop	{r3, r4, r5, pc}
 8010504:	b118      	cbz	r0, 801050e <_fflush_r+0x1a>
 8010506:	6983      	ldr	r3, [r0, #24]
 8010508:	b90b      	cbnz	r3, 801050e <_fflush_r+0x1a>
 801050a:	f000 f887 	bl	801061c <__sinit>
 801050e:	4b14      	ldr	r3, [pc, #80]	; (8010560 <_fflush_r+0x6c>)
 8010510:	429c      	cmp	r4, r3
 8010512:	d11b      	bne.n	801054c <_fflush_r+0x58>
 8010514:	686c      	ldr	r4, [r5, #4]
 8010516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d0ef      	beq.n	80104fe <_fflush_r+0xa>
 801051e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010520:	07d0      	lsls	r0, r2, #31
 8010522:	d404      	bmi.n	801052e <_fflush_r+0x3a>
 8010524:	0599      	lsls	r1, r3, #22
 8010526:	d402      	bmi.n	801052e <_fflush_r+0x3a>
 8010528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801052a:	f7ff fcfc 	bl	800ff26 <__retarget_lock_acquire_recursive>
 801052e:	4628      	mov	r0, r5
 8010530:	4621      	mov	r1, r4
 8010532:	f7ff ff59 	bl	80103e8 <__sflush_r>
 8010536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010538:	4605      	mov	r5, r0
 801053a:	07da      	lsls	r2, r3, #31
 801053c:	d4e0      	bmi.n	8010500 <_fflush_r+0xc>
 801053e:	89a3      	ldrh	r3, [r4, #12]
 8010540:	059b      	lsls	r3, r3, #22
 8010542:	d4dd      	bmi.n	8010500 <_fflush_r+0xc>
 8010544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010546:	f7ff fcef 	bl	800ff28 <__retarget_lock_release_recursive>
 801054a:	e7d9      	b.n	8010500 <_fflush_r+0xc>
 801054c:	4b05      	ldr	r3, [pc, #20]	; (8010564 <_fflush_r+0x70>)
 801054e:	429c      	cmp	r4, r3
 8010550:	d101      	bne.n	8010556 <_fflush_r+0x62>
 8010552:	68ac      	ldr	r4, [r5, #8]
 8010554:	e7df      	b.n	8010516 <_fflush_r+0x22>
 8010556:	4b04      	ldr	r3, [pc, #16]	; (8010568 <_fflush_r+0x74>)
 8010558:	429c      	cmp	r4, r3
 801055a:	bf08      	it	eq
 801055c:	68ec      	ldreq	r4, [r5, #12]
 801055e:	e7da      	b.n	8010516 <_fflush_r+0x22>
 8010560:	08011f0c 	.word	0x08011f0c
 8010564:	08011f2c 	.word	0x08011f2c
 8010568:	08011eec 	.word	0x08011eec

0801056c <std>:
 801056c:	2300      	movs	r3, #0
 801056e:	b510      	push	{r4, lr}
 8010570:	4604      	mov	r4, r0
 8010572:	e9c0 3300 	strd	r3, r3, [r0]
 8010576:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801057a:	6083      	str	r3, [r0, #8]
 801057c:	8181      	strh	r1, [r0, #12]
 801057e:	6643      	str	r3, [r0, #100]	; 0x64
 8010580:	81c2      	strh	r2, [r0, #14]
 8010582:	6183      	str	r3, [r0, #24]
 8010584:	4619      	mov	r1, r3
 8010586:	2208      	movs	r2, #8
 8010588:	305c      	adds	r0, #92	; 0x5c
 801058a:	f7fb fdf5 	bl	800c178 <memset>
 801058e:	4b05      	ldr	r3, [pc, #20]	; (80105a4 <std+0x38>)
 8010590:	6224      	str	r4, [r4, #32]
 8010592:	6263      	str	r3, [r4, #36]	; 0x24
 8010594:	4b04      	ldr	r3, [pc, #16]	; (80105a8 <std+0x3c>)
 8010596:	62a3      	str	r3, [r4, #40]	; 0x28
 8010598:	4b04      	ldr	r3, [pc, #16]	; (80105ac <std+0x40>)
 801059a:	62e3      	str	r3, [r4, #44]	; 0x2c
 801059c:	4b04      	ldr	r3, [pc, #16]	; (80105b0 <std+0x44>)
 801059e:	6323      	str	r3, [r4, #48]	; 0x30
 80105a0:	bd10      	pop	{r4, pc}
 80105a2:	bf00      	nop
 80105a4:	080108b9 	.word	0x080108b9
 80105a8:	080108db 	.word	0x080108db
 80105ac:	08010913 	.word	0x08010913
 80105b0:	08010937 	.word	0x08010937

080105b4 <_cleanup_r>:
 80105b4:	4901      	ldr	r1, [pc, #4]	; (80105bc <_cleanup_r+0x8>)
 80105b6:	f000 b8af 	b.w	8010718 <_fwalk_reent>
 80105ba:	bf00      	nop
 80105bc:	080104f5 	.word	0x080104f5

080105c0 <__sfmoreglue>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	2568      	movs	r5, #104	; 0x68
 80105c4:	1e4a      	subs	r2, r1, #1
 80105c6:	4355      	muls	r5, r2
 80105c8:	460e      	mov	r6, r1
 80105ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80105ce:	f7fb fe27 	bl	800c220 <_malloc_r>
 80105d2:	4604      	mov	r4, r0
 80105d4:	b140      	cbz	r0, 80105e8 <__sfmoreglue+0x28>
 80105d6:	2100      	movs	r1, #0
 80105d8:	e9c0 1600 	strd	r1, r6, [r0]
 80105dc:	300c      	adds	r0, #12
 80105de:	60a0      	str	r0, [r4, #8]
 80105e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80105e4:	f7fb fdc8 	bl	800c178 <memset>
 80105e8:	4620      	mov	r0, r4
 80105ea:	bd70      	pop	{r4, r5, r6, pc}

080105ec <__sfp_lock_acquire>:
 80105ec:	4801      	ldr	r0, [pc, #4]	; (80105f4 <__sfp_lock_acquire+0x8>)
 80105ee:	f7ff bc9a 	b.w	800ff26 <__retarget_lock_acquire_recursive>
 80105f2:	bf00      	nop
 80105f4:	20000d24 	.word	0x20000d24

080105f8 <__sfp_lock_release>:
 80105f8:	4801      	ldr	r0, [pc, #4]	; (8010600 <__sfp_lock_release+0x8>)
 80105fa:	f7ff bc95 	b.w	800ff28 <__retarget_lock_release_recursive>
 80105fe:	bf00      	nop
 8010600:	20000d24 	.word	0x20000d24

08010604 <__sinit_lock_acquire>:
 8010604:	4801      	ldr	r0, [pc, #4]	; (801060c <__sinit_lock_acquire+0x8>)
 8010606:	f7ff bc8e 	b.w	800ff26 <__retarget_lock_acquire_recursive>
 801060a:	bf00      	nop
 801060c:	20000d1f 	.word	0x20000d1f

08010610 <__sinit_lock_release>:
 8010610:	4801      	ldr	r0, [pc, #4]	; (8010618 <__sinit_lock_release+0x8>)
 8010612:	f7ff bc89 	b.w	800ff28 <__retarget_lock_release_recursive>
 8010616:	bf00      	nop
 8010618:	20000d1f 	.word	0x20000d1f

0801061c <__sinit>:
 801061c:	b510      	push	{r4, lr}
 801061e:	4604      	mov	r4, r0
 8010620:	f7ff fff0 	bl	8010604 <__sinit_lock_acquire>
 8010624:	69a3      	ldr	r3, [r4, #24]
 8010626:	b11b      	cbz	r3, 8010630 <__sinit+0x14>
 8010628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801062c:	f7ff bff0 	b.w	8010610 <__sinit_lock_release>
 8010630:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010634:	6523      	str	r3, [r4, #80]	; 0x50
 8010636:	4b13      	ldr	r3, [pc, #76]	; (8010684 <__sinit+0x68>)
 8010638:	4a13      	ldr	r2, [pc, #76]	; (8010688 <__sinit+0x6c>)
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	62a2      	str	r2, [r4, #40]	; 0x28
 801063e:	42a3      	cmp	r3, r4
 8010640:	bf08      	it	eq
 8010642:	2301      	moveq	r3, #1
 8010644:	4620      	mov	r0, r4
 8010646:	bf08      	it	eq
 8010648:	61a3      	streq	r3, [r4, #24]
 801064a:	f000 f81f 	bl	801068c <__sfp>
 801064e:	6060      	str	r0, [r4, #4]
 8010650:	4620      	mov	r0, r4
 8010652:	f000 f81b 	bl	801068c <__sfp>
 8010656:	60a0      	str	r0, [r4, #8]
 8010658:	4620      	mov	r0, r4
 801065a:	f000 f817 	bl	801068c <__sfp>
 801065e:	2200      	movs	r2, #0
 8010660:	2104      	movs	r1, #4
 8010662:	60e0      	str	r0, [r4, #12]
 8010664:	6860      	ldr	r0, [r4, #4]
 8010666:	f7ff ff81 	bl	801056c <std>
 801066a:	2201      	movs	r2, #1
 801066c:	2109      	movs	r1, #9
 801066e:	68a0      	ldr	r0, [r4, #8]
 8010670:	f7ff ff7c 	bl	801056c <std>
 8010674:	2202      	movs	r2, #2
 8010676:	2112      	movs	r1, #18
 8010678:	68e0      	ldr	r0, [r4, #12]
 801067a:	f7ff ff77 	bl	801056c <std>
 801067e:	2301      	movs	r3, #1
 8010680:	61a3      	str	r3, [r4, #24]
 8010682:	e7d1      	b.n	8010628 <__sinit+0xc>
 8010684:	08011b78 	.word	0x08011b78
 8010688:	080105b5 	.word	0x080105b5

0801068c <__sfp>:
 801068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801068e:	4607      	mov	r7, r0
 8010690:	f7ff ffac 	bl	80105ec <__sfp_lock_acquire>
 8010694:	4b1e      	ldr	r3, [pc, #120]	; (8010710 <__sfp+0x84>)
 8010696:	681e      	ldr	r6, [r3, #0]
 8010698:	69b3      	ldr	r3, [r6, #24]
 801069a:	b913      	cbnz	r3, 80106a2 <__sfp+0x16>
 801069c:	4630      	mov	r0, r6
 801069e:	f7ff ffbd 	bl	801061c <__sinit>
 80106a2:	3648      	adds	r6, #72	; 0x48
 80106a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80106a8:	3b01      	subs	r3, #1
 80106aa:	d503      	bpl.n	80106b4 <__sfp+0x28>
 80106ac:	6833      	ldr	r3, [r6, #0]
 80106ae:	b30b      	cbz	r3, 80106f4 <__sfp+0x68>
 80106b0:	6836      	ldr	r6, [r6, #0]
 80106b2:	e7f7      	b.n	80106a4 <__sfp+0x18>
 80106b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80106b8:	b9d5      	cbnz	r5, 80106f0 <__sfp+0x64>
 80106ba:	4b16      	ldr	r3, [pc, #88]	; (8010714 <__sfp+0x88>)
 80106bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80106c0:	60e3      	str	r3, [r4, #12]
 80106c2:	6665      	str	r5, [r4, #100]	; 0x64
 80106c4:	f7ff fc2e 	bl	800ff24 <__retarget_lock_init_recursive>
 80106c8:	f7ff ff96 	bl	80105f8 <__sfp_lock_release>
 80106cc:	2208      	movs	r2, #8
 80106ce:	4629      	mov	r1, r5
 80106d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80106d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80106d8:	6025      	str	r5, [r4, #0]
 80106da:	61a5      	str	r5, [r4, #24]
 80106dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106e0:	f7fb fd4a 	bl	800c178 <memset>
 80106e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80106e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80106ec:	4620      	mov	r0, r4
 80106ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106f0:	3468      	adds	r4, #104	; 0x68
 80106f2:	e7d9      	b.n	80106a8 <__sfp+0x1c>
 80106f4:	2104      	movs	r1, #4
 80106f6:	4638      	mov	r0, r7
 80106f8:	f7ff ff62 	bl	80105c0 <__sfmoreglue>
 80106fc:	4604      	mov	r4, r0
 80106fe:	6030      	str	r0, [r6, #0]
 8010700:	2800      	cmp	r0, #0
 8010702:	d1d5      	bne.n	80106b0 <__sfp+0x24>
 8010704:	f7ff ff78 	bl	80105f8 <__sfp_lock_release>
 8010708:	230c      	movs	r3, #12
 801070a:	603b      	str	r3, [r7, #0]
 801070c:	e7ee      	b.n	80106ec <__sfp+0x60>
 801070e:	bf00      	nop
 8010710:	08011b78 	.word	0x08011b78
 8010714:	ffff0001 	.word	0xffff0001

08010718 <_fwalk_reent>:
 8010718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801071c:	4606      	mov	r6, r0
 801071e:	4688      	mov	r8, r1
 8010720:	2700      	movs	r7, #0
 8010722:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801072a:	f1b9 0901 	subs.w	r9, r9, #1
 801072e:	d505      	bpl.n	801073c <_fwalk_reent+0x24>
 8010730:	6824      	ldr	r4, [r4, #0]
 8010732:	2c00      	cmp	r4, #0
 8010734:	d1f7      	bne.n	8010726 <_fwalk_reent+0xe>
 8010736:	4638      	mov	r0, r7
 8010738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801073c:	89ab      	ldrh	r3, [r5, #12]
 801073e:	2b01      	cmp	r3, #1
 8010740:	d907      	bls.n	8010752 <_fwalk_reent+0x3a>
 8010742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010746:	3301      	adds	r3, #1
 8010748:	d003      	beq.n	8010752 <_fwalk_reent+0x3a>
 801074a:	4629      	mov	r1, r5
 801074c:	4630      	mov	r0, r6
 801074e:	47c0      	blx	r8
 8010750:	4307      	orrs	r7, r0
 8010752:	3568      	adds	r5, #104	; 0x68
 8010754:	e7e9      	b.n	801072a <_fwalk_reent+0x12>

08010756 <__swhatbuf_r>:
 8010756:	b570      	push	{r4, r5, r6, lr}
 8010758:	460e      	mov	r6, r1
 801075a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801075e:	4614      	mov	r4, r2
 8010760:	2900      	cmp	r1, #0
 8010762:	461d      	mov	r5, r3
 8010764:	b096      	sub	sp, #88	; 0x58
 8010766:	da07      	bge.n	8010778 <__swhatbuf_r+0x22>
 8010768:	2300      	movs	r3, #0
 801076a:	602b      	str	r3, [r5, #0]
 801076c:	89b3      	ldrh	r3, [r6, #12]
 801076e:	061a      	lsls	r2, r3, #24
 8010770:	d410      	bmi.n	8010794 <__swhatbuf_r+0x3e>
 8010772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010776:	e00e      	b.n	8010796 <__swhatbuf_r+0x40>
 8010778:	466a      	mov	r2, sp
 801077a:	f000 f903 	bl	8010984 <_fstat_r>
 801077e:	2800      	cmp	r0, #0
 8010780:	dbf2      	blt.n	8010768 <__swhatbuf_r+0x12>
 8010782:	9a01      	ldr	r2, [sp, #4]
 8010784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801078c:	425a      	negs	r2, r3
 801078e:	415a      	adcs	r2, r3
 8010790:	602a      	str	r2, [r5, #0]
 8010792:	e7ee      	b.n	8010772 <__swhatbuf_r+0x1c>
 8010794:	2340      	movs	r3, #64	; 0x40
 8010796:	2000      	movs	r0, #0
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	b016      	add	sp, #88	; 0x58
 801079c:	bd70      	pop	{r4, r5, r6, pc}
	...

080107a0 <__smakebuf_r>:
 80107a0:	898b      	ldrh	r3, [r1, #12]
 80107a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107a4:	079d      	lsls	r5, r3, #30
 80107a6:	4606      	mov	r6, r0
 80107a8:	460c      	mov	r4, r1
 80107aa:	d507      	bpl.n	80107bc <__smakebuf_r+0x1c>
 80107ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107b0:	6023      	str	r3, [r4, #0]
 80107b2:	6123      	str	r3, [r4, #16]
 80107b4:	2301      	movs	r3, #1
 80107b6:	6163      	str	r3, [r4, #20]
 80107b8:	b002      	add	sp, #8
 80107ba:	bd70      	pop	{r4, r5, r6, pc}
 80107bc:	466a      	mov	r2, sp
 80107be:	ab01      	add	r3, sp, #4
 80107c0:	f7ff ffc9 	bl	8010756 <__swhatbuf_r>
 80107c4:	9900      	ldr	r1, [sp, #0]
 80107c6:	4605      	mov	r5, r0
 80107c8:	4630      	mov	r0, r6
 80107ca:	f7fb fd29 	bl	800c220 <_malloc_r>
 80107ce:	b948      	cbnz	r0, 80107e4 <__smakebuf_r+0x44>
 80107d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107d4:	059a      	lsls	r2, r3, #22
 80107d6:	d4ef      	bmi.n	80107b8 <__smakebuf_r+0x18>
 80107d8:	f023 0303 	bic.w	r3, r3, #3
 80107dc:	f043 0302 	orr.w	r3, r3, #2
 80107e0:	81a3      	strh	r3, [r4, #12]
 80107e2:	e7e3      	b.n	80107ac <__smakebuf_r+0xc>
 80107e4:	4b0d      	ldr	r3, [pc, #52]	; (801081c <__smakebuf_r+0x7c>)
 80107e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80107e8:	89a3      	ldrh	r3, [r4, #12]
 80107ea:	6020      	str	r0, [r4, #0]
 80107ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107f0:	81a3      	strh	r3, [r4, #12]
 80107f2:	9b00      	ldr	r3, [sp, #0]
 80107f4:	6120      	str	r0, [r4, #16]
 80107f6:	6163      	str	r3, [r4, #20]
 80107f8:	9b01      	ldr	r3, [sp, #4]
 80107fa:	b15b      	cbz	r3, 8010814 <__smakebuf_r+0x74>
 80107fc:	4630      	mov	r0, r6
 80107fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010802:	f000 f8d1 	bl	80109a8 <_isatty_r>
 8010806:	b128      	cbz	r0, 8010814 <__smakebuf_r+0x74>
 8010808:	89a3      	ldrh	r3, [r4, #12]
 801080a:	f023 0303 	bic.w	r3, r3, #3
 801080e:	f043 0301 	orr.w	r3, r3, #1
 8010812:	81a3      	strh	r3, [r4, #12]
 8010814:	89a0      	ldrh	r0, [r4, #12]
 8010816:	4305      	orrs	r5, r0
 8010818:	81a5      	strh	r5, [r4, #12]
 801081a:	e7cd      	b.n	80107b8 <__smakebuf_r+0x18>
 801081c:	080105b5 	.word	0x080105b5

08010820 <_malloc_usable_size_r>:
 8010820:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010824:	1f18      	subs	r0, r3, #4
 8010826:	2b00      	cmp	r3, #0
 8010828:	bfbc      	itt	lt
 801082a:	580b      	ldrlt	r3, [r1, r0]
 801082c:	18c0      	addlt	r0, r0, r3
 801082e:	4770      	bx	lr

08010830 <_raise_r>:
 8010830:	291f      	cmp	r1, #31
 8010832:	b538      	push	{r3, r4, r5, lr}
 8010834:	4604      	mov	r4, r0
 8010836:	460d      	mov	r5, r1
 8010838:	d904      	bls.n	8010844 <_raise_r+0x14>
 801083a:	2316      	movs	r3, #22
 801083c:	6003      	str	r3, [r0, #0]
 801083e:	f04f 30ff 	mov.w	r0, #4294967295
 8010842:	bd38      	pop	{r3, r4, r5, pc}
 8010844:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010846:	b112      	cbz	r2, 801084e <_raise_r+0x1e>
 8010848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801084c:	b94b      	cbnz	r3, 8010862 <_raise_r+0x32>
 801084e:	4620      	mov	r0, r4
 8010850:	f000 f830 	bl	80108b4 <_getpid_r>
 8010854:	462a      	mov	r2, r5
 8010856:	4601      	mov	r1, r0
 8010858:	4620      	mov	r0, r4
 801085a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801085e:	f000 b817 	b.w	8010890 <_kill_r>
 8010862:	2b01      	cmp	r3, #1
 8010864:	d00a      	beq.n	801087c <_raise_r+0x4c>
 8010866:	1c59      	adds	r1, r3, #1
 8010868:	d103      	bne.n	8010872 <_raise_r+0x42>
 801086a:	2316      	movs	r3, #22
 801086c:	6003      	str	r3, [r0, #0]
 801086e:	2001      	movs	r0, #1
 8010870:	e7e7      	b.n	8010842 <_raise_r+0x12>
 8010872:	2400      	movs	r4, #0
 8010874:	4628      	mov	r0, r5
 8010876:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801087a:	4798      	blx	r3
 801087c:	2000      	movs	r0, #0
 801087e:	e7e0      	b.n	8010842 <_raise_r+0x12>

08010880 <raise>:
 8010880:	4b02      	ldr	r3, [pc, #8]	; (801088c <raise+0xc>)
 8010882:	4601      	mov	r1, r0
 8010884:	6818      	ldr	r0, [r3, #0]
 8010886:	f7ff bfd3 	b.w	8010830 <_raise_r>
 801088a:	bf00      	nop
 801088c:	2000004c 	.word	0x2000004c

08010890 <_kill_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	2300      	movs	r3, #0
 8010894:	4d06      	ldr	r5, [pc, #24]	; (80108b0 <_kill_r+0x20>)
 8010896:	4604      	mov	r4, r0
 8010898:	4608      	mov	r0, r1
 801089a:	4611      	mov	r1, r2
 801089c:	602b      	str	r3, [r5, #0]
 801089e:	f7f6 fce2 	bl	8007266 <_kill>
 80108a2:	1c43      	adds	r3, r0, #1
 80108a4:	d102      	bne.n	80108ac <_kill_r+0x1c>
 80108a6:	682b      	ldr	r3, [r5, #0]
 80108a8:	b103      	cbz	r3, 80108ac <_kill_r+0x1c>
 80108aa:	6023      	str	r3, [r4, #0]
 80108ac:	bd38      	pop	{r3, r4, r5, pc}
 80108ae:	bf00      	nop
 80108b0:	20000d18 	.word	0x20000d18

080108b4 <_getpid_r>:
 80108b4:	f7f6 bcd0 	b.w	8007258 <_getpid>

080108b8 <__sread>:
 80108b8:	b510      	push	{r4, lr}
 80108ba:	460c      	mov	r4, r1
 80108bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c0:	f000 f894 	bl	80109ec <_read_r>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	bfab      	itete	ge
 80108c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108ca:	89a3      	ldrhlt	r3, [r4, #12]
 80108cc:	181b      	addge	r3, r3, r0
 80108ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108d2:	bfac      	ite	ge
 80108d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80108d6:	81a3      	strhlt	r3, [r4, #12]
 80108d8:	bd10      	pop	{r4, pc}

080108da <__swrite>:
 80108da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108de:	461f      	mov	r7, r3
 80108e0:	898b      	ldrh	r3, [r1, #12]
 80108e2:	4605      	mov	r5, r0
 80108e4:	05db      	lsls	r3, r3, #23
 80108e6:	460c      	mov	r4, r1
 80108e8:	4616      	mov	r6, r2
 80108ea:	d505      	bpl.n	80108f8 <__swrite+0x1e>
 80108ec:	2302      	movs	r3, #2
 80108ee:	2200      	movs	r2, #0
 80108f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f4:	f000 f868 	bl	80109c8 <_lseek_r>
 80108f8:	89a3      	ldrh	r3, [r4, #12]
 80108fa:	4632      	mov	r2, r6
 80108fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010900:	81a3      	strh	r3, [r4, #12]
 8010902:	4628      	mov	r0, r5
 8010904:	463b      	mov	r3, r7
 8010906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801090a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801090e:	f000 b817 	b.w	8010940 <_write_r>

08010912 <__sseek>:
 8010912:	b510      	push	{r4, lr}
 8010914:	460c      	mov	r4, r1
 8010916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091a:	f000 f855 	bl	80109c8 <_lseek_r>
 801091e:	1c43      	adds	r3, r0, #1
 8010920:	89a3      	ldrh	r3, [r4, #12]
 8010922:	bf15      	itete	ne
 8010924:	6560      	strne	r0, [r4, #84]	; 0x54
 8010926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801092a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801092e:	81a3      	strheq	r3, [r4, #12]
 8010930:	bf18      	it	ne
 8010932:	81a3      	strhne	r3, [r4, #12]
 8010934:	bd10      	pop	{r4, pc}

08010936 <__sclose>:
 8010936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801093a:	f000 b813 	b.w	8010964 <_close_r>
	...

08010940 <_write_r>:
 8010940:	b538      	push	{r3, r4, r5, lr}
 8010942:	4604      	mov	r4, r0
 8010944:	4608      	mov	r0, r1
 8010946:	4611      	mov	r1, r2
 8010948:	2200      	movs	r2, #0
 801094a:	4d05      	ldr	r5, [pc, #20]	; (8010960 <_write_r+0x20>)
 801094c:	602a      	str	r2, [r5, #0]
 801094e:	461a      	mov	r2, r3
 8010950:	f7f6 fcc0 	bl	80072d4 <_write>
 8010954:	1c43      	adds	r3, r0, #1
 8010956:	d102      	bne.n	801095e <_write_r+0x1e>
 8010958:	682b      	ldr	r3, [r5, #0]
 801095a:	b103      	cbz	r3, 801095e <_write_r+0x1e>
 801095c:	6023      	str	r3, [r4, #0]
 801095e:	bd38      	pop	{r3, r4, r5, pc}
 8010960:	20000d18 	.word	0x20000d18

08010964 <_close_r>:
 8010964:	b538      	push	{r3, r4, r5, lr}
 8010966:	2300      	movs	r3, #0
 8010968:	4d05      	ldr	r5, [pc, #20]	; (8010980 <_close_r+0x1c>)
 801096a:	4604      	mov	r4, r0
 801096c:	4608      	mov	r0, r1
 801096e:	602b      	str	r3, [r5, #0]
 8010970:	f7f6 fccc 	bl	800730c <_close>
 8010974:	1c43      	adds	r3, r0, #1
 8010976:	d102      	bne.n	801097e <_close_r+0x1a>
 8010978:	682b      	ldr	r3, [r5, #0]
 801097a:	b103      	cbz	r3, 801097e <_close_r+0x1a>
 801097c:	6023      	str	r3, [r4, #0]
 801097e:	bd38      	pop	{r3, r4, r5, pc}
 8010980:	20000d18 	.word	0x20000d18

08010984 <_fstat_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	2300      	movs	r3, #0
 8010988:	4d06      	ldr	r5, [pc, #24]	; (80109a4 <_fstat_r+0x20>)
 801098a:	4604      	mov	r4, r0
 801098c:	4608      	mov	r0, r1
 801098e:	4611      	mov	r1, r2
 8010990:	602b      	str	r3, [r5, #0]
 8010992:	f7f6 fcc6 	bl	8007322 <_fstat>
 8010996:	1c43      	adds	r3, r0, #1
 8010998:	d102      	bne.n	80109a0 <_fstat_r+0x1c>
 801099a:	682b      	ldr	r3, [r5, #0]
 801099c:	b103      	cbz	r3, 80109a0 <_fstat_r+0x1c>
 801099e:	6023      	str	r3, [r4, #0]
 80109a0:	bd38      	pop	{r3, r4, r5, pc}
 80109a2:	bf00      	nop
 80109a4:	20000d18 	.word	0x20000d18

080109a8 <_isatty_r>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	2300      	movs	r3, #0
 80109ac:	4d05      	ldr	r5, [pc, #20]	; (80109c4 <_isatty_r+0x1c>)
 80109ae:	4604      	mov	r4, r0
 80109b0:	4608      	mov	r0, r1
 80109b2:	602b      	str	r3, [r5, #0]
 80109b4:	f7f6 fcc4 	bl	8007340 <_isatty>
 80109b8:	1c43      	adds	r3, r0, #1
 80109ba:	d102      	bne.n	80109c2 <_isatty_r+0x1a>
 80109bc:	682b      	ldr	r3, [r5, #0]
 80109be:	b103      	cbz	r3, 80109c2 <_isatty_r+0x1a>
 80109c0:	6023      	str	r3, [r4, #0]
 80109c2:	bd38      	pop	{r3, r4, r5, pc}
 80109c4:	20000d18 	.word	0x20000d18

080109c8 <_lseek_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4604      	mov	r4, r0
 80109cc:	4608      	mov	r0, r1
 80109ce:	4611      	mov	r1, r2
 80109d0:	2200      	movs	r2, #0
 80109d2:	4d05      	ldr	r5, [pc, #20]	; (80109e8 <_lseek_r+0x20>)
 80109d4:	602a      	str	r2, [r5, #0]
 80109d6:	461a      	mov	r2, r3
 80109d8:	f7f6 fcbc 	bl	8007354 <_lseek>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d102      	bne.n	80109e6 <_lseek_r+0x1e>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	b103      	cbz	r3, 80109e6 <_lseek_r+0x1e>
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
 80109e8:	20000d18 	.word	0x20000d18

080109ec <_read_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4604      	mov	r4, r0
 80109f0:	4608      	mov	r0, r1
 80109f2:	4611      	mov	r1, r2
 80109f4:	2200      	movs	r2, #0
 80109f6:	4d05      	ldr	r5, [pc, #20]	; (8010a0c <_read_r+0x20>)
 80109f8:	602a      	str	r2, [r5, #0]
 80109fa:	461a      	mov	r2, r3
 80109fc:	f7f6 fc4d 	bl	800729a <_read>
 8010a00:	1c43      	adds	r3, r0, #1
 8010a02:	d102      	bne.n	8010a0a <_read_r+0x1e>
 8010a04:	682b      	ldr	r3, [r5, #0]
 8010a06:	b103      	cbz	r3, 8010a0a <_read_r+0x1e>
 8010a08:	6023      	str	r3, [r4, #0]
 8010a0a:	bd38      	pop	{r3, r4, r5, pc}
 8010a0c:	20000d18 	.word	0x20000d18

08010a10 <log>:
 8010a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a12:	4604      	mov	r4, r0
 8010a14:	460d      	mov	r5, r1
 8010a16:	f000 f837 	bl	8010a88 <__ieee754_log>
 8010a1a:	4b17      	ldr	r3, [pc, #92]	; (8010a78 <log+0x68>)
 8010a1c:	4606      	mov	r6, r0
 8010a1e:	f993 3000 	ldrsb.w	r3, [r3]
 8010a22:	460f      	mov	r7, r1
 8010a24:	3301      	adds	r3, #1
 8010a26:	d01a      	beq.n	8010a5e <log+0x4e>
 8010a28:	4622      	mov	r2, r4
 8010a2a:	462b      	mov	r3, r5
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	4629      	mov	r1, r5
 8010a30:	f7f0 f858 	bl	8000ae4 <__aeabi_dcmpun>
 8010a34:	b998      	cbnz	r0, 8010a5e <log+0x4e>
 8010a36:	2200      	movs	r2, #0
 8010a38:	2300      	movs	r3, #0
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	4629      	mov	r1, r5
 8010a3e:	f7f0 f847 	bl	8000ad0 <__aeabi_dcmpgt>
 8010a42:	b960      	cbnz	r0, 8010a5e <log+0x4e>
 8010a44:	2200      	movs	r2, #0
 8010a46:	2300      	movs	r3, #0
 8010a48:	4620      	mov	r0, r4
 8010a4a:	4629      	mov	r1, r5
 8010a4c:	f7f0 f818 	bl	8000a80 <__aeabi_dcmpeq>
 8010a50:	b140      	cbz	r0, 8010a64 <log+0x54>
 8010a52:	f7fb fb3d 	bl	800c0d0 <__errno>
 8010a56:	2322      	movs	r3, #34	; 0x22
 8010a58:	2600      	movs	r6, #0
 8010a5a:	4f08      	ldr	r7, [pc, #32]	; (8010a7c <log+0x6c>)
 8010a5c:	6003      	str	r3, [r0, #0]
 8010a5e:	4630      	mov	r0, r6
 8010a60:	4639      	mov	r1, r7
 8010a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a64:	f7fb fb34 	bl	800c0d0 <__errno>
 8010a68:	2321      	movs	r3, #33	; 0x21
 8010a6a:	6003      	str	r3, [r0, #0]
 8010a6c:	4804      	ldr	r0, [pc, #16]	; (8010a80 <log+0x70>)
 8010a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010a72:	f7ff ba01 	b.w	800fe78 <nan>
 8010a76:	bf00      	nop
 8010a78:	20000220 	.word	0x20000220
 8010a7c:	fff00000 	.word	0xfff00000
 8010a80:	08011ee8 	.word	0x08011ee8
 8010a84:	00000000 	.word	0x00000000

08010a88 <__ieee754_log>:
 8010a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010a90:	4602      	mov	r2, r0
 8010a92:	460b      	mov	r3, r1
 8010a94:	460d      	mov	r5, r1
 8010a96:	b087      	sub	sp, #28
 8010a98:	da24      	bge.n	8010ae4 <__ieee754_log+0x5c>
 8010a9a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010a9e:	4304      	orrs	r4, r0
 8010aa0:	d108      	bne.n	8010ab4 <__ieee754_log+0x2c>
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	49cb      	ldr	r1, [pc, #812]	; (8010dd8 <__ieee754_log+0x350>)
 8010aaa:	f7ef feab 	bl	8000804 <__aeabi_ddiv>
 8010aae:	b007      	add	sp, #28
 8010ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ab4:	2900      	cmp	r1, #0
 8010ab6:	da04      	bge.n	8010ac2 <__ieee754_log+0x3a>
 8010ab8:	f7ef fbc2 	bl	8000240 <__aeabi_dsub>
 8010abc:	2200      	movs	r2, #0
 8010abe:	2300      	movs	r3, #0
 8010ac0:	e7f3      	b.n	8010aaa <__ieee754_log+0x22>
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	4bc5      	ldr	r3, [pc, #788]	; (8010ddc <__ieee754_log+0x354>)
 8010ac6:	f7ef fd73 	bl	80005b0 <__aeabi_dmul>
 8010aca:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8010ace:	4602      	mov	r2, r0
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	460d      	mov	r5, r1
 8010ad4:	49c2      	ldr	r1, [pc, #776]	; (8010de0 <__ieee754_log+0x358>)
 8010ad6:	428d      	cmp	r5, r1
 8010ad8:	dd06      	ble.n	8010ae8 <__ieee754_log+0x60>
 8010ada:	4610      	mov	r0, r2
 8010adc:	4619      	mov	r1, r3
 8010ade:	f7ef fbb1 	bl	8000244 <__adddf3>
 8010ae2:	e7e4      	b.n	8010aae <__ieee754_log+0x26>
 8010ae4:	2600      	movs	r6, #0
 8010ae6:	e7f5      	b.n	8010ad4 <__ieee754_log+0x4c>
 8010ae8:	152c      	asrs	r4, r5, #20
 8010aea:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010aee:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8010af2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010af6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8010afa:	4426      	add	r6, r4
 8010afc:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8010b00:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8010b04:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8010b08:	ea41 0305 	orr.w	r3, r1, r5
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	4619      	mov	r1, r3
 8010b10:	2200      	movs	r2, #0
 8010b12:	4bb4      	ldr	r3, [pc, #720]	; (8010de4 <__ieee754_log+0x35c>)
 8010b14:	f7ef fb94 	bl	8000240 <__aeabi_dsub>
 8010b18:	1cab      	adds	r3, r5, #2
 8010b1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010b1e:	2b02      	cmp	r3, #2
 8010b20:	4682      	mov	sl, r0
 8010b22:	468b      	mov	fp, r1
 8010b24:	f04f 0200 	mov.w	r2, #0
 8010b28:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8010b2c:	dc53      	bgt.n	8010bd6 <__ieee754_log+0x14e>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	f7ef ffa6 	bl	8000a80 <__aeabi_dcmpeq>
 8010b34:	b1d0      	cbz	r0, 8010b6c <__ieee754_log+0xe4>
 8010b36:	2c00      	cmp	r4, #0
 8010b38:	f000 8122 	beq.w	8010d80 <__ieee754_log+0x2f8>
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f7ef fccd 	bl	80004dc <__aeabi_i2d>
 8010b42:	a391      	add	r3, pc, #580	; (adr r3, 8010d88 <__ieee754_log+0x300>)
 8010b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b48:	4606      	mov	r6, r0
 8010b4a:	460f      	mov	r7, r1
 8010b4c:	f7ef fd30 	bl	80005b0 <__aeabi_dmul>
 8010b50:	a38f      	add	r3, pc, #572	; (adr r3, 8010d90 <__ieee754_log+0x308>)
 8010b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b56:	4604      	mov	r4, r0
 8010b58:	460d      	mov	r5, r1
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	f7ef fd27 	bl	80005b0 <__aeabi_dmul>
 8010b62:	4602      	mov	r2, r0
 8010b64:	460b      	mov	r3, r1
 8010b66:	4620      	mov	r0, r4
 8010b68:	4629      	mov	r1, r5
 8010b6a:	e7b8      	b.n	8010ade <__ieee754_log+0x56>
 8010b6c:	a38a      	add	r3, pc, #552	; (adr r3, 8010d98 <__ieee754_log+0x310>)
 8010b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b72:	4650      	mov	r0, sl
 8010b74:	4659      	mov	r1, fp
 8010b76:	f7ef fd1b 	bl	80005b0 <__aeabi_dmul>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	460b      	mov	r3, r1
 8010b7e:	2000      	movs	r0, #0
 8010b80:	4999      	ldr	r1, [pc, #612]	; (8010de8 <__ieee754_log+0x360>)
 8010b82:	f7ef fb5d 	bl	8000240 <__aeabi_dsub>
 8010b86:	4652      	mov	r2, sl
 8010b88:	4606      	mov	r6, r0
 8010b8a:	460f      	mov	r7, r1
 8010b8c:	465b      	mov	r3, fp
 8010b8e:	4650      	mov	r0, sl
 8010b90:	4659      	mov	r1, fp
 8010b92:	f7ef fd0d 	bl	80005b0 <__aeabi_dmul>
 8010b96:	4602      	mov	r2, r0
 8010b98:	460b      	mov	r3, r1
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	4639      	mov	r1, r7
 8010b9e:	f7ef fd07 	bl	80005b0 <__aeabi_dmul>
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	460f      	mov	r7, r1
 8010ba6:	b914      	cbnz	r4, 8010bae <__ieee754_log+0x126>
 8010ba8:	4632      	mov	r2, r6
 8010baa:	463b      	mov	r3, r7
 8010bac:	e0a2      	b.n	8010cf4 <__ieee754_log+0x26c>
 8010bae:	4620      	mov	r0, r4
 8010bb0:	f7ef fc94 	bl	80004dc <__aeabi_i2d>
 8010bb4:	a374      	add	r3, pc, #464	; (adr r3, 8010d88 <__ieee754_log+0x300>)
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	4680      	mov	r8, r0
 8010bbc:	4689      	mov	r9, r1
 8010bbe:	f7ef fcf7 	bl	80005b0 <__aeabi_dmul>
 8010bc2:	a373      	add	r3, pc, #460	; (adr r3, 8010d90 <__ieee754_log+0x308>)
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	4604      	mov	r4, r0
 8010bca:	460d      	mov	r5, r1
 8010bcc:	4640      	mov	r0, r8
 8010bce:	4649      	mov	r1, r9
 8010bd0:	f7ef fcee 	bl	80005b0 <__aeabi_dmul>
 8010bd4:	e0a7      	b.n	8010d26 <__ieee754_log+0x29e>
 8010bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010bda:	f7ef fb33 	bl	8000244 <__adddf3>
 8010bde:	4602      	mov	r2, r0
 8010be0:	460b      	mov	r3, r1
 8010be2:	4650      	mov	r0, sl
 8010be4:	4659      	mov	r1, fp
 8010be6:	f7ef fe0d 	bl	8000804 <__aeabi_ddiv>
 8010bea:	e9cd 0100 	strd	r0, r1, [sp]
 8010bee:	4620      	mov	r0, r4
 8010bf0:	f7ef fc74 	bl	80004dc <__aeabi_i2d>
 8010bf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bfc:	4610      	mov	r0, r2
 8010bfe:	4619      	mov	r1, r3
 8010c00:	f7ef fcd6 	bl	80005b0 <__aeabi_dmul>
 8010c04:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010c08:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	9305      	str	r3, [sp, #20]
 8010c10:	460b      	mov	r3, r1
 8010c12:	4606      	mov	r6, r0
 8010c14:	460f      	mov	r7, r1
 8010c16:	f7ef fccb 	bl	80005b0 <__aeabi_dmul>
 8010c1a:	a361      	add	r3, pc, #388	; (adr r3, 8010da0 <__ieee754_log+0x318>)
 8010c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c20:	4680      	mov	r8, r0
 8010c22:	4689      	mov	r9, r1
 8010c24:	f7ef fcc4 	bl	80005b0 <__aeabi_dmul>
 8010c28:	a35f      	add	r3, pc, #380	; (adr r3, 8010da8 <__ieee754_log+0x320>)
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	f7ef fb09 	bl	8000244 <__adddf3>
 8010c32:	4642      	mov	r2, r8
 8010c34:	464b      	mov	r3, r9
 8010c36:	f7ef fcbb 	bl	80005b0 <__aeabi_dmul>
 8010c3a:	a35d      	add	r3, pc, #372	; (adr r3, 8010db0 <__ieee754_log+0x328>)
 8010c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c40:	f7ef fb00 	bl	8000244 <__adddf3>
 8010c44:	4642      	mov	r2, r8
 8010c46:	464b      	mov	r3, r9
 8010c48:	f7ef fcb2 	bl	80005b0 <__aeabi_dmul>
 8010c4c:	a35a      	add	r3, pc, #360	; (adr r3, 8010db8 <__ieee754_log+0x330>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	f7ef faf7 	bl	8000244 <__adddf3>
 8010c56:	4632      	mov	r2, r6
 8010c58:	463b      	mov	r3, r7
 8010c5a:	f7ef fca9 	bl	80005b0 <__aeabi_dmul>
 8010c5e:	a358      	add	r3, pc, #352	; (adr r3, 8010dc0 <__ieee754_log+0x338>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	4606      	mov	r6, r0
 8010c66:	460f      	mov	r7, r1
 8010c68:	4640      	mov	r0, r8
 8010c6a:	4649      	mov	r1, r9
 8010c6c:	f7ef fca0 	bl	80005b0 <__aeabi_dmul>
 8010c70:	a355      	add	r3, pc, #340	; (adr r3, 8010dc8 <__ieee754_log+0x340>)
 8010c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c76:	f7ef fae5 	bl	8000244 <__adddf3>
 8010c7a:	4642      	mov	r2, r8
 8010c7c:	464b      	mov	r3, r9
 8010c7e:	f7ef fc97 	bl	80005b0 <__aeabi_dmul>
 8010c82:	a353      	add	r3, pc, #332	; (adr r3, 8010dd0 <__ieee754_log+0x348>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	f7ef fadc 	bl	8000244 <__adddf3>
 8010c8c:	4642      	mov	r2, r8
 8010c8e:	464b      	mov	r3, r9
 8010c90:	f7ef fc8e 	bl	80005b0 <__aeabi_dmul>
 8010c94:	460b      	mov	r3, r1
 8010c96:	4602      	mov	r2, r0
 8010c98:	4639      	mov	r1, r7
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	f7ef fad2 	bl	8000244 <__adddf3>
 8010ca0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010ca4:	9b05      	ldr	r3, [sp, #20]
 8010ca6:	3551      	adds	r5, #81	; 0x51
 8010ca8:	431d      	orrs	r5, r3
 8010caa:	2d00      	cmp	r5, #0
 8010cac:	4680      	mov	r8, r0
 8010cae:	4689      	mov	r9, r1
 8010cb0:	dd48      	ble.n	8010d44 <__ieee754_log+0x2bc>
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	4b4c      	ldr	r3, [pc, #304]	; (8010de8 <__ieee754_log+0x360>)
 8010cb6:	4650      	mov	r0, sl
 8010cb8:	4659      	mov	r1, fp
 8010cba:	f7ef fc79 	bl	80005b0 <__aeabi_dmul>
 8010cbe:	4652      	mov	r2, sl
 8010cc0:	465b      	mov	r3, fp
 8010cc2:	f7ef fc75 	bl	80005b0 <__aeabi_dmul>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	460b      	mov	r3, r1
 8010cca:	4606      	mov	r6, r0
 8010ccc:	460f      	mov	r7, r1
 8010cce:	4640      	mov	r0, r8
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	f7ef fab7 	bl	8000244 <__adddf3>
 8010cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010cda:	f7ef fc69 	bl	80005b0 <__aeabi_dmul>
 8010cde:	4680      	mov	r8, r0
 8010ce0:	4689      	mov	r9, r1
 8010ce2:	b964      	cbnz	r4, 8010cfe <__ieee754_log+0x276>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	460b      	mov	r3, r1
 8010ce8:	4630      	mov	r0, r6
 8010cea:	4639      	mov	r1, r7
 8010cec:	f7ef faa8 	bl	8000240 <__aeabi_dsub>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	4650      	mov	r0, sl
 8010cf6:	4659      	mov	r1, fp
 8010cf8:	f7ef faa2 	bl	8000240 <__aeabi_dsub>
 8010cfc:	e6d7      	b.n	8010aae <__ieee754_log+0x26>
 8010cfe:	a322      	add	r3, pc, #136	; (adr r3, 8010d88 <__ieee754_log+0x300>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d08:	f7ef fc52 	bl	80005b0 <__aeabi_dmul>
 8010d0c:	a320      	add	r3, pc, #128	; (adr r3, 8010d90 <__ieee754_log+0x308>)
 8010d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d12:	4604      	mov	r4, r0
 8010d14:	460d      	mov	r5, r1
 8010d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d1a:	f7ef fc49 	bl	80005b0 <__aeabi_dmul>
 8010d1e:	4642      	mov	r2, r8
 8010d20:	464b      	mov	r3, r9
 8010d22:	f7ef fa8f 	bl	8000244 <__adddf3>
 8010d26:	4602      	mov	r2, r0
 8010d28:	460b      	mov	r3, r1
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	4639      	mov	r1, r7
 8010d2e:	f7ef fa87 	bl	8000240 <__aeabi_dsub>
 8010d32:	4652      	mov	r2, sl
 8010d34:	465b      	mov	r3, fp
 8010d36:	f7ef fa83 	bl	8000240 <__aeabi_dsub>
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4620      	mov	r0, r4
 8010d40:	4629      	mov	r1, r5
 8010d42:	e7d9      	b.n	8010cf8 <__ieee754_log+0x270>
 8010d44:	4602      	mov	r2, r0
 8010d46:	460b      	mov	r3, r1
 8010d48:	4650      	mov	r0, sl
 8010d4a:	4659      	mov	r1, fp
 8010d4c:	f7ef fa78 	bl	8000240 <__aeabi_dsub>
 8010d50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d54:	f7ef fc2c 	bl	80005b0 <__aeabi_dmul>
 8010d58:	4606      	mov	r6, r0
 8010d5a:	460f      	mov	r7, r1
 8010d5c:	2c00      	cmp	r4, #0
 8010d5e:	f43f af23 	beq.w	8010ba8 <__ieee754_log+0x120>
 8010d62:	a309      	add	r3, pc, #36	; (adr r3, 8010d88 <__ieee754_log+0x300>)
 8010d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d6c:	f7ef fc20 	bl	80005b0 <__aeabi_dmul>
 8010d70:	a307      	add	r3, pc, #28	; (adr r3, 8010d90 <__ieee754_log+0x308>)
 8010d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d76:	4604      	mov	r4, r0
 8010d78:	460d      	mov	r5, r1
 8010d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d7e:	e727      	b.n	8010bd0 <__ieee754_log+0x148>
 8010d80:	2000      	movs	r0, #0
 8010d82:	2100      	movs	r1, #0
 8010d84:	e693      	b.n	8010aae <__ieee754_log+0x26>
 8010d86:	bf00      	nop
 8010d88:	fee00000 	.word	0xfee00000
 8010d8c:	3fe62e42 	.word	0x3fe62e42
 8010d90:	35793c76 	.word	0x35793c76
 8010d94:	3dea39ef 	.word	0x3dea39ef
 8010d98:	55555555 	.word	0x55555555
 8010d9c:	3fd55555 	.word	0x3fd55555
 8010da0:	df3e5244 	.word	0xdf3e5244
 8010da4:	3fc2f112 	.word	0x3fc2f112
 8010da8:	96cb03de 	.word	0x96cb03de
 8010dac:	3fc74664 	.word	0x3fc74664
 8010db0:	94229359 	.word	0x94229359
 8010db4:	3fd24924 	.word	0x3fd24924
 8010db8:	55555593 	.word	0x55555593
 8010dbc:	3fe55555 	.word	0x3fe55555
 8010dc0:	d078c69f 	.word	0xd078c69f
 8010dc4:	3fc39a09 	.word	0x3fc39a09
 8010dc8:	1d8e78af 	.word	0x1d8e78af
 8010dcc:	3fcc71c5 	.word	0x3fcc71c5
 8010dd0:	9997fa04 	.word	0x9997fa04
 8010dd4:	3fd99999 	.word	0x3fd99999
 8010dd8:	c3500000 	.word	0xc3500000
 8010ddc:	43500000 	.word	0x43500000
 8010de0:	7fefffff 	.word	0x7fefffff
 8010de4:	3ff00000 	.word	0x3ff00000
 8010de8:	3fe00000 	.word	0x3fe00000

08010dec <_init>:
 8010dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dee:	bf00      	nop
 8010df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010df2:	bc08      	pop	{r3}
 8010df4:	469e      	mov	lr, r3
 8010df6:	4770      	bx	lr

08010df8 <_fini>:
 8010df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dfa:	bf00      	nop
 8010dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dfe:	bc08      	pop	{r3}
 8010e00:	469e      	mov	lr, r3
 8010e02:	4770      	bx	lr
