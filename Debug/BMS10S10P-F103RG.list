
BMS10S10P-F103RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fde4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  0800ffd0  0800ffd0  0001ffd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108d4  080108d4  00030220  2**0
                  CONTENTS
  4 .ARM          00000000  080108d4  080108d4  00030220  2**0
                  CONTENTS
  5 .preinit_array 00000000  080108d4  080108d4  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108d4  080108d4  000208d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108d8  080108d8  000208d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080108dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000220  08010afc  00030220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008f4  08010afc  000308f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7c8  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b94  00000000  00000000  0004da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000515a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00052870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef71  00000000  00000000  00053998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a521  00000000  00000000  00072909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa918  00000000  00000000  0008ce2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00137742  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ec  00000000  00000000  00137798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000220 	.word	0x20000220
 8000204:	00000000 	.word	0x00000000
 8000208:	0800ffb4 	.word	0x0800ffb4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000224 	.word	0x20000224
 8000224:	0800ffb4 	.word	0x0800ffb4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4605      	mov	r5, r0
 800127a:	4621      	mov	r1, r4
 800127c:	4628      	mov	r0, r5
 800127e:	2200      	movs	r2, #0
 8001280:	2300      	movs	r3, #0
 8001282:	f7ff fc07 	bl	8000a94 <__aeabi_dcmplt>
 8001286:	b928      	cbnz	r0, 8001294 <__aeabi_d2lz+0x20>
 8001288:	4628      	mov	r0, r5
 800128a:	4621      	mov	r1, r4
 800128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001290:	f000 b80a 	b.w	80012a8 <__aeabi_d2ulz>
 8001294:	4628      	mov	r0, r5
 8001296:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800129a:	f000 f805 	bl	80012a8 <__aeabi_d2ulz>
 800129e:	4240      	negs	r0, r0
 80012a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	bf00      	nop

080012a8 <__aeabi_d2ulz>:
 80012a8:	b5d0      	push	{r4, r6, r7, lr}
 80012aa:	2200      	movs	r2, #0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__aeabi_d2ulz+0x34>)
 80012ae:	4606      	mov	r6, r0
 80012b0:	460f      	mov	r7, r1
 80012b2:	f7ff f97d 	bl	80005b0 <__aeabi_dmul>
 80012b6:	f7ff fc53 	bl	8000b60 <__aeabi_d2uiz>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_ui2d>
 80012c0:	2200      	movs	r2, #0
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <__aeabi_d2ulz+0x38>)
 80012c4:	f7ff f974 	bl	80005b0 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4630      	mov	r0, r6
 80012ce:	4639      	mov	r1, r7
 80012d0:	f7fe ffb6 	bl	8000240 <__aeabi_dsub>
 80012d4:	f7ff fc44 	bl	8000b60 <__aeabi_d2uiz>
 80012d8:	4621      	mov	r1, r4
 80012da:	bdd0      	pop	{r4, r6, r7, pc}
 80012dc:	3df00000 	.word	0x3df00000
 80012e0:	41f00000 	.word	0x41f00000

080012e4 <Batt_Discharge_Mode>:
extern float Pack_SOC, Delta_VCell,Bat_Pow_Out, Pack_Cap;
extern uint16_t LifeTime;
extern uint8_t BATT_State;

void Batt_Discharge_Mode(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 80012e8:	4b21      	ldr	r3, [pc, #132]	; (8001370 <Batt_Discharge_Mode+0x8c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d024      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_overtemperature==ON||
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <Batt_Discharge_Mode+0x90>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d020      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_undertemperature==ON||
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <Batt_Discharge_Mode+0x94>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d01c      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_overcurrentdischarge==ON||
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <Batt_Discharge_Mode+0x98>)
 8001302:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 8001304:	2b01      	cmp	r3, #1
 8001306:	d018      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_SOCOverDischarge==ON||
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <Batt_Discharge_Mode+0x9c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 800130c:	2b01      	cmp	r3, #1
 800130e:	d014      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_shortcircuit==ON||
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <Batt_Discharge_Mode+0xa0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 8001314:	2b01      	cmp	r3, #1
 8001316:	d010      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_unbalance==ON||
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <Batt_Discharge_Mode+0xa4>)
 800131a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 800131c:	2b01      	cmp	r3, #1
 800131e:	d00c      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			flag_trip_systemfailure==ON||
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <Batt_Discharge_Mode+0xa8>)
 8001322:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 8001324:	2b01      	cmp	r3, #1
 8001326:	d008      	beq.n	800133a <Batt_Discharge_Mode+0x56>
			VBATT < 30)
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <Batt_Discharge_Mode+0xac>)
 800132a:	681b      	ldr	r3, [r3, #0]
			flag_trip_systemfailure==ON||
 800132c:	4919      	ldr	r1, [pc, #100]	; (8001394 <Batt_Discharge_Mode+0xb0>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff32 	bl	8001198 <__aeabi_fcmplt>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <Batt_Discharge_Mode+0x5c>
	{
		Batt_Open_Mode();
 800133a:	f000 f90b 	bl	8001554 <Batt_Open_Mode>
 800133e:	e015      	b.n	800136c <Batt_Discharge_Mode+0x88>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001346:	4814      	ldr	r0, [pc, #80]	; (8001398 <Batt_Discharge_Mode+0xb4>)
 8001348:	f007 fcc1 	bl	8008cce <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <Batt_Discharge_Mode+0xb8>)
 800134e:	2202      	movs	r2, #2
 8001350:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <Batt_Discharge_Mode+0xbc>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <Batt_Discharge_Mode+0xc0>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <Batt_Discharge_Mode+0xc4>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <Batt_Discharge_Mode+0xc8>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	}


}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002fd 	.word	0x200002fd
 8001374:	2000027c 	.word	0x2000027c
 8001378:	200002fc 	.word	0x200002fc
 800137c:	2000030c 	.word	0x2000030c
 8001380:	20000328 	.word	0x20000328
 8001384:	2000025f 	.word	0x2000025f
 8001388:	2000025c 	.word	0x2000025c
 800138c:	20000268 	.word	0x20000268
 8001390:	20000280 	.word	0x20000280
 8001394:	41f00000 	.word	0x41f00000
 8001398:	40010800 	.word	0x40010800
 800139c:	2000067c 	.word	0x2000067c
 80013a0:	20000338 	.word	0x20000338
 80013a4:	20000288 	.word	0x20000288
 80013a8:	2000037c 	.word	0x2000037c
 80013ac:	20000254 	.word	0x20000254

080013b0 <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <Batt_Charge_Mode+0x94>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d017      	beq.n	80013ec <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <Batt_Charge_Mode+0x98>)
 80013be:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d013      	beq.n	80013ec <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <Batt_Charge_Mode+0x9c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d00f      	beq.n	80013ec <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <Batt_Charge_Mode+0xa0>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d00b      	beq.n	80013ec <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <Batt_Charge_Mode+0xa4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d007      	beq.n	80013ec <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <Batt_Charge_Mode+0xa8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d003      	beq.n	80013ec <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <Batt_Charge_Mode+0xac>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d102      	bne.n	80013f2 <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 80013ec:	f000 f8b2 	bl	8001554 <Batt_Open_Mode>
			EEPROM_WriteData(11, cycle);
			flag_write_cycle = 1;
		}
	}

}
 80013f0:	e026      	b.n	8001440 <Batt_Charge_Mode+0x90>
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <Batt_Charge_Mode+0xb0>)
 80013fa:	f007 fc68 	bl	8008cce <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <Batt_Charge_Mode+0xb4>)
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <Batt_Charge_Mode+0xb8>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <Batt_Charge_Mode+0xbc>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <Batt_Charge_Mode+0xc0>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
		if (flag_write_cycle == 0){
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <Batt_Charge_Mode+0xc4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d110      	bne.n	8001440 <Batt_Charge_Mode+0x90>
			cycle = EEPROM_ReadData(11) + 1;
 800141e:	200b      	movs	r0, #11
 8001420:	f000 fad2 	bl	80019c8 <EEPROM_ReadData>
 8001424:	4603      	mov	r3, r0
 8001426:	3301      	adds	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <Batt_Charge_Mode+0xc8>)
 800142c:	701a      	strb	r2, [r3, #0]
			EEPROM_WriteData(11, cycle);
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <Batt_Charge_Mode+0xc8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	200b      	movs	r0, #11
 8001436:	f000 faa9 	bl	800198c <EEPROM_WriteData>
			flag_write_cycle = 1;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <Batt_Charge_Mode+0xc4>)
 800143c:	2201      	movs	r2, #1
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000374 	.word	0x20000374
 8001448:	2000027c 	.word	0x2000027c
 800144c:	200002fc 	.word	0x200002fc
 8001450:	20000322 	.word	0x20000322
 8001454:	2000025d 	.word	0x2000025d
 8001458:	2000025f 	.word	0x2000025f
 800145c:	20000268 	.word	0x20000268
 8001460:	40010800 	.word	0x40010800
 8001464:	2000067c 	.word	0x2000067c
 8001468:	20000338 	.word	0x20000338
 800146c:	20000288 	.word	0x20000288
 8001470:	2000037c 	.word	0x2000037c
 8001474:	20000254 	.word	0x20000254
 8001478:	2000024c 	.word	0x2000024c

0800147c <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <Batt_Full_CD_Mode+0x94>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d027      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <Batt_Full_CD_Mode+0x98>)
 800148a:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 800148c:	2b01      	cmp	r3, #1
 800148e:	d023      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <Batt_Full_CD_Mode+0x9c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 8001494:	2b01      	cmp	r3, #1
 8001496:	d01f      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <Batt_Full_CD_Mode+0xa0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 800149c:	2b01      	cmp	r3, #1
 800149e:	d01b      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <Batt_Full_CD_Mode+0xa4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d017      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <Batt_Full_CD_Mode+0xa8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d013      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <Batt_Full_CD_Mode+0xac>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d00f      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <Batt_Full_CD_Mode+0xb0>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d00b      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <Batt_Full_CD_Mode+0xb4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d007      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <Batt_Full_CD_Mode+0xb8>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d003      	beq.n	80014d8 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <Batt_Full_CD_Mode+0xbc>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d102      	bne.n	80014de <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 80014d8:	f000 f83c 	bl	8001554 <Batt_Open_Mode>
 80014dc:	e015      	b.n	800150a <Batt_Full_CD_Mode+0x8e>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e4:	4815      	ldr	r0, [pc, #84]	; (800153c <Batt_Full_CD_Mode+0xc0>)
 80014e6:	f007 fbf2 	bl	8008cce <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <Batt_Full_CD_Mode+0xc4>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <Batt_Full_CD_Mode+0xc8>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <Batt_Full_CD_Mode+0xcc>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <Batt_Full_CD_Mode+0xd0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <Batt_Full_CD_Mode+0xd4>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
	}
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002fd 	.word	0x200002fd
 8001514:	20000374 	.word	0x20000374
 8001518:	2000027c 	.word	0x2000027c
 800151c:	200002fc 	.word	0x200002fc
 8001520:	2000030c 	.word	0x2000030c
 8001524:	20000322 	.word	0x20000322
 8001528:	20000328 	.word	0x20000328
 800152c:	2000025d 	.word	0x2000025d
 8001530:	2000025f 	.word	0x2000025f
 8001534:	2000025c 	.word	0x2000025c
 8001538:	20000268 	.word	0x20000268
 800153c:	40010800 	.word	0x40010800
 8001540:	2000067c 	.word	0x2000067c
 8001544:	20000338 	.word	0x20000338
 8001548:	20000288 	.word	0x20000288
 800154c:	2000037c 	.word	0x2000037c
 8001550:	20000254 	.word	0x20000254

08001554 <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <Batt_Open_Mode+0x3c>)
 8001560:	f007 fbb5 	bl	8008cce <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <Batt_Open_Mode+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <Batt_Open_Mode+0x44>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <Batt_Open_Mode+0x48>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <Batt_Open_Mode+0x4c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <Batt_Open_Mode+0x50>)
 8001584:	f007 fba3 	bl	8008cce <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 8001588:	f000 f80e 	bl	80015a8 <check_SOC_Based_OCV>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40010800 	.word	0x40010800
 8001594:	2000067c 	.word	0x2000067c
 8001598:	20000338 	.word	0x20000338
 800159c:	20000288 	.word	0x20000288
 80015a0:	2000037c 	.word	0x2000037c
 80015a4:	40011000 	.word	0x40011000

080015a8 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe ffa5 	bl	8000500 <__aeabi_f2d>
 80015b6:	a354      	add	r3, pc, #336	; (adr r3, 8001708 <check_SOC_Based_OCV+0x160>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7ff fa74 	bl	8000aa8 <__aeabi_dcmple>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d025      	beq.n	8001612 <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 80015c6:	4b60      	ldr	r3, [pc, #384]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ff98 	bl	8000500 <__aeabi_f2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b5d      	ldr	r3, [pc, #372]	; (800174c <check_SOC_Based_OCV+0x1a4>)
 80015d6:	f7ff f915 	bl	8000804 <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	a34b      	add	r3, pc, #300	; (adr r3, 8001710 <check_SOC_Based_OCV+0x168>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7fe ffe2 	bl	80005b0 <__aeabi_dmul>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	a348      	add	r3, pc, #288	; (adr r3, 8001718 <check_SOC_Based_OCV+0x170>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe21 	bl	8000240 <__aeabi_dsub>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff facb 	bl	8000ba0 <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	4a50      	ldr	r2, [pc, #320]	; (8001750 <check_SOC_Based_OCV+0x1a8>)
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e0d4      	b.n	80017bc <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 8001612:	4b4d      	ldr	r3, [pc, #308]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7fe ff72 	bl	8000500 <__aeabi_f2d>
 800161c:	a33a      	add	r3, pc, #232	; (adr r3, 8001708 <check_SOC_Based_OCV+0x160>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7ff fa55 	bl	8000ad0 <__aeabi_dcmpgt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d02e      	beq.n	800168a <check_SOC_Based_OCV+0xe2>
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4948      	ldr	r1, [pc, #288]	; (8001754 <check_SOC_Based_OCV+0x1ac>)
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fdba 	bl	80011ac <__aeabi_fcmple>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d025      	beq.n	800168a <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 800163e:	4b42      	ldr	r3, [pc, #264]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff5c 	bl	8000500 <__aeabi_f2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <check_SOC_Based_OCV+0x1a4>)
 800164e:	f7ff f8d9 	bl	8000804 <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	a331      	add	r3, pc, #196	; (adr r3, 8001720 <check_SOC_Based_OCV+0x178>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ffa6 	bl	80005b0 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	a32e      	add	r3, pc, #184	; (adr r3, 8001728 <check_SOC_Based_OCV+0x180>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe fde5 	bl	8000240 <__aeabi_dsub>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f7ff fa8f 	bl	8000ba0 <__aeabi_d2f>
 8001682:	4603      	mov	r3, r0
 8001684:	4a32      	ldr	r2, [pc, #200]	; (8001750 <check_SOC_Based_OCV+0x1a8>)
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e098      	b.n	80017bc <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4931      	ldr	r1, [pc, #196]	; (8001754 <check_SOC_Based_OCV+0x1ac>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd9f 	bl	80011d4 <__aeabi_fcmpgt>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d05d      	beq.n	8001758 <check_SOC_Based_OCV+0x1b0>
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff2d 	bl	8000500 <__aeabi_f2d>
 80016a6:	a322      	add	r3, pc, #136	; (adr r3, 8001730 <check_SOC_Based_OCV+0x188>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7ff f9fc 	bl	8000aa8 <__aeabi_dcmple>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d050      	beq.n	8001758 <check_SOC_Based_OCV+0x1b0>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <check_SOC_Based_OCV+0x1a0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff20 	bl	8000500 <__aeabi_f2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <check_SOC_Based_OCV+0x1a4>)
 80016c6:	f7ff f89d 	bl	8000804 <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	a319      	add	r3, pc, #100	; (adr r3, 8001738 <check_SOC_Based_OCV+0x190>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ff6a 	bl	80005b0 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a316      	add	r3, pc, #88	; (adr r3, 8001740 <check_SOC_Based_OCV+0x198>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fda9 	bl	8000240 <__aeabi_dsub>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa53 	bl	8000ba0 <__aeabi_d2f>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <check_SOC_Based_OCV+0x1a8>)
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	e05c      	b.n	80017bc <check_SOC_Based_OCV+0x214>
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	66666666 	.word	0x66666666
 800170c:	4049a666 	.word	0x4049a666
 8001710:	9d89d6ed 	.word	0x9d89d6ed
 8001714:	403809d8 	.word	0x403809d8
 8001718:	00000000 	.word	0x00000000
 800171c:	40534c00 	.word	0x40534c00
 8001720:	26317911 	.word	0x26317911
 8001724:	4060e88b 	.word	0x4060e88b
 8001728:	a5947ec7 	.word	0xa5947ec7
 800172c:	407ca45a 	.word	0x407ca45a
 8001730:	9999999a 	.word	0x9999999a
 8001734:	404b5999 	.word	0x404b5999
 8001738:	f989b8e3 	.word	0xf989b8e3
 800173c:	4074ce1a 	.word	0x4074ce1a
 8001740:	e9c08a8b 	.word	0xe9c08a8b
 8001744:	409227ee 	.word	0x409227ee
 8001748:	20000280 	.word	0x20000280
 800174c:	402e0000 	.word	0x402e0000
 8001750:	20000370 	.word	0x20000370
 8001754:	42560000 	.word	0x42560000
	}
	else if(VBATT > 54.7){
 8001758:	4b73      	ldr	r3, [pc, #460]	; (8001928 <check_SOC_Based_OCV+0x380>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fecf 	bl	8000500 <__aeabi_f2d>
 8001762:	a365      	add	r3, pc, #404	; (adr r3, 80018f8 <check_SOC_Based_OCV+0x350>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9b2 	bl	8000ad0 <__aeabi_dcmpgt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d024      	beq.n	80017bc <check_SOC_Based_OCV+0x214>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 8001772:	4b6d      	ldr	r3, [pc, #436]	; (8001928 <check_SOC_Based_OCV+0x380>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fec2 	bl	8000500 <__aeabi_f2d>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <check_SOC_Based_OCV+0x384>)
 8001782:	f7ff f83f 	bl	8000804 <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	a35c      	add	r3, pc, #368	; (adr r3, 8001900 <check_SOC_Based_OCV+0x358>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe ff0c 	bl	80005b0 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a359      	add	r3, pc, #356	; (adr r3, 8001908 <check_SOC_Based_OCV+0x360>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7fe fd4b 	bl	8000240 <__aeabi_dsub>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9f5 	bl	8000ba0 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a5d      	ldr	r2, [pc, #372]	; (8001930 <check_SOC_Based_OCV+0x388>)
 80017ba:	6013      	str	r3, [r2, #0]
	}

	Pack_SOC=(0.4884934490 * VBATT * VBATT) - (26.2875616013 * VBATT) + 348.6849534722;   //Persamaan Baterai INR 21700
 80017bc:	4b5a      	ldr	r3, [pc, #360]	; (8001928 <check_SOC_Based_OCV+0x380>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe9d 	bl	8000500 <__aeabi_f2d>
 80017c6:	a352      	add	r3, pc, #328	; (adr r3, 8001910 <check_SOC_Based_OCV+0x368>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fef0 	bl	80005b0 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4614      	mov	r4, r2
 80017d6:	461d      	mov	r5, r3
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <check_SOC_Based_OCV+0x380>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe fe8f 	bl	8000500 <__aeabi_f2d>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4620      	mov	r0, r4
 80017e8:	4629      	mov	r1, r5
 80017ea:	f7fe fee1 	bl	80005b0 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <check_SOC_Based_OCV+0x380>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fe80 	bl	8000500 <__aeabi_f2d>
 8001800:	a345      	add	r3, pc, #276	; (adr r3, 8001918 <check_SOC_Based_OCV+0x370>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fed3 	bl	80005b0 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7fe fd15 	bl	8000240 <__aeabi_dsub>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	a340      	add	r3, pc, #256	; (adr r3, 8001920 <check_SOC_Based_OCV+0x378>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7fe fd0e 	bl	8000244 <__adddf3>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f9b6 	bl	8000ba0 <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	4a3e      	ldr	r2, [pc, #248]	; (8001930 <check_SOC_Based_OCV+0x388>)
 8001838:	6013      	str	r3, [r2, #0]
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 800183a:	4b3e      	ldr	r3, [pc, #248]	; (8001934 <check_SOC_Based_OCV+0x38c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a3e      	ldr	r2, [pc, #248]	; (8001938 <check_SOC_Based_OCV+0x390>)
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f9ff 	bl	8000c48 <__aeabi_fsub>
 800184a:	4603      	mov	r3, r0
 800184c:	4619      	mov	r1, r3
 800184e:	483b      	ldr	r0, [pc, #236]	; (800193c <check_SOC_Based_OCV+0x394>)
 8001850:	f7ff fbb8 	bl	8000fc4 <__aeabi_fdiv>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <check_SOC_Based_OCV+0x398>)
 800185a:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <check_SOC_Based_OCV+0x398>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a35      	ldr	r2, [pc, #212]	; (8001938 <check_SOC_Based_OCV+0x390>)
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff faf8 	bl	8000e5c <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001872:	4a34      	ldr	r2, [pc, #208]	; (8001944 <check_SOC_Based_OCV+0x39c>)
 8001874:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <check_SOC_Based_OCV+0x398>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <check_SOC_Based_OCV+0x388>)
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff faeb 	bl	8000e5c <__aeabi_fmul>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <check_SOC_Based_OCV+0x39c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff f9db 	bl	8000c4c <__addsf3>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <check_SOC_Based_OCV+0x3a0>)
 800189c:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <check_SOC_Based_OCV+0x388>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	492a      	ldr	r1, [pc, #168]	; (800194c <check_SOC_Based_OCV+0x3a4>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc95 	bl	80011d4 <__aeabi_fcmpgt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <check_SOC_Based_OCV+0x310>
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <check_SOC_Based_OCV+0x388>)
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <check_SOC_Based_OCV+0x394>)
 80018b4:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 80018b6:	e01b      	b.n	80018f0 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC>100) Pack_SOC=100;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <check_SOC_Based_OCV+0x388>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	491f      	ldr	r1, [pc, #124]	; (800193c <check_SOC_Based_OCV+0x394>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fc88 	bl	80011d4 <__aeabi_fcmpgt>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <check_SOC_Based_OCV+0x32a>
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <check_SOC_Based_OCV+0x388>)
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <check_SOC_Based_OCV+0x394>)
 80018ce:	601a      	str	r2, [r3, #0]
}
 80018d0:	e00e      	b.n	80018f0 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <check_SOC_Based_OCV+0x388>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fc5c 	bl	8001198 <__aeabi_fcmplt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d100      	bne.n	80018e8 <check_SOC_Based_OCV+0x340>
}
 80018e6:	e003      	b.n	80018f0 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <check_SOC_Based_OCV+0x388>)
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	bf00      	nop
 80018f2:	bdb0      	pop	{r4, r5, r7, pc}
 80018f4:	f3af 8000 	nop.w
 80018f8:	9999999a 	.word	0x9999999a
 80018fc:	404b5999 	.word	0x404b5999
 8001900:	99fc263d 	.word	0x99fc263d
 8001904:	405bdb4c 	.word	0x405bdb4c
 8001908:	be4fd9fa 	.word	0xbe4fd9fa
 800190c:	40761dc4 	.word	0x40761dc4
 8001910:	06f0f9c2 	.word	0x06f0f9c2
 8001914:	3fdf437a 	.word	0x3fdf437a
 8001918:	a3192b3c 	.word	0xa3192b3c
 800191c:	403a499d 	.word	0x403a499d
 8001920:	91c5a617 	.word	0x91c5a617
 8001924:	4075caf5 	.word	0x4075caf5
 8001928:	20000280 	.word	0x20000280
 800192c:	402e0000 	.word	0x402e0000
 8001930:	20000370 	.word	0x20000370
 8001934:	20000250 	.word	0x20000250
 8001938:	20000308 	.word	0x20000308
 800193c:	42c80000 	.word	0x42c80000
 8001940:	20000310 	.word	0x20000310
 8001944:	2000028c 	.word	0x2000028c
 8001948:	2000031c 	.word	0x2000031c
 800194c:	43020000 	.word	0x43020000

08001950 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c2, addr, 3, 100)!=HAL_OK){
 800195a:	88f9      	ldrh	r1, [r7, #6]
 800195c:	2364      	movs	r3, #100	; 0x64
 800195e:	2203      	movs	r2, #3
 8001960:	4808      	ldr	r0, [pc, #32]	; (8001984 <EEPROM_isDeviceReady+0x34>)
 8001962:	f007 fe8b 	bl	800967c <HAL_I2C_IsDeviceReady>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800196c:	2140      	movs	r1, #64	; 0x40
 800196e:	4806      	ldr	r0, [pc, #24]	; (8001988 <EEPROM_isDeviceReady+0x38>)
 8001970:	f007 f9c5 	bl	8008cfe <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001974:	2064      	movs	r0, #100	; 0x64
 8001976:	f005 f8fd 	bl	8006b74 <HAL_Delay>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800197a:	e7f7      	b.n	800196c <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200005f4 	.word	0x200005f4
 8001988:	40011000 	.word	0x40011000

0800198c <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af04      	add	r7, sp, #16
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	80fb      	strh	r3, [r7, #6]
 8001998:	4613      	mov	r3, r2
 800199a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2,EEPROM_ADDRESS,addr,64,&data,1,10);
 800199c:	88fa      	ldrh	r2, [r7, #6]
 800199e:	230a      	movs	r3, #10
 80019a0:	9302      	str	r3, [sp, #8]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	1d7b      	adds	r3, r7, #5
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2340      	movs	r3, #64	; 0x40
 80019ac:	21a0      	movs	r1, #160	; 0xa0
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <EEPROM_WriteData+0x38>)
 80019b0:	f007 fb02 	bl	8008fb8 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80019b4:	2064      	movs	r0, #100	; 0x64
 80019b6:	f005 f8dd 	bl	8006b74 <HAL_Delay>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200005f4 	.word	0x200005f4

080019c8 <EEPROM_ReadData>:

uint8_t EEPROM_ReadData(uint16_t addr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af04      	add	r7, sp, #16
 80019ce:	4603      	mov	r3, r0
 80019d0:	80fb      	strh	r3, [r7, #6]
	uint8_t EEPROM_data;
	HAL_I2C_Mem_Read(&hi2c2,0xA0,addr,64,&EEPROM_data,1,10);
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	230a      	movs	r3, #10
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	2301      	movs	r3, #1
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	f107 030f 	add.w	r3, r7, #15
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2340      	movs	r3, #64	; 0x40
 80019e4:	21a0      	movs	r1, #160	; 0xa0
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <EEPROM_ReadData+0x34>)
 80019e8:	f007 fbe0 	bl	80091ac <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f005 f8c1 	bl	8006b74 <HAL_Delay>
	return EEPROM_data;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200005f4 	.word	0x200005f4

08001a00 <ltc6804_GPIO_Config>:

float Cell_Voltage_Lowest;
float minus_offset[15]={500,840,-40,-40,-100,540,830,20,-130,-120,560,880,-30,-110,-140}; //modul B

void ltc6804_GPIO_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIO clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a29      	ldr	r2, [pc, #164]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6193      	str	r3, [r2, #24]
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6193      	str	r3, [r2, #24]
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <ltc6804_GPIO_Config+0xb0>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin       = ltc6804_CS_PIN;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_CS_PORT, &GPIO_InitStructure);
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <ltc6804_GPIO_Config+0xb4>)
 8001a68:	f006 ff86 	bl	8008978 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_SCK_PIN;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_SCK_PORT, &GPIO_InitStructure);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4810      	ldr	r0, [pc, #64]	; (8001ab8 <ltc6804_GPIO_Config+0xb8>)
 8001a78:	f006 ff7e 	bl	8008978 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = ltc6804_MOSI_PIN;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ltc6804_MOSI_PORT, &GPIO_InitStructure);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4619      	mov	r1, r3
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <ltc6804_GPIO_Config+0xb8>)
 8001a88:	f006 ff76 	bl	8008978 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin       = ltc6804_MISO_PIN;
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Mode      = GPIO_MODE_INPUT;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Pull      = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ltc6804_MISO_PORT, &GPIO_InitStructure);
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <ltc6804_GPIO_Config+0xb8>)
 8001aa4:	f006 ff68 	bl	8008978 <HAL_GPIO_Init>
}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40011000 	.word	0x40011000
 8001ab8:	40010c00 	.word	0x40010c00

08001abc <ltc6804_SPIInit>:

void ltc6804_SPIInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac6:	482d      	ldr	r0, [pc, #180]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001ac8:	f007 f901 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_RESET_HIGH;
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad2:	482a      	ldr	r0, [pc, #168]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001ad4:	f007 f8fb 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001ad8:	200a      	movs	r0, #10
 8001ada:	f000 f851 	bl	8001b80 <ltc6804_Delay>
	ltc6804_RESET_LOW;
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae4:	4825      	ldr	r0, [pc, #148]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001ae6:	f007 f8f2 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(2000);
 8001aea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001aee:	f000 f847 	bl	8001b80 <ltc6804_Delay>
	ltc6804_RESET_HIGH;
 8001af2:	2201      	movs	r2, #1
 8001af4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af8:	4820      	ldr	r0, [pc, #128]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001afa:	f007 f8e8 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(10);
 8001afe:	200a      	movs	r0, #10
 8001b00:	f000 f83e 	bl	8001b80 <ltc6804_Delay>

	//toggle CS 3 times to enter SPI Mode
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0a:	481c      	ldr	r0, [pc, #112]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001b0c:	f007 f8df 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b10:	2064      	movs	r0, #100	; 0x64
 8001b12:	f000 f835 	bl	8001b80 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1c:	4817      	ldr	r0, [pc, #92]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001b1e:	f007 f8d6 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b22:	2064      	movs	r0, #100	; 0x64
 8001b24:	f000 f82c 	bl	8001b80 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2e:	4813      	ldr	r0, [pc, #76]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001b30:	f007 f8cd 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b34:	2064      	movs	r0, #100	; 0x64
 8001b36:	f000 f823 	bl	8001b80 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b40:	480e      	ldr	r0, [pc, #56]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001b42:	f007 f8c4 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b46:	2064      	movs	r0, #100	; 0x64
 8001b48:	f000 f81a 	bl	8001b80 <ltc6804_Delay>
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001b54:	f007 f8bb 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b58:	2064      	movs	r0, #100	; 0x64
 8001b5a:	f000 f811 	bl	8001b80 <ltc6804_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <ltc6804_SPIInit+0xc0>)
 8001b66:	f007 f8b2 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_Delay(100);
 8001b6a:	2064      	movs	r0, #100	; 0x64
 8001b6c:	f000 f808 	bl	8001b80 <ltc6804_Delay>

	ltc6804_Delay(20000);
 8001b70:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001b74:	f000 f804 	bl	8001b80 <ltc6804_Delay>
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40011000 	.word	0x40011000

08001b80 <ltc6804_Delay>:

void ltc6804_Delay(volatile uint32_t nCount)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	while(nCount > 0) { nCount--; }
 8001b88:	e002      	b.n	8001b90 <ltc6804_Delay+0x10>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <ltc6804_Delay+0xa>
}
 8001b96:	bf00      	nop
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <ltc6804_Write8>:

void ltc6804_Write8(uint8_t out)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	//ltc6804_CS_SET(CS_Pin);
	//ltc6804_MOSI_RESET;
	ltc6804_SCK_RESET;
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	481b      	ldr	r0, [pc, #108]	; (8001c20 <ltc6804_Write8+0x7c>)
 8001bb4:	f007 f88b 	bl	8008cce <HAL_GPIO_WritePin>
	//ltc6804_CS_RESET(CS_Pin);
	//ltc6804_Delay(10);
	for (i = 0; i < 8; i++) {
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e027      	b.n	8001c0e <ltc6804_Write8+0x6a>
		if ((out >> (7-i)) & 0x01) {
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	fa42 f303 	asr.w	r3, r2, r3
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <ltc6804_Write8+0x3a>
			ltc6804_MOSI_SET;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	2120      	movs	r1, #32
 8001bd6:	4812      	ldr	r0, [pc, #72]	; (8001c20 <ltc6804_Write8+0x7c>)
 8001bd8:	f007 f879 	bl	8008cce <HAL_GPIO_WritePin>
 8001bdc:	e004      	b.n	8001be8 <ltc6804_Write8+0x44>
		} else {
			ltc6804_MOSI_RESET;
 8001bde:	2200      	movs	r2, #0
 8001be0:	2120      	movs	r1, #32
 8001be2:	480f      	ldr	r0, [pc, #60]	; (8001c20 <ltc6804_Write8+0x7c>)
 8001be4:	f007 f873 	bl	8008cce <HAL_GPIO_WritePin>
		}
		ltc6804_Delay(10);
 8001be8:	200a      	movs	r0, #10
 8001bea:	f7ff ffc9 	bl	8001b80 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2108      	movs	r1, #8
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <ltc6804_Write8+0x7c>)
 8001bf4:	f007 f86b 	bl	8008cce <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f7ff ffc1 	bl	8001b80 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2108      	movs	r1, #8
 8001c02:	4807      	ldr	r0, [pc, #28]	; (8001c20 <ltc6804_Write8+0x7c>)
 8001c04:	f007 f863 	bl	8008cce <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d9d4      	bls.n	8001bbe <ltc6804_Write8+0x1a>
	}
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40010c00 	.word	0x40010c00

08001c24 <ltc6804_Read8>:
		ltc6804_SCK_SET;
	}
}

uint8_t ltc6804_Read8()
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t temp = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71bb      	strb	r3, [r7, #6]
	//ltc6804_Delay(10);
	//ltc6804_CS_RESET(CS_Pin);
	ltc6804_MOSI_RESET;
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2120      	movs	r1, #32
 8001c32:	481e      	ldr	r0, [pc, #120]	; (8001cac <ltc6804_Read8+0x88>)
 8001c34:	f007 f84b 	bl	8008cce <HAL_GPIO_WritePin>
	ltc6804_SCK_RESET;
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2108      	movs	r1, #8
 8001c3c:	481b      	ldr	r0, [pc, #108]	; (8001cac <ltc6804_Read8+0x88>)
 8001c3e:	f007 f846 	bl	8008cce <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	e028      	b.n	8001c9a <ltc6804_Read8+0x76>
		ltc6804_Delay(10);
 8001c48:	200a      	movs	r0, #10
 8001c4a:	f7ff ff99 	bl	8001b80 <ltc6804_Delay>
		ltc6804_SCK_SET;
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2108      	movs	r1, #8
 8001c52:	4816      	ldr	r0, [pc, #88]	; (8001cac <ltc6804_Read8+0x88>)
 8001c54:	f007 f83b 	bl	8008cce <HAL_GPIO_WritePin>
		ltc6804_Delay(10);
 8001c58:	200a      	movs	r0, #10
 8001c5a:	f7ff ff91 	bl	8001b80 <ltc6804_Delay>
		if (ltc6804_MISO == GPIO_PIN_SET) {
 8001c5e:	2110      	movs	r1, #16
 8001c60:	4812      	ldr	r0, [pc, #72]	; (8001cac <ltc6804_Read8+0x88>)
 8001c62:	f007 f81d 	bl	8008ca0 <HAL_GPIO_ReadPin>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10b      	bne.n	8001c84 <ltc6804_Read8+0x60>
			temp |= (1 << (7-i));
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	f1c3 0307 	rsb	r3, r3, #7
 8001c72:	2201      	movs	r2, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	71bb      	strb	r3, [r7, #6]
		}
		ltc6804_Delay(10);
 8001c84:	200a      	movs	r0, #10
 8001c86:	f7ff ff7b 	bl	8001b80 <ltc6804_Delay>
		ltc6804_SCK_RESET;
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4807      	ldr	r0, [pc, #28]	; (8001cac <ltc6804_Read8+0x88>)
 8001c90:	f007 f81d 	bl	8008cce <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++) {
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	3301      	adds	r3, #1
 8001c98:	71fb      	strb	r3, [r7, #7]
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b07      	cmp	r3, #7
 8001c9e:	d9d3      	bls.n	8001c48 <ltc6804_Read8+0x24>
	}
	//ltc6804_CS_SET(CS_Pin);

	return temp;
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40010c00 	.word	0x40010c00

08001cb0 <set_adc>:
void set_adc(uint8_t MD, //ADC Mode
		uint8_t DCP, //Discharge Permit
		uint8_t CH, //Cell Channels to be measured
		uint8_t CHG //GPIO Channels to be measured
)
{
 8001cb0:	b490      	push	{r4, r7}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	71fb      	strb	r3, [r7, #7]
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71bb      	strb	r3, [r7, #6]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	717b      	strb	r3, [r7, #5]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	713b      	strb	r3, [r7, #4]
	uint8_t md_bits;

	md_bits = (MD & 0x02) >> 1;
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	105b      	asrs	r3, r3, #1
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
	ADCV[0] = md_bits + 0x02;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	3302      	adds	r3, #2
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <set_adc+0x8c>)
 8001ce2:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	01db      	lsls	r3, r3, #7
 8001ce8:	73fb      	strb	r3, [r7, #15]
	ADCV[1] =  md_bits + 0x60 + (DCP<<4) + CH;
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	797b      	ldrb	r3, [r7, #5]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	3360      	adds	r3, #96	; 0x60
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <set_adc+0x8c>)
 8001d02:	705a      	strb	r2, [r3, #1]

	md_bits = (MD & 0x02) >> 1;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	105b      	asrs	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
	ADAX[0] = md_bits + 0x04;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3304      	adds	r3, #4
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <set_adc+0x90>)
 8001d18:	701a      	strb	r2, [r3, #0]
	md_bits = (MD & 0x01) << 7;
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	01db      	lsls	r3, r3, #7
 8001d1e:	73fb      	strb	r3, [r7, #15]
	ADAX[1] = md_bits + 0x60 + CHG ;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	793b      	ldrb	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	3360      	adds	r3, #96	; 0x60
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <set_adc+0x90>)
 8001d2e:	705a      	strb	r2, [r3, #1]

}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc90      	pop	{r4, r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000380 	.word	0x20000380
 8001d40:	20000424 	.word	0x20000424

08001d44 <LTC6804_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adcv()
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0

	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADCV[0];
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <LTC6804_adcv+0x5c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <LTC6804_adcv+0x5c>)
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	707b      	strb	r3, [r7, #1]

	//2
	temp_pec = pec15_calc(2, ADCV);
 8001d56:	4912      	ldr	r1, [pc, #72]	; (8001da0 <LTC6804_adcv+0x5c>)
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f000 fb25 	bl	80023a8 <pec15_calc>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	70fb      	strb	r3, [r7, #3]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001d72:	f000 fb03 	bl	800237c <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <LTC6804_adcv+0x60>)
 8001d7e:	f006 ffa6 	bl	8008cce <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001d82:	463b      	mov	r3, r7
 8001d84:	4619      	mov	r1, r3
 8001d86:	2004      	movs	r0, #4
 8001d88:	f000 fb40 	bl	800240c <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d92:	4804      	ldr	r0, [pc, #16]	; (8001da4 <LTC6804_adcv+0x60>)
 8001d94:	f006 ff9b 	bl	8008cce <HAL_GPIO_WritePin>

}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000380 	.word	0x20000380
 8001da4:	40011000 	.word	0x40011000

08001da8 <LTC6804_adstat>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted       |

 ***********************************************************************************************/
void LTC6804_adstat()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	uint8_t ADSTAT[2];

	//1
	cmd[0] = 0x05;
 8001dae:	2305      	movs	r3, #5
 8001db0:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0xE9;
 8001db2:	23e9      	movs	r3, #233	; 0xe9
 8001db4:	727b      	strb	r3, [r7, #9]

	ADSTAT[0] = cmd[0];
 8001db6:	7a3b      	ldrb	r3, [r7, #8]
 8001db8:	713b      	strb	r3, [r7, #4]
	ADSTAT[1] = cmd[1];
 8001dba:	7a7b      	ldrb	r3, [r7, #9]
 8001dbc:	717b      	strb	r3, [r7, #5]

	//2
	temp_pec = pec15_calc(2, ADSTAT);
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f000 faf0 	bl	80023a8 <pec15_calc>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	81fb      	strh	r3, [r7, #14]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001dcc:	89fb      	ldrh	r3, [r7, #14]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t)(temp_pec);
 8001dd6:	89fb      	ldrh	r3, [r7, #14]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	72fb      	strb	r3, [r7, #11]

	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 8001ddc:	f000 face 	bl	800237c <wakeup_idle>

	//4
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8001de0:	2200      	movs	r2, #0
 8001de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001de6:	4809      	ldr	r0, [pc, #36]	; (8001e0c <LTC6804_adstat+0x64>)
 8001de8:	f006 ff71 	bl	8008cce <HAL_GPIO_WritePin>
	spi_write_array(4,cmd);
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	2004      	movs	r0, #4
 8001df4:	f000 fb0a 	bl	800240c <spi_write_array>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <LTC6804_adstat+0x64>)
 8001e00:	f006 ff65 	bl	8008cce <HAL_GPIO_WritePin>

}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40011000 	.word	0x40011000

08001e10 <LTC6804_rdcv>:
 *************************************************/
uint8_t LTC6804_rdcv(uint8_t reg,
		uint8_t total_ic,
		uint16_t cell_codes[][12]
)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	603a      	str	r2, [r7, #0]
 8001e1a:	71fb      	strb	r3, [r7, #7]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	71bb      	strb	r3, [r7, #6]

	const uint8_t NUM_RX_BYT = 8;
 8001e20:	2308      	movs	r3, #8
 8001e22:	763b      	strb	r3, [r7, #24]
	const uint8_t BYT_IN_REG = 6;
 8001e24:	2306      	movs	r3, #6
 8001e26:	75fb      	strb	r3, [r7, #23]
	const uint8_t CELL_IN_REG = 3;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	75bb      	strb	r3, [r7, #22]

	uint8_t *cell_data;
	int8_t pec_error = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	77fb      	strb	r3, [r7, #31]
	uint16_t parsed_cell;
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter=0; //data counter
 8001e30:	2300      	movs	r3, #0
 8001e32:	77bb      	strb	r3, [r7, #30]
	cell_data = (uint8_t *) malloc((NUM_RX_BYT*total_ic)*sizeof(uint8_t));
 8001e34:	7e3b      	ldrb	r3, [r7, #24]
 8001e36:	79ba      	ldrb	r2, [r7, #6]
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f009 fa6f 	bl	800b320 <malloc>
 8001e42:	4603      	mov	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]
	//1.a
	if (reg == 0)
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d16f      	bne.n	8001f2c <LTC6804_rdcv+0x11c>
	{
		//a.i
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	777b      	strb	r3, [r7, #29]
 8001e50:	e068      	b.n	8001f24 <LTC6804_rdcv+0x114>
		{
			data_counter = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	77bb      	strb	r3, [r7, #30]
			LTC6804_rdcv_reg(cell_reg, total_ic,cell_data);
 8001e56:	79b9      	ldrb	r1, [r7, #6]
 8001e58:	7f7b      	ldrb	r3, [r7, #29]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f8cf 	bl	8002000 <LTC6804_rdcv_reg>
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001e62:	2300      	movs	r3, #0
 8001e64:	773b      	strb	r3, [r7, #28]
 8001e66:	e056      	b.n	8001f16 <LTC6804_rdcv+0x106>
			{
				// current_ic is used as an IC counter
				//a.ii
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001e68:	2300      	movs	r3, #0
 8001e6a:	76fb      	strb	r3, [r7, #27]
 8001e6c:	e026      	b.n	8001ebc <LTC6804_rdcv+0xac>
				{
					// once for each cell voltages in the register
					parsed_cell = cell_data[data_counter] + (cell_data[data_counter + 1] << 8);
 8001e6e:	7fbb      	ldrb	r3, [r7, #30]
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	7fbb      	ldrb	r3, [r7, #30]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	6939      	ldr	r1, [r7, #16]
 8001e7e:	440b      	add	r3, r1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	817b      	strh	r3, [r7, #10]
					cell_codes[current_ic][current_cell  + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001e8c:	7f3a      	ldrb	r2, [r7, #28]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	461a      	mov	r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	7ef9      	ldrb	r1, [r7, #27]
 8001e9e:	7f7a      	ldrb	r2, [r7, #29]
 8001ea0:	3a01      	subs	r2, #1
 8001ea2:	7db8      	ldrb	r0, [r7, #22]
 8001ea4:	fb00 f202 	mul.w	r2, r0, r2
 8001ea8:	440a      	add	r2, r1
 8001eaa:	8979      	ldrh	r1, [r7, #10]
 8001eac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					data_counter = data_counter + 2;
 8001eb0:	7fbb      	ldrb	r3, [r7, #30]
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	77bb      	strb	r3, [r7, #30]
				for (uint8_t current_cell = 0; current_cell<CELL_IN_REG; current_cell++)                  // This loop parses the read back data. Loops
 8001eb6:	7efb      	ldrb	r3, [r7, #27]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	76fb      	strb	r3, [r7, #27]
 8001ebc:	7efa      	ldrb	r2, [r7, #27]
 8001ebe:	7dbb      	ldrb	r3, [r7, #22]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d3d4      	bcc.n	8001e6e <LTC6804_rdcv+0x5e>
				}
				//a.iii
				received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter+1];
 8001ec4:	7fbb      	ldrb	r3, [r7, #30]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	7fbb      	ldrb	r3, [r7, #30]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	6939      	ldr	r1, [r7, #16]
 8001ed8:	440b      	add	r3, r1
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	81fb      	strh	r3, [r7, #14]
				data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT ]);
 8001ee2:	7f3b      	ldrb	r3, [r7, #28]
 8001ee4:	7e3a      	ldrb	r2, [r7, #24]
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	441a      	add	r2, r3
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa57 	bl	80023a8 <pec15_calc>
 8001efa:	4603      	mov	r3, r0
 8001efc:	81bb      	strh	r3, [r7, #12]
				if (received_pec != data_pec)
 8001efe:	89fa      	ldrh	r2, [r7, #14]
 8001f00:	89bb      	ldrh	r3, [r7, #12]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <LTC6804_rdcv+0xfa>
				{
					pec_error = -1;
 8001f06:	23ff      	movs	r3, #255	; 0xff
 8001f08:	77fb      	strb	r3, [r7, #31]
				}
				data_counter=data_counter+2;
 8001f0a:	7fbb      	ldrb	r3, [r7, #30]
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001f10:	7f3b      	ldrb	r3, [r7, #28]
 8001f12:	3301      	adds	r3, #1
 8001f14:	773b      	strb	r3, [r7, #28]
 8001f16:	7f3a      	ldrb	r2, [r7, #28]
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3a4      	bcc.n	8001e68 <LTC6804_rdcv+0x58>
		for (uint8_t cell_reg = 1; cell_reg<5; cell_reg++)               //executes once for each of the LTC6804 cell voltage registers
 8001f1e:	7f7b      	ldrb	r3, [r7, #29]
 8001f20:	3301      	adds	r3, #1
 8001f22:	777b      	strb	r3, [r7, #29]
 8001f24:	7f7b      	ldrb	r3, [r7, #29]
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d993      	bls.n	8001e52 <LTC6804_rdcv+0x42>
 8001f2a:	e060      	b.n	8001fee <LTC6804_rdcv+0x1de>
	//1.b
	else
	{
		//b.i

		LTC6804_rdcv_reg(reg, total_ic,cell_data);
 8001f2c:	79b9      	ldrb	r1, [r7, #6]
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f864 	bl	8002000 <LTC6804_rdcv_reg>
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001f38:	2300      	movs	r3, #0
 8001f3a:	76bb      	strb	r3, [r7, #26]
 8001f3c:	e053      	b.n	8001fe6 <LTC6804_rdcv+0x1d6>
		{
			// current_ic is used as an IC counter
			//b.ii
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001f3e:	2300      	movs	r3, #0
 8001f40:	767b      	strb	r3, [r7, #25]
 8001f42:	e026      	b.n	8001f92 <LTC6804_rdcv+0x182>
			{
				// once for each cell voltage in the register
				parsed_cell = cell_data[data_counter] + (cell_data[data_counter+1]<<8);
 8001f44:	7fbb      	ldrb	r3, [r7, #30]
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	7fbb      	ldrb	r3, [r7, #30]
 8001f50:	3301      	adds	r3, #1
 8001f52:	6939      	ldr	r1, [r7, #16]
 8001f54:	440b      	add	r3, r1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	817b      	strh	r3, [r7, #10]
				cell_codes[current_ic][current_cell + ((reg - 1) * CELL_IN_REG)] = 0x0000FFFF & parsed_cell;
 8001f62:	7eba      	ldrb	r2, [r7, #26]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	7e79      	ldrb	r1, [r7, #25]
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	3a01      	subs	r2, #1
 8001f78:	7db8      	ldrb	r0, [r7, #22]
 8001f7a:	fb00 f202 	mul.w	r2, r0, r2
 8001f7e:	440a      	add	r2, r1
 8001f80:	8979      	ldrh	r1, [r7, #10]
 8001f82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter= data_counter + 2;
 8001f86:	7fbb      	ldrb	r3, [r7, #30]
 8001f88:	3302      	adds	r3, #2
 8001f8a:	77bb      	strb	r3, [r7, #30]
			for (uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)                    // This loop parses the read back data. Loops
 8001f8c:	7e7b      	ldrb	r3, [r7, #25]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	767b      	strb	r3, [r7, #25]
 8001f92:	7e7a      	ldrb	r2, [r7, #25]
 8001f94:	7dbb      	ldrb	r3, [r7, #22]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d3d4      	bcc.n	8001f44 <LTC6804_rdcv+0x134>
			}
			//b.iii
			received_pec = (cell_data[data_counter] << 8 )+ cell_data[data_counter + 1];
 8001f9a:	7fbb      	ldrb	r3, [r7, #30]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	7fbb      	ldrb	r3, [r7, #30]
 8001faa:	3301      	adds	r3, #1
 8001fac:	6939      	ldr	r1, [r7, #16]
 8001fae:	440b      	add	r3, r1
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	81fb      	strh	r3, [r7, #14]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 8001fb8:	7ebb      	ldrb	r3, [r7, #26]
 8001fba:	7e3a      	ldrb	r2, [r7, #24]
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	441a      	add	r2, r3
 8001fc6:	7dfb      	ldrb	r3, [r7, #23]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f9ec 	bl	80023a8 <pec15_calc>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	81bb      	strh	r3, [r7, #12]
			if (received_pec != data_pec)
 8001fd4:	89fa      	ldrh	r2, [r7, #14]
 8001fd6:	89bb      	ldrh	r3, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <LTC6804_rdcv+0x1d0>
			{
				pec_error = -1;
 8001fdc:	23ff      	movs	r3, #255	; 0xff
 8001fde:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_ic = 0 ; current_ic < total_ic; current_ic++) // executes for every LTC6804 in the stack
 8001fe0:	7ebb      	ldrb	r3, [r7, #26]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	76bb      	strb	r3, [r7, #26]
 8001fe6:	7eba      	ldrb	r2, [r7, #26]
 8001fe8:	79bb      	ldrb	r3, [r7, #6]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d3a7      	bcc.n	8001f3e <LTC6804_rdcv+0x12e>
			}
		}
	}
	free(cell_data);
 8001fee:	6938      	ldr	r0, [r7, #16]
 8001ff0:	f009 f99e 	bl	800b330 <free>
	//2
	return(pec_error);
 8001ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <LTC6804_rdcv_reg>:
 *************************************************/
void LTC6804_rdcv_reg(uint8_t reg,
		uint8_t total_ic,
		uint8_t *data
)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	603a      	str	r2, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
 800200c:	460b      	mov	r3, r1
 800200e:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	if (reg == 1)
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d104      	bne.n	8002020 <LTC6804_rdcv_reg+0x20>
	{
		cmd[1] = 0x04;
 8002016:	2304      	movs	r3, #4
 8002018:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	733b      	strb	r3, [r7, #12]
 800201e:	e016      	b.n	800204e <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 2)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d104      	bne.n	8002030 <LTC6804_rdcv_reg+0x30>
	{
		cmd[1] = 0x06;
 8002026:	2306      	movs	r3, #6
 8002028:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800202a:	2300      	movs	r3, #0
 800202c:	733b      	strb	r3, [r7, #12]
 800202e:	e00e      	b.n	800204e <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 3)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d104      	bne.n	8002040 <LTC6804_rdcv_reg+0x40>
	{
		cmd[1] = 0x08;
 8002036:	2308      	movs	r3, #8
 8002038:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	733b      	strb	r3, [r7, #12]
 800203e:	e006      	b.n	800204e <LTC6804_rdcv_reg+0x4e>
	}
	else if (reg == 4)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d103      	bne.n	800204e <LTC6804_rdcv_reg+0x4e>
	{
		cmd[1] = 0x0A;
 8002046:	230a      	movs	r3, #10
 8002048:	737b      	strb	r3, [r7, #13]
		cmd[0] = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	733b      	strb	r3, [r7, #12]

	//2


	//3
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800204e:	f000 f995 	bl	800237c <wakeup_idle>

	//4
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e030      	b.n	80020ba <LTC6804_rdcv_reg+0xba>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3b80      	subs	r3, #128	; 0x80
 8002062:	b2db      	uxtb	r3, r3
 8002064:	733b      	strb	r3, [r7, #12]
		temp_pec = pec15_calc(2, cmd);
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	4619      	mov	r1, r3
 800206c:	2002      	movs	r0, #2
 800206e:	f000 f99b 	bl	80023a8 <pec15_calc>
 8002072:	4603      	mov	r3, r0
 8002074:	827b      	strh	r3, [r7, #18]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 8002076:	8a7b      	ldrh	r3, [r7, #18]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	b29b      	uxth	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	73bb      	strb	r3, [r7, #14]
		cmd[3] = (uint8_t)(temp_pec);
 8002080:	8a7b      	ldrh	r3, [r7, #18]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	73fb      	strb	r3, [r7, #15]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800208c:	480f      	ldr	r0, [pc, #60]	; (80020cc <LTC6804_rdcv_reg+0xcc>)
 800208e:	f006 fe1e 	bl	8008cce <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&data[current_ic*8],8);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	441a      	add	r2, r3
 800209c:	f107 000c 	add.w	r0, r7, #12
 80020a0:	2308      	movs	r3, #8
 80020a2:	2104      	movs	r1, #4
 80020a4:	f000 f9ce 	bl	8002444 <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <LTC6804_rdcv_reg+0xcc>)
 80020b0:	f006 fe0d 	bl	8008cce <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbca      	blt.n	8002058 <LTC6804_rdcv_reg+0x58>
	}
}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40011000 	.word	0x40011000

080020d0 <LTC6804_wrcfg>:

 The function will calculate the needed PEC codes for the write data
 and then transmit data to the ICs on a stack.
 ********************************************************/
void LTC6804_wrcfg(uint8_t total_ic,uint8_t config[][6])
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80020dc:	2306      	movs	r3, #6
 80020de:	75fb      	strb	r3, [r7, #23]
	const uint8_t CMD_LEN = 4+(8*total_ic);
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3304      	adds	r3, #4
 80020e8:	75bb      	strb	r3, [r7, #22]
	uint8_t *cmd;
	uint16_t temp_pec;
	uint8_t cmd_index; //command counter

	cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));
 80020ea:	7dbb      	ldrb	r3, [r7, #22]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f009 f917 	bl	800b320 <malloc>
 80020f2:	4603      	mov	r3, r0
 80020f4:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
	cmd[1] = 0x01;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	3301      	adds	r3, #1
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
	cmd[2] = 0x3d;
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	3302      	adds	r3, #2
 8002108:	223d      	movs	r2, #61	; 0x3d
 800210a:	701a      	strb	r2, [r3, #0]
	cmd[3] = 0x6e;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3303      	adds	r3, #3
 8002110:	226e      	movs	r2, #110	; 0x6e
 8002112:	701a      	strb	r2, [r3, #0]

	//2
	cmd_index = 4;
 8002114:	2304      	movs	r3, #4
 8002116:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 8002118:	2300      	movs	r3, #0
 800211a:	77bb      	strb	r3, [r7, #30]
 800211c:	e03f      	b.n	800219e <LTC6804_wrcfg+0xce>
	{
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 800211e:	2300      	movs	r3, #0
 8002120:	777b      	strb	r3, [r7, #29]
 8002122:	e013      	b.n	800214c <LTC6804_wrcfg+0x7c>
		{
			// i is the byte counter

			cmd[cmd_index] = config[current_ic][current_byte];    //adding the config data to the array to be sent
 8002124:	7fba      	ldrb	r2, [r7, #30]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	461a      	mov	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	1899      	adds	r1, r3, r2
 8002134:	7f7a      	ldrb	r2, [r7, #29]
 8002136:	7ffb      	ldrb	r3, [r7, #31]
 8002138:	6938      	ldr	r0, [r7, #16]
 800213a:	4403      	add	r3, r0
 800213c:	5c8a      	ldrb	r2, [r1, r2]
 800213e:	701a      	strb	r2, [r3, #0]
			cmd_index = cmd_index + 1;
 8002140:	7ffb      	ldrb	r3, [r7, #31]
 8002142:	3301      	adds	r3, #1
 8002144:	77fb      	strb	r3, [r7, #31]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each byte in the CFGR register
 8002146:	7f7b      	ldrb	r3, [r7, #29]
 8002148:	3301      	adds	r3, #1
 800214a:	777b      	strb	r3, [r7, #29]
 800214c:	7f7a      	ldrb	r2, [r7, #29]
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3e7      	bcc.n	8002124 <LTC6804_wrcfg+0x54>
		}
		//3
		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);// calculating the PEC for each board
 8002154:	7fba      	ldrb	r2, [r7, #30]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	461a      	mov	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4413      	add	r3, r2
 8002164:	461a      	mov	r2, r3
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f91c 	bl	80023a8 <pec15_calc>
 8002170:	4603      	mov	r3, r0
 8002172:	81fb      	strh	r3, [r7, #14]
		cmd[cmd_index] = (uint8_t)(temp_pec >> 8);
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	b299      	uxth	r1, r3
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	b2ca      	uxtb	r2, r1
 8002182:	701a      	strb	r2, [r3, #0]
		cmd[cmd_index + 1] = (uint8_t)temp_pec;
 8002184:	7ffb      	ldrb	r3, [r7, #31]
 8002186:	3301      	adds	r3, #1
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	89fa      	ldrh	r2, [r7, #14]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]
		cmd_index = cmd_index + 2;
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	3302      	adds	r3, #2
 8002196:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic ; current_ic++)       // executes for each LTC6804 in stack,
 8002198:	7fbb      	ldrb	r3, [r7, #30]
 800219a:	3301      	adds	r3, #1
 800219c:	77bb      	strb	r3, [r7, #30]
 800219e:	7fba      	ldrb	r2, [r7, #30]
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d3bb      	bcc.n	800211e <LTC6804_wrcfg+0x4e>
	}

	//4
	wakeup_idle ();                                //This will guarantee that the LTC6804 isoSPI port is awake.This command can be removed.
 80021a6:	f000 f8e9 	bl	800237c <wakeup_idle>
	//5
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e036      	b.n	800221e <LTC6804_wrcfg+0x14e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	3b80      	subs	r3, #128	; 0x80
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	701a      	strb	r2, [r3, #0]
		temp_pec = pec15_calc(2, cmd);
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	2002      	movs	r0, #2
 80021c4:	f000 f8f0 	bl	80023a8 <pec15_calc>
 80021c8:	4603      	mov	r3, r0
 80021ca:	81fb      	strh	r3, [r7, #14]
		cmd[2] = (uint8_t)(temp_pec >> 8);
 80021cc:	89fb      	ldrh	r3, [r7, #14]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	3302      	adds	r3, #2
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]
		cmd[3] = (uint8_t)(temp_pec);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	3303      	adds	r3, #3
 80021de:	89fa      	ldrh	r2, [r7, #14]
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80021e4:	2200      	movs	r2, #0
 80021e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ea:	4812      	ldr	r0, [pc, #72]	; (8002234 <LTC6804_wrcfg+0x164>)
 80021ec:	f006 fd6f 	bl	8008cce <HAL_GPIO_WritePin>
		spi_write_array(4,cmd);
 80021f0:	6939      	ldr	r1, [r7, #16]
 80021f2:	2004      	movs	r0, #4
 80021f4:	f000 f90a 	bl	800240c <spi_write_array>
		spi_write_array(8,&cmd[4+(8*current_ic)]);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	3304      	adds	r3, #4
 80021fe:	461a      	mov	r2, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4413      	add	r3, r2
 8002204:	4619      	mov	r1, r3
 8002206:	2008      	movs	r0, #8
 8002208:	f000 f900 	bl	800240c <spi_write_array>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 800220c:	2201      	movs	r2, #1
 800220e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <LTC6804_wrcfg+0x164>)
 8002214:	f006 fd5b 	bl	8008cce <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	3301      	adds	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbc4      	blt.n	80021b0 <LTC6804_wrcfg+0xe0>
	}
	free(cmd);
 8002226:	6938      	ldr	r0, [r7, #16]
 8002228:	f009 f882 	bl	800b330 <free>
}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40011000 	.word	0x40011000

08002238 <LTC6804_rdstata>:
  0: Data read back has matching PEC

  -1: Data read back has incorrect PEC
 ********************************************************/
int8_t LTC6804_rdstata(uint8_t total_ic, uint8_t r_config[][8])
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 8;
 8002244:	2308      	movs	r3, #8
 8002246:	757b      	strb	r3, [r7, #21]

	uint8_t cmd[4];
	uint8_t *rx_data;
	int8_t pec_error = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	77fb      	strb	r3, [r7, #31]
	uint16_t data_pec;
	uint16_t received_pec;
	rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4618      	mov	r0, r3
 8002252:	f009 f865 	bl	800b320 <malloc>
 8002256:	4603      	mov	r3, r0
 8002258:	613b      	str	r3, [r7, #16]
	//1
	cmd[0] = 0x00;
 800225a:	2300      	movs	r3, #0
 800225c:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x10;
 800225e:	2310      	movs	r3, #16
 8002260:	727b      	strb	r3, [r7, #9]
	cmd[2] = 0x2b;
 8002262:	232b      	movs	r3, #43	; 0x2b
 8002264:	72bb      	strb	r3, [r7, #10]
	cmd[3] = 0x0A;
 8002266:	230a      	movs	r3, #10
 8002268:	72fb      	strb	r3, [r7, #11]

	//2
	wakeup_idle (); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800226a:	f000 f887 	bl	800237c <wakeup_idle>
	//3
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	e030      	b.n	80022d6 <LTC6804_rdstata+0x9e>
	{
		cmd[0] = 0x80 + (current_ic<<3); //Setting address
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	b2db      	uxtb	r3, r3
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3b80      	subs	r3, #128	; 0x80
 800227e:	b2db      	uxtb	r3, r3
 8002280:	723b      	strb	r3, [r7, #8]
		data_pec = pec15_calc(2, cmd);
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	4619      	mov	r1, r3
 8002288:	2002      	movs	r0, #2
 800228a:	f000 f88d 	bl	80023a8 <pec15_calc>
 800228e:	4603      	mov	r3, r0
 8002290:	81bb      	strh	r3, [r7, #12]
		cmd[2] = (uint8_t)(data_pec >> 8);
 8002292:	89bb      	ldrh	r3, [r7, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	72bb      	strb	r3, [r7, #10]
		cmd[3] = (uint8_t)(data_pec);
 800229c:	89bb      	ldrh	r3, [r7, #12]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	72fb      	strb	r3, [r7, #11]
		ltc6804_CS_RESET(ltc6804_CS_PIN);
 80022a2:	2200      	movs	r2, #0
 80022a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a8:	4833      	ldr	r0, [pc, #204]	; (8002378 <LTC6804_rdstata+0x140>)
 80022aa:	f006 fd10 	bl	8008cce <HAL_GPIO_WritePin>
		spi_write_read(cmd,4,&rx_data[current_ic*8],8);
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	461a      	mov	r2, r3
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	441a      	add	r2, r3
 80022b8:	f107 0008 	add.w	r0, r7, #8
 80022bc:	2308      	movs	r3, #8
 80022be:	2104      	movs	r1, #4
 80022c0:	f000 f8c0 	bl	8002444 <spi_write_read>
		ltc6804_CS_SET(ltc6804_CS_PIN);
 80022c4:	2201      	movs	r2, #1
 80022c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ca:	482b      	ldr	r0, [pc, #172]	; (8002378 <LTC6804_rdstata+0x140>)
 80022cc:	f006 fcff 	bl	8008cce <HAL_GPIO_WritePin>
	for (int current_ic = 0; current_ic<total_ic; current_ic++)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	3301      	adds	r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbca      	blt.n	8002274 <LTC6804_rdstata+0x3c>
	}

	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 80022de:	2300      	movs	r3, #0
 80022e0:	75fb      	strb	r3, [r7, #23]
 80022e2:	e03c      	b.n	800235e <LTC6804_rdstata+0x126>
	{
		//4.a
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	75bb      	strb	r3, [r7, #22]
 80022e8:	e012      	b.n	8002310 <LTC6804_rdstata+0xd8>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte + (current_ic*BYTES_IN_REG)];
 80022ea:	7dba      	ldrb	r2, [r7, #22]
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	7d79      	ldrb	r1, [r7, #21]
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	461a      	mov	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1899      	adds	r1, r3, r2
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	441a      	add	r2, r3
 8002304:	7dbb      	ldrb	r3, [r7, #22]
 8002306:	7809      	ldrb	r1, [r1, #0]
 8002308:	54d1      	strb	r1, [r2, r3]
		for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 800230a:	7dbb      	ldrb	r3, [r7, #22]
 800230c:	3301      	adds	r3, #1
 800230e:	75bb      	strb	r3, [r7, #22]
 8002310:	7dba      	ldrb	r2, [r7, #22]
 8002312:	7d7b      	ldrb	r3, [r7, #21]
 8002314:	429a      	cmp	r2, r3
 8002316:	d3e8      	bcc.n	80022ea <LTC6804_rdstata+0xb2>
		}
		//4.b
		received_pec = (r_config[current_ic][6]<<8) + r_config[current_ic][7];
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	799b      	ldrb	r3, [r3, #6]
 8002322:	b29b      	uxth	r3, r3
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b29a      	uxth	r2, r3
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	6839      	ldr	r1, [r7, #0]
 800232e:	440b      	add	r3, r1
 8002330:	79db      	ldrb	r3, [r3, #7]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4413      	add	r3, r2
 8002336:	81fb      	strh	r3, [r7, #14]
		data_pec = pec15_calc(6, &r_config[current_ic][0]);
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4619      	mov	r1, r3
 8002342:	2006      	movs	r0, #6
 8002344:	f000 f830 	bl	80023a8 <pec15_calc>
 8002348:	4603      	mov	r3, r0
 800234a:	81bb      	strh	r3, [r7, #12]
		if (received_pec != data_pec)
 800234c:	89fa      	ldrh	r2, [r7, #14]
 800234e:	89bb      	ldrh	r3, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <LTC6804_rdstata+0x120>
		{
			pec_error = -1;
 8002354:	23ff      	movs	r3, #255	; 0xff
 8002356:	77fb      	strb	r3, [r7, #31]
	for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	3301      	adds	r3, #1
 800235c:	75fb      	strb	r3, [r7, #23]
 800235e:	7dfa      	ldrb	r2, [r7, #23]
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	429a      	cmp	r2, r3
 8002364:	d3be      	bcc.n	80022e4 <LTC6804_rdstata+0xac>
		}
	}
	free(rx_data);
 8002366:	6938      	ldr	r0, [r7, #16]
 8002368:	f008 ffe2 	bl	800b330 <free>
	//5
	return(pec_error);
 800236c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40011000 	.word	0x40011000

0800237c <wakeup_idle>:
/*!****************************************************
  \brief Wake isoSPI up from idle state
 Generic wakeup commannd to wake isoSPI up out of idle
 *****************************************************/
void wakeup_idle()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	ltc6804_CS_RESET(ltc6804_CS_PIN);
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002386:	4807      	ldr	r0, [pc, #28]	; (80023a4 <wakeup_idle+0x28>)
 8002388:	f006 fca1 	bl	8008cce <HAL_GPIO_WritePin>
	HAL_Delay(1); //Guarantees the isoSPI will be in ready mode
 800238c:	2001      	movs	r0, #1
 800238e:	f004 fbf1 	bl	8006b74 <HAL_Delay>
	ltc6804_CS_SET(ltc6804_CS_PIN);
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <wakeup_idle+0x28>)
 800239a:	f006 fc98 	bl	8008cce <HAL_GPIO_WritePin>
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40011000 	.word	0x40011000

080023a8 <pec15_calc>:


@return  The calculated pec15 as an unsigned int16_t
 ***********************************************************/
uint16_t pec15_calc(uint8_t len, uint8_t *data)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder,addr;

	remainder = 16;//initialize the PEC
 80023b4:	2310      	movs	r3, #16
 80023b6:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80023b8:	2300      	movs	r3, #0
 80023ba:	737b      	strb	r3, [r7, #13]
 80023bc:	e018      	b.n	80023f0 <pec15_calc+0x48>
	{
		addr = ((remainder>>7)^data[i])&0xff;//calculate PEC table address
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	09db      	lsrs	r3, r3, #7
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	7b7b      	ldrb	r3, [r7, #13]
 80023c6:	6839      	ldr	r1, [r7, #0]
 80023c8:	440b      	add	r3, r1
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4053      	eors	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	817b      	strh	r3, [r7, #10]
		remainder = (remainder<<8)^crc15Table[addr];
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	021b      	lsls	r3, r3, #8
 80023da:	b29a      	uxth	r2, r3
 80023dc:	897b      	ldrh	r3, [r7, #10]
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <pec15_calc+0x60>)
 80023e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4053      	eors	r3, r2
 80023e8:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0; i<len; i++) // loops for each byte in data array
 80023ea:	7b7b      	ldrb	r3, [r7, #13]
 80023ec:	3301      	adds	r3, #1
 80023ee:	737b      	strb	r3, [r7, #13]
 80023f0:	7b7a      	ldrb	r2, [r7, #13]
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d3e2      	bcc.n	80023be <pec15_calc+0x16>
	}
	return(remainder*2);//The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	b29b      	uxth	r3, r3
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	0800ffe0 	.word	0x0800ffe0

0800240c <spi_write_array>:

 */
void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < len; i++)
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e009      	b.n	8002432 <spi_write_array+0x26>
	{
		ltc6804_Write8((char)data[i]);
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fbbc 	bl	8001ba4 <ltc6804_Write8>
	for (uint8_t i = 0; i < len; i++)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	3301      	adds	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3f1      	bcc.n	800241e <spi_write_array+0x12>
	}
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <spi_write_read>:
void spi_write_read(uint8_t tx_Data[],//array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data arry
		uint8_t *rx_data,//Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
)
{
 8002444:	b590      	push	{r4, r7, lr}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	461a      	mov	r2, r3
 8002450:	460b      	mov	r3, r1
 8002452:	72fb      	strb	r3, [r7, #11]
 8002454:	4613      	mov	r3, r2
 8002456:	72bb      	strb	r3, [r7, #10]
	for (uint8_t i = 0; i < tx_len; i++)
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]
 800245c:	e009      	b.n	8002472 <spi_write_read+0x2e>
	{
		ltc6804_Write8(tx_Data[i]);
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb9c 	bl	8001ba4 <ltc6804_Write8>
	for (uint8_t i = 0; i < tx_len; i++)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	3301      	adds	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
 8002472:	7dfa      	ldrb	r2, [r7, #23]
 8002474:	7afb      	ldrb	r3, [r7, #11]
 8002476:	429a      	cmp	r2, r3
 8002478:	d3f1      	bcc.n	800245e <spi_write_read+0x1a>

	}

	for (uint8_t i = 0; i < rx_len; i++)
 800247a:	2300      	movs	r3, #0
 800247c:	75bb      	strb	r3, [r7, #22]
 800247e:	e00a      	b.n	8002496 <spi_write_read+0x52>
	{
		rx_data[i] = (uint8_t)ltc6804_Read8(0xFF);
 8002480:	7dbb      	ldrb	r3, [r7, #22]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	18d4      	adds	r4, r2, r3
 8002486:	20ff      	movs	r0, #255	; 0xff
 8002488:	f7ff fbcc 	bl	8001c24 <ltc6804_Read8>
 800248c:	4603      	mov	r3, r0
 800248e:	7023      	strb	r3, [r4, #0]
	for (uint8_t i = 0; i < rx_len; i++)
 8002490:	7dbb      	ldrb	r3, [r7, #22]
 8002492:	3301      	adds	r3, #1
 8002494:	75bb      	strb	r3, [r7, #22]
 8002496:	7dba      	ldrb	r2, [r7, #22]
 8002498:	7abb      	ldrb	r3, [r7, #10]
 800249a:	429a      	cmp	r2, r3
 800249c:	d3f0      	bcc.n	8002480 <spi_write_read+0x3c>
	}

}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}

080024a8 <read_voltage_percell>:

void read_voltage_percell(void)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
	uint16_t	cellvoltage_16bit[1][12];

	LTC6804_adcv();
 80024ae:	f7ff fc49 	bl	8001d44 <LTC6804_adcv>
	HAL_Delay(300);
 80024b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80024b6:	f004 fb5d 	bl	8006b74 <HAL_Delay>

	LTC6804_rdcv(0, 1, cellvoltage_16bit);
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	461a      	mov	r2, r3
 80024be:	2101      	movs	r1, #1
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff fca5 	bl	8001e10 <LTC6804_rdcv>
	HAL_Delay(10);
 80024c6:	200a      	movs	r0, #10
 80024c8:	f004 fb54 	bl	8006b74 <HAL_Delay>
	state = 1;
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <read_voltage_percell+0xc0>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	701a      	strb	r2, [r3, #0]
	for(uint8_t ik=0;ik<11;ik++) {
 80024d2:	2300      	movs	r3, #0
 80024d4:	77fb      	strb	r3, [r7, #31]
 80024d6:	e03b      	b.n	8002550 <read_voltage_percell+0xa8>
		if(ik >= 5)
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d91b      	bls.n	8002516 <read_voltage_percell+0x6e>
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik+1] / 10000.0);
 80024de:	7ffb      	ldrb	r3, [r7, #31]
 80024e0:	3301      	adds	r3, #1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	f107 0220 	add.w	r2, r7, #32
 80024e8:	4413      	add	r3, r2
 80024ea:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd fff4 	bl	80004dc <__aeabi_i2d>
 80024f4:	a31a      	add	r3, pc, #104	; (adr r3, 8002560 <read_voltage_percell+0xb8>)
 80024f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fa:	f7fe f983 	bl	8000804 <__aeabi_ddiv>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	7ffc      	ldrb	r4, [r7, #31]
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fb4a 	bl	8000ba0 <__aeabi_d2f>
 800250c:	4603      	mov	r3, r0
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <read_voltage_percell+0xc4>)
 8002510:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8002514:	e019      	b.n	800254a <read_voltage_percell+0xa2>
		else
			cellvoltage_float[ik] = (float) (cellvoltage_16bit[0][ik] / 10000.0);
 8002516:	7ffb      	ldrb	r3, [r7, #31]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	f107 0220 	add.w	r2, r7, #32
 800251e:	4413      	add	r3, r2
 8002520:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fd ffd9 	bl	80004dc <__aeabi_i2d>
 800252a:	a30d      	add	r3, pc, #52	; (adr r3, 8002560 <read_voltage_percell+0xb8>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe f968 	bl	8000804 <__aeabi_ddiv>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	7ffc      	ldrb	r4, [r7, #31]
 800253a:	4610      	mov	r0, r2
 800253c:	4619      	mov	r1, r3
 800253e:	f7fe fb2f 	bl	8000ba0 <__aeabi_d2f>
 8002542:	4603      	mov	r3, r0
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <read_voltage_percell+0xc4>)
 8002546:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t ik=0;ik<11;ik++) {
 800254a:	7ffb      	ldrb	r3, [r7, #31]
 800254c:	3301      	adds	r3, #1
 800254e:	77fb      	strb	r3, [r7, #31]
 8002550:	7ffb      	ldrb	r3, [r7, #31]
 8002552:	2b0a      	cmp	r3, #10
 8002554:	d9c0      	bls.n	80024d8 <read_voltage_percell+0x30>
	}
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	3724      	adds	r7, #36	; 0x24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}
 8002560:	00000000 	.word	0x00000000
 8002564:	40c38800 	.word	0x40c38800
 8002568:	200002e0 	.word	0x200002e0
 800256c:	200003c0 	.word	0x200003c0

08002570 <read_sumvoltage>:

void read_sumvoltage(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	LTC6804_adstat();
 8002574:	f7ff fc18 	bl	8001da8 <LTC6804_adstat>
	HAL_Delay(200);
 8002578:	20c8      	movs	r0, #200	; 0xc8
 800257a:	f004 fafb 	bl	8006b74 <HAL_Delay>

	LTC6804_rdstata(1, rd_config);
 800257e:	491a      	ldr	r1, [pc, #104]	; (80025e8 <read_sumvoltage+0x78>)
 8002580:	2001      	movs	r0, #1
 8002582:	f7ff fe59 	bl	8002238 <LTC6804_rdstata>
	HAL_Delay(10);
 8002586:	200a      	movs	r0, #10
 8002588:	f004 faf4 	bl	8006b74 <HAL_Delay>

	sum_voltage = (rd_config[0][0] | (rd_config[0][1] << 8)) * 20 * 0.1 / 1000.0;
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <read_sumvoltage+0x78>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <read_sumvoltage+0x78>)
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	431a      	orrs	r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff9a 	bl	80004dc <__aeabi_i2d>
 80025a8:	a30d      	add	r3, pc, #52	; (adr r3, 80025e0 <read_sumvoltage+0x70>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fd ffff 	bl	80005b0 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <read_sumvoltage+0x7c>)
 80025c0:	f7fe f920 	bl	8000804 <__aeabi_ddiv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7fe fae8 	bl	8000ba0 <__aeabi_d2f>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <read_sumvoltage+0x80>)
 80025d4:	6013      	str	r3, [r2, #0]
	state=2;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <read_sumvoltage+0x84>)
 80025d8:	2202      	movs	r2, #2
 80025da:	701a      	strb	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	9999999a 	.word	0x9999999a
 80025e4:	3fb99999 	.word	0x3fb99999
 80025e8:	2000034c 	.word	0x2000034c
 80025ec:	408f4000 	.word	0x408f4000
 80025f0:	2000041c 	.word	0x2000041c
 80025f4:	200002e0 	.word	0x200002e0

080025f8 <get_balance_status>:


uint16_t get_balance_status(float Cell_Voltage_10data[10])
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	uint16_t balance_status;
	Cell_Voltage_Lowest=4.2;
 8002600:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <get_balance_status+0x148>)
 8002602:	4a50      	ldr	r2, [pc, #320]	; (8002744 <get_balance_status+0x14c>)
 8002604:	601a      	str	r2, [r3, #0]
	balance_status=0x0000;
 8002606:	2300      	movs	r3, #0
 8002608:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_dat;
	float buffer_imbalance;

	for(int ik=0;ik<10;ik++) {
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e017      	b.n	8002640 <get_balance_status+0x48>
		if(Cell_Voltage_10data[ik]<Cell_Voltage_Lowest) Cell_Voltage_Lowest=Cell_Voltage_10data[ik];
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a49      	ldr	r2, [pc, #292]	; (8002740 <get_balance_status+0x148>)
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fdb9 	bl	8001198 <__aeabi_fcmplt>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <get_balance_status+0x42>
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a42      	ldr	r2, [pc, #264]	; (8002740 <get_balance_status+0x148>)
 8002638:	6013      	str	r3, [r2, #0]
	for(int ik=0;ik<10;ik++) {
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b09      	cmp	r3, #9
 8002644:	dde4      	ble.n	8002610 <get_balance_status+0x18>
	}

	for(int ik=0;ik<10;ik++) {
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	e047      	b.n	80026dc <get_balance_status+0xe4>
		delta_vbatt[ik] = Cell_Voltage_10data[ik] - Cell_Voltage_Lowest;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <get_balance_status+0x148>)
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe faf3 	bl	8000c48 <__aeabi_fsub>
 8002662:	4603      	mov	r3, r0
 8002664:	4619      	mov	r1, r3
 8002666:	4a38      	ldr	r2, [pc, #224]	; (8002748 <get_balance_status+0x150>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		buffer_imbalance+=delta_vbatt[ik];
 800266e:	4a36      	ldr	r2, [pc, #216]	; (8002748 <get_balance_status+0x150>)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	4619      	mov	r1, r3
 8002678:	69b8      	ldr	r0, [r7, #24]
 800267a:	f7fe fae7 	bl	8000c4c <__addsf3>
 800267e:	4603      	mov	r3, r0
 8002680:	61bb      	str	r3, [r7, #24]

		if(delta_vbatt[ik]> 0.025 && Cell_Voltage_10data[ik]>VCELL_BALANCE_PERMITTED) {
 8002682:	4a31      	ldr	r2, [pc, #196]	; (8002748 <get_balance_status+0x150>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff38 	bl	8000500 <__aeabi_f2d>
 8002690:	a327      	add	r3, pc, #156	; (adr r3, 8002730 <get_balance_status+0x138>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fe fa1b 	bl	8000ad0 <__aeabi_dcmpgt>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01a      	beq.n	80026d6 <get_balance_status+0xde>
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ff28 	bl	8000500 <__aeabi_f2d>
 80026b0:	a321      	add	r3, pc, #132	; (adr r3, 8002738 <get_balance_status+0x140>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fe fa0b 	bl	8000ad0 <__aeabi_dcmpgt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <get_balance_status+0xde>
			temp_dat = 0x01;
 80026c0:	2301      	movs	r3, #1
 80026c2:	81fb      	strh	r3, [r7, #14]
			temp_dat = temp_dat << ik;
 80026c4:	89fa      	ldrh	r2, [r7, #14]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	81fb      	strh	r3, [r7, #14]
			balance_status= balance_status+temp_dat;
 80026ce:	8bfa      	ldrh	r2, [r7, #30]
 80026d0:	89fb      	ldrh	r3, [r7, #14]
 80026d2:	4413      	add	r3, r2
 80026d4:	83fb      	strh	r3, [r7, #30]
	for(int ik=0;ik<10;ik++) {
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	3301      	adds	r3, #1
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b09      	cmp	r3, #9
 80026e0:	ddb4      	ble.n	800264c <get_balance_status+0x54>
		}
	}
	persen_imbalance=buffer_imbalance*100/9.0/1.2;
 80026e2:	491a      	ldr	r1, [pc, #104]	; (800274c <get_balance_status+0x154>)
 80026e4:	69b8      	ldr	r0, [r7, #24]
 80026e6:	f7fe fbb9 	bl	8000e5c <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd ff07 	bl	8000500 <__aeabi_f2d>
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <get_balance_status+0x158>)
 80026f8:	f7fe f884 	bl	8000804 <__aeabi_ddiv>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <get_balance_status+0x15c>)
 800270a:	f7fe f87b 	bl	8000804 <__aeabi_ddiv>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f7fe fa43 	bl	8000ba0 <__aeabi_d2f>
 800271a:	4603      	mov	r3, r0
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <get_balance_status+0x160>)
 800271e:	6013      	str	r3, [r2, #0]
	return(balance_status);
 8002720:	8bfb      	ldrh	r3, [r7, #30]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	f3af 8000 	nop.w
 8002730:	9999999a 	.word	0x9999999a
 8002734:	3f999999 	.word	0x3f999999
 8002738:	66666666 	.word	0x66666666
 800273c:	400a6666 	.word	0x400a6666
 8002740:	20000428 	.word	0x20000428
 8002744:	40866666 	.word	0x40866666
 8002748:	200003f4 	.word	0x200003f4
 800274c:	42c80000 	.word	0x42c80000
 8002750:	40220000 	.word	0x40220000
 8002754:	3ff33333 	.word	0x3ff33333
 8002758:	20000330 	.word	0x20000330

0800275c <LTC681x_balance_cell>:

void LTC681x_balance_cell(uint16_t cell_to_balance)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
//	uint8_t	 wr_config[1][6];
	uint8_t  cell_balance_status;
	uint16_t temp_var;
	uint8_t lm;

	wr_config[0][4] = 0;
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <LTC681x_balance_cell+0xa4>)
 8002768:	2200      	movs	r2, #0
 800276a:	711a      	strb	r2, [r3, #4]
	wr_config[0][5] = 0;
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <LTC681x_balance_cell+0xa4>)
 800276e:	2200      	movs	r2, #0
 8002770:	715a      	strb	r2, [r3, #5]

	for(lm=0;lm<10;lm++)
 8002772:	2300      	movs	r3, #0
 8002774:	737b      	strb	r3, [r7, #13]
 8002776:	e035      	b.n	80027e4 <LTC681x_balance_cell+0x88>
	{
		cell_balance_status = cell_to_balance >> lm & 0x01;
 8002778:	88fa      	ldrh	r2, [r7, #6]
 800277a:	7b7b      	ldrb	r3, [r7, #13]
 800277c:	fa42 f303 	asr.w	r3, r2, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	733b      	strb	r3, [r7, #12]
		if(lm < 8)
 8002788:	7b7b      	ldrb	r3, [r7, #13]
 800278a:	2b07      	cmp	r3, #7
 800278c:	d817      	bhi.n	80027be <LTC681x_balance_cell+0x62>
		{
			if(lm < 5)
 800278e:	7b7b      	ldrb	r3, [r7, #13]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d805      	bhi.n	80027a0 <LTC681x_balance_cell+0x44>
				temp_var = cell_balance_status << lm;
 8002794:	7b3a      	ldrb	r2, [r7, #12]
 8002796:	7b7b      	ldrb	r3, [r7, #13]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	81fb      	strh	r3, [r7, #14]
 800279e:	e005      	b.n	80027ac <LTC681x_balance_cell+0x50>
			else
				temp_var = cell_balance_status << (lm+1);
 80027a0:	7b3a      	ldrb	r2, [r7, #12]
 80027a2:	7b7b      	ldrb	r3, [r7, #13]
 80027a4:	3301      	adds	r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	81fb      	strh	r3, [r7, #14]

			wr_config[0][4] += temp_var;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <LTC681x_balance_cell+0xa4>)
 80027ae:	791a      	ldrb	r2, [r3, #4]
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <LTC681x_balance_cell+0xa4>)
 80027ba:	711a      	strb	r2, [r3, #4]
 80027bc:	e00d      	b.n	80027da <LTC681x_balance_cell+0x7e>
		}
		else
		{
			temp_var = cell_balance_status << (lm-8);
 80027be:	7b3a      	ldrb	r2, [r7, #12]
 80027c0:	7b7b      	ldrb	r3, [r7, #13]
 80027c2:	3b08      	subs	r3, #8
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	81fb      	strh	r3, [r7, #14]
			wr_config[0][5] += temp_var;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <LTC681x_balance_cell+0xa4>)
 80027cc:	795a      	ldrb	r2, [r3, #5]
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <LTC681x_balance_cell+0xa4>)
 80027d8:	715a      	strb	r2, [r3, #5]
		}

		temp_var=0;
 80027da:	2300      	movs	r3, #0
 80027dc:	81fb      	strh	r3, [r7, #14]
	for(lm=0;lm<10;lm++)
 80027de:	7b7b      	ldrb	r3, [r7, #13]
 80027e0:	3301      	adds	r3, #1
 80027e2:	737b      	strb	r3, [r7, #13]
 80027e4:	7b7b      	ldrb	r3, [r7, #13]
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	d9c6      	bls.n	8002778 <LTC681x_balance_cell+0x1c>
	}
	LTC6804_wrcfg(1, wr_config);
 80027ea:	4905      	ldr	r1, [pc, #20]	; (8002800 <LTC681x_balance_cell+0xa4>)
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff fc6f 	bl	80020d0 <LTC6804_wrcfg>
	HAL_Delay(10);
 80027f2:	200a      	movs	r0, #10
 80027f4:	f004 f9be 	bl	8006b74 <HAL_Delay>
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200003e8 	.word	0x200003e8

08002804 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002814:	4b35      	ldr	r3, [pc, #212]	; (80028ec <MX_ADC1_Init+0xe8>)
 8002816:	4a36      	ldr	r2, [pc, #216]	; (80028f0 <MX_ADC1_Init+0xec>)
 8002818:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <MX_ADC1_Init+0xe8>)
 800281c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <MX_ADC1_Init+0xe8>)
 8002824:	2201      	movs	r2, #1
 8002826:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002828:	4b30      	ldr	r3, [pc, #192]	; (80028ec <MX_ADC1_Init+0xe8>)
 800282a:	2200      	movs	r2, #0
 800282c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <MX_ADC1_Init+0xe8>)
 8002830:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002834:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <MX_ADC1_Init+0xe8>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <MX_ADC1_Init+0xe8>)
 800283e:	2205      	movs	r2, #5
 8002840:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002842:	482a      	ldr	r0, [pc, #168]	; (80028ec <MX_ADC1_Init+0xe8>)
 8002844:	f004 f9ba 	bl	8006bbc <HAL_ADC_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800284e:	f001 f9d1 	bl	8003bf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002852:	2301      	movs	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002856:	2301      	movs	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800285a:	2307      	movs	r3, #7
 800285c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4822      	ldr	r0, [pc, #136]	; (80028ec <MX_ADC1_Init+0xe8>)
 8002864:	f004 fb8e 	bl	8006f84 <HAL_ADC_ConfigChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800286e:	f001 f9c1 	bl	8003bf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002872:	2302      	movs	r3, #2
 8002874:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002876:	2302      	movs	r3, #2
 8002878:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4619      	mov	r1, r3
 800287e:	481b      	ldr	r0, [pc, #108]	; (80028ec <MX_ADC1_Init+0xe8>)
 8002880:	f004 fb80 	bl	8006f84 <HAL_ADC_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800288a:	f001 f9b3 	bl	8003bf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800288e:	2303      	movs	r3, #3
 8002890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002892:	2303      	movs	r3, #3
 8002894:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4814      	ldr	r0, [pc, #80]	; (80028ec <MX_ADC1_Init+0xe8>)
 800289c:	f004 fb72 	bl	8006f84 <HAL_ADC_ConfigChannel>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80028a6:	f001 f9a5 	bl	8003bf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80028aa:	2304      	movs	r3, #4
 80028ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80028ae:	2304      	movs	r3, #4
 80028b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <MX_ADC1_Init+0xe8>)
 80028b8:	f004 fb64 	bl	8006f84 <HAL_ADC_ConfigChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80028c2:	f001 f997 	bl	8003bf4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028c6:	2305      	movs	r3, #5
 80028c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80028ca:	2305      	movs	r3, #5
 80028cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4806      	ldr	r0, [pc, #24]	; (80028ec <MX_ADC1_Init+0xe8>)
 80028d4:	f004 fb56 	bl	8006f84 <HAL_ADC_ConfigChannel>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80028de:	f001 f989 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000042c 	.word	0x2000042c
 80028f0:	40012400 	.word	0x40012400

080028f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <HAL_ADC_MspInit+0xbc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d149      	bne.n	80029a8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_ADC_MspInit+0xc0>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a26      	ldr	r2, [pc, #152]	; (80029b4 <HAL_ADC_MspInit+0xc0>)
 800291a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_ADC_MspInit+0xc0>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_ADC_MspInit+0xc0>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <HAL_ADC_MspInit+0xc0>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_ADC_MspInit+0xc0>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = UP_CEL_EMP_Pin|DOWN_CELL_TEMP_Pin|MOSFET_TEMP_Pin|CURRENT_SENSE_TEMP_Pin
 8002944:	233e      	movs	r3, #62	; 0x3e
 8002946:	613b      	str	r3, [r7, #16]
                          |SPARE_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002948:	2303      	movs	r3, #3
 800294a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	4619      	mov	r1, r3
 8002952:	4819      	ldr	r0, [pc, #100]	; (80029b8 <HAL_ADC_MspInit+0xc4>)
 8002954:	f006 f810 	bl	8008978 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 800295a:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_ADC_MspInit+0xcc>)
 800295c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 8002960:	2200      	movs	r2, #0
 8002962:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800296a:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 8002972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002976:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002978:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 800297a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800297e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 8002982:	2220      	movs	r2, #32
 8002984:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800298c:	480b      	ldr	r0, [pc, #44]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 800298e:	f005 fcb3 	bl	80082f8 <HAL_DMA_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002998:	f001 f92c 	bl	8003bf4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 80029a0:	621a      	str	r2, [r3, #32]
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <HAL_ADC_MspInit+0xc8>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029a8:	bf00      	nop
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40012400 	.word	0x40012400
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010800 	.word	0x40010800
 80029bc:	2000045c 	.word	0x2000045c
 80029c0:	40020008 	.word	0x40020008

080029c4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <MX_CAN_Init+0x64>)
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <MX_CAN_Init+0x68>)
 80029cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <MX_CAN_Init+0x64>)
 80029d0:	2208      	movs	r2, #8
 80029d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <MX_CAN_Init+0x64>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <MX_CAN_Init+0x64>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_CAN_Init+0x64>)
 80029e2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80029e6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <MX_CAN_Init+0x64>)
 80029ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <MX_CAN_Init+0x64>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <MX_CAN_Init+0x64>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <MX_CAN_Init+0x64>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <MX_CAN_Init+0x64>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <MX_CAN_Init+0x64>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <MX_CAN_Init+0x64>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a14:	4804      	ldr	r0, [pc, #16]	; (8002a28 <MX_CAN_Init+0x64>)
 8002a16:	f004 fcae 	bl	8007376 <HAL_CAN_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002a20:	f001 f8e8 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200004bc 	.word	0x200004bc
 8002a2c:	40006400 	.word	0x40006400

08002a30 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a29      	ldr	r2, [pc, #164]	; (8002af0 <HAL_CAN_MspInit+0xc0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d14b      	bne.n	8002ae8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a50:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <HAL_CAN_MspInit+0xc4>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <HAL_CAN_MspInit+0xc4>)
 8002a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	61d3      	str	r3, [r2, #28]
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_CAN_MspInit+0xc4>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_CAN_MspInit+0xc4>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_CAN_MspInit+0xc4>)
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	6193      	str	r3, [r2, #24]
 8002a74:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <HAL_CAN_MspInit+0xc4>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4818      	ldr	r0, [pc, #96]	; (8002af8 <HAL_CAN_MspInit+0xc8>)
 8002a96:	f005 ff6f 	bl	8008978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4812      	ldr	r0, [pc, #72]	; (8002af8 <HAL_CAN_MspInit+0xc8>)
 8002ab0:	f005 ff62 	bl	8008978 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_CAN_MspInit+0xcc>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <HAL_CAN_MspInit+0xcc>)
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	2014      	movs	r0, #20
 8002ade:	f005 fbd4 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002ae2:	2014      	movs	r0, #20
 8002ae4:	f005 fbed 	bl	80082c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	; 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40006400 	.word	0x40006400
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010c00 	.word	0x40010c00
 8002afc:	40010000 	.word	0x40010000

08002b00 <CANTX_BattParameter>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CANTX_BattParameter() {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;

	Batt_voltage.m_uint16_t	= VBATT*100;
 8002b06:	4b84      	ldr	r3, [pc, #528]	; (8002d18 <CANTX_BattParameter+0x218>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4984      	ldr	r1, [pc, #528]	; (8002d1c <CANTX_BattParameter+0x21c>)
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe f9a5 	bl	8000e5c <__aeabi_fmul>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe fb8d 	bl	8001234 <__aeabi_f2uiz>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	4b80      	ldr	r3, [pc, #512]	; (8002d20 <CANTX_BattParameter+0x220>)
 8002b20:	801a      	strh	r2, [r3, #0]
	Batt_current.m_uint16_t	= fabs(IBATT)*10;
 8002b22:	4b80      	ldr	r3, [pc, #512]	; (8002d24 <CANTX_BattParameter+0x224>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fce8 	bl	8000500 <__aeabi_f2d>
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <CANTX_BattParameter+0x228>)
 8002b36:	f7fd fd3b 	bl	80005b0 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe f80d 	bl	8000b60 <__aeabi_d2uiz>
 8002b46:	4603      	mov	r3, r0
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	4b78      	ldr	r3, [pc, #480]	; (8002d2c <CANTX_BattParameter+0x22c>)
 8002b4c:	801a      	strh	r2, [r3, #0]
	Batt_SOC.m_uint16_t		= (int)Pack_SOC;
 8002b4e:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <CANTX_BattParameter+0x230>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fe fb48 	bl	80011e8 <__aeabi_f2iz>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <CANTX_BattParameter+0x234>)
 8002b5e:	801a      	strh	r2, [r3, #0]

	Tmax=Suhu_T1;
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <CANTX_BattParameter+0x238>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a75      	ldr	r2, [pc, #468]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002b66:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8002b68:	4b74      	ldr	r3, [pc, #464]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a74      	ldr	r2, [pc, #464]	; (8002d40 <CANTX_BattParameter+0x240>)
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fb10 	bl	8001198 <__aeabi_fcmplt>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <CANTX_BattParameter+0x86>
 8002b7e:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <CANTX_BattParameter+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6e      	ldr	r2, [pc, #440]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002b84:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 8002b86:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	; (8002d44 <CANTX_BattParameter+0x244>)
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fb01 	bl	8001198 <__aeabi_fcmplt>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <CANTX_BattParameter+0xa4>
 8002b9c:	4b69      	ldr	r3, [pc, #420]	; (8002d44 <CANTX_BattParameter+0x244>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a66      	ldr	r2, [pc, #408]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002ba2:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 8002ba4:	4b65      	ldr	r3, [pc, #404]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a67      	ldr	r2, [pc, #412]	; (8002d48 <CANTX_BattParameter+0x248>)
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe faf2 	bl	8001198 <__aeabi_fcmplt>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <CANTX_BattParameter+0xc2>
 8002bba:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <CANTX_BattParameter+0x248>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002bc0:	6013      	str	r3, [r2, #0]

	Batt_temp.m_uint16_t		= Tmax+40;
 8002bc2:	4b5e      	ldr	r3, [pc, #376]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4961      	ldr	r1, [pc, #388]	; (8002d4c <CANTX_BattParameter+0x24c>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f83f 	bl	8000c4c <__addsf3>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fe fb2f 	bl	8001234 <__aeabi_f2uiz>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <CANTX_BattParameter+0x250>)
 8002bdc:	801a      	strh	r2, [r3, #0]
	Batt_capacity.m_uint16_t	= Pack_Cap*10;
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <CANTX_BattParameter+0x254>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	495d      	ldr	r1, [pc, #372]	; (8002d58 <CANTX_BattParameter+0x258>)
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe f939 	bl	8000e5c <__aeabi_fmul>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe fb21 	bl	8001234 <__aeabi_f2uiz>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <CANTX_BattParameter+0x25c>)
 8002bf8:	801a      	strh	r2, [r3, #0]
	Batt_SOH.m_uint16_t			= SOH_batt;
 8002bfa:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <CANTX_BattParameter+0x260>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <CANTX_BattParameter+0x264>)
 8002c02:	801a      	strh	r2, [r3, #0]
	Batt_cycle.m_uint16_t		= cycle;
 8002c04:	4b58      	ldr	r3, [pc, #352]	; (8002d68 <CANTX_BattParameter+0x268>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	4b58      	ldr	r3, [pc, #352]	; (8002d6c <CANTX_BattParameter+0x26c>)
 8002c0c:	801a      	strh	r2, [r3, #0]
	max_voltage.m_uint16_t 		= 63;
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <CANTX_BattParameter+0x270>)
 8002c10:	223f      	movs	r2, #63	; 0x3f
 8002c12:	801a      	strh	r2, [r3, #0]

	max_chargevoltage.m_uint16_t = VBATT*1.3;
 8002c14:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <CANTX_BattParameter+0x218>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fc71 	bl	8000500 <__aeabi_f2d>
 8002c1e:	a33c      	add	r3, pc, #240	; (adr r3, 8002d10 <CANTX_BattParameter+0x210>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd fcc4 	bl	80005b0 <__aeabi_dmul>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	f7fd ff96 	bl	8000b60 <__aeabi_d2uiz>
 8002c34:	4603      	mov	r3, r0
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	4b4e      	ldr	r3, [pc, #312]	; (8002d74 <CANTX_BattParameter+0x274>)
 8002c3a:	801a      	strh	r2, [r3, #0]
	max_chargecurrent.m_uint16_t = VBATT-20;
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <CANTX_BattParameter+0x218>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <CANTX_BattParameter+0x278>)
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe f800 	bl	8000c48 <__aeabi_fsub>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe faf2 	bl	8001234 <__aeabi_f2uiz>
 8002c50:	4603      	mov	r3, r0
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <CANTX_BattParameter+0x27c>)
 8002c56:	801a      	strh	r2, [r3, #0]

	// *********************** GENERAL CAN COMMUNICATION ******************************
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <CANTX_BattParameter+0x280>)
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);
 8002c5e:	4b48      	ldr	r3, [pc, #288]	; (8002d80 <CANTX_BattParameter+0x280>)
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <CANTX_BattParameter+0x284>)
 8002c62:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = Batt_voltage.m_bytes[0];
 8002c64:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <CANTX_BattParameter+0x220>)
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002c6a:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_voltage.m_bytes[1];
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <CANTX_BattParameter+0x220>)
 8002c6e:	785a      	ldrb	r2, [r3, #1]
 8002c70:	4b45      	ldr	r3, [pc, #276]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002c72:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_current.m_bytes[0];
 8002c74:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <CANTX_BattParameter+0x22c>)
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002c7a:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_current.m_bytes[1];
 8002c7c:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <CANTX_BattParameter+0x22c>)
 8002c7e:	785a      	ldrb	r2, [r3, #1]
 8002c80:	4b41      	ldr	r3, [pc, #260]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002c82:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_SOC.m_bytes[0];
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <CANTX_BattParameter+0x234>)
 8002c86:	781a      	ldrb	r2, [r3, #0]
 8002c88:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002c8a:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_SOC.m_bytes[1];
 8002c8c:	4b29      	ldr	r3, [pc, #164]	; (8002d34 <CANTX_BattParameter+0x234>)
 8002c8e:	785a      	ldrb	r2, [r3, #1]
 8002c90:	4b3d      	ldr	r3, [pc, #244]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002c92:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = Tmax+40;
 8002c94:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <CANTX_BattParameter+0x23c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	492c      	ldr	r1, [pc, #176]	; (8002d4c <CANTX_BattParameter+0x24c>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd ffd6 	bl	8000c4c <__addsf3>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fe fac6 	bl	8001234 <__aeabi_f2uiz>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002cae:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 1;
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	71da      	strb	r2, [r3, #7]
	//		Tx_data[6] = Batt_temp.m_bytes[1];
	//		Tx_data[7] = Batt_temp.m_bytes[0];

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <CANTX_BattParameter+0x280>)
 8002cb8:	2208      	movs	r2, #8
 8002cba:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002cbc:	e00f      	b.n	8002cde <CANTX_BattParameter+0x1de>
		if(delay_mailboxcheck > 1000){
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc4:	dd08      	ble.n	8002cd8 <CANTX_BattParameter+0x1d8>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <CANTX_BattParameter+0x28c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4830      	ldr	r0, [pc, #192]	; (8002d90 <CANTX_BattParameter+0x290>)
 8002cce:	f004 fe34 	bl	800793a <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
			break;
 8002cd6:	e008      	b.n	8002cea <CANTX_BattParameter+0x1ea>
		}
		delay_mailboxcheck++;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002cde:	482c      	ldr	r0, [pc, #176]	; (8002d90 <CANTX_BattParameter+0x290>)
 8002ce0:	f004 fe6f 	bl	80079c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0e9      	beq.n	8002cbe <CANTX_BattParameter+0x1be>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <CANTX_BattParameter+0x28c>)
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <CANTX_BattParameter+0x288>)
 8002cee:	4924      	ldr	r1, [pc, #144]	; (8002d80 <CANTX_BattParameter+0x280>)
 8002cf0:	4827      	ldr	r0, [pc, #156]	; (8002d90 <CANTX_BattParameter+0x290>)
 8002cf2:	f004 fd48 	bl	8007786 <HAL_CAN_AddTxMessage>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <CANTX_BattParameter+0x20a>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002cfc:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <CANTX_BattParameter+0x28c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	4823      	ldr	r0, [pc, #140]	; (8002d90 <CANTX_BattParameter+0x290>)
 8002d04:	f004 fe19 	bl	800793a <HAL_CAN_AbortTxRequest>
		return;
 8002d08:	bf00      	nop
//		Error_Handler();
	}

}
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	cccccccd 	.word	0xcccccccd
 8002d14:	3ff4cccc 	.word	0x3ff4cccc
 8002d18:	20000280 	.word	0x20000280
 8002d1c:	42c80000 	.word	0x42c80000
 8002d20:	2000059c 	.word	0x2000059c
 8002d24:	200002f4 	.word	0x200002f4
 8002d28:	40240000 	.word	0x40240000
 8002d2c:	200004f8 	.word	0x200004f8
 8002d30:	20000370 	.word	0x20000370
 8002d34:	20000500 	.word	0x20000500
 8002d38:	20000304 	.word	0x20000304
 8002d3c:	20000548 	.word	0x20000548
 8002d40:	20000378 	.word	0x20000378
 8002d44:	20000284 	.word	0x20000284
 8002d48:	20000334 	.word	0x20000334
 8002d4c:	42200000 	.word	0x42200000
 8002d50:	20000544 	.word	0x20000544
 8002d54:	2000000c 	.word	0x2000000c
 8002d58:	41200000 	.word	0x41200000
 8002d5c:	20000594 	.word	0x20000594
 8002d60:	20000000 	.word	0x20000000
 8002d64:	200004a8 	.word	0x200004a8
 8002d68:	2000024c 	.word	0x2000024c
 8002d6c:	200004f0 	.word	0x200004f0
 8002d70:	20000570 	.word	0x20000570
 8002d74:	20000590 	.word	0x20000590
 8002d78:	41a00000 	.word	0x41a00000
 8002d7c:	200004ac 	.word	0x200004ac
 8002d80:	20000578 	.word	0x20000578
 8002d84:	0b000a22 	.word	0x0b000a22
 8002d88:	200004b4 	.word	0x200004b4
 8002d8c:	20000568 	.word	0x20000568
 8002d90:	200004bc 	.word	0x200004bc

08002d94 <CANTX_BattProtection>:

void CANTX_BattProtection() {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 8002d9a:	4b8c      	ldr	r3, [pc, #560]	; (8002fcc <CANTX_BattProtection+0x238>)
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code);
 8002da0:	4b8a      	ldr	r3, [pc, #552]	; (8002fcc <CANTX_BattProtection+0x238>)
 8002da2:	4a8b      	ldr	r2, [pc, #556]	; (8002fd0 <CANTX_BattProtection+0x23c>)
 8002da4:	605a      	str	r2, [r3, #4]
	//CAN Data #2
	Tx_data[0] = Batt_capacity.m_bytes[0];
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <CANTX_BattProtection+0x240>)
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	4b8b      	ldr	r3, [pc, #556]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002dac:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_capacity.m_bytes[1];
 8002dae:	4b89      	ldr	r3, [pc, #548]	; (8002fd4 <CANTX_BattProtection+0x240>)
 8002db0:	785a      	ldrb	r2, [r3, #1]
 8002db2:	4b89      	ldr	r3, [pc, #548]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002db4:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_SOH.m_bytes[0];
 8002db6:	4b89      	ldr	r3, [pc, #548]	; (8002fdc <CANTX_BattProtection+0x248>)
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	4b87      	ldr	r3, [pc, #540]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002dbc:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_SOH.m_bytes[1];
 8002dbe:	4b87      	ldr	r3, [pc, #540]	; (8002fdc <CANTX_BattProtection+0x248>)
 8002dc0:	785a      	ldrb	r2, [r3, #1]
 8002dc2:	4b85      	ldr	r3, [pc, #532]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002dc4:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_cycle.m_bytes[0];
 8002dc6:	4b86      	ldr	r3, [pc, #536]	; (8002fe0 <CANTX_BattProtection+0x24c>)
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	4b83      	ldr	r3, [pc, #524]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002dcc:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_cycle.m_bytes[1];
 8002dce:	4b84      	ldr	r3, [pc, #528]	; (8002fe0 <CANTX_BattProtection+0x24c>)
 8002dd0:	785a      	ldrb	r2, [r3, #1]
 8002dd2:	4b81      	ldr	r3, [pc, #516]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002dd4:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = flag_trip_overcurrentdischarge&0x01;
 8002dd6:	4b83      	ldr	r3, [pc, #524]	; (8002fe4 <CANTX_BattProtection+0x250>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	4b7d      	ldr	r3, [pc, #500]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002de2:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<1;
 8002de4:	4b7c      	ldr	r3, [pc, #496]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002de6:	799b      	ldrb	r3, [r3, #6]
 8002de8:	b25a      	sxtb	r2, r3
 8002dea:	4b7f      	ldr	r3, [pc, #508]	; (8002fe8 <CANTX_BattProtection+0x254>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	b25b      	sxtb	r3, r3
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b25b      	sxtb	r3, r3
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b76      	ldr	r3, [pc, #472]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e00:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_shortcircuit&0x01)<<2;
 8002e02:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e04:	799b      	ldrb	r3, [r3, #6]
 8002e06:	b25a      	sxtb	r2, r3
 8002e08:	4b78      	ldr	r3, [pc, #480]	; (8002fec <CANTX_BattProtection+0x258>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	b25b      	sxtb	r3, r3
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	4b6e      	ldr	r3, [pc, #440]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e1e:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 8002e20:	4b6d      	ldr	r3, [pc, #436]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e22:	799b      	ldrb	r3, [r3, #6]
 8002e24:	b25a      	sxtb	r2, r3
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <CANTX_BattProtection+0x25c>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	b25b      	sxtb	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b67      	ldr	r3, [pc, #412]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e3c:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8002e3e:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e40:	799b      	ldrb	r3, [r3, #6]
 8002e42:	b25a      	sxtb	r2, r3
 8002e44:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <CANTX_BattProtection+0x260>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	b25b      	sxtb	r3, r3
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e5a:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8002e5c:	4b5e      	ldr	r3, [pc, #376]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e5e:	799b      	ldrb	r3, [r3, #6]
 8002e60:	b25a      	sxtb	r2, r3
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <CANTX_BattProtection+0x25c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	4313      	orrs	r3, r2
 8002e72:	b25b      	sxtb	r3, r3
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b58      	ldr	r3, [pc, #352]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e78:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 8002e7a:	4b57      	ldr	r3, [pc, #348]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e7c:	799b      	ldrb	r3, [r3, #6]
 8002e7e:	b25a      	sxtb	r2, r3
 8002e80:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <CANTX_BattProtection+0x260>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	b25b      	sxtb	r3, r3
 8002e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e96:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |=  (flag_trip_undervoltage&0x01)<<7;
 8002e98:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002e9a:	799b      	ldrb	r3, [r3, #6]
 8002e9c:	b25a      	sxtb	r2, r3
 8002e9e:	4b56      	ldr	r3, [pc, #344]	; (8002ff8 <CANTX_BattProtection+0x264>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	01db      	lsls	r3, r3, #7
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b25b      	sxtb	r3, r3
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002eae:	719a      	strb	r2, [r3, #6]

	Tx_data[7] = (flag_trip_overvoltage&0x01);
 8002eb0:	4b52      	ldr	r3, [pc, #328]	; (8002ffc <CANTX_BattProtection+0x268>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002ebc:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<1;
 8002ebe:	4b46      	ldr	r3, [pc, #280]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002ec0:	79db      	ldrb	r3, [r3, #7]
 8002ec2:	b25a      	sxtb	r2, r3
 8002ec4:	4b4e      	ldr	r3, [pc, #312]	; (8003000 <CANTX_BattProtection+0x26c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	b25b      	sxtb	r3, r3
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	b25b      	sxtb	r3, r3
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002eda:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_unbalance&0x01)<<2;
 8002edc:	4b3e      	ldr	r3, [pc, #248]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002ede:	79db      	ldrb	r3, [r3, #7]
 8002ee0:	b25a      	sxtb	r2, r3
 8002ee2:	4b48      	ldr	r3, [pc, #288]	; (8003004 <CANTX_BattProtection+0x270>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	b25b      	sxtb	r3, r3
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002ef8:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002efc:	79db      	ldrb	r3, [r3, #7]
 8002efe:	b25a      	sxtb	r2, r3
 8002f00:	4b41      	ldr	r3, [pc, #260]	; (8003008 <CANTX_BattProtection+0x274>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	b25b      	sxtb	r3, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002f16:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (charge_state&0x01)<<4;
 8002f18:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002f1a:	79db      	ldrb	r3, [r3, #7]
 8002f1c:	b25a      	sxtb	r2, r3
 8002f1e:	4b3b      	ldr	r3, [pc, #236]	; (800300c <CANTX_BattProtection+0x278>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4b29      	ldr	r3, [pc, #164]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002f34:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (discharge_state&0x01)<<5;
 8002f36:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002f38:	79db      	ldrb	r3, [r3, #7]
 8002f3a:	b25a      	sxtb	r2, r3
 8002f3c:	4b34      	ldr	r3, [pc, #208]	; (8003010 <CANTX_BattProtection+0x27c>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	b25b      	sxtb	r3, r3
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002f52:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (sleep_state&0x01)<<6;
 8002f54:	4b20      	ldr	r3, [pc, #128]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002f56:	79db      	ldrb	r3, [r3, #7]
 8002f58:	b25a      	sxtb	r2, r3
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <CANTX_BattProtection+0x280>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	019b      	lsls	r3, r3, #6
 8002f60:	b25b      	sxtb	r3, r3
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002f70:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 8002f72:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <CANTX_BattProtection+0x238>)
 8002f74:	2208      	movs	r2, #8
 8002f76:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002f78:	e00f      	b.n	8002f9a <CANTX_BattProtection+0x206>
		if(delay_mailboxcheck > 1000){
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f80:	dd08      	ble.n	8002f94 <CANTX_BattProtection+0x200>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <CANTX_BattProtection+0x284>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4824      	ldr	r0, [pc, #144]	; (800301c <CANTX_BattProtection+0x288>)
 8002f8a:	f004 fcd6 	bl	800793a <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
			break;
 8002f92:	e008      	b.n	8002fa6 <CANTX_BattProtection+0x212>
		}
		delay_mailboxcheck++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3301      	adds	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002f9a:	4820      	ldr	r0, [pc, #128]	; (800301c <CANTX_BattProtection+0x288>)
 8002f9c:	f004 fd11 	bl	80079c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0e9      	beq.n	8002f7a <CANTX_BattProtection+0x1e6>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002fa6:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <CANTX_BattProtection+0x284>)
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <CANTX_BattProtection+0x244>)
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <CANTX_BattProtection+0x238>)
 8002fac:	481b      	ldr	r0, [pc, #108]	; (800301c <CANTX_BattProtection+0x288>)
 8002fae:	f004 fbea 	bl	8007786 <HAL_CAN_AddTxMessage>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d006      	beq.n	8002fc6 <CANTX_BattProtection+0x232>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <CANTX_BattProtection+0x284>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4817      	ldr	r0, [pc, #92]	; (800301c <CANTX_BattProtection+0x288>)
 8002fc0:	f004 fcbb 	bl	800793a <HAL_CAN_AbortTxRequest>
		return;
 8002fc4:	bf00      	nop
//		Error_Handler();
	}
}
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000578 	.word	0x20000578
 8002fd0:	0b100a22 	.word	0x0b100a22
 8002fd4:	20000594 	.word	0x20000594
 8002fd8:	200004b4 	.word	0x200004b4
 8002fdc:	200004a8 	.word	0x200004a8
 8002fe0:	200004f0 	.word	0x200004f0
 8002fe4:	2000030c 	.word	0x2000030c
 8002fe8:	20000322 	.word	0x20000322
 8002fec:	2000025f 	.word	0x2000025f
 8002ff0:	2000027c 	.word	0x2000027c
 8002ff4:	200002fc 	.word	0x200002fc
 8002ff8:	200002fd 	.word	0x200002fd
 8002ffc:	20000374 	.word	0x20000374
 8003000:	20000328 	.word	0x20000328
 8003004:	2000025c 	.word	0x2000025c
 8003008:	20000268 	.word	0x20000268
 800300c:	20000338 	.word	0x20000338
 8003010:	20000288 	.word	0x20000288
 8003014:	2000037c 	.word	0x2000037c
 8003018:	20000568 	.word	0x20000568
 800301c:	200004bc 	.word	0x200004bc

08003020 <CANTX_ReportToCharger>:

void CANTX_ReportToCharger() {
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
	// *********************** CHARGING CAN COMMUNICATION ******************************
	int delay_mailboxcheck;
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <CANTX_ReportToCharger+0xc8>)
 8003028:	2204      	movs	r2, #4
 800302a:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code);
 800302c:	4b2e      	ldr	r3, [pc, #184]	; (80030e8 <CANTX_ReportToCharger+0xc8>)
 800302e:	4a2f      	ldr	r2, [pc, #188]	; (80030ec <CANTX_ReportToCharger+0xcc>)
 8003030:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = max_chargevoltage.m_bytes[0];
 8003032:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <CANTX_ReportToCharger+0xd0>)
 8003034:	781a      	ldrb	r2, [r3, #0]
 8003036:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 8003038:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = max_chargevoltage.m_bytes[1];
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <CANTX_ReportToCharger+0xd0>)
 800303c:	785a      	ldrb	r2, [r3, #1]
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 8003040:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = max_chargecurrent.m_bytes[0];
 8003042:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <CANTX_ReportToCharger+0xd8>)
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 8003048:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = max_chargecurrent.m_bytes[1];
 800304a:	4b2b      	ldr	r3, [pc, #172]	; (80030f8 <CANTX_ReportToCharger+0xd8>)
 800304c:	785a      	ldrb	r2, [r3, #1]
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 8003050:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = charge_state;
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <CANTX_ReportToCharger+0xdc>)
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 8003058:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = 0;
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 800305c:	2200      	movs	r2, #0
 800305e:	715a      	strb	r2, [r3, #5]

	if(BMS_mode == 0) handshake_recognition = 0x55;
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <CANTX_ReportToCharger+0xe0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <CANTX_ReportToCharger+0x50>
 8003068:	4b26      	ldr	r3, [pc, #152]	; (8003104 <CANTX_ReportToCharger+0xe4>)
 800306a:	2255      	movs	r2, #85	; 0x55
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	e006      	b.n	800307e <CANTX_ReportToCharger+0x5e>
	else if(BMS_mode == 2) handshake_recognition = 0xAA;
 8003070:	4b23      	ldr	r3, [pc, #140]	; (8003100 <CANTX_ReportToCharger+0xe0>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d102      	bne.n	800307e <CANTX_ReportToCharger+0x5e>
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <CANTX_ReportToCharger+0xe4>)
 800307a:	22aa      	movs	r2, #170	; 0xaa
 800307c:	801a      	strh	r2, [r3, #0]

	Tx_data[6] = handshake_recognition;
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <CANTX_ReportToCharger+0xe4>)
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 8003086:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 800308a:	2200      	movs	r2, #0
 800308c:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 800308e:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <CANTX_ReportToCharger+0xc8>)
 8003090:	2208      	movs	r2, #8
 8003092:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8003094:	e00f      	b.n	80030b6 <CANTX_ReportToCharger+0x96>
		if(delay_mailboxcheck > 1000){
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309c:	dd08      	ble.n	80030b0 <CANTX_ReportToCharger+0x90>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <CANTX_ReportToCharger+0xe8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4819      	ldr	r0, [pc, #100]	; (800310c <CANTX_ReportToCharger+0xec>)
 80030a6:	f004 fc48 	bl	800793a <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
			break;
 80030ae:	e008      	b.n	80030c2 <CANTX_ReportToCharger+0xa2>
		}
		delay_mailboxcheck++;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3301      	adds	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80030b6:	4815      	ldr	r0, [pc, #84]	; (800310c <CANTX_ReportToCharger+0xec>)
 80030b8:	f004 fc83 	bl	80079c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0e9      	beq.n	8003096 <CANTX_ReportToCharger+0x76>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <CANTX_ReportToCharger+0xe8>)
 80030c4:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <CANTX_ReportToCharger+0xd4>)
 80030c6:	4908      	ldr	r1, [pc, #32]	; (80030e8 <CANTX_ReportToCharger+0xc8>)
 80030c8:	4810      	ldr	r0, [pc, #64]	; (800310c <CANTX_ReportToCharger+0xec>)
 80030ca:	f004 fb5c 	bl	8007786 <HAL_CAN_AddTxMessage>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d006      	beq.n	80030e2 <CANTX_ReportToCharger+0xc2>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <CANTX_ReportToCharger+0xe8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	480c      	ldr	r0, [pc, #48]	; (800310c <CANTX_ReportToCharger+0xec>)
 80030dc:	f004 fc2d 	bl	800793a <HAL_CAN_AbortTxRequest>
		return;
 80030e0:	bf00      	nop
//		Error_Handler();
	}
}
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000578 	.word	0x20000578
 80030ec:	0e000a22 	.word	0x0e000a22
 80030f0:	20000590 	.word	0x20000590
 80030f4:	200004b4 	.word	0x200004b4
 80030f8:	200004ac 	.word	0x200004ac
 80030fc:	20000338 	.word	0x20000338
 8003100:	2000036c 	.word	0x2000036c
 8003104:	200004a0 	.word	0x200004a0
 8003108:	20000568 	.word	0x20000568
 800310c:	200004bc 	.word	0x200004bc

08003110 <CANTX_BattId>:

void CANTX_BattId() {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 8003116:	4b25      	ldr	r3, [pc, #148]	; (80031ac <CANTX_BattId+0x9c>)
 8003118:	2204      	movs	r2, #4
 800311a:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E1<<20|UNIQUE_Code);
 800311c:	4b23      	ldr	r3, [pc, #140]	; (80031ac <CANTX_BattId+0x9c>)
 800311e:	4a24      	ldr	r2, [pc, #144]	; (80031b0 <CANTX_BattId+0xa0>)
 8003120:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = 0;
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <CANTX_BattId+0xa4>)
 8003124:	2200      	movs	r2, #0
 8003126:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = 0;
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <CANTX_BattId+0xa4>)
 800312a:	2200      	movs	r2, #0
 800312c:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = 0x21;
 800312e:	4b21      	ldr	r3, [pc, #132]	; (80031b4 <CANTX_BattId+0xa4>)
 8003130:	2221      	movs	r2, #33	; 0x21
 8003132:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = 0x04;
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <CANTX_BattId+0xa4>)
 8003136:	2204      	movs	r2, #4
 8003138:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = UNIQUE_Code >> 16;
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <CANTX_BattId+0xa4>)
 800313c:	2200      	movs	r2, #0
 800313e:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = UNIQUE_Code >> 8;
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <CANTX_BattId+0xa4>)
 8003142:	220a      	movs	r2, #10
 8003144:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = UNIQUE_Code;
 8003146:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <CANTX_BattId+0xa4>)
 8003148:	2222      	movs	r2, #34	; 0x22
 800314a:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <CANTX_BattId+0xa4>)
 800314e:	2200      	movs	r2, #0
 8003150:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 8003152:	4b16      	ldr	r3, [pc, #88]	; (80031ac <CANTX_BattId+0x9c>)
 8003154:	2208      	movs	r2, #8
 8003156:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8003158:	e00f      	b.n	800317a <CANTX_BattId+0x6a>
		if(delay_mailboxcheck > 1000){
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003160:	dd08      	ble.n	8003174 <CANTX_BattId+0x64>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <CANTX_BattId+0xa8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4619      	mov	r1, r3
 8003168:	4814      	ldr	r0, [pc, #80]	; (80031bc <CANTX_BattId+0xac>)
 800316a:	f004 fbe6 	bl	800793a <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
			break;
 8003172:	e008      	b.n	8003186 <CANTX_BattId+0x76>
		}
		delay_mailboxcheck++;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3301      	adds	r3, #1
 8003178:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800317a:	4810      	ldr	r0, [pc, #64]	; (80031bc <CANTX_BattId+0xac>)
 800317c:	f004 fc21 	bl	80079c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0e9      	beq.n	800315a <CANTX_BattId+0x4a>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <CANTX_BattId+0xa8>)
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <CANTX_BattId+0xa4>)
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <CANTX_BattId+0x9c>)
 800318c:	480b      	ldr	r0, [pc, #44]	; (80031bc <CANTX_BattId+0xac>)
 800318e:	f004 fafa 	bl	8007786 <HAL_CAN_AddTxMessage>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <CANTX_BattId+0x96>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <CANTX_BattId+0xa8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	4807      	ldr	r0, [pc, #28]	; (80031bc <CANTX_BattId+0xac>)
 80031a0:	f004 fbcb 	bl	800793a <HAL_CAN_AbortTxRequest>
		return;
 80031a4:	bf00      	nop
//		Error_Handler();
	}
}
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000578 	.word	0x20000578
 80031b0:	0e100a22 	.word	0x0e100a22
 80031b4:	200004b4 	.word	0x200004b4
 80031b8:	20000568 	.word	0x20000568
 80031bc:	200004bc 	.word	0x200004bc

080031c0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data) == HAL_OK) {
 80031c8:	4b60      	ldr	r3, [pc, #384]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80031ca:	4a61      	ldr	r2, [pc, #388]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80031cc:	2100      	movs	r1, #0
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f004 fc2b 	bl	8007a2a <HAL_CAN_GetRxMessage>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f040 80b3 	bne.w	8003342 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		if(Rx_Header.ExtId == 0x1B2){
 80031dc:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 80031e4:	d134      	bne.n	8003250 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			flag_start_shutdown=Rx_data[0]&0x01;
 80031e6:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b58      	ldr	r3, [pc, #352]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80031f2:	701a      	strb	r2, [r3, #0]
			BMS_mode=(Rx_data[0]>>1)&0x03;
 80031f4:	4b55      	ldr	r3, [pc, #340]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	085b      	lsrs	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b55      	ldr	r3, [pc, #340]	; (8003358 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8003204:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 8003206:	4b51      	ldr	r3, [pc, #324]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2db      	uxtb	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	4b50      	ldr	r3, [pc, #320]	; (800335c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800321c:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 800321e:	4b4b      	ldr	r3, [pc, #300]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	bf14      	ite	ne
 800322a:	2301      	movne	r3, #1
 800322c:	2300      	moveq	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8003234:	701a      	strb	r2, [r3, #0]

			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 8003236:	f003 fc93 	bl	8006b60 <HAL_GetTick>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003240:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8003242:	f003 fc8d 	bl	8006b60 <HAL_GetTick>
 8003246:	4603      	mov	r3, r0
 8003248:	461a      	mov	r2, r3
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e06d      	b.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(((Rx_Header.ExtId & 0xFFF00000) == 0x0E300000) && (flag_get_UNIQUECODE < 3) ) {
 8003250:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0d1b      	lsrs	r3, r3, #20
 8003256:	051b      	lsls	r3, r3, #20
 8003258:	f1b3 6f63 	cmp.w	r3, #238026752	; 0xe300000
 800325c:	d11c      	bne.n	8003298 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d818      	bhi.n	8003298 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
			flag_start_shutdown = 1;
 8003266:	4b3b      	ldr	r3, [pc, #236]	; (8003354 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
			BMS_mode = 0;
 800326c:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
			flag_get_UNIQUECODE++;
 8003272:	4b3e      	ldr	r3, [pc, #248]	; (800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b3c      	ldr	r3, [pc, #240]	; (800336c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800327c:	701a      	strb	r2, [r3, #0]
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 800327e:	f003 fc6f 	bl	8006b60 <HAL_GetTick>
 8003282:	4603      	mov	r3, r0
 8003284:	461a      	mov	r2, r3
 8003286:	4b37      	ldr	r3, [pc, #220]	; (8003364 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8003288:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 800328a:	f003 fc69 	bl	8006b60 <HAL_GetTick>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	4b35      	ldr	r3, [pc, #212]	; (8003368 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e049      	b.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.ExtId == (0x0E3<<20|UNIQUE_Code)){
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a34      	ldr	r2, [pc, #208]	; (8003370 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d121      	bne.n	80032e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
			if(Rx_data[5] == 0x55){
 80032a2:	4b2a      	ldr	r3, [pc, #168]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80032a4:	795b      	ldrb	r3, [r3, #5]
 80032a6:	2b55      	cmp	r3, #85	; 0x55
 80032a8:	d106      	bne.n	80032b8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				BMS_mode = 0;
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
				charge_state = 0;
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	e009      	b.n	80032cc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			}
			else if(Rx_data[5] == 0xAA){
 80032b8:	4b24      	ldr	r3, [pc, #144]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80032ba:	795b      	ldrb	r3, [r3, #5]
 80032bc:	2baa      	cmp	r3, #170	; 0xaa
 80032be:	d105      	bne.n	80032cc <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
				BMS_mode = 2;
 80032c0:	4b25      	ldr	r3, [pc, #148]	; (8003358 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80032c2:	2202      	movs	r2, #2
 80032c4:	701a      	strb	r2, [r3, #0]
				charge_state = 1;
 80032c6:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	701a      	strb	r2, [r3, #0]
			}
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 80032cc:	f003 fc48 	bl	8006b60 <HAL_GetTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80032d6:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 80032d8:	f003 fc42 	bl	8006b60 <HAL_GetTick>
 80032dc:	4603      	mov	r3, r0
 80032de:	461a      	mov	r2, r3
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e022      	b.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.RTR == 2){
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d11e      	bne.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			if(Rx_Header.StdId == 0x0B4) dataRTR = 4;
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2bb4      	cmp	r3, #180	; 0xb4
 80032f4:	d103      	bne.n	80032fe <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80032f8:	2204      	movs	r2, #4
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e016      	b.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B5) dataRTR = 5;
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2bb5      	cmp	r3, #181	; 0xb5
 8003304:	d103      	bne.n	800330e <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 8003306:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003308:	2205      	movs	r2, #5
 800330a:	701a      	strb	r2, [r3, #0]
 800330c:	e00e      	b.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B6) dataRTR = 6;
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2bb6      	cmp	r3, #182	; 0xb6
 8003314:	d103      	bne.n	800331e <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
 8003316:	4b18      	ldr	r3, [pc, #96]	; (8003378 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003318:	2206      	movs	r2, #6
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e006      	b.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B7) dataRTR = 7;
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2bb7      	cmp	r3, #183	; 0xb7
 8003324:	d102      	bne.n	800332c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8003328:	2207      	movs	r2, #7
 800332a:	701a      	strb	r2, [r3, #0]
		}

		Rx_Header.ExtId = 0;
 800332c:	4b08      	ldr	r3, [pc, #32]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800332e:	2200      	movs	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
		Rx_Header.StdId = 0;
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8003338:	2208      	movs	r2, #8
 800333a:	2100      	movs	r1, #0
 800333c:	4803      	ldr	r0, [pc, #12]	; (800334c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800333e:	f007 ffff 	bl	800b340 <memset>
	}
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200004e4 	.word	0x200004e4
 8003350:	2000054c 	.word	0x2000054c
 8003354:	2000027d 	.word	0x2000027d
 8003358:	2000036c 	.word	0x2000036c
 800335c:	20000290 	.word	0x20000290
 8003360:	20000348 	.word	0x20000348
 8003364:	20000324 	.word	0x20000324
 8003368:	20000354 	.word	0x20000354
 800336c:	20000260 	.word	0x20000260
 8003370:	0e300a22 	.word	0x0e300a22
 8003374:	20000338 	.word	0x20000338
 8003378:	2000023c 	.word	0x2000023c

0800337c <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	; 0x28
 8003380:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800338a:	2301      	movs	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8003392:	2300      	movs	r3, #0
 8003394:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80033a2:	2301      	movs	r3, #1
 80033a4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80033a6:	230e      	movs	r3, #14
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 80033aa:	463b      	mov	r3, r7
 80033ac:	4619      	mov	r1, r3
 80033ae:	4810      	ldr	r0, [pc, #64]	; (80033f0 <BMS_CAN_Config+0x74>)
 80033b0:	f004 f8dc 	bl	800756c <HAL_CAN_ConfigFilter>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <BMS_CAN_Config+0x42>
 80033ba:	f000 fc1b 	bl	8003bf4 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 80033be:	480c      	ldr	r0, [pc, #48]	; (80033f0 <BMS_CAN_Config+0x74>)
 80033c0:	f004 f99d 	bl	80076fe <HAL_CAN_Start>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <BMS_CAN_Config+0x52>
 80033ca:	f000 fc13 	bl	8003bf4 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80033ce:	2102      	movs	r1, #2
 80033d0:	4807      	ldr	r0, [pc, #28]	; (80033f0 <BMS_CAN_Config+0x74>)
 80033d2:	f004 fc3b 	bl	8007c4c <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <BMS_CAN_Config+0x78>)
 80033d8:	2200      	movs	r2, #0
 80033da:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <BMS_CAN_Config+0x78>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <BMS_CAN_Config+0x78>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	200004bc 	.word	0x200004bc
 80033f4:	20000578 	.word	0x20000578

080033f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033fe:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <MX_DMA_Init+0x38>)
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <MX_DMA_Init+0x38>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6153      	str	r3, [r2, #20]
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <MX_DMA_Init+0x38>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	607b      	str	r3, [r7, #4]
 8003414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003416:	2200      	movs	r2, #0
 8003418:	2100      	movs	r1, #0
 800341a:	200b      	movs	r0, #11
 800341c:	f004 ff35 	bl	800828a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003420:	200b      	movs	r0, #11
 8003422:	f004 ff4e 	bl	80082c2 <HAL_NVIC_EnableIRQ>

}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40021000 	.word	0x40021000

08003434 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343a:	f107 0310 	add.w	r3, r7, #16
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003448:	4b40      	ldr	r3, [pc, #256]	; (800354c <MX_GPIO_Init+0x118>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4a3f      	ldr	r2, [pc, #252]	; (800354c <MX_GPIO_Init+0x118>)
 800344e:	f043 0310 	orr.w	r3, r3, #16
 8003452:	6193      	str	r3, [r2, #24]
 8003454:	4b3d      	ldr	r3, [pc, #244]	; (800354c <MX_GPIO_Init+0x118>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003460:	4b3a      	ldr	r3, [pc, #232]	; (800354c <MX_GPIO_Init+0x118>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	4a39      	ldr	r2, [pc, #228]	; (800354c <MX_GPIO_Init+0x118>)
 8003466:	f043 0304 	orr.w	r3, r3, #4
 800346a:	6193      	str	r3, [r2, #24]
 800346c:	4b37      	ldr	r3, [pc, #220]	; (800354c <MX_GPIO_Init+0x118>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <MX_GPIO_Init+0x118>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4a33      	ldr	r2, [pc, #204]	; (800354c <MX_GPIO_Init+0x118>)
 800347e:	f043 0308 	orr.w	r3, r3, #8
 8003482:	6193      	str	r3, [r2, #24]
 8003484:	4b31      	ldr	r3, [pc, #196]	; (800354c <MX_GPIO_Init+0x118>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|BMS_SHUTDOWN_Pin|EEPROM_WP_Pin|LED_Pin
 8003490:	2200      	movs	r2, #0
 8003492:	f243 0162 	movw	r1, #12386	; 0x3062
 8003496:	482e      	ldr	r0, [pc, #184]	; (8003550 <MX_GPIO_Init+0x11c>)
 8003498:	f005 fc19 	bl	8008cce <HAL_GPIO_WritePin>
                          |CSBI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 800349c:	2200      	movs	r2, #0
 800349e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a2:	482c      	ldr	r0, [pc, #176]	; (8003554 <MX_GPIO_Init+0x120>)
 80034a4:	f005 fc13 	bl	8008cce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCK_Pin|SDO_Pin|SDI_Pin, GPIO_PIN_RESET);
 80034a8:	2200      	movs	r2, #0
 80034aa:	2138      	movs	r1, #56	; 0x38
 80034ac:	482a      	ldr	r0, [pc, #168]	; (8003558 <MX_GPIO_Init+0x124>)
 80034ae:	f005 fc0e 	bl	8008cce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80034b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034bc:	2302      	movs	r3, #2
 80034be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c0:	2302      	movs	r3, #2
 80034c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	4619      	mov	r1, r3
 80034ca:	4821      	ldr	r0, [pc, #132]	; (8003550 <MX_GPIO_Init+0x11c>)
 80034cc:	f005 fa54 	bl	8008978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BMS_SHUTDOWN_Pin|EEPROM_WP_Pin|LED_Pin|CSBI_Pin;
 80034d0:	f241 0362 	movw	r3, #4194	; 0x1062
 80034d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034de:	2302      	movs	r3, #2
 80034e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e2:	f107 0310 	add.w	r3, r7, #16
 80034e6:	4619      	mov	r1, r3
 80034e8:	4819      	ldr	r0, [pc, #100]	; (8003550 <MX_GPIO_Init+0x11c>)
 80034ea:	f005 fa45 	bl	8008978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GATE_MOS_Pin;
 80034ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f4:	2301      	movs	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GATE_MOS_GPIO_Port, &GPIO_InitStruct);
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	4619      	mov	r1, r3
 8003506:	4813      	ldr	r0, [pc, #76]	; (8003554 <MX_GPIO_Init+0x120>)
 8003508:	f005 fa36 	bl	8008978 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800350c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f107 0310 	add.w	r3, r7, #16
 800351e:	4619      	mov	r1, r3
 8003520:	480c      	ldr	r0, [pc, #48]	; (8003554 <MX_GPIO_Init+0x120>)
 8003522:	f005 fa29 	bl	8008978 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SCK_Pin|SDO_Pin|SDI_Pin;
 8003526:	2338      	movs	r3, #56	; 0x38
 8003528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	2302      	movs	r3, #2
 8003534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003536:	f107 0310 	add.w	r3, r7, #16
 800353a:	4619      	mov	r1, r3
 800353c:	4806      	ldr	r0, [pc, #24]	; (8003558 <MX_GPIO_Init+0x124>)
 800353e:	f005 fa1b 	bl	8008978 <HAL_GPIO_Init>

}
 8003542:	bf00      	nop
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	40011000 	.word	0x40011000
 8003554:	40010800 	.word	0x40010800
 8003558:	40010c00 	.word	0x40010c00

0800355c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <MX_I2C1_Init+0x50>)
 8003562:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <MX_I2C1_Init+0x54>)
 8003564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <MX_I2C1_Init+0x50>)
 8003568:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <MX_I2C1_Init+0x58>)
 800356a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <MX_I2C1_Init+0x50>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <MX_I2C1_Init+0x50>)
 8003574:	2200      	movs	r2, #0
 8003576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <MX_I2C1_Init+0x50>)
 800357a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800357e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <MX_I2C1_Init+0x50>)
 8003582:	2200      	movs	r2, #0
 8003584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <MX_I2C1_Init+0x50>)
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800358c:	4b07      	ldr	r3, [pc, #28]	; (80035ac <MX_I2C1_Init+0x50>)
 800358e:	2200      	movs	r2, #0
 8003590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <MX_I2C1_Init+0x50>)
 8003594:	2200      	movs	r2, #0
 8003596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003598:	4804      	ldr	r0, [pc, #16]	; (80035ac <MX_I2C1_Init+0x50>)
 800359a:	f005 fbc9 	bl	8008d30 <HAL_I2C_Init>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80035a4:	f000 fb26 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80035a8:	bf00      	nop
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	200005a0 	.word	0x200005a0
 80035b0:	40005400 	.word	0x40005400
 80035b4:	00061a80 	.word	0x00061a80

080035b8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <MX_I2C2_Init+0x50>)
 80035be:	4a13      	ldr	r2, [pc, #76]	; (800360c <MX_I2C2_Init+0x54>)
 80035c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <MX_I2C2_Init+0x50>)
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <MX_I2C2_Init+0x58>)
 80035c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <MX_I2C2_Init+0x50>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <MX_I2C2_Init+0x50>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <MX_I2C2_Init+0x50>)
 80035d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <MX_I2C2_Init+0x50>)
 80035de:	2200      	movs	r2, #0
 80035e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <MX_I2C2_Init+0x50>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035e8:	4b07      	ldr	r3, [pc, #28]	; (8003608 <MX_I2C2_Init+0x50>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <MX_I2C2_Init+0x50>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <MX_I2C2_Init+0x50>)
 80035f6:	f005 fb9b 	bl	8008d30 <HAL_I2C_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003600:	f000 faf8 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	200005f4 	.word	0x200005f4
 800360c:	40005800 	.word	0x40005800
 8003610:	000186a0 	.word	0x000186a0

08003614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b08a      	sub	sp, #40	; 0x28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800361c:	f107 0318 	add.w	r3, r7, #24
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_I2C_MspInit+0xc8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d124      	bne.n	800367e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003634:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 800363a:	f043 0308 	orr.w	r3, r3, #8
 800363e:	6193      	str	r3, [r2, #24]
 8003640:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 800364c:	23c0      	movs	r3, #192	; 0xc0
 800364e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003650:	2312      	movs	r3, #18
 8003652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003654:	2303      	movs	r3, #3
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003658:	f107 0318 	add.w	r3, r7, #24
 800365c:	4619      	mov	r1, r3
 800365e:	4821      	ldr	r0, [pc, #132]	; (80036e4 <HAL_I2C_MspInit+0xd0>)
 8003660:	f005 f98a 	bl	8008978 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 800366a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800366e:	61d3      	str	r3, [r2, #28]
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800367c:	e029      	b.n	80036d2 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_I2C_MspInit+0xd4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d124      	bne.n	80036d2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	6193      	str	r3, [r2, #24]
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 80036a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a6:	2312      	movs	r3, #18
 80036a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ae:	f107 0318 	add.w	r3, r7, #24
 80036b2:	4619      	mov	r1, r3
 80036b4:	480b      	ldr	r0, [pc, #44]	; (80036e4 <HAL_I2C_MspInit+0xd0>)
 80036b6:	f005 f95f 	bl	8008978 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036ba:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 80036c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036c4:	61d3      	str	r3, [r2, #28]
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_I2C_MspInit+0xcc>)
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ce:	60bb      	str	r3, [r7, #8]
 80036d0:	68bb      	ldr	r3, [r7, #8]
}
 80036d2:	bf00      	nop
 80036d4:	3728      	adds	r7, #40	; 0x28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40005400 	.word	0x40005400
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40010c00 	.word	0x40010c00
 80036e8:	40005800 	.word	0x40005800

080036ec <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <MX_IWDG_Init+0x2c>)
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <MX_IWDG_Init+0x30>)
 80036f4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80036f6:	4b08      	ldr	r3, [pc, #32]	; (8003718 <MX_IWDG_Init+0x2c>)
 80036f8:	2206      	movs	r2, #6
 80036fa:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <MX_IWDG_Init+0x2c>)
 80036fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003702:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003704:	4804      	ldr	r0, [pc, #16]	; (8003718 <MX_IWDG_Init+0x2c>)
 8003706:	f006 fc41 	bl	8009f8c <HAL_IWDG_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003710:	f000 fa70 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003714:	bf00      	nop
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000648 	.word	0x20000648
 800371c:	40003000 	.word	0x40003000

08003720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003724:	f003 f9c4 	bl	8006ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003728:	f000 f87a 	bl	8003820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800372c:	f7ff fe82 	bl	8003434 <MX_GPIO_Init>
  MX_DMA_Init();
 8003730:	f7ff fe62 	bl	80033f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003734:	f7ff f866 	bl	8002804 <MX_ADC1_Init>
  MX_CAN_Init();
 8003738:	f7ff f944 	bl	80029c4 <MX_CAN_Init>
  MX_I2C1_Init();
 800373c:	f7ff ff0e 	bl	800355c <MX_I2C1_Init>
  MX_TIM2_Init();
 8003740:	f003 f8b4 	bl	80068ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8003744:	f003 f900 	bl	8006948 <MX_TIM3_Init>
  MX_I2C2_Init();
 8003748:	f7ff ff36 	bl	80035b8 <MX_I2C2_Init>
  MX_IWDG_Init();
 800374c:	f7ff ffce 	bl	80036ec <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  BMS_Init();
 8003750:	f000 f8c2 	bl	80038d8 <BMS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read voltage per-cell and total voltage
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800375a:	4827      	ldr	r0, [pc, #156]	; (80037f8 <main+0xd8>)
 800375c:	f005 fab7 	bl	8008cce <HAL_GPIO_WritePin>
	  read_voltage_percell();
 8003760:	f7fe fea2 	bl	80024a8 <read_voltage_percell>
	  read_sumvoltage();
 8003764:	f7fe ff04 	bl	8002570 <read_sumvoltage>
	  ltc6804_CS_SET(ltc6804_CS_PIN);
 8003768:	2201      	movs	r2, #1
 800376a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800376e:	4822      	ldr	r0, [pc, #136]	; (80037f8 <main+0xd8>)
 8003770:	f005 faad 	bl	8008cce <HAL_GPIO_WritePin>

	  //comparing cell voltage to get
	  unbalance_cell = get_balance_status(cellvoltage_float);
 8003774:	4821      	ldr	r0, [pc, #132]	; (80037fc <main+0xdc>)
 8003776:	f7fe ff3f 	bl	80025f8 <get_balance_status>
 800377a:	4603      	mov	r3, r0
 800377c:	461a      	mov	r2, r3
 800377e:	4b20      	ldr	r3, [pc, #128]	; (8003800 <main+0xe0>)
 8003780:	801a      	strh	r2, [r3, #0]

	  // Balancing Process
	  if(BMS_mode == 2 && IBATT < -0.1 && (VBATT > VBATT_BALANCE_START))     //arus charging 0.1 tidak perlu di balancing
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <main+0xe4>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d11b      	bne.n	80037c2 <main+0xa2>
 800378a:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <main+0xe8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc feb6 	bl	8000500 <__aeabi_f2d>
 8003794:	a316      	add	r3, pc, #88	; (adr r3, 80037f0 <main+0xd0>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fd f97b 	bl	8000a94 <__aeabi_dcmplt>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <main+0xa2>
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <main+0xec>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4919      	ldr	r1, [pc, #100]	; (8003810 <main+0xf0>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fd12 	bl	80011d4 <__aeabi_fcmpgt>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <main+0xa2>
	  {
		  LTC681x_balance_cell(balance_status);
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <main+0xf4>)
 80037b8:	881b      	ldrh	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe ffce 	bl	800275c <LTC681x_balance_cell>
 80037c0:	e005      	b.n	80037ce <main+0xae>
	  }
	  else
	  {
		  balance_status = 0;
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <main+0xf4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	801a      	strh	r2, [r3, #0]
		  LTC681x_balance_cell(0);
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fe ffc7 	bl	800275c <LTC681x_balance_cell>
	  }

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	4809      	ldr	r0, [pc, #36]	; (80037f8 <main+0xd8>)
 80037d2:	f005 fa94 	bl	8008cfe <HAL_GPIO_TogglePin>

//	  //test turn off system
//	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10))
//		  HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);

	  BMS_ScreenMode_RUN();
 80037d6:	f000 f925 	bl	8003a24 <BMS_ScreenMode_RUN>
	  HAL_IWDG_Refresh(&hiwdg);
 80037da:	480f      	ldr	r0, [pc, #60]	; (8003818 <main+0xf8>)
 80037dc:	f006 fc18 	bl	800a010 <HAL_IWDG_Refresh>
	  test++;
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <main+0xfc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3301      	adds	r3, #1
 80037e6:	4a0d      	ldr	r2, [pc, #52]	; (800381c <main+0xfc>)
 80037e8:	6013      	str	r3, [r2, #0]
	  ltc6804_CS_RESET(ltc6804_CS_PIN);
 80037ea:	e7b3      	b.n	8003754 <main+0x34>
 80037ec:	f3af 8000 	nop.w
 80037f0:	9999999a 	.word	0x9999999a
 80037f4:	bfb99999 	.word	0xbfb99999
 80037f8:	40011000 	.word	0x40011000
 80037fc:	200003c0 	.word	0x200003c0
 8003800:	20000292 	.word	0x20000292
 8003804:	2000036c 	.word	0x2000036c
 8003808:	200002f4 	.word	0x200002f4
 800380c:	20000280 	.word	0x20000280
 8003810:	42040000 	.word	0x42040000
 8003814:	20000320 	.word	0x20000320
 8003818:	20000648 	.word	0x20000648
 800381c:	20000678 	.word	0x20000678

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b096      	sub	sp, #88	; 0x58
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800382a:	2228      	movs	r2, #40	; 0x28
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f007 fd86 	bl	800b340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	611a      	str	r2, [r3, #16]
 8003852:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003854:	230a      	movs	r3, #10
 8003856:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003858:	2301      	movs	r3, #1
 800385a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800385c:	2310      	movs	r3, #16
 800385e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003860:	2301      	movs	r3, #1
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003864:	2302      	movs	r3, #2
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003868:	2300      	movs	r3, #0
 800386a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800386c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003870:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003876:	4618      	mov	r0, r3
 8003878:	f006 fbda 	bl	800a030 <HAL_RCC_OscConfig>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003882:	f000 f9b7 	bl	8003bf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003886:	230f      	movs	r3, #15
 8003888:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800388a:	2302      	movs	r3, #2
 800388c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800388e:	2300      	movs	r3, #0
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800389c:	f107 031c 	add.w	r3, r7, #28
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f006 fe44 	bl	800a530 <HAL_RCC_ClockConfig>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80038ae:	f000 f9a1 	bl	8003bf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80038b2:	2302      	movs	r3, #2
 80038b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80038b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f006 ffbc 	bl	800a83c <HAL_RCCEx_PeriphCLKConfig>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80038ca:	f000 f993 	bl	8003bf4 <Error_Handler>
  }
}
 80038ce:	bf00      	nop
 80038d0:	3758      	adds	r7, #88	; 0x58
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <BMS_Init>:

/* USER CODE BEGIN 4 */
void BMS_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 80038de:	2210      	movs	r2, #16
 80038e0:	4945      	ldr	r1, [pc, #276]	; (80039f8 <BMS_Init+0x120>)
 80038e2:	f640 2022 	movw	r0, #2594	; 0xa22
 80038e6:	f007 fd19 	bl	800b31c <itoa>
	int ii=0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
	while(ii<6){
 80038ee:	e01a      	b.n	8003926 <BMS_Init+0x4e>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 80038f0:	4a41      	ldr	r2, [pc, #260]	; (80039f8 <BMS_Init+0x120>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	70fb      	strb	r3, [r7, #3]
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a3f      	ldr	r2, [pc, #252]	; (80039fc <BMS_Init+0x124>)
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d102      	bne.n	8003912 <BMS_Init+0x3a>
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	3b20      	subs	r3, #32
 8003910:	e000      	b.n	8003914 <BMS_Init+0x3c>
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	b2d9      	uxtb	r1, r3
 8003916:	4a3a      	ldr	r2, [pc, #232]	; (8003a00 <BMS_Init+0x128>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4413      	add	r3, r2
 800391c:	460a      	mov	r2, r1
 800391e:	701a      	strb	r2, [r3, #0]
		ii++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3301      	adds	r3, #1
 8003924:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b05      	cmp	r3, #5
 800392a:	dde1      	ble.n	80038f0 <BMS_Init+0x18>
	}

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800392c:	2201      	movs	r2, #1
 800392e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003932:	4834      	ldr	r0, [pc, #208]	; (8003a04 <BMS_Init+0x12c>)
 8003934:	f005 f9cb 	bl	8008cce <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800393c:	f003 f91a 	bl	8006b74 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003944:	482f      	ldr	r0, [pc, #188]	; (8003a04 <BMS_Init+0x12c>)
 8003946:	f005 f9da 	bl	8008cfe <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800394a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800394e:	f003 f911 	bl	8006b74 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003956:	482b      	ldr	r0, [pc, #172]	; (8003a04 <BMS_Init+0x12c>)
 8003958:	f005 f9d1 	bl	8008cfe <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800395c:	2064      	movs	r0, #100	; 0x64
 800395e:	f003 f909 	bl	8006b74 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003966:	4827      	ldr	r0, [pc, #156]	; (8003a04 <BMS_Init+0x12c>)
 8003968:	f005 f9c9 	bl	8008cfe <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800396c:	2064      	movs	r0, #100	; 0x64
 800396e:	f003 f901 	bl	8006b74 <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003976:	4823      	ldr	r0, [pc, #140]	; (8003a04 <BMS_Init+0x12c>)
 8003978:	f005 f9c1 	bl	8008cfe <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	f003 f8f9 	bl	8006b74 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003988:	481e      	ldr	r0, [pc, #120]	; (8003a04 <BMS_Init+0x12c>)
 800398a:	f005 f9a0 	bl	8008cce <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800398e:	2064      	movs	r0, #100	; 0x64
 8003990:	f003 f8f0 	bl	8006b74 <HAL_Delay>
	SSD1306_Puts ("10S13P", &Font_7x10, 1);
	SSD1306_UpdateScreen(); //display
	SSD1306_Fill (0);
*/

	ltc6804_GPIO_Config();
 8003994:	f7fe f834 	bl	8001a00 <ltc6804_GPIO_Config>
	ltc6804_SPIInit();
 8003998:	f7fe f890 	bl	8001abc <ltc6804_SPIInit>

	set_adc(MD_FILTERED, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL); //ADC Setting
 800399c:	2300      	movs	r3, #0
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	2003      	movs	r0, #3
 80039a4:	f7fe f984 	bl	8001cb0 <set_adc>
	HAL_Delay(10);
 80039a8:	200a      	movs	r0, #10
 80039aa:	f003 f8e3 	bl	8006b74 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_value, 5);
 80039ae:	2205      	movs	r2, #5
 80039b0:	4915      	ldr	r1, [pc, #84]	; (8003a08 <BMS_Init+0x130>)
 80039b2:	4816      	ldr	r0, [pc, #88]	; (8003a0c <BMS_Init+0x134>)
 80039b4:	f003 f9ec 	bl	8006d90 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 80039b8:	4815      	ldr	r0, [pc, #84]	; (8003a10 <BMS_Init+0x138>)
 80039ba:	f007 f845 	bl	800aa48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80039be:	4815      	ldr	r0, [pc, #84]	; (8003a14 <BMS_Init+0x13c>)
 80039c0:	f007 f842 	bl	800aa48 <HAL_TIM_Base_Start_IT>

	BATT_State=STATE_STANDBY;
 80039c4:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <BMS_Init+0x140>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 80039ca:	f7fd fdc3 	bl	8001554 <Batt_Open_Mode>
	BATT_Start_Up = 1;
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <BMS_Init+0x144>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
	flag_start_shutdown = 0;
 80039d4:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <BMS_Init+0x148>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 80039da:	2032      	movs	r0, #50	; 0x32
 80039dc:	f003 f8ca 	bl	8006b74 <HAL_Delay>
	EEPROM_isDeviceReady(0xA0);
 80039e0:	20a0      	movs	r0, #160	; 0xa0
 80039e2:	f7fd ffb5 	bl	8001950 <EEPROM_isDeviceReady>
	BMS_CAN_Config();
 80039e6:	f7ff fcc9 	bl	800337c <BMS_CAN_Config>
	HAL_Delay(100);
 80039ea:	2064      	movs	r0, #100	; 0x64
 80039ec:	f003 f8c2 	bl	8006b74 <HAL_Delay>
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000670 	.word	0x20000670
 80039fc:	080103f8 	.word	0x080103f8
 8003a00:	20000668 	.word	0x20000668
 8003a04:	40011000 	.word	0x40011000
 8003a08:	200002e8 	.word	0x200002e8
 8003a0c:	2000042c 	.word	0x2000042c
 8003a10:	20000898 	.word	0x20000898
 8003a14:	20000850 	.word	0x20000850
 8003a18:	2000067c 	.word	0x2000067c
 8003a1c:	2000023d 	.word	0x2000023d
 8003a20:	2000027d 	.word	0x2000027d

08003a24 <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
	if(flag_start_shutdown == 0)
 8003a28:	4b5a      	ldr	r3, [pc, #360]	; (8003b94 <BMS_ScreenMode_RUN+0x170>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d179      	bne.n	8003b24 <BMS_ScreenMode_RUN+0x100>
		SSD1306_GotoXY(25,38);
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
		SSD1306_UpdateScreen();
		*/

		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8003a30:	4b59      	ldr	r3, [pc, #356]	; (8003b98 <BMS_ScreenMode_RUN+0x174>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a59      	ldr	r2, [pc, #356]	; (8003b9c <BMS_ScreenMode_RUN+0x178>)
 8003a36:	6013      	str	r3, [r2, #0]
		Batt_Open_Mode();
 8003a38:	f7fd fd8c 	bl	8001554 <Batt_Open_Mode>

		flag_trip_overtemperature=OFF;
 8003a3c:	4b58      	ldr	r3, [pc, #352]	; (8003ba0 <BMS_ScreenMode_RUN+0x17c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
		flag_trip_undertemperature=OFF;
 8003a42:	4b58      	ldr	r3, [pc, #352]	; (8003ba4 <BMS_ScreenMode_RUN+0x180>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverDischarge=OFF;
 8003a48:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <BMS_ScreenMode_RUN+0x184>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8003a4e:	4b57      	ldr	r3, [pc, #348]	; (8003bac <BMS_ScreenMode_RUN+0x188>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
		flag_trip_undervoltage=OFF;
 8003a54:	4b56      	ldr	r3, [pc, #344]	; (8003bb0 <BMS_ScreenMode_RUN+0x18c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=OFF;
 8003a5a:	4b56      	ldr	r3, [pc, #344]	; (8003bb4 <BMS_ScreenMode_RUN+0x190>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentdischarge=OFF;
 8003a60:	4b55      	ldr	r3, [pc, #340]	; (8003bb8 <BMS_ScreenMode_RUN+0x194>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentcharge=OFF;
 8003a66:	4b55      	ldr	r3, [pc, #340]	; (8003bbc <BMS_ScreenMode_RUN+0x198>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
		flag_trip_shortcircuit=OFF;
 8003a6c:	4b54      	ldr	r3, [pc, #336]	; (8003bc0 <BMS_ScreenMode_RUN+0x19c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
		flag_trip_systemfailure=OFF;
 8003a72:	4b54      	ldr	r3, [pc, #336]	; (8003bc4 <BMS_ScreenMode_RUN+0x1a0>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
		flag_trip_unbalance=OFF;
 8003a78:	4b53      	ldr	r3, [pc, #332]	; (8003bc8 <BMS_ScreenMode_RUN+0x1a4>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
		flag_get_UNIQUECODE=OFF;
 8003a7e:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <BMS_ScreenMode_RUN+0x1a8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8003a84:	4b44      	ldr	r3, [pc, #272]	; (8003b98 <BMS_ScreenMode_RUN+0x174>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a44      	ldr	r2, [pc, #272]	; (8003b9c <BMS_ScreenMode_RUN+0x178>)
 8003a8a:	6013      	str	r3, [r2, #0]

		if(last_flag_start_shutdown==1) Shutdown_time_last = HAL_GetTick();
 8003a8c:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <BMS_ScreenMode_RUN+0x1ac>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <BMS_ScreenMode_RUN+0x7c>
 8003a94:	f003 f864 	bl	8006b60 <HAL_GetTick>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	; (8003bd4 <BMS_ScreenMode_RUN+0x1b0>)
 8003a9e:	601a      	str	r2, [r3, #0]

		// Automatic sleep after 30s without receive CAN
		Shutdown_time=HAL_GetTick();
 8003aa0:	f003 f85e 	bl	8006b60 <HAL_GetTick>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b4b      	ldr	r3, [pc, #300]	; (8003bd8 <BMS_ScreenMode_RUN+0x1b4>)
 8003aaa:	601a      	str	r2, [r3, #0]
		if(Shutdown_time-Shutdown_time_last>Shutdown_tick)
 8003aac:	4b4a      	ldr	r3, [pc, #296]	; (8003bd8 <BMS_ScreenMode_RUN+0x1b4>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <BMS_ScreenMode_RUN+0x1b0>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	1ad2      	subs	r2, r2, r3
 8003ab6:	4b49      	ldr	r3, [pc, #292]	; (8003bdc <BMS_ScreenMode_RUN+0x1b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	dd2e      	ble.n	8003b1c <BMS_ScreenMode_RUN+0xf8>
		{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ac4:	4846      	ldr	r0, [pc, #280]	; (8003be0 <BMS_ScreenMode_RUN+0x1bc>)
 8003ac6:	f005 f902 	bl	8008cce <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8003aca:	2064      	movs	r0, #100	; 0x64
 8003acc:	f003 f852 	bl	8006b74 <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ad4:	4842      	ldr	r0, [pc, #264]	; (8003be0 <BMS_ScreenMode_RUN+0x1bc>)
 8003ad6:	f005 f912 	bl	8008cfe <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003ada:	2064      	movs	r0, #100	; 0x64
 8003adc:	f003 f84a 	bl	8006b74 <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ae4:	483e      	ldr	r0, [pc, #248]	; (8003be0 <BMS_ScreenMode_RUN+0x1bc>)
 8003ae6:	f005 f90a 	bl	8008cfe <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003aea:	2064      	movs	r0, #100	; 0x64
 8003aec:	f003 f842 	bl	8006b74 <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003af4:	483a      	ldr	r0, [pc, #232]	; (8003be0 <BMS_ScreenMode_RUN+0x1bc>)
 8003af6:	f005 f902 	bl	8008cfe <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8003afa:	2064      	movs	r0, #100	; 0x64
 8003afc:	f003 f83a 	bl	8006b74 <HAL_Delay>
			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b04:	4836      	ldr	r0, [pc, #216]	; (8003be0 <BMS_ScreenMode_RUN+0x1bc>)
 8003b06:	f005 f8fa 	bl	8008cfe <HAL_GPIO_TogglePin>
			HAL_Delay(750);
 8003b0a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003b0e:	f003 f831 	bl	8006b74 <HAL_Delay>
			HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);
 8003b12:	2201      	movs	r2, #1
 8003b14:	2102      	movs	r1, #2
 8003b16:	4832      	ldr	r0, [pc, #200]	; (8003be0 <BMS_ScreenMode_RUN+0x1bc>)
 8003b18:	f005 f8d9 	bl	8008cce <HAL_GPIO_WritePin>
		}

		last_flag_start_shutdown = 0;
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <BMS_ScreenMode_RUN+0x1ac>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e032      	b.n	8003b8a <BMS_ScreenMode_RUN+0x166>
		SSD1306_GotoXY(0,50);
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);

		SSD1306_UpdateScreen();
*/
		if(BMS_mode==0) Batt_Open_Mode();
 8003b24:	4b2f      	ldr	r3, [pc, #188]	; (8003be4 <BMS_ScreenMode_RUN+0x1c0>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <BMS_ScreenMode_RUN+0x10e>
 8003b2c:	f7fd fd12 	bl	8001554 <Batt_Open_Mode>
 8003b30:	e013      	b.n	8003b5a <BMS_ScreenMode_RUN+0x136>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 8003b32:	4b2c      	ldr	r3, [pc, #176]	; (8003be4 <BMS_ScreenMode_RUN+0x1c0>)
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d102      	bne.n	8003b40 <BMS_ScreenMode_RUN+0x11c>
 8003b3a:	f7fd fbd3 	bl	80012e4 <Batt_Discharge_Mode>
 8003b3e:	e00c      	b.n	8003b5a <BMS_ScreenMode_RUN+0x136>
		else if(BMS_mode==2) Batt_Charge_Mode();
 8003b40:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <BMS_ScreenMode_RUN+0x1c0>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d102      	bne.n	8003b4e <BMS_ScreenMode_RUN+0x12a>
 8003b48:	f7fd fc32 	bl	80013b0 <Batt_Charge_Mode>
 8003b4c:	e005      	b.n	8003b5a <BMS_ScreenMode_RUN+0x136>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 8003b4e:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <BMS_ScreenMode_RUN+0x1c0>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d101      	bne.n	8003b5a <BMS_ScreenMode_RUN+0x136>
 8003b56:	f7fd fc91 	bl	800147c <Batt_Full_CD_Mode>

	//  Automatically sleep after 30s without receive CAN
		Sleep_time=HAL_GetTick();
 8003b5a:	f003 f801 	bl	8006b60 <HAL_GetTick>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	461a      	mov	r2, r3
 8003b62:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <BMS_ScreenMode_RUN+0x1c4>)
 8003b64:	601a      	str	r2, [r3, #0]
		if(Sleep_time-Active_time_last>Sleep_tick)
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <BMS_ScreenMode_RUN+0x1c4>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <BMS_ScreenMode_RUN+0x1c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1ad2      	subs	r2, r2, r3
 8003b70:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <BMS_ScreenMode_RUN+0x1cc>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	dd05      	ble.n	8003b84 <BMS_ScreenMode_RUN+0x160>
		{
			BMS_mode=0;
 8003b78:	4b1a      	ldr	r3, [pc, #104]	; (8003be4 <BMS_ScreenMode_RUN+0x1c0>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
			flag_start_shutdown=0;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <BMS_ScreenMode_RUN+0x170>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
		}
		last_flag_start_shutdown = 1;
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <BMS_ScreenMode_RUN+0x1ac>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1);
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f002 fff2 	bl	8006b74 <HAL_Delay>
}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	2000027d 	.word	0x2000027d
 8003b98:	20000368 	.word	0x20000368
 8003b9c:	20000360 	.word	0x20000360
 8003ba0:	2000027c 	.word	0x2000027c
 8003ba4:	200002fc 	.word	0x200002fc
 8003ba8:	20000328 	.word	0x20000328
 8003bac:	2000025d 	.word	0x2000025d
 8003bb0:	200002fd 	.word	0x200002fd
 8003bb4:	20000374 	.word	0x20000374
 8003bb8:	2000030c 	.word	0x2000030c
 8003bbc:	20000322 	.word	0x20000322
 8003bc0:	2000025f 	.word	0x2000025f
 8003bc4:	20000268 	.word	0x20000268
 8003bc8:	2000025c 	.word	0x2000025c
 8003bcc:	20000260 	.word	0x20000260
 8003bd0:	2000035c 	.word	0x2000035c
 8003bd4:	20000354 	.word	0x20000354
 8003bd8:	20000344 	.word	0x20000344
 8003bdc:	20000008 	.word	0x20000008
 8003be0:	40011000 	.word	0x40011000
 8003be4:	2000036c 	.word	0x2000036c
 8003be8:	20000270 	.word	0x20000270
 8003bec:	20000324 	.word	0x20000324
 8003bf0:	20000004 	.word	0x20000004

08003bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bf8:	b672      	cpsid	i
}
 8003bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <Error_Handler+0x8>
	...

08003c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <HAL_MspInit+0x5c>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <HAL_MspInit+0x5c>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6193      	str	r3, [r2, #24]
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_MspInit+0x5c>)
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_MspInit+0x5c>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	4a0e      	ldr	r2, [pc, #56]	; (8003c5c <HAL_MspInit+0x5c>)
 8003c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c28:	61d3      	str	r3, [r2, #28]
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <HAL_MspInit+0x5c>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c32:	607b      	str	r3, [r7, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_MspInit+0x60>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HAL_MspInit+0x60>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40010000 	.word	0x40010000

08003c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <NMI_Handler+0x4>

08003c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c6e:	e7fe      	b.n	8003c6e <HardFault_Handler+0x4>

08003c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c74:	e7fe      	b.n	8003c74 <MemManage_Handler+0x4>

08003c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c76:	b480      	push	{r7}
 8003c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c7a:	e7fe      	b.n	8003c7a <BusFault_Handler+0x4>

08003c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c80:	e7fe      	b.n	8003c80 <UsageFault_Handler+0x4>

08003c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c86:	bf00      	nop
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr

08003c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003caa:	f002 ff47 	bl	8006b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003cb8:	4802      	ldr	r0, [pc, #8]	; (8003cc4 <DMA1_Channel1_IRQHandler+0x10>)
 8003cba:	f004 fbf3 	bl	80084a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	2000045c 	.word	0x2000045c

08003cc8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003ccc:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003cce:	f003 ffe2 	bl	8007c96 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200004bc 	.word	0x200004bc
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ce0:	b5b0      	push	{r4, r5, r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ce4:	48b8      	ldr	r0, [pc, #736]	; (8003fc8 <TIM2_IRQHandler+0x2e8>)
 8003ce6:	f006 ff1d 	bl	800ab24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  hitung_suhu++;
 8003cea:	4bb8      	ldr	r3, [pc, #736]	; (8003fcc <TIM2_IRQHandler+0x2ec>)
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	4bb6      	ldr	r3, [pc, #728]	; (8003fcc <TIM2_IRQHandler+0x2ec>)
 8003cf4:	801a      	strh	r2, [r3, #0]
  test_tim2++;
 8003cf6:	4bb6      	ldr	r3, [pc, #728]	; (8003fd0 <TIM2_IRQHandler+0x2f0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	4ab4      	ldr	r2, [pc, #720]	; (8003fd0 <TIM2_IRQHandler+0x2f0>)
 8003cfe:	6013      	str	r3, [r2, #0]

  //Moving Average
  sumI=sumI-i_arrdata[i];		//menghapus sample data pertama/data lama
 8003d00:	4bb4      	ldr	r3, [pc, #720]	; (8003fd4 <TIM2_IRQHandler+0x2f4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4ab4      	ldr	r2, [pc, #720]	; (8003fd8 <TIM2_IRQHandler+0x2f8>)
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	49b4      	ldr	r1, [pc, #720]	; (8003fdc <TIM2_IRQHandler+0x2fc>)
 8003d0a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	4ab0      	ldr	r2, [pc, #704]	; (8003fd4 <TIM2_IRQHandler+0x2f4>)
 8003d12:	6013      	str	r3, [r2, #0]
  i_arrdata[i]=adc_value[0];	//save nilai ADC dari variable DMA
 8003d14:	4bb0      	ldr	r3, [pc, #704]	; (8003fd8 <TIM2_IRQHandler+0x2f8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4ab1      	ldr	r2, [pc, #708]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003d1a:	8811      	ldrh	r1, [r2, #0]
 8003d1c:	4aaf      	ldr	r2, [pc, #700]	; (8003fdc <TIM2_IRQHandler+0x2fc>)
 8003d1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  sumI=sumI+i_arrdata[i];		//menambahkan sample data paling baru
 8003d22:	4bad      	ldr	r3, [pc, #692]	; (8003fd8 <TIM2_IRQHandler+0x2f8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4aad      	ldr	r2, [pc, #692]	; (8003fdc <TIM2_IRQHandler+0x2fc>)
 8003d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4ba9      	ldr	r3, [pc, #676]	; (8003fd4 <TIM2_IRQHandler+0x2f4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4413      	add	r3, r2
 8003d34:	4aa7      	ldr	r2, [pc, #668]	; (8003fd4 <TIM2_IRQHandler+0x2f4>)
 8003d36:	6013      	str	r3, [r2, #0]
  i_datadigi=sumI/maxdata;	//menghitung rata-rata
 8003d38:	4ba6      	ldr	r3, [pc, #664]	; (8003fd4 <TIM2_IRQHandler+0x2f4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4aa9      	ldr	r2, [pc, #676]	; (8003fe4 <TIM2_IRQHandler+0x304>)
 8003d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d42:	1192      	asrs	r2, r2, #6
 8003d44:	17db      	asrs	r3, r3, #31
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fd f833 	bl	8000db4 <__aeabi_i2f>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4aa5      	ldr	r2, [pc, #660]	; (8003fe8 <TIM2_IRQHandler+0x308>)
 8003d52:	6013      	str	r3, [r2, #0]

  sum_datadigi_suhu1+=adc_value[1];
 8003d54:	4ba2      	ldr	r3, [pc, #648]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003d56:	885b      	ldrh	r3, [r3, #2]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4ba4      	ldr	r3, [pc, #656]	; (8003fec <TIM2_IRQHandler+0x30c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4413      	add	r3, r2
 8003d60:	4aa2      	ldr	r2, [pc, #648]	; (8003fec <TIM2_IRQHandler+0x30c>)
 8003d62:	6013      	str	r3, [r2, #0]
  sum_datadigi_suhu2+=adc_value[2];
 8003d64:	4b9e      	ldr	r3, [pc, #632]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003d66:	889b      	ldrh	r3, [r3, #4]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4ba1      	ldr	r3, [pc, #644]	; (8003ff0 <TIM2_IRQHandler+0x310>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a9f      	ldr	r2, [pc, #636]	; (8003ff0 <TIM2_IRQHandler+0x310>)
 8003d72:	6013      	str	r3, [r2, #0]
  sum_datadigi_suhu3+=adc_value[3];
 8003d74:	4b9a      	ldr	r3, [pc, #616]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003d76:	88db      	ldrh	r3, [r3, #6]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b9e      	ldr	r3, [pc, #632]	; (8003ff4 <TIM2_IRQHandler+0x314>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4413      	add	r3, r2
 8003d80:	4a9c      	ldr	r2, [pc, #624]	; (8003ff4 <TIM2_IRQHandler+0x314>)
 8003d82:	6013      	str	r3, [r2, #0]
  sum_datadigi_suhu4+=adc_value[4];
 8003d84:	4b96      	ldr	r3, [pc, #600]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003d86:	891b      	ldrh	r3, [r3, #8]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b9b      	ldr	r3, [pc, #620]	; (8003ff8 <TIM2_IRQHandler+0x318>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	4a99      	ldr	r2, [pc, #612]	; (8003ff8 <TIM2_IRQHandler+0x318>)
 8003d92:	6013      	str	r3, [r2, #0]
  // *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

  VBATT = sum_voltage;
 8003d94:	4b99      	ldr	r3, [pc, #612]	; (8003ffc <TIM2_IRQHandler+0x31c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a99      	ldr	r2, [pc, #612]	; (8004000 <TIM2_IRQHandler+0x320>)
 8003d9a:	6013      	str	r3, [r2, #0]
  if(VBATT<0) VBATT=-1;
 8003d9c:	4b98      	ldr	r3, [pc, #608]	; (8004000 <TIM2_IRQHandler+0x320>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fd f9f7 	bl	8001198 <__aeabi_fcmplt>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <TIM2_IRQHandler+0xd6>
 8003db0:	4b93      	ldr	r3, [pc, #588]	; (8004000 <TIM2_IRQHandler+0x320>)
 8003db2:	4a94      	ldr	r2, [pc, #592]	; (8004004 <TIM2_IRQHandler+0x324>)
 8003db4:	601a      	str	r2, [r3, #0]
	  IBATT = 0.062151574718308*i_datadigi - 121.796885042846 - OFFSET_SENSOR_ARUS; // Modul B fix
	  IBATT_for_offset_cal= 0.062151574718308*i_datadigi - 121.796885042846;
  }

  else if (UNIQUE_Code == 0x00A22) {
	  IBATT = 0.0635607965300084*i_datadigi - 125.923575896323 - OFFSET_SENSOR_ARUS; // Modul B fix
 8003db6:	4b8c      	ldr	r3, [pc, #560]	; (8003fe8 <TIM2_IRQHandler+0x308>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fba0 	bl	8000500 <__aeabi_f2d>
 8003dc0:	a379      	add	r3, pc, #484	; (adr r3, 8003fa8 <TIM2_IRQHandler+0x2c8>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	f7fc fbf3 	bl	80005b0 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4610      	mov	r0, r2
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	a377      	add	r3, pc, #476	; (adr r3, 8003fb0 <TIM2_IRQHandler+0x2d0>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fa32 	bl	8000240 <__aeabi_dsub>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4614      	mov	r4, r2
 8003de2:	461d      	mov	r5, r3
 8003de4:	4b88      	ldr	r3, [pc, #544]	; (8004008 <TIM2_IRQHandler+0x328>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fb89 	bl	8000500 <__aeabi_f2d>
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fa23 	bl	8000240 <__aeabi_dsub>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7fc fecd 	bl	8000ba0 <__aeabi_d2f>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a80      	ldr	r2, [pc, #512]	; (800400c <TIM2_IRQHandler+0x32c>)
 8003e0a:	6013      	str	r3, [r2, #0]
	  IBATT_for_offset_cal= 0.0635607965300084*i_datadigi - 125.923575896323;
 8003e0c:	4b76      	ldr	r3, [pc, #472]	; (8003fe8 <TIM2_IRQHandler+0x308>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb75 	bl	8000500 <__aeabi_f2d>
 8003e16:	a364      	add	r3, pc, #400	; (adr r3, 8003fa8 <TIM2_IRQHandler+0x2c8>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fbc8 	bl	80005b0 <__aeabi_dmul>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	a361      	add	r3, pc, #388	; (adr r3, 8003fb0 <TIM2_IRQHandler+0x2d0>)
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	f7fc fa07 	bl	8000240 <__aeabi_dsub>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f7fc feb1 	bl	8000ba0 <__aeabi_d2f>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4a73      	ldr	r2, [pc, #460]	; (8004010 <TIM2_IRQHandler+0x330>)
 8003e42:	6013      	str	r3, [r2, #0]
  }

  if(hitung_suhu >= interval_hitungsuhu) {
 8003e44:	4b61      	ldr	r3, [pc, #388]	; (8003fcc <TIM2_IRQHandler+0x2ec>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	2bc7      	cmp	r3, #199	; 0xc7
 8003e4a:	f240 8167 	bls.w	800411c <TIM2_IRQHandler+0x43c>

	  Res_T1=sum_datadigi_suhu1/hitung_suhu*10000/(3900-adc_value[1]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <TIM2_IRQHandler+0x30c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a5e      	ldr	r2, [pc, #376]	; (8003fcc <TIM2_IRQHandler+0x2ec>)
 8003e54:	8812      	ldrh	r2, [r2, #0]
 8003e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e5e:	fb02 f203 	mul.w	r2, r2, r3
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003e64:	885b      	ldrh	r3, [r3, #2]
 8003e66:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc ff9b 	bl	8000dac <__aeabi_ui2f>
 8003e76:	4603      	mov	r3, r0
 8003e78:	4a66      	ldr	r2, [pc, #408]	; (8004014 <TIM2_IRQHandler+0x334>)
 8003e7a:	6013      	str	r3, [r2, #0]
	  Suhu_T1= -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003e7c:	4b65      	ldr	r3, [pc, #404]	; (8004014 <TIM2_IRQHandler+0x334>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc fb3d 	bl	8000500 <__aeabi_f2d>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f00b fea3 	bl	800fbd8 <log>
 8003e92:	a349      	add	r3, pc, #292	; (adr r3, 8003fb8 <TIM2_IRQHandler+0x2d8>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	f7fc fb8a 	bl	80005b0 <__aeabi_dmul>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	a346      	add	r3, pc, #280	; (adr r3, 8003fc0 <TIM2_IRQHandler+0x2e0>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc f9cb 	bl	8000244 <__adddf3>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	f7fc fe73 	bl	8000ba0 <__aeabi_d2f>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4a56      	ldr	r2, [pc, #344]	; (8004018 <TIM2_IRQHandler+0x338>)
 8003ebe:	6013      	str	r3, [r2, #0]
	  Res_T2=sum_datadigi_suhu2/hitung_suhu*10000/(3900-adc_value[2]);
 8003ec0:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <TIM2_IRQHandler+0x310>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a41      	ldr	r2, [pc, #260]	; (8003fcc <TIM2_IRQHandler+0x2ec>)
 8003ec6:	8812      	ldrh	r2, [r2, #0]
 8003ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ecc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ed0:	fb02 f203 	mul.w	r2, r2, r3
 8003ed4:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003ed6:	889b      	ldrh	r3, [r3, #4]
 8003ed8:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003edc:	330c      	adds	r3, #12
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc ff62 	bl	8000dac <__aeabi_ui2f>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4a4c      	ldr	r2, [pc, #304]	; (800401c <TIM2_IRQHandler+0x33c>)
 8003eec:	6013      	str	r3, [r2, #0]
	  Suhu_T2= -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003eee:	4b4b      	ldr	r3, [pc, #300]	; (800401c <TIM2_IRQHandler+0x33c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc fb04 	bl	8000500 <__aeabi_f2d>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f00b fe6a 	bl	800fbd8 <log>
 8003f04:	a32c      	add	r3, pc, #176	; (adr r3, 8003fb8 <TIM2_IRQHandler+0x2d8>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc fb51 	bl	80005b0 <__aeabi_dmul>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4610      	mov	r0, r2
 8003f14:	4619      	mov	r1, r3
 8003f16:	a32a      	add	r3, pc, #168	; (adr r3, 8003fc0 <TIM2_IRQHandler+0x2e0>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc f992 	bl	8000244 <__adddf3>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f7fc fe3a 	bl	8000ba0 <__aeabi_d2f>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4a3c      	ldr	r2, [pc, #240]	; (8004020 <TIM2_IRQHandler+0x340>)
 8003f30:	6013      	str	r3, [r2, #0]
	  Res_T3=sum_datadigi_suhu3/hitung_suhu*10000/(3900-adc_value[3]);
 8003f32:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <TIM2_IRQHandler+0x314>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a25      	ldr	r2, [pc, #148]	; (8003fcc <TIM2_IRQHandler+0x2ec>)
 8003f38:	8812      	ldrh	r2, [r2, #0]
 8003f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f42:	fb02 f203 	mul.w	r2, r2, r3
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <TIM2_IRQHandler+0x300>)
 8003f48:	88db      	ldrh	r3, [r3, #6]
 8003f4a:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003f4e:	330c      	adds	r3, #12
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc ff29 	bl	8000dac <__aeabi_ui2f>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	4a31      	ldr	r2, [pc, #196]	; (8004024 <TIM2_IRQHandler+0x344>)
 8003f5e:	6013      	str	r3, [r2, #0]
	  Suhu_T3= -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003f60:	4b30      	ldr	r3, [pc, #192]	; (8004024 <TIM2_IRQHandler+0x344>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fc facb 	bl	8000500 <__aeabi_f2d>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	f00b fe31 	bl	800fbd8 <log>
 8003f76:	a310      	add	r3, pc, #64	; (adr r3, 8003fb8 <TIM2_IRQHandler+0x2d8>)
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc fb18 	bl	80005b0 <__aeabi_dmul>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	a30d      	add	r3, pc, #52	; (adr r3, 8003fc0 <TIM2_IRQHandler+0x2e0>)
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f7fc f959 	bl	8000244 <__adddf3>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f7fc fe01 	bl	8000ba0 <__aeabi_d2f>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	e042      	b.n	8004028 <TIM2_IRQHandler+0x348>
 8003fa2:	bf00      	nop
 8003fa4:	f3af 8000 	nop.w
 8003fa8:	366772dc 	.word	0x366772dc
 8003fac:	3fb04585 	.word	0x3fb04585
 8003fb0:	de138532 	.word	0xde138532
 8003fb4:	405f7b1b 	.word	0x405f7b1b
 8003fb8:	cccccccd 	.word	0xcccccccd
 8003fbc:	c0380ccc 	.word	0xc0380ccc
 8003fc0:	b851eb85 	.word	0xb851eb85
 8003fc4:	406ecd1e 	.word	0x406ecd1e
 8003fc8:	20000898 	.word	0x20000898
 8003fcc:	20000840 	.word	0x20000840
 8003fd0:	20000364 	.word	0x20000364
 8003fd4:	2000083c 	.word	0x2000083c
 8003fd8:	20000828 	.word	0x20000828
 8003fdc:	20000680 	.word	0x20000680
 8003fe0:	200002e8 	.word	0x200002e8
 8003fe4:	51eb851f 	.word	0x51eb851f
 8003fe8:	20000278 	.word	0x20000278
 8003fec:	20000838 	.word	0x20000838
 8003ff0:	20000820 	.word	0x20000820
 8003ff4:	20000818 	.word	0x20000818
 8003ff8:	20000844 	.word	0x20000844
 8003ffc:	2000041c 	.word	0x2000041c
 8004000:	20000280 	.word	0x20000280
 8004004:	bf800000 	.word	0xbf800000
 8004008:	20000360 	.word	0x20000360
 800400c:	200002f4 	.word	0x200002f4
 8004010:	20000368 	.word	0x20000368
 8004014:	200002e4 	.word	0x200002e4
 8004018:	20000304 	.word	0x20000304
 800401c:	2000032c 	.word	0x2000032c
 8004020:	20000378 	.word	0x20000378
 8004024:	20000358 	.word	0x20000358
 8004028:	4a47      	ldr	r2, [pc, #284]	; (8004148 <TIM2_IRQHandler+0x468>)
 800402a:	6013      	str	r3, [r2, #0]
	  Res_T4=sum_datadigi_suhu4/hitung_suhu*10000/(3900-adc_value[4]);
 800402c:	4b47      	ldr	r3, [pc, #284]	; (800414c <TIM2_IRQHandler+0x46c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a47      	ldr	r2, [pc, #284]	; (8004150 <TIM2_IRQHandler+0x470>)
 8004032:	8812      	ldrh	r2, [r2, #0]
 8004034:	fbb3 f3f2 	udiv	r3, r3, r2
 8004038:	f242 7210 	movw	r2, #10000	; 0x2710
 800403c:	fb02 f203 	mul.w	r2, r2, r3
 8004040:	4b44      	ldr	r3, [pc, #272]	; (8004154 <TIM2_IRQHandler+0x474>)
 8004042:	891b      	ldrh	r3, [r3, #8]
 8004044:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8004048:	330c      	adds	r3, #12
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc feac 	bl	8000dac <__aeabi_ui2f>
 8004054:	4603      	mov	r3, r0
 8004056:	4a40      	ldr	r2, [pc, #256]	; (8004158 <TIM2_IRQHandler+0x478>)
 8004058:	6013      	str	r3, [r2, #0]
	  Suhu_T4= -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800405a:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <TIM2_IRQHandler+0x478>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fc fa4e 	bl	8000500 <__aeabi_f2d>
 8004064:	4602      	mov	r2, r0
 8004066:	460b      	mov	r3, r1
 8004068:	4610      	mov	r0, r2
 800406a:	4619      	mov	r1, r3
 800406c:	f00b fdb4 	bl	800fbd8 <log>
 8004070:	a331      	add	r3, pc, #196	; (adr r3, 8004138 <TIM2_IRQHandler+0x458>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f7fc fa9b 	bl	80005b0 <__aeabi_dmul>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	a32f      	add	r3, pc, #188	; (adr r3, 8004140 <TIM2_IRQHandler+0x460>)
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	f7fc f8dc 	bl	8000244 <__adddf3>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	f7fc fd84 	bl	8000ba0 <__aeabi_d2f>
 8004098:	4603      	mov	r3, r0
 800409a:	4a30      	ldr	r2, [pc, #192]	; (800415c <TIM2_IRQHandler+0x47c>)
 800409c:	6013      	str	r3, [r2, #0]

	  if(Suhu_T1>=130) Suhu_T1 = 130;
 800409e:	4b30      	ldr	r3, [pc, #192]	; (8004160 <TIM2_IRQHandler+0x480>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4930      	ldr	r1, [pc, #192]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fd f88b 	bl	80011c0 <__aeabi_fcmpge>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <TIM2_IRQHandler+0x3d6>
 80040b0:	4b2b      	ldr	r3, [pc, #172]	; (8004160 <TIM2_IRQHandler+0x480>)
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040b4:	601a      	str	r2, [r3, #0]
	  if(Suhu_T2>=130) Suhu_T2 = 130;
 80040b6:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <TIM2_IRQHandler+0x488>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	492a      	ldr	r1, [pc, #168]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd f87f 	bl	80011c0 <__aeabi_fcmpge>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <TIM2_IRQHandler+0x3ee>
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <TIM2_IRQHandler+0x488>)
 80040ca:	4a26      	ldr	r2, [pc, #152]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040cc:	601a      	str	r2, [r3, #0]
	  if(Suhu_T3>=130) Suhu_T3 = 130;
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <TIM2_IRQHandler+0x468>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4924      	ldr	r1, [pc, #144]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fd f873 	bl	80011c0 <__aeabi_fcmpge>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <TIM2_IRQHandler+0x406>
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <TIM2_IRQHandler+0x468>)
 80040e2:	4a20      	ldr	r2, [pc, #128]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040e4:	601a      	str	r2, [r3, #0]
	  if(Suhu_T4>=130) Suhu_T4 = 130;
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <TIM2_IRQHandler+0x47c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	491e      	ldr	r1, [pc, #120]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fd f867 	bl	80011c0 <__aeabi_fcmpge>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <TIM2_IRQHandler+0x41e>
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <TIM2_IRQHandler+0x47c>)
 80040fa:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <TIM2_IRQHandler+0x484>)
 80040fc:	601a      	str	r2, [r3, #0]

	  sum_datadigi_suhu1=0;
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <TIM2_IRQHandler+0x48c>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
	  sum_datadigi_suhu2=0;
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <TIM2_IRQHandler+0x490>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]
	  sum_datadigi_suhu3=0;
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <TIM2_IRQHandler+0x494>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
	  sum_datadigi_suhu4=0;
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <TIM2_IRQHandler+0x46c>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
	  hitung_suhu=0;
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <TIM2_IRQHandler+0x470>)
 8004118:	2200      	movs	r2, #0
 800411a:	801a      	strh	r2, [r3, #0]
  }

  if(BATT_Start_Up==1)
 800411c:	4b16      	ldr	r3, [pc, #88]	; (8004178 <TIM2_IRQHandler+0x498>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	f040 80d4 	bne.w	80042ce <TIM2_IRQHandler+0x5ee>
  {
	  if(BATT_State == STATE_DISCHARGE){
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <TIM2_IRQHandler+0x49c>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d128      	bne.n	8004180 <TIM2_IRQHandler+0x4a0>
		  Batt_Protection_when_discharge();
 800412e:	f000 fa23 	bl	8004578 <Batt_Protection_when_discharge>
 8004132:	e02b      	b.n	800418c <TIM2_IRQHandler+0x4ac>
 8004134:	f3af 8000 	nop.w
 8004138:	cccccccd 	.word	0xcccccccd
 800413c:	c0380ccc 	.word	0xc0380ccc
 8004140:	b851eb85 	.word	0xb851eb85
 8004144:	406ecd1e 	.word	0x406ecd1e
 8004148:	20000284 	.word	0x20000284
 800414c:	20000844 	.word	0x20000844
 8004150:	20000840 	.word	0x20000840
 8004154:	200002e8 	.word	0x200002e8
 8004158:	200002f8 	.word	0x200002f8
 800415c:	20000334 	.word	0x20000334
 8004160:	20000304 	.word	0x20000304
 8004164:	43020000 	.word	0x43020000
 8004168:	20000378 	.word	0x20000378
 800416c:	20000838 	.word	0x20000838
 8004170:	20000820 	.word	0x20000820
 8004174:	20000818 	.word	0x20000818
 8004178:	2000023d 	.word	0x2000023d
 800417c:	2000067c 	.word	0x2000067c
	  }
	  else if(BATT_State == STATE_CHARGE){
 8004180:	4ba5      	ldr	r3, [pc, #660]	; (8004418 <TIM2_IRQHandler+0x738>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <TIM2_IRQHandler+0x4ac>
		  Batt_Protection_when_charge();
 8004188:	f001 f886 	bl	8005298 <Batt_Protection_when_charge>
	  }
	  if(BATT_State == STATE_FULL_CHARGE_DISCHARGE){
 800418c:	4ba2      	ldr	r3, [pc, #648]	; (8004418 <TIM2_IRQHandler+0x738>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d101      	bne.n	8004198 <TIM2_IRQHandler+0x4b8>
		  Batt_Protection_when_chargedischarge();
 8004194:	f001 fc94 	bl	8005ac0 <Batt_Protection_when_chargedischarge>
	  }

	  //********************* Clearing protection status *****************************////
	  // ---> Clearing UnderVoltage
	  if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON){
 8004198:	4ba0      	ldr	r3, [pc, #640]	; (800441c <TIM2_IRQHandler+0x73c>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d008      	beq.n	80041b2 <TIM2_IRQHandler+0x4d2>
 80041a0:	4b9f      	ldr	r3, [pc, #636]	; (8004420 <TIM2_IRQHandler+0x740>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	499f      	ldr	r1, [pc, #636]	; (8004424 <TIM2_IRQHandler+0x744>)
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd f814 	bl	80011d4 <__aeabi_fcmpgt>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <TIM2_IRQHandler+0x4e6>
 80041b2:	4b9d      	ldr	r3, [pc, #628]	; (8004428 <TIM2_IRQHandler+0x748>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <TIM2_IRQHandler+0x4e6>
		  flag_trip_undervoltage=OFF;
 80041ba:	4b9b      	ldr	r3, [pc, #620]	; (8004428 <TIM2_IRQHandler+0x748>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_undervoltage=0;
 80041c0:	4b96      	ldr	r3, [pc, #600]	; (800441c <TIM2_IRQHandler+0x73c>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCurrent Discharge
	  if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1){
 80041c6:	4b99      	ldr	r3, [pc, #612]	; (800442c <TIM2_IRQHandler+0x74c>)
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d109      	bne.n	80041e2 <TIM2_IRQHandler+0x502>
 80041ce:	4b98      	ldr	r3, [pc, #608]	; (8004430 <TIM2_IRQHandler+0x750>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d105      	bne.n	80041e2 <TIM2_IRQHandler+0x502>
		  flag_trip_overcurrentdischarge=OFF;
 80041d6:	4b95      	ldr	r3, [pc, #596]	; (800442c <TIM2_IRQHandler+0x74c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
		  Clear_Trip_overcurrentdischarge=0;
 80041dc:	4b94      	ldr	r3, [pc, #592]	; (8004430 <TIM2_IRQHandler+0x750>)
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverTemperature
	  if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50)){
 80041e2:	4b94      	ldr	r3, [pc, #592]	; (8004434 <TIM2_IRQHandler+0x754>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d126      	bne.n	8004238 <TIM2_IRQHandler+0x558>
 80041ea:	4b93      	ldr	r3, [pc, #588]	; (8004438 <TIM2_IRQHandler+0x758>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4993      	ldr	r1, [pc, #588]	; (800443c <TIM2_IRQHandler+0x75c>)
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fc ffd1 	bl	8001198 <__aeabi_fcmplt>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01d      	beq.n	8004238 <TIM2_IRQHandler+0x558>
 80041fc:	4b90      	ldr	r3, [pc, #576]	; (8004440 <TIM2_IRQHandler+0x760>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4990      	ldr	r1, [pc, #576]	; (8004444 <TIM2_IRQHandler+0x764>)
 8004202:	4618      	mov	r0, r3
 8004204:	f7fc ffc8 	bl	8001198 <__aeabi_fcmplt>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d014      	beq.n	8004238 <TIM2_IRQHandler+0x558>
 800420e:	4b8e      	ldr	r3, [pc, #568]	; (8004448 <TIM2_IRQHandler+0x768>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	498a      	ldr	r1, [pc, #552]	; (800443c <TIM2_IRQHandler+0x75c>)
 8004214:	4618      	mov	r0, r3
 8004216:	f7fc ffbf 	bl	8001198 <__aeabi_fcmplt>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00b      	beq.n	8004238 <TIM2_IRQHandler+0x558>
 8004220:	4b8a      	ldr	r3, [pc, #552]	; (800444c <TIM2_IRQHandler+0x76c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4987      	ldr	r1, [pc, #540]	; (8004444 <TIM2_IRQHandler+0x764>)
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc ffb6 	bl	8001198 <__aeabi_fcmplt>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d002      	beq.n	8004238 <TIM2_IRQHandler+0x558>
		  flag_trip_overtemperature=OFF;
 8004232:	4b80      	ldr	r3, [pc, #512]	; (8004434 <TIM2_IRQHandler+0x754>)
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing UnderTemperature
	  if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20)){
 8004238:	4b85      	ldr	r3, [pc, #532]	; (8004450 <TIM2_IRQHandler+0x770>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d126      	bne.n	800428e <TIM2_IRQHandler+0x5ae>
 8004240:	4b7d      	ldr	r3, [pc, #500]	; (8004438 <TIM2_IRQHandler+0x758>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4983      	ldr	r1, [pc, #524]	; (8004454 <TIM2_IRQHandler+0x774>)
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc ffc4 	bl	80011d4 <__aeabi_fcmpgt>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d01d      	beq.n	800428e <TIM2_IRQHandler+0x5ae>
 8004252:	4b7b      	ldr	r3, [pc, #492]	; (8004440 <TIM2_IRQHandler+0x760>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	497f      	ldr	r1, [pc, #508]	; (8004454 <TIM2_IRQHandler+0x774>)
 8004258:	4618      	mov	r0, r3
 800425a:	f7fc ffbb 	bl	80011d4 <__aeabi_fcmpgt>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d014      	beq.n	800428e <TIM2_IRQHandler+0x5ae>
 8004264:	4b78      	ldr	r3, [pc, #480]	; (8004448 <TIM2_IRQHandler+0x768>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	497a      	ldr	r1, [pc, #488]	; (8004454 <TIM2_IRQHandler+0x774>)
 800426a:	4618      	mov	r0, r3
 800426c:	f7fc ffb2 	bl	80011d4 <__aeabi_fcmpgt>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00b      	beq.n	800428e <TIM2_IRQHandler+0x5ae>
 8004276:	4b75      	ldr	r3, [pc, #468]	; (800444c <TIM2_IRQHandler+0x76c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4976      	ldr	r1, [pc, #472]	; (8004454 <TIM2_IRQHandler+0x774>)
 800427c:	4618      	mov	r0, r3
 800427e:	f7fc ffa9 	bl	80011d4 <__aeabi_fcmpgt>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <TIM2_IRQHandler+0x5ae>
		  flag_trip_undertemperature=OFF;
 8004288:	4b71      	ldr	r3, [pc, #452]	; (8004450 <TIM2_IRQHandler+0x770>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverDischarge
	  if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20){
 800428e:	4b72      	ldr	r3, [pc, #456]	; (8004458 <TIM2_IRQHandler+0x778>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10b      	bne.n	80042ae <TIM2_IRQHandler+0x5ce>
 8004296:	4b71      	ldr	r3, [pc, #452]	; (800445c <TIM2_IRQHandler+0x77c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	496e      	ldr	r1, [pc, #440]	; (8004454 <TIM2_IRQHandler+0x774>)
 800429c:	4618      	mov	r0, r3
 800429e:	f7fc ff99 	bl	80011d4 <__aeabi_fcmpgt>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <TIM2_IRQHandler+0x5ce>
		  flag_trip_SOCOverDischarge=OFF;
 80042a8:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <TIM2_IRQHandler+0x778>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
	  }
	  // ---> Clearing OverCharge
	  if(flag_trip_SOCOverCharge==ON && Pack_SOC<70){
 80042ae:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <TIM2_IRQHandler+0x780>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10b      	bne.n	80042ce <TIM2_IRQHandler+0x5ee>
 80042b6:	4b69      	ldr	r3, [pc, #420]	; (800445c <TIM2_IRQHandler+0x77c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	496a      	ldr	r1, [pc, #424]	; (8004464 <TIM2_IRQHandler+0x784>)
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc ff6b 	bl	8001198 <__aeabi_fcmplt>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <TIM2_IRQHandler+0x5ee>
		  flag_trip_SOCOverCharge=OFF;
 80042c8:	4b65      	ldr	r3, [pc, #404]	; (8004460 <TIM2_IRQHandler+0x780>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
	  }
  }

  i++;
 80042ce:	4b66      	ldr	r3, [pc, #408]	; (8004468 <TIM2_IRQHandler+0x788>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3301      	adds	r3, #1
 80042d4:	4a64      	ldr	r2, [pc, #400]	; (8004468 <TIM2_IRQHandler+0x788>)
 80042d6:	6013      	str	r3, [r2, #0]
  i=i%maxdata;
 80042d8:	4b63      	ldr	r3, [pc, #396]	; (8004468 <TIM2_IRQHandler+0x788>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b63      	ldr	r3, [pc, #396]	; (800446c <TIM2_IRQHandler+0x78c>)
 80042de:	fb83 1302 	smull	r1, r3, r3, r2
 80042e2:	1199      	asrs	r1, r3, #6
 80042e4:	17d3      	asrs	r3, r2, #31
 80042e6:	1acb      	subs	r3, r1, r3
 80042e8:	21c8      	movs	r1, #200	; 0xc8
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	4a5d      	ldr	r2, [pc, #372]	; (8004468 <TIM2_IRQHandler+0x788>)
 80042f2:	6013      	str	r3, [r2, #0]

  //////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
  if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 80042f4:	4b48      	ldr	r3, [pc, #288]	; (8004418 <TIM2_IRQHandler+0x738>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d008      	beq.n	800430e <TIM2_IRQHandler+0x62e>
 80042fc:	4b46      	ldr	r3, [pc, #280]	; (8004418 <TIM2_IRQHandler+0x738>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d004      	beq.n	800430e <TIM2_IRQHandler+0x62e>
 8004304:	4b44      	ldr	r3, [pc, #272]	; (8004418 <TIM2_IRQHandler+0x738>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b03      	cmp	r3, #3
 800430a:	f040 80e0 	bne.w	80044ce <TIM2_IRQHandler+0x7ee>
  {
	  time_soc++;
 800430e:	4b58      	ldr	r3, [pc, #352]	; (8004470 <TIM2_IRQHandler+0x790>)
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <TIM2_IRQHandler+0x790>)
 8004318:	801a      	strh	r2, [r3, #0]
	  sum_current+=IBATT;
 800431a:	4b56      	ldr	r3, [pc, #344]	; (8004474 <TIM2_IRQHandler+0x794>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a56      	ldr	r2, [pc, #344]	; (8004478 <TIM2_IRQHandler+0x798>)
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc fc91 	bl	8000c4c <__addsf3>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	4b51      	ldr	r3, [pc, #324]	; (8004474 <TIM2_IRQHandler+0x794>)
 8004330:	601a      	str	r2, [r3, #0]
	  if(time_soc>99)
 8004332:	4b4f      	ldr	r3, [pc, #316]	; (8004470 <TIM2_IRQHandler+0x790>)
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	2b63      	cmp	r3, #99	; 0x63
 8004338:	f240 80c9 	bls.w	80044ce <TIM2_IRQHandler+0x7ee>
	  {
		  AH_Consumption = (-1*sum_current/100*(1.0/3600.0))/Pack_Cap*100-(4e-5); //Konsumsi System 4e-5
 800433c:	4b4d      	ldr	r3, [pc, #308]	; (8004474 <TIM2_IRQHandler+0x794>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004344:	494d      	ldr	r1, [pc, #308]	; (800447c <TIM2_IRQHandler+0x79c>)
 8004346:	4618      	mov	r0, r3
 8004348:	f7fc fe3c 	bl	8000fc4 <__aeabi_fdiv>
 800434c:	4603      	mov	r3, r0
 800434e:	4618      	mov	r0, r3
 8004350:	f7fc f8d6 	bl	8000500 <__aeabi_f2d>
 8004354:	a32c      	add	r3, pc, #176	; (adr r3, 8004408 <TIM2_IRQHandler+0x728>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f7fc f929 	bl	80005b0 <__aeabi_dmul>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4614      	mov	r4, r2
 8004364:	461d      	mov	r5, r3
 8004366:	4b46      	ldr	r3, [pc, #280]	; (8004480 <TIM2_IRQHandler+0x7a0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f8c8 	bl	8000500 <__aeabi_f2d>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4620      	mov	r0, r4
 8004376:	4629      	mov	r1, r5
 8004378:	f7fc fa44 	bl	8000804 <__aeabi_ddiv>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <TIM2_IRQHandler+0x7a4>)
 800438a:	f7fc f911 	bl	80005b0 <__aeabi_dmul>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	a31e      	add	r3, pc, #120	; (adr r3, 8004410 <TIM2_IRQHandler+0x730>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fb ff50 	bl	8000240 <__aeabi_dsub>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7fc fbfa 	bl	8000ba0 <__aeabi_d2f>
 80043ac:	4603      	mov	r3, r0
 80043ae:	4a36      	ldr	r2, [pc, #216]	; (8004488 <TIM2_IRQHandler+0x7a8>)
 80043b0:	6013      	str	r3, [r2, #0]
		  Pack_SOC=Pack_SOC+AH_Consumption;
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <TIM2_IRQHandler+0x77c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a34      	ldr	r2, [pc, #208]	; (8004488 <TIM2_IRQHandler+0x7a8>)
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc fc45 	bl	8000c4c <__addsf3>
 80043c2:	4603      	mov	r3, r0
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <TIM2_IRQHandler+0x77c>)
 80043c8:	601a      	str	r2, [r3, #0]
		  time_soc=0;
 80043ca:	4b29      	ldr	r3, [pc, #164]	; (8004470 <TIM2_IRQHandler+0x790>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	801a      	strh	r2, [r3, #0]
		  sum_current=0;
 80043d0:	4b28      	ldr	r3, [pc, #160]	; (8004474 <TIM2_IRQHandler+0x794>)
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

		  grad=(100-0)/(batas_atas-batas_bawah);
 80043d8:	4b2c      	ldr	r3, [pc, #176]	; (800448c <TIM2_IRQHandler+0x7ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2c      	ldr	r2, [pc, #176]	; (8004490 <TIM2_IRQHandler+0x7b0>)
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	4611      	mov	r1, r2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fc fc30 	bl	8000c48 <__aeabi_fsub>
 80043e8:	4603      	mov	r3, r0
 80043ea:	4619      	mov	r1, r3
 80043ec:	4823      	ldr	r0, [pc, #140]	; (800447c <TIM2_IRQHandler+0x79c>)
 80043ee:	f7fc fde9 	bl	8000fc4 <__aeabi_fdiv>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	4b27      	ldr	r3, [pc, #156]	; (8004494 <TIM2_IRQHandler+0x7b4>)
 80043f8:	601a      	str	r2, [r3, #0]
		  constanta=grad*batas_bawah*(-1);
 80043fa:	4b26      	ldr	r3, [pc, #152]	; (8004494 <TIM2_IRQHandler+0x7b4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a24      	ldr	r2, [pc, #144]	; (8004490 <TIM2_IRQHandler+0x7b0>)
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	e047      	b.n	8004498 <TIM2_IRQHandler+0x7b8>
 8004408:	789abcdf 	.word	0x789abcdf
 800440c:	3f323456 	.word	0x3f323456
 8004410:	88e368f1 	.word	0x88e368f1
 8004414:	3f04f8b5 	.word	0x3f04f8b5
 8004418:	2000067c 	.word	0x2000067c
 800441c:	20000348 	.word	0x20000348
 8004420:	20000280 	.word	0x20000280
 8004424:	42580000 	.word	0x42580000
 8004428:	200002fd 	.word	0x200002fd
 800442c:	2000030c 	.word	0x2000030c
 8004430:	20000290 	.word	0x20000290
 8004434:	2000027c 	.word	0x2000027c
 8004438:	20000304 	.word	0x20000304
 800443c:	42200000 	.word	0x42200000
 8004440:	20000378 	.word	0x20000378
 8004444:	42480000 	.word	0x42480000
 8004448:	20000284 	.word	0x20000284
 800444c:	20000334 	.word	0x20000334
 8004450:	200002fc 	.word	0x200002fc
 8004454:	41a00000 	.word	0x41a00000
 8004458:	20000328 	.word	0x20000328
 800445c:	20000370 	.word	0x20000370
 8004460:	2000025d 	.word	0x2000025d
 8004464:	428c0000 	.word	0x428c0000
 8004468:	20000828 	.word	0x20000828
 800446c:	51eb851f 	.word	0x51eb851f
 8004470:	2000081c 	.word	0x2000081c
 8004474:	2000084c 	.word	0x2000084c
 8004478:	200002f4 	.word	0x200002f4
 800447c:	42c80000 	.word	0x42c80000
 8004480:	2000000c 	.word	0x2000000c
 8004484:	40590000 	.word	0x40590000
 8004488:	20000264 	.word	0x20000264
 800448c:	20000250 	.word	0x20000250
 8004490:	20000308 	.word	0x20000308
 8004494:	20000310 	.word	0x20000310
 8004498:	f7fc fce0 	bl	8000e5c <__aeabi_fmul>
 800449c:	4603      	mov	r3, r0
 800449e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044a2:	4a0c      	ldr	r2, [pc, #48]	; (80044d4 <TIM2_IRQHandler+0x7f4>)
 80044a4:	6013      	str	r3, [r2, #0]
		  SOC_manipulasi=grad*Pack_SOC+constanta;
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <TIM2_IRQHandler+0x7f8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <TIM2_IRQHandler+0x7fc>)
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fc fcd3 	bl	8000e5c <__aeabi_fmul>
 80044b6:	4603      	mov	r3, r0
 80044b8:	461a      	mov	r2, r3
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <TIM2_IRQHandler+0x7f4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7fc fbc3 	bl	8000c4c <__addsf3>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <TIM2_IRQHandler+0x800>)
 80044cc:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	bdb0      	pop	{r4, r5, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	2000028c 	.word	0x2000028c
 80044d8:	20000310 	.word	0x20000310
 80044dc:	20000370 	.word	0x20000370
 80044e0:	2000031c 	.word	0x2000031c

080044e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044e8:	481d      	ldr	r0, [pc, #116]	; (8004560 <TIM3_IRQHandler+0x7c>)
 80044ea:	f006 fb1b 	bl	800ab24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  testtim3++;
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <TIM3_IRQHandler+0x80>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	3301      	adds	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <TIM3_IRQHandler+0x80>)
 80044f8:	801a      	strh	r2, [r3, #0]
  if(flag_start_shutdown==1){
 80044fa:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <TIM3_IRQHandler+0x84>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d12b      	bne.n	800455a <TIM3_IRQHandler+0x76>
	  if(Tick_33ms == 1) CANTX_BattParameter();
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <TIM3_IRQHandler+0x88>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <TIM3_IRQHandler+0x2c>
 800450a:	f7fe faf9 	bl	8002b00 <CANTX_BattParameter>
 800450e:	e00f      	b.n	8004530 <TIM3_IRQHandler+0x4c>
	  else if(Tick_33ms == 2) CANTX_BattProtection();
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <TIM3_IRQHandler+0x88>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d102      	bne.n	800451e <TIM3_IRQHandler+0x3a>
 8004518:	f7fe fc3c 	bl	8002d94 <CANTX_BattProtection>
 800451c:	e008      	b.n	8004530 <TIM3_IRQHandler+0x4c>
	  else if(Tick_33ms == 3) {
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <TIM3_IRQHandler+0x88>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b03      	cmp	r3, #3
 8004524:	d104      	bne.n	8004530 <TIM3_IRQHandler+0x4c>
		  CANTX_ReportToCharger();
 8004526:	f7fe fd7b 	bl	8003020 <CANTX_ReportToCharger>
		  Tick_33ms = 0;
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <TIM3_IRQHandler+0x88>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
	  }
	  if(Tick_BattId > 30) {
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <TIM3_IRQHandler+0x8c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b1e      	cmp	r3, #30
 8004536:	d904      	bls.n	8004542 <TIM3_IRQHandler+0x5e>
		  CANTX_BattId();
 8004538:	f7fe fdea 	bl	8003110 <CANTX_BattId>
		  Tick_BattId = 0;
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <TIM3_IRQHandler+0x8c>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
	  }
	  Tick_33ms++;
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <TIM3_IRQHandler+0x88>)
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <TIM3_IRQHandler+0x88>)
 800454c:	701a      	strb	r2, [r3, #0]
	  Tick_BattId++;
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <TIM3_IRQHandler+0x8c>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <TIM3_IRQHandler+0x8c>)
 8004558:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000850 	.word	0x20000850
 8004564:	20000842 	.word	0x20000842
 8004568:	2000027d 	.word	0x2000027d
 800456c:	20000836 	.word	0x20000836
 8004570:	20000830 	.word	0x20000830
 8004574:	00000000 	.word	0x00000000

08004578 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void) {
 8004578:	b5b0      	push	{r4, r5, r7, lr}
 800457a:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT/0.5)) {
 800457c:	4b84      	ldr	r3, [pc, #528]	; (8004790 <Batt_Protection_when_discharge+0x218>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb ffbd 	bl	8000500 <__aeabi_f2d>
 8004586:	4604      	mov	r4, r0
 8004588:	460d      	mov	r5, r1
 800458a:	4b82      	ldr	r3, [pc, #520]	; (8004794 <Batt_Protection_when_discharge+0x21c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fb ffb6 	bl	8000500 <__aeabi_f2d>
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	4b7f      	ldr	r3, [pc, #508]	; (8004798 <Batt_Protection_when_discharge+0x220>)
 800459a:	f7fc f933 	bl	8000804 <__aeabi_ddiv>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4620      	mov	r0, r4
 80045a4:	4629      	mov	r1, r5
 80045a6:	f7fc fa93 	bl	8000ad0 <__aeabi_dcmpgt>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <Batt_Protection_when_discharge+0x68>
		Isc = IBATT;
 80045b0:	4b77      	ldr	r3, [pc, #476]	; (8004790 <Batt_Protection_when_discharge+0x218>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a79      	ldr	r2, [pc, #484]	; (800479c <Batt_Protection_when_discharge+0x224>)
 80045b6:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <Batt_Protection_when_discharge+0x21c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a78      	ldr	r2, [pc, #480]	; (80047a0 <Batt_Protection_when_discharge+0x228>)
 80045be:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 80045c0:	4b78      	ldr	r3, [pc, #480]	; (80047a4 <Batt_Protection_when_discharge+0x22c>)
 80045c2:	220c      	movs	r2, #12
 80045c4:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80045c6:	f7fc ffc5 	bl	8001554 <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 80045ca:	4b77      	ldr	r3, [pc, #476]	; (80047a8 <Batt_Protection_when_discharge+0x230>)
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045d6:	4875      	ldr	r0, [pc, #468]	; (80047ac <Batt_Protection_when_discharge+0x234>)
 80045d8:	f004 fb79 	bl	8008cce <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 80045dc:	f000 be48 	b.w	8005270 <Batt_Protection_when_discharge+0xcf8>
	else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 80045e0:	4b6c      	ldr	r3, [pc, #432]	; (8004794 <Batt_Protection_when_discharge+0x21c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a72      	ldr	r2, [pc, #456]	; (80047b0 <Batt_Protection_when_discharge+0x238>)
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fc fdd4 	bl	8001198 <__aeabi_fcmplt>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80f2 	beq.w	80047dc <Batt_Protection_when_discharge+0x264>
 80045f8:	4b6e      	ldr	r3, [pc, #440]	; (80047b4 <Batt_Protection_when_discharge+0x23c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 80ed 	bne.w	80047dc <Batt_Protection_when_discharge+0x264>
		fault_code=1;
 8004602:	4b68      	ldr	r3, [pc, #416]	; (80047a4 <Batt_Protection_when_discharge+0x22c>)
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8004608:	4b6b      	ldr	r3, [pc, #428]	; (80047b8 <Batt_Protection_when_discharge+0x240>)
 800460a:	681c      	ldr	r4, [r3, #0]
 800460c:	4b61      	ldr	r3, [pc, #388]	; (8004794 <Batt_Protection_when_discharge+0x21c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a67      	ldr	r2, [pc, #412]	; (80047b0 <Batt_Protection_when_discharge+0x238>)
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f7fc fcd4 	bl	8000fc4 <__aeabi_fdiv>
 800461c:	4603      	mov	r3, r0
 800461e:	4619      	mov	r1, r3
 8004620:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004624:	f7fc fb10 	bl	8000c48 <__aeabi_fsub>
 8004628:	4603      	mov	r3, r0
 800462a:	4619      	mov	r1, r3
 800462c:	4620      	mov	r0, r4
 800462e:	f7fc fcc9 	bl	8000fc4 <__aeabi_fdiv>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	4b61      	ldr	r3, [pc, #388]	; (80047bc <Batt_Protection_when_discharge+0x244>)
 8004638:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 800463a:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <Batt_Protection_when_discharge+0x248>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fb ff5e 	bl	8000500 <__aeabi_f2d>
 8004644:	a350      	add	r3, pc, #320	; (adr r3, 8004788 <Batt_Protection_when_discharge+0x210>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f7fb fdfb 	bl	8000244 <__adddf3>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4610      	mov	r0, r2
 8004654:	4619      	mov	r1, r3
 8004656:	f7fc faa3 	bl	8000ba0 <__aeabi_d2f>
 800465a:	4603      	mov	r3, r0
 800465c:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <Batt_Protection_when_discharge+0x248>)
 800465e:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8004660:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <Batt_Protection_when_discharge+0x248>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a55      	ldr	r2, [pc, #340]	; (80047bc <Batt_Protection_when_discharge+0x244>)
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f7fc fdb2 	bl	80011d4 <__aeabi_fcmpgt>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d012      	beq.n	800469c <Batt_Protection_when_discharge+0x124>
 8004676:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <Batt_Protection_when_discharge+0x23c>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <Batt_Protection_when_discharge+0x124>
			Batt_Open_Mode();
 800467e:	f7fc ff69 	bl	8001554 <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8004682:	4b4e      	ldr	r3, [pc, #312]	; (80047bc <Batt_Protection_when_discharge+0x244>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a4e      	ldr	r2, [pc, #312]	; (80047c0 <Batt_Protection_when_discharge+0x248>)
 8004688:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 800468a:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <Batt_Protection_when_discharge+0x23c>)
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8004690:	2200      	movs	r2, #0
 8004692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004696:	484b      	ldr	r0, [pc, #300]	; (80047c4 <Batt_Protection_when_discharge+0x24c>)
 8004698:	f004 fb19 	bl	8008cce <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 800469c:	4b45      	ldr	r3, [pc, #276]	; (80047b4 <Batt_Protection_when_discharge+0x23c>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 85e2 	bne.w	800526a <Batt_Protection_when_discharge+0xcf2>
			if(T_Under_trip-T_trip_cycle>15) {
 80046a6:	4b45      	ldr	r3, [pc, #276]	; (80047bc <Batt_Protection_when_discharge+0x244>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a45      	ldr	r2, [pc, #276]	; (80047c0 <Batt_Protection_when_discharge+0x248>)
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fc fac9 	bl	8000c48 <__aeabi_fsub>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4943      	ldr	r1, [pc, #268]	; (80047c8 <Batt_Protection_when_discharge+0x250>)
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7fc fd8a 	bl	80011d4 <__aeabi_fcmpgt>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d019      	beq.n	80046fa <Batt_Protection_when_discharge+0x182>
				if((test_tim2%1000)==0) {
 80046c6:	4b41      	ldr	r3, [pc, #260]	; (80047cc <Batt_Protection_when_discharge+0x254>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <Batt_Protection_when_discharge+0x258>)
 80046cc:	fb83 1302 	smull	r1, r3, r3, r2
 80046d0:	1199      	asrs	r1, r3, #6
 80046d2:	17d3      	asrs	r3, r2, #31
 80046d4:	1acb      	subs	r3, r1, r3
 80046d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 85c2 	bne.w	800526a <Batt_Protection_when_discharge+0xcf2>
					BUZZ_Toggle;
 80046e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046ea:	4830      	ldr	r0, [pc, #192]	; (80047ac <Batt_Protection_when_discharge+0x234>)
 80046ec:	f004 fb07 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 80046f0:	4b36      	ldr	r3, [pc, #216]	; (80047cc <Batt_Protection_when_discharge+0x254>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 80046f6:	f000 bdb8 	b.w	800526a <Batt_Protection_when_discharge+0xcf2>
			else if(T_Under_trip-T_trip_cycle>10) {
 80046fa:	4b30      	ldr	r3, [pc, #192]	; (80047bc <Batt_Protection_when_discharge+0x244>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a30      	ldr	r2, [pc, #192]	; (80047c0 <Batt_Protection_when_discharge+0x248>)
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f7fc fa9f 	bl	8000c48 <__aeabi_fsub>
 800470a:	4603      	mov	r3, r0
 800470c:	4931      	ldr	r1, [pc, #196]	; (80047d4 <Batt_Protection_when_discharge+0x25c>)
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc fd60 	bl	80011d4 <__aeabi_fcmpgt>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d018      	beq.n	800474c <Batt_Protection_when_discharge+0x1d4>
				if((test_tim2%100)==0) {
 800471a:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <Batt_Protection_when_discharge+0x254>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <Batt_Protection_when_discharge+0x260>)
 8004720:	fb83 1302 	smull	r1, r3, r3, r2
 8004724:	1159      	asrs	r1, r3, #5
 8004726:	17d3      	asrs	r3, r2, #31
 8004728:	1acb      	subs	r3, r1, r3
 800472a:	2164      	movs	r1, #100	; 0x64
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8599 	bne.w	800526a <Batt_Protection_when_discharge+0xcf2>
					BUZZ_Toggle;
 8004738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800473c:	481b      	ldr	r0, [pc, #108]	; (80047ac <Batt_Protection_when_discharge+0x234>)
 800473e:	f004 fade 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004742:	4b22      	ldr	r3, [pc, #136]	; (80047cc <Batt_Protection_when_discharge+0x254>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 8004748:	f000 bd8f 	b.w	800526a <Batt_Protection_when_discharge+0xcf2>
			else if(T_Under_trip-T_trip_cycle>1) {
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <Batt_Protection_when_discharge+0x244>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1b      	ldr	r2, [pc, #108]	; (80047c0 <Batt_Protection_when_discharge+0x248>)
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f7fc fa76 	bl	8000c48 <__aeabi_fsub>
 800475c:	4603      	mov	r3, r0
 800475e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc fd36 	bl	80011d4 <__aeabi_fcmpgt>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <Batt_Protection_when_discharge+0x1fa>
		if(flag_trip_undervoltage==OFF) {
 800476e:	f000 bd7c 	b.w	800526a <Batt_Protection_when_discharge+0xcf2>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004772:	2201      	movs	r2, #1
 8004774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004778:	480c      	ldr	r0, [pc, #48]	; (80047ac <Batt_Protection_when_discharge+0x234>)
 800477a:	f004 faa8 	bl	8008cce <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 800477e:	f000 bd74 	b.w	800526a <Batt_Protection_when_discharge+0xcf2>
 8004782:	bf00      	nop
 8004784:	f3af 8000 	nop.w
 8004788:	d2f1a9fc 	.word	0xd2f1a9fc
 800478c:	3f50624d 	.word	0x3f50624d
 8004790:	200002f4 	.word	0x200002f4
 8004794:	20000280 	.word	0x20000280
 8004798:	3fe00000 	.word	0x3fe00000
 800479c:	200002dc 	.word	0x200002dc
 80047a0:	20000318 	.word	0x20000318
 80047a4:	20000302 	.word	0x20000302
 80047a8:	2000025f 	.word	0x2000025f
 80047ac:	40011000 	.word	0x40011000
 80047b0:	20000028 	.word	0x20000028
 80047b4:	200002fd 	.word	0x200002fd
 80047b8:	20000034 	.word	0x20000034
 80047bc:	20000810 	.word	0x20000810
 80047c0:	2000082c 	.word	0x2000082c
 80047c4:	40010800 	.word	0x40010800
 80047c8:	41700000 	.word	0x41700000
 80047cc:	20000364 	.word	0x20000364
 80047d0:	10624dd3 	.word	0x10624dd3
 80047d4:	41200000 	.word	0x41200000
 80047d8:	51eb851f 	.word	0x51eb851f
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {   //Indikasi terjadi Over Current
 80047dc:	4b94      	ldr	r3, [pc, #592]	; (8004a30 <Batt_Protection_when_discharge+0x4b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a94      	ldr	r2, [pc, #592]	; (8004a34 <Batt_Protection_when_discharge+0x4bc>)
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fc fa2e 	bl	8000c48 <__aeabi_fsub>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fc fcee 	bl	80011d4 <__aeabi_fcmpgt>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8138 	beq.w	8004a70 <Batt_Protection_when_discharge+0x4f8>
 8004800:	4b8d      	ldr	r3, [pc, #564]	; (8004a38 <Batt_Protection_when_discharge+0x4c0>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8133 	bne.w	8004a70 <Batt_Protection_when_discharge+0x4f8>
		fault_code=2;
 800480a:	4b8c      	ldr	r3, [pc, #560]	; (8004a3c <Batt_Protection_when_discharge+0x4c4>)
 800480c:	2202      	movs	r2, #2
 800480e:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=50/(((IBATT/6.9)*(IBATT/6.9))-1);
 8004810:	4b87      	ldr	r3, [pc, #540]	; (8004a30 <Batt_Protection_when_discharge+0x4b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb fe73 	bl	8000500 <__aeabi_f2d>
 800481a:	a381      	add	r3, pc, #516	; (adr r3, 8004a20 <Batt_Protection_when_discharge+0x4a8>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f7fb fff0 	bl	8000804 <__aeabi_ddiv>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4614      	mov	r4, r2
 800482a:	461d      	mov	r5, r3
 800482c:	4b80      	ldr	r3, [pc, #512]	; (8004a30 <Batt_Protection_when_discharge+0x4b8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f7fb fe65 	bl	8000500 <__aeabi_f2d>
 8004836:	a37a      	add	r3, pc, #488	; (adr r3, 8004a20 <Batt_Protection_when_discharge+0x4a8>)
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	f7fb ffe2 	bl	8000804 <__aeabi_ddiv>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4620      	mov	r0, r4
 8004846:	4629      	mov	r1, r5
 8004848:	f7fb feb2 	bl	80005b0 <__aeabi_dmul>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	4b79      	ldr	r3, [pc, #484]	; (8004a40 <Batt_Protection_when_discharge+0x4c8>)
 800485a:	f7fb fcf1 	bl	8000240 <__aeabi_dsub>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	4977      	ldr	r1, [pc, #476]	; (8004a44 <Batt_Protection_when_discharge+0x4cc>)
 8004868:	f7fb ffcc 	bl	8000804 <__aeabi_ddiv>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	f7fc f994 	bl	8000ba0 <__aeabi_d2f>
 8004878:	4603      	mov	r3, r0
 800487a:	4a73      	ldr	r2, [pc, #460]	; (8004a48 <Batt_Protection_when_discharge+0x4d0>)
 800487c:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 800487e:	4b73      	ldr	r3, [pc, #460]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fb fe3c 	bl	8000500 <__aeabi_f2d>
 8004888:	a367      	add	r3, pc, #412	; (adr r3, 8004a28 <Batt_Protection_when_discharge+0x4b0>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fb fcd9 	bl	8000244 <__adddf3>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	f7fc f981 	bl	8000ba0 <__aeabi_d2f>
 800489e:	4603      	mov	r3, r0
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 80048a2:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 80048a4:	4b69      	ldr	r3, [pc, #420]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a67      	ldr	r2, [pc, #412]	; (8004a48 <Batt_Protection_when_discharge+0x4d0>)
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc fc90 	bl	80011d4 <__aeabi_fcmpgt>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d012      	beq.n	80048e0 <Batt_Protection_when_discharge+0x368>
 80048ba:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <Batt_Protection_when_discharge+0x4c0>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10e      	bne.n	80048e0 <Batt_Protection_when_discharge+0x368>
			Batt_Open_Mode();
 80048c2:	f7fc fe47 	bl	8001554 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 80048c6:	4b60      	ldr	r3, [pc, #384]	; (8004a48 <Batt_Protection_when_discharge+0x4d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a60      	ldr	r2, [pc, #384]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 80048cc:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 80048ce:	4b5a      	ldr	r3, [pc, #360]	; (8004a38 <Batt_Protection_when_discharge+0x4c0>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048da:	485d      	ldr	r0, [pc, #372]	; (8004a50 <Batt_Protection_when_discharge+0x4d8>)
 80048dc:	f004 f9f7 	bl	8008cce <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 80048e0:	4b55      	ldr	r3, [pc, #340]	; (8004a38 <Batt_Protection_when_discharge+0x4c0>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f040 84c2 	bne.w	800526e <Batt_Protection_when_discharge+0xcf6>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 80048ea:	4b57      	ldr	r3, [pc, #348]	; (8004a48 <Batt_Protection_when_discharge+0x4d0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a57      	ldr	r2, [pc, #348]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7fc f9a7 	bl	8000c48 <__aeabi_fsub>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4955      	ldr	r1, [pc, #340]	; (8004a54 <Batt_Protection_when_discharge+0x4dc>)
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fc68 	bl	80011d4 <__aeabi_fcmpgt>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d019      	beq.n	800493e <Batt_Protection_when_discharge+0x3c6>
				if((test_tim2%1000)==0) {
 800490a:	4b53      	ldr	r3, [pc, #332]	; (8004a58 <Batt_Protection_when_discharge+0x4e0>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <Batt_Protection_when_discharge+0x4e4>)
 8004910:	fb83 1302 	smull	r1, r3, r3, r2
 8004914:	1199      	asrs	r1, r3, #6
 8004916:	17d3      	asrs	r3, r2, #31
 8004918:	1acb      	subs	r3, r1, r3
 800491a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	f040 84a2 	bne.w	800526e <Batt_Protection_when_discharge+0xcf6>
					BUZZ_Toggle;
 800492a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800492e:	4848      	ldr	r0, [pc, #288]	; (8004a50 <Batt_Protection_when_discharge+0x4d8>)
 8004930:	f004 f9e5 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004934:	4b48      	ldr	r3, [pc, #288]	; (8004a58 <Batt_Protection_when_discharge+0x4e0>)
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 800493a:	f000 bc98 	b.w	800526e <Batt_Protection_when_discharge+0xcf6>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10){
 800493e:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <Batt_Protection_when_discharge+0x4d0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a42      	ldr	r2, [pc, #264]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	4611      	mov	r1, r2
 8004948:	4618      	mov	r0, r3
 800494a:	f7fc f97d 	bl	8000c48 <__aeabi_fsub>
 800494e:	4603      	mov	r3, r0
 8004950:	4943      	ldr	r1, [pc, #268]	; (8004a60 <Batt_Protection_when_discharge+0x4e8>)
 8004952:	4618      	mov	r0, r3
 8004954:	f7fc fc3e 	bl	80011d4 <__aeabi_fcmpgt>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d018      	beq.n	8004990 <Batt_Protection_when_discharge+0x418>
				if((test_tim2%100)==0){
 800495e:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <Batt_Protection_when_discharge+0x4e0>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b40      	ldr	r3, [pc, #256]	; (8004a64 <Batt_Protection_when_discharge+0x4ec>)
 8004964:	fb83 1302 	smull	r1, r3, r3, r2
 8004968:	1159      	asrs	r1, r3, #5
 800496a:	17d3      	asrs	r3, r2, #31
 800496c:	1acb      	subs	r3, r1, r3
 800496e:	2164      	movs	r1, #100	; 0x64
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 8479 	bne.w	800526e <Batt_Protection_when_discharge+0xcf6>
					BUZZ_Toggle;
 800497c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004980:	4833      	ldr	r0, [pc, #204]	; (8004a50 <Batt_Protection_when_discharge+0x4d8>)
 8004982:	f004 f9bc 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004986:	4b34      	ldr	r3, [pc, #208]	; (8004a58 <Batt_Protection_when_discharge+0x4e0>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 800498c:	f000 bc6f 	b.w	800526e <Batt_Protection_when_discharge+0xcf6>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3){
 8004990:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <Batt_Protection_when_discharge+0x4d0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f7fc f954 	bl	8000c48 <__aeabi_fsub>
 80049a0:	4603      	mov	r3, r0
 80049a2:	4931      	ldr	r1, [pc, #196]	; (8004a68 <Batt_Protection_when_discharge+0x4f0>)
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fc fc15 	bl	80011d4 <__aeabi_fcmpgt>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d019      	beq.n	80049e4 <Batt_Protection_when_discharge+0x46c>
				if((test_tim2%10)==0){
 80049b0:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <Batt_Protection_when_discharge+0x4e0>)
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <Batt_Protection_when_discharge+0x4f4>)
 80049b6:	fb83 2301 	smull	r2, r3, r3, r1
 80049ba:	109a      	asrs	r2, r3, #2
 80049bc:	17cb      	asrs	r3, r1, #31
 80049be:	1ad2      	subs	r2, r2, r3
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	1aca      	subs	r2, r1, r3
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	f040 844f 	bne.w	800526e <Batt_Protection_when_discharge+0xcf6>
					BUZZ_Toggle;
 80049d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049d4:	481e      	ldr	r0, [pc, #120]	; (8004a50 <Batt_Protection_when_discharge+0x4d8>)
 80049d6:	f004 f992 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 80049da:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <Batt_Protection_when_discharge+0x4e0>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 80049e0:	f000 bc45 	b.w	800526e <Batt_Protection_when_discharge+0xcf6>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1){
 80049e4:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <Batt_Protection_when_discharge+0x4d0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a18      	ldr	r2, [pc, #96]	; (8004a4c <Batt_Protection_when_discharge+0x4d4>)
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc f92a 	bl	8000c48 <__aeabi_fsub>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fc fbea 	bl	80011d4 <__aeabi_fcmpgt>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <Batt_Protection_when_discharge+0x492>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004a06:	f000 bc32 	b.w	800526e <Batt_Protection_when_discharge+0xcf6>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a10:	480f      	ldr	r0, [pc, #60]	; (8004a50 <Batt_Protection_when_discharge+0x4d8>)
 8004a12:	f004 f95c 	bl	8008cce <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004a16:	f000 bc2a 	b.w	800526e <Batt_Protection_when_discharge+0xcf6>
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w
 8004a20:	9999999a 	.word	0x9999999a
 8004a24:	401b9999 	.word	0x401b9999
 8004a28:	47ae147b 	.word	0x47ae147b
 8004a2c:	3f847ae1 	.word	0x3f847ae1
 8004a30:	200002f4 	.word	0x200002f4
 8004a34:	20000010 	.word	0x20000010
 8004a38:	2000030c 	.word	0x2000030c
 8004a3c:	20000302 	.word	0x20000302
 8004a40:	3ff00000 	.word	0x3ff00000
 8004a44:	40490000 	.word	0x40490000
 8004a48:	2000026c 	.word	0x2000026c
 8004a4c:	2000033c 	.word	0x2000033c
 8004a50:	40011000 	.word	0x40011000
 8004a54:	41700000 	.word	0x41700000
 8004a58:	20000364 	.word	0x20000364
 8004a5c:	10624dd3 	.word	0x10624dd3
 8004a60:	41200000 	.word	0x41200000
 8004a64:	51eb851f 	.word	0x51eb851f
 8004a68:	40400000 	.word	0x40400000
 8004a6c:	66666667 	.word	0x66666667
	else if(((70-Suhu_T1<10)||(50-Suhu_T2<10)||(50-Suhu_T3<10)||(50-Suhu_T4<10)) && flag_trip_overtemperature==OFF) {
 8004a70:	4b8e      	ldr	r3, [pc, #568]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4619      	mov	r1, r3
 8004a76:	488e      	ldr	r0, [pc, #568]	; (8004cb0 <Batt_Protection_when_discharge+0x738>)
 8004a78:	f7fc f8e6 	bl	8000c48 <__aeabi_fsub>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	498d      	ldr	r1, [pc, #564]	; (8004cb4 <Batt_Protection_when_discharge+0x73c>)
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc fb89 	bl	8001198 <__aeabi_fcmplt>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d12a      	bne.n	8004ae2 <Batt_Protection_when_discharge+0x56a>
 8004a8c:	4b8a      	ldr	r3, [pc, #552]	; (8004cb8 <Batt_Protection_when_discharge+0x740>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4619      	mov	r1, r3
 8004a92:	488a      	ldr	r0, [pc, #552]	; (8004cbc <Batt_Protection_when_discharge+0x744>)
 8004a94:	f7fc f8d8 	bl	8000c48 <__aeabi_fsub>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4986      	ldr	r1, [pc, #536]	; (8004cb4 <Batt_Protection_when_discharge+0x73c>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fc fb7b 	bl	8001198 <__aeabi_fcmplt>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11c      	bne.n	8004ae2 <Batt_Protection_when_discharge+0x56a>
 8004aa8:	4b85      	ldr	r3, [pc, #532]	; (8004cc0 <Batt_Protection_when_discharge+0x748>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4619      	mov	r1, r3
 8004aae:	4883      	ldr	r0, [pc, #524]	; (8004cbc <Batt_Protection_when_discharge+0x744>)
 8004ab0:	f7fc f8ca 	bl	8000c48 <__aeabi_fsub>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	497f      	ldr	r1, [pc, #508]	; (8004cb4 <Batt_Protection_when_discharge+0x73c>)
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fc fb6d 	bl	8001198 <__aeabi_fcmplt>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10e      	bne.n	8004ae2 <Batt_Protection_when_discharge+0x56a>
 8004ac4:	4b7f      	ldr	r3, [pc, #508]	; (8004cc4 <Batt_Protection_when_discharge+0x74c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	487c      	ldr	r0, [pc, #496]	; (8004cbc <Batt_Protection_when_discharge+0x744>)
 8004acc:	f7fc f8bc 	bl	8000c48 <__aeabi_fsub>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	4978      	ldr	r1, [pc, #480]	; (8004cb4 <Batt_Protection_when_discharge+0x73c>)
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fc fb5f 	bl	8001198 <__aeabi_fcmplt>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8103 	beq.w	8004ce8 <Batt_Protection_when_discharge+0x770>
 8004ae2:	4b79      	ldr	r3, [pc, #484]	; (8004cc8 <Batt_Protection_when_discharge+0x750>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 80fe 	bne.w	8004ce8 <Batt_Protection_when_discharge+0x770>
		fault_code=3;
 8004aec:	4b77      	ldr	r3, [pc, #476]	; (8004ccc <Batt_Protection_when_discharge+0x754>)
 8004aee:	2203      	movs	r2, #3
 8004af0:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8004af2:	4b77      	ldr	r3, [pc, #476]	; (8004cd0 <Batt_Protection_when_discharge+0x758>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	496f      	ldr	r1, [pc, #444]	; (8004cb4 <Batt_Protection_when_discharge+0x73c>)
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fc f8a5 	bl	8000c48 <__aeabi_fsub>
 8004afe:	4603      	mov	r3, r0
 8004b00:	461a      	mov	r2, r3
 8004b02:	4b6a      	ldr	r3, [pc, #424]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7fc fb45 	bl	8001198 <__aeabi_fcmplt>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d029      	beq.n	8004b68 <Batt_Protection_when_discharge+0x5f0>
 8004b14:	4b6e      	ldr	r3, [pc, #440]	; (8004cd0 <Batt_Protection_when_discharge+0x758>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	496e      	ldr	r1, [pc, #440]	; (8004cd4 <Batt_Protection_when_discharge+0x75c>)
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fc f894 	bl	8000c48 <__aeabi_fsub>
 8004b20:	4603      	mov	r3, r0
 8004b22:	461a      	mov	r2, r3
 8004b24:	4b61      	ldr	r3, [pc, #388]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7fc fb48 	bl	80011c0 <__aeabi_fcmpge>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <Batt_Protection_when_discharge+0x5f0>
			if((test_tim2%1000)==0) {
 8004b36:	4b68      	ldr	r3, [pc, #416]	; (8004cd8 <Batt_Protection_when_discharge+0x760>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b68      	ldr	r3, [pc, #416]	; (8004cdc <Batt_Protection_when_discharge+0x764>)
 8004b3c:	fb83 1302 	smull	r1, r3, r3, r2
 8004b40:	1199      	asrs	r1, r3, #6
 8004b42:	17d3      	asrs	r3, r2, #31
 8004b44:	1acb      	subs	r3, r1, r3
 8004b46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 80aa 	bne.w	8004caa <Batt_Protection_when_discharge+0x732>
				BUZZ_Toggle;
 8004b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b5a:	4861      	ldr	r0, [pc, #388]	; (8004ce0 <Batt_Protection_when_discharge+0x768>)
 8004b5c:	f004 f8cf 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004b60:	4b5d      	ldr	r3, [pc, #372]	; (8004cd8 <Batt_Protection_when_discharge+0x760>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8004b66:	e0a0      	b.n	8004caa <Batt_Protection_when_discharge+0x732>
		else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2){
 8004b68:	4b59      	ldr	r3, [pc, #356]	; (8004cd0 <Batt_Protection_when_discharge+0x758>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4959      	ldr	r1, [pc, #356]	; (8004cd4 <Batt_Protection_when_discharge+0x75c>)
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc f86a 	bl	8000c48 <__aeabi_fsub>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b4c      	ldr	r3, [pc, #304]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7fc fb0a 	bl	8001198 <__aeabi_fcmplt>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d029      	beq.n	8004bde <Batt_Protection_when_discharge+0x666>
 8004b8a:	4b51      	ldr	r3, [pc, #324]	; (8004cd0 <Batt_Protection_when_discharge+0x758>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc f858 	bl	8000c48 <__aeabi_fsub>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b43      	ldr	r3, [pc, #268]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7fc fb0c 	bl	80011c0 <__aeabi_fcmpge>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d017      	beq.n	8004bde <Batt_Protection_when_discharge+0x666>
			if((test_tim2%500)==0){
 8004bae:	4b4a      	ldr	r3, [pc, #296]	; (8004cd8 <Batt_Protection_when_discharge+0x760>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	; (8004cdc <Batt_Protection_when_discharge+0x764>)
 8004bb4:	fb83 1302 	smull	r1, r3, r3, r2
 8004bb8:	1159      	asrs	r1, r3, #5
 8004bba:	17d3      	asrs	r3, r2, #31
 8004bbc:	1acb      	subs	r3, r1, r3
 8004bbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004bc2:	fb01 f303 	mul.w	r3, r1, r3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d16e      	bne.n	8004caa <Batt_Protection_when_discharge+0x732>
				BUZZ_Toggle;
 8004bcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bd0:	4843      	ldr	r0, [pc, #268]	; (8004ce0 <Batt_Protection_when_discharge+0x768>)
 8004bd2:	f004 f894 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004bd6:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <Batt_Protection_when_discharge+0x760>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004bdc:	e065      	b.n	8004caa <Batt_Protection_when_discharge+0x732>
		else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set){
 8004bde:	4b3c      	ldr	r3, [pc, #240]	; (8004cd0 <Batt_Protection_when_discharge+0x758>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fc f82e 	bl	8000c48 <__aeabi_fsub>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f7fc face 	bl	8001198 <__aeabi_fcmplt>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d022      	beq.n	8004c48 <Batt_Protection_when_discharge+0x6d0>
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a32      	ldr	r2, [pc, #200]	; (8004cd0 <Batt_Protection_when_discharge+0x758>)
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fc facd 	bl	80011ac <__aeabi_fcmple>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d017      	beq.n	8004c48 <Batt_Protection_when_discharge+0x6d0>
			if((test_tim2%500)==0){
 8004c18:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <Batt_Protection_when_discharge+0x760>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b2f      	ldr	r3, [pc, #188]	; (8004cdc <Batt_Protection_when_discharge+0x764>)
 8004c1e:	fb83 1302 	smull	r1, r3, r3, r2
 8004c22:	1159      	asrs	r1, r3, #5
 8004c24:	17d3      	asrs	r3, r2, #31
 8004c26:	1acb      	subs	r3, r1, r3
 8004c28:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d139      	bne.n	8004caa <Batt_Protection_when_discharge+0x732>
				BUZZ_Toggle;
 8004c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c3a:	4829      	ldr	r0, [pc, #164]	; (8004ce0 <Batt_Protection_when_discharge+0x768>)
 8004c3c:	f004 f85f 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <Batt_Protection_when_discharge+0x760>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004c46:	e030      	b.n	8004caa <Batt_Protection_when_discharge+0x732>
		else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85){
 8004c48:	4b18      	ldr	r3, [pc, #96]	; (8004cac <Batt_Protection_when_discharge+0x734>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	491b      	ldr	r1, [pc, #108]	; (8004cbc <Batt_Protection_when_discharge+0x744>)
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fc fac0 	bl	80011d4 <__aeabi_fcmpgt>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d11b      	bne.n	8004c92 <Batt_Protection_when_discharge+0x71a>
 8004c5a:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <Batt_Protection_when_discharge+0x740>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4921      	ldr	r1, [pc, #132]	; (8004ce4 <Batt_Protection_when_discharge+0x76c>)
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc fab7 	bl	80011d4 <__aeabi_fcmpgt>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d112      	bne.n	8004c92 <Batt_Protection_when_discharge+0x71a>
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <Batt_Protection_when_discharge+0x748>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4912      	ldr	r1, [pc, #72]	; (8004cbc <Batt_Protection_when_discharge+0x744>)
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fc faae 	bl	80011d4 <__aeabi_fcmpgt>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <Batt_Protection_when_discharge+0x71a>
 8004c7e:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <Batt_Protection_when_discharge+0x74c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4918      	ldr	r1, [pc, #96]	; (8004ce4 <Batt_Protection_when_discharge+0x76c>)
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fc faa5 	bl	80011d4 <__aeabi_fcmpgt>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d100      	bne.n	8004c92 <Batt_Protection_when_discharge+0x71a>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8004c90:	e2ee      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
			Batt_Open_Mode();
 8004c92:	f7fc fc5f 	bl	8001554 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8004c96:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <Batt_Protection_when_discharge+0x750>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ca2:	480f      	ldr	r0, [pc, #60]	; (8004ce0 <Batt_Protection_when_discharge+0x768>)
 8004ca4:	f004 f813 	bl	8008cce <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8004ca8:	e2e2      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
 8004caa:	e2e1      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
 8004cac:	20000304 	.word	0x20000304
 8004cb0:	428c0000 	.word	0x428c0000
 8004cb4:	41200000 	.word	0x41200000
 8004cb8:	20000378 	.word	0x20000378
 8004cbc:	42480000 	.word	0x42480000
 8004cc0:	20000284 	.word	0x20000284
 8004cc4:	20000334 	.word	0x20000334
 8004cc8:	2000027c 	.word	0x2000027c
 8004ccc:	20000302 	.word	0x20000302
 8004cd0:	20000018 	.word	0x20000018
 8004cd4:	40a00000 	.word	0x40a00000
 8004cd8:	20000364 	.word	0x20000364
 8004cdc:	10624dd3 	.word	0x10624dd3
 8004ce0:	40011000 	.word	0x40011000
 8004ce4:	42aa0000 	.word	0x42aa0000
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8004ce8:	4b96      	ldr	r3, [pc, #600]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a96      	ldr	r2, [pc, #600]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fb ffa8 	bl	8000c48 <__aeabi_fsub>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4994      	ldr	r1, [pc, #592]	; (8004f4c <Batt_Protection_when_discharge+0x9d4>)
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fc fa55 	bl	80011ac <__aeabi_fcmple>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d130      	bne.n	8004d6a <Batt_Protection_when_discharge+0x7f2>
 8004d08:	4b91      	ldr	r3, [pc, #580]	; (8004f50 <Batt_Protection_when_discharge+0x9d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a8e      	ldr	r2, [pc, #568]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb ff98 	bl	8000c48 <__aeabi_fsub>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	498c      	ldr	r1, [pc, #560]	; (8004f4c <Batt_Protection_when_discharge+0x9d4>)
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fc fa45 	bl	80011ac <__aeabi_fcmple>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d120      	bne.n	8004d6a <Batt_Protection_when_discharge+0x7f2>
 8004d28:	4b8a      	ldr	r3, [pc, #552]	; (8004f54 <Batt_Protection_when_discharge+0x9dc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a86      	ldr	r2, [pc, #536]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb ff88 	bl	8000c48 <__aeabi_fsub>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4984      	ldr	r1, [pc, #528]	; (8004f4c <Batt_Protection_when_discharge+0x9d4>)
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc fa35 	bl	80011ac <__aeabi_fcmple>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d110      	bne.n	8004d6a <Batt_Protection_when_discharge+0x7f2>
 8004d48:	4b83      	ldr	r3, [pc, #524]	; (8004f58 <Batt_Protection_when_discharge+0x9e0>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a7e      	ldr	r2, [pc, #504]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	4611      	mov	r1, r2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fb ff78 	bl	8000c48 <__aeabi_fsub>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	497c      	ldr	r1, [pc, #496]	; (8004f4c <Batt_Protection_when_discharge+0x9d4>)
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fc fa25 	bl	80011ac <__aeabi_fcmple>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8105 	beq.w	8004f74 <Batt_Protection_when_discharge+0x9fc>
 8004d6a:	4b7c      	ldr	r3, [pc, #496]	; (8004f5c <Batt_Protection_when_discharge+0x9e4>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f040 8100 	bne.w	8004f74 <Batt_Protection_when_discharge+0x9fc>
		fault_code=4;
 8004d74:	4b7a      	ldr	r3, [pc, #488]	; (8004f60 <Batt_Protection_when_discharge+0x9e8>)
 8004d76:	2204      	movs	r2, #4
 8004d78:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004d7a:	4b73      	ldr	r3, [pc, #460]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4973      	ldr	r1, [pc, #460]	; (8004f4c <Batt_Protection_when_discharge+0x9d4>)
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fb ff63 	bl	8000c4c <__addsf3>
 8004d86:	4603      	mov	r3, r0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4b6e      	ldr	r3, [pc, #440]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fc fa15 	bl	80011c0 <__aeabi_fcmpge>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d029      	beq.n	8004df0 <Batt_Protection_when_discharge+0x878>
 8004d9c:	4b6a      	ldr	r3, [pc, #424]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4970      	ldr	r1, [pc, #448]	; (8004f64 <Batt_Protection_when_discharge+0x9ec>)
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb ff52 	bl	8000c4c <__addsf3>
 8004da8:	4603      	mov	r3, r0
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f7fc f9f0 	bl	8001198 <__aeabi_fcmplt>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <Batt_Protection_when_discharge+0x878>
			if((test_tim2%1000)==0){
 8004dbe:	4b6a      	ldr	r3, [pc, #424]	; (8004f68 <Batt_Protection_when_discharge+0x9f0>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <Batt_Protection_when_discharge+0x9f4>)
 8004dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8004dc8:	1199      	asrs	r1, r3, #6
 8004dca:	17d3      	asrs	r3, r2, #31
 8004dcc:	1acb      	subs	r3, r1, r3
 8004dce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 80b2 	bne.w	8004f42 <Batt_Protection_when_discharge+0x9ca>
				BUZZ_Toggle;
 8004dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004de2:	4863      	ldr	r0, [pc, #396]	; (8004f70 <Batt_Protection_when_discharge+0x9f8>)
 8004de4:	f003 ff8b 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004de8:	4b5f      	ldr	r3, [pc, #380]	; (8004f68 <Batt_Protection_when_discharge+0x9f0>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8004dee:	e0a8      	b.n	8004f42 <Batt_Protection_when_discharge+0x9ca>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8004df0:	4b55      	ldr	r3, [pc, #340]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	495b      	ldr	r1, [pc, #364]	; (8004f64 <Batt_Protection_when_discharge+0x9ec>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb ff28 	bl	8000c4c <__addsf3>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4619      	mov	r1, r3
 8004e06:	4610      	mov	r0, r2
 8004e08:	f7fc f9da 	bl	80011c0 <__aeabi_fcmpge>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d029      	beq.n	8004e66 <Batt_Protection_when_discharge+0x8ee>
 8004e12:	4b4d      	ldr	r3, [pc, #308]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb ff16 	bl	8000c4c <__addsf3>
 8004e20:	4603      	mov	r3, r0
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f7fc f9b4 	bl	8001198 <__aeabi_fcmplt>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <Batt_Protection_when_discharge+0x8ee>
			if((test_tim2%500)==0){
 8004e36:	4b4c      	ldr	r3, [pc, #304]	; (8004f68 <Batt_Protection_when_discharge+0x9f0>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b4c      	ldr	r3, [pc, #304]	; (8004f6c <Batt_Protection_when_discharge+0x9f4>)
 8004e3c:	fb83 1302 	smull	r1, r3, r3, r2
 8004e40:	1159      	asrs	r1, r3, #5
 8004e42:	17d3      	asrs	r3, r2, #31
 8004e44:	1acb      	subs	r3, r1, r3
 8004e46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d176      	bne.n	8004f42 <Batt_Protection_when_discharge+0x9ca>
				BUZZ_Toggle;
 8004e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e58:	4845      	ldr	r0, [pc, #276]	; (8004f70 <Batt_Protection_when_discharge+0x9f8>)
 8004e5a:	f003 ff50 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004e5e:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <Batt_Protection_when_discharge+0x9f0>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004e64:	e06d      	b.n	8004f42 <Batt_Protection_when_discharge+0x9ca>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 8004e66:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb feec 	bl	8000c4c <__addsf3>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f7fc f9a8 	bl	80011d4 <__aeabi_fcmpgt>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d022      	beq.n	8004ed0 <Batt_Protection_when_discharge+0x958>
 8004e8a:	4b2e      	ldr	r3, [pc, #184]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a2e      	ldr	r2, [pc, #184]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fc f993 	bl	80011c0 <__aeabi_fcmpge>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d017      	beq.n	8004ed0 <Batt_Protection_when_discharge+0x958>
			if((test_tim2%500)==0){
 8004ea0:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <Batt_Protection_when_discharge+0x9f0>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <Batt_Protection_when_discharge+0x9f4>)
 8004ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8004eaa:	1159      	asrs	r1, r3, #5
 8004eac:	17d3      	asrs	r3, r2, #31
 8004eae:	1acb      	subs	r3, r1, r3
 8004eb0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004eb4:	fb01 f303 	mul.w	r3, r1, r3
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d141      	bne.n	8004f42 <Batt_Protection_when_discharge+0x9ca>
				BUZZ_Toggle;
 8004ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ec2:	482b      	ldr	r0, [pc, #172]	; (8004f70 <Batt_Protection_when_discharge+0x9f8>)
 8004ec4:	f003 ff1b 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004ec8:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <Batt_Protection_when_discharge+0x9f0>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004ece:	e038      	b.n	8004f42 <Batt_Protection_when_discharge+0x9ca>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 8004ed0:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <Batt_Protection_when_discharge+0x9cc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1c      	ldr	r2, [pc, #112]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc f95c 	bl	8001198 <__aeabi_fcmplt>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d121      	bne.n	8004f2a <Batt_Protection_when_discharge+0x9b2>
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <Batt_Protection_when_discharge+0x9d8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fc f951 	bl	8001198 <__aeabi_fcmplt>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d116      	bne.n	8004f2a <Batt_Protection_when_discharge+0x9b2>
 8004efc:	4b15      	ldr	r3, [pc, #84]	; (8004f54 <Batt_Protection_when_discharge+0x9dc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a11      	ldr	r2, [pc, #68]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fc f946 	bl	8001198 <__aeabi_fcmplt>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <Batt_Protection_when_discharge+0x9b2>
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <Batt_Protection_when_discharge+0x9e0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <Batt_Protection_when_discharge+0x9d0>)
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fc f93b 	bl	8001198 <__aeabi_fcmplt>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d100      	bne.n	8004f2a <Batt_Protection_when_discharge+0x9b2>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004f28:	e1a2      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
			Batt_Open_Mode();
 8004f2a:	f7fc fb13 	bl	8001554 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <Batt_Protection_when_discharge+0x9e4>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f3a:	480d      	ldr	r0, [pc, #52]	; (8004f70 <Batt_Protection_when_discharge+0x9f8>)
 8004f3c:	f003 fec7 	bl	8008cce <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004f40:	e196      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
 8004f42:	e195      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
 8004f44:	20000304 	.word	0x20000304
 8004f48:	2000001c 	.word	0x2000001c
 8004f4c:	41200000 	.word	0x41200000
 8004f50:	20000378 	.word	0x20000378
 8004f54:	20000284 	.word	0x20000284
 8004f58:	20000334 	.word	0x20000334
 8004f5c:	200002fc 	.word	0x200002fc
 8004f60:	20000302 	.word	0x20000302
 8004f64:	40a00000 	.word	0x40a00000
 8004f68:	20000364 	.word	0x20000364
 8004f6c:	10624dd3 	.word	0x10624dd3
 8004f70:	40011000 	.word	0x40011000
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8004f74:	4b83      	ldr	r3, [pc, #524]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a83      	ldr	r2, [pc, #524]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb fe62 	bl	8000c48 <__aeabi_fsub>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4981      	ldr	r1, [pc, #516]	; (800518c <Batt_Protection_when_discharge+0xc14>)
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc f90f 	bl	80011ac <__aeabi_fcmple>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80d1 	beq.w	8005138 <Batt_Protection_when_discharge+0xbc0>
 8004f96:	4b7e      	ldr	r3, [pc, #504]	; (8005190 <Batt_Protection_when_discharge+0xc18>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f040 80cc 	bne.w	8005138 <Batt_Protection_when_discharge+0xbc0>
 8004fa0:	4b7c      	ldr	r3, [pc, #496]	; (8005194 <Batt_Protection_when_discharge+0xc1c>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	f040 80c7 	bne.w	8005138 <Batt_Protection_when_discharge+0xbc0>
		fault_code=5;
 8004faa:	4b7b      	ldr	r3, [pc, #492]	; (8005198 <Batt_Protection_when_discharge+0xc20>)
 8004fac:	2205      	movs	r2, #5
 8004fae:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5){
 8004fb0:	4b75      	ldr	r3, [pc, #468]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4975      	ldr	r1, [pc, #468]	; (800518c <Batt_Protection_when_discharge+0xc14>)
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fe48 	bl	8000c4c <__addsf3>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b70      	ldr	r3, [pc, #448]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7fc f8fa 	bl	80011c0 <__aeabi_fcmpge>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d029      	beq.n	8005026 <Batt_Protection_when_discharge+0xaae>
 8004fd2:	4b6d      	ldr	r3, [pc, #436]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4971      	ldr	r1, [pc, #452]	; (800519c <Batt_Protection_when_discharge+0xc24>)
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fb fe37 	bl	8000c4c <__addsf3>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4b68      	ldr	r3, [pc, #416]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fc f8d5 	bl	8001198 <__aeabi_fcmplt>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d018      	beq.n	8005026 <Batt_Protection_when_discharge+0xaae>
			if((test_tim2%1000)==0){
 8004ff4:	4b6a      	ldr	r3, [pc, #424]	; (80051a0 <Batt_Protection_when_discharge+0xc28>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b6a      	ldr	r3, [pc, #424]	; (80051a4 <Batt_Protection_when_discharge+0xc2c>)
 8004ffa:	fb83 1302 	smull	r1, r3, r3, r2
 8004ffe:	1199      	asrs	r1, r3, #6
 8005000:	17d3      	asrs	r3, r2, #31
 8005002:	1acb      	subs	r3, r1, r3
 8005004:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 8091 	bne.w	8005136 <Batt_Protection_when_discharge+0xbbe>
				BUZZ_Toggle;
 8005014:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005018:	4863      	ldr	r0, [pc, #396]	; (80051a8 <Batt_Protection_when_discharge+0xc30>)
 800501a:	f003 fe70 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 800501e:	4b60      	ldr	r3, [pc, #384]	; (80051a0 <Batt_Protection_when_discharge+0xc28>)
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8005024:	e087      	b.n	8005136 <Batt_Protection_when_discharge+0xbbe>
		else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2){
 8005026:	4b58      	ldr	r3, [pc, #352]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	495c      	ldr	r1, [pc, #368]	; (800519c <Batt_Protection_when_discharge+0xc24>)
 800502c:	4618      	mov	r0, r3
 800502e:	f7fb fe0d 	bl	8000c4c <__addsf3>
 8005032:	4603      	mov	r3, r0
 8005034:	461a      	mov	r2, r3
 8005036:	4b53      	ldr	r3, [pc, #332]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7fc f8bf 	bl	80011c0 <__aeabi_fcmpge>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d029      	beq.n	800509c <Batt_Protection_when_discharge+0xb24>
 8005048:	4b4f      	ldr	r3, [pc, #316]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005050:	4618      	mov	r0, r3
 8005052:	f7fb fdfb 	bl	8000c4c <__addsf3>
 8005056:	4603      	mov	r3, r0
 8005058:	461a      	mov	r2, r3
 800505a:	4b4a      	ldr	r3, [pc, #296]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f7fc f899 	bl	8001198 <__aeabi_fcmplt>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d017      	beq.n	800509c <Batt_Protection_when_discharge+0xb24>
			if((test_tim2%500)==0){
 800506c:	4b4c      	ldr	r3, [pc, #304]	; (80051a0 <Batt_Protection_when_discharge+0xc28>)
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4b4c      	ldr	r3, [pc, #304]	; (80051a4 <Batt_Protection_when_discharge+0xc2c>)
 8005072:	fb83 1302 	smull	r1, r3, r3, r2
 8005076:	1159      	asrs	r1, r3, #5
 8005078:	17d3      	asrs	r3, r2, #31
 800507a:	1acb      	subs	r3, r1, r3
 800507c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005080:	fb01 f303 	mul.w	r3, r1, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d155      	bne.n	8005136 <Batt_Protection_when_discharge+0xbbe>
				BUZZ_Toggle;
 800508a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800508e:	4846      	ldr	r0, [pc, #280]	; (80051a8 <Batt_Protection_when_discharge+0xc30>)
 8005090:	f003 fe35 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005094:	4b42      	ldr	r3, [pc, #264]	; (80051a0 <Batt_Protection_when_discharge+0xc28>)
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800509a:	e04c      	b.n	8005136 <Batt_Protection_when_discharge+0xbbe>
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set){
 800509c:	4b3a      	ldr	r3, [pc, #232]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fb fdd1 	bl	8000c4c <__addsf3>
 80050aa:	4603      	mov	r3, r0
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b35      	ldr	r3, [pc, #212]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4619      	mov	r1, r3
 80050b4:	4610      	mov	r0, r2
 80050b6:	f7fc f88d 	bl	80011d4 <__aeabi_fcmpgt>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d022      	beq.n	8005106 <Batt_Protection_when_discharge+0xb8e>
 80050c0:	4b30      	ldr	r3, [pc, #192]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a30      	ldr	r2, [pc, #192]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 80050c6:	6812      	ldr	r2, [r2, #0]
 80050c8:	4611      	mov	r1, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fc f878 	bl	80011c0 <__aeabi_fcmpge>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d017      	beq.n	8005106 <Batt_Protection_when_discharge+0xb8e>
			if((test_tim2%500)==0){
 80050d6:	4b32      	ldr	r3, [pc, #200]	; (80051a0 <Batt_Protection_when_discharge+0xc28>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	4b32      	ldr	r3, [pc, #200]	; (80051a4 <Batt_Protection_when_discharge+0xc2c>)
 80050dc:	fb83 1302 	smull	r1, r3, r3, r2
 80050e0:	1159      	asrs	r1, r3, #5
 80050e2:	17d3      	asrs	r3, r2, #31
 80050e4:	1acb      	subs	r3, r1, r3
 80050e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80050ea:	fb01 f303 	mul.w	r3, r1, r3
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d120      	bne.n	8005136 <Batt_Protection_when_discharge+0xbbe>
				BUZZ_Toggle;
 80050f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050f8:	482b      	ldr	r0, [pc, #172]	; (80051a8 <Batt_Protection_when_discharge+0xc30>)
 80050fa:	f003 fe00 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <Batt_Protection_when_discharge+0xc28>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005104:	e017      	b.n	8005136 <Batt_Protection_when_discharge+0xbbe>
		else if(Pack_SOC<SOC_Under_Set){
 8005106:	4b1f      	ldr	r3, [pc, #124]	; (8005184 <Batt_Protection_when_discharge+0xc0c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <Batt_Protection_when_discharge+0xc10>)
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	4611      	mov	r1, r2
 8005110:	4618      	mov	r0, r3
 8005112:	f7fc f841 	bl	8001198 <__aeabi_fcmplt>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d100      	bne.n	800511e <Batt_Protection_when_discharge+0xba6>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5){
 800511c:	e0a8      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
			Batt_Open_Mode();
 800511e:	f7fc fa19 	bl	8001554 <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 8005122:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <Batt_Protection_when_discharge+0xc18>)
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800512e:	481e      	ldr	r0, [pc, #120]	; (80051a8 <Batt_Protection_when_discharge+0xc30>)
 8005130:	f003 fdcd 	bl	8008cce <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5){
 8005134:	e09c      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
 8005136:	e09b      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 8005138:	4b1c      	ldr	r3, [pc, #112]	; (80051ac <Batt_Protection_when_discharge+0xc34>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <Batt_Protection_when_discharge+0xc38>)
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb fd80 	bl	8000c48 <__aeabi_fsub>
 8005148:	4603      	mov	r3, r0
 800514a:	4910      	ldr	r1, [pc, #64]	; (800518c <Batt_Protection_when_discharge+0xc14>)
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc f823 	bl	8001198 <__aeabi_fcmplt>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02f      	beq.n	80051b8 <Batt_Protection_when_discharge+0xc40>
		fault_code=6;
 8005158:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <Batt_Protection_when_discharge+0xc20>)
 800515a:	2206      	movs	r2, #6
 800515c:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance>Persen_Imbalance_Set)
 800515e:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <Batt_Protection_when_discharge+0xc38>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <Batt_Protection_when_discharge+0xc34>)
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f7fc f833 	bl	80011d4 <__aeabi_fcmpgt>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d100      	bne.n	8005176 <Batt_Protection_when_discharge+0xbfe>
}
 8005174:	e07c      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
			flag_trip_unbalance=ON;
 8005176:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <Batt_Protection_when_discharge+0xc3c>)
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 800517c:	f7fc f9ea 	bl	8001554 <Batt_Open_Mode>
}
 8005180:	e076      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
 8005182:	bf00      	nop
 8005184:	20000370 	.word	0x20000370
 8005188:	20000020 	.word	0x20000020
 800518c:	41200000 	.word	0x41200000
 8005190:	20000328 	.word	0x20000328
 8005194:	2000067c 	.word	0x2000067c
 8005198:	20000302 	.word	0x20000302
 800519c:	40a00000 	.word	0x40a00000
 80051a0:	20000364 	.word	0x20000364
 80051a4:	10624dd3 	.word	0x10624dd3
 80051a8:	40011000 	.word	0x40011000
 80051ac:	20000030 	.word	0x20000030
 80051b0:	20000330 	.word	0x20000330
 80051b4:	2000025c 	.word	0x2000025c
		if(fault_code!=0)
 80051b8:	4b31      	ldr	r3, [pc, #196]	; (8005280 <Batt_Protection_when_discharge+0xd08>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <Batt_Protection_when_discharge+0xc50>
			last_fault_code=fault_code;
 80051c0:	4b2f      	ldr	r3, [pc, #188]	; (8005280 <Batt_Protection_when_discharge+0xd08>)
 80051c2:	781a      	ldrb	r2, [r3, #0]
 80051c4:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <Batt_Protection_when_discharge+0xd0c>)
 80051c6:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 80051c8:	4b2d      	ldr	r3, [pc, #180]	; (8005280 <Batt_Protection_when_discharge+0xd08>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051d4:	482c      	ldr	r0, [pc, #176]	; (8005288 <Batt_Protection_when_discharge+0xd10>)
 80051d6:	f003 fd7a 	bl	8008cce <HAL_GPIO_WritePin>
		T_Under_trip=0;
 80051da:	4b2c      	ldr	r3, [pc, #176]	; (800528c <Batt_Protection_when_discharge+0xd14>)
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 80051e2:	4b2b      	ldr	r3, [pc, #172]	; (8005290 <Batt_Protection_when_discharge+0xd18>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fb f98a 	bl	8000500 <__aeabi_f2d>
 80051ec:	a322      	add	r3, pc, #136	; (adr r3, 8005278 <Batt_Protection_when_discharge+0xd00>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fb f825 	bl	8000240 <__aeabi_dsub>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	f7fb fccf 	bl	8000ba0 <__aeabi_d2f>
 8005202:	4603      	mov	r3, r0
 8005204:	4a22      	ldr	r2, [pc, #136]	; (8005290 <Batt_Protection_when_discharge+0xd18>)
 8005206:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005208:	4b22      	ldr	r3, [pc, #136]	; (8005294 <Batt_Protection_when_discharge+0xd1c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f7fb f977 	bl	8000500 <__aeabi_f2d>
 8005212:	a319      	add	r3, pc, #100	; (adr r3, 8005278 <Batt_Protection_when_discharge+0xd00>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb f812 	bl	8000240 <__aeabi_dsub>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
 8005224:	f7fb fcbc 	bl	8000ba0 <__aeabi_d2f>
 8005228:	4603      	mov	r3, r0
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <Batt_Protection_when_discharge+0xd1c>)
 800522c:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 800522e:	4b18      	ldr	r3, [pc, #96]	; (8005290 <Batt_Protection_when_discharge+0xd18>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f7fb ffae 	bl	8001198 <__aeabi_fcmplt>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <Batt_Protection_when_discharge+0xcd2>
			T_trip_cycle=0;
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <Batt_Protection_when_discharge+0xd18>)
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <Batt_Protection_when_discharge+0xd1c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb ffa0 	bl	8001198 <__aeabi_fcmplt>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d100      	bne.n	8005260 <Batt_Protection_when_discharge+0xce8>
}
 800525e:	e007      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
			T_I_Over_trip_cycle=0;
 8005260:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <Batt_Protection_when_discharge+0xd1c>)
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
}
 8005268:	e002      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
		if(flag_trip_undervoltage==OFF) {
 800526a:	bf00      	nop
 800526c:	e000      	b.n	8005270 <Batt_Protection_when_discharge+0xcf8>
		if(flag_trip_overcurrentdischarge==OFF) {
 800526e:	bf00      	nop
}
 8005270:	bf00      	nop
 8005272:	bdb0      	pop	{r4, r5, r7, pc}
 8005274:	f3af 8000 	nop.w
 8005278:	d2f1a9fc 	.word	0xd2f1a9fc
 800527c:	3f50624d 	.word	0x3f50624d
 8005280:	20000302 	.word	0x20000302
 8005284:	2000036d 	.word	0x2000036d
 8005288:	40011000 	.word	0x40011000
 800528c:	20000810 	.word	0x20000810
 8005290:	2000082c 	.word	0x2000082c
 8005294:	2000033c 	.word	0x2000033c

08005298 <Batt_Protection_when_charge>:

void Batt_Protection_when_charge(void){
 8005298:	b5b0      	push	{r4, r5, r7, lr}
 800529a:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 800529c:	4ba2      	ldr	r3, [pc, #648]	; (8005528 <Batt_Protection_when_charge+0x290>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4aa2      	ldr	r2, [pc, #648]	; (800552c <Batt_Protection_when_charge+0x294>)
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fb ff94 	bl	80011d4 <__aeabi_fcmpgt>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d016      	beq.n	80052e0 <Batt_Protection_when_charge+0x48>
		Isc = IBATT;
 80052b2:	4b9d      	ldr	r3, [pc, #628]	; (8005528 <Batt_Protection_when_charge+0x290>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a9e      	ldr	r2, [pc, #632]	; (8005530 <Batt_Protection_when_charge+0x298>)
 80052b8:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 80052ba:	4b9c      	ldr	r3, [pc, #624]	; (800552c <Batt_Protection_when_charge+0x294>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a9d      	ldr	r2, [pc, #628]	; (8005534 <Batt_Protection_when_charge+0x29c>)
 80052c0:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 80052c2:	4b9d      	ldr	r3, [pc, #628]	; (8005538 <Batt_Protection_when_charge+0x2a0>)
 80052c4:	220c      	movs	r2, #12
 80052c6:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80052c8:	f7fc f944 	bl	8001554 <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 80052cc:	4b9b      	ldr	r3, [pc, #620]	; (800553c <Batt_Protection_when_charge+0x2a4>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80052d2:	2200      	movs	r2, #0
 80052d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052d8:	4899      	ldr	r0, [pc, #612]	; (8005540 <Batt_Protection_when_charge+0x2a8>)
 80052da:	f003 fcf8 	bl	8008cce <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 80052de:	e3db      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
	else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF) {
 80052e0:	4b98      	ldr	r3, [pc, #608]	; (8005544 <Batt_Protection_when_charge+0x2ac>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a98      	ldr	r2, [pc, #608]	; (8005548 <Batt_Protection_when_charge+0x2b0>)
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	4611      	mov	r1, r2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fb fcac 	bl	8000c48 <__aeabi_fsub>
 80052f0:	4603      	mov	r3, r0
 80052f2:	4996      	ldr	r1, [pc, #600]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb ff59 	bl	80011ac <__aeabi_fcmple>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01e      	beq.n	800533e <Batt_Protection_when_charge+0xa6>
 8005300:	4b93      	ldr	r3, [pc, #588]	; (8005550 <Batt_Protection_when_charge+0x2b8>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11a      	bne.n	800533e <Batt_Protection_when_charge+0xa6>
		fault_code=7;
 8005308:	4b8b      	ldr	r3, [pc, #556]	; (8005538 <Batt_Protection_when_charge+0x2a0>)
 800530a:	2207      	movs	r2, #7
 800530c:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 800530e:	4b8e      	ldr	r3, [pc, #568]	; (8005548 <Batt_Protection_when_charge+0x2b0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a8c      	ldr	r2, [pc, #560]	; (8005544 <Batt_Protection_when_charge+0x2ac>)
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f7fb ff5b 	bl	80011d4 <__aeabi_fcmpgt>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 83b9 	beq.w	8005a98 <Batt_Protection_when_charge+0x800>
			Batt_Open_Mode();
 8005326:	f7fc f915 	bl	8001554 <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 800532a:	4b89      	ldr	r3, [pc, #548]	; (8005550 <Batt_Protection_when_charge+0x2b8>)
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005330:	2200      	movs	r2, #0
 8005332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005336:	4882      	ldr	r0, [pc, #520]	; (8005540 <Batt_Protection_when_charge+0x2a8>)
 8005338:	f003 fcc9 	bl	8008cce <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 800533c:	e3ac      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
	else if(((65-Suhu_T1<10)||(50-Suhu_T2<10)||(50-Suhu_T3<10)||(50-Suhu_T4<10)) && (flag_trip_overtemperature==OFF)) { // Warning Over Temperature Charge 40 65 40 65
 800533e:	4b85      	ldr	r3, [pc, #532]	; (8005554 <Batt_Protection_when_charge+0x2bc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4884      	ldr	r0, [pc, #528]	; (8005558 <Batt_Protection_when_charge+0x2c0>)
 8005346:	f7fb fc7f 	bl	8000c48 <__aeabi_fsub>
 800534a:	4603      	mov	r3, r0
 800534c:	497f      	ldr	r1, [pc, #508]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 800534e:	4618      	mov	r0, r3
 8005350:	f7fb ff22 	bl	8001198 <__aeabi_fcmplt>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d129      	bne.n	80053ae <Batt_Protection_when_charge+0x116>
 800535a:	4b80      	ldr	r3, [pc, #512]	; (800555c <Batt_Protection_when_charge+0x2c4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4619      	mov	r1, r3
 8005360:	487f      	ldr	r0, [pc, #508]	; (8005560 <Batt_Protection_when_charge+0x2c8>)
 8005362:	f7fb fc71 	bl	8000c48 <__aeabi_fsub>
 8005366:	4603      	mov	r3, r0
 8005368:	4978      	ldr	r1, [pc, #480]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 800536a:	4618      	mov	r0, r3
 800536c:	f7fb ff14 	bl	8001198 <__aeabi_fcmplt>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11b      	bne.n	80053ae <Batt_Protection_when_charge+0x116>
 8005376:	4b7b      	ldr	r3, [pc, #492]	; (8005564 <Batt_Protection_when_charge+0x2cc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4619      	mov	r1, r3
 800537c:	4878      	ldr	r0, [pc, #480]	; (8005560 <Batt_Protection_when_charge+0x2c8>)
 800537e:	f7fb fc63 	bl	8000c48 <__aeabi_fsub>
 8005382:	4603      	mov	r3, r0
 8005384:	4971      	ldr	r1, [pc, #452]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 8005386:	4618      	mov	r0, r3
 8005388:	f7fb ff06 	bl	8001198 <__aeabi_fcmplt>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <Batt_Protection_when_charge+0x116>
 8005392:	4b75      	ldr	r3, [pc, #468]	; (8005568 <Batt_Protection_when_charge+0x2d0>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4619      	mov	r1, r3
 8005398:	4871      	ldr	r0, [pc, #452]	; (8005560 <Batt_Protection_when_charge+0x2c8>)
 800539a:	f7fb fc55 	bl	8000c48 <__aeabi_fsub>
 800539e:	4603      	mov	r3, r0
 80053a0:	496a      	ldr	r1, [pc, #424]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb fef8 	bl	8001198 <__aeabi_fcmplt>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d037      	beq.n	800541e <Batt_Protection_when_charge+0x186>
 80053ae:	4b6f      	ldr	r3, [pc, #444]	; (800556c <Batt_Protection_when_charge+0x2d4>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d133      	bne.n	800541e <Batt_Protection_when_charge+0x186>
		fault_code=8;
 80053b6:	4b60      	ldr	r3, [pc, #384]	; (8005538 <Batt_Protection_when_charge+0x2a0>)
 80053b8:	2208      	movs	r2, #8
 80053ba:	701a      	strb	r2, [r3, #0]
		if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80)) {
 80053bc:	4b65      	ldr	r3, [pc, #404]	; (8005554 <Batt_Protection_when_charge+0x2bc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	496b      	ldr	r1, [pc, #428]	; (8005570 <Batt_Protection_when_charge+0x2d8>)
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fb ff06 	bl	80011d4 <__aeabi_fcmpgt>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d11b      	bne.n	8005406 <Batt_Protection_when_charge+0x16e>
 80053ce:	4b63      	ldr	r3, [pc, #396]	; (800555c <Batt_Protection_when_charge+0x2c4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4968      	ldr	r1, [pc, #416]	; (8005574 <Batt_Protection_when_charge+0x2dc>)
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7fb fefd 	bl	80011d4 <__aeabi_fcmpgt>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d112      	bne.n	8005406 <Batt_Protection_when_charge+0x16e>
 80053e0:	4b60      	ldr	r3, [pc, #384]	; (8005564 <Batt_Protection_when_charge+0x2cc>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4962      	ldr	r1, [pc, #392]	; (8005570 <Batt_Protection_when_charge+0x2d8>)
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fb fef4 	bl	80011d4 <__aeabi_fcmpgt>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <Batt_Protection_when_charge+0x16e>
 80053f2:	4b5d      	ldr	r3, [pc, #372]	; (8005568 <Batt_Protection_when_charge+0x2d0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	495f      	ldr	r1, [pc, #380]	; (8005574 <Batt_Protection_when_charge+0x2dc>)
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fb feeb 	bl	80011d4 <__aeabi_fcmpgt>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d100      	bne.n	8005406 <Batt_Protection_when_charge+0x16e>
 8005404:	e348      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
			Batt_Open_Mode();
 8005406:	f7fc f8a5 	bl	8001554 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 800540a:	4b58      	ldr	r3, [pc, #352]	; (800556c <Batt_Protection_when_charge+0x2d4>)
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005410:	2200      	movs	r2, #0
 8005412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005416:	484a      	ldr	r0, [pc, #296]	; (8005540 <Batt_Protection_when_charge+0x2a8>)
 8005418:	f003 fc59 	bl	8008cce <HAL_GPIO_WritePin>
		if((Suhu_T1>45)||(Suhu_T2>80)||(Suhu_T3>45)||(Suhu_T4>80)) {
 800541c:	e33c      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 800541e:	4b4d      	ldr	r3, [pc, #308]	; (8005554 <Batt_Protection_when_charge+0x2bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a55      	ldr	r2, [pc, #340]	; (8005578 <Batt_Protection_when_charge+0x2e0>)
 8005424:	6812      	ldr	r2, [r2, #0]
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f7fb fc0d 	bl	8000c48 <__aeabi_fsub>
 800542e:	4603      	mov	r3, r0
 8005430:	4946      	ldr	r1, [pc, #280]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 8005432:	4618      	mov	r0, r3
 8005434:	f7fb feba 	bl	80011ac <__aeabi_fcmple>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d130      	bne.n	80054a0 <Batt_Protection_when_charge+0x208>
 800543e:	4b47      	ldr	r3, [pc, #284]	; (800555c <Batt_Protection_when_charge+0x2c4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a4d      	ldr	r2, [pc, #308]	; (8005578 <Batt_Protection_when_charge+0x2e0>)
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	4611      	mov	r1, r2
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb fbfd 	bl	8000c48 <__aeabi_fsub>
 800544e:	4603      	mov	r3, r0
 8005450:	493e      	ldr	r1, [pc, #248]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 8005452:	4618      	mov	r0, r3
 8005454:	f7fb feaa 	bl	80011ac <__aeabi_fcmple>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d120      	bne.n	80054a0 <Batt_Protection_when_charge+0x208>
 800545e:	4b41      	ldr	r3, [pc, #260]	; (8005564 <Batt_Protection_when_charge+0x2cc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a45      	ldr	r2, [pc, #276]	; (8005578 <Batt_Protection_when_charge+0x2e0>)
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	4611      	mov	r1, r2
 8005468:	4618      	mov	r0, r3
 800546a:	f7fb fbed 	bl	8000c48 <__aeabi_fsub>
 800546e:	4603      	mov	r3, r0
 8005470:	4936      	ldr	r1, [pc, #216]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 8005472:	4618      	mov	r0, r3
 8005474:	f7fb fe9a 	bl	80011ac <__aeabi_fcmple>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d110      	bne.n	80054a0 <Batt_Protection_when_charge+0x208>
 800547e:	4b3a      	ldr	r3, [pc, #232]	; (8005568 <Batt_Protection_when_charge+0x2d0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a3d      	ldr	r2, [pc, #244]	; (8005578 <Batt_Protection_when_charge+0x2e0>)
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f7fb fbdd 	bl	8000c48 <__aeabi_fsub>
 800548e:	4603      	mov	r3, r0
 8005490:	492e      	ldr	r1, [pc, #184]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 8005492:	4618      	mov	r0, r3
 8005494:	f7fb fe8a 	bl	80011ac <__aeabi_fcmple>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8134 	beq.w	8005708 <Batt_Protection_when_charge+0x470>
 80054a0:	4b36      	ldr	r3, [pc, #216]	; (800557c <Batt_Protection_when_charge+0x2e4>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 812f 	bne.w	8005708 <Batt_Protection_when_charge+0x470>
		fault_code=9;
 80054aa:	4b23      	ldr	r3, [pc, #140]	; (8005538 <Batt_Protection_when_charge+0x2a0>)
 80054ac:	2209      	movs	r2, #9
 80054ae:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80054b0:	4b31      	ldr	r3, [pc, #196]	; (8005578 <Batt_Protection_when_charge+0x2e0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4925      	ldr	r1, [pc, #148]	; (800554c <Batt_Protection_when_charge+0x2b4>)
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fb fbc8 	bl	8000c4c <__addsf3>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	4b24      	ldr	r3, [pc, #144]	; (8005554 <Batt_Protection_when_charge+0x2bc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f7fb fe7a 	bl	80011c0 <__aeabi_fcmpge>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d05c      	beq.n	800558c <Batt_Protection_when_charge+0x2f4>
 80054d2:	4b29      	ldr	r3, [pc, #164]	; (8005578 <Batt_Protection_when_charge+0x2e0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	492a      	ldr	r1, [pc, #168]	; (8005580 <Batt_Protection_when_charge+0x2e8>)
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fb fbb7 	bl	8000c4c <__addsf3>
 80054de:	4603      	mov	r3, r0
 80054e0:	461a      	mov	r2, r3
 80054e2:	4b1c      	ldr	r3, [pc, #112]	; (8005554 <Batt_Protection_when_charge+0x2bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fb fe55 	bl	8001198 <__aeabi_fcmplt>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d04b      	beq.n	800558c <Batt_Protection_when_charge+0x2f4>
			if((test_tim2%1000)==0) {
 80054f4:	4b23      	ldr	r3, [pc, #140]	; (8005584 <Batt_Protection_when_charge+0x2ec>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b23      	ldr	r3, [pc, #140]	; (8005588 <Batt_Protection_when_charge+0x2f0>)
 80054fa:	fb83 1302 	smull	r1, r3, r3, r2
 80054fe:	1199      	asrs	r1, r3, #6
 8005500:	17d3      	asrs	r3, r2, #31
 8005502:	1acb      	subs	r3, r1, r3
 8005504:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005508:	fb01 f303 	mul.w	r3, r1, r3
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	f040 80e5 	bne.w	80056de <Batt_Protection_when_charge+0x446>
				BUZZ_Toggle;
 8005514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005518:	4809      	ldr	r0, [pc, #36]	; (8005540 <Batt_Protection_when_charge+0x2a8>)
 800551a:	f003 fbf0 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <Batt_Protection_when_charge+0x2ec>)
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8005524:	e0db      	b.n	80056de <Batt_Protection_when_charge+0x446>
 8005526:	bf00      	nop
 8005528:	200002f4 	.word	0x200002f4
 800552c:	20000280 	.word	0x20000280
 8005530:	200002dc 	.word	0x200002dc
 8005534:	20000318 	.word	0x20000318
 8005538:	20000302 	.word	0x20000302
 800553c:	2000025f 	.word	0x2000025f
 8005540:	40011000 	.word	0x40011000
 8005544:	20000024 	.word	0x20000024
 8005548:	20000370 	.word	0x20000370
 800554c:	41200000 	.word	0x41200000
 8005550:	2000025d 	.word	0x2000025d
 8005554:	20000304 	.word	0x20000304
 8005558:	42820000 	.word	0x42820000
 800555c:	20000378 	.word	0x20000378
 8005560:	42480000 	.word	0x42480000
 8005564:	20000284 	.word	0x20000284
 8005568:	20000334 	.word	0x20000334
 800556c:	2000027c 	.word	0x2000027c
 8005570:	42340000 	.word	0x42340000
 8005574:	42a00000 	.word	0x42a00000
 8005578:	2000001c 	.word	0x2000001c
 800557c:	200002fc 	.word	0x200002fc
 8005580:	40a00000 	.word	0x40a00000
 8005584:	20000364 	.word	0x20000364
 8005588:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 800558c:	4b54      	ldr	r3, [pc, #336]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4954      	ldr	r1, [pc, #336]	; (80056e4 <Batt_Protection_when_charge+0x44c>)
 8005592:	4618      	mov	r0, r3
 8005594:	f7fb fb5a 	bl	8000c4c <__addsf3>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	4b52      	ldr	r3, [pc, #328]	; (80056e8 <Batt_Protection_when_charge+0x450>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4619      	mov	r1, r3
 80055a2:	4610      	mov	r0, r2
 80055a4:	f7fb fe0c 	bl	80011c0 <__aeabi_fcmpge>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d029      	beq.n	8005602 <Batt_Protection_when_charge+0x36a>
 80055ae:	4b4c      	ldr	r3, [pc, #304]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fb fb48 	bl	8000c4c <__addsf3>
 80055bc:	4603      	mov	r3, r0
 80055be:	461a      	mov	r2, r3
 80055c0:	4b49      	ldr	r3, [pc, #292]	; (80056e8 <Batt_Protection_when_charge+0x450>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f7fb fde6 	bl	8001198 <__aeabi_fcmplt>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d017      	beq.n	8005602 <Batt_Protection_when_charge+0x36a>
			if((test_tim2%500)==0) {
 80055d2:	4b46      	ldr	r3, [pc, #280]	; (80056ec <Batt_Protection_when_charge+0x454>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b46      	ldr	r3, [pc, #280]	; (80056f0 <Batt_Protection_when_charge+0x458>)
 80055d8:	fb83 1302 	smull	r1, r3, r3, r2
 80055dc:	1159      	asrs	r1, r3, #5
 80055de:	17d3      	asrs	r3, r2, #31
 80055e0:	1acb      	subs	r3, r1, r3
 80055e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d176      	bne.n	80056de <Batt_Protection_when_charge+0x446>
				BUZZ_Toggle;
 80055f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055f4:	483f      	ldr	r0, [pc, #252]	; (80056f4 <Batt_Protection_when_charge+0x45c>)
 80055f6:	f003 fb82 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 80055fa:	4b3c      	ldr	r3, [pc, #240]	; (80056ec <Batt_Protection_when_charge+0x454>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8005600:	e06d      	b.n	80056de <Batt_Protection_when_charge+0x446>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 8005602:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800560a:	4618      	mov	r0, r3
 800560c:	f7fb fb1e 	bl	8000c4c <__addsf3>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	4b34      	ldr	r3, [pc, #208]	; (80056e8 <Batt_Protection_when_charge+0x450>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7fb fdda 	bl	80011d4 <__aeabi_fcmpgt>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d022      	beq.n	800566c <Batt_Protection_when_charge+0x3d4>
 8005626:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <Batt_Protection_when_charge+0x450>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	4611      	mov	r1, r2
 8005630:	4618      	mov	r0, r3
 8005632:	f7fb fdc5 	bl	80011c0 <__aeabi_fcmpge>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d017      	beq.n	800566c <Batt_Protection_when_charge+0x3d4>
			if((test_tim2%500)==0) {
 800563c:	4b2b      	ldr	r3, [pc, #172]	; (80056ec <Batt_Protection_when_charge+0x454>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <Batt_Protection_when_charge+0x458>)
 8005642:	fb83 1302 	smull	r1, r3, r3, r2
 8005646:	1159      	asrs	r1, r3, #5
 8005648:	17d3      	asrs	r3, r2, #31
 800564a:	1acb      	subs	r3, r1, r3
 800564c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d141      	bne.n	80056de <Batt_Protection_when_charge+0x446>
				BUZZ_Toggle;
 800565a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800565e:	4825      	ldr	r0, [pc, #148]	; (80056f4 <Batt_Protection_when_charge+0x45c>)
 8005660:	f003 fb4d 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005664:	4b21      	ldr	r3, [pc, #132]	; (80056ec <Batt_Protection_when_charge+0x454>)
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 800566a:	e038      	b.n	80056de <Batt_Protection_when_charge+0x446>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 800566c:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <Batt_Protection_when_charge+0x450>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a1b      	ldr	r2, [pc, #108]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	4611      	mov	r1, r2
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb fd8e 	bl	8001198 <__aeabi_fcmplt>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d121      	bne.n	80056c6 <Batt_Protection_when_charge+0x42e>
 8005682:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <Batt_Protection_when_charge+0x460>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f7fb fd83 	bl	8001198 <__aeabi_fcmplt>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d116      	bne.n	80056c6 <Batt_Protection_when_charge+0x42e>
 8005698:	4b18      	ldr	r3, [pc, #96]	; (80056fc <Batt_Protection_when_charge+0x464>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fb fd78 	bl	8001198 <__aeabi_fcmplt>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10b      	bne.n	80056c6 <Batt_Protection_when_charge+0x42e>
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <Batt_Protection_when_charge+0x468>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <Batt_Protection_when_charge+0x448>)
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	4611      	mov	r1, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fb fd6d 	bl	8001198 <__aeabi_fcmplt>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d100      	bne.n	80056c6 <Batt_Protection_when_charge+0x42e>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80056c4:	e1e8      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
			Batt_Open_Mode();
 80056c6:	f7fb ff45 	bl	8001554 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 80056ca:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <Batt_Protection_when_charge+0x46c>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80056d0:	2200      	movs	r2, #0
 80056d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056d6:	4807      	ldr	r0, [pc, #28]	; (80056f4 <Batt_Protection_when_charge+0x45c>)
 80056d8:	f003 faf9 	bl	8008cce <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80056dc:	e1dc      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
 80056de:	e1db      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
 80056e0:	2000001c 	.word	0x2000001c
 80056e4:	40a00000 	.word	0x40a00000
 80056e8:	20000304 	.word	0x20000304
 80056ec:	20000364 	.word	0x20000364
 80056f0:	10624dd3 	.word	0x10624dd3
 80056f4:	40011000 	.word	0x40011000
 80056f8:	20000378 	.word	0x20000378
 80056fc:	20000284 	.word	0x20000284
 8005700:	20000334 	.word	0x20000334
 8005704:	200002fc 	.word	0x200002fc
	else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 8005708:	4ba3      	ldr	r3, [pc, #652]	; (8005998 <Batt_Protection_when_charge+0x700>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005710:	4618      	mov	r0, r3
 8005712:	f7fa fef5 	bl	8000500 <__aeabi_f2d>
 8005716:	4604      	mov	r4, r0
 8005718:	460d      	mov	r5, r1
 800571a:	4ba0      	ldr	r3, [pc, #640]	; (800599c <Batt_Protection_when_charge+0x704>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa feee 	bl	8000500 <__aeabi_f2d>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4620      	mov	r0, r4
 800572a:	4629      	mov	r1, r5
 800572c:	f7fa fd88 	bl	8000240 <__aeabi_dsub>
 8005730:	4602      	mov	r2, r0
 8005732:	460b      	mov	r3, r1
 8005734:	4610      	mov	r0, r2
 8005736:	4619      	mov	r1, r3
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	f7fb f9c6 	bl	8000ad0 <__aeabi_dcmpgt>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8108 	beq.w	800595c <Batt_Protection_when_charge+0x6c4>
 800574c:	4b94      	ldr	r3, [pc, #592]	; (80059a0 <Batt_Protection_when_charge+0x708>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f040 8103 	bne.w	800595c <Batt_Protection_when_charge+0x6c4>
		fault_code=10;
 8005756:	4b93      	ldr	r3, [pc, #588]	; (80059a4 <Batt_Protection_when_charge+0x70c>)
 8005758:	220a      	movs	r2, #10
 800575a:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 800575c:	4b8e      	ldr	r3, [pc, #568]	; (8005998 <Batt_Protection_when_charge+0x700>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f7fa fecd 	bl	8000500 <__aeabi_f2d>
 8005766:	a388      	add	r3, pc, #544	; (adr r3, 8005988 <Batt_Protection_when_charge+0x6f0>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f7fb f84a 	bl	8000804 <__aeabi_ddiv>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4614      	mov	r4, r2
 8005776:	461d      	mov	r5, r3
 8005778:	4b87      	ldr	r3, [pc, #540]	; (8005998 <Batt_Protection_when_charge+0x700>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fa febf 	bl	8000500 <__aeabi_f2d>
 8005782:	a381      	add	r3, pc, #516	; (adr r3, 8005988 <Batt_Protection_when_charge+0x6f0>)
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f7fb f83c 	bl	8000804 <__aeabi_ddiv>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4620      	mov	r0, r4
 8005792:	4629      	mov	r1, r5
 8005794:	f7fa ff0c 	bl	80005b0 <__aeabi_dmul>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	4b80      	ldr	r3, [pc, #512]	; (80059a8 <Batt_Protection_when_charge+0x710>)
 80057a6:	f7fa fd4b 	bl	8000240 <__aeabi_dsub>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	f04f 0000 	mov.w	r0, #0
 80057b2:	497e      	ldr	r1, [pc, #504]	; (80059ac <Batt_Protection_when_charge+0x714>)
 80057b4:	f7fb f826 	bl	8000804 <__aeabi_ddiv>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	f7fb f9ee 	bl	8000ba0 <__aeabi_d2f>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4a7a      	ldr	r2, [pc, #488]	; (80059b0 <Batt_Protection_when_charge+0x718>)
 80057c8:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 80057ca:	4b7a      	ldr	r3, [pc, #488]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fa fe96 	bl	8000500 <__aeabi_f2d>
 80057d4:	a36e      	add	r3, pc, #440	; (adr r3, 8005990 <Batt_Protection_when_charge+0x6f8>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fa fd33 	bl	8000244 <__adddf3>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4610      	mov	r0, r2
 80057e4:	4619      	mov	r1, r3
 80057e6:	f7fb f9db 	bl	8000ba0 <__aeabi_d2f>
 80057ea:	4603      	mov	r3, r0
 80057ec:	4a71      	ldr	r2, [pc, #452]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 80057ee:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 80057f0:	4b70      	ldr	r3, [pc, #448]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a6e      	ldr	r2, [pc, #440]	; (80059b0 <Batt_Protection_when_charge+0x718>)
 80057f6:	6812      	ldr	r2, [r2, #0]
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fb fcea 	bl	80011d4 <__aeabi_fcmpgt>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d012      	beq.n	800582c <Batt_Protection_when_charge+0x594>
 8005806:	4b66      	ldr	r3, [pc, #408]	; (80059a0 <Batt_Protection_when_charge+0x708>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10e      	bne.n	800582c <Batt_Protection_when_charge+0x594>
			Batt_Open_Mode();
 800580e:	f7fb fea1 	bl	8001554 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8005812:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <Batt_Protection_when_charge+0x718>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a67      	ldr	r2, [pc, #412]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 8005818:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentcharge=ON;
 800581a:	4b61      	ldr	r3, [pc, #388]	; (80059a0 <Batt_Protection_when_charge+0x708>)
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005820:	2200      	movs	r2, #0
 8005822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005826:	4864      	ldr	r0, [pc, #400]	; (80059b8 <Batt_Protection_when_charge+0x720>)
 8005828:	f003 fa51 	bl	8008cce <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 800582c:	4b5c      	ldr	r3, [pc, #368]	; (80059a0 <Batt_Protection_when_charge+0x708>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 8130 	bne.w	8005a96 <Batt_Protection_when_charge+0x7fe>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005836:	4b5e      	ldr	r3, [pc, #376]	; (80059b0 <Batt_Protection_when_charge+0x718>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a5e      	ldr	r2, [pc, #376]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	4611      	mov	r1, r2
 8005840:	4618      	mov	r0, r3
 8005842:	f7fb fa01 	bl	8000c48 <__aeabi_fsub>
 8005846:	4603      	mov	r3, r0
 8005848:	495c      	ldr	r1, [pc, #368]	; (80059bc <Batt_Protection_when_charge+0x724>)
 800584a:	4618      	mov	r0, r3
 800584c:	f7fb fcc2 	bl	80011d4 <__aeabi_fcmpgt>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d018      	beq.n	8005888 <Batt_Protection_when_charge+0x5f0>
				if((test_tim2%1000)==0) {
 8005856:	4b5a      	ldr	r3, [pc, #360]	; (80059c0 <Batt_Protection_when_charge+0x728>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b5a      	ldr	r3, [pc, #360]	; (80059c4 <Batt_Protection_when_charge+0x72c>)
 800585c:	fb83 1302 	smull	r1, r3, r3, r2
 8005860:	1199      	asrs	r1, r3, #6
 8005862:	17d3      	asrs	r3, r2, #31
 8005864:	1acb      	subs	r3, r1, r3
 8005866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	f040 8110 	bne.w	8005a96 <Batt_Protection_when_charge+0x7fe>
					BUZZ_Toggle;
 8005876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800587a:	484f      	ldr	r0, [pc, #316]	; (80059b8 <Batt_Protection_when_charge+0x720>)
 800587c:	f003 fa3f 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005880:	4b4f      	ldr	r3, [pc, #316]	; (80059c0 <Batt_Protection_when_charge+0x728>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005886:	e106      	b.n	8005a96 <Batt_Protection_when_charge+0x7fe>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8005888:	4b49      	ldr	r3, [pc, #292]	; (80059b0 <Batt_Protection_when_charge+0x718>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a49      	ldr	r2, [pc, #292]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f7fb f9d8 	bl	8000c48 <__aeabi_fsub>
 8005898:	4603      	mov	r3, r0
 800589a:	494b      	ldr	r1, [pc, #300]	; (80059c8 <Batt_Protection_when_charge+0x730>)
 800589c:	4618      	mov	r0, r3
 800589e:	f7fb fc99 	bl	80011d4 <__aeabi_fcmpgt>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d017      	beq.n	80058d8 <Batt_Protection_when_charge+0x640>
				if((test_tim2%100)==0) {
 80058a8:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <Batt_Protection_when_charge+0x728>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b47      	ldr	r3, [pc, #284]	; (80059cc <Batt_Protection_when_charge+0x734>)
 80058ae:	fb83 1302 	smull	r1, r3, r3, r2
 80058b2:	1159      	asrs	r1, r3, #5
 80058b4:	17d3      	asrs	r3, r2, #31
 80058b6:	1acb      	subs	r3, r1, r3
 80058b8:	2164      	movs	r1, #100	; 0x64
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f040 80e8 	bne.w	8005a96 <Batt_Protection_when_charge+0x7fe>
					BUZZ_Toggle;
 80058c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058ca:	483b      	ldr	r0, [pc, #236]	; (80059b8 <Batt_Protection_when_charge+0x720>)
 80058cc:	f003 fa17 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 80058d0:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <Batt_Protection_when_charge+0x728>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 80058d6:	e0de      	b.n	8005a96 <Batt_Protection_when_charge+0x7fe>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 80058d8:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <Batt_Protection_when_charge+0x718>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a35      	ldr	r2, [pc, #212]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	4611      	mov	r1, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fb f9b0 	bl	8000c48 <__aeabi_fsub>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4939      	ldr	r1, [pc, #228]	; (80059d0 <Batt_Protection_when_charge+0x738>)
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fb fc71 	bl	80011d4 <__aeabi_fcmpgt>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d018      	beq.n	800592a <Batt_Protection_when_charge+0x692>
				if((test_tim2%10)==0) {
 80058f8:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <Batt_Protection_when_charge+0x728>)
 80058fa:	6819      	ldr	r1, [r3, #0]
 80058fc:	4b35      	ldr	r3, [pc, #212]	; (80059d4 <Batt_Protection_when_charge+0x73c>)
 80058fe:	fb83 2301 	smull	r2, r3, r3, r1
 8005902:	109a      	asrs	r2, r3, #2
 8005904:	17cb      	asrs	r3, r1, #31
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	1aca      	subs	r2, r1, r3
 8005912:	2a00      	cmp	r2, #0
 8005914:	f040 80bf 	bne.w	8005a96 <Batt_Protection_when_charge+0x7fe>
					BUZZ_Toggle;
 8005918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800591c:	4826      	ldr	r0, [pc, #152]	; (80059b8 <Batt_Protection_when_charge+0x720>)
 800591e:	f003 f9ee 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005922:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <Batt_Protection_when_charge+0x728>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005928:	e0b5      	b.n	8005a96 <Batt_Protection_when_charge+0x7fe>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 800592a:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <Batt_Protection_when_charge+0x718>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a21      	ldr	r2, [pc, #132]	; (80059b4 <Batt_Protection_when_charge+0x71c>)
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	4611      	mov	r1, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f7fb f987 	bl	8000c48 <__aeabi_fsub>
 800593a:	4603      	mov	r3, r0
 800593c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005940:	4618      	mov	r0, r3
 8005942:	f7fb fc47 	bl	80011d4 <__aeabi_fcmpgt>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d100      	bne.n	800594e <Batt_Protection_when_charge+0x6b6>
		if(flag_trip_overcurrentcharge==OFF) {
 800594c:	e0a3      	b.n	8005a96 <Batt_Protection_when_charge+0x7fe>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800594e:	2201      	movs	r2, #1
 8005950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005954:	4818      	ldr	r0, [pc, #96]	; (80059b8 <Batt_Protection_when_charge+0x720>)
 8005956:	f003 f9ba 	bl	8008cce <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 800595a:	e09c      	b.n	8005a96 <Batt_Protection_when_charge+0x7fe>
	else if(VBATT>V_Over_Set) {
 800595c:	4b1e      	ldr	r3, [pc, #120]	; (80059d8 <Batt_Protection_when_charge+0x740>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1e      	ldr	r2, [pc, #120]	; (80059dc <Batt_Protection_when_charge+0x744>)
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f7fb fc34 	bl	80011d4 <__aeabi_fcmpgt>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d038      	beq.n	80059e4 <Batt_Protection_when_charge+0x74c>
		fault_code=11;
 8005972:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <Batt_Protection_when_charge+0x70c>)
 8005974:	220b      	movs	r2, #11
 8005976:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=ON;
 8005978:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <Batt_Protection_when_charge+0x748>)
 800597a:	2201      	movs	r2, #1
 800597c:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 800597e:	f7fb fde9 	bl	8001554 <Batt_Open_Mode>
}
 8005982:	e089      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
 8005984:	f3af 8000 	nop.w
 8005988:	9999999a 	.word	0x9999999a
 800598c:	401b9999 	.word	0x401b9999
 8005990:	47ae147b 	.word	0x47ae147b
 8005994:	3f847ae1 	.word	0x3f847ae1
 8005998:	200002f4 	.word	0x200002f4
 800599c:	20000014 	.word	0x20000014
 80059a0:	20000322 	.word	0x20000322
 80059a4:	20000302 	.word	0x20000302
 80059a8:	3ff00000 	.word	0x3ff00000
 80059ac:	40200000 	.word	0x40200000
 80059b0:	2000026c 	.word	0x2000026c
 80059b4:	2000033c 	.word	0x2000033c
 80059b8:	40011000 	.word	0x40011000
 80059bc:	41700000 	.word	0x41700000
 80059c0:	20000364 	.word	0x20000364
 80059c4:	10624dd3 	.word	0x10624dd3
 80059c8:	41200000 	.word	0x41200000
 80059cc:	51eb851f 	.word	0x51eb851f
 80059d0:	40400000 	.word	0x40400000
 80059d4:	66666667 	.word	0x66666667
 80059d8:	20000280 	.word	0x20000280
 80059dc:	2000002c 	.word	0x2000002c
 80059e0:	20000374 	.word	0x20000374
		if(fault_code!=0)
 80059e4:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <Batt_Protection_when_charge+0x810>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <Batt_Protection_when_charge+0x75c>
			last_fault_code=fault_code;
 80059ec:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <Batt_Protection_when_charge+0x810>)
 80059ee:	781a      	ldrb	r2, [r3, #0]
 80059f0:	4b2e      	ldr	r3, [pc, #184]	; (8005aac <Batt_Protection_when_charge+0x814>)
 80059f2:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 80059f4:	4b2c      	ldr	r3, [pc, #176]	; (8005aa8 <Batt_Protection_when_charge+0x810>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80059fa:	2200      	movs	r2, #0
 80059fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a00:	482b      	ldr	r0, [pc, #172]	; (8005ab0 <Batt_Protection_when_charge+0x818>)
 8005a02:	f003 f964 	bl	8008cce <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8005a06:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <Batt_Protection_when_charge+0x81c>)
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8005a0e:	4b2a      	ldr	r3, [pc, #168]	; (8005ab8 <Batt_Protection_when_charge+0x820>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fa fd74 	bl	8000500 <__aeabi_f2d>
 8005a18:	a321      	add	r3, pc, #132	; (adr r3, 8005aa0 <Batt_Protection_when_charge+0x808>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa fc0f 	bl	8000240 <__aeabi_dsub>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7fb f8b9 	bl	8000ba0 <__aeabi_d2f>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4a21      	ldr	r2, [pc, #132]	; (8005ab8 <Batt_Protection_when_charge+0x820>)
 8005a32:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005a34:	4b21      	ldr	r3, [pc, #132]	; (8005abc <Batt_Protection_when_charge+0x824>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fa fd61 	bl	8000500 <__aeabi_f2d>
 8005a3e:	a318      	add	r3, pc, #96	; (adr r3, 8005aa0 <Batt_Protection_when_charge+0x808>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f7fa fbfc 	bl	8000240 <__aeabi_dsub>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f7fb f8a6 	bl	8000ba0 <__aeabi_d2f>
 8005a54:	4603      	mov	r3, r0
 8005a56:	4a19      	ldr	r2, [pc, #100]	; (8005abc <Batt_Protection_when_charge+0x824>)
 8005a58:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 8005a5a:	4b17      	ldr	r3, [pc, #92]	; (8005ab8 <Batt_Protection_when_charge+0x820>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f04f 0100 	mov.w	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fb fb98 	bl	8001198 <__aeabi_fcmplt>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <Batt_Protection_when_charge+0x7de>
			T_trip_cycle=0;
 8005a6e:	4b12      	ldr	r3, [pc, #72]	; (8005ab8 <Batt_Protection_when_charge+0x820>)
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005a76:	4b11      	ldr	r3, [pc, #68]	; (8005abc <Batt_Protection_when_charge+0x824>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f04f 0100 	mov.w	r1, #0
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fb fb8a 	bl	8001198 <__aeabi_fcmplt>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d100      	bne.n	8005a8c <Batt_Protection_when_charge+0x7f4>
}
 8005a8a:	e005      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
			T_I_Over_trip_cycle=0;
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <Batt_Protection_when_charge+0x824>)
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
}
 8005a94:	e000      	b.n	8005a98 <Batt_Protection_when_charge+0x800>
		if(flag_trip_overcurrentcharge==OFF) {
 8005a96:	bf00      	nop
}
 8005a98:	bf00      	nop
 8005a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a9c:	f3af 8000 	nop.w
 8005aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005aa4:	3f50624d 	.word	0x3f50624d
 8005aa8:	20000302 	.word	0x20000302
 8005aac:	2000036d 	.word	0x2000036d
 8005ab0:	40011000 	.word	0x40011000
 8005ab4:	20000810 	.word	0x20000810
 8005ab8:	2000082c 	.word	0x2000082c
 8005abc:	2000033c 	.word	0x2000033c

08005ac0 <Batt_Protection_when_chargedischarge>:

void Batt_Protection_when_chargedischarge(void) {
 8005ac0:	b5b0      	push	{r4, r5, r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
	// Short circuit protection
	if(IBATT > (VBATT/0.9)) {
 8005ac4:	4b76      	ldr	r3, [pc, #472]	; (8005ca0 <Batt_Protection_when_chargedischarge+0x1e0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fa fd19 	bl	8000500 <__aeabi_f2d>
 8005ace:	4604      	mov	r4, r0
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	4b74      	ldr	r3, [pc, #464]	; (8005ca4 <Batt_Protection_when_chargedischarge+0x1e4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fa fd12 	bl	8000500 <__aeabi_f2d>
 8005adc:	a36c      	add	r3, pc, #432	; (adr r3, 8005c90 <Batt_Protection_when_chargedischarge+0x1d0>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fe8f 	bl	8000804 <__aeabi_ddiv>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4620      	mov	r0, r4
 8005aec:	4629      	mov	r1, r5
 8005aee:	f7fa ffef 	bl	8000ad0 <__aeabi_dcmpgt>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d016      	beq.n	8005b26 <Batt_Protection_when_chargedischarge+0x66>
		Isc=IBATT;
 8005af8:	4b69      	ldr	r3, [pc, #420]	; (8005ca0 <Batt_Protection_when_chargedischarge+0x1e0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <Batt_Protection_when_chargedischarge+0x1e8>)
 8005afe:	6013      	str	r3, [r2, #0]
		Vsc=VBATT;
 8005b00:	4b68      	ldr	r3, [pc, #416]	; (8005ca4 <Batt_Protection_when_chargedischarge+0x1e4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a69      	ldr	r2, [pc, #420]	; (8005cac <Batt_Protection_when_chargedischarge+0x1ec>)
 8005b06:	6013      	str	r3, [r2, #0]
		fault_code=12;
 8005b08:	4b69      	ldr	r3, [pc, #420]	; (8005cb0 <Batt_Protection_when_chargedischarge+0x1f0>)
 8005b0a:	220c      	movs	r2, #12
 8005b0c:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005b0e:	f7fb fd21 	bl	8001554 <Batt_Open_Mode>
		flag_trip_shortcircuit=ON;
 8005b12:	4b68      	ldr	r3, [pc, #416]	; (8005cb4 <Batt_Protection_when_chargedischarge+0x1f4>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b1e:	4866      	ldr	r0, [pc, #408]	; (8005cb8 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005b20:	f003 f8d5 	bl	8008cce <HAL_GPIO_WritePin>
 8005b24:	e0f5      	b.n	8005d12 <Batt_Protection_when_chargedischarge+0x252>
	}

	// Under Voltage protection
	else if(VBATT < V_Under_Set && flag_trip_undervoltage == OFF ) { //Indikasi terjadi Undervoltage
 8005b26:	4b5f      	ldr	r3, [pc, #380]	; (8005ca4 <Batt_Protection_when_chargedischarge+0x1e4>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a64      	ldr	r2, [pc, #400]	; (8005cbc <Batt_Protection_when_chargedischarge+0x1fc>)
 8005b2c:	6812      	ldr	r2, [r2, #0]
 8005b2e:	4611      	mov	r1, r2
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fb fb31 	bl	8001198 <__aeabi_fcmplt>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80ea 	beq.w	8005d12 <Batt_Protection_when_chargedischarge+0x252>
 8005b3e:	4b60      	ldr	r3, [pc, #384]	; (8005cc0 <Batt_Protection_when_chargedischarge+0x200>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 80e5 	bne.w	8005d12 <Batt_Protection_when_chargedischarge+0x252>
		fault_code=1;
 8005b48:	4b59      	ldr	r3, [pc, #356]	; (8005cb0 <Batt_Protection_when_chargedischarge+0x1f0>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8005b4e:	4b5d      	ldr	r3, [pc, #372]	; (8005cc4 <Batt_Protection_when_chargedischarge+0x204>)
 8005b50:	681c      	ldr	r4, [r3, #0]
 8005b52:	4b54      	ldr	r3, [pc, #336]	; (8005ca4 <Batt_Protection_when_chargedischarge+0x1e4>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a59      	ldr	r2, [pc, #356]	; (8005cbc <Batt_Protection_when_chargedischarge+0x1fc>)
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fb fa31 	bl	8000fc4 <__aeabi_fdiv>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4619      	mov	r1, r3
 8005b66:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005b6a:	f7fb f86d 	bl	8000c48 <__aeabi_fsub>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4619      	mov	r1, r3
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7fb fa26 	bl	8000fc4 <__aeabi_fdiv>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	4b52      	ldr	r3, [pc, #328]	; (8005cc8 <Batt_Protection_when_chargedischarge+0x208>)
 8005b7e:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8005b80:	4b52      	ldr	r3, [pc, #328]	; (8005ccc <Batt_Protection_when_chargedischarge+0x20c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fa fcbb 	bl	8000500 <__aeabi_f2d>
 8005b8a:	a343      	add	r3, pc, #268	; (adr r3, 8005c98 <Batt_Protection_when_chargedischarge+0x1d8>)
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f7fa fb58 	bl	8000244 <__adddf3>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f7fb f800 	bl	8000ba0 <__aeabi_d2f>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4a4a      	ldr	r2, [pc, #296]	; (8005ccc <Batt_Protection_when_chargedischarge+0x20c>)
 8005ba4:	6013      	str	r3, [r2, #0]

		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8005ba6:	4b49      	ldr	r3, [pc, #292]	; (8005ccc <Batt_Protection_when_chargedischarge+0x20c>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a47      	ldr	r2, [pc, #284]	; (8005cc8 <Batt_Protection_when_chargedischarge+0x208>)
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fb fb0f 	bl	80011d4 <__aeabi_fcmpgt>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d012      	beq.n	8005be2 <Batt_Protection_when_chargedischarge+0x122>
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <Batt_Protection_when_chargedischarge+0x200>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10e      	bne.n	8005be2 <Batt_Protection_when_chargedischarge+0x122>
			Batt_Open_Mode();
 8005bc4:	f7fb fcc6 	bl	8001554 <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8005bc8:	4b3f      	ldr	r3, [pc, #252]	; (8005cc8 <Batt_Protection_when_chargedischarge+0x208>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a3f      	ldr	r2, [pc, #252]	; (8005ccc <Batt_Protection_when_chargedischarge+0x20c>)
 8005bce:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 8005bd0:	4b3b      	ldr	r3, [pc, #236]	; (8005cc0 <Batt_Protection_when_chargedischarge+0x200>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bdc:	4836      	ldr	r0, [pc, #216]	; (8005cb8 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005bde:	f003 f876 	bl	8008cce <HAL_GPIO_WritePin>
		}

		if(flag_trip_undervoltage==OFF) {
 8005be2:	4b37      	ldr	r3, [pc, #220]	; (8005cc0 <Batt_Protection_when_chargedischarge+0x200>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f040 8093 	bne.w	8005d12 <Batt_Protection_when_chargedischarge+0x252>
			if(T_Under_trip-T_trip_cycle>15) {
 8005bec:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <Batt_Protection_when_chargedischarge+0x208>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a36      	ldr	r2, [pc, #216]	; (8005ccc <Batt_Protection_when_chargedischarge+0x20c>)
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fb f826 	bl	8000c48 <__aeabi_fsub>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	4934      	ldr	r1, [pc, #208]	; (8005cd0 <Batt_Protection_when_chargedischarge+0x210>)
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fb fae7 	bl	80011d4 <__aeabi_fcmpgt>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d017      	beq.n	8005c3c <Batt_Protection_when_chargedischarge+0x17c>
				if((test_tim2%1000)==0) {
 8005c0c:	4b31      	ldr	r3, [pc, #196]	; (8005cd4 <Batt_Protection_when_chargedischarge+0x214>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <Batt_Protection_when_chargedischarge+0x218>)
 8005c12:	fb83 1302 	smull	r1, r3, r3, r2
 8005c16:	1199      	asrs	r1, r3, #6
 8005c18:	17d3      	asrs	r3, r2, #31
 8005c1a:	1acb      	subs	r3, r1, r3
 8005c1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d173      	bne.n	8005d12 <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 8005c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c2e:	4822      	ldr	r0, [pc, #136]	; (8005cb8 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005c30:	f003 f865 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005c34:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <Batt_Protection_when_chargedischarge+0x214>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e06a      	b.n	8005d12 <Batt_Protection_when_chargedischarge+0x252>
				}
			}
			else if(T_Under_trip-T_trip_cycle>10) {
 8005c3c:	4b22      	ldr	r3, [pc, #136]	; (8005cc8 <Batt_Protection_when_chargedischarge+0x208>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a22      	ldr	r2, [pc, #136]	; (8005ccc <Batt_Protection_when_chargedischarge+0x20c>)
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fa fffe 	bl	8000c48 <__aeabi_fsub>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4923      	ldr	r1, [pc, #140]	; (8005cdc <Batt_Protection_when_chargedischarge+0x21c>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fb fabf 	bl	80011d4 <__aeabi_fcmpgt>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d043      	beq.n	8005ce4 <Batt_Protection_when_chargedischarge+0x224>
				if((test_tim2%100)==0) {
 8005c5c:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <Batt_Protection_when_chargedischarge+0x214>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	4b1f      	ldr	r3, [pc, #124]	; (8005ce0 <Batt_Protection_when_chargedischarge+0x220>)
 8005c62:	fb83 1302 	smull	r1, r3, r3, r2
 8005c66:	1159      	asrs	r1, r3, #5
 8005c68:	17d3      	asrs	r3, r2, #31
 8005c6a:	1acb      	subs	r3, r1, r3
 8005c6c:	2164      	movs	r1, #100	; 0x64
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d14c      	bne.n	8005d12 <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 8005c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c7c:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005c7e:	f003 f83e 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <Batt_Protection_when_chargedischarge+0x214>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	e043      	b.n	8005d12 <Batt_Protection_when_chargedischarge+0x252>
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w
 8005c90:	cccccccd 	.word	0xcccccccd
 8005c94:	3feccccc 	.word	0x3feccccc
 8005c98:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c9c:	3f50624d 	.word	0x3f50624d
 8005ca0:	200002f4 	.word	0x200002f4
 8005ca4:	20000280 	.word	0x20000280
 8005ca8:	200002dc 	.word	0x200002dc
 8005cac:	20000318 	.word	0x20000318
 8005cb0:	20000302 	.word	0x20000302
 8005cb4:	2000025f 	.word	0x2000025f
 8005cb8:	40011000 	.word	0x40011000
 8005cbc:	20000028 	.word	0x20000028
 8005cc0:	200002fd 	.word	0x200002fd
 8005cc4:	20000034 	.word	0x20000034
 8005cc8:	20000810 	.word	0x20000810
 8005ccc:	2000082c 	.word	0x2000082c
 8005cd0:	41700000 	.word	0x41700000
 8005cd4:	20000364 	.word	0x20000364
 8005cd8:	10624dd3 	.word	0x10624dd3
 8005cdc:	41200000 	.word	0x41200000
 8005ce0:	51eb851f 	.word	0x51eb851f
				}
			}
			else if(T_Under_trip-T_trip_cycle>1) {
 8005ce4:	4b78      	ldr	r3, [pc, #480]	; (8005ec8 <Batt_Protection_when_chargedischarge+0x408>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a78      	ldr	r2, [pc, #480]	; (8005ecc <Batt_Protection_when_chargedischarge+0x40c>)
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	4611      	mov	r1, r2
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7fa ffaa 	bl	8000c48 <__aeabi_fsub>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fb fa6a 	bl	80011d4 <__aeabi_fcmpgt>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <Batt_Protection_when_chargedischarge+0x252>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005d06:	2201      	movs	r2, #1
 8005d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d0c:	4870      	ldr	r0, [pc, #448]	; (8005ed0 <Batt_Protection_when_chargedischarge+0x410>)
 8005d0e:	f002 ffde 	bl	8008cce <HAL_GPIO_WritePin>
			}
		}
	}

	// Over Current Protection
	if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {  //Indikasi terjadi Over Current
 8005d12:	4b70      	ldr	r3, [pc, #448]	; (8005ed4 <Batt_Protection_when_chargedischarge+0x414>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a70      	ldr	r2, [pc, #448]	; (8005ed8 <Batt_Protection_when_chargedischarge+0x418>)
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa ff93 	bl	8000c48 <__aeabi_fsub>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f04f 0100 	mov.w	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fb fa53 	bl	80011d4 <__aeabi_fcmpgt>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80e7 	beq.w	8005f04 <Batt_Protection_when_chargedischarge+0x444>
 8005d36:	4b69      	ldr	r3, [pc, #420]	; (8005edc <Batt_Protection_when_chargedischarge+0x41c>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 80e2 	bne.w	8005f04 <Batt_Protection_when_chargedischarge+0x444>
		fault_code=2;
 8005d40:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <Batt_Protection_when_chargedischarge+0x420>)
 8005d42:	2202      	movs	r2, #2
 8005d44:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 8005d46:	4b67      	ldr	r3, [pc, #412]	; (8005ee4 <Batt_Protection_when_chargedischarge+0x424>)
 8005d48:	681c      	ldr	r4, [r3, #0]
 8005d4a:	4b62      	ldr	r3, [pc, #392]	; (8005ed4 <Batt_Protection_when_chargedischarge+0x414>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a62      	ldr	r2, [pc, #392]	; (8005ed8 <Batt_Protection_when_chargedischarge+0x418>)
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	4611      	mov	r1, r2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fb f935 	bl	8000fc4 <__aeabi_fdiv>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fa ff71 	bl	8000c48 <__aeabi_fsub>
 8005d66:	4603      	mov	r3, r0
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f7fb f92a 	bl	8000fc4 <__aeabi_fdiv>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	4b5c      	ldr	r3, [pc, #368]	; (8005ee8 <Batt_Protection_when_chargedischarge+0x428>)
 8005d76:	601a      	str	r2, [r3, #0]
		T_I_Over_trip_cycle+=0.001;
 8005d78:	4b5c      	ldr	r3, [pc, #368]	; (8005eec <Batt_Protection_when_chargedischarge+0x42c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fa fbbf 	bl	8000500 <__aeabi_f2d>
 8005d82:	a34f      	add	r3, pc, #316	; (adr r3, 8005ec0 <Batt_Protection_when_chargedischarge+0x400>)
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f7fa fa5c 	bl	8000244 <__adddf3>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	f7fa ff04 	bl	8000ba0 <__aeabi_d2f>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4a54      	ldr	r2, [pc, #336]	; (8005eec <Batt_Protection_when_chargedischarge+0x42c>)
 8005d9c:	6013      	str	r3, [r2, #0]

		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 8005d9e:	4b53      	ldr	r3, [pc, #332]	; (8005eec <Batt_Protection_when_chargedischarge+0x42c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a51      	ldr	r2, [pc, #324]	; (8005ee8 <Batt_Protection_when_chargedischarge+0x428>)
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	4611      	mov	r1, r2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fb fa13 	bl	80011d4 <__aeabi_fcmpgt>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d012      	beq.n	8005dda <Batt_Protection_when_chargedischarge+0x31a>
 8005db4:	4b49      	ldr	r3, [pc, #292]	; (8005edc <Batt_Protection_when_chargedischarge+0x41c>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10e      	bne.n	8005dda <Batt_Protection_when_chargedischarge+0x31a>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8005dbc:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <Batt_Protection_when_chargedischarge+0x428>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a4a      	ldr	r2, [pc, #296]	; (8005eec <Batt_Protection_when_chargedischarge+0x42c>)
 8005dc2:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 8005dc4:	4b45      	ldr	r3, [pc, #276]	; (8005edc <Batt_Protection_when_chargedischarge+0x41c>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8005dca:	f7fb fbc3 	bl	8001554 <Batt_Open_Mode>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dd4:	483e      	ldr	r0, [pc, #248]	; (8005ed0 <Batt_Protection_when_chargedischarge+0x410>)
 8005dd6:	f002 ff7a 	bl	8008cce <HAL_GPIO_WritePin>
		}
		if(flag_trip_overcurrentdischarge==OFF) {
 8005dda:	4b40      	ldr	r3, [pc, #256]	; (8005edc <Batt_Protection_when_chargedischarge+0x41c>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 848b 	bne.w	80066fa <Batt_Protection_when_chargedischarge+0xc3a>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005de4:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <Batt_Protection_when_chargedischarge+0x428>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a40      	ldr	r2, [pc, #256]	; (8005eec <Batt_Protection_when_chargedischarge+0x42c>)
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fa ff2a 	bl	8000c48 <__aeabi_fsub>
 8005df4:	4603      	mov	r3, r0
 8005df6:	493e      	ldr	r1, [pc, #248]	; (8005ef0 <Batt_Protection_when_chargedischarge+0x430>)
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fb f9eb 	bl	80011d4 <__aeabi_fcmpgt>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d019      	beq.n	8005e38 <Batt_Protection_when_chargedischarge+0x378>
				if((test_tim2%1000)==0) {
 8005e04:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <Batt_Protection_when_chargedischarge+0x434>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b3b      	ldr	r3, [pc, #236]	; (8005ef8 <Batt_Protection_when_chargedischarge+0x438>)
 8005e0a:	fb83 1302 	smull	r1, r3, r3, r2
 8005e0e:	1199      	asrs	r1, r3, #6
 8005e10:	17d3      	asrs	r3, r2, #31
 8005e12:	1acb      	subs	r3, r1, r3
 8005e14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 846b 	bne.w	80066fa <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 8005e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e28:	4829      	ldr	r0, [pc, #164]	; (8005ed0 <Batt_Protection_when_chargedischarge+0x410>)
 8005e2a:	f002 ff68 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005e2e:	4b31      	ldr	r3, [pc, #196]	; (8005ef4 <Batt_Protection_when_chargedischarge+0x434>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8005e34:	f000 bc61 	b.w	80066fa <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <Batt_Protection_when_chargedischarge+0x428>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2b      	ldr	r2, [pc, #172]	; (8005eec <Batt_Protection_when_chargedischarge+0x42c>)
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	4611      	mov	r1, r2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fa ff00 	bl	8000c48 <__aeabi_fsub>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	492c      	ldr	r1, [pc, #176]	; (8005efc <Batt_Protection_when_chargedischarge+0x43c>)
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fb f9c1 	bl	80011d4 <__aeabi_fcmpgt>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d018      	beq.n	8005e8a <Batt_Protection_when_chargedischarge+0x3ca>
				if((test_tim2%100)==0) {
 8005e58:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <Batt_Protection_when_chargedischarge+0x434>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b28      	ldr	r3, [pc, #160]	; (8005f00 <Batt_Protection_when_chargedischarge+0x440>)
 8005e5e:	fb83 1302 	smull	r1, r3, r3, r2
 8005e62:	1159      	asrs	r1, r3, #5
 8005e64:	17d3      	asrs	r3, r2, #31
 8005e66:	1acb      	subs	r3, r1, r3
 8005e68:	2164      	movs	r1, #100	; 0x64
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 8442 	bne.w	80066fa <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 8005e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e7a:	4815      	ldr	r0, [pc, #84]	; (8005ed0 <Batt_Protection_when_chargedischarge+0x410>)
 8005e7c:	f002 ff3f 	bl	8008cfe <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005e80:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <Batt_Protection_when_chargedischarge+0x434>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8005e86:	f000 bc38 	b.w	80066fa <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <Batt_Protection_when_chargedischarge+0x428>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a17      	ldr	r2, [pc, #92]	; (8005eec <Batt_Protection_when_chargedischarge+0x42c>)
 8005e90:	6812      	ldr	r2, [r2, #0]
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fa fed7 	bl	8000c48 <__aeabi_fsub>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fb f997 	bl	80011d4 <__aeabi_fcmpgt>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <Batt_Protection_when_chargedischarge+0x3f0>
		if(flag_trip_overcurrentdischarge==OFF) {
 8005eac:	f000 bc25 	b.w	80066fa <Batt_Protection_when_chargedischarge+0xc3a>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eb6:	4806      	ldr	r0, [pc, #24]	; (8005ed0 <Batt_Protection_when_chargedischarge+0x410>)
 8005eb8:	f002 ff09 	bl	8008cce <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8005ebc:	f000 bc1d 	b.w	80066fa <Batt_Protection_when_chargedischarge+0xc3a>
 8005ec0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ec4:	3f50624d 	.word	0x3f50624d
 8005ec8:	20000810 	.word	0x20000810
 8005ecc:	2000082c 	.word	0x2000082c
 8005ed0:	40011000 	.word	0x40011000
 8005ed4:	200002f4 	.word	0x200002f4
 8005ed8:	20000010 	.word	0x20000010
 8005edc:	2000030c 	.word	0x2000030c
 8005ee0:	20000302 	.word	0x20000302
 8005ee4:	20000038 	.word	0x20000038
 8005ee8:	2000026c 	.word	0x2000026c
 8005eec:	2000033c 	.word	0x2000033c
 8005ef0:	41700000 	.word	0x41700000
 8005ef4:	20000364 	.word	0x20000364
 8005ef8:	10624dd3 	.word	0x10624dd3
 8005efc:	41200000 	.word	0x41200000
 8005f00:	51eb851f 	.word	0x51eb851f
			}
		}
	}

	// Over Temperature protection
	else if(((50-Suhu_T1 < 10)||(85-Suhu_T2 < 10)||(50-Suhu_T3 < 10)||(85-Suhu_T4 < 10)) && flag_trip_overtemperature==OFF) {
 8005f04:	4b8e      	ldr	r3, [pc, #568]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	488e      	ldr	r0, [pc, #568]	; (8006144 <Batt_Protection_when_chargedischarge+0x684>)
 8005f0c:	f7fa fe9c 	bl	8000c48 <__aeabi_fsub>
 8005f10:	4603      	mov	r3, r0
 8005f12:	498d      	ldr	r1, [pc, #564]	; (8006148 <Batt_Protection_when_chargedischarge+0x688>)
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fb f93f 	bl	8001198 <__aeabi_fcmplt>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d12a      	bne.n	8005f76 <Batt_Protection_when_chargedischarge+0x4b6>
 8005f20:	4b8a      	ldr	r3, [pc, #552]	; (800614c <Batt_Protection_when_chargedischarge+0x68c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	488a      	ldr	r0, [pc, #552]	; (8006150 <Batt_Protection_when_chargedischarge+0x690>)
 8005f28:	f7fa fe8e 	bl	8000c48 <__aeabi_fsub>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4986      	ldr	r1, [pc, #536]	; (8006148 <Batt_Protection_when_chargedischarge+0x688>)
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fb f931 	bl	8001198 <__aeabi_fcmplt>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d11c      	bne.n	8005f76 <Batt_Protection_when_chargedischarge+0x4b6>
 8005f3c:	4b85      	ldr	r3, [pc, #532]	; (8006154 <Batt_Protection_when_chargedischarge+0x694>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4619      	mov	r1, r3
 8005f42:	4880      	ldr	r0, [pc, #512]	; (8006144 <Batt_Protection_when_chargedischarge+0x684>)
 8005f44:	f7fa fe80 	bl	8000c48 <__aeabi_fsub>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	497f      	ldr	r1, [pc, #508]	; (8006148 <Batt_Protection_when_chargedischarge+0x688>)
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fb f923 	bl	8001198 <__aeabi_fcmplt>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10e      	bne.n	8005f76 <Batt_Protection_when_chargedischarge+0x4b6>
 8005f58:	4b7f      	ldr	r3, [pc, #508]	; (8006158 <Batt_Protection_when_chargedischarge+0x698>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	487c      	ldr	r0, [pc, #496]	; (8006150 <Batt_Protection_when_chargedischarge+0x690>)
 8005f60:	f7fa fe72 	bl	8000c48 <__aeabi_fsub>
 8005f64:	4603      	mov	r3, r0
 8005f66:	4978      	ldr	r1, [pc, #480]	; (8006148 <Batt_Protection_when_chargedischarge+0x688>)
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fb f915 	bl	8001198 <__aeabi_fcmplt>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8101 	beq.w	8006178 <Batt_Protection_when_chargedischarge+0x6b8>
 8005f76:	4b79      	ldr	r3, [pc, #484]	; (800615c <Batt_Protection_when_chargedischarge+0x69c>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f040 80fc 	bne.w	8006178 <Batt_Protection_when_chargedischarge+0x6b8>
		fault_code=3;
 8005f80:	4b77      	ldr	r3, [pc, #476]	; (8006160 <Batt_Protection_when_chargedischarge+0x6a0>)
 8005f82:	2203      	movs	r2, #3
 8005f84:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8005f86:	4b77      	ldr	r3, [pc, #476]	; (8006164 <Batt_Protection_when_chargedischarge+0x6a4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	496f      	ldr	r1, [pc, #444]	; (8006148 <Batt_Protection_when_chargedischarge+0x688>)
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fa fe5b 	bl	8000c48 <__aeabi_fsub>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	4b6a      	ldr	r3, [pc, #424]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7fb f8fb 	bl	8001198 <__aeabi_fcmplt>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d029      	beq.n	8005ffc <Batt_Protection_when_chargedischarge+0x53c>
 8005fa8:	4b6e      	ldr	r3, [pc, #440]	; (8006164 <Batt_Protection_when_chargedischarge+0x6a4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	496e      	ldr	r1, [pc, #440]	; (8006168 <Batt_Protection_when_chargedischarge+0x6a8>)
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fa fe4a 	bl	8000c48 <__aeabi_fsub>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4b61      	ldr	r3, [pc, #388]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fb f8fe 	bl	80011c0 <__aeabi_fcmpge>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d018      	beq.n	8005ffc <Batt_Protection_when_chargedischarge+0x53c>
			if((test_tim2%1000)==0) {
 8005fca:	4b68      	ldr	r3, [pc, #416]	; (800616c <Batt_Protection_when_chargedischarge+0x6ac>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b68      	ldr	r3, [pc, #416]	; (8006170 <Batt_Protection_when_chargedischarge+0x6b0>)
 8005fd0:	fb83 1302 	smull	r1, r3, r3, r2
 8005fd4:	1199      	asrs	r1, r3, #6
 8005fd6:	17d3      	asrs	r3, r2, #31
 8005fd8:	1acb      	subs	r3, r1, r3
 8005fda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 80aa 	bne.w	800613e <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 8005fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fee:	4861      	ldr	r0, [pc, #388]	; (8006174 <Batt_Protection_when_chargedischarge+0x6b4>)
 8005ff0:	f002 fe85 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005ff4:	4b5d      	ldr	r3, [pc, #372]	; (800616c <Batt_Protection_when_chargedischarge+0x6ac>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8005ffa:	e0a0      	b.n	800613e <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2){
 8005ffc:	4b59      	ldr	r3, [pc, #356]	; (8006164 <Batt_Protection_when_chargedischarge+0x6a4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4959      	ldr	r1, [pc, #356]	; (8006168 <Batt_Protection_when_chargedischarge+0x6a8>)
 8006002:	4618      	mov	r0, r3
 8006004:	f7fa fe20 	bl	8000c48 <__aeabi_fsub>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	4b4c      	ldr	r3, [pc, #304]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fb f8c0 	bl	8001198 <__aeabi_fcmplt>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d029      	beq.n	8006072 <Batt_Protection_when_chargedischarge+0x5b2>
 800601e:	4b51      	ldr	r3, [pc, #324]	; (8006164 <Batt_Protection_when_chargedischarge+0x6a4>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006026:	4618      	mov	r0, r3
 8006028:	f7fa fe0e 	bl	8000c48 <__aeabi_fsub>
 800602c:	4603      	mov	r3, r0
 800602e:	461a      	mov	r2, r3
 8006030:	4b43      	ldr	r3, [pc, #268]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fb f8c2 	bl	80011c0 <__aeabi_fcmpge>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d017      	beq.n	8006072 <Batt_Protection_when_chargedischarge+0x5b2>
			if((test_tim2%500)==0) {
 8006042:	4b4a      	ldr	r3, [pc, #296]	; (800616c <Batt_Protection_when_chargedischarge+0x6ac>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b4a      	ldr	r3, [pc, #296]	; (8006170 <Batt_Protection_when_chargedischarge+0x6b0>)
 8006048:	fb83 1302 	smull	r1, r3, r3, r2
 800604c:	1159      	asrs	r1, r3, #5
 800604e:	17d3      	asrs	r3, r2, #31
 8006050:	1acb      	subs	r3, r1, r3
 8006052:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d16e      	bne.n	800613e <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 8006060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006064:	4843      	ldr	r0, [pc, #268]	; (8006174 <Batt_Protection_when_chargedischarge+0x6b4>)
 8006066:	f002 fe4a 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 800606a:	4b40      	ldr	r3, [pc, #256]	; (800616c <Batt_Protection_when_chargedischarge+0x6ac>)
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006070:	e065      	b.n	800613e <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set) {
 8006072:	4b3c      	ldr	r3, [pc, #240]	; (8006164 <Batt_Protection_when_chargedischarge+0x6a4>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800607a:	4618      	mov	r0, r3
 800607c:	f7fa fde4 	bl	8000c48 <__aeabi_fsub>
 8006080:	4603      	mov	r3, r0
 8006082:	461a      	mov	r2, r3
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4619      	mov	r1, r3
 800608a:	4610      	mov	r0, r2
 800608c:	f7fb f884 	bl	8001198 <__aeabi_fcmplt>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d022      	beq.n	80060dc <Batt_Protection_when_chargedischarge+0x61c>
 8006096:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a32      	ldr	r2, [pc, #200]	; (8006164 <Batt_Protection_when_chargedischarge+0x6a4>)
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fb f883 	bl	80011ac <__aeabi_fcmple>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d017      	beq.n	80060dc <Batt_Protection_when_chargedischarge+0x61c>
			if((test_tim2%500)==0)
 80060ac:	4b2f      	ldr	r3, [pc, #188]	; (800616c <Batt_Protection_when_chargedischarge+0x6ac>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	4b2f      	ldr	r3, [pc, #188]	; (8006170 <Batt_Protection_when_chargedischarge+0x6b0>)
 80060b2:	fb83 1302 	smull	r1, r3, r3, r2
 80060b6:	1159      	asrs	r1, r3, #5
 80060b8:	17d3      	asrs	r3, r2, #31
 80060ba:	1acb      	subs	r3, r1, r3
 80060bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d139      	bne.n	800613e <Batt_Protection_when_chargedischarge+0x67e>
			{
				BUZZ_Toggle;
 80060ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80060ce:	4829      	ldr	r0, [pc, #164]	; (8006174 <Batt_Protection_when_chargedischarge+0x6b4>)
 80060d0:	f002 fe15 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <Batt_Protection_when_chargedischarge+0x6ac>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0)
 80060da:	e030      	b.n	800613e <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85) {
 80060dc:	4b18      	ldr	r3, [pc, #96]	; (8006140 <Batt_Protection_when_chargedischarge+0x680>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4918      	ldr	r1, [pc, #96]	; (8006144 <Batt_Protection_when_chargedischarge+0x684>)
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fb f876 	bl	80011d4 <__aeabi_fcmpgt>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11b      	bne.n	8006126 <Batt_Protection_when_chargedischarge+0x666>
 80060ee:	4b17      	ldr	r3, [pc, #92]	; (800614c <Batt_Protection_when_chargedischarge+0x68c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4917      	ldr	r1, [pc, #92]	; (8006150 <Batt_Protection_when_chargedischarge+0x690>)
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fb f86d 	bl	80011d4 <__aeabi_fcmpgt>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d112      	bne.n	8006126 <Batt_Protection_when_chargedischarge+0x666>
 8006100:	4b14      	ldr	r3, [pc, #80]	; (8006154 <Batt_Protection_when_chargedischarge+0x694>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	490f      	ldr	r1, [pc, #60]	; (8006144 <Batt_Protection_when_chargedischarge+0x684>)
 8006106:	4618      	mov	r0, r3
 8006108:	f7fb f864 	bl	80011d4 <__aeabi_fcmpgt>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <Batt_Protection_when_chargedischarge+0x666>
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <Batt_Protection_when_chargedischarge+0x698>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	490e      	ldr	r1, [pc, #56]	; (8006150 <Batt_Protection_when_chargedischarge+0x690>)
 8006118:	4618      	mov	r0, r3
 800611a:	f7fb f85b 	bl	80011d4 <__aeabi_fcmpgt>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d100      	bne.n	8006126 <Batt_Protection_when_chargedischarge+0x666>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8006124:	e2ea      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 8006126:	f7fb fa15 	bl	8001554 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <Batt_Protection_when_chargedischarge+0x69c>)
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006130:	2200      	movs	r2, #0
 8006132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006136:	480f      	ldr	r0, [pc, #60]	; (8006174 <Batt_Protection_when_chargedischarge+0x6b4>)
 8006138:	f002 fdc9 	bl	8008cce <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 800613c:	e2de      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
 800613e:	e2dd      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
 8006140:	20000304 	.word	0x20000304
 8006144:	42480000 	.word	0x42480000
 8006148:	41200000 	.word	0x41200000
 800614c:	20000378 	.word	0x20000378
 8006150:	42aa0000 	.word	0x42aa0000
 8006154:	20000284 	.word	0x20000284
 8006158:	20000334 	.word	0x20000334
 800615c:	2000027c 	.word	0x2000027c
 8006160:	20000302 	.word	0x20000302
 8006164:	20000018 	.word	0x20000018
 8006168:	40a00000 	.word	0x40a00000
 800616c:	20000364 	.word	0x20000364
 8006170:	10624dd3 	.word	0x10624dd3
 8006174:	40011000 	.word	0x40011000
		}
	}

	// Under Temperature protection
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8006178:	4b96      	ldr	r3, [pc, #600]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a96      	ldr	r2, [pc, #600]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	4611      	mov	r1, r2
 8006182:	4618      	mov	r0, r3
 8006184:	f7fa fd60 	bl	8000c48 <__aeabi_fsub>
 8006188:	4603      	mov	r3, r0
 800618a:	4994      	ldr	r1, [pc, #592]	; (80063dc <Batt_Protection_when_chargedischarge+0x91c>)
 800618c:	4618      	mov	r0, r3
 800618e:	f7fb f80d 	bl	80011ac <__aeabi_fcmple>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d130      	bne.n	80061fa <Batt_Protection_when_chargedischarge+0x73a>
 8006198:	4b91      	ldr	r3, [pc, #580]	; (80063e0 <Batt_Protection_when_chargedischarge+0x920>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a8e      	ldr	r2, [pc, #568]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 800619e:	6812      	ldr	r2, [r2, #0]
 80061a0:	4611      	mov	r1, r2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa fd50 	bl	8000c48 <__aeabi_fsub>
 80061a8:	4603      	mov	r3, r0
 80061aa:	498c      	ldr	r1, [pc, #560]	; (80063dc <Batt_Protection_when_chargedischarge+0x91c>)
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fa fffd 	bl	80011ac <__aeabi_fcmple>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d120      	bne.n	80061fa <Batt_Protection_when_chargedischarge+0x73a>
 80061b8:	4b8a      	ldr	r3, [pc, #552]	; (80063e4 <Batt_Protection_when_chargedischarge+0x924>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a86      	ldr	r2, [pc, #536]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	4611      	mov	r1, r2
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa fd40 	bl	8000c48 <__aeabi_fsub>
 80061c8:	4603      	mov	r3, r0
 80061ca:	4984      	ldr	r1, [pc, #528]	; (80063dc <Batt_Protection_when_chargedischarge+0x91c>)
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fa ffed 	bl	80011ac <__aeabi_fcmple>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d110      	bne.n	80061fa <Batt_Protection_when_chargedischarge+0x73a>
 80061d8:	4b83      	ldr	r3, [pc, #524]	; (80063e8 <Batt_Protection_when_chargedischarge+0x928>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a7e      	ldr	r2, [pc, #504]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	4611      	mov	r1, r2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fa fd30 	bl	8000c48 <__aeabi_fsub>
 80061e8:	4603      	mov	r3, r0
 80061ea:	497c      	ldr	r1, [pc, #496]	; (80063dc <Batt_Protection_when_chargedischarge+0x91c>)
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7fa ffdd 	bl	80011ac <__aeabi_fcmple>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 8105 	beq.w	8006404 <Batt_Protection_when_chargedischarge+0x944>
 80061fa:	4b7c      	ldr	r3, [pc, #496]	; (80063ec <Batt_Protection_when_chargedischarge+0x92c>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 8100 	bne.w	8006404 <Batt_Protection_when_chargedischarge+0x944>
		fault_code=4;
 8006204:	4b7a      	ldr	r3, [pc, #488]	; (80063f0 <Batt_Protection_when_chargedischarge+0x930>)
 8006206:	2204      	movs	r2, #4
 8006208:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 800620a:	4b73      	ldr	r3, [pc, #460]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4973      	ldr	r1, [pc, #460]	; (80063dc <Batt_Protection_when_chargedischarge+0x91c>)
 8006210:	4618      	mov	r0, r3
 8006212:	f7fa fd1b 	bl	8000c4c <__addsf3>
 8006216:	4603      	mov	r3, r0
 8006218:	461a      	mov	r2, r3
 800621a:	4b6e      	ldr	r3, [pc, #440]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f7fa ffcd 	bl	80011c0 <__aeabi_fcmpge>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d029      	beq.n	8006280 <Batt_Protection_when_chargedischarge+0x7c0>
 800622c:	4b6a      	ldr	r3, [pc, #424]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4970      	ldr	r1, [pc, #448]	; (80063f4 <Batt_Protection_when_chargedischarge+0x934>)
 8006232:	4618      	mov	r0, r3
 8006234:	f7fa fd0a 	bl	8000c4c <__addsf3>
 8006238:	4603      	mov	r3, r0
 800623a:	461a      	mov	r2, r3
 800623c:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4619      	mov	r1, r3
 8006242:	4610      	mov	r0, r2
 8006244:	f7fa ffa8 	bl	8001198 <__aeabi_fcmplt>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d018      	beq.n	8006280 <Batt_Protection_when_chargedischarge+0x7c0>
			if((test_tim2%1000)==0) {
 800624e:	4b6a      	ldr	r3, [pc, #424]	; (80063f8 <Batt_Protection_when_chargedischarge+0x938>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b6a      	ldr	r3, [pc, #424]	; (80063fc <Batt_Protection_when_chargedischarge+0x93c>)
 8006254:	fb83 1302 	smull	r1, r3, r3, r2
 8006258:	1199      	asrs	r1, r3, #6
 800625a:	17d3      	asrs	r3, r2, #31
 800625c:	1acb      	subs	r3, r1, r3
 800625e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	f040 80b2 	bne.w	80063d2 <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 800626e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006272:	4863      	ldr	r0, [pc, #396]	; (8006400 <Batt_Protection_when_chargedischarge+0x940>)
 8006274:	f002 fd43 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006278:	4b5f      	ldr	r3, [pc, #380]	; (80063f8 <Batt_Protection_when_chargedischarge+0x938>)
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 800627e:	e0a8      	b.n	80063d2 <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 8006280:	4b55      	ldr	r3, [pc, #340]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	495b      	ldr	r1, [pc, #364]	; (80063f4 <Batt_Protection_when_chargedischarge+0x934>)
 8006286:	4618      	mov	r0, r3
 8006288:	f7fa fce0 	bl	8000c4c <__addsf3>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	4b50      	ldr	r3, [pc, #320]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f7fa ff92 	bl	80011c0 <__aeabi_fcmpge>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d029      	beq.n	80062f6 <Batt_Protection_when_chargedischarge+0x836>
 80062a2:	4b4d      	ldr	r3, [pc, #308]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa fcce 	bl	8000c4c <__addsf3>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b47      	ldr	r3, [pc, #284]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fa ff6c 	bl	8001198 <__aeabi_fcmplt>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d017      	beq.n	80062f6 <Batt_Protection_when_chargedischarge+0x836>
			if((test_tim2%500)==0) {
 80062c6:	4b4c      	ldr	r3, [pc, #304]	; (80063f8 <Batt_Protection_when_chargedischarge+0x938>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4b4c      	ldr	r3, [pc, #304]	; (80063fc <Batt_Protection_when_chargedischarge+0x93c>)
 80062cc:	fb83 1302 	smull	r1, r3, r3, r2
 80062d0:	1159      	asrs	r1, r3, #5
 80062d2:	17d3      	asrs	r3, r2, #31
 80062d4:	1acb      	subs	r3, r1, r3
 80062d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d176      	bne.n	80063d2 <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 80062e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062e8:	4845      	ldr	r0, [pc, #276]	; (8006400 <Batt_Protection_when_chargedischarge+0x940>)
 80062ea:	f002 fd08 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 80062ee:	4b42      	ldr	r3, [pc, #264]	; (80063f8 <Batt_Protection_when_chargedischarge+0x938>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 80062f4:	e06d      	b.n	80063d2 <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 80062f6:	4b38      	ldr	r3, [pc, #224]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fa fca4 	bl	8000c4c <__addsf3>
 8006304:	4603      	mov	r3, r0
 8006306:	461a      	mov	r2, r3
 8006308:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	4610      	mov	r0, r2
 8006310:	f7fa ff60 	bl	80011d4 <__aeabi_fcmpgt>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d022      	beq.n	8006360 <Batt_Protection_when_chargedischarge+0x8a0>
 800631a:	4b2e      	ldr	r3, [pc, #184]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2e      	ldr	r2, [pc, #184]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f7fa ff4b 	bl	80011c0 <__aeabi_fcmpge>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d017      	beq.n	8006360 <Batt_Protection_when_chargedischarge+0x8a0>
			if((test_tim2%500)==0) {
 8006330:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <Batt_Protection_when_chargedischarge+0x938>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	4b31      	ldr	r3, [pc, #196]	; (80063fc <Batt_Protection_when_chargedischarge+0x93c>)
 8006336:	fb83 1302 	smull	r1, r3, r3, r2
 800633a:	1159      	asrs	r1, r3, #5
 800633c:	17d3      	asrs	r3, r2, #31
 800633e:	1acb      	subs	r3, r1, r3
 8006340:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d141      	bne.n	80063d2 <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 800634e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006352:	482b      	ldr	r0, [pc, #172]	; (8006400 <Batt_Protection_when_chargedischarge+0x940>)
 8006354:	f002 fcd3 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006358:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <Batt_Protection_when_chargedischarge+0x938>)
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 800635e:	e038      	b.n	80063d2 <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 8006360:	4b1c      	ldr	r3, [pc, #112]	; (80063d4 <Batt_Protection_when_chargedischarge+0x914>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1c      	ldr	r2, [pc, #112]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f7fa ff14 	bl	8001198 <__aeabi_fcmplt>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d121      	bne.n	80063ba <Batt_Protection_when_chargedischarge+0x8fa>
 8006376:	4b1a      	ldr	r3, [pc, #104]	; (80063e0 <Batt_Protection_when_chargedischarge+0x920>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	4611      	mov	r1, r2
 8006380:	4618      	mov	r0, r3
 8006382:	f7fa ff09 	bl	8001198 <__aeabi_fcmplt>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d116      	bne.n	80063ba <Batt_Protection_when_chargedischarge+0x8fa>
 800638c:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <Batt_Protection_when_chargedischarge+0x924>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a11      	ldr	r2, [pc, #68]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	4611      	mov	r1, r2
 8006396:	4618      	mov	r0, r3
 8006398:	f7fa fefe 	bl	8001198 <__aeabi_fcmplt>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <Batt_Protection_when_chargedischarge+0x8fa>
 80063a2:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <Batt_Protection_when_chargedischarge+0x928>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0c      	ldr	r2, [pc, #48]	; (80063d8 <Batt_Protection_when_chargedischarge+0x918>)
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	4611      	mov	r1, r2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fa fef3 	bl	8001198 <__aeabi_fcmplt>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d100      	bne.n	80063ba <Batt_Protection_when_chargedischarge+0x8fa>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80063b8:	e1a0      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 80063ba:	f7fb f8cb 	bl	8001554 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <Batt_Protection_when_chargedischarge+0x92c>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80063c4:	2200      	movs	r2, #0
 80063c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80063ca:	480d      	ldr	r0, [pc, #52]	; (8006400 <Batt_Protection_when_chargedischarge+0x940>)
 80063cc:	f002 fc7f 	bl	8008cce <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80063d0:	e194      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
 80063d2:	e193      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
 80063d4:	20000304 	.word	0x20000304
 80063d8:	2000001c 	.word	0x2000001c
 80063dc:	41200000 	.word	0x41200000
 80063e0:	20000378 	.word	0x20000378
 80063e4:	20000284 	.word	0x20000284
 80063e8:	20000334 	.word	0x20000334
 80063ec:	200002fc 	.word	0x200002fc
 80063f0:	20000302 	.word	0x20000302
 80063f4:	40a00000 	.word	0x40a00000
 80063f8:	20000364 	.word	0x20000364
 80063fc:	10624dd3 	.word	0x10624dd3
 8006400:	40011000 	.word	0x40011000
		}
	}

	// SOC OverDischarge protection
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8006404:	4b83      	ldr	r3, [pc, #524]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a83      	ldr	r2, [pc, #524]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 800640a:	6812      	ldr	r2, [r2, #0]
 800640c:	4611      	mov	r1, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f7fa fc1a 	bl	8000c48 <__aeabi_fsub>
 8006414:	4603      	mov	r3, r0
 8006416:	4981      	ldr	r1, [pc, #516]	; (800661c <Batt_Protection_when_chargedischarge+0xb5c>)
 8006418:	4618      	mov	r0, r3
 800641a:	f7fa fec7 	bl	80011ac <__aeabi_fcmple>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80d1 	beq.w	80065c8 <Batt_Protection_when_chargedischarge+0xb08>
 8006426:	4b7e      	ldr	r3, [pc, #504]	; (8006620 <Batt_Protection_when_chargedischarge+0xb60>)
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f040 80cc 	bne.w	80065c8 <Batt_Protection_when_chargedischarge+0xb08>
 8006430:	4b7c      	ldr	r3, [pc, #496]	; (8006624 <Batt_Protection_when_chargedischarge+0xb64>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	2b02      	cmp	r3, #2
 8006436:	f040 80c7 	bne.w	80065c8 <Batt_Protection_when_chargedischarge+0xb08>
		fault_code=5;
 800643a:	4b7b      	ldr	r3, [pc, #492]	; (8006628 <Batt_Protection_when_chargedischarge+0xb68>)
 800643c:	2205      	movs	r2, #5
 800643e:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 8006440:	4b75      	ldr	r3, [pc, #468]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4975      	ldr	r1, [pc, #468]	; (800661c <Batt_Protection_when_chargedischarge+0xb5c>)
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa fc00 	bl	8000c4c <__addsf3>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	4b70      	ldr	r3, [pc, #448]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7fa feb2 	bl	80011c0 <__aeabi_fcmpge>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d029      	beq.n	80064b6 <Batt_Protection_when_chargedischarge+0x9f6>
 8006462:	4b6d      	ldr	r3, [pc, #436]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4971      	ldr	r1, [pc, #452]	; (800662c <Batt_Protection_when_chargedischarge+0xb6c>)
 8006468:	4618      	mov	r0, r3
 800646a:	f7fa fbef 	bl	8000c4c <__addsf3>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	4b68      	ldr	r3, [pc, #416]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7fa fe8d 	bl	8001198 <__aeabi_fcmplt>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d018      	beq.n	80064b6 <Batt_Protection_when_chargedischarge+0x9f6>
			if((test_tim2%1000)==0) {
 8006484:	4b6a      	ldr	r3, [pc, #424]	; (8006630 <Batt_Protection_when_chargedischarge+0xb70>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	4b6a      	ldr	r3, [pc, #424]	; (8006634 <Batt_Protection_when_chargedischarge+0xb74>)
 800648a:	fb83 1302 	smull	r1, r3, r3, r2
 800648e:	1199      	asrs	r1, r3, #6
 8006490:	17d3      	asrs	r3, r2, #31
 8006492:	1acb      	subs	r3, r1, r3
 8006494:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006498:	fb01 f303 	mul.w	r3, r1, r3
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 8091 	bne.w	80065c6 <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 80064a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064a8:	4863      	ldr	r0, [pc, #396]	; (8006638 <Batt_Protection_when_chargedischarge+0xb78>)
 80064aa:	f002 fc28 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 80064ae:	4b60      	ldr	r3, [pc, #384]	; (8006630 <Batt_Protection_when_chargedischarge+0xb70>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 80064b4:	e087      	b.n	80065c6 <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2) {
 80064b6:	4b58      	ldr	r3, [pc, #352]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	495c      	ldr	r1, [pc, #368]	; (800662c <Batt_Protection_when_chargedischarge+0xb6c>)
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fa fbc5 	bl	8000c4c <__addsf3>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b53      	ldr	r3, [pc, #332]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4619      	mov	r1, r3
 80064cc:	4610      	mov	r0, r2
 80064ce:	f7fa fe77 	bl	80011c0 <__aeabi_fcmpge>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d029      	beq.n	800652c <Batt_Protection_when_chargedischarge+0xa6c>
 80064d8:	4b4f      	ldr	r3, [pc, #316]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fa fbb3 	bl	8000c4c <__addsf3>
 80064e6:	4603      	mov	r3, r0
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b4a      	ldr	r3, [pc, #296]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	4610      	mov	r0, r2
 80064f2:	f7fa fe51 	bl	8001198 <__aeabi_fcmplt>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <Batt_Protection_when_chargedischarge+0xa6c>
			if((test_tim2%500)==0) {
 80064fc:	4b4c      	ldr	r3, [pc, #304]	; (8006630 <Batt_Protection_when_chargedischarge+0xb70>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b4c      	ldr	r3, [pc, #304]	; (8006634 <Batt_Protection_when_chargedischarge+0xb74>)
 8006502:	fb83 1302 	smull	r1, r3, r3, r2
 8006506:	1159      	asrs	r1, r3, #5
 8006508:	17d3      	asrs	r3, r2, #31
 800650a:	1acb      	subs	r3, r1, r3
 800650c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d155      	bne.n	80065c6 <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 800651a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800651e:	4846      	ldr	r0, [pc, #280]	; (8006638 <Batt_Protection_when_chargedischarge+0xb78>)
 8006520:	f002 fbed 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006524:	4b42      	ldr	r3, [pc, #264]	; (8006630 <Batt_Protection_when_chargedischarge+0xb70>)
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 800652a:	e04c      	b.n	80065c6 <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set) {
 800652c:	4b3a      	ldr	r3, [pc, #232]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006534:	4618      	mov	r0, r3
 8006536:	f7fa fb89 	bl	8000c4c <__addsf3>
 800653a:	4603      	mov	r3, r0
 800653c:	461a      	mov	r2, r3
 800653e:	4b35      	ldr	r3, [pc, #212]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f7fa fe45 	bl	80011d4 <__aeabi_fcmpgt>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d022      	beq.n	8006596 <Batt_Protection_when_chargedischarge+0xad6>
 8006550:	4b30      	ldr	r3, [pc, #192]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a30      	ldr	r2, [pc, #192]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f7fa fe30 	bl	80011c0 <__aeabi_fcmpge>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d017      	beq.n	8006596 <Batt_Protection_when_chargedischarge+0xad6>
			if((test_tim2%500)==0){
 8006566:	4b32      	ldr	r3, [pc, #200]	; (8006630 <Batt_Protection_when_chargedischarge+0xb70>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b32      	ldr	r3, [pc, #200]	; (8006634 <Batt_Protection_when_chargedischarge+0xb74>)
 800656c:	fb83 1302 	smull	r1, r3, r3, r2
 8006570:	1159      	asrs	r1, r3, #5
 8006572:	17d3      	asrs	r3, r2, #31
 8006574:	1acb      	subs	r3, r1, r3
 8006576:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d120      	bne.n	80065c6 <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 8006584:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006588:	482b      	ldr	r0, [pc, #172]	; (8006638 <Batt_Protection_when_chargedischarge+0xb78>)
 800658a:	f002 fbb8 	bl	8008cfe <HAL_GPIO_TogglePin>
				test_tim2=0;
 800658e:	4b28      	ldr	r3, [pc, #160]	; (8006630 <Batt_Protection_when_chargedischarge+0xb70>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006594:	e017      	b.n	80065c6 <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set) {
 8006596:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <Batt_Protection_when_chargedischarge+0xb54>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <Batt_Protection_when_chargedischarge+0xb58>)
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	4611      	mov	r1, r2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fa fdf9 	bl	8001198 <__aeabi_fcmplt>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d100      	bne.n	80065ae <Batt_Protection_when_chargedischarge+0xaee>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 80065ac:	e0a6      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 80065ae:	f7fa ffd1 	bl	8001554 <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 80065b2:	4b1b      	ldr	r3, [pc, #108]	; (8006620 <Batt_Protection_when_chargedischarge+0xb60>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80065b8:	2200      	movs	r2, #0
 80065ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065be:	481e      	ldr	r0, [pc, #120]	; (8006638 <Batt_Protection_when_chargedischarge+0xb78>)
 80065c0:	f002 fb85 	bl	8008cce <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 80065c4:	e09a      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
 80065c6:	e099      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
		}
	}

	// Imbalance Protection
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 80065c8:	4b1c      	ldr	r3, [pc, #112]	; (800663c <Batt_Protection_when_chargedischarge+0xb7c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <Batt_Protection_when_chargedischarge+0xb80>)
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fa fb38 	bl	8000c48 <__aeabi_fsub>
 80065d8:	4603      	mov	r3, r0
 80065da:	4910      	ldr	r1, [pc, #64]	; (800661c <Batt_Protection_when_chargedischarge+0xb5c>)
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fa fddb 	bl	8001198 <__aeabi_fcmplt>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d02f      	beq.n	8006648 <Batt_Protection_when_chargedischarge+0xb88>
	{
		fault_code=6;
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <Batt_Protection_when_chargedischarge+0xb68>)
 80065ea:	2206      	movs	r2, #6
 80065ec:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance>Persen_Imbalance_Set)
 80065ee:	4b14      	ldr	r3, [pc, #80]	; (8006640 <Batt_Protection_when_chargedischarge+0xb80>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a12      	ldr	r2, [pc, #72]	; (800663c <Batt_Protection_when_chargedischarge+0xb7c>)
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fa fdeb 	bl	80011d4 <__aeabi_fcmpgt>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d100      	bne.n	8006606 <Batt_Protection_when_chargedischarge+0xb46>
		if(T_trip_cycle < 0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle < 0)
			T_I_Over_trip_cycle=0;
	}
}
 8006604:	e07a      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
			flag_trip_unbalance=ON;
 8006606:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <Batt_Protection_when_chargedischarge+0xb84>)
 8006608:	2201      	movs	r2, #1
 800660a:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 800660c:	f7fa ffa2 	bl	8001554 <Batt_Open_Mode>
}
 8006610:	e074      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
 8006612:	bf00      	nop
 8006614:	20000370 	.word	0x20000370
 8006618:	20000020 	.word	0x20000020
 800661c:	41200000 	.word	0x41200000
 8006620:	20000328 	.word	0x20000328
 8006624:	2000067c 	.word	0x2000067c
 8006628:	20000302 	.word	0x20000302
 800662c:	40a00000 	.word	0x40a00000
 8006630:	20000364 	.word	0x20000364
 8006634:	10624dd3 	.word	0x10624dd3
 8006638:	40011000 	.word	0x40011000
 800663c:	20000030 	.word	0x20000030
 8006640:	20000330 	.word	0x20000330
 8006644:	2000025c 	.word	0x2000025c
		if(fault_code!=0)
 8006648:	4b2f      	ldr	r3, [pc, #188]	; (8006708 <Batt_Protection_when_chargedischarge+0xc48>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <Batt_Protection_when_chargedischarge+0xb98>
			last_fault_code=fault_code;
 8006650:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <Batt_Protection_when_chargedischarge+0xc48>)
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	4b2d      	ldr	r3, [pc, #180]	; (800670c <Batt_Protection_when_chargedischarge+0xc4c>)
 8006656:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8006658:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <Batt_Protection_when_chargedischarge+0xc48>)
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800665e:	2200      	movs	r2, #0
 8006660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006664:	482a      	ldr	r0, [pc, #168]	; (8006710 <Batt_Protection_when_chargedischarge+0xc50>)
 8006666:	f002 fb32 	bl	8008cce <HAL_GPIO_WritePin>
		T_Under_trip=0;
 800666a:	4b2a      	ldr	r3, [pc, #168]	; (8006714 <Batt_Protection_when_chargedischarge+0xc54>)
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8006672:	4b29      	ldr	r3, [pc, #164]	; (8006718 <Batt_Protection_when_chargedischarge+0xc58>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7f9 ff42 	bl	8000500 <__aeabi_f2d>
 800667c:	a320      	add	r3, pc, #128	; (adr r3, 8006700 <Batt_Protection_when_chargedischarge+0xc40>)
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f7f9 fddd 	bl	8000240 <__aeabi_dsub>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	4610      	mov	r0, r2
 800668c:	4619      	mov	r1, r3
 800668e:	f7fa fa87 	bl	8000ba0 <__aeabi_d2f>
 8006692:	4603      	mov	r3, r0
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <Batt_Protection_when_chargedischarge+0xc58>)
 8006696:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8006698:	4b20      	ldr	r3, [pc, #128]	; (800671c <Batt_Protection_when_chargedischarge+0xc5c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f7f9 ff2f 	bl	8000500 <__aeabi_f2d>
 80066a2:	a317      	add	r3, pc, #92	; (adr r3, 8006700 <Batt_Protection_when_chargedischarge+0xc40>)
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f7f9 fdca 	bl	8000240 <__aeabi_dsub>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4610      	mov	r0, r2
 80066b2:	4619      	mov	r1, r3
 80066b4:	f7fa fa74 	bl	8000ba0 <__aeabi_d2f>
 80066b8:	4603      	mov	r3, r0
 80066ba:	4a18      	ldr	r2, [pc, #96]	; (800671c <Batt_Protection_when_chargedischarge+0xc5c>)
 80066bc:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle < 0)
 80066be:	4b16      	ldr	r3, [pc, #88]	; (8006718 <Batt_Protection_when_chargedischarge+0xc58>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f04f 0100 	mov.w	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fa fd66 	bl	8001198 <__aeabi_fcmplt>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <Batt_Protection_when_chargedischarge+0xc1a>
			T_trip_cycle=0;
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <Batt_Protection_when_chargedischarge+0xc58>)
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle < 0)
 80066da:	4b10      	ldr	r3, [pc, #64]	; (800671c <Batt_Protection_when_chargedischarge+0xc5c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f04f 0100 	mov.w	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fa fd58 	bl	8001198 <__aeabi_fcmplt>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d100      	bne.n	80066f0 <Batt_Protection_when_chargedischarge+0xc30>
}
 80066ee:	e005      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
			T_I_Over_trip_cycle=0;
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <Batt_Protection_when_chargedischarge+0xc5c>)
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]
}
 80066f8:	e000      	b.n	80066fc <Batt_Protection_when_chargedischarge+0xc3c>
		if(flag_trip_overcurrentdischarge==OFF) {
 80066fa:	bf00      	nop
}
 80066fc:	bf00      	nop
 80066fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006700:	d2f1a9fc 	.word	0xd2f1a9fc
 8006704:	3f50624d 	.word	0x3f50624d
 8006708:	20000302 	.word	0x20000302
 800670c:	2000036d 	.word	0x2000036d
 8006710:	40011000 	.word	0x40011000
 8006714:	20000810 	.word	0x20000810
 8006718:	2000082c 	.word	0x2000082c
 800671c:	2000033c 	.word	0x2000033c

08006720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
	return 1;
 8006724:	2301      	movs	r3, #1
}
 8006726:	4618      	mov	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <_kill>:

int _kill(int pid, int sig)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006738:	f004 fdae 	bl	800b298 <__errno>
 800673c:	4603      	mov	r3, r0
 800673e:	2216      	movs	r2, #22
 8006740:	601a      	str	r2, [r3, #0]
	return -1;
 8006742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <_exit>:

void _exit (int status)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006756:	f04f 31ff 	mov.w	r1, #4294967295
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7ff ffe7 	bl	800672e <_kill>
	while (1) {}		/* Make sure we hang here */
 8006760:	e7fe      	b.n	8006760 <_exit+0x12>

08006762 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b086      	sub	sp, #24
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e00a      	b.n	800678a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006774:	f3af 8000 	nop.w
 8006778:	4601      	mov	r1, r0
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	60ba      	str	r2, [r7, #8]
 8006780:	b2ca      	uxtb	r2, r1
 8006782:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	3301      	adds	r3, #1
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	429a      	cmp	r2, r3
 8006790:	dbf0      	blt.n	8006774 <_read+0x12>
	}

return len;
 8006792:	687b      	ldr	r3, [r7, #4]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067a8:	2300      	movs	r3, #0
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	e009      	b.n	80067c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	60ba      	str	r2, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	3301      	adds	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	dbf1      	blt.n	80067ae <_write+0x12>
	}
	return len;
 80067ca:	687b      	ldr	r3, [r7, #4]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <_close>:

int _close(int file)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
	return -1;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr

080067ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067fa:	605a      	str	r2, [r3, #4]
	return 0;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr

08006808 <_isatty>:

int _isatty(int file)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
	return 1;
 8006810:	2301      	movs	r3, #1
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr

0800681c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	return 0;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800683c:	4a14      	ldr	r2, [pc, #80]	; (8006890 <_sbrk+0x5c>)
 800683e:	4b15      	ldr	r3, [pc, #84]	; (8006894 <_sbrk+0x60>)
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <_sbrk+0x64>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <_sbrk+0x64>)
 8006852:	4a12      	ldr	r2, [pc, #72]	; (800689c <_sbrk+0x68>)
 8006854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <_sbrk+0x64>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	d207      	bcs.n	8006874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006864:	f004 fd18 	bl	800b298 <__errno>
 8006868:	4603      	mov	r3, r0
 800686a:	220c      	movs	r2, #12
 800686c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800686e:	f04f 33ff 	mov.w	r3, #4294967295
 8006872:	e009      	b.n	8006888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006874:	4b08      	ldr	r3, [pc, #32]	; (8006898 <_sbrk+0x64>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <_sbrk+0x64>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4413      	add	r3, r2
 8006882:	4a05      	ldr	r2, [pc, #20]	; (8006898 <_sbrk+0x64>)
 8006884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006886:	68fb      	ldr	r3, [r7, #12]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20018000 	.word	0x20018000
 8006894:	00000400 	.word	0x00000400
 8006898:	20000240 	.word	0x20000240
 800689c:	200008f8 	.word	0x200008f8

080068a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068b2:	f107 0308 	add.w	r3, r7, #8
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	605a      	str	r2, [r3, #4]
 80068bc:	609a      	str	r2, [r3, #8]
 80068be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068c0:	463b      	mov	r3, r7
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80068c8:	4b1e      	ldr	r3, [pc, #120]	; (8006944 <MX_TIM2_Init+0x98>)
 80068ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80068ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 80068d0:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <MX_TIM2_Init+0x98>)
 80068d2:	f240 227f 	movw	r2, #639	; 0x27f
 80068d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068d8:	4b1a      	ldr	r3, [pc, #104]	; (8006944 <MX_TIM2_Init+0x98>)
 80068da:	2200      	movs	r2, #0
 80068dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80068de:	4b19      	ldr	r3, [pc, #100]	; (8006944 <MX_TIM2_Init+0x98>)
 80068e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80068e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068e6:	4b17      	ldr	r3, [pc, #92]	; (8006944 <MX_TIM2_Init+0x98>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068ec:	4b15      	ldr	r3, [pc, #84]	; (8006944 <MX_TIM2_Init+0x98>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80068f2:	4814      	ldr	r0, [pc, #80]	; (8006944 <MX_TIM2_Init+0x98>)
 80068f4:	f004 f858 	bl	800a9a8 <HAL_TIM_Base_Init>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80068fe:	f7fd f979 	bl	8003bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006906:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006908:	f107 0308 	add.w	r3, r7, #8
 800690c:	4619      	mov	r1, r3
 800690e:	480d      	ldr	r0, [pc, #52]	; (8006944 <MX_TIM2_Init+0x98>)
 8006910:	f004 fa10 	bl	800ad34 <HAL_TIM_ConfigClockSource>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800691a:	f7fd f96b 	bl	8003bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800691e:	2300      	movs	r3, #0
 8006920:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006926:	463b      	mov	r3, r7
 8006928:	4619      	mov	r1, r3
 800692a:	4806      	ldr	r0, [pc, #24]	; (8006944 <MX_TIM2_Init+0x98>)
 800692c:	f004 fc28 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006936:	f7fd f95d 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800693a:	bf00      	nop
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	20000898 	.word	0x20000898

08006948 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800694e:	f107 0308 	add.w	r3, r7, #8
 8006952:	2200      	movs	r2, #0
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	605a      	str	r2, [r3, #4]
 8006958:	609a      	str	r2, [r3, #8]
 800695a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800695c:	463b      	mov	r3, r7
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006964:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <MX_TIM3_Init+0x94>)
 8006966:	4a1e      	ldr	r2, [pc, #120]	; (80069e0 <MX_TIM3_Init+0x98>)
 8006968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 800696a:	4b1c      	ldr	r3, [pc, #112]	; (80069dc <MX_TIM3_Init+0x94>)
 800696c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8006970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006972:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <MX_TIM3_Init+0x94>)
 8006974:	2200      	movs	r2, #0
 8006976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 333;
 8006978:	4b18      	ldr	r3, [pc, #96]	; (80069dc <MX_TIM3_Init+0x94>)
 800697a:	f240 124d 	movw	r2, #333	; 0x14d
 800697e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <MX_TIM3_Init+0x94>)
 8006982:	2200      	movs	r2, #0
 8006984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006986:	4b15      	ldr	r3, [pc, #84]	; (80069dc <MX_TIM3_Init+0x94>)
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800698c:	4813      	ldr	r0, [pc, #76]	; (80069dc <MX_TIM3_Init+0x94>)
 800698e:	f004 f80b 	bl	800a9a8 <HAL_TIM_Base_Init>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006998:	f7fd f92c 	bl	8003bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800699c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80069a2:	f107 0308 	add.w	r3, r7, #8
 80069a6:	4619      	mov	r1, r3
 80069a8:	480c      	ldr	r0, [pc, #48]	; (80069dc <MX_TIM3_Init+0x94>)
 80069aa:	f004 f9c3 	bl	800ad34 <HAL_TIM_ConfigClockSource>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80069b4:	f7fd f91e 	bl	8003bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069b8:	2300      	movs	r3, #0
 80069ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069bc:	2300      	movs	r3, #0
 80069be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80069c0:	463b      	mov	r3, r7
 80069c2:	4619      	mov	r1, r3
 80069c4:	4805      	ldr	r0, [pc, #20]	; (80069dc <MX_TIM3_Init+0x94>)
 80069c6:	f004 fbdb 	bl	800b180 <HAL_TIMEx_MasterConfigSynchronization>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80069d0:	f7fd f910 	bl	8003bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80069d4:	bf00      	nop
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000850 	.word	0x20000850
 80069e0:	40000400 	.word	0x40000400

080069e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f4:	d114      	bne.n	8006a20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069f6:	4b19      	ldr	r3, [pc, #100]	; (8006a5c <HAL_TIM_Base_MspInit+0x78>)
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_TIM_Base_MspInit+0x78>)
 80069fc:	f043 0301 	orr.w	r3, r3, #1
 8006a00:	61d3      	str	r3, [r2, #28]
 8006a02:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <HAL_TIM_Base_MspInit+0x78>)
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2100      	movs	r1, #0
 8006a12:	201c      	movs	r0, #28
 8006a14:	f001 fc39 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006a18:	201c      	movs	r0, #28
 8006a1a:	f001 fc52 	bl	80082c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006a1e:	e018      	b.n	8006a52 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a0e      	ldr	r2, [pc, #56]	; (8006a60 <HAL_TIM_Base_MspInit+0x7c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d113      	bne.n	8006a52 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <HAL_TIM_Base_MspInit+0x78>)
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	4a0b      	ldr	r2, [pc, #44]	; (8006a5c <HAL_TIM_Base_MspInit+0x78>)
 8006a30:	f043 0302 	orr.w	r3, r3, #2
 8006a34:	61d3      	str	r3, [r2, #28]
 8006a36:	4b09      	ldr	r3, [pc, #36]	; (8006a5c <HAL_TIM_Base_MspInit+0x78>)
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	60bb      	str	r3, [r7, #8]
 8006a40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006a42:	2200      	movs	r2, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	201d      	movs	r0, #29
 8006a48:	f001 fc1f 	bl	800828a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a4c:	201d      	movs	r0, #29
 8006a4e:	f001 fc38 	bl	80082c2 <HAL_NVIC_EnableIRQ>
}
 8006a52:	bf00      	nop
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40000400 	.word	0x40000400

08006a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a64:	480c      	ldr	r0, [pc, #48]	; (8006a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006a66:	490d      	ldr	r1, [pc, #52]	; (8006a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006a68:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a6c:	e002      	b.n	8006a74 <LoopCopyDataInit>

08006a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a72:	3304      	adds	r3, #4

08006a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a78:	d3f9      	bcc.n	8006a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a7a:	4a0a      	ldr	r2, [pc, #40]	; (8006aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006a7c:	4c0a      	ldr	r4, [pc, #40]	; (8006aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a80:	e001      	b.n	8006a86 <LoopFillZerobss>

08006a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a84:	3204      	adds	r2, #4

08006a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a88:	d3fb      	bcc.n	8006a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006a8a:	f7ff ff09 	bl	80068a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a8e:	f004 fc09 	bl	800b2a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a92:	f7fc fe45 	bl	8003720 <main>
  bx lr
 8006a96:	4770      	bx	lr
  ldr r0, =_sdata
 8006a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a9c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8006aa0:	080108dc 	.word	0x080108dc
  ldr r2, =_sbss
 8006aa4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006aa8:	200008f4 	.word	0x200008f4

08006aac <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006aac:	e7fe      	b.n	8006aac <ADC1_2_IRQHandler>
	...

08006ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <HAL_Init+0x28>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a07      	ldr	r2, [pc, #28]	; (8006ad8 <HAL_Init+0x28>)
 8006aba:	f043 0310 	orr.w	r3, r3, #16
 8006abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ac0:	2003      	movs	r0, #3
 8006ac2:	f001 fbd7 	bl	8008274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ac6:	200f      	movs	r0, #15
 8006ac8:	f000 f808 	bl	8006adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006acc:	f7fd f898 	bl	8003c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40022000 	.word	0x40022000

08006adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ae4:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <HAL_InitTick+0x54>)
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	4b12      	ldr	r3, [pc, #72]	; (8006b34 <HAL_InitTick+0x58>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fbef 	bl	80082de <HAL_SYSTICK_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e00e      	b.n	8006b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b0f      	cmp	r3, #15
 8006b0e:	d80a      	bhi.n	8006b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b10:	2200      	movs	r2, #0
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	f04f 30ff 	mov.w	r0, #4294967295
 8006b18:	f001 fbb7 	bl	800828a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b1c:	4a06      	ldr	r2, [pc, #24]	; (8006b38 <HAL_InitTick+0x5c>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	2000003c 	.word	0x2000003c
 8006b34:	20000044 	.word	0x20000044
 8006b38:	20000040 	.word	0x20000040

08006b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <HAL_IncTick+0x1c>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <HAL_IncTick+0x20>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	4a03      	ldr	r2, [pc, #12]	; (8006b5c <HAL_IncTick+0x20>)
 8006b4e:	6013      	str	r3, [r2, #0]
}
 8006b50:	bf00      	nop
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr
 8006b58:	20000044 	.word	0x20000044
 8006b5c:	200008e0 	.word	0x200008e0

08006b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  return uwTick;
 8006b64:	4b02      	ldr	r3, [pc, #8]	; (8006b70 <HAL_GetTick+0x10>)
 8006b66:	681b      	ldr	r3, [r3, #0]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr
 8006b70:	200008e0 	.word	0x200008e0

08006b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b7c:	f7ff fff0 	bl	8006b60 <HAL_GetTick>
 8006b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d005      	beq.n	8006b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <HAL_Delay+0x44>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b9a:	bf00      	nop
 8006b9c:	f7ff ffe0 	bl	8006b60 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d8f7      	bhi.n	8006b9c <HAL_Delay+0x28>
  {
  }
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000044 	.word	0x20000044

08006bbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0ce      	b.n	8006d7c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d109      	bne.n	8006c00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fb fe7a 	bl	80028f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fb11 	bl	8007228 <ADC_ConversionStop_Disable>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f040 80a9 	bne.w	8006d6a <HAL_ADC_Init+0x1ae>
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 80a5 	bne.w	8006d6a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c28:	f023 0302 	bic.w	r3, r3, #2
 8006c2c:	f043 0202 	orr.w	r2, r3, #2
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4951      	ldr	r1, [pc, #324]	; (8006d84 <HAL_ADC_Init+0x1c8>)
 8006c3e:	428b      	cmp	r3, r1
 8006c40:	d10a      	bne.n	8006c58 <HAL_ADC_Init+0x9c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006c4a:	d002      	beq.n	8006c52 <HAL_ADC_Init+0x96>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	e004      	b.n	8006c5c <HAL_ADC_Init+0xa0>
 8006c52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c56:	e001      	b.n	8006c5c <HAL_ADC_Init+0xa0>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006c5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7b1b      	ldrb	r3, [r3, #12]
 8006c62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006c64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c74:	d003      	beq.n	8006c7e <HAL_ADC_Init+0xc2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d102      	bne.n	8006c84 <HAL_ADC_Init+0xc8>
 8006c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c82:	e000      	b.n	8006c86 <HAL_ADC_Init+0xca>
 8006c84:	2300      	movs	r3, #0
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7d1b      	ldrb	r3, [r3, #20]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d119      	bne.n	8006cc8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7b1b      	ldrb	r3, [r3, #12]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	035a      	lsls	r2, r3, #13
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	e00b      	b.n	8006cc8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	f043 0220 	orr.w	r2, r3, #32
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	f043 0201 	orr.w	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	4b29      	ldr	r3, [pc, #164]	; (8006d88 <HAL_ADC_Init+0x1cc>)
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	430b      	orrs	r3, r1
 8006cee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf8:	d003      	beq.n	8006d02 <HAL_ADC_Init+0x146>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d104      	bne.n	8006d0c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	051b      	lsls	r3, r3, #20
 8006d0a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d12:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <HAL_ADC_Init+0x1d0>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d10b      	bne.n	8006d48 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	f043 0201 	orr.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d46:	e018      	b.n	8006d7a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4c:	f023 0312 	bic.w	r3, r3, #18
 8006d50:	f043 0210 	orr.w	r2, r3, #16
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	f043 0201 	orr.w	r2, r3, #1
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006d68:	e007      	b.n	8006d7a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	f043 0210 	orr.w	r2, r3, #16
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40013c00 	.word	0x40013c00
 8006d88:	ffe1f7fd 	.word	0xffe1f7fd
 8006d8c:	ff1f0efe 	.word	0xff1f0efe

08006d90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a64      	ldr	r2, [pc, #400]	; (8006f38 <HAL_ADC_Start_DMA+0x1a8>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_ADC_Start_DMA+0x24>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a63      	ldr	r2, [pc, #396]	; (8006f3c <HAL_ADC_Start_DMA+0x1ac>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d106      	bne.n	8006dc2 <HAL_ADC_Start_DMA+0x32>
 8006db4:	4b60      	ldr	r3, [pc, #384]	; (8006f38 <HAL_ADC_Start_DMA+0x1a8>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f040 80b3 	bne.w	8006f28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_ADC_Start_DMA+0x40>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e0ae      	b.n	8006f2e <HAL_ADC_Start_DMA+0x19e>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 f9cb 	bl	8007174 <ADC_Enable>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006de2:	7dfb      	ldrb	r3, [r7, #23]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f040 809a 	bne.w	8006f1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a4e      	ldr	r2, [pc, #312]	; (8006f3c <HAL_ADC_Start_DMA+0x1ac>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d105      	bne.n	8006e14 <HAL_ADC_Start_DMA+0x84>
 8006e08:	4b4b      	ldr	r3, [pc, #300]	; (8006f38 <HAL_ADC_Start_DMA+0x1a8>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d115      	bne.n	8006e40 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d026      	beq.n	8006e7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e3e:	e01d      	b.n	8006e7c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a39      	ldr	r2, [pc, #228]	; (8006f38 <HAL_ADC_Start_DMA+0x1a8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_ADC_Start_DMA+0xd0>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a38      	ldr	r2, [pc, #224]	; (8006f3c <HAL_ADC_Start_DMA+0x1ac>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10d      	bne.n	8006e7c <HAL_ADC_Start_DMA+0xec>
 8006e60:	4b35      	ldr	r3, [pc, #212]	; (8006f38 <HAL_ADC_Start_DMA+0x1a8>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d006      	beq.n	8006e96 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	f023 0206 	bic.w	r2, r3, #6
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e94:	e002      	b.n	8006e9c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <HAL_ADC_Start_DMA+0x1b0>)
 8006eaa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	4a24      	ldr	r2, [pc, #144]	; (8006f44 <HAL_ADC_Start_DMA+0x1b4>)
 8006eb2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	4a23      	ldr	r2, [pc, #140]	; (8006f48 <HAL_ADC_Start_DMA+0x1b8>)
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0202 	mvn.w	r2, #2
 8006ec4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ed4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6a18      	ldr	r0, [r3, #32]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	334c      	adds	r3, #76	; 0x4c
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f001 fa7d 	bl	80083e4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006ef4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006ef8:	d108      	bne.n	8006f0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006f08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006f0a:	e00f      	b.n	8006f2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006f1c:	e006      	b.n	8006f2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8006f26:	e001      	b.n	8006f2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	40012400 	.word	0x40012400
 8006f3c:	40012800 	.word	0x40012800
 8006f40:	080072ab 	.word	0x080072ab
 8006f44:	08007327 	.word	0x08007327
 8006f48:	08007343 	.word	0x08007343

08006f4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
	...

08006f84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_ADC_ConfigChannel+0x20>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e0dc      	b.n	800715e <HAL_ADC_ConfigChannel+0x1da>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b06      	cmp	r3, #6
 8006fb2:	d81c      	bhi.n	8006fee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3b05      	subs	r3, #5
 8006fc6:	221f      	movs	r2, #31
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	43db      	mvns	r3, r3
 8006fce:	4019      	ands	r1, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	3b05      	subs	r3, #5
 8006fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	635a      	str	r2, [r3, #52]	; 0x34
 8006fec:	e03c      	b.n	8007068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b0c      	cmp	r3, #12
 8006ff4:	d81c      	bhi.n	8007030 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	3b23      	subs	r3, #35	; 0x23
 8007008:	221f      	movs	r2, #31
 800700a:	fa02 f303 	lsl.w	r3, r2, r3
 800700e:	43db      	mvns	r3, r3
 8007010:	4019      	ands	r1, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	3b23      	subs	r3, #35	; 0x23
 8007022:	fa00 f203 	lsl.w	r2, r0, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	631a      	str	r2, [r3, #48]	; 0x30
 800702e:	e01b      	b.n	8007068 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	3b41      	subs	r3, #65	; 0x41
 8007042:	221f      	movs	r2, #31
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	43db      	mvns	r3, r3
 800704a:	4019      	ands	r1, r3
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	4613      	mov	r3, r2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	4413      	add	r3, r2
 800705a:	3b41      	subs	r3, #65	; 0x41
 800705c:	fa00 f203 	lsl.w	r2, r0, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b09      	cmp	r3, #9
 800706e:	d91c      	bls.n	80070aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68d9      	ldr	r1, [r3, #12]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	005b      	lsls	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	3b1e      	subs	r3, #30
 8007082:	2207      	movs	r2, #7
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	43db      	mvns	r3, r3
 800708a:	4019      	ands	r1, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6898      	ldr	r0, [r3, #8]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	4413      	add	r3, r2
 800709a:	3b1e      	subs	r3, #30
 800709c:	fa00 f203 	lsl.w	r2, r0, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	60da      	str	r2, [r3, #12]
 80070a8:	e019      	b.n	80070de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6919      	ldr	r1, [r3, #16]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4413      	add	r3, r2
 80070ba:	2207      	movs	r2, #7
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	43db      	mvns	r3, r3
 80070c2:	4019      	ands	r1, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6898      	ldr	r0, [r3, #8]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	4413      	add	r3, r2
 80070d2:	fa00 f203 	lsl.w	r2, r0, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b10      	cmp	r3, #16
 80070e4:	d003      	beq.n	80070ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80070ea:	2b11      	cmp	r3, #17
 80070ec:	d132      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <HAL_ADC_ConfigChannel+0x1e4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d125      	bne.n	8007144 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d126      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007114:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b10      	cmp	r3, #16
 800711c:	d11a      	bne.n	8007154 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800711e:	4b13      	ldr	r3, [pc, #76]	; (800716c <HAL_ADC_ConfigChannel+0x1e8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a13      	ldr	r2, [pc, #76]	; (8007170 <HAL_ADC_ConfigChannel+0x1ec>)
 8007124:	fba2 2303 	umull	r2, r3, r2, r3
 8007128:	0c9a      	lsrs	r2, r3, #18
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007134:	e002      	b.n	800713c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	3b01      	subs	r3, #1
 800713a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1f9      	bne.n	8007136 <HAL_ADC_ConfigChannel+0x1b2>
 8007142:	e007      	b.n	8007154 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	f043 0220 	orr.w	r2, r3, #32
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	bc80      	pop	{r7}
 8007166:	4770      	bx	lr
 8007168:	40012400 	.word	0x40012400
 800716c:	2000003c 	.word	0x2000003c
 8007170:	431bde83 	.word	0x431bde83

08007174 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d040      	beq.n	8007214 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0201 	orr.w	r2, r2, #1
 80071a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80071a2:	4b1f      	ldr	r3, [pc, #124]	; (8007220 <ADC_Enable+0xac>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1f      	ldr	r2, [pc, #124]	; (8007224 <ADC_Enable+0xb0>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	0c9b      	lsrs	r3, r3, #18
 80071ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80071b0:	e002      	b.n	80071b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f9      	bne.n	80071b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80071be:	f7ff fccf 	bl	8006b60 <HAL_GetTick>
 80071c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80071c4:	e01f      	b.n	8007206 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071c6:	f7ff fccb 	bl	8006b60 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d918      	bls.n	8007206 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d011      	beq.n	8007206 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	f043 0210 	orr.w	r2, r3, #16
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	f043 0201 	orr.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e007      	b.n	8007216 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b01      	cmp	r3, #1
 8007212:	d1d8      	bne.n	80071c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	2000003c 	.word	0x2000003c
 8007224:	431bde83 	.word	0x431bde83

08007228 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d12e      	bne.n	80072a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	689a      	ldr	r2, [r3, #8]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007252:	f7ff fc85 	bl	8006b60 <HAL_GetTick>
 8007256:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007258:	e01b      	b.n	8007292 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800725a:	f7ff fc81 	bl	8006b60 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d914      	bls.n	8007292 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	d10d      	bne.n	8007292 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	f043 0210 	orr.w	r2, r3, #16
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	f043 0201 	orr.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e007      	b.n	80072a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b01      	cmp	r3, #1
 800729e:	d0dc      	beq.n	800725a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d127      	bne.n	8007314 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80072da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80072de:	d115      	bne.n	800730c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d111      	bne.n	800730c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007304:	f043 0201 	orr.w	r2, r3, #1
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff fe1d 	bl	8006f4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007312:	e004      	b.n	800731e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff fe12 	bl	8006f5e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800733a:	bf00      	nop
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	f043 0204 	orr.w	r2, r3, #4
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f7ff fe01 	bl	8006f70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0ed      	b.n	8007564 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d102      	bne.n	800739a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7fb fb4b 	bl	8002a30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f042 0201 	orr.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073aa:	f7ff fbd9 	bl	8006b60 <HAL_GetTick>
 80073ae:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80073b0:	e012      	b.n	80073d8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80073b2:	f7ff fbd5 	bl	8006b60 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b0a      	cmp	r3, #10
 80073be:	d90b      	bls.n	80073d8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2205      	movs	r2, #5
 80073d0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0c5      	b.n	8007564 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0e5      	beq.n	80073b2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0202 	bic.w	r2, r2, #2
 80073f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073f6:	f7ff fbb3 	bl	8006b60 <HAL_GetTick>
 80073fa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80073fc:	e012      	b.n	8007424 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80073fe:	f7ff fbaf 	bl	8006b60 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b0a      	cmp	r3, #10
 800740a:	d90b      	bls.n	8007424 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2205      	movs	r2, #5
 800741c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e09f      	b.n	8007564 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	7e1b      	ldrb	r3, [r3, #24]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d108      	bne.n	800744c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e007      	b.n	800745c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800745a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7e5b      	ldrb	r3, [r3, #25]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d108      	bne.n	8007476 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007472:	601a      	str	r2, [r3, #0]
 8007474:	e007      	b.n	8007486 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007484:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7e9b      	ldrb	r3, [r3, #26]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d108      	bne.n	80074a0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0220 	orr.w	r2, r2, #32
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e007      	b.n	80074b0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0220 	bic.w	r2, r2, #32
 80074ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7edb      	ldrb	r3, [r3, #27]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d108      	bne.n	80074ca <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 0210 	bic.w	r2, r2, #16
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	e007      	b.n	80074da <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0210 	orr.w	r2, r2, #16
 80074d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7f1b      	ldrb	r3, [r3, #28]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d108      	bne.n	80074f4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f042 0208 	orr.w	r2, r2, #8
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e007      	b.n	8007504 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0208 	bic.w	r2, r2, #8
 8007502:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7f5b      	ldrb	r3, [r3, #29]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d108      	bne.n	800751e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0204 	orr.w	r2, r2, #4
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	e007      	b.n	800752e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0204 	bic.w	r2, r2, #4
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	ea42 0103 	orr.w	r1, r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	1e5a      	subs	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	430a      	orrs	r2, r1
 8007552:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007582:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007584:	7cfb      	ldrb	r3, [r7, #19]
 8007586:	2b01      	cmp	r3, #1
 8007588:	d003      	beq.n	8007592 <HAL_CAN_ConfigFilter+0x26>
 800758a:	7cfb      	ldrb	r3, [r7, #19]
 800758c:	2b02      	cmp	r3, #2
 800758e:	f040 80aa 	bne.w	80076e6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007598:	f043 0201 	orr.w	r2, r3, #1
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	f003 031f 	and.w	r3, r3, #31
 80075aa:	2201      	movs	r2, #1
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	43db      	mvns	r3, r3
 80075bc:	401a      	ands	r2, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d123      	bne.n	8007614 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	43db      	mvns	r3, r3
 80075d6:	401a      	ands	r2, r3
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80075ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	3248      	adds	r2, #72	; 0x48
 80075f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007608:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800760a:	6979      	ldr	r1, [r7, #20]
 800760c:	3348      	adds	r3, #72	; 0x48
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	440b      	add	r3, r1
 8007612:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d122      	bne.n	8007662 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	431a      	orrs	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800763c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	3248      	adds	r2, #72	; 0x48
 8007642:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007656:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007658:	6979      	ldr	r1, [r7, #20]
 800765a:	3348      	adds	r3, #72	; 0x48
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	440b      	add	r3, r1
 8007660:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d109      	bne.n	800767e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	43db      	mvns	r3, r3
 8007674:	401a      	ands	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800767c:	e007      	b.n	800768e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	431a      	orrs	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	43db      	mvns	r3, r3
 80076a0:	401a      	ands	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80076a8:	e007      	b.n	80076ba <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	431a      	orrs	r2, r3
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d107      	bne.n	80076d2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80076d8:	f023 0201 	bic.w	r2, r3, #1
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e006      	b.n	80076f4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr

080076fe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b01      	cmp	r3, #1
 8007710:	d12e      	bne.n	8007770 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0201 	bic.w	r2, r2, #1
 8007728:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800772a:	f7ff fa19 	bl	8006b60 <HAL_GetTick>
 800772e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007730:	e012      	b.n	8007758 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007732:	f7ff fa15 	bl	8006b60 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b0a      	cmp	r3, #10
 800773e:	d90b      	bls.n	8007758 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2205      	movs	r2, #5
 8007750:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e012      	b.n	800777e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e5      	bne.n	8007732 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	e006      	b.n	800777e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
  }
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007786:	b480      	push	{r7}
 8007788:	b089      	sub	sp, #36	; 0x24
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800779a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80077a4:	7ffb      	ldrb	r3, [r7, #31]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d003      	beq.n	80077b2 <HAL_CAN_AddTxMessage+0x2c>
 80077aa:	7ffb      	ldrb	r3, [r7, #31]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	f040 80b8 	bne.w	8007922 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a0 	beq.w	8007912 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	0e1b      	lsrs	r3, r3, #24
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d907      	bls.n	80077f2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e09e      	b.n	8007930 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80077f2:	2201      	movs	r2, #1
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	409a      	lsls	r2, r3
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10d      	bne.n	8007820 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	6809      	ldr	r1, [r1, #0]
 8007812:	431a      	orrs	r2, r3
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3318      	adds	r3, #24
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	440b      	add	r3, r1
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	e00f      	b.n	8007840 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800782a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007830:	68f9      	ldr	r1, [r7, #12]
 8007832:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007834:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	3318      	adds	r3, #24
 800783a:	011b      	lsls	r3, r3, #4
 800783c:	440b      	add	r3, r1
 800783e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6819      	ldr	r1, [r3, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	3318      	adds	r3, #24
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	440b      	add	r3, r1
 8007850:	3304      	adds	r3, #4
 8007852:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	7d1b      	ldrb	r3, [r3, #20]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d111      	bne.n	8007880 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	3318      	adds	r3, #24
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	4413      	add	r3, r2
 8007868:	3304      	adds	r3, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	6811      	ldr	r1, [r2, #0]
 8007870:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	3318      	adds	r3, #24
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	440b      	add	r3, r1
 800787c:	3304      	adds	r3, #4
 800787e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3307      	adds	r3, #7
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	061a      	lsls	r2, r3, #24
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3306      	adds	r3, #6
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3305      	adds	r3, #5
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	021b      	lsls	r3, r3, #8
 800789a:	4313      	orrs	r3, r2
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	3204      	adds	r2, #4
 80078a0:	7812      	ldrb	r2, [r2, #0]
 80078a2:	4610      	mov	r0, r2
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	6811      	ldr	r1, [r2, #0]
 80078a8:	ea43 0200 	orr.w	r2, r3, r0
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	440b      	add	r3, r1
 80078b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80078b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3303      	adds	r3, #3
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	061a      	lsls	r2, r3, #24
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3302      	adds	r3, #2
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	041b      	lsls	r3, r3, #16
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3301      	adds	r3, #1
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	4313      	orrs	r3, r2
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	4610      	mov	r0, r2
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	6811      	ldr	r1, [r2, #0]
 80078de:	ea43 0200 	orr.w	r2, r3, r0
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	440b      	add	r3, r1
 80078e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80078ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	3318      	adds	r3, #24
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	4413      	add	r3, r2
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	6811      	ldr	r1, [r2, #0]
 8007900:	f043 0201 	orr.w	r2, r3, #1
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	3318      	adds	r3, #24
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	440b      	add	r3, r1
 800790c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	e00e      	b.n	8007930 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e006      	b.n	8007930 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3724      	adds	r7, #36	; 0x24
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr

0800793a <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3020 	ldrb.w	r3, [r3, #32]
 800794a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d002      	beq.n	8007958 <HAL_CAN_AbortTxRequest+0x1e>
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	2b02      	cmp	r3, #2
 8007956:	d128      	bne.n	80079aa <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007970:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800798a:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	f003 0304 	and.w	r3, r3, #4
 8007992:	2b00      	cmp	r3, #0
 8007994:	d007      	beq.n	80079a6 <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80079a4:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	e006      	b.n	80079b8 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079d4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80079d6:	7afb      	ldrb	r3, [r7, #11]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d002      	beq.n	80079e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d11d      	bne.n	8007a1e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3301      	adds	r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	3301      	adds	r3, #1
 8007a08:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bc80      	pop	{r7}
 8007a28:	4770      	bx	lr

08007a2a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b087      	sub	sp, #28
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a3e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d003      	beq.n	8007a4e <HAL_CAN_GetRxMessage+0x24>
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	f040 80f3 	bne.w	8007c34 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10e      	bne.n	8007a72 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d116      	bne.n	8007a90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e0e7      	b.n	8007c42 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d107      	bne.n	8007a90 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e0d8      	b.n	8007c42 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	331b      	adds	r3, #27
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	4413      	add	r3, r2
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0204 	and.w	r2, r3, #4
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10c      	bne.n	8007ac8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	331b      	adds	r3, #27
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	4413      	add	r3, r2
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	0d5b      	lsrs	r3, r3, #21
 8007abe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e00b      	b.n	8007ae0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	331b      	adds	r3, #27
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	4413      	add	r3, r2
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	08db      	lsrs	r3, r3, #3
 8007ad8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	331b      	adds	r3, #27
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	4413      	add	r3, r2
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0202 	and.w	r2, r3, #2
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	331b      	adds	r3, #27
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4413      	add	r3, r2
 8007b02:	3304      	adds	r3, #4
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 020f 	and.w	r2, r3, #15
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	331b      	adds	r3, #27
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	4413      	add	r3, r2
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	331b      	adds	r3, #27
 8007b2e:	011b      	lsls	r3, r3, #4
 8007b30:	4413      	add	r3, r2
 8007b32:	3304      	adds	r3, #4
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	0c1b      	lsrs	r3, r3, #16
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	0a1a      	lsrs	r2, r3, #8
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	0c1a      	lsrs	r2, r3, #16
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3302      	adds	r3, #2
 8007b84:	b2d2      	uxtb	r2, r2
 8007b86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	0e1a      	lsrs	r2, r3, #24
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	3303      	adds	r3, #3
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	b2d2      	uxtb	r2, r2
 8007bb8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	0a1a      	lsrs	r2, r3, #8
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	3305      	adds	r3, #5
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	0c1a      	lsrs	r2, r3, #16
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	3306      	adds	r3, #6
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	0e1a      	lsrs	r2, r3, #24
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	3307      	adds	r3, #7
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d108      	bne.n	8007c20 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f042 0220 	orr.w	r2, r2, #32
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	e007      	b.n	8007c30 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0220 	orr.w	r2, r2, #32
 8007c2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e006      	b.n	8007c42 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
  }
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bc80      	pop	{r7}
 8007c4a:	4770      	bx	lr

08007c4c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c5c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d002      	beq.n	8007c6a <HAL_CAN_ActivateNotification+0x1e>
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d109      	bne.n	8007c7e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6959      	ldr	r1, [r3, #20]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e006      	b.n	8007c8c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bc80      	pop	{r7}
 8007c94:	4770      	bx	lr

08007c96 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b08a      	sub	sp, #40	; 0x28
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d07c      	beq.n	8007dd6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d023      	beq.n	8007d2e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2201      	movs	r2, #1
 8007cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f983 	bl	8008004 <HAL_CAN_TxMailbox0CompleteCallback>
 8007cfe:	e016      	b.n	8007d2e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
 8007d12:	e00c      	b.n	8007d2e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d004      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
 8007d26:	e002      	b.n	8007d2e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f986 	bl	800803a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d024      	beq.n	8007d82 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f962 	bl	8008016 <HAL_CAN_TxMailbox1CompleteCallback>
 8007d52:	e016      	b.n	8007d82 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d004      	beq.n	8007d68 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
 8007d66:	e00c      	b.n	8007d82 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d004      	beq.n	8007d7c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7a:	e002      	b.n	8007d82 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f965 	bl	800804c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d024      	beq.n	8007dd6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f941 	bl	8008028 <HAL_CAN_TxMailbox2CompleteCallback>
 8007da6:	e016      	b.n	8007dd6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d004      	beq.n	8007dbc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dba:	e00c      	b.n	8007dd6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dce:	e002      	b.n	8007dd6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f944 	bl	800805e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00c      	beq.n	8007dfa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d007      	beq.n	8007dfa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2210      	movs	r2, #16
 8007df8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007dfa:	6a3b      	ldr	r3, [r7, #32]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d006      	beq.n	8007e1c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2208      	movs	r2, #8
 8007e14:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f92a 	bl	8008070 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f003 0303 	and.w	r3, r3, #3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fb f9c3 	bl	80031c0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00c      	beq.n	8007e5e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f003 0310 	and.w	r3, r3, #16
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2210      	movs	r2, #16
 8007e5c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d006      	beq.n	8007e80 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2208      	movs	r2, #8
 8007e78:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f90a 	bl	8008094 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	f003 0310 	and.w	r3, r3, #16
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d009      	beq.n	8007e9e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f8f2 	bl	8008082 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00b      	beq.n	8007ec0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d006      	beq.n	8007ec0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2210      	movs	r2, #16
 8007eb8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f8f3 	bl	80080a6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d006      	beq.n	8007ee2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2208      	movs	r2, #8
 8007eda:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f8eb 	bl	80080b8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d07b      	beq.n	8007fe4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d072      	beq.n	8007fdc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d008      	beq.n	8007f12 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	f043 0302 	orr.w	r3, r3, #2
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	f043 0304 	orr.w	r3, r3, #4
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d043      	beq.n	8007fdc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d03e      	beq.n	8007fdc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f64:	2b60      	cmp	r3, #96	; 0x60
 8007f66:	d02b      	beq.n	8007fc0 <HAL_CAN_IRQHandler+0x32a>
 8007f68:	2b60      	cmp	r3, #96	; 0x60
 8007f6a:	d82e      	bhi.n	8007fca <HAL_CAN_IRQHandler+0x334>
 8007f6c:	2b50      	cmp	r3, #80	; 0x50
 8007f6e:	d022      	beq.n	8007fb6 <HAL_CAN_IRQHandler+0x320>
 8007f70:	2b50      	cmp	r3, #80	; 0x50
 8007f72:	d82a      	bhi.n	8007fca <HAL_CAN_IRQHandler+0x334>
 8007f74:	2b40      	cmp	r3, #64	; 0x40
 8007f76:	d019      	beq.n	8007fac <HAL_CAN_IRQHandler+0x316>
 8007f78:	2b40      	cmp	r3, #64	; 0x40
 8007f7a:	d826      	bhi.n	8007fca <HAL_CAN_IRQHandler+0x334>
 8007f7c:	2b30      	cmp	r3, #48	; 0x30
 8007f7e:	d010      	beq.n	8007fa2 <HAL_CAN_IRQHandler+0x30c>
 8007f80:	2b30      	cmp	r3, #48	; 0x30
 8007f82:	d822      	bhi.n	8007fca <HAL_CAN_IRQHandler+0x334>
 8007f84:	2b10      	cmp	r3, #16
 8007f86:	d002      	beq.n	8007f8e <HAL_CAN_IRQHandler+0x2f8>
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d005      	beq.n	8007f98 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007f8c:	e01d      	b.n	8007fca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	f043 0308 	orr.w	r3, r3, #8
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007f96:	e019      	b.n	8007fcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	f043 0310 	orr.w	r3, r3, #16
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fa0:	e014      	b.n	8007fcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	f043 0320 	orr.w	r3, r3, #32
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007faa:	e00f      	b.n	8007fcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fb4:	e00a      	b.n	8007fcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fbe:	e005      	b.n	8007fcc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fc8:	e000      	b.n	8007fcc <HAL_CAN_IRQHandler+0x336>
            break;
 8007fca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	699a      	ldr	r2, [r3, #24]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007fda:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2204      	movs	r2, #4
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d008      	beq.n	8007ffc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f867 	bl	80080ca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	3728      	adds	r7, #40	; 0x28
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr

08008016 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008030:	bf00      	nop
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr

0800805e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr

080080a6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr

080080b8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr

080080ca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80080ec:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <__NVIC_SetPriorityGrouping+0x44>)
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80080f8:	4013      	ands	r3, r2
 80080fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800810c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800810e:	4a04      	ldr	r2, [pc, #16]	; (8008120 <__NVIC_SetPriorityGrouping+0x44>)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	60d3      	str	r3, [r2, #12]
}
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	e000ed00 	.word	0xe000ed00

08008124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <__NVIC_GetPriorityGrouping+0x18>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	f003 0307 	and.w	r3, r3, #7
}
 8008132:	4618      	mov	r0, r3
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	e000ed00 	.word	0xe000ed00

08008140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800814a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800814e:	2b00      	cmp	r3, #0
 8008150:	db0b      	blt.n	800816a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	f003 021f 	and.w	r2, r3, #31
 8008158:	4906      	ldr	r1, [pc, #24]	; (8008174 <__NVIC_EnableIRQ+0x34>)
 800815a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	2001      	movs	r0, #1
 8008162:	fa00 f202 	lsl.w	r2, r0, r2
 8008166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr
 8008174:	e000e100 	.word	0xe000e100

08008178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	6039      	str	r1, [r7, #0]
 8008182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008188:	2b00      	cmp	r3, #0
 800818a:	db0a      	blt.n	80081a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	490c      	ldr	r1, [pc, #48]	; (80081c4 <__NVIC_SetPriority+0x4c>)
 8008192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008196:	0112      	lsls	r2, r2, #4
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	440b      	add	r3, r1
 800819c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081a0:	e00a      	b.n	80081b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	4908      	ldr	r1, [pc, #32]	; (80081c8 <__NVIC_SetPriority+0x50>)
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	3b04      	subs	r3, #4
 80081b0:	0112      	lsls	r2, r2, #4
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	440b      	add	r3, r1
 80081b6:	761a      	strb	r2, [r3, #24]
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	bc80      	pop	{r7}
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	e000e100 	.word	0xe000e100
 80081c8:	e000ed00 	.word	0xe000ed00

080081cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b089      	sub	sp, #36	; 0x24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f1c3 0307 	rsb	r3, r3, #7
 80081e6:	2b04      	cmp	r3, #4
 80081e8:	bf28      	it	cs
 80081ea:	2304      	movcs	r3, #4
 80081ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	3304      	adds	r3, #4
 80081f2:	2b06      	cmp	r3, #6
 80081f4:	d902      	bls.n	80081fc <NVIC_EncodePriority+0x30>
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	3b03      	subs	r3, #3
 80081fa:	e000      	b.n	80081fe <NVIC_EncodePriority+0x32>
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008200:	f04f 32ff 	mov.w	r2, #4294967295
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	fa02 f303 	lsl.w	r3, r2, r3
 800820a:	43da      	mvns	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	401a      	ands	r2, r3
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008214:	f04f 31ff 	mov.w	r1, #4294967295
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	fa01 f303 	lsl.w	r3, r1, r3
 800821e:	43d9      	mvns	r1, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008224:	4313      	orrs	r3, r2
         );
}
 8008226:	4618      	mov	r0, r3
 8008228:	3724      	adds	r7, #36	; 0x24
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr

08008230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3b01      	subs	r3, #1
 800823c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008240:	d301      	bcc.n	8008246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008242:	2301      	movs	r3, #1
 8008244:	e00f      	b.n	8008266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008246:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <SysTick_Config+0x40>)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3b01      	subs	r3, #1
 800824c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800824e:	210f      	movs	r1, #15
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
 8008254:	f7ff ff90 	bl	8008178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <SysTick_Config+0x40>)
 800825a:	2200      	movs	r2, #0
 800825c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800825e:	4b04      	ldr	r3, [pc, #16]	; (8008270 <SysTick_Config+0x40>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	e000e010 	.word	0xe000e010

08008274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff ff2d 	bl	80080dc <__NVIC_SetPriorityGrouping>
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800828a:	b580      	push	{r7, lr}
 800828c:	b086      	sub	sp, #24
 800828e:	af00      	add	r7, sp, #0
 8008290:	4603      	mov	r3, r0
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008298:	2300      	movs	r3, #0
 800829a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800829c:	f7ff ff42 	bl	8008124 <__NVIC_GetPriorityGrouping>
 80082a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	6978      	ldr	r0, [r7, #20]
 80082a8:	f7ff ff90 	bl	80081cc <NVIC_EncodePriority>
 80082ac:	4602      	mov	r2, r0
 80082ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082b2:	4611      	mov	r1, r2
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff ff5f 	bl	8008178 <__NVIC_SetPriority>
}
 80082ba:	bf00      	nop
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b082      	sub	sp, #8
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	4603      	mov	r3, r0
 80082ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80082cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff ff35 	bl	8008140 <__NVIC_EnableIRQ>
}
 80082d6:	bf00      	nop
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ffa2 	bl	8008230 <SysTick_Config>
 80082ec:	4603      	mov	r3, r0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3708      	adds	r7, #8
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e059      	b.n	80083c2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	4b2d      	ldr	r3, [pc, #180]	; (80083cc <HAL_DMA_Init+0xd4>)
 8008316:	429a      	cmp	r2, r3
 8008318:	d80f      	bhi.n	800833a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	4b2b      	ldr	r3, [pc, #172]	; (80083d0 <HAL_DMA_Init+0xd8>)
 8008322:	4413      	add	r3, r2
 8008324:	4a2b      	ldr	r2, [pc, #172]	; (80083d4 <HAL_DMA_Init+0xdc>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	091b      	lsrs	r3, r3, #4
 800832c:	009a      	lsls	r2, r3, #2
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a28      	ldr	r2, [pc, #160]	; (80083d8 <HAL_DMA_Init+0xe0>)
 8008336:	63da      	str	r2, [r3, #60]	; 0x3c
 8008338:	e00e      	b.n	8008358 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	461a      	mov	r2, r3
 8008340:	4b26      	ldr	r3, [pc, #152]	; (80083dc <HAL_DMA_Init+0xe4>)
 8008342:	4413      	add	r3, r2
 8008344:	4a23      	ldr	r2, [pc, #140]	; (80083d4 <HAL_DMA_Init+0xdc>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	091b      	lsrs	r3, r3, #4
 800834c:	009a      	lsls	r2, r3, #2
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a22      	ldr	r2, [pc, #136]	; (80083e0 <HAL_DMA_Init+0xe8>)
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800836e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8008372:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800837c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr
 80083cc:	40020407 	.word	0x40020407
 80083d0:	bffdfff8 	.word	0xbffdfff8
 80083d4:	cccccccd 	.word	0xcccccccd
 80083d8:	40020000 	.word	0x40020000
 80083dc:	bffdfbf8 	.word	0xbffdfbf8
 80083e0:	40020400 	.word	0x40020400

080083e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_DMA_Start_IT+0x20>
 8008400:	2302      	movs	r3, #2
 8008402:	e04a      	b.n	800849a <HAL_DMA_Start_IT+0xb6>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008412:	2b01      	cmp	r3, #1
 8008414:	d13a      	bne.n	800848c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2202      	movs	r2, #2
 800841a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0201 	bic.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fa6e 	bl	800891c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 020e 	orr.w	r2, r2, #14
 8008456:	601a      	str	r2, [r3, #0]
 8008458:	e00f      	b.n	800847a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0204 	bic.w	r2, r2, #4
 8008468:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 020a 	orr.w	r2, r2, #10
 8008478:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0201 	orr.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e005      	b.n	8008498 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008494:	2302      	movs	r3, #2
 8008496:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
	...

080084a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	2204      	movs	r2, #4
 80084c2:	409a      	lsls	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4013      	ands	r3, r2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 80d6 	beq.w	800867a <HAL_DMA_IRQHandler+0x1d6>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80d0 	beq.w	800867a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d107      	bne.n	80084f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 0204 	bic.w	r2, r2, #4
 80084f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	461a      	mov	r2, r3
 80084fe:	4b9b      	ldr	r3, [pc, #620]	; (800876c <HAL_DMA_IRQHandler+0x2c8>)
 8008500:	429a      	cmp	r2, r3
 8008502:	d958      	bls.n	80085b6 <HAL_DMA_IRQHandler+0x112>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a99      	ldr	r2, [pc, #612]	; (8008770 <HAL_DMA_IRQHandler+0x2cc>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d04f      	beq.n	80085ae <HAL_DMA_IRQHandler+0x10a>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a98      	ldr	r2, [pc, #608]	; (8008774 <HAL_DMA_IRQHandler+0x2d0>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d048      	beq.n	80085aa <HAL_DMA_IRQHandler+0x106>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a96      	ldr	r2, [pc, #600]	; (8008778 <HAL_DMA_IRQHandler+0x2d4>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d040      	beq.n	80085a4 <HAL_DMA_IRQHandler+0x100>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a95      	ldr	r2, [pc, #596]	; (800877c <HAL_DMA_IRQHandler+0x2d8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d038      	beq.n	800859e <HAL_DMA_IRQHandler+0xfa>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a93      	ldr	r2, [pc, #588]	; (8008780 <HAL_DMA_IRQHandler+0x2dc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d030      	beq.n	8008598 <HAL_DMA_IRQHandler+0xf4>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a92      	ldr	r2, [pc, #584]	; (8008784 <HAL_DMA_IRQHandler+0x2e0>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d028      	beq.n	8008592 <HAL_DMA_IRQHandler+0xee>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a89      	ldr	r2, [pc, #548]	; (800876c <HAL_DMA_IRQHandler+0x2c8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d020      	beq.n	800858c <HAL_DMA_IRQHandler+0xe8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a8e      	ldr	r2, [pc, #568]	; (8008788 <HAL_DMA_IRQHandler+0x2e4>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d019      	beq.n	8008588 <HAL_DMA_IRQHandler+0xe4>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a8c      	ldr	r2, [pc, #560]	; (800878c <HAL_DMA_IRQHandler+0x2e8>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d012      	beq.n	8008584 <HAL_DMA_IRQHandler+0xe0>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a8b      	ldr	r2, [pc, #556]	; (8008790 <HAL_DMA_IRQHandler+0x2ec>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00a      	beq.n	800857e <HAL_DMA_IRQHandler+0xda>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a89      	ldr	r2, [pc, #548]	; (8008794 <HAL_DMA_IRQHandler+0x2f0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d102      	bne.n	8008578 <HAL_DMA_IRQHandler+0xd4>
 8008572:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008576:	e01b      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 8008578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800857c:	e018      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 800857e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008582:	e015      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 8008584:	2340      	movs	r3, #64	; 0x40
 8008586:	e013      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 8008588:	2304      	movs	r3, #4
 800858a:	e011      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 800858c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008590:	e00e      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 8008592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008596:	e00b      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 8008598:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800859c:	e008      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 800859e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085a2:	e005      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 80085a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a8:	e002      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 80085aa:	2340      	movs	r3, #64	; 0x40
 80085ac:	e000      	b.n	80085b0 <HAL_DMA_IRQHandler+0x10c>
 80085ae:	2304      	movs	r3, #4
 80085b0:	4a79      	ldr	r2, [pc, #484]	; (8008798 <HAL_DMA_IRQHandler+0x2f4>)
 80085b2:	6053      	str	r3, [r2, #4]
 80085b4:	e057      	b.n	8008666 <HAL_DMA_IRQHandler+0x1c2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a6d      	ldr	r2, [pc, #436]	; (8008770 <HAL_DMA_IRQHandler+0x2cc>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d04f      	beq.n	8008660 <HAL_DMA_IRQHandler+0x1bc>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a6b      	ldr	r2, [pc, #428]	; (8008774 <HAL_DMA_IRQHandler+0x2d0>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d048      	beq.n	800865c <HAL_DMA_IRQHandler+0x1b8>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a6a      	ldr	r2, [pc, #424]	; (8008778 <HAL_DMA_IRQHandler+0x2d4>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d040      	beq.n	8008656 <HAL_DMA_IRQHandler+0x1b2>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a68      	ldr	r2, [pc, #416]	; (800877c <HAL_DMA_IRQHandler+0x2d8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d038      	beq.n	8008650 <HAL_DMA_IRQHandler+0x1ac>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a67      	ldr	r2, [pc, #412]	; (8008780 <HAL_DMA_IRQHandler+0x2dc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d030      	beq.n	800864a <HAL_DMA_IRQHandler+0x1a6>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a65      	ldr	r2, [pc, #404]	; (8008784 <HAL_DMA_IRQHandler+0x2e0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d028      	beq.n	8008644 <HAL_DMA_IRQHandler+0x1a0>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a5d      	ldr	r2, [pc, #372]	; (800876c <HAL_DMA_IRQHandler+0x2c8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d020      	beq.n	800863e <HAL_DMA_IRQHandler+0x19a>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a61      	ldr	r2, [pc, #388]	; (8008788 <HAL_DMA_IRQHandler+0x2e4>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d019      	beq.n	800863a <HAL_DMA_IRQHandler+0x196>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a60      	ldr	r2, [pc, #384]	; (800878c <HAL_DMA_IRQHandler+0x2e8>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d012      	beq.n	8008636 <HAL_DMA_IRQHandler+0x192>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a5e      	ldr	r2, [pc, #376]	; (8008790 <HAL_DMA_IRQHandler+0x2ec>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d00a      	beq.n	8008630 <HAL_DMA_IRQHandler+0x18c>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a5d      	ldr	r2, [pc, #372]	; (8008794 <HAL_DMA_IRQHandler+0x2f0>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d102      	bne.n	800862a <HAL_DMA_IRQHandler+0x186>
 8008624:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008628:	e01b      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 800862a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800862e:	e018      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 8008630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008634:	e015      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 8008636:	2340      	movs	r3, #64	; 0x40
 8008638:	e013      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 800863a:	2304      	movs	r3, #4
 800863c:	e011      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 800863e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008642:	e00e      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 8008644:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008648:	e00b      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 800864a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800864e:	e008      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 8008650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008654:	e005      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 8008656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800865a:	e002      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 800865c:	2340      	movs	r3, #64	; 0x40
 800865e:	e000      	b.n	8008662 <HAL_DMA_IRQHandler+0x1be>
 8008660:	2304      	movs	r3, #4
 8008662:	4a4e      	ldr	r2, [pc, #312]	; (800879c <HAL_DMA_IRQHandler+0x2f8>)
 8008664:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 8136 	beq.w	80088dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008678:	e130      	b.n	80088dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867e:	2202      	movs	r2, #2
 8008680:	409a      	lsls	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	4013      	ands	r3, r2
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80f8 	beq.w	800887c <HAL_DMA_IRQHandler+0x3d8>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80f2 	beq.w	800887c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d10b      	bne.n	80086be <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 020a 	bic.w	r2, r2, #10
 80086b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	4b29      	ldr	r3, [pc, #164]	; (800876c <HAL_DMA_IRQHandler+0x2c8>)
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d973      	bls.n	80087b2 <HAL_DMA_IRQHandler+0x30e>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a28      	ldr	r2, [pc, #160]	; (8008770 <HAL_DMA_IRQHandler+0x2cc>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d06a      	beq.n	80087aa <HAL_DMA_IRQHandler+0x306>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a26      	ldr	r2, [pc, #152]	; (8008774 <HAL_DMA_IRQHandler+0x2d0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d063      	beq.n	80087a6 <HAL_DMA_IRQHandler+0x302>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a25      	ldr	r2, [pc, #148]	; (8008778 <HAL_DMA_IRQHandler+0x2d4>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d05b      	beq.n	80087a0 <HAL_DMA_IRQHandler+0x2fc>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a23      	ldr	r2, [pc, #140]	; (800877c <HAL_DMA_IRQHandler+0x2d8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d038      	beq.n	8008764 <HAL_DMA_IRQHandler+0x2c0>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a22      	ldr	r2, [pc, #136]	; (8008780 <HAL_DMA_IRQHandler+0x2dc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d030      	beq.n	800875e <HAL_DMA_IRQHandler+0x2ba>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a20      	ldr	r2, [pc, #128]	; (8008784 <HAL_DMA_IRQHandler+0x2e0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d028      	beq.n	8008758 <HAL_DMA_IRQHandler+0x2b4>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a18      	ldr	r2, [pc, #96]	; (800876c <HAL_DMA_IRQHandler+0x2c8>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d020      	beq.n	8008752 <HAL_DMA_IRQHandler+0x2ae>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a1c      	ldr	r2, [pc, #112]	; (8008788 <HAL_DMA_IRQHandler+0x2e4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d019      	beq.n	800874e <HAL_DMA_IRQHandler+0x2aa>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a1b      	ldr	r2, [pc, #108]	; (800878c <HAL_DMA_IRQHandler+0x2e8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d012      	beq.n	800874a <HAL_DMA_IRQHandler+0x2a6>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a19      	ldr	r2, [pc, #100]	; (8008790 <HAL_DMA_IRQHandler+0x2ec>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00a      	beq.n	8008744 <HAL_DMA_IRQHandler+0x2a0>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a18      	ldr	r2, [pc, #96]	; (8008794 <HAL_DMA_IRQHandler+0x2f0>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d102      	bne.n	800873e <HAL_DMA_IRQHandler+0x29a>
 8008738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800873c:	e036      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 800873e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008742:	e033      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 8008744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008748:	e030      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 800874a:	2320      	movs	r3, #32
 800874c:	e02e      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 800874e:	2302      	movs	r3, #2
 8008750:	e02c      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 8008752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008756:	e029      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 8008758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800875c:	e026      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 800875e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008762:	e023      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 8008764:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008768:	e020      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 800876a:	bf00      	nop
 800876c:	40020080 	.word	0x40020080
 8008770:	40020008 	.word	0x40020008
 8008774:	4002001c 	.word	0x4002001c
 8008778:	40020030 	.word	0x40020030
 800877c:	40020044 	.word	0x40020044
 8008780:	40020058 	.word	0x40020058
 8008784:	4002006c 	.word	0x4002006c
 8008788:	40020408 	.word	0x40020408
 800878c:	4002041c 	.word	0x4002041c
 8008790:	40020430 	.word	0x40020430
 8008794:	40020444 	.word	0x40020444
 8008798:	40020400 	.word	0x40020400
 800879c:	40020000 	.word	0x40020000
 80087a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087a4:	e002      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 80087a6:	2320      	movs	r3, #32
 80087a8:	e000      	b.n	80087ac <HAL_DMA_IRQHandler+0x308>
 80087aa:	2302      	movs	r3, #2
 80087ac:	4a4e      	ldr	r2, [pc, #312]	; (80088e8 <HAL_DMA_IRQHandler+0x444>)
 80087ae:	6053      	str	r3, [r2, #4]
 80087b0:	e057      	b.n	8008862 <HAL_DMA_IRQHandler+0x3be>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a4d      	ldr	r2, [pc, #308]	; (80088ec <HAL_DMA_IRQHandler+0x448>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d04f      	beq.n	800885c <HAL_DMA_IRQHandler+0x3b8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a4b      	ldr	r2, [pc, #300]	; (80088f0 <HAL_DMA_IRQHandler+0x44c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d048      	beq.n	8008858 <HAL_DMA_IRQHandler+0x3b4>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a4a      	ldr	r2, [pc, #296]	; (80088f4 <HAL_DMA_IRQHandler+0x450>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d040      	beq.n	8008852 <HAL_DMA_IRQHandler+0x3ae>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a48      	ldr	r2, [pc, #288]	; (80088f8 <HAL_DMA_IRQHandler+0x454>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d038      	beq.n	800884c <HAL_DMA_IRQHandler+0x3a8>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a47      	ldr	r2, [pc, #284]	; (80088fc <HAL_DMA_IRQHandler+0x458>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d030      	beq.n	8008846 <HAL_DMA_IRQHandler+0x3a2>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a45      	ldr	r2, [pc, #276]	; (8008900 <HAL_DMA_IRQHandler+0x45c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d028      	beq.n	8008840 <HAL_DMA_IRQHandler+0x39c>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a44      	ldr	r2, [pc, #272]	; (8008904 <HAL_DMA_IRQHandler+0x460>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d020      	beq.n	800883a <HAL_DMA_IRQHandler+0x396>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a42      	ldr	r2, [pc, #264]	; (8008908 <HAL_DMA_IRQHandler+0x464>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d019      	beq.n	8008836 <HAL_DMA_IRQHandler+0x392>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a41      	ldr	r2, [pc, #260]	; (800890c <HAL_DMA_IRQHandler+0x468>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d012      	beq.n	8008832 <HAL_DMA_IRQHandler+0x38e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a3f      	ldr	r2, [pc, #252]	; (8008910 <HAL_DMA_IRQHandler+0x46c>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00a      	beq.n	800882c <HAL_DMA_IRQHandler+0x388>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a3e      	ldr	r2, [pc, #248]	; (8008914 <HAL_DMA_IRQHandler+0x470>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d102      	bne.n	8008826 <HAL_DMA_IRQHandler+0x382>
 8008820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008824:	e01b      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 8008826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800882a:	e018      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 800882c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008830:	e015      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 8008832:	2320      	movs	r3, #32
 8008834:	e013      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 8008836:	2302      	movs	r3, #2
 8008838:	e011      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 800883a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800883e:	e00e      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 8008840:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008844:	e00b      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 8008846:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800884a:	e008      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 800884c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008850:	e005      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 8008852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008856:	e002      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 8008858:	2320      	movs	r3, #32
 800885a:	e000      	b.n	800885e <HAL_DMA_IRQHandler+0x3ba>
 800885c:	2302      	movs	r3, #2
 800885e:	4a2e      	ldr	r2, [pc, #184]	; (8008918 <HAL_DMA_IRQHandler+0x474>)
 8008860:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886e:	2b00      	cmp	r3, #0
 8008870:	d034      	beq.n	80088dc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800887a:	e02f      	b.n	80088dc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	2208      	movs	r2, #8
 8008882:	409a      	lsls	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4013      	ands	r3, r2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d028      	beq.n	80088de <HAL_DMA_IRQHandler+0x43a>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d023      	beq.n	80088de <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 020e 	bic.w	r2, r2, #14
 80088a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ae:	2101      	movs	r1, #1
 80088b0:	fa01 f202 	lsl.w	r2, r1, r2
 80088b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	4798      	blx	r3
    }
  }
  return;
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
}
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40020400 	.word	0x40020400
 80088ec:	40020008 	.word	0x40020008
 80088f0:	4002001c 	.word	0x4002001c
 80088f4:	40020030 	.word	0x40020030
 80088f8:	40020044 	.word	0x40020044
 80088fc:	40020058 	.word	0x40020058
 8008900:	4002006c 	.word	0x4002006c
 8008904:	40020080 	.word	0x40020080
 8008908:	40020408 	.word	0x40020408
 800890c:	4002041c 	.word	0x4002041c
 8008910:	40020430 	.word	0x40020430
 8008914:	40020444 	.word	0x40020444
 8008918:	40020000 	.word	0x40020000

0800891c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008932:	2101      	movs	r1, #1
 8008934:	fa01 f202 	lsl.w	r2, r1, r2
 8008938:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b10      	cmp	r3, #16
 8008948:	d108      	bne.n	800895c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800895a:	e007      	b.n	800896c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	60da      	str	r2, [r3, #12]
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr
	...

08008978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008978:	b480      	push	{r7}
 800897a:	b08b      	sub	sp, #44	; 0x2c
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008982:	2300      	movs	r3, #0
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008986:	2300      	movs	r3, #0
 8008988:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800898a:	e179      	b.n	8008c80 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800898c:	2201      	movs	r2, #1
 800898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008990:	fa02 f303 	lsl.w	r3, r2, r3
 8008994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	4013      	ands	r3, r2
 800899e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	f040 8168 	bne.w	8008c7a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	4aa0      	ldr	r2, [pc, #640]	; (8008c30 <HAL_GPIO_Init+0x2b8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d05e      	beq.n	8008a72 <HAL_GPIO_Init+0xfa>
 80089b4:	4a9e      	ldr	r2, [pc, #632]	; (8008c30 <HAL_GPIO_Init+0x2b8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d875      	bhi.n	8008aa6 <HAL_GPIO_Init+0x12e>
 80089ba:	4a9e      	ldr	r2, [pc, #632]	; (8008c34 <HAL_GPIO_Init+0x2bc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d058      	beq.n	8008a72 <HAL_GPIO_Init+0xfa>
 80089c0:	4a9c      	ldr	r2, [pc, #624]	; (8008c34 <HAL_GPIO_Init+0x2bc>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d86f      	bhi.n	8008aa6 <HAL_GPIO_Init+0x12e>
 80089c6:	4a9c      	ldr	r2, [pc, #624]	; (8008c38 <HAL_GPIO_Init+0x2c0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d052      	beq.n	8008a72 <HAL_GPIO_Init+0xfa>
 80089cc:	4a9a      	ldr	r2, [pc, #616]	; (8008c38 <HAL_GPIO_Init+0x2c0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d869      	bhi.n	8008aa6 <HAL_GPIO_Init+0x12e>
 80089d2:	4a9a      	ldr	r2, [pc, #616]	; (8008c3c <HAL_GPIO_Init+0x2c4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d04c      	beq.n	8008a72 <HAL_GPIO_Init+0xfa>
 80089d8:	4a98      	ldr	r2, [pc, #608]	; (8008c3c <HAL_GPIO_Init+0x2c4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d863      	bhi.n	8008aa6 <HAL_GPIO_Init+0x12e>
 80089de:	4a98      	ldr	r2, [pc, #608]	; (8008c40 <HAL_GPIO_Init+0x2c8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d046      	beq.n	8008a72 <HAL_GPIO_Init+0xfa>
 80089e4:	4a96      	ldr	r2, [pc, #600]	; (8008c40 <HAL_GPIO_Init+0x2c8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d85d      	bhi.n	8008aa6 <HAL_GPIO_Init+0x12e>
 80089ea:	2b12      	cmp	r3, #18
 80089ec:	d82a      	bhi.n	8008a44 <HAL_GPIO_Init+0xcc>
 80089ee:	2b12      	cmp	r3, #18
 80089f0:	d859      	bhi.n	8008aa6 <HAL_GPIO_Init+0x12e>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <HAL_GPIO_Init+0x80>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a73 	.word	0x08008a73
 80089fc:	08008a4d 	.word	0x08008a4d
 8008a00:	08008a5f 	.word	0x08008a5f
 8008a04:	08008aa1 	.word	0x08008aa1
 8008a08:	08008aa7 	.word	0x08008aa7
 8008a0c:	08008aa7 	.word	0x08008aa7
 8008a10:	08008aa7 	.word	0x08008aa7
 8008a14:	08008aa7 	.word	0x08008aa7
 8008a18:	08008aa7 	.word	0x08008aa7
 8008a1c:	08008aa7 	.word	0x08008aa7
 8008a20:	08008aa7 	.word	0x08008aa7
 8008a24:	08008aa7 	.word	0x08008aa7
 8008a28:	08008aa7 	.word	0x08008aa7
 8008a2c:	08008aa7 	.word	0x08008aa7
 8008a30:	08008aa7 	.word	0x08008aa7
 8008a34:	08008aa7 	.word	0x08008aa7
 8008a38:	08008aa7 	.word	0x08008aa7
 8008a3c:	08008a55 	.word	0x08008a55
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	4a7f      	ldr	r2, [pc, #508]	; (8008c44 <HAL_GPIO_Init+0x2cc>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d013      	beq.n	8008a72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008a4a:	e02c      	b.n	8008aa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	623b      	str	r3, [r7, #32]
          break;
 8008a52:	e029      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	623b      	str	r3, [r7, #32]
          break;
 8008a5c:	e024      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	3308      	adds	r3, #8
 8008a64:	623b      	str	r3, [r7, #32]
          break;
 8008a66:	e01f      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	330c      	adds	r3, #12
 8008a6e:	623b      	str	r3, [r7, #32]
          break;
 8008a70:	e01a      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008a7a:	2304      	movs	r3, #4
 8008a7c:	623b      	str	r3, [r7, #32]
          break;
 8008a7e:	e013      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d105      	bne.n	8008a94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a88:	2308      	movs	r3, #8
 8008a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	611a      	str	r2, [r3, #16]
          break;
 8008a92:	e009      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a94:	2308      	movs	r3, #8
 8008a96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	615a      	str	r2, [r3, #20]
          break;
 8008a9e:	e003      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	623b      	str	r3, [r7, #32]
          break;
 8008aa4:	e000      	b.n	8008aa8 <HAL_GPIO_Init+0x130>
          break;
 8008aa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	2bff      	cmp	r3, #255	; 0xff
 8008aac:	d801      	bhi.n	8008ab2 <HAL_GPIO_Init+0x13a>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	e001      	b.n	8008ab6 <HAL_GPIO_Init+0x13e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	2bff      	cmp	r3, #255	; 0xff
 8008abc:	d802      	bhi.n	8008ac4 <HAL_GPIO_Init+0x14c>
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	e002      	b.n	8008aca <HAL_GPIO_Init+0x152>
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	3b08      	subs	r3, #8
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	210f      	movs	r1, #15
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	401a      	ands	r2, r3
 8008adc:	6a39      	ldr	r1, [r7, #32]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80c1 	beq.w	8008c7a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008af8:	4b53      	ldr	r3, [pc, #332]	; (8008c48 <HAL_GPIO_Init+0x2d0>)
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	4a52      	ldr	r2, [pc, #328]	; (8008c48 <HAL_GPIO_Init+0x2d0>)
 8008afe:	f043 0301 	orr.w	r3, r3, #1
 8008b02:	6193      	str	r3, [r2, #24]
 8008b04:	4b50      	ldr	r3, [pc, #320]	; (8008c48 <HAL_GPIO_Init+0x2d0>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	60bb      	str	r3, [r7, #8]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008b10:	4a4e      	ldr	r2, [pc, #312]	; (8008c4c <HAL_GPIO_Init+0x2d4>)
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	089b      	lsrs	r3, r3, #2
 8008b16:	3302      	adds	r3, #2
 8008b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	220f      	movs	r2, #15
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4013      	ands	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a46      	ldr	r2, [pc, #280]	; (8008c50 <HAL_GPIO_Init+0x2d8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d01f      	beq.n	8008b7c <HAL_GPIO_Init+0x204>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a45      	ldr	r2, [pc, #276]	; (8008c54 <HAL_GPIO_Init+0x2dc>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d019      	beq.n	8008b78 <HAL_GPIO_Init+0x200>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a44      	ldr	r2, [pc, #272]	; (8008c58 <HAL_GPIO_Init+0x2e0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d013      	beq.n	8008b74 <HAL_GPIO_Init+0x1fc>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a43      	ldr	r2, [pc, #268]	; (8008c5c <HAL_GPIO_Init+0x2e4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00d      	beq.n	8008b70 <HAL_GPIO_Init+0x1f8>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a42      	ldr	r2, [pc, #264]	; (8008c60 <HAL_GPIO_Init+0x2e8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d007      	beq.n	8008b6c <HAL_GPIO_Init+0x1f4>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a41      	ldr	r2, [pc, #260]	; (8008c64 <HAL_GPIO_Init+0x2ec>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d101      	bne.n	8008b68 <HAL_GPIO_Init+0x1f0>
 8008b64:	2305      	movs	r3, #5
 8008b66:	e00a      	b.n	8008b7e <HAL_GPIO_Init+0x206>
 8008b68:	2306      	movs	r3, #6
 8008b6a:	e008      	b.n	8008b7e <HAL_GPIO_Init+0x206>
 8008b6c:	2304      	movs	r3, #4
 8008b6e:	e006      	b.n	8008b7e <HAL_GPIO_Init+0x206>
 8008b70:	2303      	movs	r3, #3
 8008b72:	e004      	b.n	8008b7e <HAL_GPIO_Init+0x206>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e002      	b.n	8008b7e <HAL_GPIO_Init+0x206>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <HAL_GPIO_Init+0x206>
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b80:	f002 0203 	and.w	r2, r2, #3
 8008b84:	0092      	lsls	r2, r2, #2
 8008b86:	4093      	lsls	r3, r2
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008b8e:	492f      	ldr	r1, [pc, #188]	; (8008c4c <HAL_GPIO_Init+0x2d4>)
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	089b      	lsrs	r3, r3, #2
 8008b94:	3302      	adds	r3, #2
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d006      	beq.n	8008bb6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008ba8:	4b2f      	ldr	r3, [pc, #188]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	492e      	ldr	r1, [pc, #184]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	600b      	str	r3, [r1, #0]
 8008bb4:	e006      	b.n	8008bc4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008bb6:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	492a      	ldr	r1, [pc, #168]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008bd0:	4b25      	ldr	r3, [pc, #148]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	4924      	ldr	r1, [pc, #144]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	604b      	str	r3, [r1, #4]
 8008bdc:	e006      	b.n	8008bec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008bde:	4b22      	ldr	r3, [pc, #136]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	43db      	mvns	r3, r3
 8008be6:	4920      	ldr	r1, [pc, #128]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d006      	beq.n	8008c06 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008bf8:	4b1b      	ldr	r3, [pc, #108]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	491a      	ldr	r1, [pc, #104]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	608b      	str	r3, [r1, #8]
 8008c04:	e006      	b.n	8008c14 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008c06:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	4916      	ldr	r1, [pc, #88]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d025      	beq.n	8008c6c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	4910      	ldr	r1, [pc, #64]	; (8008c68 <HAL_GPIO_Init+0x2f0>)
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60cb      	str	r3, [r1, #12]
 8008c2c:	e025      	b.n	8008c7a <HAL_GPIO_Init+0x302>
 8008c2e:	bf00      	nop
 8008c30:	10320000 	.word	0x10320000
 8008c34:	10310000 	.word	0x10310000
 8008c38:	10220000 	.word	0x10220000
 8008c3c:	10210000 	.word	0x10210000
 8008c40:	10120000 	.word	0x10120000
 8008c44:	10110000 	.word	0x10110000
 8008c48:	40021000 	.word	0x40021000
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	40010800 	.word	0x40010800
 8008c54:	40010c00 	.word	0x40010c00
 8008c58:	40011000 	.word	0x40011000
 8008c5c:	40011400 	.word	0x40011400
 8008c60:	40011800 	.word	0x40011800
 8008c64:	40011c00 	.word	0x40011c00
 8008c68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008c6c:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <HAL_GPIO_Init+0x324>)
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	43db      	mvns	r3, r3
 8008c74:	4909      	ldr	r1, [pc, #36]	; (8008c9c <HAL_GPIO_Init+0x324>)
 8008c76:	4013      	ands	r3, r2
 8008c78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f ae7e 	bne.w	800898c <HAL_GPIO_Init+0x14>
  }
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	372c      	adds	r7, #44	; 0x2c
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	40010400 	.word	0x40010400

08008ca0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689a      	ldr	r2, [r3, #8]
 8008cb0:	887b      	ldrh	r3, [r7, #2]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
 8008cbc:	e001      	b.n	8008cc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bc80      	pop	{r7}
 8008ccc:	4770      	bx	lr

08008cce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	807b      	strh	r3, [r7, #2]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cde:	787b      	ldrb	r3, [r7, #1]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ce4:	887a      	ldrh	r2, [r7, #2]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008cea:	e003      	b.n	8008cf4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008cec:	887b      	ldrh	r3, [r7, #2]
 8008cee:	041a      	lsls	r2, r3, #16
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	611a      	str	r2, [r3, #16]
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bc80      	pop	{r7}
 8008cfc:	4770      	bx	lr

08008cfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d10:	887a      	ldrh	r2, [r7, #2]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4013      	ands	r3, r2
 8008d16:	041a      	lsls	r2, r3, #16
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	43d9      	mvns	r1, r3
 8008d1c:	887b      	ldrh	r3, [r7, #2]
 8008d1e:	400b      	ands	r3, r1
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	611a      	str	r2, [r3, #16]
}
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bc80      	pop	{r7}
 8008d2e:	4770      	bx	lr

08008d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e12b      	b.n	8008f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d106      	bne.n	8008d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7fa fc5c 	bl	8003614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2224      	movs	r2, #36	; 0x24
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0201 	bic.w	r2, r2, #1
 8008d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008d94:	f001 fd20 	bl	800a7d8 <HAL_RCC_GetPCLK1Freq>
 8008d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	4a81      	ldr	r2, [pc, #516]	; (8008fa4 <HAL_I2C_Init+0x274>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d807      	bhi.n	8008db4 <HAL_I2C_Init+0x84>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	4a80      	ldr	r2, [pc, #512]	; (8008fa8 <HAL_I2C_Init+0x278>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	bf94      	ite	ls
 8008dac:	2301      	movls	r3, #1
 8008dae:	2300      	movhi	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	e006      	b.n	8008dc2 <HAL_I2C_Init+0x92>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4a7d      	ldr	r2, [pc, #500]	; (8008fac <HAL_I2C_Init+0x27c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	bf94      	ite	ls
 8008dbc:	2301      	movls	r3, #1
 8008dbe:	2300      	movhi	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e0e7      	b.n	8008f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4a78      	ldr	r2, [pc, #480]	; (8008fb0 <HAL_I2C_Init+0x280>)
 8008dce:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd2:	0c9b      	lsrs	r3, r3, #18
 8008dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4a6a      	ldr	r2, [pc, #424]	; (8008fa4 <HAL_I2C_Init+0x274>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d802      	bhi.n	8008e04 <HAL_I2C_Init+0xd4>
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	3301      	adds	r3, #1
 8008e02:	e009      	b.n	8008e18 <HAL_I2C_Init+0xe8>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e0a:	fb02 f303 	mul.w	r3, r2, r3
 8008e0e:	4a69      	ldr	r2, [pc, #420]	; (8008fb4 <HAL_I2C_Init+0x284>)
 8008e10:	fba2 2303 	umull	r2, r3, r2, r3
 8008e14:	099b      	lsrs	r3, r3, #6
 8008e16:	3301      	adds	r3, #1
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	6812      	ldr	r2, [r2, #0]
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	495c      	ldr	r1, [pc, #368]	; (8008fa4 <HAL_I2C_Init+0x274>)
 8008e34:	428b      	cmp	r3, r1
 8008e36:	d819      	bhi.n	8008e6c <HAL_I2C_Init+0x13c>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	1e59      	subs	r1, r3, #1
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e46:	1c59      	adds	r1, r3, #1
 8008e48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e4c:	400b      	ands	r3, r1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <HAL_I2C_Init+0x138>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	1e59      	subs	r1, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e60:	3301      	adds	r3, #1
 8008e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e66:	e051      	b.n	8008f0c <HAL_I2C_Init+0x1dc>
 8008e68:	2304      	movs	r3, #4
 8008e6a:	e04f      	b.n	8008f0c <HAL_I2C_Init+0x1dc>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d111      	bne.n	8008e98 <HAL_I2C_Init+0x168>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	1e58      	subs	r0, r3, #1
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6859      	ldr	r1, [r3, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	440b      	add	r3, r1
 8008e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8008e86:	3301      	adds	r3, #1
 8008e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bf0c      	ite	eq
 8008e90:	2301      	moveq	r3, #1
 8008e92:	2300      	movne	r3, #0
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	e012      	b.n	8008ebe <HAL_I2C_Init+0x18e>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	1e58      	subs	r0, r3, #1
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6859      	ldr	r1, [r3, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	440b      	add	r3, r1
 8008ea6:	0099      	lsls	r1, r3, #2
 8008ea8:	440b      	add	r3, r1
 8008eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8008eae:	3301      	adds	r3, #1
 8008eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <HAL_I2C_Init+0x196>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e022      	b.n	8008f0c <HAL_I2C_Init+0x1dc>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10e      	bne.n	8008eec <HAL_I2C_Init+0x1bc>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	1e58      	subs	r0, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6859      	ldr	r1, [r3, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	440b      	add	r3, r1
 8008edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eea:	e00f      	b.n	8008f0c <HAL_I2C_Init+0x1dc>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	1e58      	subs	r0, r3, #1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	0099      	lsls	r1, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f02:	3301      	adds	r3, #1
 8008f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	6809      	ldr	r1, [r1, #0]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	69da      	ldr	r2, [r3, #28]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	6911      	ldr	r1, [r2, #16]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68d2      	ldr	r2, [r2, #12]
 8008f46:	4311      	orrs	r1, r2
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695a      	ldr	r2, [r3, #20]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0201 	orr.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	000186a0 	.word	0x000186a0
 8008fa8:	001e847f 	.word	0x001e847f
 8008fac:	003d08ff 	.word	0x003d08ff
 8008fb0:	431bde83 	.word	0x431bde83
 8008fb4:	10624dd3 	.word	0x10624dd3

08008fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	4608      	mov	r0, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	817b      	strh	r3, [r7, #10]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	813b      	strh	r3, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fd2:	f7fd fdc5 	bl	8006b60 <HAL_GetTick>
 8008fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	f040 80d9 	bne.w	8009198 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	2319      	movs	r3, #25
 8008fec:	2201      	movs	r2, #1
 8008fee:	496d      	ldr	r1, [pc, #436]	; (80091a4 <HAL_I2C_Mem_Write+0x1ec>)
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fdef 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e0cc      	b.n	800919a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <HAL_I2C_Mem_Write+0x56>
 800900a:	2302      	movs	r3, #2
 800900c:	e0c5      	b.n	800919a <HAL_I2C_Mem_Write+0x1e2>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2201      	movs	r2, #1
 8009012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b01      	cmp	r3, #1
 8009022:	d007      	beq.n	8009034 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0201 	orr.w	r2, r2, #1
 8009032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2221      	movs	r2, #33	; 0x21
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2240      	movs	r2, #64	; 0x40
 8009050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a3a      	ldr	r2, [r7, #32]
 800905e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009064:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	4a4d      	ldr	r2, [pc, #308]	; (80091a8 <HAL_I2C_Mem_Write+0x1f0>)
 8009074:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009076:	88f8      	ldrh	r0, [r7, #6]
 8009078:	893a      	ldrh	r2, [r7, #8]
 800907a:	8979      	ldrh	r1, [r7, #10]
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	4603      	mov	r3, r0
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fc26 	bl	80098d8 <I2C_RequestMemoryWrite>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d052      	beq.n	8009138 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e081      	b.n	800919a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fe70 	bl	8009d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d107      	bne.n	80090be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e06b      	b.n	800919a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	781a      	ldrb	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090dc:	3b01      	subs	r3, #1
 80090de:	b29a      	uxth	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b04      	cmp	r3, #4
 80090fe:	d11b      	bne.n	8009138 <HAL_I2C_Mem_Write+0x180>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009104:	2b00      	cmp	r3, #0
 8009106:	d017      	beq.n	8009138 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	781a      	ldrb	r2, [r3, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009122:	3b01      	subs	r3, #1
 8009124:	b29a      	uxth	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1aa      	bne.n	8009096 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fe5c 	bl	8009e02 <I2C_WaitOnBTFFlagUntilTimeout>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00d      	beq.n	800916c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	2b04      	cmp	r3, #4
 8009156:	d107      	bne.n	8009168 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e016      	b.n	800919a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800917a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2220      	movs	r2, #32
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	e000      	b.n	800919a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009198:	2302      	movs	r3, #2
  }
}
 800919a:	4618      	mov	r0, r3
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	00100002 	.word	0x00100002
 80091a8:	ffff0000 	.word	0xffff0000

080091ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08c      	sub	sp, #48	; 0x30
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	461a      	mov	r2, r3
 80091ba:	4603      	mov	r3, r0
 80091bc:	817b      	strh	r3, [r7, #10]
 80091be:	460b      	mov	r3, r1
 80091c0:	813b      	strh	r3, [r7, #8]
 80091c2:	4613      	mov	r3, r2
 80091c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091ca:	f7fd fcc9 	bl	8006b60 <HAL_GetTick>
 80091ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b20      	cmp	r3, #32
 80091da:	f040 8244 	bne.w	8009666 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	2319      	movs	r3, #25
 80091e4:	2201      	movs	r2, #1
 80091e6:	4982      	ldr	r1, [pc, #520]	; (80093f0 <HAL_I2C_Mem_Read+0x244>)
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fcf3 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80091f4:	2302      	movs	r3, #2
 80091f6:	e237      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d101      	bne.n	8009206 <HAL_I2C_Mem_Read+0x5a>
 8009202:	2302      	movs	r3, #2
 8009204:	e230      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b01      	cmp	r3, #1
 800921a:	d007      	beq.n	800922c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f042 0201 	orr.w	r2, r2, #1
 800922a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800923a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2222      	movs	r2, #34	; 0x22
 8009240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2240      	movs	r2, #64	; 0x40
 8009248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800925c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009262:	b29a      	uxth	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4a62      	ldr	r2, [pc, #392]	; (80093f4 <HAL_I2C_Mem_Read+0x248>)
 800926c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800926e:	88f8      	ldrh	r0, [r7, #6]
 8009270:	893a      	ldrh	r2, [r7, #8]
 8009272:	8979      	ldrh	r1, [r7, #10]
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	4603      	mov	r3, r0
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fbc0 	bl	8009a04 <I2C_RequestMemoryRead>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e1ec      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009292:	2b00      	cmp	r3, #0
 8009294:	d113      	bne.n	80092be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009296:	2300      	movs	r3, #0
 8009298:	61fb      	str	r3, [r7, #28]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	61fb      	str	r3, [r7, #28]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	61fb      	str	r3, [r7, #28]
 80092aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ba:	601a      	str	r2, [r3, #0]
 80092bc:	e1c0      	b.n	8009640 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d11e      	bne.n	8009304 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80092d6:	b672      	cpsid	i
}
 80092d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092da:	2300      	movs	r3, #0
 80092dc:	61bb      	str	r3, [r7, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	695b      	ldr	r3, [r3, #20]
 80092e4:	61bb      	str	r3, [r7, #24]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009300:	b662      	cpsie	i
}
 8009302:	e035      	b.n	8009370 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009308:	2b02      	cmp	r3, #2
 800930a:	d11e      	bne.n	800934a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800931a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800931c:	b672      	cpsid	i
}
 800931e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	695b      	ldr	r3, [r3, #20]
 800932a:	617b      	str	r3, [r7, #20]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009344:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009346:	b662      	cpsie	i
}
 8009348:	e012      	b.n	8009370 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009358:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800935a:	2300      	movs	r3, #0
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009370:	e166      	b.n	8009640 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009376:	2b03      	cmp	r3, #3
 8009378:	f200 811f 	bhi.w	80095ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009380:	2b01      	cmp	r3, #1
 8009382:	d123      	bne.n	80093cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009386:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fd7b 	bl	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e167      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	691a      	ldr	r2, [r3, #16]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093ca:	e139      	b.n	8009640 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d152      	bne.n	800947a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	2200      	movs	r2, #0
 80093dc:	4906      	ldr	r1, [pc, #24]	; (80093f8 <HAL_I2C_Mem_Read+0x24c>)
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fbf8 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d008      	beq.n	80093fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e13c      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
 80093ee:	bf00      	nop
 80093f0:	00100002 	.word	0x00100002
 80093f4:	ffff0000 	.word	0xffff0000
 80093f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80093fc:	b672      	cpsid	i
}
 80093fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800940e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942c:	3b01      	subs	r3, #1
 800942e:	b29a      	uxth	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b01      	subs	r3, #1
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009442:	b662      	cpsie	i
}
 8009444:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009478:	e0e2      	b.n	8009640 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	2200      	movs	r2, #0
 8009482:	497b      	ldr	r1, [pc, #492]	; (8009670 <HAL_I2C_Mem_Read+0x4c4>)
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fba5 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e0e9      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80094a4:	b672      	cpsid	i
}
 80094a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b2:	b2d2      	uxtb	r2, r2
 80094b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c4:	3b01      	subs	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	3b01      	subs	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80094da:	4b66      	ldr	r3, [pc, #408]	; (8009674 <HAL_I2C_Mem_Read+0x4c8>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	08db      	lsrs	r3, r3, #3
 80094e0:	4a65      	ldr	r2, [pc, #404]	; (8009678 <HAL_I2C_Mem_Read+0x4cc>)
 80094e2:	fba2 2303 	umull	r2, r3, r2, r3
 80094e6:	0a1a      	lsrs	r2, r3, #8
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	00da      	lsls	r2, r3, #3
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d118      	bne.n	8009532 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2220      	movs	r2, #32
 800950a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951a:	f043 0220 	orr.w	r2, r3, #32
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009522:	b662      	cpsie	i
}
 8009524:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e09a      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b04      	cmp	r3, #4
 800953e:	d1d9      	bne.n	80094f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691a      	ldr	r2, [r3, #16]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956c:	3b01      	subs	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009582:	b662      	cpsie	i
}
 8009584:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	691a      	ldr	r2, [r3, #16]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	b2d2      	uxtb	r2, r2
 8009592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	1c5a      	adds	r2, r3, #1
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095b8:	e042      	b.n	8009640 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fc60 	bl	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e04c      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	b2d2      	uxtb	r2, r2
 80095da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	3b01      	subs	r3, #1
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b04      	cmp	r3, #4
 800960c:	d118      	bne.n	8009640 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	691a      	ldr	r2, [r3, #16]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	b2d2      	uxtb	r2, r2
 800961a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	1c5a      	adds	r2, r3, #1
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962a:	3b01      	subs	r3, #1
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009636:	b29b      	uxth	r3, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	b29a      	uxth	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009644:	2b00      	cmp	r3, #0
 8009646:	f47f ae94 	bne.w	8009372 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2220      	movs	r2, #32
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	e000      	b.n	8009668 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009666:	2302      	movs	r3, #2
  }
}
 8009668:	4618      	mov	r0, r3
 800966a:	3728      	adds	r7, #40	; 0x28
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	00010004 	.word	0x00010004
 8009674:	2000003c 	.word	0x2000003c
 8009678:	14f8b589 	.word	0x14f8b589

0800967c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	; 0x28
 8009680:	af02      	add	r7, sp, #8
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	460b      	mov	r3, r1
 800968a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800968c:	f7fd fa68 	bl	8006b60 <HAL_GetTick>
 8009690:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009692:	2301      	movs	r3, #1
 8009694:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b20      	cmp	r3, #32
 80096a0:	f040 8111 	bne.w	80098c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	9300      	str	r3, [sp, #0]
 80096a8:	2319      	movs	r3, #25
 80096aa:	2201      	movs	r2, #1
 80096ac:	4988      	ldr	r1, [pc, #544]	; (80098d0 <HAL_I2C_IsDeviceReady+0x254>)
 80096ae:	68f8      	ldr	r0, [r7, #12]
 80096b0:	f000 fa90 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80096ba:	2302      	movs	r3, #2
 80096bc:	e104      	b.n	80098c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_I2C_IsDeviceReady+0x50>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e0fd      	b.n	80098c8 <HAL_I2C_IsDeviceReady+0x24c>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d007      	beq.n	80096f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f042 0201 	orr.w	r2, r2, #1
 80096f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009700:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2224      	movs	r2, #36	; 0x24
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4a70      	ldr	r2, [pc, #448]	; (80098d4 <HAL_I2C_IsDeviceReady+0x258>)
 8009714:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009724:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2200      	movs	r2, #0
 800972e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fa4e 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00d      	beq.n	800975a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800974c:	d103      	bne.n	8009756 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009754:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e0b6      	b.n	80098c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800975a:	897b      	ldrh	r3, [r7, #10]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009768:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800976a:	f7fd f9f9 	bl	8006b60 <HAL_GetTick>
 800976e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b02      	cmp	r3, #2
 800977c:	bf0c      	ite	eq
 800977e:	2301      	moveq	r3, #1
 8009780:	2300      	movne	r3, #0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009794:	bf0c      	ite	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	2300      	movne	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800979e:	e025      	b.n	80097ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80097a0:	f7fd f9de 	bl	8006b60 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d302      	bcc.n	80097b6 <HAL_I2C_IsDeviceReady+0x13a>
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d103      	bne.n	80097be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	22a0      	movs	r2, #160	; 0xa0
 80097ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	695b      	ldr	r3, [r3, #20]
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	bf0c      	ite	eq
 80097cc:	2301      	moveq	r3, #1
 80097ce:	2300      	movne	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e2:	bf0c      	ite	eq
 80097e4:	2301      	moveq	r3, #1
 80097e6:	2300      	movne	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2ba0      	cmp	r3, #160	; 0xa0
 80097f6:	d005      	beq.n	8009804 <HAL_I2C_IsDeviceReady+0x188>
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <HAL_I2C_IsDeviceReady+0x188>
 80097fe:	7dbb      	ldrb	r3, [r7, #22]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0cd      	beq.n	80097a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	2b02      	cmp	r3, #2
 8009818:	d129      	bne.n	800986e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009828:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800982a:	2300      	movs	r3, #0
 800982c:	613b      	str	r3, [r7, #16]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	613b      	str	r3, [r7, #16]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	613b      	str	r3, [r7, #16]
 800983e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	2319      	movs	r3, #25
 8009846:	2201      	movs	r2, #1
 8009848:	4921      	ldr	r1, [pc, #132]	; (80098d0 <HAL_I2C_IsDeviceReady+0x254>)
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f9c2 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e036      	b.n	80098c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2220      	movs	r2, #32
 800985e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	e02c      	b.n	80098c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800987c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009886:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009888:	69fb      	ldr	r3, [r7, #28]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	2319      	movs	r3, #25
 800988e:	2201      	movs	r2, #1
 8009890:	490f      	ldr	r1, [pc, #60]	; (80098d0 <HAL_I2C_IsDeviceReady+0x254>)
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 f99e 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e012      	b.n	80098c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	3301      	adds	r3, #1
 80098a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	f4ff af32 	bcc.w	8009716 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e000      	b.n	80098c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80098c6:	2302      	movs	r3, #2
  }
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3720      	adds	r7, #32
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	00100002 	.word	0x00100002
 80098d4:	ffff0000 	.word	0xffff0000

080098d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af02      	add	r7, sp, #8
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	4608      	mov	r0, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	4603      	mov	r3, r0
 80098e8:	817b      	strh	r3, [r7, #10]
 80098ea:	460b      	mov	r3, r1
 80098ec:	813b      	strh	r3, [r7, #8]
 80098ee:	4613      	mov	r3, r2
 80098f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	2200      	movs	r2, #0
 800990a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f960 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00d      	beq.n	8009936 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009928:	d103      	bne.n	8009932 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009930:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e05f      	b.n	80099f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009936:	897b      	ldrh	r3, [r7, #10]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	461a      	mov	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009948:	6a3a      	ldr	r2, [r7, #32]
 800994a:	492d      	ldr	r1, [pc, #180]	; (8009a00 <I2C_RequestMemoryWrite+0x128>)
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f998 	bl	8009c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e04c      	b.n	80099f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800995c:	2300      	movs	r3, #0
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009974:	6a39      	ldr	r1, [r7, #32]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 fa02 	bl	8009d80 <I2C_WaitOnTXEFlagUntilTimeout>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00d      	beq.n	800999e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009986:	2b04      	cmp	r3, #4
 8009988:	d107      	bne.n	800999a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e02b      	b.n	80099f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800999e:	88fb      	ldrh	r3, [r7, #6]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d105      	bne.n	80099b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099a4:	893b      	ldrh	r3, [r7, #8]
 80099a6:	b2da      	uxtb	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	611a      	str	r2, [r3, #16]
 80099ae:	e021      	b.n	80099f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80099b0:	893b      	ldrh	r3, [r7, #8]
 80099b2:	0a1b      	lsrs	r3, r3, #8
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	b2da      	uxtb	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c0:	6a39      	ldr	r1, [r7, #32]
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 f9dc 	bl	8009d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00d      	beq.n	80099ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	2b04      	cmp	r3, #4
 80099d4:	d107      	bne.n	80099e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e005      	b.n	80099f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099ea:	893b      	ldrh	r3, [r7, #8]
 80099ec:	b2da      	uxtb	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80099f4:	2300      	movs	r3, #0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	00010002 	.word	0x00010002

08009a04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b088      	sub	sp, #32
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	461a      	mov	r2, r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	817b      	strh	r3, [r7, #10]
 8009a16:	460b      	mov	r3, r1
 8009a18:	813b      	strh	r3, [r7, #8]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 f8c2 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00d      	beq.n	8009a72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a64:	d103      	bne.n	8009a6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e0aa      	b.n	8009bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a72:	897b      	ldrh	r3, [r7, #10]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	6a3a      	ldr	r2, [r7, #32]
 8009a86:	4952      	ldr	r1, [pc, #328]	; (8009bd0 <I2C_RequestMemoryRead+0x1cc>)
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 f8fa 	bl	8009c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e097      	b.n	8009bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a98:	2300      	movs	r3, #0
 8009a9a:	617b      	str	r3, [r7, #20]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	617b      	str	r3, [r7, #20]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab0:	6a39      	ldr	r1, [r7, #32]
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f964 	bl	8009d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00d      	beq.n	8009ada <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d107      	bne.n	8009ad6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e076      	b.n	8009bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ada:	88fb      	ldrh	r3, [r7, #6]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d105      	bne.n	8009aec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ae0:	893b      	ldrh	r3, [r7, #8]
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	611a      	str	r2, [r3, #16]
 8009aea:	e021      	b.n	8009b30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009aec:	893b      	ldrh	r3, [r7, #8]
 8009aee:	0a1b      	lsrs	r3, r3, #8
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afc:	6a39      	ldr	r1, [r7, #32]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f000 f93e 	bl	8009d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00d      	beq.n	8009b26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d107      	bne.n	8009b22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e050      	b.n	8009bc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b26:	893b      	ldrh	r3, [r7, #8]
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b32:	6a39      	ldr	r1, [r7, #32]
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 f923 	bl	8009d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00d      	beq.n	8009b5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	d107      	bne.n	8009b58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e035      	b.n	8009bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f82b 	bl	8009bd4 <I2C_WaitOnFlagUntilTimeout>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00d      	beq.n	8009ba0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b92:	d103      	bne.n	8009b9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e013      	b.n	8009bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009ba0:	897b      	ldrh	r3, [r7, #10]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f043 0301 	orr.w	r3, r3, #1
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	6a3a      	ldr	r2, [r7, #32]
 8009bb4:	4906      	ldr	r1, [pc, #24]	; (8009bd0 <I2C_RequestMemoryRead+0x1cc>)
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 f863 	bl	8009c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	00010002 	.word	0x00010002

08009bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	4613      	mov	r3, r2
 8009be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009be4:	e025      	b.n	8009c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d021      	beq.n	8009c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bee:	f7fc ffb7 	bl	8006b60 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d302      	bcc.n	8009c04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d116      	bne.n	8009c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	f043 0220 	orr.w	r2, r3, #32
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e023      	b.n	8009c7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d10d      	bne.n	8009c58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	695b      	ldr	r3, [r3, #20]
 8009c42:	43da      	mvns	r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	4013      	ands	r3, r2
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	bf0c      	ite	eq
 8009c4e:	2301      	moveq	r3, #1
 8009c50:	2300      	movne	r3, #0
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	e00c      	b.n	8009c72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	699b      	ldr	r3, [r3, #24]
 8009c5e:	43da      	mvns	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4013      	ands	r3, r2
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bf0c      	ite	eq
 8009c6a:	2301      	moveq	r3, #1
 8009c6c:	2300      	movne	r3, #0
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	461a      	mov	r2, r3
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d0b6      	beq.n	8009be6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c90:	e051      	b.n	8009d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca0:	d123      	bne.n	8009cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009cba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	f043 0204 	orr.w	r2, r3, #4
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e046      	b.n	8009d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf0:	d021      	beq.n	8009d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf2:	f7fc ff35 	bl	8006b60 <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d302      	bcc.n	8009d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d116      	bne.n	8009d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2220      	movs	r2, #32
 8009d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	f043 0220 	orr.w	r2, r3, #32
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e020      	b.n	8009d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	0c1b      	lsrs	r3, r3, #16
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d10c      	bne.n	8009d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	43da      	mvns	r2, r3
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bf14      	ite	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	2300      	moveq	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	e00b      	b.n	8009d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	43da      	mvns	r2, r3
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4013      	ands	r3, r2
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bf14      	ite	ne
 8009d6c:	2301      	movne	r3, #1
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d18d      	bne.n	8009c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d8c:	e02d      	b.n	8009dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f8ce 	bl	8009f30 <I2C_IsAcknowledgeFailed>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e02d      	b.n	8009dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da4:	d021      	beq.n	8009dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009da6:	f7fc fedb 	bl	8006b60 <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d302      	bcc.n	8009dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d116      	bne.n	8009dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f043 0220 	orr.w	r2, r3, #32
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e007      	b.n	8009dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df4:	2b80      	cmp	r3, #128	; 0x80
 8009df6:	d1ca      	bne.n	8009d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	60f8      	str	r0, [r7, #12]
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e0e:	e02d      	b.n	8009e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 f88d 	bl	8009f30 <I2C_IsAcknowledgeFailed>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e02d      	b.n	8009e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e26:	d021      	beq.n	8009e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e28:	f7fc fe9a 	bl	8006b60 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	429a      	cmp	r2, r3
 8009e36:	d302      	bcc.n	8009e3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d116      	bne.n	8009e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e58:	f043 0220 	orr.w	r2, r3, #32
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e007      	b.n	8009e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d1ca      	bne.n	8009e10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e90:	e042      	b.n	8009f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d119      	bne.n	8009ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0210 	mvn.w	r2, #16
 8009ea8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e029      	b.n	8009f28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed4:	f7fc fe44 	bl	8006b60 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d302      	bcc.n	8009eea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d116      	bne.n	8009f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	f043 0220 	orr.w	r2, r3, #32
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e007      	b.n	8009f28 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f22:	2b40      	cmp	r3, #64	; 0x40
 8009f24:	d1b5      	bne.n	8009e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f46:	d11b      	bne.n	8009f80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6c:	f043 0204 	orr.w	r2, r3, #4
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc80      	pop	{r7}
 8009f8a:	4770      	bx	lr

08009f8c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e034      	b.n	800a008 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009fa6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f245 5255 	movw	r2, #21845	; 0x5555
 8009fb0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	6852      	ldr	r2, [r2, #4]
 8009fba:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6892      	ldr	r2, [r2, #8]
 8009fc4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009fc6:	f7fc fdcb 	bl	8006b60 <HAL_GetTick>
 8009fca:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009fcc:	e00f      	b.n	8009fee <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009fce:	f7fc fdc7 	bl	8006b60 <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	2b27      	cmp	r3, #39	; 0x27
 8009fda:	d908      	bls.n	8009fee <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009fea:	2303      	movs	r3, #3
 8009fec:	e00c      	b.n	800a008 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f003 0303 	and.w	r3, r3, #3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e8      	bne.n	8009fce <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a004:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a020:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	bc80      	pop	{r7}
 800a02c:	4770      	bx	lr
	...

0800a030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e26c      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 8087 	beq.w	800a15e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a050:	4b92      	ldr	r3, [pc, #584]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f003 030c 	and.w	r3, r3, #12
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d00c      	beq.n	800a076 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a05c:	4b8f      	ldr	r3, [pc, #572]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f003 030c 	and.w	r3, r3, #12
 800a064:	2b08      	cmp	r3, #8
 800a066:	d112      	bne.n	800a08e <HAL_RCC_OscConfig+0x5e>
 800a068:	4b8c      	ldr	r3, [pc, #560]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a074:	d10b      	bne.n	800a08e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a076:	4b89      	ldr	r3, [pc, #548]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d06c      	beq.n	800a15c <HAL_RCC_OscConfig+0x12c>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d168      	bne.n	800a15c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e246      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a096:	d106      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x76>
 800a098:	4b80      	ldr	r3, [pc, #512]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a7f      	ldr	r2, [pc, #508]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a09e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	e02e      	b.n	800a104 <HAL_RCC_OscConfig+0xd4>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10c      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x98>
 800a0ae:	4b7b      	ldr	r3, [pc, #492]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a7a      	ldr	r2, [pc, #488]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0b8:	6013      	str	r3, [r2, #0]
 800a0ba:	4b78      	ldr	r3, [pc, #480]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a77      	ldr	r2, [pc, #476]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e01d      	b.n	800a104 <HAL_RCC_OscConfig+0xd4>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0d0:	d10c      	bne.n	800a0ec <HAL_RCC_OscConfig+0xbc>
 800a0d2:	4b72      	ldr	r3, [pc, #456]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a71      	ldr	r2, [pc, #452]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	4b6f      	ldr	r3, [pc, #444]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a6e      	ldr	r2, [pc, #440]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	e00b      	b.n	800a104 <HAL_RCC_OscConfig+0xd4>
 800a0ec:	4b6b      	ldr	r3, [pc, #428]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a6a      	ldr	r2, [pc, #424]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	4b68      	ldr	r3, [pc, #416]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a67      	ldr	r2, [pc, #412]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a0fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a102:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d013      	beq.n	800a134 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a10c:	f7fc fd28 	bl	8006b60 <HAL_GetTick>
 800a110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a112:	e008      	b.n	800a126 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a114:	f7fc fd24 	bl	8006b60 <HAL_GetTick>
 800a118:	4602      	mov	r2, r0
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	1ad3      	subs	r3, r2, r3
 800a11e:	2b64      	cmp	r3, #100	; 0x64
 800a120:	d901      	bls.n	800a126 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e1fa      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a126:	4b5d      	ldr	r3, [pc, #372]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0f0      	beq.n	800a114 <HAL_RCC_OscConfig+0xe4>
 800a132:	e014      	b.n	800a15e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a134:	f7fc fd14 	bl	8006b60 <HAL_GetTick>
 800a138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a13a:	e008      	b.n	800a14e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a13c:	f7fc fd10 	bl	8006b60 <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b64      	cmp	r3, #100	; 0x64
 800a148:	d901      	bls.n	800a14e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e1e6      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a14e:	4b53      	ldr	r3, [pc, #332]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1f0      	bne.n	800a13c <HAL_RCC_OscConfig+0x10c>
 800a15a:	e000      	b.n	800a15e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a15c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0302 	and.w	r3, r3, #2
 800a166:	2b00      	cmp	r3, #0
 800a168:	d063      	beq.n	800a232 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a16a:	4b4c      	ldr	r3, [pc, #304]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	f003 030c 	and.w	r3, r3, #12
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00b      	beq.n	800a18e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a176:	4b49      	ldr	r3, [pc, #292]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f003 030c 	and.w	r3, r3, #12
 800a17e:	2b08      	cmp	r3, #8
 800a180:	d11c      	bne.n	800a1bc <HAL_RCC_OscConfig+0x18c>
 800a182:	4b46      	ldr	r3, [pc, #280]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d116      	bne.n	800a1bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a18e:	4b43      	ldr	r3, [pc, #268]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0302 	and.w	r3, r3, #2
 800a196:	2b00      	cmp	r3, #0
 800a198:	d005      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x176>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d001      	beq.n	800a1a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e1ba      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1a6:	4b3d      	ldr	r3, [pc, #244]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4939      	ldr	r1, [pc, #228]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1ba:	e03a      	b.n	800a232 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d020      	beq.n	800a206 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a1c4:	4b36      	ldr	r3, [pc, #216]	; (800a2a0 <HAL_RCC_OscConfig+0x270>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1ca:	f7fc fcc9 	bl	8006b60 <HAL_GetTick>
 800a1ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1d0:	e008      	b.n	800a1e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1d2:	f7fc fcc5 	bl	8006b60 <HAL_GetTick>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d901      	bls.n	800a1e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e19b      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1e4:	4b2d      	ldr	r3, [pc, #180]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0302 	and.w	r3, r3, #2
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0f0      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1f0:	4b2a      	ldr	r3, [pc, #168]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	00db      	lsls	r3, r3, #3
 800a1fe:	4927      	ldr	r1, [pc, #156]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a200:	4313      	orrs	r3, r2
 800a202:	600b      	str	r3, [r1, #0]
 800a204:	e015      	b.n	800a232 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a206:	4b26      	ldr	r3, [pc, #152]	; (800a2a0 <HAL_RCC_OscConfig+0x270>)
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a20c:	f7fc fca8 	bl	8006b60 <HAL_GetTick>
 800a210:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a212:	e008      	b.n	800a226 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a214:	f7fc fca4 	bl	8006b60 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d901      	bls.n	800a226 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a222:	2303      	movs	r3, #3
 800a224:	e17a      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a226:	4b1d      	ldr	r3, [pc, #116]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f0      	bne.n	800a214 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0308 	and.w	r3, r3, #8
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d03a      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d019      	beq.n	800a27a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a246:	4b17      	ldr	r3, [pc, #92]	; (800a2a4 <HAL_RCC_OscConfig+0x274>)
 800a248:	2201      	movs	r2, #1
 800a24a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a24c:	f7fc fc88 	bl	8006b60 <HAL_GetTick>
 800a250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a252:	e008      	b.n	800a266 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a254:	f7fc fc84 	bl	8006b60 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d901      	bls.n	800a266 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e15a      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <HAL_RCC_OscConfig+0x26c>)
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d0f0      	beq.n	800a254 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a272:	2001      	movs	r0, #1
 800a274:	f000 fac4 	bl	800a800 <RCC_Delay>
 800a278:	e01c      	b.n	800a2b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a27a:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <HAL_RCC_OscConfig+0x274>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a280:	f7fc fc6e 	bl	8006b60 <HAL_GetTick>
 800a284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a286:	e00f      	b.n	800a2a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a288:	f7fc fc6a 	bl	8006b60 <HAL_GetTick>
 800a28c:	4602      	mov	r2, r0
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	2b02      	cmp	r3, #2
 800a294:	d908      	bls.n	800a2a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a296:	2303      	movs	r3, #3
 800a298:	e140      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
 800a29a:	bf00      	nop
 800a29c:	40021000 	.word	0x40021000
 800a2a0:	42420000 	.word	0x42420000
 800a2a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2a8:	4b9e      	ldr	r3, [pc, #632]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1e9      	bne.n	800a288 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f000 80a6 	beq.w	800a40e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2c6:	4b97      	ldr	r3, [pc, #604]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10d      	bne.n	800a2ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2d2:	4b94      	ldr	r3, [pc, #592]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	4a93      	ldr	r2, [pc, #588]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2dc:	61d3      	str	r3, [r2, #28]
 800a2de:	4b91      	ldr	r3, [pc, #580]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a2e0:	69db      	ldr	r3, [r3, #28]
 800a2e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2e6:	60bb      	str	r3, [r7, #8]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a2ee:	4b8e      	ldr	r3, [pc, #568]	; (800a528 <HAL_RCC_OscConfig+0x4f8>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d118      	bne.n	800a32c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a2fa:	4b8b      	ldr	r3, [pc, #556]	; (800a528 <HAL_RCC_OscConfig+0x4f8>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a8a      	ldr	r2, [pc, #552]	; (800a528 <HAL_RCC_OscConfig+0x4f8>)
 800a300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a306:	f7fc fc2b 	bl	8006b60 <HAL_GetTick>
 800a30a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a30c:	e008      	b.n	800a320 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a30e:	f7fc fc27 	bl	8006b60 <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b64      	cmp	r3, #100	; 0x64
 800a31a:	d901      	bls.n	800a320 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e0fd      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a320:	4b81      	ldr	r3, [pc, #516]	; (800a528 <HAL_RCC_OscConfig+0x4f8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0f0      	beq.n	800a30e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	2b01      	cmp	r3, #1
 800a332:	d106      	bne.n	800a342 <HAL_RCC_OscConfig+0x312>
 800a334:	4b7b      	ldr	r3, [pc, #492]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	4a7a      	ldr	r2, [pc, #488]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a33a:	f043 0301 	orr.w	r3, r3, #1
 800a33e:	6213      	str	r3, [r2, #32]
 800a340:	e02d      	b.n	800a39e <HAL_RCC_OscConfig+0x36e>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10c      	bne.n	800a364 <HAL_RCC_OscConfig+0x334>
 800a34a:	4b76      	ldr	r3, [pc, #472]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	4a75      	ldr	r2, [pc, #468]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a350:	f023 0301 	bic.w	r3, r3, #1
 800a354:	6213      	str	r3, [r2, #32]
 800a356:	4b73      	ldr	r3, [pc, #460]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	4a72      	ldr	r2, [pc, #456]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a35c:	f023 0304 	bic.w	r3, r3, #4
 800a360:	6213      	str	r3, [r2, #32]
 800a362:	e01c      	b.n	800a39e <HAL_RCC_OscConfig+0x36e>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	2b05      	cmp	r3, #5
 800a36a:	d10c      	bne.n	800a386 <HAL_RCC_OscConfig+0x356>
 800a36c:	4b6d      	ldr	r3, [pc, #436]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	4a6c      	ldr	r2, [pc, #432]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a372:	f043 0304 	orr.w	r3, r3, #4
 800a376:	6213      	str	r3, [r2, #32]
 800a378:	4b6a      	ldr	r3, [pc, #424]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a37a:	6a1b      	ldr	r3, [r3, #32]
 800a37c:	4a69      	ldr	r2, [pc, #420]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a37e:	f043 0301 	orr.w	r3, r3, #1
 800a382:	6213      	str	r3, [r2, #32]
 800a384:	e00b      	b.n	800a39e <HAL_RCC_OscConfig+0x36e>
 800a386:	4b67      	ldr	r3, [pc, #412]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	4a66      	ldr	r2, [pc, #408]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a38c:	f023 0301 	bic.w	r3, r3, #1
 800a390:	6213      	str	r3, [r2, #32]
 800a392:	4b64      	ldr	r3, [pc, #400]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	4a63      	ldr	r2, [pc, #396]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a398:	f023 0304 	bic.w	r3, r3, #4
 800a39c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d015      	beq.n	800a3d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3a6:	f7fc fbdb 	bl	8006b60 <HAL_GetTick>
 800a3aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3ac:	e00a      	b.n	800a3c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3ae:	f7fc fbd7 	bl	8006b60 <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d901      	bls.n	800a3c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	e0ab      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a3c4:	4b57      	ldr	r3, [pc, #348]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	f003 0302 	and.w	r3, r3, #2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0ee      	beq.n	800a3ae <HAL_RCC_OscConfig+0x37e>
 800a3d0:	e014      	b.n	800a3fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3d2:	f7fc fbc5 	bl	8006b60 <HAL_GetTick>
 800a3d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3d8:	e00a      	b.n	800a3f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3da:	f7fc fbc1 	bl	8006b60 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d901      	bls.n	800a3f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e095      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3f0:	4b4c      	ldr	r3, [pc, #304]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a3f2:	6a1b      	ldr	r3, [r3, #32]
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1ee      	bne.n	800a3da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d105      	bne.n	800a40e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a402:	4b48      	ldr	r3, [pc, #288]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	4a47      	ldr	r2, [pc, #284]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a40c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 8081 	beq.w	800a51a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a418:	4b42      	ldr	r3, [pc, #264]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f003 030c 	and.w	r3, r3, #12
 800a420:	2b08      	cmp	r3, #8
 800a422:	d061      	beq.n	800a4e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	69db      	ldr	r3, [r3, #28]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d146      	bne.n	800a4ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a42c:	4b3f      	ldr	r3, [pc, #252]	; (800a52c <HAL_RCC_OscConfig+0x4fc>)
 800a42e:	2200      	movs	r2, #0
 800a430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a432:	f7fc fb95 	bl	8006b60 <HAL_GetTick>
 800a436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a438:	e008      	b.n	800a44c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a43a:	f7fc fb91 	bl	8006b60 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	d901      	bls.n	800a44c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e067      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a44c:	4b35      	ldr	r3, [pc, #212]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1f0      	bne.n	800a43a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a460:	d108      	bne.n	800a474 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a462:	4b30      	ldr	r3, [pc, #192]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	492d      	ldr	r1, [pc, #180]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a470:	4313      	orrs	r3, r2
 800a472:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a474:	4b2b      	ldr	r3, [pc, #172]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a19      	ldr	r1, [r3, #32]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a484:	430b      	orrs	r3, r1
 800a486:	4927      	ldr	r1, [pc, #156]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a488:	4313      	orrs	r3, r2
 800a48a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a48c:	4b27      	ldr	r3, [pc, #156]	; (800a52c <HAL_RCC_OscConfig+0x4fc>)
 800a48e:	2201      	movs	r2, #1
 800a490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a492:	f7fc fb65 	bl	8006b60 <HAL_GetTick>
 800a496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a498:	e008      	b.n	800a4ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a49a:	f7fc fb61 	bl	8006b60 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d901      	bls.n	800a4ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e037      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4ac:	4b1d      	ldr	r3, [pc, #116]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0f0      	beq.n	800a49a <HAL_RCC_OscConfig+0x46a>
 800a4b8:	e02f      	b.n	800a51a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4ba:	4b1c      	ldr	r3, [pc, #112]	; (800a52c <HAL_RCC_OscConfig+0x4fc>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4c0:	f7fc fb4e 	bl	8006b60 <HAL_GetTick>
 800a4c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4c6:	e008      	b.n	800a4da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4c8:	f7fc fb4a 	bl	8006b60 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d901      	bls.n	800a4da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e020      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4da:	4b12      	ldr	r3, [pc, #72]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1f0      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x498>
 800a4e6:	e018      	b.n	800a51a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	69db      	ldr	r3, [r3, #28]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d101      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e013      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <HAL_RCC_OscConfig+0x4f4>)
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	429a      	cmp	r2, r3
 800a506:	d106      	bne.n	800a516 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a512:	429a      	cmp	r2, r3
 800a514:	d001      	beq.n	800a51a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e000      	b.n	800a51c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	40021000 	.word	0x40021000
 800a528:	40007000 	.word	0x40007000
 800a52c:	42420060 	.word	0x42420060

0800a530 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e0d0      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a544:	4b6a      	ldr	r3, [pc, #424]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0307 	and.w	r3, r3, #7
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d910      	bls.n	800a574 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a552:	4b67      	ldr	r3, [pc, #412]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f023 0207 	bic.w	r2, r3, #7
 800a55a:	4965      	ldr	r1, [pc, #404]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	4313      	orrs	r3, r2
 800a560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a562:	4b63      	ldr	r3, [pc, #396]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d001      	beq.n	800a574 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e0b8      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d020      	beq.n	800a5c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0304 	and.w	r3, r3, #4
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d005      	beq.n	800a598 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a58c:	4b59      	ldr	r3, [pc, #356]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	4a58      	ldr	r2, [pc, #352]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a596:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0308 	and.w	r3, r3, #8
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a5a4:	4b53      	ldr	r3, [pc, #332]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4a52      	ldr	r2, [pc, #328]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a5aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a5ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5b0:	4b50      	ldr	r3, [pc, #320]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	494d      	ldr	r1, [pc, #308]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d040      	beq.n	800a650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d107      	bne.n	800a5e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5d6:	4b47      	ldr	r3, [pc, #284]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d115      	bne.n	800a60e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e07f      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d107      	bne.n	800a5fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5ee:	4b41      	ldr	r3, [pc, #260]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d109      	bne.n	800a60e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e073      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5fe:	4b3d      	ldr	r3, [pc, #244]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0302 	and.w	r3, r3, #2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e06b      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a60e:	4b39      	ldr	r3, [pc, #228]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f023 0203 	bic.w	r2, r3, #3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	4936      	ldr	r1, [pc, #216]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a620:	f7fc fa9e 	bl	8006b60 <HAL_GetTick>
 800a624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a626:	e00a      	b.n	800a63e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a628:	f7fc fa9a 	bl	8006b60 <HAL_GetTick>
 800a62c:	4602      	mov	r2, r0
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	f241 3288 	movw	r2, #5000	; 0x1388
 800a636:	4293      	cmp	r3, r2
 800a638:	d901      	bls.n	800a63e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a63a:	2303      	movs	r3, #3
 800a63c:	e053      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a63e:	4b2d      	ldr	r3, [pc, #180]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f003 020c 	and.w	r2, r3, #12
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d1eb      	bne.n	800a628 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a650:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 0307 	and.w	r3, r3, #7
 800a658:	683a      	ldr	r2, [r7, #0]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d210      	bcs.n	800a680 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a65e:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f023 0207 	bic.w	r2, r3, #7
 800a666:	4922      	ldr	r1, [pc, #136]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a66e:	4b20      	ldr	r3, [pc, #128]	; (800a6f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d001      	beq.n	800a680 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e032      	b.n	800a6e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0304 	and.w	r3, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d008      	beq.n	800a69e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a68c:	4b19      	ldr	r3, [pc, #100]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	4916      	ldr	r1, [pc, #88]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0308 	and.w	r3, r3, #8
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d009      	beq.n	800a6be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a6aa:	4b12      	ldr	r3, [pc, #72]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	490e      	ldr	r1, [pc, #56]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6be:	f000 f821 	bl	800a704 <HAL_RCC_GetSysClockFreq>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	4b0b      	ldr	r3, [pc, #44]	; (800a6f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	091b      	lsrs	r3, r3, #4
 800a6ca:	f003 030f 	and.w	r3, r3, #15
 800a6ce:	490a      	ldr	r1, [pc, #40]	; (800a6f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a6d0:	5ccb      	ldrb	r3, [r1, r3]
 800a6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d6:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <HAL_RCC_ClockConfig+0x1cc>)
 800a6d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a6da:	4b09      	ldr	r3, [pc, #36]	; (800a700 <HAL_RCC_ClockConfig+0x1d0>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fc f9fc 	bl	8006adc <HAL_InitTick>

  return HAL_OK;
 800a6e4:	2300      	movs	r3, #0
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40022000 	.word	0x40022000
 800a6f4:	40021000 	.word	0x40021000
 800a6f8:	080103e0 	.word	0x080103e0
 800a6fc:	2000003c 	.word	0x2000003c
 800a700:	20000040 	.word	0x20000040

0800a704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a704:	b490      	push	{r4, r7}
 800a706:	b08a      	sub	sp, #40	; 0x28
 800a708:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a70a:	4b2a      	ldr	r3, [pc, #168]	; (800a7b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800a70c:	1d3c      	adds	r4, r7, #4
 800a70e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a714:	f240 2301 	movw	r3, #513	; 0x201
 800a718:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	61fb      	str	r3, [r7, #28]
 800a71e:	2300      	movs	r3, #0
 800a720:	61bb      	str	r3, [r7, #24]
 800a722:	2300      	movs	r3, #0
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
 800a726:	2300      	movs	r3, #0
 800a728:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a72e:	4b22      	ldr	r3, [pc, #136]	; (800a7b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f003 030c 	and.w	r3, r3, #12
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d002      	beq.n	800a744 <HAL_RCC_GetSysClockFreq+0x40>
 800a73e:	2b08      	cmp	r3, #8
 800a740:	d003      	beq.n	800a74a <HAL_RCC_GetSysClockFreq+0x46>
 800a742:	e02d      	b.n	800a7a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a744:	4b1d      	ldr	r3, [pc, #116]	; (800a7bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a746:	623b      	str	r3, [r7, #32]
      break;
 800a748:	e02d      	b.n	800a7a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	0c9b      	lsrs	r3, r3, #18
 800a74e:	f003 030f 	and.w	r3, r3, #15
 800a752:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a756:	4413      	add	r3, r2
 800a758:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800a75c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d013      	beq.n	800a790 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a768:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	0c5b      	lsrs	r3, r3, #17
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a776:	4413      	add	r3, r2
 800a778:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a77c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	4a0e      	ldr	r2, [pc, #56]	; (800a7bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a782:	fb02 f203 	mul.w	r2, r2, r3
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
 800a78e:	e004      	b.n	800a79a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	4a0b      	ldr	r2, [pc, #44]	; (800a7c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a794:	fb02 f303 	mul.w	r3, r2, r3
 800a798:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	623b      	str	r3, [r7, #32]
      break;
 800a79e:	e002      	b.n	800a7a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a7a0:	4b06      	ldr	r3, [pc, #24]	; (800a7bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800a7a2:	623b      	str	r3, [r7, #32]
      break;
 800a7a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7a6:	6a3b      	ldr	r3, [r7, #32]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3728      	adds	r7, #40	; 0x28
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bc90      	pop	{r4, r7}
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	0800ffd0 	.word	0x0800ffd0
 800a7b8:	40021000 	.word	0x40021000
 800a7bc:	007a1200 	.word	0x007a1200
 800a7c0:	003d0900 	.word	0x003d0900

0800a7c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bc80      	pop	{r7}
 800a7d2:	4770      	bx	lr
 800a7d4:	2000003c 	.word	0x2000003c

0800a7d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a7dc:	f7ff fff2 	bl	800a7c4 <HAL_RCC_GetHCLKFreq>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	0a1b      	lsrs	r3, r3, #8
 800a7e8:	f003 0307 	and.w	r3, r3, #7
 800a7ec:	4903      	ldr	r1, [pc, #12]	; (800a7fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7ee:	5ccb      	ldrb	r3, [r1, r3]
 800a7f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	40021000 	.word	0x40021000
 800a7fc:	080103f0 	.word	0x080103f0

0800a800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a808:	4b0a      	ldr	r3, [pc, #40]	; (800a834 <RCC_Delay+0x34>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a0a      	ldr	r2, [pc, #40]	; (800a838 <RCC_Delay+0x38>)
 800a80e:	fba2 2303 	umull	r2, r3, r2, r3
 800a812:	0a5b      	lsrs	r3, r3, #9
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	fb02 f303 	mul.w	r3, r2, r3
 800a81a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a81c:	bf00      	nop
  }
  while (Delay --);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	1e5a      	subs	r2, r3, #1
 800a822:	60fa      	str	r2, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f9      	bne.n	800a81c <RCC_Delay+0x1c>
}
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	bc80      	pop	{r7}
 800a832:	4770      	bx	lr
 800a834:	2000003c 	.word	0x2000003c
 800a838:	10624dd3 	.word	0x10624dd3

0800a83c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]
 800a848:	2300      	movs	r3, #0
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d07d      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800a858:	2300      	movs	r3, #0
 800a85a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a85c:	4b4f      	ldr	r3, [pc, #316]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10d      	bne.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a868:	4b4c      	ldr	r3, [pc, #304]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a86a:	69db      	ldr	r3, [r3, #28]
 800a86c:	4a4b      	ldr	r2, [pc, #300]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a86e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a872:	61d3      	str	r3, [r2, #28]
 800a874:	4b49      	ldr	r3, [pc, #292]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a87c:	60bb      	str	r3, [r7, #8]
 800a87e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a880:	2301      	movs	r3, #1
 800a882:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a884:	4b46      	ldr	r3, [pc, #280]	; (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d118      	bne.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a890:	4b43      	ldr	r3, [pc, #268]	; (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a42      	ldr	r2, [pc, #264]	; (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a89a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a89c:	f7fc f960 	bl	8006b60 <HAL_GetTick>
 800a8a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8a2:	e008      	b.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8a4:	f7fc f95c 	bl	8006b60 <HAL_GetTick>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	2b64      	cmp	r3, #100	; 0x64
 800a8b0:	d901      	bls.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	e06d      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8b6:	4b3a      	ldr	r3, [pc, #232]	; (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0f0      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a8c2:	4b36      	ldr	r3, [pc, #216]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d02e      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d027      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a8e0:	4b2e      	ldr	r3, [pc, #184]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a8ea:	4b2e      	ldr	r3, [pc, #184]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a8f0:	4b2c      	ldr	r3, [pc, #176]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a8f6:	4a29      	ldr	r2, [pc, #164]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d014      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a906:	f7fc f92b 	bl	8006b60 <HAL_GetTick>
 800a90a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a90c:	e00a      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a90e:	f7fc f927 	bl	8006b60 <HAL_GetTick>
 800a912:	4602      	mov	r2, r0
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	f241 3288 	movw	r2, #5000	; 0x1388
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d901      	bls.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800a920:	2303      	movs	r3, #3
 800a922:	e036      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a924:	4b1d      	ldr	r3, [pc, #116]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	f003 0302 	and.w	r3, r3, #2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0ee      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a930:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4917      	ldr	r1, [pc, #92]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d105      	bne.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a948:	4b14      	ldr	r3, [pc, #80]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a94a:	69db      	ldr	r3, [r3, #28]
 800a94c:	4a13      	ldr	r2, [pc, #76]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a94e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d008      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	490b      	ldr	r1, [pc, #44]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0310 	and.w	r3, r3, #16
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d008      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a97e:	4b07      	ldr	r3, [pc, #28]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	4904      	ldr	r1, [pc, #16]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a98c:	4313      	orrs	r3, r2
 800a98e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3718      	adds	r7, #24
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	40021000 	.word	0x40021000
 800a9a0:	40007000 	.word	0x40007000
 800a9a4:	42420440 	.word	0x42420440

0800a9a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e041      	b.n	800aa3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d106      	bne.n	800a9d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7fc f808 	bl	80069e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2202      	movs	r2, #2
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f000 fa96 	bl	800af18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
	...

0800aa48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d001      	beq.n	800aa60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e04e      	b.n	800aafe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f042 0201 	orr.w	r2, r2, #1
 800aa76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a22      	ldr	r2, [pc, #136]	; (800ab08 <HAL_TIM_Base_Start_IT+0xc0>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d022      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x80>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a21      	ldr	r2, [pc, #132]	; (800ab0c <HAL_TIM_Base_Start_IT+0xc4>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d01d      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x80>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa94:	d018      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x80>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a1d      	ldr	r2, [pc, #116]	; (800ab10 <HAL_TIM_Base_Start_IT+0xc8>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d013      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x80>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a1b      	ldr	r2, [pc, #108]	; (800ab14 <HAL_TIM_Base_Start_IT+0xcc>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00e      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x80>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a1a      	ldr	r2, [pc, #104]	; (800ab18 <HAL_TIM_Base_Start_IT+0xd0>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d009      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x80>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a18      	ldr	r2, [pc, #96]	; (800ab1c <HAL_TIM_Base_Start_IT+0xd4>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d004      	beq.n	800aac8 <HAL_TIM_Base_Start_IT+0x80>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a17      	ldr	r2, [pc, #92]	; (800ab20 <HAL_TIM_Base_Start_IT+0xd8>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d111      	bne.n	800aaec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b06      	cmp	r3, #6
 800aad8:	d010      	beq.n	800aafc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f042 0201 	orr.w	r2, r2, #1
 800aae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaea:	e007      	b.n	800aafc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f042 0201 	orr.w	r2, r2, #1
 800aafa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bc80      	pop	{r7}
 800ab06:	4770      	bx	lr
 800ab08:	40012c00 	.word	0x40012c00
 800ab0c:	40013400 	.word	0x40013400
 800ab10:	40000400 	.word	0x40000400
 800ab14:	40000800 	.word	0x40000800
 800ab18:	40000c00 	.word	0x40000c00
 800ab1c:	40014c00 	.word	0x40014c00
 800ab20:	40001800 	.word	0x40001800

0800ab24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	691b      	ldr	r3, [r3, #16]
 800ab32:	f003 0302 	and.w	r3, r3, #2
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d122      	bne.n	800ab80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d11b      	bne.n	800ab80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f06f 0202 	mvn.w	r2, #2
 800ab50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699b      	ldr	r3, [r3, #24]
 800ab5e:	f003 0303 	and.w	r3, r3, #3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f9ba 	bl	800aee0 <HAL_TIM_IC_CaptureCallback>
 800ab6c:	e005      	b.n	800ab7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f9ad 	bl	800aece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f9bc 	bl	800aef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d122      	bne.n	800abd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f003 0304 	and.w	r3, r3, #4
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d11b      	bne.n	800abd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f06f 0204 	mvn.w	r2, #4
 800aba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f990 	bl	800aee0 <HAL_TIM_IC_CaptureCallback>
 800abc0:	e005      	b.n	800abce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f983 	bl	800aece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f992 	bl	800aef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	f003 0308 	and.w	r3, r3, #8
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d122      	bne.n	800ac28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f003 0308 	and.w	r3, r3, #8
 800abec:	2b08      	cmp	r3, #8
 800abee:	d11b      	bne.n	800ac28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f06f 0208 	mvn.w	r2, #8
 800abf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2204      	movs	r2, #4
 800abfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d003      	beq.n	800ac16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f966 	bl	800aee0 <HAL_TIM_IC_CaptureCallback>
 800ac14:	e005      	b.n	800ac22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f959 	bl	800aece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 f968 	bl	800aef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	f003 0310 	and.w	r3, r3, #16
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d122      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	f003 0310 	and.w	r3, r3, #16
 800ac40:	2b10      	cmp	r3, #16
 800ac42:	d11b      	bne.n	800ac7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f06f 0210 	mvn.w	r2, #16
 800ac4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2208      	movs	r2, #8
 800ac52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f93c 	bl	800aee0 <HAL_TIM_IC_CaptureCallback>
 800ac68:	e005      	b.n	800ac76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f92f 	bl	800aece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 f93e 	bl	800aef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d10e      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d107      	bne.n	800aca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f06f 0201 	mvn.w	r2, #1
 800aca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f90a 	bl	800aebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb2:	2b80      	cmp	r3, #128	; 0x80
 800acb4:	d10e      	bne.n	800acd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc0:	2b80      	cmp	r3, #128	; 0x80
 800acc2:	d107      	bne.n	800acd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800accc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fad9 	bl	800b286 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acde:	2b40      	cmp	r3, #64	; 0x40
 800ace0:	d10e      	bne.n	800ad00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acec:	2b40      	cmp	r3, #64	; 0x40
 800acee:	d107      	bne.n	800ad00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f902 	bl	800af04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	f003 0320 	and.w	r3, r3, #32
 800ad0a:	2b20      	cmp	r3, #32
 800ad0c:	d10e      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b20      	cmp	r3, #32
 800ad1a:	d107      	bne.n	800ad2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f06f 0220 	mvn.w	r2, #32
 800ad24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 faa4 	bl	800b274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad2c:	bf00      	nop
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d101      	bne.n	800ad4c <HAL_TIM_ConfigClockSource+0x18>
 800ad48:	2302      	movs	r3, #2
 800ad4a:	e0b3      	b.n	800aeb4 <HAL_TIM_ConfigClockSource+0x180>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad84:	d03e      	beq.n	800ae04 <HAL_TIM_ConfigClockSource+0xd0>
 800ad86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad8a:	f200 8087 	bhi.w	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800ad8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad92:	f000 8085 	beq.w	800aea0 <HAL_TIM_ConfigClockSource+0x16c>
 800ad96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad9a:	d87f      	bhi.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800ad9c:	2b70      	cmp	r3, #112	; 0x70
 800ad9e:	d01a      	beq.n	800add6 <HAL_TIM_ConfigClockSource+0xa2>
 800ada0:	2b70      	cmp	r3, #112	; 0x70
 800ada2:	d87b      	bhi.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800ada4:	2b60      	cmp	r3, #96	; 0x60
 800ada6:	d050      	beq.n	800ae4a <HAL_TIM_ConfigClockSource+0x116>
 800ada8:	2b60      	cmp	r3, #96	; 0x60
 800adaa:	d877      	bhi.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800adac:	2b50      	cmp	r3, #80	; 0x50
 800adae:	d03c      	beq.n	800ae2a <HAL_TIM_ConfigClockSource+0xf6>
 800adb0:	2b50      	cmp	r3, #80	; 0x50
 800adb2:	d873      	bhi.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800adb4:	2b40      	cmp	r3, #64	; 0x40
 800adb6:	d058      	beq.n	800ae6a <HAL_TIM_ConfigClockSource+0x136>
 800adb8:	2b40      	cmp	r3, #64	; 0x40
 800adba:	d86f      	bhi.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800adbc:	2b30      	cmp	r3, #48	; 0x30
 800adbe:	d064      	beq.n	800ae8a <HAL_TIM_ConfigClockSource+0x156>
 800adc0:	2b30      	cmp	r3, #48	; 0x30
 800adc2:	d86b      	bhi.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800adc4:	2b20      	cmp	r3, #32
 800adc6:	d060      	beq.n	800ae8a <HAL_TIM_ConfigClockSource+0x156>
 800adc8:	2b20      	cmp	r3, #32
 800adca:	d867      	bhi.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d05c      	beq.n	800ae8a <HAL_TIM_ConfigClockSource+0x156>
 800add0:	2b10      	cmp	r3, #16
 800add2:	d05a      	beq.n	800ae8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800add4:	e062      	b.n	800ae9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	6899      	ldr	r1, [r3, #8]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f000 f9ac 	bl	800b142 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800adf8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	68fa      	ldr	r2, [r7, #12]
 800ae00:	609a      	str	r2, [r3, #8]
      break;
 800ae02:	e04e      	b.n	800aea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	6899      	ldr	r1, [r3, #8]
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	685a      	ldr	r2, [r3, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	f000 f995 	bl	800b142 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689a      	ldr	r2, [r3, #8]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae26:	609a      	str	r2, [r3, #8]
      break;
 800ae28:	e03b      	b.n	800aea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6818      	ldr	r0, [r3, #0]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	6859      	ldr	r1, [r3, #4]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f000 f90c 	bl	800b054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2150      	movs	r1, #80	; 0x50
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 f963 	bl	800b10e <TIM_ITRx_SetConfig>
      break;
 800ae48:	e02b      	b.n	800aea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6818      	ldr	r0, [r3, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	6859      	ldr	r1, [r3, #4]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	461a      	mov	r2, r3
 800ae58:	f000 f92a 	bl	800b0b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2160      	movs	r1, #96	; 0x60
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f953 	bl	800b10e <TIM_ITRx_SetConfig>
      break;
 800ae68:	e01b      	b.n	800aea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6818      	ldr	r0, [r3, #0]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	6859      	ldr	r1, [r3, #4]
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	461a      	mov	r2, r3
 800ae78:	f000 f8ec 	bl	800b054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2140      	movs	r1, #64	; 0x40
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f943 	bl	800b10e <TIM_ITRx_SetConfig>
      break;
 800ae88:	e00b      	b.n	800aea2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4619      	mov	r1, r3
 800ae94:	4610      	mov	r0, r2
 800ae96:	f000 f93a 	bl	800b10e <TIM_ITRx_SetConfig>
        break;
 800ae9a:	e002      	b.n	800aea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800ae9c:	bf00      	nop
 800ae9e:	e000      	b.n	800aea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aea0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3710      	adds	r7, #16
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800aec4:	bf00      	nop
 800aec6:	370c      	adds	r7, #12
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bc80      	pop	{r7}
 800aecc:	4770      	bx	lr

0800aece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bc80      	pop	{r7}
 800aede:	4770      	bx	lr

0800aee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bc80      	pop	{r7}
 800aef0:	4770      	bx	lr

0800aef2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aefa:	bf00      	nop
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	bc80      	pop	{r7}
 800af02:	4770      	bx	lr

0800af04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	bc80      	pop	{r7}
 800af14:	4770      	bx	lr
	...

0800af18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a3f      	ldr	r2, [pc, #252]	; (800b028 <TIM_Base_SetConfig+0x110>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d013      	beq.n	800af58 <TIM_Base_SetConfig+0x40>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a3e      	ldr	r2, [pc, #248]	; (800b02c <TIM_Base_SetConfig+0x114>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d00f      	beq.n	800af58 <TIM_Base_SetConfig+0x40>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af3e:	d00b      	beq.n	800af58 <TIM_Base_SetConfig+0x40>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a3b      	ldr	r2, [pc, #236]	; (800b030 <TIM_Base_SetConfig+0x118>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d007      	beq.n	800af58 <TIM_Base_SetConfig+0x40>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a3a      	ldr	r2, [pc, #232]	; (800b034 <TIM_Base_SetConfig+0x11c>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d003      	beq.n	800af58 <TIM_Base_SetConfig+0x40>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a39      	ldr	r2, [pc, #228]	; (800b038 <TIM_Base_SetConfig+0x120>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d108      	bne.n	800af6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	4313      	orrs	r3, r2
 800af68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a2e      	ldr	r2, [pc, #184]	; (800b028 <TIM_Base_SetConfig+0x110>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d02b      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a2d      	ldr	r2, [pc, #180]	; (800b02c <TIM_Base_SetConfig+0x114>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d027      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af80:	d023      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a2a      	ldr	r2, [pc, #168]	; (800b030 <TIM_Base_SetConfig+0x118>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d01f      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	4a29      	ldr	r2, [pc, #164]	; (800b034 <TIM_Base_SetConfig+0x11c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d01b      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a28      	ldr	r2, [pc, #160]	; (800b038 <TIM_Base_SetConfig+0x120>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d017      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a27      	ldr	r2, [pc, #156]	; (800b03c <TIM_Base_SetConfig+0x124>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d013      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a26      	ldr	r2, [pc, #152]	; (800b040 <TIM_Base_SetConfig+0x128>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d00f      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a25      	ldr	r2, [pc, #148]	; (800b044 <TIM_Base_SetConfig+0x12c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d00b      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a24      	ldr	r2, [pc, #144]	; (800b048 <TIM_Base_SetConfig+0x130>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d007      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4a23      	ldr	r2, [pc, #140]	; (800b04c <TIM_Base_SetConfig+0x134>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d003      	beq.n	800afca <TIM_Base_SetConfig+0xb2>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a22      	ldr	r2, [pc, #136]	; (800b050 <TIM_Base_SetConfig+0x138>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d108      	bne.n	800afdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	4313      	orrs	r3, r2
 800afda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4a09      	ldr	r2, [pc, #36]	; (800b028 <TIM_Base_SetConfig+0x110>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d003      	beq.n	800b010 <TIM_Base_SetConfig+0xf8>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a08      	ldr	r2, [pc, #32]	; (800b02c <TIM_Base_SetConfig+0x114>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d103      	bne.n	800b018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	691a      	ldr	r2, [r3, #16]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	615a      	str	r2, [r3, #20]
}
 800b01e:	bf00      	nop
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	bc80      	pop	{r7}
 800b026:	4770      	bx	lr
 800b028:	40012c00 	.word	0x40012c00
 800b02c:	40013400 	.word	0x40013400
 800b030:	40000400 	.word	0x40000400
 800b034:	40000800 	.word	0x40000800
 800b038:	40000c00 	.word	0x40000c00
 800b03c:	40014c00 	.word	0x40014c00
 800b040:	40015000 	.word	0x40015000
 800b044:	40015400 	.word	0x40015400
 800b048:	40001800 	.word	0x40001800
 800b04c:	40001c00 	.word	0x40001c00
 800b050:	40002000 	.word	0x40002000

0800b054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b054:	b480      	push	{r7}
 800b056:	b087      	sub	sp, #28
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6a1b      	ldr	r3, [r3, #32]
 800b064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6a1b      	ldr	r3, [r3, #32]
 800b06a:	f023 0201 	bic.w	r2, r3, #1
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b07e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	011b      	lsls	r3, r3, #4
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	4313      	orrs	r3, r2
 800b088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f023 030a 	bic.w	r3, r3, #10
 800b090:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	4313      	orrs	r3, r2
 800b098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	697a      	ldr	r2, [r7, #20]
 800b0a4:	621a      	str	r2, [r3, #32]
}
 800b0a6:	bf00      	nop
 800b0a8:	371c      	adds	r7, #28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bc80      	pop	{r7}
 800b0ae:	4770      	bx	lr

0800b0b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	f023 0210 	bic.w	r2, r3, #16
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1b      	ldr	r3, [r3, #32]
 800b0d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	031b      	lsls	r3, r3, #12
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	011b      	lsls	r3, r3, #4
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	621a      	str	r2, [r3, #32]
}
 800b104:	bf00      	nop
 800b106:	371c      	adds	r7, #28
 800b108:	46bd      	mov	sp, r7
 800b10a:	bc80      	pop	{r7}
 800b10c:	4770      	bx	lr

0800b10e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b10e:	b480      	push	{r7}
 800b110:	b085      	sub	sp, #20
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	f043 0307 	orr.w	r3, r3, #7
 800b130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	609a      	str	r2, [r3, #8]
}
 800b138:	bf00      	nop
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bc80      	pop	{r7}
 800b140:	4770      	bx	lr

0800b142 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b142:	b480      	push	{r7}
 800b144:	b087      	sub	sp, #28
 800b146:	af00      	add	r7, sp, #0
 800b148:	60f8      	str	r0, [r7, #12]
 800b14a:	60b9      	str	r1, [r7, #8]
 800b14c:	607a      	str	r2, [r7, #4]
 800b14e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b15c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	021a      	lsls	r2, r3, #8
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	431a      	orrs	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	4313      	orrs	r3, r2
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	609a      	str	r2, [r3, #8]
}
 800b176:	bf00      	nop
 800b178:	371c      	adds	r7, #28
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bc80      	pop	{r7}
 800b17e:	4770      	bx	lr

0800b180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b190:	2b01      	cmp	r3, #1
 800b192:	d101      	bne.n	800b198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b194:	2302      	movs	r3, #2
 800b196:	e05a      	b.n	800b24e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a20      	ldr	r2, [pc, #128]	; (800b258 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d022      	beq.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a1e      	ldr	r2, [pc, #120]	; (800b25c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d01d      	beq.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ee:	d018      	beq.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a1a      	ldr	r2, [pc, #104]	; (800b260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d013      	beq.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a19      	ldr	r2, [pc, #100]	; (800b264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d00e      	beq.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a17      	ldr	r2, [pc, #92]	; (800b268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d009      	beq.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a16      	ldr	r2, [pc, #88]	; (800b26c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d004      	beq.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a14      	ldr	r2, [pc, #80]	; (800b270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d10c      	bne.n	800b23c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	4313      	orrs	r3, r2
 800b232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	bc80      	pop	{r7}
 800b256:	4770      	bx	lr
 800b258:	40012c00 	.word	0x40012c00
 800b25c:	40013400 	.word	0x40013400
 800b260:	40000400 	.word	0x40000400
 800b264:	40000800 	.word	0x40000800
 800b268:	40000c00 	.word	0x40000c00
 800b26c:	40014c00 	.word	0x40014c00
 800b270:	40001800 	.word	0x40001800

0800b274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	bc80      	pop	{r7}
 800b284:	4770      	bx	lr

0800b286 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b28e:	bf00      	nop
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	bc80      	pop	{r7}
 800b296:	4770      	bx	lr

0800b298 <__errno>:
 800b298:	4b01      	ldr	r3, [pc, #4]	; (800b2a0 <__errno+0x8>)
 800b29a:	6818      	ldr	r0, [r3, #0]
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20000048 	.word	0x20000048

0800b2a4 <__libc_init_array>:
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	2600      	movs	r6, #0
 800b2a8:	4d0c      	ldr	r5, [pc, #48]	; (800b2dc <__libc_init_array+0x38>)
 800b2aa:	4c0d      	ldr	r4, [pc, #52]	; (800b2e0 <__libc_init_array+0x3c>)
 800b2ac:	1b64      	subs	r4, r4, r5
 800b2ae:	10a4      	asrs	r4, r4, #2
 800b2b0:	42a6      	cmp	r6, r4
 800b2b2:	d109      	bne.n	800b2c8 <__libc_init_array+0x24>
 800b2b4:	f004 fe7e 	bl	800ffb4 <_init>
 800b2b8:	2600      	movs	r6, #0
 800b2ba:	4d0a      	ldr	r5, [pc, #40]	; (800b2e4 <__libc_init_array+0x40>)
 800b2bc:	4c0a      	ldr	r4, [pc, #40]	; (800b2e8 <__libc_init_array+0x44>)
 800b2be:	1b64      	subs	r4, r4, r5
 800b2c0:	10a4      	asrs	r4, r4, #2
 800b2c2:	42a6      	cmp	r6, r4
 800b2c4:	d105      	bne.n	800b2d2 <__libc_init_array+0x2e>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2cc:	4798      	blx	r3
 800b2ce:	3601      	adds	r6, #1
 800b2d0:	e7ee      	b.n	800b2b0 <__libc_init_array+0xc>
 800b2d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2d6:	4798      	blx	r3
 800b2d8:	3601      	adds	r6, #1
 800b2da:	e7f2      	b.n	800b2c2 <__libc_init_array+0x1e>
 800b2dc:	080108d4 	.word	0x080108d4
 800b2e0:	080108d4 	.word	0x080108d4
 800b2e4:	080108d4 	.word	0x080108d4
 800b2e8:	080108d8 	.word	0x080108d8

0800b2ec <__itoa>:
 800b2ec:	1e93      	subs	r3, r2, #2
 800b2ee:	2b22      	cmp	r3, #34	; 0x22
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	d904      	bls.n	800b300 <__itoa+0x14>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	461c      	mov	r4, r3
 800b2fa:	700b      	strb	r3, [r1, #0]
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	bd10      	pop	{r4, pc}
 800b300:	2a0a      	cmp	r2, #10
 800b302:	d109      	bne.n	800b318 <__itoa+0x2c>
 800b304:	2800      	cmp	r0, #0
 800b306:	da07      	bge.n	800b318 <__itoa+0x2c>
 800b308:	232d      	movs	r3, #45	; 0x2d
 800b30a:	700b      	strb	r3, [r1, #0]
 800b30c:	2101      	movs	r1, #1
 800b30e:	4240      	negs	r0, r0
 800b310:	4421      	add	r1, r4
 800b312:	f001 fe0f 	bl	800cf34 <__utoa>
 800b316:	e7f1      	b.n	800b2fc <__itoa+0x10>
 800b318:	2100      	movs	r1, #0
 800b31a:	e7f9      	b.n	800b310 <__itoa+0x24>

0800b31c <itoa>:
 800b31c:	f7ff bfe6 	b.w	800b2ec <__itoa>

0800b320 <malloc>:
 800b320:	4b02      	ldr	r3, [pc, #8]	; (800b32c <malloc+0xc>)
 800b322:	4601      	mov	r1, r0
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	f000 b85f 	b.w	800b3e8 <_malloc_r>
 800b32a:	bf00      	nop
 800b32c:	20000048 	.word	0x20000048

0800b330 <free>:
 800b330:	4b02      	ldr	r3, [pc, #8]	; (800b33c <free+0xc>)
 800b332:	4601      	mov	r1, r0
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	f000 b80b 	b.w	800b350 <_free_r>
 800b33a:	bf00      	nop
 800b33c:	20000048 	.word	0x20000048

0800b340 <memset>:
 800b340:	4603      	mov	r3, r0
 800b342:	4402      	add	r2, r0
 800b344:	4293      	cmp	r3, r2
 800b346:	d100      	bne.n	800b34a <memset+0xa>
 800b348:	4770      	bx	lr
 800b34a:	f803 1b01 	strb.w	r1, [r3], #1
 800b34e:	e7f9      	b.n	800b344 <memset+0x4>

0800b350 <_free_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4605      	mov	r5, r0
 800b354:	2900      	cmp	r1, #0
 800b356:	d043      	beq.n	800b3e0 <_free_r+0x90>
 800b358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b35c:	1f0c      	subs	r4, r1, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	bfb8      	it	lt
 800b362:	18e4      	addlt	r4, r4, r3
 800b364:	f003 f83e 	bl	800e3e4 <__malloc_lock>
 800b368:	4a1e      	ldr	r2, [pc, #120]	; (800b3e4 <_free_r+0x94>)
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	4610      	mov	r0, r2
 800b36e:	b933      	cbnz	r3, 800b37e <_free_r+0x2e>
 800b370:	6063      	str	r3, [r4, #4]
 800b372:	6014      	str	r4, [r2, #0]
 800b374:	4628      	mov	r0, r5
 800b376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b37a:	f003 b839 	b.w	800e3f0 <__malloc_unlock>
 800b37e:	42a3      	cmp	r3, r4
 800b380:	d90a      	bls.n	800b398 <_free_r+0x48>
 800b382:	6821      	ldr	r1, [r4, #0]
 800b384:	1862      	adds	r2, r4, r1
 800b386:	4293      	cmp	r3, r2
 800b388:	bf01      	itttt	eq
 800b38a:	681a      	ldreq	r2, [r3, #0]
 800b38c:	685b      	ldreq	r3, [r3, #4]
 800b38e:	1852      	addeq	r2, r2, r1
 800b390:	6022      	streq	r2, [r4, #0]
 800b392:	6063      	str	r3, [r4, #4]
 800b394:	6004      	str	r4, [r0, #0]
 800b396:	e7ed      	b.n	800b374 <_free_r+0x24>
 800b398:	461a      	mov	r2, r3
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	b10b      	cbz	r3, 800b3a2 <_free_r+0x52>
 800b39e:	42a3      	cmp	r3, r4
 800b3a0:	d9fa      	bls.n	800b398 <_free_r+0x48>
 800b3a2:	6811      	ldr	r1, [r2, #0]
 800b3a4:	1850      	adds	r0, r2, r1
 800b3a6:	42a0      	cmp	r0, r4
 800b3a8:	d10b      	bne.n	800b3c2 <_free_r+0x72>
 800b3aa:	6820      	ldr	r0, [r4, #0]
 800b3ac:	4401      	add	r1, r0
 800b3ae:	1850      	adds	r0, r2, r1
 800b3b0:	4283      	cmp	r3, r0
 800b3b2:	6011      	str	r1, [r2, #0]
 800b3b4:	d1de      	bne.n	800b374 <_free_r+0x24>
 800b3b6:	6818      	ldr	r0, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	4401      	add	r1, r0
 800b3bc:	6011      	str	r1, [r2, #0]
 800b3be:	6053      	str	r3, [r2, #4]
 800b3c0:	e7d8      	b.n	800b374 <_free_r+0x24>
 800b3c2:	d902      	bls.n	800b3ca <_free_r+0x7a>
 800b3c4:	230c      	movs	r3, #12
 800b3c6:	602b      	str	r3, [r5, #0]
 800b3c8:	e7d4      	b.n	800b374 <_free_r+0x24>
 800b3ca:	6820      	ldr	r0, [r4, #0]
 800b3cc:	1821      	adds	r1, r4, r0
 800b3ce:	428b      	cmp	r3, r1
 800b3d0:	bf01      	itttt	eq
 800b3d2:	6819      	ldreq	r1, [r3, #0]
 800b3d4:	685b      	ldreq	r3, [r3, #4]
 800b3d6:	1809      	addeq	r1, r1, r0
 800b3d8:	6021      	streq	r1, [r4, #0]
 800b3da:	6063      	str	r3, [r4, #4]
 800b3dc:	6054      	str	r4, [r2, #4]
 800b3de:	e7c9      	b.n	800b374 <_free_r+0x24>
 800b3e0:	bd38      	pop	{r3, r4, r5, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000244 	.word	0x20000244

0800b3e8 <_malloc_r>:
 800b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ea:	1ccd      	adds	r5, r1, #3
 800b3ec:	f025 0503 	bic.w	r5, r5, #3
 800b3f0:	3508      	adds	r5, #8
 800b3f2:	2d0c      	cmp	r5, #12
 800b3f4:	bf38      	it	cc
 800b3f6:	250c      	movcc	r5, #12
 800b3f8:	2d00      	cmp	r5, #0
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	db01      	blt.n	800b402 <_malloc_r+0x1a>
 800b3fe:	42a9      	cmp	r1, r5
 800b400:	d903      	bls.n	800b40a <_malloc_r+0x22>
 800b402:	230c      	movs	r3, #12
 800b404:	6033      	str	r3, [r6, #0]
 800b406:	2000      	movs	r0, #0
 800b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40a:	f002 ffeb 	bl	800e3e4 <__malloc_lock>
 800b40e:	4921      	ldr	r1, [pc, #132]	; (800b494 <_malloc_r+0xac>)
 800b410:	680a      	ldr	r2, [r1, #0]
 800b412:	4614      	mov	r4, r2
 800b414:	b99c      	cbnz	r4, 800b43e <_malloc_r+0x56>
 800b416:	4f20      	ldr	r7, [pc, #128]	; (800b498 <_malloc_r+0xb0>)
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	b923      	cbnz	r3, 800b426 <_malloc_r+0x3e>
 800b41c:	4621      	mov	r1, r4
 800b41e:	4630      	mov	r0, r6
 800b420:	f000 feae 	bl	800c180 <_sbrk_r>
 800b424:	6038      	str	r0, [r7, #0]
 800b426:	4629      	mov	r1, r5
 800b428:	4630      	mov	r0, r6
 800b42a:	f000 fea9 	bl	800c180 <_sbrk_r>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	d123      	bne.n	800b47a <_malloc_r+0x92>
 800b432:	230c      	movs	r3, #12
 800b434:	4630      	mov	r0, r6
 800b436:	6033      	str	r3, [r6, #0]
 800b438:	f002 ffda 	bl	800e3f0 <__malloc_unlock>
 800b43c:	e7e3      	b.n	800b406 <_malloc_r+0x1e>
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	1b5b      	subs	r3, r3, r5
 800b442:	d417      	bmi.n	800b474 <_malloc_r+0x8c>
 800b444:	2b0b      	cmp	r3, #11
 800b446:	d903      	bls.n	800b450 <_malloc_r+0x68>
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	441c      	add	r4, r3
 800b44c:	6025      	str	r5, [r4, #0]
 800b44e:	e004      	b.n	800b45a <_malloc_r+0x72>
 800b450:	6863      	ldr	r3, [r4, #4]
 800b452:	42a2      	cmp	r2, r4
 800b454:	bf0c      	ite	eq
 800b456:	600b      	streq	r3, [r1, #0]
 800b458:	6053      	strne	r3, [r2, #4]
 800b45a:	4630      	mov	r0, r6
 800b45c:	f002 ffc8 	bl	800e3f0 <__malloc_unlock>
 800b460:	f104 000b 	add.w	r0, r4, #11
 800b464:	1d23      	adds	r3, r4, #4
 800b466:	f020 0007 	bic.w	r0, r0, #7
 800b46a:	1ac2      	subs	r2, r0, r3
 800b46c:	d0cc      	beq.n	800b408 <_malloc_r+0x20>
 800b46e:	1a1b      	subs	r3, r3, r0
 800b470:	50a3      	str	r3, [r4, r2]
 800b472:	e7c9      	b.n	800b408 <_malloc_r+0x20>
 800b474:	4622      	mov	r2, r4
 800b476:	6864      	ldr	r4, [r4, #4]
 800b478:	e7cc      	b.n	800b414 <_malloc_r+0x2c>
 800b47a:	1cc4      	adds	r4, r0, #3
 800b47c:	f024 0403 	bic.w	r4, r4, #3
 800b480:	42a0      	cmp	r0, r4
 800b482:	d0e3      	beq.n	800b44c <_malloc_r+0x64>
 800b484:	1a21      	subs	r1, r4, r0
 800b486:	4630      	mov	r0, r6
 800b488:	f000 fe7a 	bl	800c180 <_sbrk_r>
 800b48c:	3001      	adds	r0, #1
 800b48e:	d1dd      	bne.n	800b44c <_malloc_r+0x64>
 800b490:	e7cf      	b.n	800b432 <_malloc_r+0x4a>
 800b492:	bf00      	nop
 800b494:	20000244 	.word	0x20000244
 800b498:	20000248 	.word	0x20000248

0800b49c <__cvt>:
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a2:	461f      	mov	r7, r3
 800b4a4:	bfbb      	ittet	lt
 800b4a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b4aa:	461f      	movlt	r7, r3
 800b4ac:	2300      	movge	r3, #0
 800b4ae:	232d      	movlt	r3, #45	; 0x2d
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	4614      	mov	r4, r2
 800b4b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b4b8:	7013      	strb	r3, [r2, #0]
 800b4ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b4c0:	f023 0820 	bic.w	r8, r3, #32
 800b4c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4c8:	d005      	beq.n	800b4d6 <__cvt+0x3a>
 800b4ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b4ce:	d100      	bne.n	800b4d2 <__cvt+0x36>
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	e000      	b.n	800b4d8 <__cvt+0x3c>
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	aa07      	add	r2, sp, #28
 800b4da:	9204      	str	r2, [sp, #16]
 800b4dc:	aa06      	add	r2, sp, #24
 800b4de:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b4e2:	e9cd 3500 	strd	r3, r5, [sp]
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	463b      	mov	r3, r7
 800b4ea:	f001 fdf5 	bl	800d0d8 <_dtoa_r>
 800b4ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b4f2:	4606      	mov	r6, r0
 800b4f4:	d102      	bne.n	800b4fc <__cvt+0x60>
 800b4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4f8:	07db      	lsls	r3, r3, #31
 800b4fa:	d522      	bpl.n	800b542 <__cvt+0xa6>
 800b4fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b500:	eb06 0905 	add.w	r9, r6, r5
 800b504:	d110      	bne.n	800b528 <__cvt+0x8c>
 800b506:	7833      	ldrb	r3, [r6, #0]
 800b508:	2b30      	cmp	r3, #48	; 0x30
 800b50a:	d10a      	bne.n	800b522 <__cvt+0x86>
 800b50c:	2200      	movs	r2, #0
 800b50e:	2300      	movs	r3, #0
 800b510:	4620      	mov	r0, r4
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fab4 	bl	8000a80 <__aeabi_dcmpeq>
 800b518:	b918      	cbnz	r0, 800b522 <__cvt+0x86>
 800b51a:	f1c5 0501 	rsb	r5, r5, #1
 800b51e:	f8ca 5000 	str.w	r5, [sl]
 800b522:	f8da 3000 	ldr.w	r3, [sl]
 800b526:	4499      	add	r9, r3
 800b528:	2200      	movs	r2, #0
 800b52a:	2300      	movs	r3, #0
 800b52c:	4620      	mov	r0, r4
 800b52e:	4639      	mov	r1, r7
 800b530:	f7f5 faa6 	bl	8000a80 <__aeabi_dcmpeq>
 800b534:	b108      	cbz	r0, 800b53a <__cvt+0x9e>
 800b536:	f8cd 901c 	str.w	r9, [sp, #28]
 800b53a:	2230      	movs	r2, #48	; 0x30
 800b53c:	9b07      	ldr	r3, [sp, #28]
 800b53e:	454b      	cmp	r3, r9
 800b540:	d307      	bcc.n	800b552 <__cvt+0xb6>
 800b542:	4630      	mov	r0, r6
 800b544:	9b07      	ldr	r3, [sp, #28]
 800b546:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b548:	1b9b      	subs	r3, r3, r6
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	b008      	add	sp, #32
 800b54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b552:	1c59      	adds	r1, r3, #1
 800b554:	9107      	str	r1, [sp, #28]
 800b556:	701a      	strb	r2, [r3, #0]
 800b558:	e7f0      	b.n	800b53c <__cvt+0xa0>

0800b55a <__exponent>:
 800b55a:	4603      	mov	r3, r0
 800b55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b55e:	2900      	cmp	r1, #0
 800b560:	f803 2b02 	strb.w	r2, [r3], #2
 800b564:	bfb6      	itet	lt
 800b566:	222d      	movlt	r2, #45	; 0x2d
 800b568:	222b      	movge	r2, #43	; 0x2b
 800b56a:	4249      	neglt	r1, r1
 800b56c:	2909      	cmp	r1, #9
 800b56e:	7042      	strb	r2, [r0, #1]
 800b570:	dd2b      	ble.n	800b5ca <__exponent+0x70>
 800b572:	f10d 0407 	add.w	r4, sp, #7
 800b576:	46a4      	mov	ip, r4
 800b578:	270a      	movs	r7, #10
 800b57a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b57e:	460a      	mov	r2, r1
 800b580:	46a6      	mov	lr, r4
 800b582:	fb07 1516 	mls	r5, r7, r6, r1
 800b586:	2a63      	cmp	r2, #99	; 0x63
 800b588:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b58c:	4631      	mov	r1, r6
 800b58e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b592:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b596:	dcf0      	bgt.n	800b57a <__exponent+0x20>
 800b598:	3130      	adds	r1, #48	; 0x30
 800b59a:	f1ae 0502 	sub.w	r5, lr, #2
 800b59e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	1c44      	adds	r4, r0, #1
 800b5a6:	4561      	cmp	r1, ip
 800b5a8:	d30a      	bcc.n	800b5c0 <__exponent+0x66>
 800b5aa:	f10d 0209 	add.w	r2, sp, #9
 800b5ae:	eba2 020e 	sub.w	r2, r2, lr
 800b5b2:	4565      	cmp	r5, ip
 800b5b4:	bf88      	it	hi
 800b5b6:	2200      	movhi	r2, #0
 800b5b8:	4413      	add	r3, r2
 800b5ba:	1a18      	subs	r0, r3, r0
 800b5bc:	b003      	add	sp, #12
 800b5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5c4:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5c8:	e7ed      	b.n	800b5a6 <__exponent+0x4c>
 800b5ca:	2330      	movs	r3, #48	; 0x30
 800b5cc:	3130      	adds	r1, #48	; 0x30
 800b5ce:	7083      	strb	r3, [r0, #2]
 800b5d0:	70c1      	strb	r1, [r0, #3]
 800b5d2:	1d03      	adds	r3, r0, #4
 800b5d4:	e7f1      	b.n	800b5ba <__exponent+0x60>
	...

0800b5d8 <_printf_float>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	b091      	sub	sp, #68	; 0x44
 800b5de:	460c      	mov	r4, r1
 800b5e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b5e4:	4616      	mov	r6, r2
 800b5e6:	461f      	mov	r7, r3
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	f002 fec9 	bl	800e380 <_localeconv_r>
 800b5ee:	6803      	ldr	r3, [r0, #0]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f4:	f7f4 fe18 	bl	8000228 <strlen>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	930e      	str	r3, [sp, #56]	; 0x38
 800b5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b600:	900a      	str	r0, [sp, #40]	; 0x28
 800b602:	3307      	adds	r3, #7
 800b604:	f023 0307 	bic.w	r3, r3, #7
 800b608:	f103 0208 	add.w	r2, r3, #8
 800b60c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b610:	f8d4 b000 	ldr.w	fp, [r4]
 800b614:	f8c8 2000 	str.w	r2, [r8]
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b620:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b624:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b628:	930b      	str	r3, [sp, #44]	; 0x2c
 800b62a:	f04f 32ff 	mov.w	r2, #4294967295
 800b62e:	4640      	mov	r0, r8
 800b630:	4b9c      	ldr	r3, [pc, #624]	; (800b8a4 <_printf_float+0x2cc>)
 800b632:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b634:	f7f5 fa56 	bl	8000ae4 <__aeabi_dcmpun>
 800b638:	bb70      	cbnz	r0, 800b698 <_printf_float+0xc0>
 800b63a:	f04f 32ff 	mov.w	r2, #4294967295
 800b63e:	4640      	mov	r0, r8
 800b640:	4b98      	ldr	r3, [pc, #608]	; (800b8a4 <_printf_float+0x2cc>)
 800b642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b644:	f7f5 fa30 	bl	8000aa8 <__aeabi_dcmple>
 800b648:	bb30      	cbnz	r0, 800b698 <_printf_float+0xc0>
 800b64a:	2200      	movs	r2, #0
 800b64c:	2300      	movs	r3, #0
 800b64e:	4640      	mov	r0, r8
 800b650:	4651      	mov	r1, sl
 800b652:	f7f5 fa1f 	bl	8000a94 <__aeabi_dcmplt>
 800b656:	b110      	cbz	r0, 800b65e <_printf_float+0x86>
 800b658:	232d      	movs	r3, #45	; 0x2d
 800b65a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b65e:	4b92      	ldr	r3, [pc, #584]	; (800b8a8 <_printf_float+0x2d0>)
 800b660:	4892      	ldr	r0, [pc, #584]	; (800b8ac <_printf_float+0x2d4>)
 800b662:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b666:	bf94      	ite	ls
 800b668:	4698      	movls	r8, r3
 800b66a:	4680      	movhi	r8, r0
 800b66c:	2303      	movs	r3, #3
 800b66e:	f04f 0a00 	mov.w	sl, #0
 800b672:	6123      	str	r3, [r4, #16]
 800b674:	f02b 0304 	bic.w	r3, fp, #4
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	4633      	mov	r3, r6
 800b67c:	4621      	mov	r1, r4
 800b67e:	4628      	mov	r0, r5
 800b680:	9700      	str	r7, [sp, #0]
 800b682:	aa0f      	add	r2, sp, #60	; 0x3c
 800b684:	f000 f9d4 	bl	800ba30 <_printf_common>
 800b688:	3001      	adds	r0, #1
 800b68a:	f040 8090 	bne.w	800b7ae <_printf_float+0x1d6>
 800b68e:	f04f 30ff 	mov.w	r0, #4294967295
 800b692:	b011      	add	sp, #68	; 0x44
 800b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b698:	4642      	mov	r2, r8
 800b69a:	4653      	mov	r3, sl
 800b69c:	4640      	mov	r0, r8
 800b69e:	4651      	mov	r1, sl
 800b6a0:	f7f5 fa20 	bl	8000ae4 <__aeabi_dcmpun>
 800b6a4:	b148      	cbz	r0, 800b6ba <_printf_float+0xe2>
 800b6a6:	f1ba 0f00 	cmp.w	sl, #0
 800b6aa:	bfb8      	it	lt
 800b6ac:	232d      	movlt	r3, #45	; 0x2d
 800b6ae:	4880      	ldr	r0, [pc, #512]	; (800b8b0 <_printf_float+0x2d8>)
 800b6b0:	bfb8      	it	lt
 800b6b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6b6:	4b7f      	ldr	r3, [pc, #508]	; (800b8b4 <_printf_float+0x2dc>)
 800b6b8:	e7d3      	b.n	800b662 <_printf_float+0x8a>
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	d142      	bne.n	800b74a <_printf_float+0x172>
 800b6c4:	2306      	movs	r3, #6
 800b6c6:	6063      	str	r3, [r4, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	9206      	str	r2, [sp, #24]
 800b6cc:	aa0e      	add	r2, sp, #56	; 0x38
 800b6ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b6d2:	aa0d      	add	r2, sp, #52	; 0x34
 800b6d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b6d8:	9203      	str	r2, [sp, #12]
 800b6da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b6de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	6863      	ldr	r3, [r4, #4]
 800b6e6:	4642      	mov	r2, r8
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	4653      	mov	r3, sl
 800b6ee:	910b      	str	r1, [sp, #44]	; 0x2c
 800b6f0:	f7ff fed4 	bl	800b49c <__cvt>
 800b6f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6f6:	4680      	mov	r8, r0
 800b6f8:	2947      	cmp	r1, #71	; 0x47
 800b6fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b6fc:	d108      	bne.n	800b710 <_printf_float+0x138>
 800b6fe:	1cc8      	adds	r0, r1, #3
 800b700:	db02      	blt.n	800b708 <_printf_float+0x130>
 800b702:	6863      	ldr	r3, [r4, #4]
 800b704:	4299      	cmp	r1, r3
 800b706:	dd40      	ble.n	800b78a <_printf_float+0x1b2>
 800b708:	f1a9 0902 	sub.w	r9, r9, #2
 800b70c:	fa5f f989 	uxtb.w	r9, r9
 800b710:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b714:	d81f      	bhi.n	800b756 <_printf_float+0x17e>
 800b716:	464a      	mov	r2, r9
 800b718:	3901      	subs	r1, #1
 800b71a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b71e:	910d      	str	r1, [sp, #52]	; 0x34
 800b720:	f7ff ff1b 	bl	800b55a <__exponent>
 800b724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b726:	4682      	mov	sl, r0
 800b728:	1813      	adds	r3, r2, r0
 800b72a:	2a01      	cmp	r2, #1
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	dc02      	bgt.n	800b736 <_printf_float+0x15e>
 800b730:	6822      	ldr	r2, [r4, #0]
 800b732:	07d2      	lsls	r2, r2, #31
 800b734:	d501      	bpl.n	800b73a <_printf_float+0x162>
 800b736:	3301      	adds	r3, #1
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d09b      	beq.n	800b67a <_printf_float+0xa2>
 800b742:	232d      	movs	r3, #45	; 0x2d
 800b744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b748:	e797      	b.n	800b67a <_printf_float+0xa2>
 800b74a:	2947      	cmp	r1, #71	; 0x47
 800b74c:	d1bc      	bne.n	800b6c8 <_printf_float+0xf0>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1ba      	bne.n	800b6c8 <_printf_float+0xf0>
 800b752:	2301      	movs	r3, #1
 800b754:	e7b7      	b.n	800b6c6 <_printf_float+0xee>
 800b756:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b75a:	d118      	bne.n	800b78e <_printf_float+0x1b6>
 800b75c:	2900      	cmp	r1, #0
 800b75e:	6863      	ldr	r3, [r4, #4]
 800b760:	dd0b      	ble.n	800b77a <_printf_float+0x1a2>
 800b762:	6121      	str	r1, [r4, #16]
 800b764:	b913      	cbnz	r3, 800b76c <_printf_float+0x194>
 800b766:	6822      	ldr	r2, [r4, #0]
 800b768:	07d0      	lsls	r0, r2, #31
 800b76a:	d502      	bpl.n	800b772 <_printf_float+0x19a>
 800b76c:	3301      	adds	r3, #1
 800b76e:	440b      	add	r3, r1
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	f04f 0a00 	mov.w	sl, #0
 800b776:	65a1      	str	r1, [r4, #88]	; 0x58
 800b778:	e7df      	b.n	800b73a <_printf_float+0x162>
 800b77a:	b913      	cbnz	r3, 800b782 <_printf_float+0x1aa>
 800b77c:	6822      	ldr	r2, [r4, #0]
 800b77e:	07d2      	lsls	r2, r2, #31
 800b780:	d501      	bpl.n	800b786 <_printf_float+0x1ae>
 800b782:	3302      	adds	r3, #2
 800b784:	e7f4      	b.n	800b770 <_printf_float+0x198>
 800b786:	2301      	movs	r3, #1
 800b788:	e7f2      	b.n	800b770 <_printf_float+0x198>
 800b78a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b790:	4299      	cmp	r1, r3
 800b792:	db05      	blt.n	800b7a0 <_printf_float+0x1c8>
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	6121      	str	r1, [r4, #16]
 800b798:	07d8      	lsls	r0, r3, #31
 800b79a:	d5ea      	bpl.n	800b772 <_printf_float+0x19a>
 800b79c:	1c4b      	adds	r3, r1, #1
 800b79e:	e7e7      	b.n	800b770 <_printf_float+0x198>
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	bfcc      	ite	gt
 800b7a4:	2201      	movgt	r2, #1
 800b7a6:	f1c1 0202 	rsble	r2, r1, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	e7e0      	b.n	800b770 <_printf_float+0x198>
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	055a      	lsls	r2, r3, #21
 800b7b2:	d407      	bmi.n	800b7c4 <_printf_float+0x1ec>
 800b7b4:	6923      	ldr	r3, [r4, #16]
 800b7b6:	4642      	mov	r2, r8
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	47b8      	blx	r7
 800b7be:	3001      	adds	r0, #1
 800b7c0:	d12b      	bne.n	800b81a <_printf_float+0x242>
 800b7c2:	e764      	b.n	800b68e <_printf_float+0xb6>
 800b7c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b7c8:	f240 80dd 	bls.w	800b986 <_printf_float+0x3ae>
 800b7cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f7f5 f954 	bl	8000a80 <__aeabi_dcmpeq>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d033      	beq.n	800b844 <_printf_float+0x26c>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	4631      	mov	r1, r6
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	4a35      	ldr	r2, [pc, #212]	; (800b8b8 <_printf_float+0x2e0>)
 800b7e4:	47b8      	blx	r7
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	f43f af51 	beq.w	800b68e <_printf_float+0xb6>
 800b7ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	db02      	blt.n	800b7fa <_printf_float+0x222>
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	07d8      	lsls	r0, r3, #31
 800b7f8:	d50f      	bpl.n	800b81a <_printf_float+0x242>
 800b7fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7fe:	4631      	mov	r1, r6
 800b800:	4628      	mov	r0, r5
 800b802:	47b8      	blx	r7
 800b804:	3001      	adds	r0, #1
 800b806:	f43f af42 	beq.w	800b68e <_printf_float+0xb6>
 800b80a:	f04f 0800 	mov.w	r8, #0
 800b80e:	f104 091a 	add.w	r9, r4, #26
 800b812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b814:	3b01      	subs	r3, #1
 800b816:	4543      	cmp	r3, r8
 800b818:	dc09      	bgt.n	800b82e <_printf_float+0x256>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	079b      	lsls	r3, r3, #30
 800b81e:	f100 8102 	bmi.w	800ba26 <_printf_float+0x44e>
 800b822:	68e0      	ldr	r0, [r4, #12]
 800b824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b826:	4298      	cmp	r0, r3
 800b828:	bfb8      	it	lt
 800b82a:	4618      	movlt	r0, r3
 800b82c:	e731      	b.n	800b692 <_printf_float+0xba>
 800b82e:	2301      	movs	r3, #1
 800b830:	464a      	mov	r2, r9
 800b832:	4631      	mov	r1, r6
 800b834:	4628      	mov	r0, r5
 800b836:	47b8      	blx	r7
 800b838:	3001      	adds	r0, #1
 800b83a:	f43f af28 	beq.w	800b68e <_printf_float+0xb6>
 800b83e:	f108 0801 	add.w	r8, r8, #1
 800b842:	e7e6      	b.n	800b812 <_printf_float+0x23a>
 800b844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b846:	2b00      	cmp	r3, #0
 800b848:	dc38      	bgt.n	800b8bc <_printf_float+0x2e4>
 800b84a:	2301      	movs	r3, #1
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	4a19      	ldr	r2, [pc, #100]	; (800b8b8 <_printf_float+0x2e0>)
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f af1a 	beq.w	800b68e <_printf_float+0xb6>
 800b85a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b85e:	4313      	orrs	r3, r2
 800b860:	d102      	bne.n	800b868 <_printf_float+0x290>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	07d9      	lsls	r1, r3, #31
 800b866:	d5d8      	bpl.n	800b81a <_printf_float+0x242>
 800b868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b86c:	4631      	mov	r1, r6
 800b86e:	4628      	mov	r0, r5
 800b870:	47b8      	blx	r7
 800b872:	3001      	adds	r0, #1
 800b874:	f43f af0b 	beq.w	800b68e <_printf_float+0xb6>
 800b878:	f04f 0900 	mov.w	r9, #0
 800b87c:	f104 0a1a 	add.w	sl, r4, #26
 800b880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b882:	425b      	negs	r3, r3
 800b884:	454b      	cmp	r3, r9
 800b886:	dc01      	bgt.n	800b88c <_printf_float+0x2b4>
 800b888:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b88a:	e794      	b.n	800b7b6 <_printf_float+0x1de>
 800b88c:	2301      	movs	r3, #1
 800b88e:	4652      	mov	r2, sl
 800b890:	4631      	mov	r1, r6
 800b892:	4628      	mov	r0, r5
 800b894:	47b8      	blx	r7
 800b896:	3001      	adds	r0, #1
 800b898:	f43f aef9 	beq.w	800b68e <_printf_float+0xb6>
 800b89c:	f109 0901 	add.w	r9, r9, #1
 800b8a0:	e7ee      	b.n	800b880 <_printf_float+0x2a8>
 800b8a2:	bf00      	nop
 800b8a4:	7fefffff 	.word	0x7fefffff
 800b8a8:	08010500 	.word	0x08010500
 800b8ac:	08010504 	.word	0x08010504
 800b8b0:	0801050c 	.word	0x0801050c
 800b8b4:	08010508 	.word	0x08010508
 800b8b8:	08010510 	.word	0x08010510
 800b8bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	bfa8      	it	ge
 800b8c4:	461a      	movge	r2, r3
 800b8c6:	2a00      	cmp	r2, #0
 800b8c8:	4691      	mov	r9, r2
 800b8ca:	dc37      	bgt.n	800b93c <_printf_float+0x364>
 800b8cc:	f04f 0b00 	mov.w	fp, #0
 800b8d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8d4:	f104 021a 	add.w	r2, r4, #26
 800b8d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b8dc:	ebaa 0309 	sub.w	r3, sl, r9
 800b8e0:	455b      	cmp	r3, fp
 800b8e2:	dc33      	bgt.n	800b94c <_printf_float+0x374>
 800b8e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	db3b      	blt.n	800b964 <_printf_float+0x38c>
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	07da      	lsls	r2, r3, #31
 800b8f0:	d438      	bmi.n	800b964 <_printf_float+0x38c>
 800b8f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b8f6:	eba2 030a 	sub.w	r3, r2, sl
 800b8fa:	eba2 0901 	sub.w	r9, r2, r1
 800b8fe:	4599      	cmp	r9, r3
 800b900:	bfa8      	it	ge
 800b902:	4699      	movge	r9, r3
 800b904:	f1b9 0f00 	cmp.w	r9, #0
 800b908:	dc34      	bgt.n	800b974 <_printf_float+0x39c>
 800b90a:	f04f 0800 	mov.w	r8, #0
 800b90e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b912:	f104 0a1a 	add.w	sl, r4, #26
 800b916:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b91a:	1a9b      	subs	r3, r3, r2
 800b91c:	eba3 0309 	sub.w	r3, r3, r9
 800b920:	4543      	cmp	r3, r8
 800b922:	f77f af7a 	ble.w	800b81a <_printf_float+0x242>
 800b926:	2301      	movs	r3, #1
 800b928:	4652      	mov	r2, sl
 800b92a:	4631      	mov	r1, r6
 800b92c:	4628      	mov	r0, r5
 800b92e:	47b8      	blx	r7
 800b930:	3001      	adds	r0, #1
 800b932:	f43f aeac 	beq.w	800b68e <_printf_float+0xb6>
 800b936:	f108 0801 	add.w	r8, r8, #1
 800b93a:	e7ec      	b.n	800b916 <_printf_float+0x33e>
 800b93c:	4613      	mov	r3, r2
 800b93e:	4631      	mov	r1, r6
 800b940:	4642      	mov	r2, r8
 800b942:	4628      	mov	r0, r5
 800b944:	47b8      	blx	r7
 800b946:	3001      	adds	r0, #1
 800b948:	d1c0      	bne.n	800b8cc <_printf_float+0x2f4>
 800b94a:	e6a0      	b.n	800b68e <_printf_float+0xb6>
 800b94c:	2301      	movs	r3, #1
 800b94e:	4631      	mov	r1, r6
 800b950:	4628      	mov	r0, r5
 800b952:	920b      	str	r2, [sp, #44]	; 0x2c
 800b954:	47b8      	blx	r7
 800b956:	3001      	adds	r0, #1
 800b958:	f43f ae99 	beq.w	800b68e <_printf_float+0xb6>
 800b95c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b95e:	f10b 0b01 	add.w	fp, fp, #1
 800b962:	e7b9      	b.n	800b8d8 <_printf_float+0x300>
 800b964:	4631      	mov	r1, r6
 800b966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b96a:	4628      	mov	r0, r5
 800b96c:	47b8      	blx	r7
 800b96e:	3001      	adds	r0, #1
 800b970:	d1bf      	bne.n	800b8f2 <_printf_float+0x31a>
 800b972:	e68c      	b.n	800b68e <_printf_float+0xb6>
 800b974:	464b      	mov	r3, r9
 800b976:	4631      	mov	r1, r6
 800b978:	4628      	mov	r0, r5
 800b97a:	eb08 020a 	add.w	r2, r8, sl
 800b97e:	47b8      	blx	r7
 800b980:	3001      	adds	r0, #1
 800b982:	d1c2      	bne.n	800b90a <_printf_float+0x332>
 800b984:	e683      	b.n	800b68e <_printf_float+0xb6>
 800b986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b988:	2a01      	cmp	r2, #1
 800b98a:	dc01      	bgt.n	800b990 <_printf_float+0x3b8>
 800b98c:	07db      	lsls	r3, r3, #31
 800b98e:	d537      	bpl.n	800ba00 <_printf_float+0x428>
 800b990:	2301      	movs	r3, #1
 800b992:	4642      	mov	r2, r8
 800b994:	4631      	mov	r1, r6
 800b996:	4628      	mov	r0, r5
 800b998:	47b8      	blx	r7
 800b99a:	3001      	adds	r0, #1
 800b99c:	f43f ae77 	beq.w	800b68e <_printf_float+0xb6>
 800b9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	47b8      	blx	r7
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	f43f ae6f 	beq.w	800b68e <_printf_float+0xb6>
 800b9b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f7f5 f862 	bl	8000a80 <__aeabi_dcmpeq>
 800b9bc:	b9d8      	cbnz	r0, 800b9f6 <_printf_float+0x41e>
 800b9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9c0:	f108 0201 	add.w	r2, r8, #1
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	4631      	mov	r1, r6
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	47b8      	blx	r7
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d10e      	bne.n	800b9ee <_printf_float+0x416>
 800b9d0:	e65d      	b.n	800b68e <_printf_float+0xb6>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	464a      	mov	r2, r9
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4628      	mov	r0, r5
 800b9da:	47b8      	blx	r7
 800b9dc:	3001      	adds	r0, #1
 800b9de:	f43f ae56 	beq.w	800b68e <_printf_float+0xb6>
 800b9e2:	f108 0801 	add.w	r8, r8, #1
 800b9e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	4543      	cmp	r3, r8
 800b9ec:	dcf1      	bgt.n	800b9d2 <_printf_float+0x3fa>
 800b9ee:	4653      	mov	r3, sl
 800b9f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b9f4:	e6e0      	b.n	800b7b8 <_printf_float+0x1e0>
 800b9f6:	f04f 0800 	mov.w	r8, #0
 800b9fa:	f104 091a 	add.w	r9, r4, #26
 800b9fe:	e7f2      	b.n	800b9e6 <_printf_float+0x40e>
 800ba00:	2301      	movs	r3, #1
 800ba02:	4642      	mov	r2, r8
 800ba04:	e7df      	b.n	800b9c6 <_printf_float+0x3ee>
 800ba06:	2301      	movs	r3, #1
 800ba08:	464a      	mov	r2, r9
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	47b8      	blx	r7
 800ba10:	3001      	adds	r0, #1
 800ba12:	f43f ae3c 	beq.w	800b68e <_printf_float+0xb6>
 800ba16:	f108 0801 	add.w	r8, r8, #1
 800ba1a:	68e3      	ldr	r3, [r4, #12]
 800ba1c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ba1e:	1a5b      	subs	r3, r3, r1
 800ba20:	4543      	cmp	r3, r8
 800ba22:	dcf0      	bgt.n	800ba06 <_printf_float+0x42e>
 800ba24:	e6fd      	b.n	800b822 <_printf_float+0x24a>
 800ba26:	f04f 0800 	mov.w	r8, #0
 800ba2a:	f104 0919 	add.w	r9, r4, #25
 800ba2e:	e7f4      	b.n	800ba1a <_printf_float+0x442>

0800ba30 <_printf_common>:
 800ba30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba34:	4616      	mov	r6, r2
 800ba36:	4699      	mov	r9, r3
 800ba38:	688a      	ldr	r2, [r1, #8]
 800ba3a:	690b      	ldr	r3, [r1, #16]
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	bfb8      	it	lt
 800ba42:	4613      	movlt	r3, r2
 800ba44:	6033      	str	r3, [r6, #0]
 800ba46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba50:	b10a      	cbz	r2, 800ba56 <_printf_common+0x26>
 800ba52:	3301      	adds	r3, #1
 800ba54:	6033      	str	r3, [r6, #0]
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	0699      	lsls	r1, r3, #26
 800ba5a:	bf42      	ittt	mi
 800ba5c:	6833      	ldrmi	r3, [r6, #0]
 800ba5e:	3302      	addmi	r3, #2
 800ba60:	6033      	strmi	r3, [r6, #0]
 800ba62:	6825      	ldr	r5, [r4, #0]
 800ba64:	f015 0506 	ands.w	r5, r5, #6
 800ba68:	d106      	bne.n	800ba78 <_printf_common+0x48>
 800ba6a:	f104 0a19 	add.w	sl, r4, #25
 800ba6e:	68e3      	ldr	r3, [r4, #12]
 800ba70:	6832      	ldr	r2, [r6, #0]
 800ba72:	1a9b      	subs	r3, r3, r2
 800ba74:	42ab      	cmp	r3, r5
 800ba76:	dc28      	bgt.n	800baca <_printf_common+0x9a>
 800ba78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba7c:	1e13      	subs	r3, r2, #0
 800ba7e:	6822      	ldr	r2, [r4, #0]
 800ba80:	bf18      	it	ne
 800ba82:	2301      	movne	r3, #1
 800ba84:	0692      	lsls	r2, r2, #26
 800ba86:	d42d      	bmi.n	800bae4 <_printf_common+0xb4>
 800ba88:	4649      	mov	r1, r9
 800ba8a:	4638      	mov	r0, r7
 800ba8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba90:	47c0      	blx	r8
 800ba92:	3001      	adds	r0, #1
 800ba94:	d020      	beq.n	800bad8 <_printf_common+0xa8>
 800ba96:	6823      	ldr	r3, [r4, #0]
 800ba98:	68e5      	ldr	r5, [r4, #12]
 800ba9a:	f003 0306 	and.w	r3, r3, #6
 800ba9e:	2b04      	cmp	r3, #4
 800baa0:	bf18      	it	ne
 800baa2:	2500      	movne	r5, #0
 800baa4:	6832      	ldr	r2, [r6, #0]
 800baa6:	f04f 0600 	mov.w	r6, #0
 800baaa:	68a3      	ldr	r3, [r4, #8]
 800baac:	bf08      	it	eq
 800baae:	1aad      	subeq	r5, r5, r2
 800bab0:	6922      	ldr	r2, [r4, #16]
 800bab2:	bf08      	it	eq
 800bab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bab8:	4293      	cmp	r3, r2
 800baba:	bfc4      	itt	gt
 800babc:	1a9b      	subgt	r3, r3, r2
 800babe:	18ed      	addgt	r5, r5, r3
 800bac0:	341a      	adds	r4, #26
 800bac2:	42b5      	cmp	r5, r6
 800bac4:	d11a      	bne.n	800bafc <_printf_common+0xcc>
 800bac6:	2000      	movs	r0, #0
 800bac8:	e008      	b.n	800badc <_printf_common+0xac>
 800baca:	2301      	movs	r3, #1
 800bacc:	4652      	mov	r2, sl
 800bace:	4649      	mov	r1, r9
 800bad0:	4638      	mov	r0, r7
 800bad2:	47c0      	blx	r8
 800bad4:	3001      	adds	r0, #1
 800bad6:	d103      	bne.n	800bae0 <_printf_common+0xb0>
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae0:	3501      	adds	r5, #1
 800bae2:	e7c4      	b.n	800ba6e <_printf_common+0x3e>
 800bae4:	2030      	movs	r0, #48	; 0x30
 800bae6:	18e1      	adds	r1, r4, r3
 800bae8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baec:	1c5a      	adds	r2, r3, #1
 800baee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800baf2:	4422      	add	r2, r4
 800baf4:	3302      	adds	r3, #2
 800baf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bafa:	e7c5      	b.n	800ba88 <_printf_common+0x58>
 800bafc:	2301      	movs	r3, #1
 800bafe:	4622      	mov	r2, r4
 800bb00:	4649      	mov	r1, r9
 800bb02:	4638      	mov	r0, r7
 800bb04:	47c0      	blx	r8
 800bb06:	3001      	adds	r0, #1
 800bb08:	d0e6      	beq.n	800bad8 <_printf_common+0xa8>
 800bb0a:	3601      	adds	r6, #1
 800bb0c:	e7d9      	b.n	800bac2 <_printf_common+0x92>
	...

0800bb10 <_printf_i>:
 800bb10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb14:	460c      	mov	r4, r1
 800bb16:	7e27      	ldrb	r7, [r4, #24]
 800bb18:	4691      	mov	r9, r2
 800bb1a:	2f78      	cmp	r7, #120	; 0x78
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	469a      	mov	sl, r3
 800bb20:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb26:	d807      	bhi.n	800bb38 <_printf_i+0x28>
 800bb28:	2f62      	cmp	r7, #98	; 0x62
 800bb2a:	d80a      	bhi.n	800bb42 <_printf_i+0x32>
 800bb2c:	2f00      	cmp	r7, #0
 800bb2e:	f000 80d9 	beq.w	800bce4 <_printf_i+0x1d4>
 800bb32:	2f58      	cmp	r7, #88	; 0x58
 800bb34:	f000 80a4 	beq.w	800bc80 <_printf_i+0x170>
 800bb38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bb3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb40:	e03a      	b.n	800bbb8 <_printf_i+0xa8>
 800bb42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb46:	2b15      	cmp	r3, #21
 800bb48:	d8f6      	bhi.n	800bb38 <_printf_i+0x28>
 800bb4a:	a001      	add	r0, pc, #4	; (adr r0, 800bb50 <_printf_i+0x40>)
 800bb4c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bb50:	0800bba9 	.word	0x0800bba9
 800bb54:	0800bbbd 	.word	0x0800bbbd
 800bb58:	0800bb39 	.word	0x0800bb39
 800bb5c:	0800bb39 	.word	0x0800bb39
 800bb60:	0800bb39 	.word	0x0800bb39
 800bb64:	0800bb39 	.word	0x0800bb39
 800bb68:	0800bbbd 	.word	0x0800bbbd
 800bb6c:	0800bb39 	.word	0x0800bb39
 800bb70:	0800bb39 	.word	0x0800bb39
 800bb74:	0800bb39 	.word	0x0800bb39
 800bb78:	0800bb39 	.word	0x0800bb39
 800bb7c:	0800bccb 	.word	0x0800bccb
 800bb80:	0800bbed 	.word	0x0800bbed
 800bb84:	0800bcad 	.word	0x0800bcad
 800bb88:	0800bb39 	.word	0x0800bb39
 800bb8c:	0800bb39 	.word	0x0800bb39
 800bb90:	0800bced 	.word	0x0800bced
 800bb94:	0800bb39 	.word	0x0800bb39
 800bb98:	0800bbed 	.word	0x0800bbed
 800bb9c:	0800bb39 	.word	0x0800bb39
 800bba0:	0800bb39 	.word	0x0800bb39
 800bba4:	0800bcb5 	.word	0x0800bcb5
 800bba8:	680b      	ldr	r3, [r1, #0]
 800bbaa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbae:	1d1a      	adds	r2, r3, #4
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	600a      	str	r2, [r1, #0]
 800bbb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e0a4      	b.n	800bd06 <_printf_i+0x1f6>
 800bbbc:	6825      	ldr	r5, [r4, #0]
 800bbbe:	6808      	ldr	r0, [r1, #0]
 800bbc0:	062e      	lsls	r6, r5, #24
 800bbc2:	f100 0304 	add.w	r3, r0, #4
 800bbc6:	d50a      	bpl.n	800bbde <_printf_i+0xce>
 800bbc8:	6805      	ldr	r5, [r0, #0]
 800bbca:	600b      	str	r3, [r1, #0]
 800bbcc:	2d00      	cmp	r5, #0
 800bbce:	da03      	bge.n	800bbd8 <_printf_i+0xc8>
 800bbd0:	232d      	movs	r3, #45	; 0x2d
 800bbd2:	426d      	negs	r5, r5
 800bbd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbd8:	230a      	movs	r3, #10
 800bbda:	485e      	ldr	r0, [pc, #376]	; (800bd54 <_printf_i+0x244>)
 800bbdc:	e019      	b.n	800bc12 <_printf_i+0x102>
 800bbde:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bbe2:	6805      	ldr	r5, [r0, #0]
 800bbe4:	600b      	str	r3, [r1, #0]
 800bbe6:	bf18      	it	ne
 800bbe8:	b22d      	sxthne	r5, r5
 800bbea:	e7ef      	b.n	800bbcc <_printf_i+0xbc>
 800bbec:	680b      	ldr	r3, [r1, #0]
 800bbee:	6825      	ldr	r5, [r4, #0]
 800bbf0:	1d18      	adds	r0, r3, #4
 800bbf2:	6008      	str	r0, [r1, #0]
 800bbf4:	0628      	lsls	r0, r5, #24
 800bbf6:	d501      	bpl.n	800bbfc <_printf_i+0xec>
 800bbf8:	681d      	ldr	r5, [r3, #0]
 800bbfa:	e002      	b.n	800bc02 <_printf_i+0xf2>
 800bbfc:	0669      	lsls	r1, r5, #25
 800bbfe:	d5fb      	bpl.n	800bbf8 <_printf_i+0xe8>
 800bc00:	881d      	ldrh	r5, [r3, #0]
 800bc02:	2f6f      	cmp	r7, #111	; 0x6f
 800bc04:	bf0c      	ite	eq
 800bc06:	2308      	moveq	r3, #8
 800bc08:	230a      	movne	r3, #10
 800bc0a:	4852      	ldr	r0, [pc, #328]	; (800bd54 <_printf_i+0x244>)
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc12:	6866      	ldr	r6, [r4, #4]
 800bc14:	2e00      	cmp	r6, #0
 800bc16:	bfa8      	it	ge
 800bc18:	6821      	ldrge	r1, [r4, #0]
 800bc1a:	60a6      	str	r6, [r4, #8]
 800bc1c:	bfa4      	itt	ge
 800bc1e:	f021 0104 	bicge.w	r1, r1, #4
 800bc22:	6021      	strge	r1, [r4, #0]
 800bc24:	b90d      	cbnz	r5, 800bc2a <_printf_i+0x11a>
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	d04d      	beq.n	800bcc6 <_printf_i+0x1b6>
 800bc2a:	4616      	mov	r6, r2
 800bc2c:	fbb5 f1f3 	udiv	r1, r5, r3
 800bc30:	fb03 5711 	mls	r7, r3, r1, r5
 800bc34:	5dc7      	ldrb	r7, [r0, r7]
 800bc36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bc3a:	462f      	mov	r7, r5
 800bc3c:	42bb      	cmp	r3, r7
 800bc3e:	460d      	mov	r5, r1
 800bc40:	d9f4      	bls.n	800bc2c <_printf_i+0x11c>
 800bc42:	2b08      	cmp	r3, #8
 800bc44:	d10b      	bne.n	800bc5e <_printf_i+0x14e>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	07df      	lsls	r7, r3, #31
 800bc4a:	d508      	bpl.n	800bc5e <_printf_i+0x14e>
 800bc4c:	6923      	ldr	r3, [r4, #16]
 800bc4e:	6861      	ldr	r1, [r4, #4]
 800bc50:	4299      	cmp	r1, r3
 800bc52:	bfde      	ittt	le
 800bc54:	2330      	movle	r3, #48	; 0x30
 800bc56:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc5e:	1b92      	subs	r2, r2, r6
 800bc60:	6122      	str	r2, [r4, #16]
 800bc62:	464b      	mov	r3, r9
 800bc64:	4621      	mov	r1, r4
 800bc66:	4640      	mov	r0, r8
 800bc68:	f8cd a000 	str.w	sl, [sp]
 800bc6c:	aa03      	add	r2, sp, #12
 800bc6e:	f7ff fedf 	bl	800ba30 <_printf_common>
 800bc72:	3001      	adds	r0, #1
 800bc74:	d14c      	bne.n	800bd10 <_printf_i+0x200>
 800bc76:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7a:	b004      	add	sp, #16
 800bc7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc80:	4834      	ldr	r0, [pc, #208]	; (800bd54 <_printf_i+0x244>)
 800bc82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bc86:	680e      	ldr	r6, [r1, #0]
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bc8e:	061f      	lsls	r7, r3, #24
 800bc90:	600e      	str	r6, [r1, #0]
 800bc92:	d514      	bpl.n	800bcbe <_printf_i+0x1ae>
 800bc94:	07d9      	lsls	r1, r3, #31
 800bc96:	bf44      	itt	mi
 800bc98:	f043 0320 	orrmi.w	r3, r3, #32
 800bc9c:	6023      	strmi	r3, [r4, #0]
 800bc9e:	b91d      	cbnz	r5, 800bca8 <_printf_i+0x198>
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	f023 0320 	bic.w	r3, r3, #32
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	2310      	movs	r3, #16
 800bcaa:	e7af      	b.n	800bc0c <_printf_i+0xfc>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	f043 0320 	orr.w	r3, r3, #32
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	2378      	movs	r3, #120	; 0x78
 800bcb6:	4828      	ldr	r0, [pc, #160]	; (800bd58 <_printf_i+0x248>)
 800bcb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcbc:	e7e3      	b.n	800bc86 <_printf_i+0x176>
 800bcbe:	065e      	lsls	r6, r3, #25
 800bcc0:	bf48      	it	mi
 800bcc2:	b2ad      	uxthmi	r5, r5
 800bcc4:	e7e6      	b.n	800bc94 <_printf_i+0x184>
 800bcc6:	4616      	mov	r6, r2
 800bcc8:	e7bb      	b.n	800bc42 <_printf_i+0x132>
 800bcca:	680b      	ldr	r3, [r1, #0]
 800bccc:	6826      	ldr	r6, [r4, #0]
 800bcce:	1d1d      	adds	r5, r3, #4
 800bcd0:	6960      	ldr	r0, [r4, #20]
 800bcd2:	600d      	str	r5, [r1, #0]
 800bcd4:	0635      	lsls	r5, r6, #24
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	d501      	bpl.n	800bcde <_printf_i+0x1ce>
 800bcda:	6018      	str	r0, [r3, #0]
 800bcdc:	e002      	b.n	800bce4 <_printf_i+0x1d4>
 800bcde:	0671      	lsls	r1, r6, #25
 800bce0:	d5fb      	bpl.n	800bcda <_printf_i+0x1ca>
 800bce2:	8018      	strh	r0, [r3, #0]
 800bce4:	2300      	movs	r3, #0
 800bce6:	4616      	mov	r6, r2
 800bce8:	6123      	str	r3, [r4, #16]
 800bcea:	e7ba      	b.n	800bc62 <_printf_i+0x152>
 800bcec:	680b      	ldr	r3, [r1, #0]
 800bcee:	1d1a      	adds	r2, r3, #4
 800bcf0:	600a      	str	r2, [r1, #0]
 800bcf2:	681e      	ldr	r6, [r3, #0]
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	f002 fb57 	bl	800e3ac <memchr>
 800bcfe:	b108      	cbz	r0, 800bd04 <_printf_i+0x1f4>
 800bd00:	1b80      	subs	r0, r0, r6
 800bd02:	6060      	str	r0, [r4, #4]
 800bd04:	6863      	ldr	r3, [r4, #4]
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd0e:	e7a8      	b.n	800bc62 <_printf_i+0x152>
 800bd10:	4632      	mov	r2, r6
 800bd12:	4649      	mov	r1, r9
 800bd14:	4640      	mov	r0, r8
 800bd16:	6923      	ldr	r3, [r4, #16]
 800bd18:	47d0      	blx	sl
 800bd1a:	3001      	adds	r0, #1
 800bd1c:	d0ab      	beq.n	800bc76 <_printf_i+0x166>
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	079b      	lsls	r3, r3, #30
 800bd22:	d413      	bmi.n	800bd4c <_printf_i+0x23c>
 800bd24:	68e0      	ldr	r0, [r4, #12]
 800bd26:	9b03      	ldr	r3, [sp, #12]
 800bd28:	4298      	cmp	r0, r3
 800bd2a:	bfb8      	it	lt
 800bd2c:	4618      	movlt	r0, r3
 800bd2e:	e7a4      	b.n	800bc7a <_printf_i+0x16a>
 800bd30:	2301      	movs	r3, #1
 800bd32:	4632      	mov	r2, r6
 800bd34:	4649      	mov	r1, r9
 800bd36:	4640      	mov	r0, r8
 800bd38:	47d0      	blx	sl
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	d09b      	beq.n	800bc76 <_printf_i+0x166>
 800bd3e:	3501      	adds	r5, #1
 800bd40:	68e3      	ldr	r3, [r4, #12]
 800bd42:	9903      	ldr	r1, [sp, #12]
 800bd44:	1a5b      	subs	r3, r3, r1
 800bd46:	42ab      	cmp	r3, r5
 800bd48:	dcf2      	bgt.n	800bd30 <_printf_i+0x220>
 800bd4a:	e7eb      	b.n	800bd24 <_printf_i+0x214>
 800bd4c:	2500      	movs	r5, #0
 800bd4e:	f104 0619 	add.w	r6, r4, #25
 800bd52:	e7f5      	b.n	800bd40 <_printf_i+0x230>
 800bd54:	08010512 	.word	0x08010512
 800bd58:	08010523 	.word	0x08010523

0800bd5c <_scanf_float>:
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	b087      	sub	sp, #28
 800bd62:	9303      	str	r3, [sp, #12]
 800bd64:	688b      	ldr	r3, [r1, #8]
 800bd66:	4617      	mov	r7, r2
 800bd68:	1e5a      	subs	r2, r3, #1
 800bd6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd6e:	bf85      	ittet	hi
 800bd70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bd74:	195b      	addhi	r3, r3, r5
 800bd76:	2300      	movls	r3, #0
 800bd78:	9302      	strhi	r3, [sp, #8]
 800bd7a:	bf88      	it	hi
 800bd7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd80:	468b      	mov	fp, r1
 800bd82:	f04f 0500 	mov.w	r5, #0
 800bd86:	bf8c      	ite	hi
 800bd88:	608b      	strhi	r3, [r1, #8]
 800bd8a:	9302      	strls	r3, [sp, #8]
 800bd8c:	680b      	ldr	r3, [r1, #0]
 800bd8e:	4680      	mov	r8, r0
 800bd90:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bd94:	f84b 3b1c 	str.w	r3, [fp], #28
 800bd98:	460c      	mov	r4, r1
 800bd9a:	465e      	mov	r6, fp
 800bd9c:	46aa      	mov	sl, r5
 800bd9e:	46a9      	mov	r9, r5
 800bda0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bda4:	9501      	str	r5, [sp, #4]
 800bda6:	68a2      	ldr	r2, [r4, #8]
 800bda8:	b152      	cbz	r2, 800bdc0 <_scanf_float+0x64>
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b4e      	cmp	r3, #78	; 0x4e
 800bdb0:	d864      	bhi.n	800be7c <_scanf_float+0x120>
 800bdb2:	2b40      	cmp	r3, #64	; 0x40
 800bdb4:	d83c      	bhi.n	800be30 <_scanf_float+0xd4>
 800bdb6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bdba:	b2c8      	uxtb	r0, r1
 800bdbc:	280e      	cmp	r0, #14
 800bdbe:	d93a      	bls.n	800be36 <_scanf_float+0xda>
 800bdc0:	f1b9 0f00 	cmp.w	r9, #0
 800bdc4:	d003      	beq.n	800bdce <_scanf_float+0x72>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdd2:	f1ba 0f01 	cmp.w	sl, #1
 800bdd6:	f200 8113 	bhi.w	800c000 <_scanf_float+0x2a4>
 800bdda:	455e      	cmp	r6, fp
 800bddc:	f200 8105 	bhi.w	800bfea <_scanf_float+0x28e>
 800bde0:	2501      	movs	r5, #1
 800bde2:	4628      	mov	r0, r5
 800bde4:	b007      	add	sp, #28
 800bde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bdee:	2a0d      	cmp	r2, #13
 800bdf0:	d8e6      	bhi.n	800bdc0 <_scanf_float+0x64>
 800bdf2:	a101      	add	r1, pc, #4	; (adr r1, 800bdf8 <_scanf_float+0x9c>)
 800bdf4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bdf8:	0800bf37 	.word	0x0800bf37
 800bdfc:	0800bdc1 	.word	0x0800bdc1
 800be00:	0800bdc1 	.word	0x0800bdc1
 800be04:	0800bdc1 	.word	0x0800bdc1
 800be08:	0800bf97 	.word	0x0800bf97
 800be0c:	0800bf6f 	.word	0x0800bf6f
 800be10:	0800bdc1 	.word	0x0800bdc1
 800be14:	0800bdc1 	.word	0x0800bdc1
 800be18:	0800bf45 	.word	0x0800bf45
 800be1c:	0800bdc1 	.word	0x0800bdc1
 800be20:	0800bdc1 	.word	0x0800bdc1
 800be24:	0800bdc1 	.word	0x0800bdc1
 800be28:	0800bdc1 	.word	0x0800bdc1
 800be2c:	0800befd 	.word	0x0800befd
 800be30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800be34:	e7db      	b.n	800bdee <_scanf_float+0x92>
 800be36:	290e      	cmp	r1, #14
 800be38:	d8c2      	bhi.n	800bdc0 <_scanf_float+0x64>
 800be3a:	a001      	add	r0, pc, #4	; (adr r0, 800be40 <_scanf_float+0xe4>)
 800be3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be40:	0800beef 	.word	0x0800beef
 800be44:	0800bdc1 	.word	0x0800bdc1
 800be48:	0800beef 	.word	0x0800beef
 800be4c:	0800bf83 	.word	0x0800bf83
 800be50:	0800bdc1 	.word	0x0800bdc1
 800be54:	0800be9d 	.word	0x0800be9d
 800be58:	0800bed9 	.word	0x0800bed9
 800be5c:	0800bed9 	.word	0x0800bed9
 800be60:	0800bed9 	.word	0x0800bed9
 800be64:	0800bed9 	.word	0x0800bed9
 800be68:	0800bed9 	.word	0x0800bed9
 800be6c:	0800bed9 	.word	0x0800bed9
 800be70:	0800bed9 	.word	0x0800bed9
 800be74:	0800bed9 	.word	0x0800bed9
 800be78:	0800bed9 	.word	0x0800bed9
 800be7c:	2b6e      	cmp	r3, #110	; 0x6e
 800be7e:	d809      	bhi.n	800be94 <_scanf_float+0x138>
 800be80:	2b60      	cmp	r3, #96	; 0x60
 800be82:	d8b2      	bhi.n	800bdea <_scanf_float+0x8e>
 800be84:	2b54      	cmp	r3, #84	; 0x54
 800be86:	d077      	beq.n	800bf78 <_scanf_float+0x21c>
 800be88:	2b59      	cmp	r3, #89	; 0x59
 800be8a:	d199      	bne.n	800bdc0 <_scanf_float+0x64>
 800be8c:	2d07      	cmp	r5, #7
 800be8e:	d197      	bne.n	800bdc0 <_scanf_float+0x64>
 800be90:	2508      	movs	r5, #8
 800be92:	e029      	b.n	800bee8 <_scanf_float+0x18c>
 800be94:	2b74      	cmp	r3, #116	; 0x74
 800be96:	d06f      	beq.n	800bf78 <_scanf_float+0x21c>
 800be98:	2b79      	cmp	r3, #121	; 0x79
 800be9a:	e7f6      	b.n	800be8a <_scanf_float+0x12e>
 800be9c:	6821      	ldr	r1, [r4, #0]
 800be9e:	05c8      	lsls	r0, r1, #23
 800bea0:	d51a      	bpl.n	800bed8 <_scanf_float+0x17c>
 800bea2:	9b02      	ldr	r3, [sp, #8]
 800bea4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bea8:	6021      	str	r1, [r4, #0]
 800beaa:	f109 0901 	add.w	r9, r9, #1
 800beae:	b11b      	cbz	r3, 800beb8 <_scanf_float+0x15c>
 800beb0:	3b01      	subs	r3, #1
 800beb2:	3201      	adds	r2, #1
 800beb4:	9302      	str	r3, [sp, #8]
 800beb6:	60a2      	str	r2, [r4, #8]
 800beb8:	68a3      	ldr	r3, [r4, #8]
 800beba:	3b01      	subs	r3, #1
 800bebc:	60a3      	str	r3, [r4, #8]
 800bebe:	6923      	ldr	r3, [r4, #16]
 800bec0:	3301      	adds	r3, #1
 800bec2:	6123      	str	r3, [r4, #16]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3b01      	subs	r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	607b      	str	r3, [r7, #4]
 800becc:	f340 8084 	ble.w	800bfd8 <_scanf_float+0x27c>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	3301      	adds	r3, #1
 800bed4:	603b      	str	r3, [r7, #0]
 800bed6:	e766      	b.n	800bda6 <_scanf_float+0x4a>
 800bed8:	eb1a 0f05 	cmn.w	sl, r5
 800bedc:	f47f af70 	bne.w	800bdc0 <_scanf_float+0x64>
 800bee0:	6822      	ldr	r2, [r4, #0]
 800bee2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bee6:	6022      	str	r2, [r4, #0]
 800bee8:	f806 3b01 	strb.w	r3, [r6], #1
 800beec:	e7e4      	b.n	800beb8 <_scanf_float+0x15c>
 800beee:	6822      	ldr	r2, [r4, #0]
 800bef0:	0610      	lsls	r0, r2, #24
 800bef2:	f57f af65 	bpl.w	800bdc0 <_scanf_float+0x64>
 800bef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800befa:	e7f4      	b.n	800bee6 <_scanf_float+0x18a>
 800befc:	f1ba 0f00 	cmp.w	sl, #0
 800bf00:	d10e      	bne.n	800bf20 <_scanf_float+0x1c4>
 800bf02:	f1b9 0f00 	cmp.w	r9, #0
 800bf06:	d10e      	bne.n	800bf26 <_scanf_float+0x1ca>
 800bf08:	6822      	ldr	r2, [r4, #0]
 800bf0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf12:	d108      	bne.n	800bf26 <_scanf_float+0x1ca>
 800bf14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf18:	f04f 0a01 	mov.w	sl, #1
 800bf1c:	6022      	str	r2, [r4, #0]
 800bf1e:	e7e3      	b.n	800bee8 <_scanf_float+0x18c>
 800bf20:	f1ba 0f02 	cmp.w	sl, #2
 800bf24:	d055      	beq.n	800bfd2 <_scanf_float+0x276>
 800bf26:	2d01      	cmp	r5, #1
 800bf28:	d002      	beq.n	800bf30 <_scanf_float+0x1d4>
 800bf2a:	2d04      	cmp	r5, #4
 800bf2c:	f47f af48 	bne.w	800bdc0 <_scanf_float+0x64>
 800bf30:	3501      	adds	r5, #1
 800bf32:	b2ed      	uxtb	r5, r5
 800bf34:	e7d8      	b.n	800bee8 <_scanf_float+0x18c>
 800bf36:	f1ba 0f01 	cmp.w	sl, #1
 800bf3a:	f47f af41 	bne.w	800bdc0 <_scanf_float+0x64>
 800bf3e:	f04f 0a02 	mov.w	sl, #2
 800bf42:	e7d1      	b.n	800bee8 <_scanf_float+0x18c>
 800bf44:	b97d      	cbnz	r5, 800bf66 <_scanf_float+0x20a>
 800bf46:	f1b9 0f00 	cmp.w	r9, #0
 800bf4a:	f47f af3c 	bne.w	800bdc6 <_scanf_float+0x6a>
 800bf4e:	6822      	ldr	r2, [r4, #0]
 800bf50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf58:	f47f af39 	bne.w	800bdce <_scanf_float+0x72>
 800bf5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf60:	2501      	movs	r5, #1
 800bf62:	6022      	str	r2, [r4, #0]
 800bf64:	e7c0      	b.n	800bee8 <_scanf_float+0x18c>
 800bf66:	2d03      	cmp	r5, #3
 800bf68:	d0e2      	beq.n	800bf30 <_scanf_float+0x1d4>
 800bf6a:	2d05      	cmp	r5, #5
 800bf6c:	e7de      	b.n	800bf2c <_scanf_float+0x1d0>
 800bf6e:	2d02      	cmp	r5, #2
 800bf70:	f47f af26 	bne.w	800bdc0 <_scanf_float+0x64>
 800bf74:	2503      	movs	r5, #3
 800bf76:	e7b7      	b.n	800bee8 <_scanf_float+0x18c>
 800bf78:	2d06      	cmp	r5, #6
 800bf7a:	f47f af21 	bne.w	800bdc0 <_scanf_float+0x64>
 800bf7e:	2507      	movs	r5, #7
 800bf80:	e7b2      	b.n	800bee8 <_scanf_float+0x18c>
 800bf82:	6822      	ldr	r2, [r4, #0]
 800bf84:	0591      	lsls	r1, r2, #22
 800bf86:	f57f af1b 	bpl.w	800bdc0 <_scanf_float+0x64>
 800bf8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bf8e:	6022      	str	r2, [r4, #0]
 800bf90:	f8cd 9004 	str.w	r9, [sp, #4]
 800bf94:	e7a8      	b.n	800bee8 <_scanf_float+0x18c>
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bf9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bfa0:	d006      	beq.n	800bfb0 <_scanf_float+0x254>
 800bfa2:	0550      	lsls	r0, r2, #21
 800bfa4:	f57f af0c 	bpl.w	800bdc0 <_scanf_float+0x64>
 800bfa8:	f1b9 0f00 	cmp.w	r9, #0
 800bfac:	f43f af0f 	beq.w	800bdce <_scanf_float+0x72>
 800bfb0:	0591      	lsls	r1, r2, #22
 800bfb2:	bf58      	it	pl
 800bfb4:	9901      	ldrpl	r1, [sp, #4]
 800bfb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bfba:	bf58      	it	pl
 800bfbc:	eba9 0101 	subpl.w	r1, r9, r1
 800bfc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bfc4:	f04f 0900 	mov.w	r9, #0
 800bfc8:	bf58      	it	pl
 800bfca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bfce:	6022      	str	r2, [r4, #0]
 800bfd0:	e78a      	b.n	800bee8 <_scanf_float+0x18c>
 800bfd2:	f04f 0a03 	mov.w	sl, #3
 800bfd6:	e787      	b.n	800bee8 <_scanf_float+0x18c>
 800bfd8:	4639      	mov	r1, r7
 800bfda:	4640      	mov	r0, r8
 800bfdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfe0:	4798      	blx	r3
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	f43f aedf 	beq.w	800bda6 <_scanf_float+0x4a>
 800bfe8:	e6ea      	b.n	800bdc0 <_scanf_float+0x64>
 800bfea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfee:	463a      	mov	r2, r7
 800bff0:	4640      	mov	r0, r8
 800bff2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bff6:	4798      	blx	r3
 800bff8:	6923      	ldr	r3, [r4, #16]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	6123      	str	r3, [r4, #16]
 800bffe:	e6ec      	b.n	800bdda <_scanf_float+0x7e>
 800c000:	1e6b      	subs	r3, r5, #1
 800c002:	2b06      	cmp	r3, #6
 800c004:	d825      	bhi.n	800c052 <_scanf_float+0x2f6>
 800c006:	2d02      	cmp	r5, #2
 800c008:	d836      	bhi.n	800c078 <_scanf_float+0x31c>
 800c00a:	455e      	cmp	r6, fp
 800c00c:	f67f aee8 	bls.w	800bde0 <_scanf_float+0x84>
 800c010:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c014:	463a      	mov	r2, r7
 800c016:	4640      	mov	r0, r8
 800c018:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c01c:	4798      	blx	r3
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	3b01      	subs	r3, #1
 800c022:	6123      	str	r3, [r4, #16]
 800c024:	e7f1      	b.n	800c00a <_scanf_float+0x2ae>
 800c026:	9802      	ldr	r0, [sp, #8]
 800c028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c02c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c030:	463a      	mov	r2, r7
 800c032:	9002      	str	r0, [sp, #8]
 800c034:	4640      	mov	r0, r8
 800c036:	4798      	blx	r3
 800c038:	6923      	ldr	r3, [r4, #16]
 800c03a:	3b01      	subs	r3, #1
 800c03c:	6123      	str	r3, [r4, #16]
 800c03e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c042:	fa5f fa8a 	uxtb.w	sl, sl
 800c046:	f1ba 0f02 	cmp.w	sl, #2
 800c04a:	d1ec      	bne.n	800c026 <_scanf_float+0x2ca>
 800c04c:	3d03      	subs	r5, #3
 800c04e:	b2ed      	uxtb	r5, r5
 800c050:	1b76      	subs	r6, r6, r5
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	05da      	lsls	r2, r3, #23
 800c056:	d52f      	bpl.n	800c0b8 <_scanf_float+0x35c>
 800c058:	055b      	lsls	r3, r3, #21
 800c05a:	d510      	bpl.n	800c07e <_scanf_float+0x322>
 800c05c:	455e      	cmp	r6, fp
 800c05e:	f67f aebf 	bls.w	800bde0 <_scanf_float+0x84>
 800c062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c066:	463a      	mov	r2, r7
 800c068:	4640      	mov	r0, r8
 800c06a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c06e:	4798      	blx	r3
 800c070:	6923      	ldr	r3, [r4, #16]
 800c072:	3b01      	subs	r3, #1
 800c074:	6123      	str	r3, [r4, #16]
 800c076:	e7f1      	b.n	800c05c <_scanf_float+0x300>
 800c078:	46aa      	mov	sl, r5
 800c07a:	9602      	str	r6, [sp, #8]
 800c07c:	e7df      	b.n	800c03e <_scanf_float+0x2e2>
 800c07e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	2965      	cmp	r1, #101	; 0x65
 800c086:	f103 33ff 	add.w	r3, r3, #4294967295
 800c08a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	d00c      	beq.n	800c0ac <_scanf_float+0x350>
 800c092:	2945      	cmp	r1, #69	; 0x45
 800c094:	d00a      	beq.n	800c0ac <_scanf_float+0x350>
 800c096:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c09a:	463a      	mov	r2, r7
 800c09c:	4640      	mov	r0, r8
 800c09e:	4798      	blx	r3
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	1eb5      	subs	r5, r6, #2
 800c0aa:	6123      	str	r3, [r4, #16]
 800c0ac:	463a      	mov	r2, r7
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0b4:	4798      	blx	r3
 800c0b6:	462e      	mov	r6, r5
 800c0b8:	6825      	ldr	r5, [r4, #0]
 800c0ba:	f015 0510 	ands.w	r5, r5, #16
 800c0be:	d159      	bne.n	800c174 <_scanf_float+0x418>
 800c0c0:	7035      	strb	r5, [r6, #0]
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c0c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0cc:	d11c      	bne.n	800c108 <_scanf_float+0x3ac>
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	454b      	cmp	r3, r9
 800c0d2:	eba3 0209 	sub.w	r2, r3, r9
 800c0d6:	d124      	bne.n	800c122 <_scanf_float+0x3c6>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	4659      	mov	r1, fp
 800c0dc:	4640      	mov	r0, r8
 800c0de:	f000 fe9b 	bl	800ce18 <_strtod_r>
 800c0e2:	f8d4 c000 	ldr.w	ip, [r4]
 800c0e6:	9b03      	ldr	r3, [sp, #12]
 800c0e8:	f01c 0f02 	tst.w	ip, #2
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	d021      	beq.n	800c138 <_scanf_float+0x3dc>
 800c0f4:	9903      	ldr	r1, [sp, #12]
 800c0f6:	1d1a      	adds	r2, r3, #4
 800c0f8:	600a      	str	r2, [r1, #0]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	e9c3 6700 	strd	r6, r7, [r3]
 800c100:	68e3      	ldr	r3, [r4, #12]
 800c102:	3301      	adds	r3, #1
 800c104:	60e3      	str	r3, [r4, #12]
 800c106:	e66c      	b.n	800bde2 <_scanf_float+0x86>
 800c108:	9b04      	ldr	r3, [sp, #16]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d0e4      	beq.n	800c0d8 <_scanf_float+0x37c>
 800c10e:	9905      	ldr	r1, [sp, #20]
 800c110:	230a      	movs	r3, #10
 800c112:	462a      	mov	r2, r5
 800c114:	4640      	mov	r0, r8
 800c116:	3101      	adds	r1, #1
 800c118:	f000 ff0a 	bl	800cf30 <_strtol_r>
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	9e05      	ldr	r6, [sp, #20]
 800c120:	1ac2      	subs	r2, r0, r3
 800c122:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c126:	429e      	cmp	r6, r3
 800c128:	bf28      	it	cs
 800c12a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c12e:	4630      	mov	r0, r6
 800c130:	4911      	ldr	r1, [pc, #68]	; (800c178 <_scanf_float+0x41c>)
 800c132:	f000 f839 	bl	800c1a8 <siprintf>
 800c136:	e7cf      	b.n	800c0d8 <_scanf_float+0x37c>
 800c138:	f01c 0f04 	tst.w	ip, #4
 800c13c:	f103 0e04 	add.w	lr, r3, #4
 800c140:	d003      	beq.n	800c14a <_scanf_float+0x3ee>
 800c142:	9903      	ldr	r1, [sp, #12]
 800c144:	f8c1 e000 	str.w	lr, [r1]
 800c148:	e7d7      	b.n	800c0fa <_scanf_float+0x39e>
 800c14a:	9a03      	ldr	r2, [sp, #12]
 800c14c:	f8c2 e000 	str.w	lr, [r2]
 800c150:	f8d3 8000 	ldr.w	r8, [r3]
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	f7f4 fcc4 	bl	8000ae4 <__aeabi_dcmpun>
 800c15c:	b128      	cbz	r0, 800c16a <_scanf_float+0x40e>
 800c15e:	4807      	ldr	r0, [pc, #28]	; (800c17c <_scanf_float+0x420>)
 800c160:	f000 f81e 	bl	800c1a0 <nanf>
 800c164:	f8c8 0000 	str.w	r0, [r8]
 800c168:	e7ca      	b.n	800c100 <_scanf_float+0x3a4>
 800c16a:	4630      	mov	r0, r6
 800c16c:	4639      	mov	r1, r7
 800c16e:	f7f4 fd17 	bl	8000ba0 <__aeabi_d2f>
 800c172:	e7f7      	b.n	800c164 <_scanf_float+0x408>
 800c174:	2500      	movs	r5, #0
 800c176:	e634      	b.n	800bde2 <_scanf_float+0x86>
 800c178:	08010534 	.word	0x08010534
 800c17c:	08010870 	.word	0x08010870

0800c180 <_sbrk_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	2300      	movs	r3, #0
 800c184:	4d05      	ldr	r5, [pc, #20]	; (800c19c <_sbrk_r+0x1c>)
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	f7fa fb52 	bl	8006834 <_sbrk>
 800c190:	1c43      	adds	r3, r0, #1
 800c192:	d102      	bne.n	800c19a <_sbrk_r+0x1a>
 800c194:	682b      	ldr	r3, [r5, #0]
 800c196:	b103      	cbz	r3, 800c19a <_sbrk_r+0x1a>
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	bd38      	pop	{r3, r4, r5, pc}
 800c19c:	200008e4 	.word	0x200008e4

0800c1a0 <nanf>:
 800c1a0:	4800      	ldr	r0, [pc, #0]	; (800c1a4 <nanf+0x4>)
 800c1a2:	4770      	bx	lr
 800c1a4:	7fc00000 	.word	0x7fc00000

0800c1a8 <siprintf>:
 800c1a8:	b40e      	push	{r1, r2, r3}
 800c1aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1ae:	b500      	push	{lr}
 800c1b0:	b09c      	sub	sp, #112	; 0x70
 800c1b2:	ab1d      	add	r3, sp, #116	; 0x74
 800c1b4:	9002      	str	r0, [sp, #8]
 800c1b6:	9006      	str	r0, [sp, #24]
 800c1b8:	9107      	str	r1, [sp, #28]
 800c1ba:	9104      	str	r1, [sp, #16]
 800c1bc:	4808      	ldr	r0, [pc, #32]	; (800c1e0 <siprintf+0x38>)
 800c1be:	4909      	ldr	r1, [pc, #36]	; (800c1e4 <siprintf+0x3c>)
 800c1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c4:	9105      	str	r1, [sp, #20]
 800c1c6:	6800      	ldr	r0, [r0, #0]
 800c1c8:	a902      	add	r1, sp, #8
 800c1ca:	9301      	str	r3, [sp, #4]
 800c1cc:	f002 fe38 	bl	800ee40 <_svfiprintf_r>
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	9b02      	ldr	r3, [sp, #8]
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	b01c      	add	sp, #112	; 0x70
 800c1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1dc:	b003      	add	sp, #12
 800c1de:	4770      	bx	lr
 800c1e0:	20000048 	.word	0x20000048
 800c1e4:	ffff0208 	.word	0xffff0208

0800c1e8 <sulp>:
 800c1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ec:	460f      	mov	r7, r1
 800c1ee:	4690      	mov	r8, r2
 800c1f0:	f002 fc74 	bl	800eadc <__ulp>
 800c1f4:	4604      	mov	r4, r0
 800c1f6:	460d      	mov	r5, r1
 800c1f8:	f1b8 0f00 	cmp.w	r8, #0
 800c1fc:	d011      	beq.n	800c222 <sulp+0x3a>
 800c1fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c202:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c206:	2b00      	cmp	r3, #0
 800c208:	dd0b      	ble.n	800c222 <sulp+0x3a>
 800c20a:	2400      	movs	r4, #0
 800c20c:	051b      	lsls	r3, r3, #20
 800c20e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c212:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c216:	4622      	mov	r2, r4
 800c218:	462b      	mov	r3, r5
 800c21a:	f7f4 f9c9 	bl	80005b0 <__aeabi_dmul>
 800c21e:	4604      	mov	r4, r0
 800c220:	460d      	mov	r5, r1
 800c222:	4620      	mov	r0, r4
 800c224:	4629      	mov	r1, r5
 800c226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c22a:	0000      	movs	r0, r0
 800c22c:	0000      	movs	r0, r0
	...

0800c230 <_strtod_l>:
 800c230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c234:	469b      	mov	fp, r3
 800c236:	2300      	movs	r3, #0
 800c238:	b0a1      	sub	sp, #132	; 0x84
 800c23a:	931c      	str	r3, [sp, #112]	; 0x70
 800c23c:	4ba1      	ldr	r3, [pc, #644]	; (800c4c4 <_strtod_l+0x294>)
 800c23e:	4682      	mov	sl, r0
 800c240:	681f      	ldr	r7, [r3, #0]
 800c242:	460e      	mov	r6, r1
 800c244:	4638      	mov	r0, r7
 800c246:	9217      	str	r2, [sp, #92]	; 0x5c
 800c248:	f7f3 ffee 	bl	8000228 <strlen>
 800c24c:	f04f 0800 	mov.w	r8, #0
 800c250:	4604      	mov	r4, r0
 800c252:	f04f 0900 	mov.w	r9, #0
 800c256:	961b      	str	r6, [sp, #108]	; 0x6c
 800c258:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c25a:	781a      	ldrb	r2, [r3, #0]
 800c25c:	2a2b      	cmp	r2, #43	; 0x2b
 800c25e:	d04c      	beq.n	800c2fa <_strtod_l+0xca>
 800c260:	d83a      	bhi.n	800c2d8 <_strtod_l+0xa8>
 800c262:	2a0d      	cmp	r2, #13
 800c264:	d833      	bhi.n	800c2ce <_strtod_l+0x9e>
 800c266:	2a08      	cmp	r2, #8
 800c268:	d833      	bhi.n	800c2d2 <_strtod_l+0xa2>
 800c26a:	2a00      	cmp	r2, #0
 800c26c:	d03d      	beq.n	800c2ea <_strtod_l+0xba>
 800c26e:	2300      	movs	r3, #0
 800c270:	930c      	str	r3, [sp, #48]	; 0x30
 800c272:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c274:	782b      	ldrb	r3, [r5, #0]
 800c276:	2b30      	cmp	r3, #48	; 0x30
 800c278:	f040 80af 	bne.w	800c3da <_strtod_l+0x1aa>
 800c27c:	786b      	ldrb	r3, [r5, #1]
 800c27e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c282:	2b58      	cmp	r3, #88	; 0x58
 800c284:	d16c      	bne.n	800c360 <_strtod_l+0x130>
 800c286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c288:	4650      	mov	r0, sl
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	ab1c      	add	r3, sp, #112	; 0x70
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	4a8d      	ldr	r2, [pc, #564]	; (800c4c8 <_strtod_l+0x298>)
 800c292:	f8cd b008 	str.w	fp, [sp, #8]
 800c296:	ab1d      	add	r3, sp, #116	; 0x74
 800c298:	a91b      	add	r1, sp, #108	; 0x6c
 800c29a:	f001 fd73 	bl	800dd84 <__gethex>
 800c29e:	f010 0607 	ands.w	r6, r0, #7
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	d005      	beq.n	800c2b2 <_strtod_l+0x82>
 800c2a6:	2e06      	cmp	r6, #6
 800c2a8:	d129      	bne.n	800c2fe <_strtod_l+0xce>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	3501      	adds	r5, #1
 800c2ae:	951b      	str	r5, [sp, #108]	; 0x6c
 800c2b0:	930c      	str	r3, [sp, #48]	; 0x30
 800c2b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f040 8596 	bne.w	800cde6 <_strtod_l+0xbb6>
 800c2ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2bc:	b1d3      	cbz	r3, 800c2f4 <_strtod_l+0xc4>
 800c2be:	4642      	mov	r2, r8
 800c2c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c2c4:	4610      	mov	r0, r2
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	b021      	add	sp, #132	; 0x84
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	2a20      	cmp	r2, #32
 800c2d0:	d1cd      	bne.n	800c26e <_strtod_l+0x3e>
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2d6:	e7bf      	b.n	800c258 <_strtod_l+0x28>
 800c2d8:	2a2d      	cmp	r2, #45	; 0x2d
 800c2da:	d1c8      	bne.n	800c26e <_strtod_l+0x3e>
 800c2dc:	2201      	movs	r2, #1
 800c2de:	920c      	str	r2, [sp, #48]	; 0x30
 800c2e0:	1c5a      	adds	r2, r3, #1
 800c2e2:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2e4:	785b      	ldrb	r3, [r3, #1]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1c3      	bne.n	800c272 <_strtod_l+0x42>
 800c2ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2ec:	961b      	str	r6, [sp, #108]	; 0x6c
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f040 8577 	bne.w	800cde2 <_strtod_l+0xbb2>
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	464b      	mov	r3, r9
 800c2f8:	e7e4      	b.n	800c2c4 <_strtod_l+0x94>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	e7ef      	b.n	800c2de <_strtod_l+0xae>
 800c2fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c300:	b13a      	cbz	r2, 800c312 <_strtod_l+0xe2>
 800c302:	2135      	movs	r1, #53	; 0x35
 800c304:	a81e      	add	r0, sp, #120	; 0x78
 800c306:	f002 fced 	bl	800ece4 <__copybits>
 800c30a:	4650      	mov	r0, sl
 800c30c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c30e:	f002 f8b5 	bl	800e47c <_Bfree>
 800c312:	3e01      	subs	r6, #1
 800c314:	2e05      	cmp	r6, #5
 800c316:	d807      	bhi.n	800c328 <_strtod_l+0xf8>
 800c318:	e8df f006 	tbb	[pc, r6]
 800c31c:	1d180b0e 	.word	0x1d180b0e
 800c320:	030e      	.short	0x030e
 800c322:	f04f 0900 	mov.w	r9, #0
 800c326:	46c8      	mov	r8, r9
 800c328:	0721      	lsls	r1, r4, #28
 800c32a:	d5c2      	bpl.n	800c2b2 <_strtod_l+0x82>
 800c32c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800c330:	e7bf      	b.n	800c2b2 <_strtod_l+0x82>
 800c332:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800c336:	e7f7      	b.n	800c328 <_strtod_l+0xf8>
 800c338:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c33a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800c33e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c342:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c346:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c34a:	e7ed      	b.n	800c328 <_strtod_l+0xf8>
 800c34c:	f04f 0800 	mov.w	r8, #0
 800c350:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c4cc <_strtod_l+0x29c>
 800c354:	e7e8      	b.n	800c328 <_strtod_l+0xf8>
 800c356:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c35a:	f04f 38ff 	mov.w	r8, #4294967295
 800c35e:	e7e3      	b.n	800c328 <_strtod_l+0xf8>
 800c360:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	921b      	str	r2, [sp, #108]	; 0x6c
 800c366:	785b      	ldrb	r3, [r3, #1]
 800c368:	2b30      	cmp	r3, #48	; 0x30
 800c36a:	d0f9      	beq.n	800c360 <_strtod_l+0x130>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d0a0      	beq.n	800c2b2 <_strtod_l+0x82>
 800c370:	2301      	movs	r3, #1
 800c372:	9307      	str	r3, [sp, #28]
 800c374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c376:	220a      	movs	r2, #10
 800c378:	9308      	str	r3, [sp, #32]
 800c37a:	2300      	movs	r3, #0
 800c37c:	469b      	mov	fp, r3
 800c37e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c382:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c384:	7805      	ldrb	r5, [r0, #0]
 800c386:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c38a:	b2d9      	uxtb	r1, r3
 800c38c:	2909      	cmp	r1, #9
 800c38e:	d926      	bls.n	800c3de <_strtod_l+0x1ae>
 800c390:	4622      	mov	r2, r4
 800c392:	4639      	mov	r1, r7
 800c394:	f002 fe5a 	bl	800f04c <strncmp>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d032      	beq.n	800c402 <_strtod_l+0x1d2>
 800c39c:	2000      	movs	r0, #0
 800c39e:	462b      	mov	r3, r5
 800c3a0:	465c      	mov	r4, fp
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	9004      	str	r0, [sp, #16]
 800c3a6:	2b65      	cmp	r3, #101	; 0x65
 800c3a8:	d001      	beq.n	800c3ae <_strtod_l+0x17e>
 800c3aa:	2b45      	cmp	r3, #69	; 0x45
 800c3ac:	d113      	bne.n	800c3d6 <_strtod_l+0x1a6>
 800c3ae:	b91c      	cbnz	r4, 800c3b8 <_strtod_l+0x188>
 800c3b0:	9b07      	ldr	r3, [sp, #28]
 800c3b2:	4303      	orrs	r3, r0
 800c3b4:	d099      	beq.n	800c2ea <_strtod_l+0xba>
 800c3b6:	2400      	movs	r4, #0
 800c3b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c3ba:	1c73      	adds	r3, r6, #1
 800c3bc:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3be:	7873      	ldrb	r3, [r6, #1]
 800c3c0:	2b2b      	cmp	r3, #43	; 0x2b
 800c3c2:	d078      	beq.n	800c4b6 <_strtod_l+0x286>
 800c3c4:	2b2d      	cmp	r3, #45	; 0x2d
 800c3c6:	d07b      	beq.n	800c4c0 <_strtod_l+0x290>
 800c3c8:	2700      	movs	r7, #0
 800c3ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c3ce:	2909      	cmp	r1, #9
 800c3d0:	f240 8082 	bls.w	800c4d8 <_strtod_l+0x2a8>
 800c3d4:	961b      	str	r6, [sp, #108]	; 0x6c
 800c3d6:	2500      	movs	r5, #0
 800c3d8:	e09e      	b.n	800c518 <_strtod_l+0x2e8>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	e7c9      	b.n	800c372 <_strtod_l+0x142>
 800c3de:	f1bb 0f08 	cmp.w	fp, #8
 800c3e2:	bfd5      	itete	le
 800c3e4:	9906      	ldrle	r1, [sp, #24]
 800c3e6:	9905      	ldrgt	r1, [sp, #20]
 800c3e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c3f0:	f100 0001 	add.w	r0, r0, #1
 800c3f4:	bfd4      	ite	le
 800c3f6:	9306      	strle	r3, [sp, #24]
 800c3f8:	9305      	strgt	r3, [sp, #20]
 800c3fa:	f10b 0b01 	add.w	fp, fp, #1
 800c3fe:	901b      	str	r0, [sp, #108]	; 0x6c
 800c400:	e7bf      	b.n	800c382 <_strtod_l+0x152>
 800c402:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c404:	191a      	adds	r2, r3, r4
 800c406:	921b      	str	r2, [sp, #108]	; 0x6c
 800c408:	5d1b      	ldrb	r3, [r3, r4]
 800c40a:	f1bb 0f00 	cmp.w	fp, #0
 800c40e:	d036      	beq.n	800c47e <_strtod_l+0x24e>
 800c410:	465c      	mov	r4, fp
 800c412:	9004      	str	r0, [sp, #16]
 800c414:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c418:	2a09      	cmp	r2, #9
 800c41a:	d912      	bls.n	800c442 <_strtod_l+0x212>
 800c41c:	2201      	movs	r2, #1
 800c41e:	e7c2      	b.n	800c3a6 <_strtod_l+0x176>
 800c420:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c422:	3001      	adds	r0, #1
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	921b      	str	r2, [sp, #108]	; 0x6c
 800c428:	785b      	ldrb	r3, [r3, #1]
 800c42a:	2b30      	cmp	r3, #48	; 0x30
 800c42c:	d0f8      	beq.n	800c420 <_strtod_l+0x1f0>
 800c42e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c432:	2a08      	cmp	r2, #8
 800c434:	f200 84dc 	bhi.w	800cdf0 <_strtod_l+0xbc0>
 800c438:	9004      	str	r0, [sp, #16]
 800c43a:	2000      	movs	r0, #0
 800c43c:	4604      	mov	r4, r0
 800c43e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c440:	9208      	str	r2, [sp, #32]
 800c442:	3b30      	subs	r3, #48	; 0x30
 800c444:	f100 0201 	add.w	r2, r0, #1
 800c448:	d013      	beq.n	800c472 <_strtod_l+0x242>
 800c44a:	9904      	ldr	r1, [sp, #16]
 800c44c:	1905      	adds	r5, r0, r4
 800c44e:	4411      	add	r1, r2
 800c450:	9104      	str	r1, [sp, #16]
 800c452:	4622      	mov	r2, r4
 800c454:	210a      	movs	r1, #10
 800c456:	42aa      	cmp	r2, r5
 800c458:	d113      	bne.n	800c482 <_strtod_l+0x252>
 800c45a:	1822      	adds	r2, r4, r0
 800c45c:	2a08      	cmp	r2, #8
 800c45e:	f104 0401 	add.w	r4, r4, #1
 800c462:	4404      	add	r4, r0
 800c464:	dc1b      	bgt.n	800c49e <_strtod_l+0x26e>
 800c466:	220a      	movs	r2, #10
 800c468:	9906      	ldr	r1, [sp, #24]
 800c46a:	fb02 3301 	mla	r3, r2, r1, r3
 800c46e:	9306      	str	r3, [sp, #24]
 800c470:	2200      	movs	r2, #0
 800c472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c474:	4610      	mov	r0, r2
 800c476:	1c59      	adds	r1, r3, #1
 800c478:	911b      	str	r1, [sp, #108]	; 0x6c
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	e7ca      	b.n	800c414 <_strtod_l+0x1e4>
 800c47e:	4658      	mov	r0, fp
 800c480:	e7d3      	b.n	800c42a <_strtod_l+0x1fa>
 800c482:	2a08      	cmp	r2, #8
 800c484:	dc04      	bgt.n	800c490 <_strtod_l+0x260>
 800c486:	9f06      	ldr	r7, [sp, #24]
 800c488:	434f      	muls	r7, r1
 800c48a:	9706      	str	r7, [sp, #24]
 800c48c:	3201      	adds	r2, #1
 800c48e:	e7e2      	b.n	800c456 <_strtod_l+0x226>
 800c490:	1c57      	adds	r7, r2, #1
 800c492:	2f10      	cmp	r7, #16
 800c494:	bfde      	ittt	le
 800c496:	9f05      	ldrle	r7, [sp, #20]
 800c498:	434f      	mulle	r7, r1
 800c49a:	9705      	strle	r7, [sp, #20]
 800c49c:	e7f6      	b.n	800c48c <_strtod_l+0x25c>
 800c49e:	2c10      	cmp	r4, #16
 800c4a0:	bfdf      	itttt	le
 800c4a2:	220a      	movle	r2, #10
 800c4a4:	9905      	ldrle	r1, [sp, #20]
 800c4a6:	fb02 3301 	mlale	r3, r2, r1, r3
 800c4aa:	9305      	strle	r3, [sp, #20]
 800c4ac:	e7e0      	b.n	800c470 <_strtod_l+0x240>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	e77c      	b.n	800c3b0 <_strtod_l+0x180>
 800c4b6:	2700      	movs	r7, #0
 800c4b8:	1cb3      	adds	r3, r6, #2
 800c4ba:	931b      	str	r3, [sp, #108]	; 0x6c
 800c4bc:	78b3      	ldrb	r3, [r6, #2]
 800c4be:	e784      	b.n	800c3ca <_strtod_l+0x19a>
 800c4c0:	2701      	movs	r7, #1
 800c4c2:	e7f9      	b.n	800c4b8 <_strtod_l+0x288>
 800c4c4:	080106b4 	.word	0x080106b4
 800c4c8:	0801053c 	.word	0x0801053c
 800c4cc:	7ff00000 	.word	0x7ff00000
 800c4d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4d2:	1c59      	adds	r1, r3, #1
 800c4d4:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4d6:	785b      	ldrb	r3, [r3, #1]
 800c4d8:	2b30      	cmp	r3, #48	; 0x30
 800c4da:	d0f9      	beq.n	800c4d0 <_strtod_l+0x2a0>
 800c4dc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c4e0:	2908      	cmp	r1, #8
 800c4e2:	f63f af78 	bhi.w	800c3d6 <_strtod_l+0x1a6>
 800c4e6:	f04f 0e0a 	mov.w	lr, #10
 800c4ea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800c4ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4f4:	1c59      	adds	r1, r3, #1
 800c4f6:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4f8:	785b      	ldrb	r3, [r3, #1]
 800c4fa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800c4fe:	2d09      	cmp	r5, #9
 800c500:	d935      	bls.n	800c56e <_strtod_l+0x33e>
 800c502:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c504:	1b49      	subs	r1, r1, r5
 800c506:	2908      	cmp	r1, #8
 800c508:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c50c:	dc02      	bgt.n	800c514 <_strtod_l+0x2e4>
 800c50e:	4565      	cmp	r5, ip
 800c510:	bfa8      	it	ge
 800c512:	4665      	movge	r5, ip
 800c514:	b107      	cbz	r7, 800c518 <_strtod_l+0x2e8>
 800c516:	426d      	negs	r5, r5
 800c518:	2c00      	cmp	r4, #0
 800c51a:	d14c      	bne.n	800c5b6 <_strtod_l+0x386>
 800c51c:	9907      	ldr	r1, [sp, #28]
 800c51e:	4301      	orrs	r1, r0
 800c520:	f47f aec7 	bne.w	800c2b2 <_strtod_l+0x82>
 800c524:	2a00      	cmp	r2, #0
 800c526:	f47f aee0 	bne.w	800c2ea <_strtod_l+0xba>
 800c52a:	2b69      	cmp	r3, #105	; 0x69
 800c52c:	d026      	beq.n	800c57c <_strtod_l+0x34c>
 800c52e:	dc23      	bgt.n	800c578 <_strtod_l+0x348>
 800c530:	2b49      	cmp	r3, #73	; 0x49
 800c532:	d023      	beq.n	800c57c <_strtod_l+0x34c>
 800c534:	2b4e      	cmp	r3, #78	; 0x4e
 800c536:	f47f aed8 	bne.w	800c2ea <_strtod_l+0xba>
 800c53a:	499c      	ldr	r1, [pc, #624]	; (800c7ac <_strtod_l+0x57c>)
 800c53c:	a81b      	add	r0, sp, #108	; 0x6c
 800c53e:	f001 fe6f 	bl	800e220 <__match>
 800c542:	2800      	cmp	r0, #0
 800c544:	f43f aed1 	beq.w	800c2ea <_strtod_l+0xba>
 800c548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b28      	cmp	r3, #40	; 0x28
 800c54e:	d12c      	bne.n	800c5aa <_strtod_l+0x37a>
 800c550:	4997      	ldr	r1, [pc, #604]	; (800c7b0 <_strtod_l+0x580>)
 800c552:	aa1e      	add	r2, sp, #120	; 0x78
 800c554:	a81b      	add	r0, sp, #108	; 0x6c
 800c556:	f001 fe77 	bl	800e248 <__hexnan>
 800c55a:	2805      	cmp	r0, #5
 800c55c:	d125      	bne.n	800c5aa <_strtod_l+0x37a>
 800c55e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c560:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800c564:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c568:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c56c:	e6a1      	b.n	800c2b2 <_strtod_l+0x82>
 800c56e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800c572:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c576:	e7bc      	b.n	800c4f2 <_strtod_l+0x2c2>
 800c578:	2b6e      	cmp	r3, #110	; 0x6e
 800c57a:	e7dc      	b.n	800c536 <_strtod_l+0x306>
 800c57c:	498d      	ldr	r1, [pc, #564]	; (800c7b4 <_strtod_l+0x584>)
 800c57e:	a81b      	add	r0, sp, #108	; 0x6c
 800c580:	f001 fe4e 	bl	800e220 <__match>
 800c584:	2800      	cmp	r0, #0
 800c586:	f43f aeb0 	beq.w	800c2ea <_strtod_l+0xba>
 800c58a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c58c:	498a      	ldr	r1, [pc, #552]	; (800c7b8 <_strtod_l+0x588>)
 800c58e:	3b01      	subs	r3, #1
 800c590:	a81b      	add	r0, sp, #108	; 0x6c
 800c592:	931b      	str	r3, [sp, #108]	; 0x6c
 800c594:	f001 fe44 	bl	800e220 <__match>
 800c598:	b910      	cbnz	r0, 800c5a0 <_strtod_l+0x370>
 800c59a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c59c:	3301      	adds	r3, #1
 800c59e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5a0:	f04f 0800 	mov.w	r8, #0
 800c5a4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c7c8 <_strtod_l+0x598>
 800c5a8:	e683      	b.n	800c2b2 <_strtod_l+0x82>
 800c5aa:	4884      	ldr	r0, [pc, #528]	; (800c7bc <_strtod_l+0x58c>)
 800c5ac:	f002 fd48 	bl	800f040 <nan>
 800c5b0:	4680      	mov	r8, r0
 800c5b2:	4689      	mov	r9, r1
 800c5b4:	e67d      	b.n	800c2b2 <_strtod_l+0x82>
 800c5b6:	9b04      	ldr	r3, [sp, #16]
 800c5b8:	f1bb 0f00 	cmp.w	fp, #0
 800c5bc:	bf08      	it	eq
 800c5be:	46a3      	moveq	fp, r4
 800c5c0:	1aeb      	subs	r3, r5, r3
 800c5c2:	2c10      	cmp	r4, #16
 800c5c4:	9806      	ldr	r0, [sp, #24]
 800c5c6:	4626      	mov	r6, r4
 800c5c8:	9307      	str	r3, [sp, #28]
 800c5ca:	bfa8      	it	ge
 800c5cc:	2610      	movge	r6, #16
 800c5ce:	f7f3 ff75 	bl	80004bc <__aeabi_ui2d>
 800c5d2:	2c09      	cmp	r4, #9
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	4689      	mov	r9, r1
 800c5d8:	dd13      	ble.n	800c602 <_strtod_l+0x3d2>
 800c5da:	4b79      	ldr	r3, [pc, #484]	; (800c7c0 <_strtod_l+0x590>)
 800c5dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c5e4:	f7f3 ffe4 	bl	80005b0 <__aeabi_dmul>
 800c5e8:	4680      	mov	r8, r0
 800c5ea:	9805      	ldr	r0, [sp, #20]
 800c5ec:	4689      	mov	r9, r1
 800c5ee:	f7f3 ff65 	bl	80004bc <__aeabi_ui2d>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4640      	mov	r0, r8
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	f7f3 fe23 	bl	8000244 <__adddf3>
 800c5fe:	4680      	mov	r8, r0
 800c600:	4689      	mov	r9, r1
 800c602:	2c0f      	cmp	r4, #15
 800c604:	dc36      	bgt.n	800c674 <_strtod_l+0x444>
 800c606:	9b07      	ldr	r3, [sp, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	f43f ae52 	beq.w	800c2b2 <_strtod_l+0x82>
 800c60e:	dd22      	ble.n	800c656 <_strtod_l+0x426>
 800c610:	2b16      	cmp	r3, #22
 800c612:	dc09      	bgt.n	800c628 <_strtod_l+0x3f8>
 800c614:	4c6a      	ldr	r4, [pc, #424]	; (800c7c0 <_strtod_l+0x590>)
 800c616:	4642      	mov	r2, r8
 800c618:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800c61c:	464b      	mov	r3, r9
 800c61e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c622:	f7f3 ffc5 	bl	80005b0 <__aeabi_dmul>
 800c626:	e7c3      	b.n	800c5b0 <_strtod_l+0x380>
 800c628:	9a07      	ldr	r2, [sp, #28]
 800c62a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c62e:	4293      	cmp	r3, r2
 800c630:	db20      	blt.n	800c674 <_strtod_l+0x444>
 800c632:	4d63      	ldr	r5, [pc, #396]	; (800c7c0 <_strtod_l+0x590>)
 800c634:	f1c4 040f 	rsb	r4, r4, #15
 800c638:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c63c:	4642      	mov	r2, r8
 800c63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c642:	464b      	mov	r3, r9
 800c644:	f7f3 ffb4 	bl	80005b0 <__aeabi_dmul>
 800c648:	9b07      	ldr	r3, [sp, #28]
 800c64a:	1b1c      	subs	r4, r3, r4
 800c64c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c650:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c654:	e7e5      	b.n	800c622 <_strtod_l+0x3f2>
 800c656:	9b07      	ldr	r3, [sp, #28]
 800c658:	3316      	adds	r3, #22
 800c65a:	db0b      	blt.n	800c674 <_strtod_l+0x444>
 800c65c:	9b04      	ldr	r3, [sp, #16]
 800c65e:	4a58      	ldr	r2, [pc, #352]	; (800c7c0 <_strtod_l+0x590>)
 800c660:	1b5d      	subs	r5, r3, r5
 800c662:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c666:	4640      	mov	r0, r8
 800c668:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c66c:	4649      	mov	r1, r9
 800c66e:	f7f4 f8c9 	bl	8000804 <__aeabi_ddiv>
 800c672:	e79d      	b.n	800c5b0 <_strtod_l+0x380>
 800c674:	9b07      	ldr	r3, [sp, #28]
 800c676:	1ba6      	subs	r6, r4, r6
 800c678:	441e      	add	r6, r3
 800c67a:	2e00      	cmp	r6, #0
 800c67c:	dd71      	ble.n	800c762 <_strtod_l+0x532>
 800c67e:	f016 030f 	ands.w	r3, r6, #15
 800c682:	d00a      	beq.n	800c69a <_strtod_l+0x46a>
 800c684:	494e      	ldr	r1, [pc, #312]	; (800c7c0 <_strtod_l+0x590>)
 800c686:	4642      	mov	r2, r8
 800c688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c690:	464b      	mov	r3, r9
 800c692:	f7f3 ff8d 	bl	80005b0 <__aeabi_dmul>
 800c696:	4680      	mov	r8, r0
 800c698:	4689      	mov	r9, r1
 800c69a:	f036 060f 	bics.w	r6, r6, #15
 800c69e:	d050      	beq.n	800c742 <_strtod_l+0x512>
 800c6a0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800c6a4:	dd27      	ble.n	800c6f6 <_strtod_l+0x4c6>
 800c6a6:	f04f 0b00 	mov.w	fp, #0
 800c6aa:	f8cd b010 	str.w	fp, [sp, #16]
 800c6ae:	f8cd b020 	str.w	fp, [sp, #32]
 800c6b2:	f8cd b018 	str.w	fp, [sp, #24]
 800c6b6:	2322      	movs	r3, #34	; 0x22
 800c6b8:	f04f 0800 	mov.w	r8, #0
 800c6bc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c7c8 <_strtod_l+0x598>
 800c6c0:	f8ca 3000 	str.w	r3, [sl]
 800c6c4:	9b08      	ldr	r3, [sp, #32]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f43f adf3 	beq.w	800c2b2 <_strtod_l+0x82>
 800c6cc:	4650      	mov	r0, sl
 800c6ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6d0:	f001 fed4 	bl	800e47c <_Bfree>
 800c6d4:	4650      	mov	r0, sl
 800c6d6:	9906      	ldr	r1, [sp, #24]
 800c6d8:	f001 fed0 	bl	800e47c <_Bfree>
 800c6dc:	4650      	mov	r0, sl
 800c6de:	9904      	ldr	r1, [sp, #16]
 800c6e0:	f001 fecc 	bl	800e47c <_Bfree>
 800c6e4:	4650      	mov	r0, sl
 800c6e6:	9908      	ldr	r1, [sp, #32]
 800c6e8:	f001 fec8 	bl	800e47c <_Bfree>
 800c6ec:	4659      	mov	r1, fp
 800c6ee:	4650      	mov	r0, sl
 800c6f0:	f001 fec4 	bl	800e47c <_Bfree>
 800c6f4:	e5dd      	b.n	800c2b2 <_strtod_l+0x82>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	461f      	mov	r7, r3
 800c6fe:	1136      	asrs	r6, r6, #4
 800c700:	2e01      	cmp	r6, #1
 800c702:	dc21      	bgt.n	800c748 <_strtod_l+0x518>
 800c704:	b10b      	cbz	r3, 800c70a <_strtod_l+0x4da>
 800c706:	4680      	mov	r8, r0
 800c708:	4689      	mov	r9, r1
 800c70a:	4b2e      	ldr	r3, [pc, #184]	; (800c7c4 <_strtod_l+0x594>)
 800c70c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c710:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c714:	4642      	mov	r2, r8
 800c716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c71a:	464b      	mov	r3, r9
 800c71c:	f7f3 ff48 	bl	80005b0 <__aeabi_dmul>
 800c720:	4b29      	ldr	r3, [pc, #164]	; (800c7c8 <_strtod_l+0x598>)
 800c722:	460a      	mov	r2, r1
 800c724:	400b      	ands	r3, r1
 800c726:	4929      	ldr	r1, [pc, #164]	; (800c7cc <_strtod_l+0x59c>)
 800c728:	4680      	mov	r8, r0
 800c72a:	428b      	cmp	r3, r1
 800c72c:	d8bb      	bhi.n	800c6a6 <_strtod_l+0x476>
 800c72e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c732:	428b      	cmp	r3, r1
 800c734:	bf86      	itte	hi
 800c736:	f04f 38ff 	movhi.w	r8, #4294967295
 800c73a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800c7d0 <_strtod_l+0x5a0>
 800c73e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c742:	2300      	movs	r3, #0
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	e07e      	b.n	800c846 <_strtod_l+0x616>
 800c748:	07f2      	lsls	r2, r6, #31
 800c74a:	d507      	bpl.n	800c75c <_strtod_l+0x52c>
 800c74c:	4b1d      	ldr	r3, [pc, #116]	; (800c7c4 <_strtod_l+0x594>)
 800c74e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c756:	f7f3 ff2b 	bl	80005b0 <__aeabi_dmul>
 800c75a:	2301      	movs	r3, #1
 800c75c:	3701      	adds	r7, #1
 800c75e:	1076      	asrs	r6, r6, #1
 800c760:	e7ce      	b.n	800c700 <_strtod_l+0x4d0>
 800c762:	d0ee      	beq.n	800c742 <_strtod_l+0x512>
 800c764:	4276      	negs	r6, r6
 800c766:	f016 020f 	ands.w	r2, r6, #15
 800c76a:	d00a      	beq.n	800c782 <_strtod_l+0x552>
 800c76c:	4b14      	ldr	r3, [pc, #80]	; (800c7c0 <_strtod_l+0x590>)
 800c76e:	4640      	mov	r0, r8
 800c770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c774:	4649      	mov	r1, r9
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	f7f4 f843 	bl	8000804 <__aeabi_ddiv>
 800c77e:	4680      	mov	r8, r0
 800c780:	4689      	mov	r9, r1
 800c782:	1136      	asrs	r6, r6, #4
 800c784:	d0dd      	beq.n	800c742 <_strtod_l+0x512>
 800c786:	2e1f      	cmp	r6, #31
 800c788:	dd24      	ble.n	800c7d4 <_strtod_l+0x5a4>
 800c78a:	f04f 0b00 	mov.w	fp, #0
 800c78e:	f8cd b010 	str.w	fp, [sp, #16]
 800c792:	f8cd b020 	str.w	fp, [sp, #32]
 800c796:	f8cd b018 	str.w	fp, [sp, #24]
 800c79a:	2322      	movs	r3, #34	; 0x22
 800c79c:	f04f 0800 	mov.w	r8, #0
 800c7a0:	f04f 0900 	mov.w	r9, #0
 800c7a4:	f8ca 3000 	str.w	r3, [sl]
 800c7a8:	e78c      	b.n	800c6c4 <_strtod_l+0x494>
 800c7aa:	bf00      	nop
 800c7ac:	0801050d 	.word	0x0801050d
 800c7b0:	08010550 	.word	0x08010550
 800c7b4:	08010505 	.word	0x08010505
 800c7b8:	080105b8 	.word	0x080105b8
 800c7bc:	08010870 	.word	0x08010870
 800c7c0:	08010750 	.word	0x08010750
 800c7c4:	08010728 	.word	0x08010728
 800c7c8:	7ff00000 	.word	0x7ff00000
 800c7cc:	7ca00000 	.word	0x7ca00000
 800c7d0:	7fefffff 	.word	0x7fefffff
 800c7d4:	f016 0310 	ands.w	r3, r6, #16
 800c7d8:	bf18      	it	ne
 800c7da:	236a      	movne	r3, #106	; 0x6a
 800c7dc:	4640      	mov	r0, r8
 800c7de:	9305      	str	r3, [sp, #20]
 800c7e0:	4649      	mov	r1, r9
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	4fb2      	ldr	r7, [pc, #712]	; (800cab0 <_strtod_l+0x880>)
 800c7e6:	07f2      	lsls	r2, r6, #31
 800c7e8:	d504      	bpl.n	800c7f4 <_strtod_l+0x5c4>
 800c7ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ee:	f7f3 fedf 	bl	80005b0 <__aeabi_dmul>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	1076      	asrs	r6, r6, #1
 800c7f6:	f107 0708 	add.w	r7, r7, #8
 800c7fa:	d1f4      	bne.n	800c7e6 <_strtod_l+0x5b6>
 800c7fc:	b10b      	cbz	r3, 800c802 <_strtod_l+0x5d2>
 800c7fe:	4680      	mov	r8, r0
 800c800:	4689      	mov	r9, r1
 800c802:	9b05      	ldr	r3, [sp, #20]
 800c804:	b1bb      	cbz	r3, 800c836 <_strtod_l+0x606>
 800c806:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800c80a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c80e:	2b00      	cmp	r3, #0
 800c810:	4649      	mov	r1, r9
 800c812:	dd10      	ble.n	800c836 <_strtod_l+0x606>
 800c814:	2b1f      	cmp	r3, #31
 800c816:	f340 812b 	ble.w	800ca70 <_strtod_l+0x840>
 800c81a:	2b34      	cmp	r3, #52	; 0x34
 800c81c:	bfd8      	it	le
 800c81e:	f04f 32ff 	movle.w	r2, #4294967295
 800c822:	f04f 0800 	mov.w	r8, #0
 800c826:	bfcf      	iteee	gt
 800c828:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c82c:	3b20      	suble	r3, #32
 800c82e:	fa02 f303 	lslle.w	r3, r2, r3
 800c832:	ea03 0901 	andle.w	r9, r3, r1
 800c836:	2200      	movs	r2, #0
 800c838:	2300      	movs	r3, #0
 800c83a:	4640      	mov	r0, r8
 800c83c:	4649      	mov	r1, r9
 800c83e:	f7f4 f91f 	bl	8000a80 <__aeabi_dcmpeq>
 800c842:	2800      	cmp	r0, #0
 800c844:	d1a1      	bne.n	800c78a <_strtod_l+0x55a>
 800c846:	9b06      	ldr	r3, [sp, #24]
 800c848:	465a      	mov	r2, fp
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	4650      	mov	r0, sl
 800c84e:	4623      	mov	r3, r4
 800c850:	9908      	ldr	r1, [sp, #32]
 800c852:	f001 fe7f 	bl	800e554 <__s2b>
 800c856:	9008      	str	r0, [sp, #32]
 800c858:	2800      	cmp	r0, #0
 800c85a:	f43f af24 	beq.w	800c6a6 <_strtod_l+0x476>
 800c85e:	9b04      	ldr	r3, [sp, #16]
 800c860:	f04f 0b00 	mov.w	fp, #0
 800c864:	1b5d      	subs	r5, r3, r5
 800c866:	9b07      	ldr	r3, [sp, #28]
 800c868:	f8cd b010 	str.w	fp, [sp, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	bfb4      	ite	lt
 800c870:	462b      	movlt	r3, r5
 800c872:	2300      	movge	r3, #0
 800c874:	930e      	str	r3, [sp, #56]	; 0x38
 800c876:	9b07      	ldr	r3, [sp, #28]
 800c878:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c87c:	9316      	str	r3, [sp, #88]	; 0x58
 800c87e:	9b08      	ldr	r3, [sp, #32]
 800c880:	4650      	mov	r0, sl
 800c882:	6859      	ldr	r1, [r3, #4]
 800c884:	f001 fdba 	bl	800e3fc <_Balloc>
 800c888:	9006      	str	r0, [sp, #24]
 800c88a:	2800      	cmp	r0, #0
 800c88c:	f43f af13 	beq.w	800c6b6 <_strtod_l+0x486>
 800c890:	9b08      	ldr	r3, [sp, #32]
 800c892:	300c      	adds	r0, #12
 800c894:	691a      	ldr	r2, [r3, #16]
 800c896:	f103 010c 	add.w	r1, r3, #12
 800c89a:	3202      	adds	r2, #2
 800c89c:	0092      	lsls	r2, r2, #2
 800c89e:	f001 fd93 	bl	800e3c8 <memcpy>
 800c8a2:	ab1e      	add	r3, sp, #120	; 0x78
 800c8a4:	9301      	str	r3, [sp, #4]
 800c8a6:	ab1d      	add	r3, sp, #116	; 0x74
 800c8a8:	9300      	str	r3, [sp, #0]
 800c8aa:	4642      	mov	r2, r8
 800c8ac:	464b      	mov	r3, r9
 800c8ae:	4650      	mov	r0, sl
 800c8b0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800c8b4:	f002 f98c 	bl	800ebd0 <__d2b>
 800c8b8:	901c      	str	r0, [sp, #112]	; 0x70
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	f43f aefb 	beq.w	800c6b6 <_strtod_l+0x486>
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	f001 fede 	bl	800e684 <__i2b>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	9004      	str	r0, [sp, #16]
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	f43f aef2 	beq.w	800c6b6 <_strtod_l+0x486>
 800c8d2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800c8d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c8d6:	2d00      	cmp	r5, #0
 800c8d8:	bfab      	itete	ge
 800c8da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c8dc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c8de:	18ee      	addge	r6, r5, r3
 800c8e0:	1b5c      	sublt	r4, r3, r5
 800c8e2:	9b05      	ldr	r3, [sp, #20]
 800c8e4:	bfa8      	it	ge
 800c8e6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800c8e8:	eba5 0503 	sub.w	r5, r5, r3
 800c8ec:	4415      	add	r5, r2
 800c8ee:	4b71      	ldr	r3, [pc, #452]	; (800cab4 <_strtod_l+0x884>)
 800c8f0:	f105 35ff 	add.w	r5, r5, #4294967295
 800c8f4:	bfb8      	it	lt
 800c8f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800c8f8:	429d      	cmp	r5, r3
 800c8fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c8fe:	f280 80c9 	bge.w	800ca94 <_strtod_l+0x864>
 800c902:	1b5b      	subs	r3, r3, r5
 800c904:	2b1f      	cmp	r3, #31
 800c906:	f04f 0701 	mov.w	r7, #1
 800c90a:	eba2 0203 	sub.w	r2, r2, r3
 800c90e:	f300 80b6 	bgt.w	800ca7e <_strtod_l+0x84e>
 800c912:	2500      	movs	r5, #0
 800c914:	fa07 f303 	lsl.w	r3, r7, r3
 800c918:	930f      	str	r3, [sp, #60]	; 0x3c
 800c91a:	18b7      	adds	r7, r6, r2
 800c91c:	9b05      	ldr	r3, [sp, #20]
 800c91e:	42be      	cmp	r6, r7
 800c920:	4414      	add	r4, r2
 800c922:	441c      	add	r4, r3
 800c924:	4633      	mov	r3, r6
 800c926:	bfa8      	it	ge
 800c928:	463b      	movge	r3, r7
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	bfa8      	it	ge
 800c92e:	4623      	movge	r3, r4
 800c930:	2b00      	cmp	r3, #0
 800c932:	bfc2      	ittt	gt
 800c934:	1aff      	subgt	r7, r7, r3
 800c936:	1ae4      	subgt	r4, r4, r3
 800c938:	1af6      	subgt	r6, r6, r3
 800c93a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	dd17      	ble.n	800c970 <_strtod_l+0x740>
 800c940:	461a      	mov	r2, r3
 800c942:	4650      	mov	r0, sl
 800c944:	9904      	ldr	r1, [sp, #16]
 800c946:	f001 ff57 	bl	800e7f8 <__pow5mult>
 800c94a:	9004      	str	r0, [sp, #16]
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f43f aeb2 	beq.w	800c6b6 <_strtod_l+0x486>
 800c952:	4601      	mov	r1, r0
 800c954:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c956:	4650      	mov	r0, sl
 800c958:	f001 feaa 	bl	800e6b0 <__multiply>
 800c95c:	9009      	str	r0, [sp, #36]	; 0x24
 800c95e:	2800      	cmp	r0, #0
 800c960:	f43f aea9 	beq.w	800c6b6 <_strtod_l+0x486>
 800c964:	4650      	mov	r0, sl
 800c966:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c968:	f001 fd88 	bl	800e47c <_Bfree>
 800c96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96e:	931c      	str	r3, [sp, #112]	; 0x70
 800c970:	2f00      	cmp	r7, #0
 800c972:	f300 8093 	bgt.w	800ca9c <_strtod_l+0x86c>
 800c976:	9b07      	ldr	r3, [sp, #28]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	dd08      	ble.n	800c98e <_strtod_l+0x75e>
 800c97c:	4650      	mov	r0, sl
 800c97e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c980:	9906      	ldr	r1, [sp, #24]
 800c982:	f001 ff39 	bl	800e7f8 <__pow5mult>
 800c986:	9006      	str	r0, [sp, #24]
 800c988:	2800      	cmp	r0, #0
 800c98a:	f43f ae94 	beq.w	800c6b6 <_strtod_l+0x486>
 800c98e:	2c00      	cmp	r4, #0
 800c990:	dd08      	ble.n	800c9a4 <_strtod_l+0x774>
 800c992:	4622      	mov	r2, r4
 800c994:	4650      	mov	r0, sl
 800c996:	9906      	ldr	r1, [sp, #24]
 800c998:	f001 ff88 	bl	800e8ac <__lshift>
 800c99c:	9006      	str	r0, [sp, #24]
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f43f ae89 	beq.w	800c6b6 <_strtod_l+0x486>
 800c9a4:	2e00      	cmp	r6, #0
 800c9a6:	dd08      	ble.n	800c9ba <_strtod_l+0x78a>
 800c9a8:	4632      	mov	r2, r6
 800c9aa:	4650      	mov	r0, sl
 800c9ac:	9904      	ldr	r1, [sp, #16]
 800c9ae:	f001 ff7d 	bl	800e8ac <__lshift>
 800c9b2:	9004      	str	r0, [sp, #16]
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	f43f ae7e 	beq.w	800c6b6 <_strtod_l+0x486>
 800c9ba:	4650      	mov	r0, sl
 800c9bc:	9a06      	ldr	r2, [sp, #24]
 800c9be:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9c0:	f001 fffc 	bl	800e9bc <__mdiff>
 800c9c4:	4683      	mov	fp, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	f43f ae75 	beq.w	800c6b6 <_strtod_l+0x486>
 800c9cc:	2400      	movs	r4, #0
 800c9ce:	68c3      	ldr	r3, [r0, #12]
 800c9d0:	9904      	ldr	r1, [sp, #16]
 800c9d2:	60c4      	str	r4, [r0, #12]
 800c9d4:	930d      	str	r3, [sp, #52]	; 0x34
 800c9d6:	f001 ffd5 	bl	800e984 <__mcmp>
 800c9da:	42a0      	cmp	r0, r4
 800c9dc:	da70      	bge.n	800cac0 <_strtod_l+0x890>
 800c9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9e0:	ea53 0308 	orrs.w	r3, r3, r8
 800c9e4:	f040 8096 	bne.w	800cb14 <_strtod_l+0x8e4>
 800c9e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f040 8091 	bne.w	800cb14 <_strtod_l+0x8e4>
 800c9f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9f6:	0d1b      	lsrs	r3, r3, #20
 800c9f8:	051b      	lsls	r3, r3, #20
 800c9fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c9fe:	f240 8089 	bls.w	800cb14 <_strtod_l+0x8e4>
 800ca02:	f8db 3014 	ldr.w	r3, [fp, #20]
 800ca06:	b923      	cbnz	r3, 800ca12 <_strtod_l+0x7e2>
 800ca08:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	f340 8081 	ble.w	800cb14 <_strtod_l+0x8e4>
 800ca12:	4659      	mov	r1, fp
 800ca14:	2201      	movs	r2, #1
 800ca16:	4650      	mov	r0, sl
 800ca18:	f001 ff48 	bl	800e8ac <__lshift>
 800ca1c:	9904      	ldr	r1, [sp, #16]
 800ca1e:	4683      	mov	fp, r0
 800ca20:	f001 ffb0 	bl	800e984 <__mcmp>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	dd75      	ble.n	800cb14 <_strtod_l+0x8e4>
 800ca28:	9905      	ldr	r1, [sp, #20]
 800ca2a:	464b      	mov	r3, r9
 800ca2c:	4a22      	ldr	r2, [pc, #136]	; (800cab8 <_strtod_l+0x888>)
 800ca2e:	2900      	cmp	r1, #0
 800ca30:	f000 8091 	beq.w	800cb56 <_strtod_l+0x926>
 800ca34:	ea02 0109 	and.w	r1, r2, r9
 800ca38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca3c:	f300 808b 	bgt.w	800cb56 <_strtod_l+0x926>
 800ca40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca44:	f77f aea9 	ble.w	800c79a <_strtod_l+0x56a>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	4a1c      	ldr	r2, [pc, #112]	; (800cabc <_strtod_l+0x88c>)
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ca52:	4649      	mov	r1, r9
 800ca54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ca58:	f7f3 fdaa 	bl	80005b0 <__aeabi_dmul>
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	4303      	orrs	r3, r0
 800ca60:	bf08      	it	eq
 800ca62:	2322      	moveq	r3, #34	; 0x22
 800ca64:	4680      	mov	r8, r0
 800ca66:	4689      	mov	r9, r1
 800ca68:	bf08      	it	eq
 800ca6a:	f8ca 3000 	streq.w	r3, [sl]
 800ca6e:	e62d      	b.n	800c6cc <_strtod_l+0x49c>
 800ca70:	f04f 32ff 	mov.w	r2, #4294967295
 800ca74:	fa02 f303 	lsl.w	r3, r2, r3
 800ca78:	ea03 0808 	and.w	r8, r3, r8
 800ca7c:	e6db      	b.n	800c836 <_strtod_l+0x606>
 800ca7e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ca82:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ca86:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ca8a:	35e2      	adds	r5, #226	; 0xe2
 800ca8c:	fa07 f505 	lsl.w	r5, r7, r5
 800ca90:	970f      	str	r7, [sp, #60]	; 0x3c
 800ca92:	e742      	b.n	800c91a <_strtod_l+0x6ea>
 800ca94:	2301      	movs	r3, #1
 800ca96:	2500      	movs	r5, #0
 800ca98:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca9a:	e73e      	b.n	800c91a <_strtod_l+0x6ea>
 800ca9c:	463a      	mov	r2, r7
 800ca9e:	4650      	mov	r0, sl
 800caa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800caa2:	f001 ff03 	bl	800e8ac <__lshift>
 800caa6:	901c      	str	r0, [sp, #112]	; 0x70
 800caa8:	2800      	cmp	r0, #0
 800caaa:	f47f af64 	bne.w	800c976 <_strtod_l+0x746>
 800caae:	e602      	b.n	800c6b6 <_strtod_l+0x486>
 800cab0:	08010568 	.word	0x08010568
 800cab4:	fffffc02 	.word	0xfffffc02
 800cab8:	7ff00000 	.word	0x7ff00000
 800cabc:	39500000 	.word	0x39500000
 800cac0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cac4:	d166      	bne.n	800cb94 <_strtod_l+0x964>
 800cac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cacc:	b35a      	cbz	r2, 800cb26 <_strtod_l+0x8f6>
 800cace:	4a9c      	ldr	r2, [pc, #624]	; (800cd40 <_strtod_l+0xb10>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d12c      	bne.n	800cb2e <_strtod_l+0x8fe>
 800cad4:	9b05      	ldr	r3, [sp, #20]
 800cad6:	4640      	mov	r0, r8
 800cad8:	b303      	cbz	r3, 800cb1c <_strtod_l+0x8ec>
 800cada:	464b      	mov	r3, r9
 800cadc:	4a99      	ldr	r2, [pc, #612]	; (800cd44 <_strtod_l+0xb14>)
 800cade:	f04f 31ff 	mov.w	r1, #4294967295
 800cae2:	401a      	ands	r2, r3
 800cae4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cae8:	d81b      	bhi.n	800cb22 <_strtod_l+0x8f2>
 800caea:	0d12      	lsrs	r2, r2, #20
 800caec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800caf0:	fa01 f303 	lsl.w	r3, r1, r3
 800caf4:	4298      	cmp	r0, r3
 800caf6:	d11a      	bne.n	800cb2e <_strtod_l+0x8fe>
 800caf8:	4b93      	ldr	r3, [pc, #588]	; (800cd48 <_strtod_l+0xb18>)
 800cafa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d102      	bne.n	800cb06 <_strtod_l+0x8d6>
 800cb00:	3001      	adds	r0, #1
 800cb02:	f43f add8 	beq.w	800c6b6 <_strtod_l+0x486>
 800cb06:	f04f 0800 	mov.w	r8, #0
 800cb0a:	4b8e      	ldr	r3, [pc, #568]	; (800cd44 <_strtod_l+0xb14>)
 800cb0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb0e:	401a      	ands	r2, r3
 800cb10:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800cb14:	9b05      	ldr	r3, [sp, #20]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d196      	bne.n	800ca48 <_strtod_l+0x818>
 800cb1a:	e5d7      	b.n	800c6cc <_strtod_l+0x49c>
 800cb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb20:	e7e8      	b.n	800caf4 <_strtod_l+0x8c4>
 800cb22:	460b      	mov	r3, r1
 800cb24:	e7e6      	b.n	800caf4 <_strtod_l+0x8c4>
 800cb26:	ea53 0308 	orrs.w	r3, r3, r8
 800cb2a:	f43f af7d 	beq.w	800ca28 <_strtod_l+0x7f8>
 800cb2e:	b1e5      	cbz	r5, 800cb6a <_strtod_l+0x93a>
 800cb30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb32:	421d      	tst	r5, r3
 800cb34:	d0ee      	beq.n	800cb14 <_strtod_l+0x8e4>
 800cb36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb38:	4640      	mov	r0, r8
 800cb3a:	4649      	mov	r1, r9
 800cb3c:	9a05      	ldr	r2, [sp, #20]
 800cb3e:	b1c3      	cbz	r3, 800cb72 <_strtod_l+0x942>
 800cb40:	f7ff fb52 	bl	800c1e8 <sulp>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb4c:	f7f3 fb7a 	bl	8000244 <__adddf3>
 800cb50:	4680      	mov	r8, r0
 800cb52:	4689      	mov	r9, r1
 800cb54:	e7de      	b.n	800cb14 <_strtod_l+0x8e4>
 800cb56:	4013      	ands	r3, r2
 800cb58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb5c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cb60:	f04f 38ff 	mov.w	r8, #4294967295
 800cb64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cb68:	e7d4      	b.n	800cb14 <_strtod_l+0x8e4>
 800cb6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb6c:	ea13 0f08 	tst.w	r3, r8
 800cb70:	e7e0      	b.n	800cb34 <_strtod_l+0x904>
 800cb72:	f7ff fb39 	bl	800c1e8 <sulp>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb7e:	f7f3 fb5f 	bl	8000240 <__aeabi_dsub>
 800cb82:	2200      	movs	r2, #0
 800cb84:	2300      	movs	r3, #0
 800cb86:	4680      	mov	r8, r0
 800cb88:	4689      	mov	r9, r1
 800cb8a:	f7f3 ff79 	bl	8000a80 <__aeabi_dcmpeq>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0c0      	beq.n	800cb14 <_strtod_l+0x8e4>
 800cb92:	e602      	b.n	800c79a <_strtod_l+0x56a>
 800cb94:	4658      	mov	r0, fp
 800cb96:	9904      	ldr	r1, [sp, #16]
 800cb98:	f002 f876 	bl	800ec88 <__ratio>
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cba2:	4606      	mov	r6, r0
 800cba4:	460f      	mov	r7, r1
 800cba6:	f7f3 ff7f 	bl	8000aa8 <__aeabi_dcmple>
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d075      	beq.n	800cc9a <_strtod_l+0xa6a>
 800cbae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d047      	beq.n	800cc44 <_strtod_l+0xa14>
 800cbb4:	2600      	movs	r6, #0
 800cbb6:	4f65      	ldr	r7, [pc, #404]	; (800cd4c <_strtod_l+0xb1c>)
 800cbb8:	4d64      	ldr	r5, [pc, #400]	; (800cd4c <_strtod_l+0xb1c>)
 800cbba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbc0:	0d1b      	lsrs	r3, r3, #20
 800cbc2:	051b      	lsls	r3, r3, #20
 800cbc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cbc8:	4b61      	ldr	r3, [pc, #388]	; (800cd50 <_strtod_l+0xb20>)
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	f040 80c8 	bne.w	800cd60 <_strtod_l+0xb30>
 800cbd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cbd4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbda:	4640      	mov	r0, r8
 800cbdc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800cbe0:	4649      	mov	r1, r9
 800cbe2:	f001 ff7b 	bl	800eadc <__ulp>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4630      	mov	r0, r6
 800cbec:	4639      	mov	r1, r7
 800cbee:	f7f3 fcdf 	bl	80005b0 <__aeabi_dmul>
 800cbf2:	4642      	mov	r2, r8
 800cbf4:	464b      	mov	r3, r9
 800cbf6:	f7f3 fb25 	bl	8000244 <__adddf3>
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4951      	ldr	r1, [pc, #324]	; (800cd44 <_strtod_l+0xb14>)
 800cbfe:	4a55      	ldr	r2, [pc, #340]	; (800cd54 <_strtod_l+0xb24>)
 800cc00:	4019      	ands	r1, r3
 800cc02:	4291      	cmp	r1, r2
 800cc04:	4680      	mov	r8, r0
 800cc06:	d95e      	bls.n	800ccc6 <_strtod_l+0xa96>
 800cc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc0a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d103      	bne.n	800cc1a <_strtod_l+0x9ea>
 800cc12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc14:	3301      	adds	r3, #1
 800cc16:	f43f ad4e 	beq.w	800c6b6 <_strtod_l+0x486>
 800cc1a:	f04f 38ff 	mov.w	r8, #4294967295
 800cc1e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800cd48 <_strtod_l+0xb18>
 800cc22:	4650      	mov	r0, sl
 800cc24:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc26:	f001 fc29 	bl	800e47c <_Bfree>
 800cc2a:	4650      	mov	r0, sl
 800cc2c:	9906      	ldr	r1, [sp, #24]
 800cc2e:	f001 fc25 	bl	800e47c <_Bfree>
 800cc32:	4650      	mov	r0, sl
 800cc34:	9904      	ldr	r1, [sp, #16]
 800cc36:	f001 fc21 	bl	800e47c <_Bfree>
 800cc3a:	4659      	mov	r1, fp
 800cc3c:	4650      	mov	r0, sl
 800cc3e:	f001 fc1d 	bl	800e47c <_Bfree>
 800cc42:	e61c      	b.n	800c87e <_strtod_l+0x64e>
 800cc44:	f1b8 0f00 	cmp.w	r8, #0
 800cc48:	d119      	bne.n	800cc7e <_strtod_l+0xa4e>
 800cc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc50:	b9e3      	cbnz	r3, 800cc8c <_strtod_l+0xa5c>
 800cc52:	2200      	movs	r2, #0
 800cc54:	4630      	mov	r0, r6
 800cc56:	4639      	mov	r1, r7
 800cc58:	4b3c      	ldr	r3, [pc, #240]	; (800cd4c <_strtod_l+0xb1c>)
 800cc5a:	f7f3 ff1b 	bl	8000a94 <__aeabi_dcmplt>
 800cc5e:	b9c8      	cbnz	r0, 800cc94 <_strtod_l+0xa64>
 800cc60:	2200      	movs	r2, #0
 800cc62:	4630      	mov	r0, r6
 800cc64:	4639      	mov	r1, r7
 800cc66:	4b3c      	ldr	r3, [pc, #240]	; (800cd58 <_strtod_l+0xb28>)
 800cc68:	f7f3 fca2 	bl	80005b0 <__aeabi_dmul>
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	460d      	mov	r5, r1
 800cc70:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cc74:	9418      	str	r4, [sp, #96]	; 0x60
 800cc76:	9319      	str	r3, [sp, #100]	; 0x64
 800cc78:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800cc7c:	e79d      	b.n	800cbba <_strtod_l+0x98a>
 800cc7e:	f1b8 0f01 	cmp.w	r8, #1
 800cc82:	d103      	bne.n	800cc8c <_strtod_l+0xa5c>
 800cc84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f43f ad87 	beq.w	800c79a <_strtod_l+0x56a>
 800cc8c:	2600      	movs	r6, #0
 800cc8e:	2400      	movs	r4, #0
 800cc90:	4f32      	ldr	r7, [pc, #200]	; (800cd5c <_strtod_l+0xb2c>)
 800cc92:	e791      	b.n	800cbb8 <_strtod_l+0x988>
 800cc94:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800cc96:	4d30      	ldr	r5, [pc, #192]	; (800cd58 <_strtod_l+0xb28>)
 800cc98:	e7ea      	b.n	800cc70 <_strtod_l+0xa40>
 800cc9a:	4b2f      	ldr	r3, [pc, #188]	; (800cd58 <_strtod_l+0xb28>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	4630      	mov	r0, r6
 800cca0:	4639      	mov	r1, r7
 800cca2:	f7f3 fc85 	bl	80005b0 <__aeabi_dmul>
 800cca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cca8:	4604      	mov	r4, r0
 800ccaa:	460d      	mov	r5, r1
 800ccac:	b933      	cbnz	r3, 800ccbc <_strtod_l+0xa8c>
 800ccae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ccb2:	9010      	str	r0, [sp, #64]	; 0x40
 800ccb4:	9311      	str	r3, [sp, #68]	; 0x44
 800ccb6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ccba:	e77e      	b.n	800cbba <_strtod_l+0x98a>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ccc4:	e7f7      	b.n	800ccb6 <_strtod_l+0xa86>
 800ccc6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ccca:	9b05      	ldr	r3, [sp, #20]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1a8      	bne.n	800cc22 <_strtod_l+0x9f2>
 800ccd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ccd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ccd6:	0d1b      	lsrs	r3, r3, #20
 800ccd8:	051b      	lsls	r3, r3, #20
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d1a1      	bne.n	800cc22 <_strtod_l+0x9f2>
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7f4 fac7 	bl	8001274 <__aeabi_d2lz>
 800cce6:	f7f3 fc35 	bl	8000554 <__aeabi_l2d>
 800ccea:	4602      	mov	r2, r0
 800ccec:	460b      	mov	r3, r1
 800ccee:	4620      	mov	r0, r4
 800ccf0:	4629      	mov	r1, r5
 800ccf2:	f7f3 faa5 	bl	8000240 <__aeabi_dsub>
 800ccf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccfc:	ea43 0308 	orr.w	r3, r3, r8
 800cd00:	4313      	orrs	r3, r2
 800cd02:	4604      	mov	r4, r0
 800cd04:	460d      	mov	r5, r1
 800cd06:	d066      	beq.n	800cdd6 <_strtod_l+0xba6>
 800cd08:	a309      	add	r3, pc, #36	; (adr r3, 800cd30 <_strtod_l+0xb00>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fec1 	bl	8000a94 <__aeabi_dcmplt>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f47f acda 	bne.w	800c6cc <_strtod_l+0x49c>
 800cd18:	a307      	add	r3, pc, #28	; (adr r3, 800cd38 <_strtod_l+0xb08>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	4620      	mov	r0, r4
 800cd20:	4629      	mov	r1, r5
 800cd22:	f7f3 fed5 	bl	8000ad0 <__aeabi_dcmpgt>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f43f af7b 	beq.w	800cc22 <_strtod_l+0x9f2>
 800cd2c:	e4ce      	b.n	800c6cc <_strtod_l+0x49c>
 800cd2e:	bf00      	nop
 800cd30:	94a03595 	.word	0x94a03595
 800cd34:	3fdfffff 	.word	0x3fdfffff
 800cd38:	35afe535 	.word	0x35afe535
 800cd3c:	3fe00000 	.word	0x3fe00000
 800cd40:	000fffff 	.word	0x000fffff
 800cd44:	7ff00000 	.word	0x7ff00000
 800cd48:	7fefffff 	.word	0x7fefffff
 800cd4c:	3ff00000 	.word	0x3ff00000
 800cd50:	7fe00000 	.word	0x7fe00000
 800cd54:	7c9fffff 	.word	0x7c9fffff
 800cd58:	3fe00000 	.word	0x3fe00000
 800cd5c:	bff00000 	.word	0xbff00000
 800cd60:	9b05      	ldr	r3, [sp, #20]
 800cd62:	b313      	cbz	r3, 800cdaa <_strtod_l+0xb7a>
 800cd64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd6a:	d81e      	bhi.n	800cdaa <_strtod_l+0xb7a>
 800cd6c:	a326      	add	r3, pc, #152	; (adr r3, 800ce08 <_strtod_l+0xbd8>)
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	4620      	mov	r0, r4
 800cd74:	4629      	mov	r1, r5
 800cd76:	f7f3 fe97 	bl	8000aa8 <__aeabi_dcmple>
 800cd7a:	b190      	cbz	r0, 800cda2 <_strtod_l+0xb72>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f7f3 feee 	bl	8000b60 <__aeabi_d2uiz>
 800cd84:	2801      	cmp	r0, #1
 800cd86:	bf38      	it	cc
 800cd88:	2001      	movcc	r0, #1
 800cd8a:	f7f3 fb97 	bl	80004bc <__aeabi_ui2d>
 800cd8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd90:	4604      	mov	r4, r0
 800cd92:	460d      	mov	r5, r1
 800cd94:	b9d3      	cbnz	r3, 800cdcc <_strtod_l+0xb9c>
 800cd96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd9a:	9012      	str	r0, [sp, #72]	; 0x48
 800cd9c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd9e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800cda2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cda4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800cda8:	1a9f      	subs	r7, r3, r2
 800cdaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdae:	f001 fe95 	bl	800eadc <__ulp>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4639      	mov	r1, r7
 800cdba:	f7f3 fbf9 	bl	80005b0 <__aeabi_dmul>
 800cdbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cdc2:	f7f3 fa3f 	bl	8000244 <__adddf3>
 800cdc6:	4680      	mov	r8, r0
 800cdc8:	4689      	mov	r9, r1
 800cdca:	e77e      	b.n	800ccca <_strtod_l+0xa9a>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800cdd4:	e7e3      	b.n	800cd9e <_strtod_l+0xb6e>
 800cdd6:	a30e      	add	r3, pc, #56	; (adr r3, 800ce10 <_strtod_l+0xbe0>)
 800cdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cddc:	f7f3 fe5a 	bl	8000a94 <__aeabi_dcmplt>
 800cde0:	e7a1      	b.n	800cd26 <_strtod_l+0xaf6>
 800cde2:	2300      	movs	r3, #0
 800cde4:	930c      	str	r3, [sp, #48]	; 0x30
 800cde6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cde8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdea:	6013      	str	r3, [r2, #0]
 800cdec:	f7ff ba65 	b.w	800c2ba <_strtod_l+0x8a>
 800cdf0:	2b65      	cmp	r3, #101	; 0x65
 800cdf2:	f43f ab5c 	beq.w	800c4ae <_strtod_l+0x27e>
 800cdf6:	2b45      	cmp	r3, #69	; 0x45
 800cdf8:	f43f ab59 	beq.w	800c4ae <_strtod_l+0x27e>
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f7ff bb8d 	b.w	800c51c <_strtod_l+0x2ec>
 800ce02:	bf00      	nop
 800ce04:	f3af 8000 	nop.w
 800ce08:	ffc00000 	.word	0xffc00000
 800ce0c:	41dfffff 	.word	0x41dfffff
 800ce10:	94a03595 	.word	0x94a03595
 800ce14:	3fcfffff 	.word	0x3fcfffff

0800ce18 <_strtod_r>:
 800ce18:	4b01      	ldr	r3, [pc, #4]	; (800ce20 <_strtod_r+0x8>)
 800ce1a:	f7ff ba09 	b.w	800c230 <_strtod_l>
 800ce1e:	bf00      	nop
 800ce20:	200000b0 	.word	0x200000b0

0800ce24 <_strtol_l.isra.0>:
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce2a:	4686      	mov	lr, r0
 800ce2c:	d001      	beq.n	800ce32 <_strtol_l.isra.0+0xe>
 800ce2e:	2b24      	cmp	r3, #36	; 0x24
 800ce30:	d906      	bls.n	800ce40 <_strtol_l.isra.0+0x1c>
 800ce32:	f7fe fa31 	bl	800b298 <__errno>
 800ce36:	2316      	movs	r3, #22
 800ce38:	6003      	str	r3, [r0, #0]
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce40:	468c      	mov	ip, r1
 800ce42:	4e3a      	ldr	r6, [pc, #232]	; (800cf2c <_strtol_l.isra.0+0x108>)
 800ce44:	4660      	mov	r0, ip
 800ce46:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ce4a:	5da5      	ldrb	r5, [r4, r6]
 800ce4c:	f015 0508 	ands.w	r5, r5, #8
 800ce50:	d1f8      	bne.n	800ce44 <_strtol_l.isra.0+0x20>
 800ce52:	2c2d      	cmp	r4, #45	; 0x2d
 800ce54:	d133      	bne.n	800cebe <_strtol_l.isra.0+0x9a>
 800ce56:	f04f 0801 	mov.w	r8, #1
 800ce5a:	f89c 4000 	ldrb.w	r4, [ip]
 800ce5e:	f100 0c02 	add.w	ip, r0, #2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d05d      	beq.n	800cf22 <_strtol_l.isra.0+0xfe>
 800ce66:	2b10      	cmp	r3, #16
 800ce68:	d10c      	bne.n	800ce84 <_strtol_l.isra.0+0x60>
 800ce6a:	2c30      	cmp	r4, #48	; 0x30
 800ce6c:	d10a      	bne.n	800ce84 <_strtol_l.isra.0+0x60>
 800ce6e:	f89c 0000 	ldrb.w	r0, [ip]
 800ce72:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ce76:	2858      	cmp	r0, #88	; 0x58
 800ce78:	d14e      	bne.n	800cf18 <_strtol_l.isra.0+0xf4>
 800ce7a:	2310      	movs	r3, #16
 800ce7c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ce80:	f10c 0c02 	add.w	ip, ip, #2
 800ce84:	2500      	movs	r5, #0
 800ce86:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800ce8a:	3f01      	subs	r7, #1
 800ce8c:	fbb7 f9f3 	udiv	r9, r7, r3
 800ce90:	4628      	mov	r0, r5
 800ce92:	fb03 7a19 	mls	sl, r3, r9, r7
 800ce96:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ce9a:	2e09      	cmp	r6, #9
 800ce9c:	d818      	bhi.n	800ced0 <_strtol_l.isra.0+0xac>
 800ce9e:	4634      	mov	r4, r6
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	dd24      	ble.n	800ceee <_strtol_l.isra.0+0xca>
 800cea4:	2d00      	cmp	r5, #0
 800cea6:	db1f      	blt.n	800cee8 <_strtol_l.isra.0+0xc4>
 800cea8:	4581      	cmp	r9, r0
 800ceaa:	d31d      	bcc.n	800cee8 <_strtol_l.isra.0+0xc4>
 800ceac:	d101      	bne.n	800ceb2 <_strtol_l.isra.0+0x8e>
 800ceae:	45a2      	cmp	sl, r4
 800ceb0:	db1a      	blt.n	800cee8 <_strtol_l.isra.0+0xc4>
 800ceb2:	2501      	movs	r5, #1
 800ceb4:	fb00 4003 	mla	r0, r0, r3, r4
 800ceb8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800cebc:	e7eb      	b.n	800ce96 <_strtol_l.isra.0+0x72>
 800cebe:	2c2b      	cmp	r4, #43	; 0x2b
 800cec0:	bf08      	it	eq
 800cec2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800cec6:	46a8      	mov	r8, r5
 800cec8:	bf08      	it	eq
 800ceca:	f100 0c02 	addeq.w	ip, r0, #2
 800cece:	e7c8      	b.n	800ce62 <_strtol_l.isra.0+0x3e>
 800ced0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ced4:	2e19      	cmp	r6, #25
 800ced6:	d801      	bhi.n	800cedc <_strtol_l.isra.0+0xb8>
 800ced8:	3c37      	subs	r4, #55	; 0x37
 800ceda:	e7e1      	b.n	800cea0 <_strtol_l.isra.0+0x7c>
 800cedc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800cee0:	2e19      	cmp	r6, #25
 800cee2:	d804      	bhi.n	800ceee <_strtol_l.isra.0+0xca>
 800cee4:	3c57      	subs	r4, #87	; 0x57
 800cee6:	e7db      	b.n	800cea0 <_strtol_l.isra.0+0x7c>
 800cee8:	f04f 35ff 	mov.w	r5, #4294967295
 800ceec:	e7e4      	b.n	800ceb8 <_strtol_l.isra.0+0x94>
 800ceee:	2d00      	cmp	r5, #0
 800cef0:	da08      	bge.n	800cf04 <_strtol_l.isra.0+0xe0>
 800cef2:	2322      	movs	r3, #34	; 0x22
 800cef4:	4638      	mov	r0, r7
 800cef6:	f8ce 3000 	str.w	r3, [lr]
 800cefa:	2a00      	cmp	r2, #0
 800cefc:	d09e      	beq.n	800ce3c <_strtol_l.isra.0+0x18>
 800cefe:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cf02:	e007      	b.n	800cf14 <_strtol_l.isra.0+0xf0>
 800cf04:	f1b8 0f00 	cmp.w	r8, #0
 800cf08:	d000      	beq.n	800cf0c <_strtol_l.isra.0+0xe8>
 800cf0a:	4240      	negs	r0, r0
 800cf0c:	2a00      	cmp	r2, #0
 800cf0e:	d095      	beq.n	800ce3c <_strtol_l.isra.0+0x18>
 800cf10:	2d00      	cmp	r5, #0
 800cf12:	d1f4      	bne.n	800cefe <_strtol_l.isra.0+0xda>
 800cf14:	6011      	str	r1, [r2, #0]
 800cf16:	e791      	b.n	800ce3c <_strtol_l.isra.0+0x18>
 800cf18:	2430      	movs	r4, #48	; 0x30
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1b2      	bne.n	800ce84 <_strtol_l.isra.0+0x60>
 800cf1e:	2308      	movs	r3, #8
 800cf20:	e7b0      	b.n	800ce84 <_strtol_l.isra.0+0x60>
 800cf22:	2c30      	cmp	r4, #48	; 0x30
 800cf24:	d0a3      	beq.n	800ce6e <_strtol_l.isra.0+0x4a>
 800cf26:	230a      	movs	r3, #10
 800cf28:	e7ac      	b.n	800ce84 <_strtol_l.isra.0+0x60>
 800cf2a:	bf00      	nop
 800cf2c:	080103f9 	.word	0x080103f9

0800cf30 <_strtol_r>:
 800cf30:	f7ff bf78 	b.w	800ce24 <_strtol_l.isra.0>

0800cf34 <__utoa>:
 800cf34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf36:	b08b      	sub	sp, #44	; 0x2c
 800cf38:	4605      	mov	r5, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	466e      	mov	r6, sp
 800cf3e:	4c1d      	ldr	r4, [pc, #116]	; (800cfb4 <__utoa+0x80>)
 800cf40:	f104 0c20 	add.w	ip, r4, #32
 800cf44:	4637      	mov	r7, r6
 800cf46:	6820      	ldr	r0, [r4, #0]
 800cf48:	6861      	ldr	r1, [r4, #4]
 800cf4a:	3408      	adds	r4, #8
 800cf4c:	c703      	stmia	r7!, {r0, r1}
 800cf4e:	4564      	cmp	r4, ip
 800cf50:	463e      	mov	r6, r7
 800cf52:	d1f7      	bne.n	800cf44 <__utoa+0x10>
 800cf54:	7921      	ldrb	r1, [r4, #4]
 800cf56:	6820      	ldr	r0, [r4, #0]
 800cf58:	7139      	strb	r1, [r7, #4]
 800cf5a:	1e91      	subs	r1, r2, #2
 800cf5c:	2922      	cmp	r1, #34	; 0x22
 800cf5e:	6038      	str	r0, [r7, #0]
 800cf60:	f04f 0100 	mov.w	r1, #0
 800cf64:	d904      	bls.n	800cf70 <__utoa+0x3c>
 800cf66:	7019      	strb	r1, [r3, #0]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	b00b      	add	sp, #44	; 0x2c
 800cf6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf70:	1e58      	subs	r0, r3, #1
 800cf72:	4684      	mov	ip, r0
 800cf74:	fbb5 f7f2 	udiv	r7, r5, r2
 800cf78:	fb02 5617 	mls	r6, r2, r7, r5
 800cf7c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800cf80:	4476      	add	r6, lr
 800cf82:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cf86:	460c      	mov	r4, r1
 800cf88:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cf8c:	462e      	mov	r6, r5
 800cf8e:	42b2      	cmp	r2, r6
 800cf90:	463d      	mov	r5, r7
 800cf92:	f101 0101 	add.w	r1, r1, #1
 800cf96:	d9ed      	bls.n	800cf74 <__utoa+0x40>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	545a      	strb	r2, [r3, r1]
 800cf9c:	1919      	adds	r1, r3, r4
 800cf9e:	1aa5      	subs	r5, r4, r2
 800cfa0:	42aa      	cmp	r2, r5
 800cfa2:	dae2      	bge.n	800cf6a <__utoa+0x36>
 800cfa4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cfa8:	780e      	ldrb	r6, [r1, #0]
 800cfaa:	3201      	adds	r2, #1
 800cfac:	7006      	strb	r6, [r0, #0]
 800cfae:	f801 5901 	strb.w	r5, [r1], #-1
 800cfb2:	e7f4      	b.n	800cf9e <__utoa+0x6a>
 800cfb4:	08010590 	.word	0x08010590

0800cfb8 <quorem>:
 800cfb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	6903      	ldr	r3, [r0, #16]
 800cfbe:	690c      	ldr	r4, [r1, #16]
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	f2c0 8083 	blt.w	800d0ce <quorem+0x116>
 800cfc8:	3c01      	subs	r4, #1
 800cfca:	f100 0514 	add.w	r5, r0, #20
 800cfce:	f101 0814 	add.w	r8, r1, #20
 800cfd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cfdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cfe8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cfec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cff0:	d332      	bcc.n	800d058 <quorem+0xa0>
 800cff2:	f04f 0e00 	mov.w	lr, #0
 800cff6:	4640      	mov	r0, r8
 800cff8:	46ac      	mov	ip, r5
 800cffa:	46f2      	mov	sl, lr
 800cffc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d000:	b293      	uxth	r3, r2
 800d002:	fb06 e303 	mla	r3, r6, r3, lr
 800d006:	0c12      	lsrs	r2, r2, #16
 800d008:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d00c:	fb06 e202 	mla	r2, r6, r2, lr
 800d010:	b29b      	uxth	r3, r3
 800d012:	ebaa 0303 	sub.w	r3, sl, r3
 800d016:	f8dc a000 	ldr.w	sl, [ip]
 800d01a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d01e:	fa1f fa8a 	uxth.w	sl, sl
 800d022:	4453      	add	r3, sl
 800d024:	fa1f fa82 	uxth.w	sl, r2
 800d028:	f8dc 2000 	ldr.w	r2, [ip]
 800d02c:	4581      	cmp	r9, r0
 800d02e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d032:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d036:	b29b      	uxth	r3, r3
 800d038:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d03c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d040:	f84c 3b04 	str.w	r3, [ip], #4
 800d044:	d2da      	bcs.n	800cffc <quorem+0x44>
 800d046:	f855 300b 	ldr.w	r3, [r5, fp]
 800d04a:	b92b      	cbnz	r3, 800d058 <quorem+0xa0>
 800d04c:	9b01      	ldr	r3, [sp, #4]
 800d04e:	3b04      	subs	r3, #4
 800d050:	429d      	cmp	r5, r3
 800d052:	461a      	mov	r2, r3
 800d054:	d32f      	bcc.n	800d0b6 <quorem+0xfe>
 800d056:	613c      	str	r4, [r7, #16]
 800d058:	4638      	mov	r0, r7
 800d05a:	f001 fc93 	bl	800e984 <__mcmp>
 800d05e:	2800      	cmp	r0, #0
 800d060:	db25      	blt.n	800d0ae <quorem+0xf6>
 800d062:	4628      	mov	r0, r5
 800d064:	f04f 0c00 	mov.w	ip, #0
 800d068:	3601      	adds	r6, #1
 800d06a:	f858 1b04 	ldr.w	r1, [r8], #4
 800d06e:	f8d0 e000 	ldr.w	lr, [r0]
 800d072:	b28b      	uxth	r3, r1
 800d074:	ebac 0303 	sub.w	r3, ip, r3
 800d078:	fa1f f28e 	uxth.w	r2, lr
 800d07c:	4413      	add	r3, r2
 800d07e:	0c0a      	lsrs	r2, r1, #16
 800d080:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d088:	b29b      	uxth	r3, r3
 800d08a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d08e:	45c1      	cmp	r9, r8
 800d090:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d094:	f840 3b04 	str.w	r3, [r0], #4
 800d098:	d2e7      	bcs.n	800d06a <quorem+0xb2>
 800d09a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d09e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0a2:	b922      	cbnz	r2, 800d0ae <quorem+0xf6>
 800d0a4:	3b04      	subs	r3, #4
 800d0a6:	429d      	cmp	r5, r3
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	d30a      	bcc.n	800d0c2 <quorem+0x10a>
 800d0ac:	613c      	str	r4, [r7, #16]
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	b003      	add	sp, #12
 800d0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b6:	6812      	ldr	r2, [r2, #0]
 800d0b8:	3b04      	subs	r3, #4
 800d0ba:	2a00      	cmp	r2, #0
 800d0bc:	d1cb      	bne.n	800d056 <quorem+0x9e>
 800d0be:	3c01      	subs	r4, #1
 800d0c0:	e7c6      	b.n	800d050 <quorem+0x98>
 800d0c2:	6812      	ldr	r2, [r2, #0]
 800d0c4:	3b04      	subs	r3, #4
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	d1f0      	bne.n	800d0ac <quorem+0xf4>
 800d0ca:	3c01      	subs	r4, #1
 800d0cc:	e7eb      	b.n	800d0a6 <quorem+0xee>
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	e7ee      	b.n	800d0b0 <quorem+0xf8>
 800d0d2:	0000      	movs	r0, r0
 800d0d4:	0000      	movs	r0, r0
	...

0800d0d8 <_dtoa_r>:
 800d0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0dc:	4616      	mov	r6, r2
 800d0de:	461f      	mov	r7, r3
 800d0e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d0e2:	b099      	sub	sp, #100	; 0x64
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d0ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d0ee:	b974      	cbnz	r4, 800d10e <_dtoa_r+0x36>
 800d0f0:	2010      	movs	r0, #16
 800d0f2:	f7fe f915 	bl	800b320 <malloc>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	6268      	str	r0, [r5, #36]	; 0x24
 800d0fa:	b920      	cbnz	r0, 800d106 <_dtoa_r+0x2e>
 800d0fc:	21ea      	movs	r1, #234	; 0xea
 800d0fe:	4bae      	ldr	r3, [pc, #696]	; (800d3b8 <_dtoa_r+0x2e0>)
 800d100:	48ae      	ldr	r0, [pc, #696]	; (800d3bc <_dtoa_r+0x2e4>)
 800d102:	f001 ffc3 	bl	800f08c <__assert_func>
 800d106:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d10a:	6004      	str	r4, [r0, #0]
 800d10c:	60c4      	str	r4, [r0, #12]
 800d10e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d110:	6819      	ldr	r1, [r3, #0]
 800d112:	b151      	cbz	r1, 800d12a <_dtoa_r+0x52>
 800d114:	685a      	ldr	r2, [r3, #4]
 800d116:	2301      	movs	r3, #1
 800d118:	4093      	lsls	r3, r2
 800d11a:	604a      	str	r2, [r1, #4]
 800d11c:	608b      	str	r3, [r1, #8]
 800d11e:	4628      	mov	r0, r5
 800d120:	f001 f9ac 	bl	800e47c <_Bfree>
 800d124:	2200      	movs	r2, #0
 800d126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	1e3b      	subs	r3, r7, #0
 800d12c:	bfaf      	iteee	ge
 800d12e:	2300      	movge	r3, #0
 800d130:	2201      	movlt	r2, #1
 800d132:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d136:	9305      	strlt	r3, [sp, #20]
 800d138:	bfa8      	it	ge
 800d13a:	f8c8 3000 	strge.w	r3, [r8]
 800d13e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d142:	4b9f      	ldr	r3, [pc, #636]	; (800d3c0 <_dtoa_r+0x2e8>)
 800d144:	bfb8      	it	lt
 800d146:	f8c8 2000 	strlt.w	r2, [r8]
 800d14a:	ea33 0309 	bics.w	r3, r3, r9
 800d14e:	d119      	bne.n	800d184 <_dtoa_r+0xac>
 800d150:	f242 730f 	movw	r3, #9999	; 0x270f
 800d154:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d15c:	4333      	orrs	r3, r6
 800d15e:	f000 8580 	beq.w	800dc62 <_dtoa_r+0xb8a>
 800d162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d164:	b953      	cbnz	r3, 800d17c <_dtoa_r+0xa4>
 800d166:	4b97      	ldr	r3, [pc, #604]	; (800d3c4 <_dtoa_r+0x2ec>)
 800d168:	e022      	b.n	800d1b0 <_dtoa_r+0xd8>
 800d16a:	4b97      	ldr	r3, [pc, #604]	; (800d3c8 <_dtoa_r+0x2f0>)
 800d16c:	9308      	str	r3, [sp, #32]
 800d16e:	3308      	adds	r3, #8
 800d170:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	9808      	ldr	r0, [sp, #32]
 800d176:	b019      	add	sp, #100	; 0x64
 800d178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17c:	4b91      	ldr	r3, [pc, #580]	; (800d3c4 <_dtoa_r+0x2ec>)
 800d17e:	9308      	str	r3, [sp, #32]
 800d180:	3303      	adds	r3, #3
 800d182:	e7f5      	b.n	800d170 <_dtoa_r+0x98>
 800d184:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d188:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d18c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d190:	2200      	movs	r2, #0
 800d192:	2300      	movs	r3, #0
 800d194:	f7f3 fc74 	bl	8000a80 <__aeabi_dcmpeq>
 800d198:	4680      	mov	r8, r0
 800d19a:	b158      	cbz	r0, 800d1b4 <_dtoa_r+0xdc>
 800d19c:	2301      	movs	r3, #1
 800d19e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d1a0:	6013      	str	r3, [r2, #0]
 800d1a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f000 8559 	beq.w	800dc5c <_dtoa_r+0xb84>
 800d1aa:	4888      	ldr	r0, [pc, #544]	; (800d3cc <_dtoa_r+0x2f4>)
 800d1ac:	6018      	str	r0, [r3, #0]
 800d1ae:	1e43      	subs	r3, r0, #1
 800d1b0:	9308      	str	r3, [sp, #32]
 800d1b2:	e7df      	b.n	800d174 <_dtoa_r+0x9c>
 800d1b4:	ab16      	add	r3, sp, #88	; 0x58
 800d1b6:	9301      	str	r3, [sp, #4]
 800d1b8:	ab17      	add	r3, sp, #92	; 0x5c
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	4628      	mov	r0, r5
 800d1be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d1c2:	f001 fd05 	bl	800ebd0 <__d2b>
 800d1c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d1ca:	4682      	mov	sl, r0
 800d1cc:	2c00      	cmp	r4, #0
 800d1ce:	d07e      	beq.n	800d2ce <_dtoa_r+0x1f6>
 800d1d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d1d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d1da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800d1e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800d1e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4b78      	ldr	r3, [pc, #480]	; (800d3d0 <_dtoa_r+0x2f8>)
 800d1ee:	f7f3 f827 	bl	8000240 <__aeabi_dsub>
 800d1f2:	a36b      	add	r3, pc, #428	; (adr r3, 800d3a0 <_dtoa_r+0x2c8>)
 800d1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f8:	f7f3 f9da 	bl	80005b0 <__aeabi_dmul>
 800d1fc:	a36a      	add	r3, pc, #424	; (adr r3, 800d3a8 <_dtoa_r+0x2d0>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	f7f3 f81f 	bl	8000244 <__adddf3>
 800d206:	4606      	mov	r6, r0
 800d208:	4620      	mov	r0, r4
 800d20a:	460f      	mov	r7, r1
 800d20c:	f7f3 f966 	bl	80004dc <__aeabi_i2d>
 800d210:	a367      	add	r3, pc, #412	; (adr r3, 800d3b0 <_dtoa_r+0x2d8>)
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	f7f3 f9cb 	bl	80005b0 <__aeabi_dmul>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4630      	mov	r0, r6
 800d220:	4639      	mov	r1, r7
 800d222:	f7f3 f80f 	bl	8000244 <__adddf3>
 800d226:	4606      	mov	r6, r0
 800d228:	460f      	mov	r7, r1
 800d22a:	f7f3 fc71 	bl	8000b10 <__aeabi_d2iz>
 800d22e:	2200      	movs	r2, #0
 800d230:	4681      	mov	r9, r0
 800d232:	2300      	movs	r3, #0
 800d234:	4630      	mov	r0, r6
 800d236:	4639      	mov	r1, r7
 800d238:	f7f3 fc2c 	bl	8000a94 <__aeabi_dcmplt>
 800d23c:	b148      	cbz	r0, 800d252 <_dtoa_r+0x17a>
 800d23e:	4648      	mov	r0, r9
 800d240:	f7f3 f94c 	bl	80004dc <__aeabi_i2d>
 800d244:	4632      	mov	r2, r6
 800d246:	463b      	mov	r3, r7
 800d248:	f7f3 fc1a 	bl	8000a80 <__aeabi_dcmpeq>
 800d24c:	b908      	cbnz	r0, 800d252 <_dtoa_r+0x17a>
 800d24e:	f109 39ff 	add.w	r9, r9, #4294967295
 800d252:	f1b9 0f16 	cmp.w	r9, #22
 800d256:	d857      	bhi.n	800d308 <_dtoa_r+0x230>
 800d258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d25c:	4b5d      	ldr	r3, [pc, #372]	; (800d3d4 <_dtoa_r+0x2fc>)
 800d25e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 fc15 	bl	8000a94 <__aeabi_dcmplt>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d04e      	beq.n	800d30c <_dtoa_r+0x234>
 800d26e:	2300      	movs	r3, #0
 800d270:	f109 39ff 	add.w	r9, r9, #4294967295
 800d274:	930f      	str	r3, [sp, #60]	; 0x3c
 800d276:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d278:	1b1c      	subs	r4, r3, r4
 800d27a:	1e63      	subs	r3, r4, #1
 800d27c:	9309      	str	r3, [sp, #36]	; 0x24
 800d27e:	bf49      	itett	mi
 800d280:	f1c4 0301 	rsbmi	r3, r4, #1
 800d284:	2300      	movpl	r3, #0
 800d286:	9306      	strmi	r3, [sp, #24]
 800d288:	2300      	movmi	r3, #0
 800d28a:	bf54      	ite	pl
 800d28c:	9306      	strpl	r3, [sp, #24]
 800d28e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d290:	f1b9 0f00 	cmp.w	r9, #0
 800d294:	db3c      	blt.n	800d310 <_dtoa_r+0x238>
 800d296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d298:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d29c:	444b      	add	r3, r9
 800d29e:	9309      	str	r3, [sp, #36]	; 0x24
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2a6:	2b09      	cmp	r3, #9
 800d2a8:	d86c      	bhi.n	800d384 <_dtoa_r+0x2ac>
 800d2aa:	2b05      	cmp	r3, #5
 800d2ac:	bfc4      	itt	gt
 800d2ae:	3b04      	subgt	r3, #4
 800d2b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d2b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d2b4:	bfc8      	it	gt
 800d2b6:	2400      	movgt	r4, #0
 800d2b8:	f1a3 0302 	sub.w	r3, r3, #2
 800d2bc:	bfd8      	it	le
 800d2be:	2401      	movle	r4, #1
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	f200 808b 	bhi.w	800d3dc <_dtoa_r+0x304>
 800d2c6:	e8df f003 	tbb	[pc, r3]
 800d2ca:	4f2d      	.short	0x4f2d
 800d2cc:	5b4d      	.short	0x5b4d
 800d2ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d2d2:	441c      	add	r4, r3
 800d2d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d2d8:	2b20      	cmp	r3, #32
 800d2da:	bfc3      	ittte	gt
 800d2dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d2e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800d2e4:	fa09 f303 	lslgt.w	r3, r9, r3
 800d2e8:	f1c3 0320 	rsble	r3, r3, #32
 800d2ec:	bfc6      	itte	gt
 800d2ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d2f2:	4318      	orrgt	r0, r3
 800d2f4:	fa06 f003 	lslle.w	r0, r6, r3
 800d2f8:	f7f3 f8e0 	bl	80004bc <__aeabi_ui2d>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800d302:	3c01      	subs	r4, #1
 800d304:	9313      	str	r3, [sp, #76]	; 0x4c
 800d306:	e770      	b.n	800d1ea <_dtoa_r+0x112>
 800d308:	2301      	movs	r3, #1
 800d30a:	e7b3      	b.n	800d274 <_dtoa_r+0x19c>
 800d30c:	900f      	str	r0, [sp, #60]	; 0x3c
 800d30e:	e7b2      	b.n	800d276 <_dtoa_r+0x19e>
 800d310:	9b06      	ldr	r3, [sp, #24]
 800d312:	eba3 0309 	sub.w	r3, r3, r9
 800d316:	9306      	str	r3, [sp, #24]
 800d318:	f1c9 0300 	rsb	r3, r9, #0
 800d31c:	930a      	str	r3, [sp, #40]	; 0x28
 800d31e:	2300      	movs	r3, #0
 800d320:	930e      	str	r3, [sp, #56]	; 0x38
 800d322:	e7bf      	b.n	800d2a4 <_dtoa_r+0x1cc>
 800d324:	2300      	movs	r3, #0
 800d326:	930b      	str	r3, [sp, #44]	; 0x2c
 800d328:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	dc59      	bgt.n	800d3e2 <_dtoa_r+0x30a>
 800d32e:	f04f 0b01 	mov.w	fp, #1
 800d332:	465b      	mov	r3, fp
 800d334:	f8cd b008 	str.w	fp, [sp, #8]
 800d338:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800d33c:	2200      	movs	r2, #0
 800d33e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d340:	6042      	str	r2, [r0, #4]
 800d342:	2204      	movs	r2, #4
 800d344:	f102 0614 	add.w	r6, r2, #20
 800d348:	429e      	cmp	r6, r3
 800d34a:	6841      	ldr	r1, [r0, #4]
 800d34c:	d94f      	bls.n	800d3ee <_dtoa_r+0x316>
 800d34e:	4628      	mov	r0, r5
 800d350:	f001 f854 	bl	800e3fc <_Balloc>
 800d354:	9008      	str	r0, [sp, #32]
 800d356:	2800      	cmp	r0, #0
 800d358:	d14d      	bne.n	800d3f6 <_dtoa_r+0x31e>
 800d35a:	4602      	mov	r2, r0
 800d35c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d360:	4b1d      	ldr	r3, [pc, #116]	; (800d3d8 <_dtoa_r+0x300>)
 800d362:	e6cd      	b.n	800d100 <_dtoa_r+0x28>
 800d364:	2301      	movs	r3, #1
 800d366:	e7de      	b.n	800d326 <_dtoa_r+0x24e>
 800d368:	2300      	movs	r3, #0
 800d36a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d36c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d36e:	eb09 0b03 	add.w	fp, r9, r3
 800d372:	f10b 0301 	add.w	r3, fp, #1
 800d376:	2b01      	cmp	r3, #1
 800d378:	9302      	str	r3, [sp, #8]
 800d37a:	bfb8      	it	lt
 800d37c:	2301      	movlt	r3, #1
 800d37e:	e7dd      	b.n	800d33c <_dtoa_r+0x264>
 800d380:	2301      	movs	r3, #1
 800d382:	e7f2      	b.n	800d36a <_dtoa_r+0x292>
 800d384:	2401      	movs	r4, #1
 800d386:	2300      	movs	r3, #0
 800d388:	940b      	str	r4, [sp, #44]	; 0x2c
 800d38a:	9322      	str	r3, [sp, #136]	; 0x88
 800d38c:	f04f 3bff 	mov.w	fp, #4294967295
 800d390:	2200      	movs	r2, #0
 800d392:	2312      	movs	r3, #18
 800d394:	f8cd b008 	str.w	fp, [sp, #8]
 800d398:	9223      	str	r2, [sp, #140]	; 0x8c
 800d39a:	e7cf      	b.n	800d33c <_dtoa_r+0x264>
 800d39c:	f3af 8000 	nop.w
 800d3a0:	636f4361 	.word	0x636f4361
 800d3a4:	3fd287a7 	.word	0x3fd287a7
 800d3a8:	8b60c8b3 	.word	0x8b60c8b3
 800d3ac:	3fc68a28 	.word	0x3fc68a28
 800d3b0:	509f79fb 	.word	0x509f79fb
 800d3b4:	3fd34413 	.word	0x3fd34413
 800d3b8:	080105c2 	.word	0x080105c2
 800d3bc:	080105d9 	.word	0x080105d9
 800d3c0:	7ff00000 	.word	0x7ff00000
 800d3c4:	080105be 	.word	0x080105be
 800d3c8:	080105b5 	.word	0x080105b5
 800d3cc:	08010511 	.word	0x08010511
 800d3d0:	3ff80000 	.word	0x3ff80000
 800d3d4:	08010750 	.word	0x08010750
 800d3d8:	08010638 	.word	0x08010638
 800d3dc:	2301      	movs	r3, #1
 800d3de:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3e0:	e7d4      	b.n	800d38c <_dtoa_r+0x2b4>
 800d3e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800d3e6:	465b      	mov	r3, fp
 800d3e8:	f8cd b008 	str.w	fp, [sp, #8]
 800d3ec:	e7a6      	b.n	800d33c <_dtoa_r+0x264>
 800d3ee:	3101      	adds	r1, #1
 800d3f0:	6041      	str	r1, [r0, #4]
 800d3f2:	0052      	lsls	r2, r2, #1
 800d3f4:	e7a6      	b.n	800d344 <_dtoa_r+0x26c>
 800d3f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3f8:	9a08      	ldr	r2, [sp, #32]
 800d3fa:	601a      	str	r2, [r3, #0]
 800d3fc:	9b02      	ldr	r3, [sp, #8]
 800d3fe:	2b0e      	cmp	r3, #14
 800d400:	f200 80a8 	bhi.w	800d554 <_dtoa_r+0x47c>
 800d404:	2c00      	cmp	r4, #0
 800d406:	f000 80a5 	beq.w	800d554 <_dtoa_r+0x47c>
 800d40a:	f1b9 0f00 	cmp.w	r9, #0
 800d40e:	dd34      	ble.n	800d47a <_dtoa_r+0x3a2>
 800d410:	4a9a      	ldr	r2, [pc, #616]	; (800d67c <_dtoa_r+0x5a4>)
 800d412:	f009 030f 	and.w	r3, r9, #15
 800d416:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d41a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800d41e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d422:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d426:	ea4f 1429 	mov.w	r4, r9, asr #4
 800d42a:	d016      	beq.n	800d45a <_dtoa_r+0x382>
 800d42c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d430:	4b93      	ldr	r3, [pc, #588]	; (800d680 <_dtoa_r+0x5a8>)
 800d432:	2703      	movs	r7, #3
 800d434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d438:	f7f3 f9e4 	bl	8000804 <__aeabi_ddiv>
 800d43c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d440:	f004 040f 	and.w	r4, r4, #15
 800d444:	4e8e      	ldr	r6, [pc, #568]	; (800d680 <_dtoa_r+0x5a8>)
 800d446:	b954      	cbnz	r4, 800d45e <_dtoa_r+0x386>
 800d448:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d450:	f7f3 f9d8 	bl	8000804 <__aeabi_ddiv>
 800d454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d458:	e029      	b.n	800d4ae <_dtoa_r+0x3d6>
 800d45a:	2702      	movs	r7, #2
 800d45c:	e7f2      	b.n	800d444 <_dtoa_r+0x36c>
 800d45e:	07e1      	lsls	r1, r4, #31
 800d460:	d508      	bpl.n	800d474 <_dtoa_r+0x39c>
 800d462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d466:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d46a:	f7f3 f8a1 	bl	80005b0 <__aeabi_dmul>
 800d46e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d472:	3701      	adds	r7, #1
 800d474:	1064      	asrs	r4, r4, #1
 800d476:	3608      	adds	r6, #8
 800d478:	e7e5      	b.n	800d446 <_dtoa_r+0x36e>
 800d47a:	f000 80a5 	beq.w	800d5c8 <_dtoa_r+0x4f0>
 800d47e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d482:	f1c9 0400 	rsb	r4, r9, #0
 800d486:	4b7d      	ldr	r3, [pc, #500]	; (800d67c <_dtoa_r+0x5a4>)
 800d488:	f004 020f 	and.w	r2, r4, #15
 800d48c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	f7f3 f88c 	bl	80005b0 <__aeabi_dmul>
 800d498:	2702      	movs	r7, #2
 800d49a:	2300      	movs	r3, #0
 800d49c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4a0:	4e77      	ldr	r6, [pc, #476]	; (800d680 <_dtoa_r+0x5a8>)
 800d4a2:	1124      	asrs	r4, r4, #4
 800d4a4:	2c00      	cmp	r4, #0
 800d4a6:	f040 8084 	bne.w	800d5b2 <_dtoa_r+0x4da>
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d1d2      	bne.n	800d454 <_dtoa_r+0x37c>
 800d4ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 808b 	beq.w	800d5cc <_dtoa_r+0x4f4>
 800d4b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d4ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d4be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	4b6f      	ldr	r3, [pc, #444]	; (800d684 <_dtoa_r+0x5ac>)
 800d4c6:	f7f3 fae5 	bl	8000a94 <__aeabi_dcmplt>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d07e      	beq.n	800d5cc <_dtoa_r+0x4f4>
 800d4ce:	9b02      	ldr	r3, [sp, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d07b      	beq.n	800d5cc <_dtoa_r+0x4f4>
 800d4d4:	f1bb 0f00 	cmp.w	fp, #0
 800d4d8:	dd38      	ble.n	800d54c <_dtoa_r+0x474>
 800d4da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d4de:	2200      	movs	r2, #0
 800d4e0:	4b69      	ldr	r3, [pc, #420]	; (800d688 <_dtoa_r+0x5b0>)
 800d4e2:	f7f3 f865 	bl	80005b0 <__aeabi_dmul>
 800d4e6:	465c      	mov	r4, fp
 800d4e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4ec:	f109 38ff 	add.w	r8, r9, #4294967295
 800d4f0:	3701      	adds	r7, #1
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	f7f2 fff2 	bl	80004dc <__aeabi_i2d>
 800d4f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4fc:	f7f3 f858 	bl	80005b0 <__aeabi_dmul>
 800d500:	2200      	movs	r2, #0
 800d502:	4b62      	ldr	r3, [pc, #392]	; (800d68c <_dtoa_r+0x5b4>)
 800d504:	f7f2 fe9e 	bl	8000244 <__adddf3>
 800d508:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d50c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d510:	9611      	str	r6, [sp, #68]	; 0x44
 800d512:	2c00      	cmp	r4, #0
 800d514:	d15d      	bne.n	800d5d2 <_dtoa_r+0x4fa>
 800d516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d51a:	2200      	movs	r2, #0
 800d51c:	4b5c      	ldr	r3, [pc, #368]	; (800d690 <_dtoa_r+0x5b8>)
 800d51e:	f7f2 fe8f 	bl	8000240 <__aeabi_dsub>
 800d522:	4602      	mov	r2, r0
 800d524:	460b      	mov	r3, r1
 800d526:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d52a:	4633      	mov	r3, r6
 800d52c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d52e:	f7f3 facf 	bl	8000ad0 <__aeabi_dcmpgt>
 800d532:	2800      	cmp	r0, #0
 800d534:	f040 829e 	bne.w	800da74 <_dtoa_r+0x99c>
 800d538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d53c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d53e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d542:	f7f3 faa7 	bl	8000a94 <__aeabi_dcmplt>
 800d546:	2800      	cmp	r0, #0
 800d548:	f040 8292 	bne.w	800da70 <_dtoa_r+0x998>
 800d54c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d550:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d556:	2b00      	cmp	r3, #0
 800d558:	f2c0 8153 	blt.w	800d802 <_dtoa_r+0x72a>
 800d55c:	f1b9 0f0e 	cmp.w	r9, #14
 800d560:	f300 814f 	bgt.w	800d802 <_dtoa_r+0x72a>
 800d564:	4b45      	ldr	r3, [pc, #276]	; (800d67c <_dtoa_r+0x5a4>)
 800d566:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d56a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d56e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d574:	2b00      	cmp	r3, #0
 800d576:	f280 80db 	bge.w	800d730 <_dtoa_r+0x658>
 800d57a:	9b02      	ldr	r3, [sp, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f300 80d7 	bgt.w	800d730 <_dtoa_r+0x658>
 800d582:	f040 8274 	bne.w	800da6e <_dtoa_r+0x996>
 800d586:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d58a:	2200      	movs	r2, #0
 800d58c:	4b40      	ldr	r3, [pc, #256]	; (800d690 <_dtoa_r+0x5b8>)
 800d58e:	f7f3 f80f 	bl	80005b0 <__aeabi_dmul>
 800d592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d596:	f7f3 fa91 	bl	8000abc <__aeabi_dcmpge>
 800d59a:	9c02      	ldr	r4, [sp, #8]
 800d59c:	4626      	mov	r6, r4
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f040 824a 	bne.w	800da38 <_dtoa_r+0x960>
 800d5a4:	2331      	movs	r3, #49	; 0x31
 800d5a6:	9f08      	ldr	r7, [sp, #32]
 800d5a8:	f109 0901 	add.w	r9, r9, #1
 800d5ac:	f807 3b01 	strb.w	r3, [r7], #1
 800d5b0:	e246      	b.n	800da40 <_dtoa_r+0x968>
 800d5b2:	07e2      	lsls	r2, r4, #31
 800d5b4:	d505      	bpl.n	800d5c2 <_dtoa_r+0x4ea>
 800d5b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5ba:	f7f2 fff9 	bl	80005b0 <__aeabi_dmul>
 800d5be:	2301      	movs	r3, #1
 800d5c0:	3701      	adds	r7, #1
 800d5c2:	1064      	asrs	r4, r4, #1
 800d5c4:	3608      	adds	r6, #8
 800d5c6:	e76d      	b.n	800d4a4 <_dtoa_r+0x3cc>
 800d5c8:	2702      	movs	r7, #2
 800d5ca:	e770      	b.n	800d4ae <_dtoa_r+0x3d6>
 800d5cc:	46c8      	mov	r8, r9
 800d5ce:	9c02      	ldr	r4, [sp, #8]
 800d5d0:	e78f      	b.n	800d4f2 <_dtoa_r+0x41a>
 800d5d2:	9908      	ldr	r1, [sp, #32]
 800d5d4:	4b29      	ldr	r3, [pc, #164]	; (800d67c <_dtoa_r+0x5a4>)
 800d5d6:	4421      	add	r1, r4
 800d5d8:	9112      	str	r1, [sp, #72]	; 0x48
 800d5da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d5e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d5e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	d055      	beq.n	800d698 <_dtoa_r+0x5c0>
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	4929      	ldr	r1, [pc, #164]	; (800d694 <_dtoa_r+0x5bc>)
 800d5f0:	f7f3 f908 	bl	8000804 <__aeabi_ddiv>
 800d5f4:	463b      	mov	r3, r7
 800d5f6:	4632      	mov	r2, r6
 800d5f8:	f7f2 fe22 	bl	8000240 <__aeabi_dsub>
 800d5fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d600:	9f08      	ldr	r7, [sp, #32]
 800d602:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d606:	f7f3 fa83 	bl	8000b10 <__aeabi_d2iz>
 800d60a:	4604      	mov	r4, r0
 800d60c:	f7f2 ff66 	bl	80004dc <__aeabi_i2d>
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d618:	f7f2 fe12 	bl	8000240 <__aeabi_dsub>
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	3430      	adds	r4, #48	; 0x30
 800d622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d62a:	f807 4b01 	strb.w	r4, [r7], #1
 800d62e:	f7f3 fa31 	bl	8000a94 <__aeabi_dcmplt>
 800d632:	2800      	cmp	r0, #0
 800d634:	d174      	bne.n	800d720 <_dtoa_r+0x648>
 800d636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d63a:	2000      	movs	r0, #0
 800d63c:	4911      	ldr	r1, [pc, #68]	; (800d684 <_dtoa_r+0x5ac>)
 800d63e:	f7f2 fdff 	bl	8000240 <__aeabi_dsub>
 800d642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d646:	f7f3 fa25 	bl	8000a94 <__aeabi_dcmplt>
 800d64a:	2800      	cmp	r0, #0
 800d64c:	f040 80b6 	bne.w	800d7bc <_dtoa_r+0x6e4>
 800d650:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d652:	429f      	cmp	r7, r3
 800d654:	f43f af7a 	beq.w	800d54c <_dtoa_r+0x474>
 800d658:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d65c:	2200      	movs	r2, #0
 800d65e:	4b0a      	ldr	r3, [pc, #40]	; (800d688 <_dtoa_r+0x5b0>)
 800d660:	f7f2 ffa6 	bl	80005b0 <__aeabi_dmul>
 800d664:	2200      	movs	r2, #0
 800d666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d66a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d66e:	4b06      	ldr	r3, [pc, #24]	; (800d688 <_dtoa_r+0x5b0>)
 800d670:	f7f2 ff9e 	bl	80005b0 <__aeabi_dmul>
 800d674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d678:	e7c3      	b.n	800d602 <_dtoa_r+0x52a>
 800d67a:	bf00      	nop
 800d67c:	08010750 	.word	0x08010750
 800d680:	08010728 	.word	0x08010728
 800d684:	3ff00000 	.word	0x3ff00000
 800d688:	40240000 	.word	0x40240000
 800d68c:	401c0000 	.word	0x401c0000
 800d690:	40140000 	.word	0x40140000
 800d694:	3fe00000 	.word	0x3fe00000
 800d698:	4630      	mov	r0, r6
 800d69a:	4639      	mov	r1, r7
 800d69c:	f7f2 ff88 	bl	80005b0 <__aeabi_dmul>
 800d6a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d6a6:	9c08      	ldr	r4, [sp, #32]
 800d6a8:	9314      	str	r3, [sp, #80]	; 0x50
 800d6aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6ae:	f7f3 fa2f 	bl	8000b10 <__aeabi_d2iz>
 800d6b2:	9015      	str	r0, [sp, #84]	; 0x54
 800d6b4:	f7f2 ff12 	bl	80004dc <__aeabi_i2d>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6c0:	f7f2 fdbe 	bl	8000240 <__aeabi_dsub>
 800d6c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	3330      	adds	r3, #48	; 0x30
 800d6ca:	f804 3b01 	strb.w	r3, [r4], #1
 800d6ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6d0:	460f      	mov	r7, r1
 800d6d2:	429c      	cmp	r4, r3
 800d6d4:	f04f 0200 	mov.w	r2, #0
 800d6d8:	d124      	bne.n	800d724 <_dtoa_r+0x64c>
 800d6da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d6de:	4bb3      	ldr	r3, [pc, #716]	; (800d9ac <_dtoa_r+0x8d4>)
 800d6e0:	f7f2 fdb0 	bl	8000244 <__adddf3>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	4639      	mov	r1, r7
 800d6ec:	f7f3 f9f0 	bl	8000ad0 <__aeabi_dcmpgt>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d162      	bne.n	800d7ba <_dtoa_r+0x6e2>
 800d6f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	49ac      	ldr	r1, [pc, #688]	; (800d9ac <_dtoa_r+0x8d4>)
 800d6fc:	f7f2 fda0 	bl	8000240 <__aeabi_dsub>
 800d700:	4602      	mov	r2, r0
 800d702:	460b      	mov	r3, r1
 800d704:	4630      	mov	r0, r6
 800d706:	4639      	mov	r1, r7
 800d708:	f7f3 f9c4 	bl	8000a94 <__aeabi_dcmplt>
 800d70c:	2800      	cmp	r0, #0
 800d70e:	f43f af1d 	beq.w	800d54c <_dtoa_r+0x474>
 800d712:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d714:	1e7b      	subs	r3, r7, #1
 800d716:	9314      	str	r3, [sp, #80]	; 0x50
 800d718:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d71c:	2b30      	cmp	r3, #48	; 0x30
 800d71e:	d0f8      	beq.n	800d712 <_dtoa_r+0x63a>
 800d720:	46c1      	mov	r9, r8
 800d722:	e03a      	b.n	800d79a <_dtoa_r+0x6c2>
 800d724:	4ba2      	ldr	r3, [pc, #648]	; (800d9b0 <_dtoa_r+0x8d8>)
 800d726:	f7f2 ff43 	bl	80005b0 <__aeabi_dmul>
 800d72a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d72e:	e7bc      	b.n	800d6aa <_dtoa_r+0x5d2>
 800d730:	9f08      	ldr	r7, [sp, #32]
 800d732:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d73a:	f7f3 f863 	bl	8000804 <__aeabi_ddiv>
 800d73e:	f7f3 f9e7 	bl	8000b10 <__aeabi_d2iz>
 800d742:	4604      	mov	r4, r0
 800d744:	f7f2 feca 	bl	80004dc <__aeabi_i2d>
 800d748:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d74c:	f7f2 ff30 	bl	80005b0 <__aeabi_dmul>
 800d750:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800d754:	460b      	mov	r3, r1
 800d756:	4602      	mov	r2, r0
 800d758:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d75c:	f7f2 fd70 	bl	8000240 <__aeabi_dsub>
 800d760:	f807 6b01 	strb.w	r6, [r7], #1
 800d764:	9e08      	ldr	r6, [sp, #32]
 800d766:	9b02      	ldr	r3, [sp, #8]
 800d768:	1bbe      	subs	r6, r7, r6
 800d76a:	42b3      	cmp	r3, r6
 800d76c:	d13a      	bne.n	800d7e4 <_dtoa_r+0x70c>
 800d76e:	4602      	mov	r2, r0
 800d770:	460b      	mov	r3, r1
 800d772:	f7f2 fd67 	bl	8000244 <__adddf3>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d77e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d782:	f7f3 f9a5 	bl	8000ad0 <__aeabi_dcmpgt>
 800d786:	bb58      	cbnz	r0, 800d7e0 <_dtoa_r+0x708>
 800d788:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d78c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d790:	f7f3 f976 	bl	8000a80 <__aeabi_dcmpeq>
 800d794:	b108      	cbz	r0, 800d79a <_dtoa_r+0x6c2>
 800d796:	07e1      	lsls	r1, r4, #31
 800d798:	d422      	bmi.n	800d7e0 <_dtoa_r+0x708>
 800d79a:	4628      	mov	r0, r5
 800d79c:	4651      	mov	r1, sl
 800d79e:	f000 fe6d 	bl	800e47c <_Bfree>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	703b      	strb	r3, [r7, #0]
 800d7a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d7a8:	f109 0001 	add.w	r0, r9, #1
 800d7ac:	6018      	str	r0, [r3, #0]
 800d7ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	f43f acdf 	beq.w	800d174 <_dtoa_r+0x9c>
 800d7b6:	601f      	str	r7, [r3, #0]
 800d7b8:	e4dc      	b.n	800d174 <_dtoa_r+0x9c>
 800d7ba:	4627      	mov	r7, r4
 800d7bc:	463b      	mov	r3, r7
 800d7be:	461f      	mov	r7, r3
 800d7c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7c4:	2a39      	cmp	r2, #57	; 0x39
 800d7c6:	d107      	bne.n	800d7d8 <_dtoa_r+0x700>
 800d7c8:	9a08      	ldr	r2, [sp, #32]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d1f7      	bne.n	800d7be <_dtoa_r+0x6e6>
 800d7ce:	2230      	movs	r2, #48	; 0x30
 800d7d0:	9908      	ldr	r1, [sp, #32]
 800d7d2:	f108 0801 	add.w	r8, r8, #1
 800d7d6:	700a      	strb	r2, [r1, #0]
 800d7d8:	781a      	ldrb	r2, [r3, #0]
 800d7da:	3201      	adds	r2, #1
 800d7dc:	701a      	strb	r2, [r3, #0]
 800d7de:	e79f      	b.n	800d720 <_dtoa_r+0x648>
 800d7e0:	46c8      	mov	r8, r9
 800d7e2:	e7eb      	b.n	800d7bc <_dtoa_r+0x6e4>
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	4b72      	ldr	r3, [pc, #456]	; (800d9b0 <_dtoa_r+0x8d8>)
 800d7e8:	f7f2 fee2 	bl	80005b0 <__aeabi_dmul>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	f7f3 f942 	bl	8000a80 <__aeabi_dcmpeq>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d098      	beq.n	800d732 <_dtoa_r+0x65a>
 800d800:	e7cb      	b.n	800d79a <_dtoa_r+0x6c2>
 800d802:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d804:	2a00      	cmp	r2, #0
 800d806:	f000 80cd 	beq.w	800d9a4 <_dtoa_r+0x8cc>
 800d80a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d80c:	2a01      	cmp	r2, #1
 800d80e:	f300 80af 	bgt.w	800d970 <_dtoa_r+0x898>
 800d812:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d814:	2a00      	cmp	r2, #0
 800d816:	f000 80a7 	beq.w	800d968 <_dtoa_r+0x890>
 800d81a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d81e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d820:	9f06      	ldr	r7, [sp, #24]
 800d822:	9a06      	ldr	r2, [sp, #24]
 800d824:	2101      	movs	r1, #1
 800d826:	441a      	add	r2, r3
 800d828:	9206      	str	r2, [sp, #24]
 800d82a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d82c:	4628      	mov	r0, r5
 800d82e:	441a      	add	r2, r3
 800d830:	9209      	str	r2, [sp, #36]	; 0x24
 800d832:	f000 ff27 	bl	800e684 <__i2b>
 800d836:	4606      	mov	r6, r0
 800d838:	2f00      	cmp	r7, #0
 800d83a:	dd0c      	ble.n	800d856 <_dtoa_r+0x77e>
 800d83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dd09      	ble.n	800d856 <_dtoa_r+0x77e>
 800d842:	42bb      	cmp	r3, r7
 800d844:	bfa8      	it	ge
 800d846:	463b      	movge	r3, r7
 800d848:	9a06      	ldr	r2, [sp, #24]
 800d84a:	1aff      	subs	r7, r7, r3
 800d84c:	1ad2      	subs	r2, r2, r3
 800d84e:	9206      	str	r2, [sp, #24]
 800d850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	9309      	str	r3, [sp, #36]	; 0x24
 800d856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d858:	b1f3      	cbz	r3, 800d898 <_dtoa_r+0x7c0>
 800d85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 80a9 	beq.w	800d9b4 <_dtoa_r+0x8dc>
 800d862:	2c00      	cmp	r4, #0
 800d864:	dd10      	ble.n	800d888 <_dtoa_r+0x7b0>
 800d866:	4631      	mov	r1, r6
 800d868:	4622      	mov	r2, r4
 800d86a:	4628      	mov	r0, r5
 800d86c:	f000 ffc4 	bl	800e7f8 <__pow5mult>
 800d870:	4652      	mov	r2, sl
 800d872:	4601      	mov	r1, r0
 800d874:	4606      	mov	r6, r0
 800d876:	4628      	mov	r0, r5
 800d878:	f000 ff1a 	bl	800e6b0 <__multiply>
 800d87c:	4680      	mov	r8, r0
 800d87e:	4651      	mov	r1, sl
 800d880:	4628      	mov	r0, r5
 800d882:	f000 fdfb 	bl	800e47c <_Bfree>
 800d886:	46c2      	mov	sl, r8
 800d888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d88a:	1b1a      	subs	r2, r3, r4
 800d88c:	d004      	beq.n	800d898 <_dtoa_r+0x7c0>
 800d88e:	4651      	mov	r1, sl
 800d890:	4628      	mov	r0, r5
 800d892:	f000 ffb1 	bl	800e7f8 <__pow5mult>
 800d896:	4682      	mov	sl, r0
 800d898:	2101      	movs	r1, #1
 800d89a:	4628      	mov	r0, r5
 800d89c:	f000 fef2 	bl	800e684 <__i2b>
 800d8a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f340 8087 	ble.w	800d9b8 <_dtoa_r+0x8e0>
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	4601      	mov	r1, r0
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f000 ffa2 	bl	800e7f8 <__pow5mult>
 800d8b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	f340 8080 	ble.w	800d9be <_dtoa_r+0x8e6>
 800d8be:	f04f 0800 	mov.w	r8, #0
 800d8c2:	6923      	ldr	r3, [r4, #16]
 800d8c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d8c8:	6918      	ldr	r0, [r3, #16]
 800d8ca:	f000 fe8d 	bl	800e5e8 <__hi0bits>
 800d8ce:	f1c0 0020 	rsb	r0, r0, #32
 800d8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d4:	4418      	add	r0, r3
 800d8d6:	f010 001f 	ands.w	r0, r0, #31
 800d8da:	f000 8092 	beq.w	800da02 <_dtoa_r+0x92a>
 800d8de:	f1c0 0320 	rsb	r3, r0, #32
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	f340 808a 	ble.w	800d9fc <_dtoa_r+0x924>
 800d8e8:	f1c0 001c 	rsb	r0, r0, #28
 800d8ec:	9b06      	ldr	r3, [sp, #24]
 800d8ee:	4407      	add	r7, r0
 800d8f0:	4403      	add	r3, r0
 800d8f2:	9306      	str	r3, [sp, #24]
 800d8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f6:	4403      	add	r3, r0
 800d8f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fa:	9b06      	ldr	r3, [sp, #24]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	dd05      	ble.n	800d90c <_dtoa_r+0x834>
 800d900:	4651      	mov	r1, sl
 800d902:	461a      	mov	r2, r3
 800d904:	4628      	mov	r0, r5
 800d906:	f000 ffd1 	bl	800e8ac <__lshift>
 800d90a:	4682      	mov	sl, r0
 800d90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d90e:	2b00      	cmp	r3, #0
 800d910:	dd05      	ble.n	800d91e <_dtoa_r+0x846>
 800d912:	4621      	mov	r1, r4
 800d914:	461a      	mov	r2, r3
 800d916:	4628      	mov	r0, r5
 800d918:	f000 ffc8 	bl	800e8ac <__lshift>
 800d91c:	4604      	mov	r4, r0
 800d91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d920:	2b00      	cmp	r3, #0
 800d922:	d070      	beq.n	800da06 <_dtoa_r+0x92e>
 800d924:	4621      	mov	r1, r4
 800d926:	4650      	mov	r0, sl
 800d928:	f001 f82c 	bl	800e984 <__mcmp>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	da6a      	bge.n	800da06 <_dtoa_r+0x92e>
 800d930:	2300      	movs	r3, #0
 800d932:	4651      	mov	r1, sl
 800d934:	220a      	movs	r2, #10
 800d936:	4628      	mov	r0, r5
 800d938:	f000 fdc2 	bl	800e4c0 <__multadd>
 800d93c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d93e:	4682      	mov	sl, r0
 800d940:	f109 39ff 	add.w	r9, r9, #4294967295
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 8193 	beq.w	800dc70 <_dtoa_r+0xb98>
 800d94a:	4631      	mov	r1, r6
 800d94c:	2300      	movs	r3, #0
 800d94e:	220a      	movs	r2, #10
 800d950:	4628      	mov	r0, r5
 800d952:	f000 fdb5 	bl	800e4c0 <__multadd>
 800d956:	f1bb 0f00 	cmp.w	fp, #0
 800d95a:	4606      	mov	r6, r0
 800d95c:	f300 8093 	bgt.w	800da86 <_dtoa_r+0x9ae>
 800d960:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d962:	2b02      	cmp	r3, #2
 800d964:	dc57      	bgt.n	800da16 <_dtoa_r+0x93e>
 800d966:	e08e      	b.n	800da86 <_dtoa_r+0x9ae>
 800d968:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d96a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d96e:	e756      	b.n	800d81e <_dtoa_r+0x746>
 800d970:	9b02      	ldr	r3, [sp, #8]
 800d972:	1e5c      	subs	r4, r3, #1
 800d974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d976:	42a3      	cmp	r3, r4
 800d978:	bfb7      	itett	lt
 800d97a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d97c:	1b1c      	subge	r4, r3, r4
 800d97e:	1ae2      	sublt	r2, r4, r3
 800d980:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d982:	bfbe      	ittt	lt
 800d984:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d986:	189b      	addlt	r3, r3, r2
 800d988:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d98a:	9b02      	ldr	r3, [sp, #8]
 800d98c:	bfb8      	it	lt
 800d98e:	2400      	movlt	r4, #0
 800d990:	2b00      	cmp	r3, #0
 800d992:	bfbb      	ittet	lt
 800d994:	9b06      	ldrlt	r3, [sp, #24]
 800d996:	9a02      	ldrlt	r2, [sp, #8]
 800d998:	9f06      	ldrge	r7, [sp, #24]
 800d99a:	1a9f      	sublt	r7, r3, r2
 800d99c:	bfac      	ite	ge
 800d99e:	9b02      	ldrge	r3, [sp, #8]
 800d9a0:	2300      	movlt	r3, #0
 800d9a2:	e73e      	b.n	800d822 <_dtoa_r+0x74a>
 800d9a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d9a6:	9f06      	ldr	r7, [sp, #24]
 800d9a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d9aa:	e745      	b.n	800d838 <_dtoa_r+0x760>
 800d9ac:	3fe00000 	.word	0x3fe00000
 800d9b0:	40240000 	.word	0x40240000
 800d9b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9b6:	e76a      	b.n	800d88e <_dtoa_r+0x7b6>
 800d9b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	dc19      	bgt.n	800d9f2 <_dtoa_r+0x91a>
 800d9be:	9b04      	ldr	r3, [sp, #16]
 800d9c0:	b9bb      	cbnz	r3, 800d9f2 <_dtoa_r+0x91a>
 800d9c2:	9b05      	ldr	r3, [sp, #20]
 800d9c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9c8:	b99b      	cbnz	r3, 800d9f2 <_dtoa_r+0x91a>
 800d9ca:	9b05      	ldr	r3, [sp, #20]
 800d9cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9d0:	0d1b      	lsrs	r3, r3, #20
 800d9d2:	051b      	lsls	r3, r3, #20
 800d9d4:	b183      	cbz	r3, 800d9f8 <_dtoa_r+0x920>
 800d9d6:	f04f 0801 	mov.w	r8, #1
 800d9da:	9b06      	ldr	r3, [sp, #24]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	9306      	str	r3, [sp, #24]
 800d9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f47f af6a 	bne.w	800d8c2 <_dtoa_r+0x7ea>
 800d9ee:	2001      	movs	r0, #1
 800d9f0:	e76f      	b.n	800d8d2 <_dtoa_r+0x7fa>
 800d9f2:	f04f 0800 	mov.w	r8, #0
 800d9f6:	e7f6      	b.n	800d9e6 <_dtoa_r+0x90e>
 800d9f8:	4698      	mov	r8, r3
 800d9fa:	e7f4      	b.n	800d9e6 <_dtoa_r+0x90e>
 800d9fc:	f43f af7d 	beq.w	800d8fa <_dtoa_r+0x822>
 800da00:	4618      	mov	r0, r3
 800da02:	301c      	adds	r0, #28
 800da04:	e772      	b.n	800d8ec <_dtoa_r+0x814>
 800da06:	9b02      	ldr	r3, [sp, #8]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	dc36      	bgt.n	800da7a <_dtoa_r+0x9a2>
 800da0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800da0e:	2b02      	cmp	r3, #2
 800da10:	dd33      	ble.n	800da7a <_dtoa_r+0x9a2>
 800da12:	f8dd b008 	ldr.w	fp, [sp, #8]
 800da16:	f1bb 0f00 	cmp.w	fp, #0
 800da1a:	d10d      	bne.n	800da38 <_dtoa_r+0x960>
 800da1c:	4621      	mov	r1, r4
 800da1e:	465b      	mov	r3, fp
 800da20:	2205      	movs	r2, #5
 800da22:	4628      	mov	r0, r5
 800da24:	f000 fd4c 	bl	800e4c0 <__multadd>
 800da28:	4601      	mov	r1, r0
 800da2a:	4604      	mov	r4, r0
 800da2c:	4650      	mov	r0, sl
 800da2e:	f000 ffa9 	bl	800e984 <__mcmp>
 800da32:	2800      	cmp	r0, #0
 800da34:	f73f adb6 	bgt.w	800d5a4 <_dtoa_r+0x4cc>
 800da38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800da3a:	9f08      	ldr	r7, [sp, #32]
 800da3c:	ea6f 0903 	mvn.w	r9, r3
 800da40:	f04f 0800 	mov.w	r8, #0
 800da44:	4621      	mov	r1, r4
 800da46:	4628      	mov	r0, r5
 800da48:	f000 fd18 	bl	800e47c <_Bfree>
 800da4c:	2e00      	cmp	r6, #0
 800da4e:	f43f aea4 	beq.w	800d79a <_dtoa_r+0x6c2>
 800da52:	f1b8 0f00 	cmp.w	r8, #0
 800da56:	d005      	beq.n	800da64 <_dtoa_r+0x98c>
 800da58:	45b0      	cmp	r8, r6
 800da5a:	d003      	beq.n	800da64 <_dtoa_r+0x98c>
 800da5c:	4641      	mov	r1, r8
 800da5e:	4628      	mov	r0, r5
 800da60:	f000 fd0c 	bl	800e47c <_Bfree>
 800da64:	4631      	mov	r1, r6
 800da66:	4628      	mov	r0, r5
 800da68:	f000 fd08 	bl	800e47c <_Bfree>
 800da6c:	e695      	b.n	800d79a <_dtoa_r+0x6c2>
 800da6e:	2400      	movs	r4, #0
 800da70:	4626      	mov	r6, r4
 800da72:	e7e1      	b.n	800da38 <_dtoa_r+0x960>
 800da74:	46c1      	mov	r9, r8
 800da76:	4626      	mov	r6, r4
 800da78:	e594      	b.n	800d5a4 <_dtoa_r+0x4cc>
 800da7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da7c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800da80:	2b00      	cmp	r3, #0
 800da82:	f000 80fc 	beq.w	800dc7e <_dtoa_r+0xba6>
 800da86:	2f00      	cmp	r7, #0
 800da88:	dd05      	ble.n	800da96 <_dtoa_r+0x9be>
 800da8a:	4631      	mov	r1, r6
 800da8c:	463a      	mov	r2, r7
 800da8e:	4628      	mov	r0, r5
 800da90:	f000 ff0c 	bl	800e8ac <__lshift>
 800da94:	4606      	mov	r6, r0
 800da96:	f1b8 0f00 	cmp.w	r8, #0
 800da9a:	d05c      	beq.n	800db56 <_dtoa_r+0xa7e>
 800da9c:	4628      	mov	r0, r5
 800da9e:	6871      	ldr	r1, [r6, #4]
 800daa0:	f000 fcac 	bl	800e3fc <_Balloc>
 800daa4:	4607      	mov	r7, r0
 800daa6:	b928      	cbnz	r0, 800dab4 <_dtoa_r+0x9dc>
 800daa8:	4602      	mov	r2, r0
 800daaa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800daae:	4b7e      	ldr	r3, [pc, #504]	; (800dca8 <_dtoa_r+0xbd0>)
 800dab0:	f7ff bb26 	b.w	800d100 <_dtoa_r+0x28>
 800dab4:	6932      	ldr	r2, [r6, #16]
 800dab6:	f106 010c 	add.w	r1, r6, #12
 800daba:	3202      	adds	r2, #2
 800dabc:	0092      	lsls	r2, r2, #2
 800dabe:	300c      	adds	r0, #12
 800dac0:	f000 fc82 	bl	800e3c8 <memcpy>
 800dac4:	2201      	movs	r2, #1
 800dac6:	4639      	mov	r1, r7
 800dac8:	4628      	mov	r0, r5
 800daca:	f000 feef 	bl	800e8ac <__lshift>
 800dace:	46b0      	mov	r8, r6
 800dad0:	4606      	mov	r6, r0
 800dad2:	9b08      	ldr	r3, [sp, #32]
 800dad4:	3301      	adds	r3, #1
 800dad6:	9302      	str	r3, [sp, #8]
 800dad8:	9b08      	ldr	r3, [sp, #32]
 800dada:	445b      	add	r3, fp
 800dadc:	930a      	str	r3, [sp, #40]	; 0x28
 800dade:	9b04      	ldr	r3, [sp, #16]
 800dae0:	f003 0301 	and.w	r3, r3, #1
 800dae4:	9309      	str	r3, [sp, #36]	; 0x24
 800dae6:	9b02      	ldr	r3, [sp, #8]
 800dae8:	4621      	mov	r1, r4
 800daea:	4650      	mov	r0, sl
 800daec:	f103 3bff 	add.w	fp, r3, #4294967295
 800daf0:	f7ff fa62 	bl	800cfb8 <quorem>
 800daf4:	4603      	mov	r3, r0
 800daf6:	4641      	mov	r1, r8
 800daf8:	3330      	adds	r3, #48	; 0x30
 800dafa:	9004      	str	r0, [sp, #16]
 800dafc:	4650      	mov	r0, sl
 800dafe:	930b      	str	r3, [sp, #44]	; 0x2c
 800db00:	f000 ff40 	bl	800e984 <__mcmp>
 800db04:	4632      	mov	r2, r6
 800db06:	9006      	str	r0, [sp, #24]
 800db08:	4621      	mov	r1, r4
 800db0a:	4628      	mov	r0, r5
 800db0c:	f000 ff56 	bl	800e9bc <__mdiff>
 800db10:	68c2      	ldr	r2, [r0, #12]
 800db12:	4607      	mov	r7, r0
 800db14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db16:	bb02      	cbnz	r2, 800db5a <_dtoa_r+0xa82>
 800db18:	4601      	mov	r1, r0
 800db1a:	4650      	mov	r0, sl
 800db1c:	f000 ff32 	bl	800e984 <__mcmp>
 800db20:	4602      	mov	r2, r0
 800db22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db24:	4639      	mov	r1, r7
 800db26:	4628      	mov	r0, r5
 800db28:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800db2c:	f000 fca6 	bl	800e47c <_Bfree>
 800db30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db34:	9f02      	ldr	r7, [sp, #8]
 800db36:	ea43 0102 	orr.w	r1, r3, r2
 800db3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db3c:	430b      	orrs	r3, r1
 800db3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db40:	d10d      	bne.n	800db5e <_dtoa_r+0xa86>
 800db42:	2b39      	cmp	r3, #57	; 0x39
 800db44:	d027      	beq.n	800db96 <_dtoa_r+0xabe>
 800db46:	9a06      	ldr	r2, [sp, #24]
 800db48:	2a00      	cmp	r2, #0
 800db4a:	dd01      	ble.n	800db50 <_dtoa_r+0xa78>
 800db4c:	9b04      	ldr	r3, [sp, #16]
 800db4e:	3331      	adds	r3, #49	; 0x31
 800db50:	f88b 3000 	strb.w	r3, [fp]
 800db54:	e776      	b.n	800da44 <_dtoa_r+0x96c>
 800db56:	4630      	mov	r0, r6
 800db58:	e7b9      	b.n	800dace <_dtoa_r+0x9f6>
 800db5a:	2201      	movs	r2, #1
 800db5c:	e7e2      	b.n	800db24 <_dtoa_r+0xa4c>
 800db5e:	9906      	ldr	r1, [sp, #24]
 800db60:	2900      	cmp	r1, #0
 800db62:	db04      	blt.n	800db6e <_dtoa_r+0xa96>
 800db64:	9822      	ldr	r0, [sp, #136]	; 0x88
 800db66:	4301      	orrs	r1, r0
 800db68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db6a:	4301      	orrs	r1, r0
 800db6c:	d120      	bne.n	800dbb0 <_dtoa_r+0xad8>
 800db6e:	2a00      	cmp	r2, #0
 800db70:	ddee      	ble.n	800db50 <_dtoa_r+0xa78>
 800db72:	4651      	mov	r1, sl
 800db74:	2201      	movs	r2, #1
 800db76:	4628      	mov	r0, r5
 800db78:	9302      	str	r3, [sp, #8]
 800db7a:	f000 fe97 	bl	800e8ac <__lshift>
 800db7e:	4621      	mov	r1, r4
 800db80:	4682      	mov	sl, r0
 800db82:	f000 feff 	bl	800e984 <__mcmp>
 800db86:	2800      	cmp	r0, #0
 800db88:	9b02      	ldr	r3, [sp, #8]
 800db8a:	dc02      	bgt.n	800db92 <_dtoa_r+0xaba>
 800db8c:	d1e0      	bne.n	800db50 <_dtoa_r+0xa78>
 800db8e:	07da      	lsls	r2, r3, #31
 800db90:	d5de      	bpl.n	800db50 <_dtoa_r+0xa78>
 800db92:	2b39      	cmp	r3, #57	; 0x39
 800db94:	d1da      	bne.n	800db4c <_dtoa_r+0xa74>
 800db96:	2339      	movs	r3, #57	; 0x39
 800db98:	f88b 3000 	strb.w	r3, [fp]
 800db9c:	463b      	mov	r3, r7
 800db9e:	461f      	mov	r7, r3
 800dba0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800dba4:	3b01      	subs	r3, #1
 800dba6:	2a39      	cmp	r2, #57	; 0x39
 800dba8:	d050      	beq.n	800dc4c <_dtoa_r+0xb74>
 800dbaa:	3201      	adds	r2, #1
 800dbac:	701a      	strb	r2, [r3, #0]
 800dbae:	e749      	b.n	800da44 <_dtoa_r+0x96c>
 800dbb0:	2a00      	cmp	r2, #0
 800dbb2:	dd03      	ble.n	800dbbc <_dtoa_r+0xae4>
 800dbb4:	2b39      	cmp	r3, #57	; 0x39
 800dbb6:	d0ee      	beq.n	800db96 <_dtoa_r+0xabe>
 800dbb8:	3301      	adds	r3, #1
 800dbba:	e7c9      	b.n	800db50 <_dtoa_r+0xa78>
 800dbbc:	9a02      	ldr	r2, [sp, #8]
 800dbbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dbc4:	428a      	cmp	r2, r1
 800dbc6:	d02a      	beq.n	800dc1e <_dtoa_r+0xb46>
 800dbc8:	4651      	mov	r1, sl
 800dbca:	2300      	movs	r3, #0
 800dbcc:	220a      	movs	r2, #10
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f000 fc76 	bl	800e4c0 <__multadd>
 800dbd4:	45b0      	cmp	r8, r6
 800dbd6:	4682      	mov	sl, r0
 800dbd8:	f04f 0300 	mov.w	r3, #0
 800dbdc:	f04f 020a 	mov.w	r2, #10
 800dbe0:	4641      	mov	r1, r8
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	d107      	bne.n	800dbf6 <_dtoa_r+0xb1e>
 800dbe6:	f000 fc6b 	bl	800e4c0 <__multadd>
 800dbea:	4680      	mov	r8, r0
 800dbec:	4606      	mov	r6, r0
 800dbee:	9b02      	ldr	r3, [sp, #8]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	9302      	str	r3, [sp, #8]
 800dbf4:	e777      	b.n	800dae6 <_dtoa_r+0xa0e>
 800dbf6:	f000 fc63 	bl	800e4c0 <__multadd>
 800dbfa:	4631      	mov	r1, r6
 800dbfc:	4680      	mov	r8, r0
 800dbfe:	2300      	movs	r3, #0
 800dc00:	220a      	movs	r2, #10
 800dc02:	4628      	mov	r0, r5
 800dc04:	f000 fc5c 	bl	800e4c0 <__multadd>
 800dc08:	4606      	mov	r6, r0
 800dc0a:	e7f0      	b.n	800dbee <_dtoa_r+0xb16>
 800dc0c:	f1bb 0f00 	cmp.w	fp, #0
 800dc10:	bfcc      	ite	gt
 800dc12:	465f      	movgt	r7, fp
 800dc14:	2701      	movle	r7, #1
 800dc16:	f04f 0800 	mov.w	r8, #0
 800dc1a:	9a08      	ldr	r2, [sp, #32]
 800dc1c:	4417      	add	r7, r2
 800dc1e:	4651      	mov	r1, sl
 800dc20:	2201      	movs	r2, #1
 800dc22:	4628      	mov	r0, r5
 800dc24:	9302      	str	r3, [sp, #8]
 800dc26:	f000 fe41 	bl	800e8ac <__lshift>
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	4682      	mov	sl, r0
 800dc2e:	f000 fea9 	bl	800e984 <__mcmp>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	dcb2      	bgt.n	800db9c <_dtoa_r+0xac4>
 800dc36:	d102      	bne.n	800dc3e <_dtoa_r+0xb66>
 800dc38:	9b02      	ldr	r3, [sp, #8]
 800dc3a:	07db      	lsls	r3, r3, #31
 800dc3c:	d4ae      	bmi.n	800db9c <_dtoa_r+0xac4>
 800dc3e:	463b      	mov	r3, r7
 800dc40:	461f      	mov	r7, r3
 800dc42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc46:	2a30      	cmp	r2, #48	; 0x30
 800dc48:	d0fa      	beq.n	800dc40 <_dtoa_r+0xb68>
 800dc4a:	e6fb      	b.n	800da44 <_dtoa_r+0x96c>
 800dc4c:	9a08      	ldr	r2, [sp, #32]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d1a5      	bne.n	800db9e <_dtoa_r+0xac6>
 800dc52:	2331      	movs	r3, #49	; 0x31
 800dc54:	f109 0901 	add.w	r9, r9, #1
 800dc58:	7013      	strb	r3, [r2, #0]
 800dc5a:	e6f3      	b.n	800da44 <_dtoa_r+0x96c>
 800dc5c:	4b13      	ldr	r3, [pc, #76]	; (800dcac <_dtoa_r+0xbd4>)
 800dc5e:	f7ff baa7 	b.w	800d1b0 <_dtoa_r+0xd8>
 800dc62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f47f aa80 	bne.w	800d16a <_dtoa_r+0x92>
 800dc6a:	4b11      	ldr	r3, [pc, #68]	; (800dcb0 <_dtoa_r+0xbd8>)
 800dc6c:	f7ff baa0 	b.w	800d1b0 <_dtoa_r+0xd8>
 800dc70:	f1bb 0f00 	cmp.w	fp, #0
 800dc74:	dc03      	bgt.n	800dc7e <_dtoa_r+0xba6>
 800dc76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	f73f aecc 	bgt.w	800da16 <_dtoa_r+0x93e>
 800dc7e:	9f08      	ldr	r7, [sp, #32]
 800dc80:	4621      	mov	r1, r4
 800dc82:	4650      	mov	r0, sl
 800dc84:	f7ff f998 	bl	800cfb8 <quorem>
 800dc88:	9a08      	ldr	r2, [sp, #32]
 800dc8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800dc8e:	f807 3b01 	strb.w	r3, [r7], #1
 800dc92:	1aba      	subs	r2, r7, r2
 800dc94:	4593      	cmp	fp, r2
 800dc96:	ddb9      	ble.n	800dc0c <_dtoa_r+0xb34>
 800dc98:	4651      	mov	r1, sl
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	220a      	movs	r2, #10
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f000 fc0e 	bl	800e4c0 <__multadd>
 800dca4:	4682      	mov	sl, r0
 800dca6:	e7eb      	b.n	800dc80 <_dtoa_r+0xba8>
 800dca8:	08010638 	.word	0x08010638
 800dcac:	08010510 	.word	0x08010510
 800dcb0:	080105b5 	.word	0x080105b5

0800dcb4 <rshift>:
 800dcb4:	6903      	ldr	r3, [r0, #16]
 800dcb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dcbe:	f100 0414 	add.w	r4, r0, #20
 800dcc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dcc6:	dd46      	ble.n	800dd56 <rshift+0xa2>
 800dcc8:	f011 011f 	ands.w	r1, r1, #31
 800dccc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dcd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dcd4:	d10c      	bne.n	800dcf0 <rshift+0x3c>
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	f100 0710 	add.w	r7, r0, #16
 800dcdc:	42b1      	cmp	r1, r6
 800dcde:	d335      	bcc.n	800dd4c <rshift+0x98>
 800dce0:	1a9b      	subs	r3, r3, r2
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	1eea      	subs	r2, r5, #3
 800dce6:	4296      	cmp	r6, r2
 800dce8:	bf38      	it	cc
 800dcea:	2300      	movcc	r3, #0
 800dcec:	4423      	add	r3, r4
 800dcee:	e015      	b.n	800dd1c <rshift+0x68>
 800dcf0:	46a1      	mov	r9, r4
 800dcf2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dcf6:	f1c1 0820 	rsb	r8, r1, #32
 800dcfa:	40cf      	lsrs	r7, r1
 800dcfc:	f105 0e04 	add.w	lr, r5, #4
 800dd00:	4576      	cmp	r6, lr
 800dd02:	46f4      	mov	ip, lr
 800dd04:	d816      	bhi.n	800dd34 <rshift+0x80>
 800dd06:	1a9b      	subs	r3, r3, r2
 800dd08:	009a      	lsls	r2, r3, #2
 800dd0a:	3a04      	subs	r2, #4
 800dd0c:	3501      	adds	r5, #1
 800dd0e:	42ae      	cmp	r6, r5
 800dd10:	bf38      	it	cc
 800dd12:	2200      	movcc	r2, #0
 800dd14:	18a3      	adds	r3, r4, r2
 800dd16:	50a7      	str	r7, [r4, r2]
 800dd18:	b107      	cbz	r7, 800dd1c <rshift+0x68>
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	42a3      	cmp	r3, r4
 800dd1e:	eba3 0204 	sub.w	r2, r3, r4
 800dd22:	bf08      	it	eq
 800dd24:	2300      	moveq	r3, #0
 800dd26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd2a:	6102      	str	r2, [r0, #16]
 800dd2c:	bf08      	it	eq
 800dd2e:	6143      	streq	r3, [r0, #20]
 800dd30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd34:	f8dc c000 	ldr.w	ip, [ip]
 800dd38:	fa0c fc08 	lsl.w	ip, ip, r8
 800dd3c:	ea4c 0707 	orr.w	r7, ip, r7
 800dd40:	f849 7b04 	str.w	r7, [r9], #4
 800dd44:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd48:	40cf      	lsrs	r7, r1
 800dd4a:	e7d9      	b.n	800dd00 <rshift+0x4c>
 800dd4c:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd50:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd54:	e7c2      	b.n	800dcdc <rshift+0x28>
 800dd56:	4623      	mov	r3, r4
 800dd58:	e7e0      	b.n	800dd1c <rshift+0x68>

0800dd5a <__hexdig_fun>:
 800dd5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dd5e:	2b09      	cmp	r3, #9
 800dd60:	d802      	bhi.n	800dd68 <__hexdig_fun+0xe>
 800dd62:	3820      	subs	r0, #32
 800dd64:	b2c0      	uxtb	r0, r0
 800dd66:	4770      	bx	lr
 800dd68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd6c:	2b05      	cmp	r3, #5
 800dd6e:	d801      	bhi.n	800dd74 <__hexdig_fun+0x1a>
 800dd70:	3847      	subs	r0, #71	; 0x47
 800dd72:	e7f7      	b.n	800dd64 <__hexdig_fun+0xa>
 800dd74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd78:	2b05      	cmp	r3, #5
 800dd7a:	d801      	bhi.n	800dd80 <__hexdig_fun+0x26>
 800dd7c:	3827      	subs	r0, #39	; 0x27
 800dd7e:	e7f1      	b.n	800dd64 <__hexdig_fun+0xa>
 800dd80:	2000      	movs	r0, #0
 800dd82:	4770      	bx	lr

0800dd84 <__gethex>:
 800dd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd88:	b08b      	sub	sp, #44	; 0x2c
 800dd8a:	9306      	str	r3, [sp, #24]
 800dd8c:	4bb9      	ldr	r3, [pc, #740]	; (800e074 <__gethex+0x2f0>)
 800dd8e:	9002      	str	r0, [sp, #8]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	468b      	mov	fp, r1
 800dd94:	4618      	mov	r0, r3
 800dd96:	4690      	mov	r8, r2
 800dd98:	9303      	str	r3, [sp, #12]
 800dd9a:	f7f2 fa45 	bl	8000228 <strlen>
 800dd9e:	4682      	mov	sl, r0
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	f8db 2000 	ldr.w	r2, [fp]
 800dda6:	4403      	add	r3, r0
 800dda8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ddac:	9307      	str	r3, [sp, #28]
 800ddae:	1c93      	adds	r3, r2, #2
 800ddb0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ddb4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ddb8:	32fe      	adds	r2, #254	; 0xfe
 800ddba:	18d1      	adds	r1, r2, r3
 800ddbc:	461f      	mov	r7, r3
 800ddbe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ddc2:	9101      	str	r1, [sp, #4]
 800ddc4:	2830      	cmp	r0, #48	; 0x30
 800ddc6:	d0f8      	beq.n	800ddba <__gethex+0x36>
 800ddc8:	f7ff ffc7 	bl	800dd5a <__hexdig_fun>
 800ddcc:	4604      	mov	r4, r0
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	d13a      	bne.n	800de48 <__gethex+0xc4>
 800ddd2:	4652      	mov	r2, sl
 800ddd4:	4638      	mov	r0, r7
 800ddd6:	9903      	ldr	r1, [sp, #12]
 800ddd8:	f001 f938 	bl	800f04c <strncmp>
 800dddc:	4605      	mov	r5, r0
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d166      	bne.n	800deb0 <__gethex+0x12c>
 800dde2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dde6:	eb07 060a 	add.w	r6, r7, sl
 800ddea:	f7ff ffb6 	bl	800dd5a <__hexdig_fun>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	d060      	beq.n	800deb4 <__gethex+0x130>
 800ddf2:	4633      	mov	r3, r6
 800ddf4:	7818      	ldrb	r0, [r3, #0]
 800ddf6:	461f      	mov	r7, r3
 800ddf8:	2830      	cmp	r0, #48	; 0x30
 800ddfa:	f103 0301 	add.w	r3, r3, #1
 800ddfe:	d0f9      	beq.n	800ddf4 <__gethex+0x70>
 800de00:	f7ff ffab 	bl	800dd5a <__hexdig_fun>
 800de04:	2301      	movs	r3, #1
 800de06:	fab0 f480 	clz	r4, r0
 800de0a:	4635      	mov	r5, r6
 800de0c:	0964      	lsrs	r4, r4, #5
 800de0e:	9301      	str	r3, [sp, #4]
 800de10:	463a      	mov	r2, r7
 800de12:	4616      	mov	r6, r2
 800de14:	7830      	ldrb	r0, [r6, #0]
 800de16:	3201      	adds	r2, #1
 800de18:	f7ff ff9f 	bl	800dd5a <__hexdig_fun>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d1f8      	bne.n	800de12 <__gethex+0x8e>
 800de20:	4652      	mov	r2, sl
 800de22:	4630      	mov	r0, r6
 800de24:	9903      	ldr	r1, [sp, #12]
 800de26:	f001 f911 	bl	800f04c <strncmp>
 800de2a:	b980      	cbnz	r0, 800de4e <__gethex+0xca>
 800de2c:	b94d      	cbnz	r5, 800de42 <__gethex+0xbe>
 800de2e:	eb06 050a 	add.w	r5, r6, sl
 800de32:	462a      	mov	r2, r5
 800de34:	4616      	mov	r6, r2
 800de36:	7830      	ldrb	r0, [r6, #0]
 800de38:	3201      	adds	r2, #1
 800de3a:	f7ff ff8e 	bl	800dd5a <__hexdig_fun>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d1f8      	bne.n	800de34 <__gethex+0xb0>
 800de42:	1bad      	subs	r5, r5, r6
 800de44:	00ad      	lsls	r5, r5, #2
 800de46:	e004      	b.n	800de52 <__gethex+0xce>
 800de48:	2400      	movs	r4, #0
 800de4a:	4625      	mov	r5, r4
 800de4c:	e7e0      	b.n	800de10 <__gethex+0x8c>
 800de4e:	2d00      	cmp	r5, #0
 800de50:	d1f7      	bne.n	800de42 <__gethex+0xbe>
 800de52:	7833      	ldrb	r3, [r6, #0]
 800de54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de58:	2b50      	cmp	r3, #80	; 0x50
 800de5a:	d139      	bne.n	800ded0 <__gethex+0x14c>
 800de5c:	7873      	ldrb	r3, [r6, #1]
 800de5e:	2b2b      	cmp	r3, #43	; 0x2b
 800de60:	d02a      	beq.n	800deb8 <__gethex+0x134>
 800de62:	2b2d      	cmp	r3, #45	; 0x2d
 800de64:	d02c      	beq.n	800dec0 <__gethex+0x13c>
 800de66:	f04f 0900 	mov.w	r9, #0
 800de6a:	1c71      	adds	r1, r6, #1
 800de6c:	7808      	ldrb	r0, [r1, #0]
 800de6e:	f7ff ff74 	bl	800dd5a <__hexdig_fun>
 800de72:	1e43      	subs	r3, r0, #1
 800de74:	b2db      	uxtb	r3, r3
 800de76:	2b18      	cmp	r3, #24
 800de78:	d82a      	bhi.n	800ded0 <__gethex+0x14c>
 800de7a:	f1a0 0210 	sub.w	r2, r0, #16
 800de7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de82:	f7ff ff6a 	bl	800dd5a <__hexdig_fun>
 800de86:	1e43      	subs	r3, r0, #1
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b18      	cmp	r3, #24
 800de8c:	d91b      	bls.n	800dec6 <__gethex+0x142>
 800de8e:	f1b9 0f00 	cmp.w	r9, #0
 800de92:	d000      	beq.n	800de96 <__gethex+0x112>
 800de94:	4252      	negs	r2, r2
 800de96:	4415      	add	r5, r2
 800de98:	f8cb 1000 	str.w	r1, [fp]
 800de9c:	b1d4      	cbz	r4, 800ded4 <__gethex+0x150>
 800de9e:	9b01      	ldr	r3, [sp, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bf14      	ite	ne
 800dea4:	2700      	movne	r7, #0
 800dea6:	2706      	moveq	r7, #6
 800dea8:	4638      	mov	r0, r7
 800deaa:	b00b      	add	sp, #44	; 0x2c
 800deac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb0:	463e      	mov	r6, r7
 800deb2:	4625      	mov	r5, r4
 800deb4:	2401      	movs	r4, #1
 800deb6:	e7cc      	b.n	800de52 <__gethex+0xce>
 800deb8:	f04f 0900 	mov.w	r9, #0
 800debc:	1cb1      	adds	r1, r6, #2
 800debe:	e7d5      	b.n	800de6c <__gethex+0xe8>
 800dec0:	f04f 0901 	mov.w	r9, #1
 800dec4:	e7fa      	b.n	800debc <__gethex+0x138>
 800dec6:	230a      	movs	r3, #10
 800dec8:	fb03 0202 	mla	r2, r3, r2, r0
 800decc:	3a10      	subs	r2, #16
 800dece:	e7d6      	b.n	800de7e <__gethex+0xfa>
 800ded0:	4631      	mov	r1, r6
 800ded2:	e7e1      	b.n	800de98 <__gethex+0x114>
 800ded4:	4621      	mov	r1, r4
 800ded6:	1bf3      	subs	r3, r6, r7
 800ded8:	3b01      	subs	r3, #1
 800deda:	2b07      	cmp	r3, #7
 800dedc:	dc0a      	bgt.n	800def4 <__gethex+0x170>
 800dede:	9802      	ldr	r0, [sp, #8]
 800dee0:	f000 fa8c 	bl	800e3fc <_Balloc>
 800dee4:	4604      	mov	r4, r0
 800dee6:	b940      	cbnz	r0, 800defa <__gethex+0x176>
 800dee8:	4602      	mov	r2, r0
 800deea:	21de      	movs	r1, #222	; 0xde
 800deec:	4b62      	ldr	r3, [pc, #392]	; (800e078 <__gethex+0x2f4>)
 800deee:	4863      	ldr	r0, [pc, #396]	; (800e07c <__gethex+0x2f8>)
 800def0:	f001 f8cc 	bl	800f08c <__assert_func>
 800def4:	3101      	adds	r1, #1
 800def6:	105b      	asrs	r3, r3, #1
 800def8:	e7ef      	b.n	800deda <__gethex+0x156>
 800defa:	f04f 0b00 	mov.w	fp, #0
 800defe:	f100 0914 	add.w	r9, r0, #20
 800df02:	f1ca 0301 	rsb	r3, sl, #1
 800df06:	f8cd 9010 	str.w	r9, [sp, #16]
 800df0a:	f8cd b004 	str.w	fp, [sp, #4]
 800df0e:	9308      	str	r3, [sp, #32]
 800df10:	42b7      	cmp	r7, r6
 800df12:	d33f      	bcc.n	800df94 <__gethex+0x210>
 800df14:	9f04      	ldr	r7, [sp, #16]
 800df16:	9b01      	ldr	r3, [sp, #4]
 800df18:	f847 3b04 	str.w	r3, [r7], #4
 800df1c:	eba7 0709 	sub.w	r7, r7, r9
 800df20:	10bf      	asrs	r7, r7, #2
 800df22:	6127      	str	r7, [r4, #16]
 800df24:	4618      	mov	r0, r3
 800df26:	f000 fb5f 	bl	800e5e8 <__hi0bits>
 800df2a:	017f      	lsls	r7, r7, #5
 800df2c:	f8d8 6000 	ldr.w	r6, [r8]
 800df30:	1a3f      	subs	r7, r7, r0
 800df32:	42b7      	cmp	r7, r6
 800df34:	dd62      	ble.n	800dffc <__gethex+0x278>
 800df36:	1bbf      	subs	r7, r7, r6
 800df38:	4639      	mov	r1, r7
 800df3a:	4620      	mov	r0, r4
 800df3c:	f000 fef5 	bl	800ed2a <__any_on>
 800df40:	4682      	mov	sl, r0
 800df42:	b1a8      	cbz	r0, 800df70 <__gethex+0x1ec>
 800df44:	f04f 0a01 	mov.w	sl, #1
 800df48:	1e7b      	subs	r3, r7, #1
 800df4a:	1159      	asrs	r1, r3, #5
 800df4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df50:	f003 021f 	and.w	r2, r3, #31
 800df54:	fa0a f202 	lsl.w	r2, sl, r2
 800df58:	420a      	tst	r2, r1
 800df5a:	d009      	beq.n	800df70 <__gethex+0x1ec>
 800df5c:	4553      	cmp	r3, sl
 800df5e:	dd05      	ble.n	800df6c <__gethex+0x1e8>
 800df60:	4620      	mov	r0, r4
 800df62:	1eb9      	subs	r1, r7, #2
 800df64:	f000 fee1 	bl	800ed2a <__any_on>
 800df68:	2800      	cmp	r0, #0
 800df6a:	d144      	bne.n	800dff6 <__gethex+0x272>
 800df6c:	f04f 0a02 	mov.w	sl, #2
 800df70:	4639      	mov	r1, r7
 800df72:	4620      	mov	r0, r4
 800df74:	f7ff fe9e 	bl	800dcb4 <rshift>
 800df78:	443d      	add	r5, r7
 800df7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df7e:	42ab      	cmp	r3, r5
 800df80:	da4a      	bge.n	800e018 <__gethex+0x294>
 800df82:	4621      	mov	r1, r4
 800df84:	9802      	ldr	r0, [sp, #8]
 800df86:	f000 fa79 	bl	800e47c <_Bfree>
 800df8a:	2300      	movs	r3, #0
 800df8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df8e:	27a3      	movs	r7, #163	; 0xa3
 800df90:	6013      	str	r3, [r2, #0]
 800df92:	e789      	b.n	800dea8 <__gethex+0x124>
 800df94:	1e73      	subs	r3, r6, #1
 800df96:	9a07      	ldr	r2, [sp, #28]
 800df98:	9305      	str	r3, [sp, #20]
 800df9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d019      	beq.n	800dfd6 <__gethex+0x252>
 800dfa2:	f1bb 0f20 	cmp.w	fp, #32
 800dfa6:	d107      	bne.n	800dfb8 <__gethex+0x234>
 800dfa8:	9b04      	ldr	r3, [sp, #16]
 800dfaa:	9a01      	ldr	r2, [sp, #4]
 800dfac:	f843 2b04 	str.w	r2, [r3], #4
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	469b      	mov	fp, r3
 800dfb6:	9301      	str	r3, [sp, #4]
 800dfb8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dfbc:	f7ff fecd 	bl	800dd5a <__hexdig_fun>
 800dfc0:	9b01      	ldr	r3, [sp, #4]
 800dfc2:	f000 000f 	and.w	r0, r0, #15
 800dfc6:	fa00 f00b 	lsl.w	r0, r0, fp
 800dfca:	4303      	orrs	r3, r0
 800dfcc:	9301      	str	r3, [sp, #4]
 800dfce:	f10b 0b04 	add.w	fp, fp, #4
 800dfd2:	9b05      	ldr	r3, [sp, #20]
 800dfd4:	e00d      	b.n	800dff2 <__gethex+0x26e>
 800dfd6:	9b05      	ldr	r3, [sp, #20]
 800dfd8:	9a08      	ldr	r2, [sp, #32]
 800dfda:	4413      	add	r3, r2
 800dfdc:	42bb      	cmp	r3, r7
 800dfde:	d3e0      	bcc.n	800dfa2 <__gethex+0x21e>
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	4652      	mov	r2, sl
 800dfe4:	9903      	ldr	r1, [sp, #12]
 800dfe6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfe8:	f001 f830 	bl	800f04c <strncmp>
 800dfec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfee:	2800      	cmp	r0, #0
 800dff0:	d1d7      	bne.n	800dfa2 <__gethex+0x21e>
 800dff2:	461e      	mov	r6, r3
 800dff4:	e78c      	b.n	800df10 <__gethex+0x18c>
 800dff6:	f04f 0a03 	mov.w	sl, #3
 800dffa:	e7b9      	b.n	800df70 <__gethex+0x1ec>
 800dffc:	da09      	bge.n	800e012 <__gethex+0x28e>
 800dffe:	1bf7      	subs	r7, r6, r7
 800e000:	4621      	mov	r1, r4
 800e002:	463a      	mov	r2, r7
 800e004:	9802      	ldr	r0, [sp, #8]
 800e006:	f000 fc51 	bl	800e8ac <__lshift>
 800e00a:	4604      	mov	r4, r0
 800e00c:	1bed      	subs	r5, r5, r7
 800e00e:	f100 0914 	add.w	r9, r0, #20
 800e012:	f04f 0a00 	mov.w	sl, #0
 800e016:	e7b0      	b.n	800df7a <__gethex+0x1f6>
 800e018:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e01c:	42a8      	cmp	r0, r5
 800e01e:	dd71      	ble.n	800e104 <__gethex+0x380>
 800e020:	1b45      	subs	r5, r0, r5
 800e022:	42ae      	cmp	r6, r5
 800e024:	dc34      	bgt.n	800e090 <__gethex+0x30c>
 800e026:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d028      	beq.n	800e080 <__gethex+0x2fc>
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d02a      	beq.n	800e088 <__gethex+0x304>
 800e032:	2b01      	cmp	r3, #1
 800e034:	d115      	bne.n	800e062 <__gethex+0x2de>
 800e036:	42ae      	cmp	r6, r5
 800e038:	d113      	bne.n	800e062 <__gethex+0x2de>
 800e03a:	2e01      	cmp	r6, #1
 800e03c:	d10b      	bne.n	800e056 <__gethex+0x2d2>
 800e03e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e042:	9a06      	ldr	r2, [sp, #24]
 800e044:	2762      	movs	r7, #98	; 0x62
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	2301      	movs	r3, #1
 800e04a:	6123      	str	r3, [r4, #16]
 800e04c:	f8c9 3000 	str.w	r3, [r9]
 800e050:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e052:	601c      	str	r4, [r3, #0]
 800e054:	e728      	b.n	800dea8 <__gethex+0x124>
 800e056:	4620      	mov	r0, r4
 800e058:	1e71      	subs	r1, r6, #1
 800e05a:	f000 fe66 	bl	800ed2a <__any_on>
 800e05e:	2800      	cmp	r0, #0
 800e060:	d1ed      	bne.n	800e03e <__gethex+0x2ba>
 800e062:	4621      	mov	r1, r4
 800e064:	9802      	ldr	r0, [sp, #8]
 800e066:	f000 fa09 	bl	800e47c <_Bfree>
 800e06a:	2300      	movs	r3, #0
 800e06c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e06e:	2750      	movs	r7, #80	; 0x50
 800e070:	6013      	str	r3, [r2, #0]
 800e072:	e719      	b.n	800dea8 <__gethex+0x124>
 800e074:	080106b4 	.word	0x080106b4
 800e078:	08010638 	.word	0x08010638
 800e07c:	08010649 	.word	0x08010649
 800e080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1ed      	bne.n	800e062 <__gethex+0x2de>
 800e086:	e7da      	b.n	800e03e <__gethex+0x2ba>
 800e088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1d7      	bne.n	800e03e <__gethex+0x2ba>
 800e08e:	e7e8      	b.n	800e062 <__gethex+0x2de>
 800e090:	1e6f      	subs	r7, r5, #1
 800e092:	f1ba 0f00 	cmp.w	sl, #0
 800e096:	d132      	bne.n	800e0fe <__gethex+0x37a>
 800e098:	b127      	cbz	r7, 800e0a4 <__gethex+0x320>
 800e09a:	4639      	mov	r1, r7
 800e09c:	4620      	mov	r0, r4
 800e09e:	f000 fe44 	bl	800ed2a <__any_on>
 800e0a2:	4682      	mov	sl, r0
 800e0a4:	2101      	movs	r1, #1
 800e0a6:	117b      	asrs	r3, r7, #5
 800e0a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e0ac:	f007 071f 	and.w	r7, r7, #31
 800e0b0:	fa01 f707 	lsl.w	r7, r1, r7
 800e0b4:	421f      	tst	r7, r3
 800e0b6:	f04f 0702 	mov.w	r7, #2
 800e0ba:	4629      	mov	r1, r5
 800e0bc:	4620      	mov	r0, r4
 800e0be:	bf18      	it	ne
 800e0c0:	f04a 0a02 	orrne.w	sl, sl, #2
 800e0c4:	1b76      	subs	r6, r6, r5
 800e0c6:	f7ff fdf5 	bl	800dcb4 <rshift>
 800e0ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0ce:	f1ba 0f00 	cmp.w	sl, #0
 800e0d2:	d048      	beq.n	800e166 <__gethex+0x3e2>
 800e0d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d015      	beq.n	800e108 <__gethex+0x384>
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d017      	beq.n	800e110 <__gethex+0x38c>
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d109      	bne.n	800e0f8 <__gethex+0x374>
 800e0e4:	f01a 0f02 	tst.w	sl, #2
 800e0e8:	d006      	beq.n	800e0f8 <__gethex+0x374>
 800e0ea:	f8d9 0000 	ldr.w	r0, [r9]
 800e0ee:	ea4a 0a00 	orr.w	sl, sl, r0
 800e0f2:	f01a 0f01 	tst.w	sl, #1
 800e0f6:	d10e      	bne.n	800e116 <__gethex+0x392>
 800e0f8:	f047 0710 	orr.w	r7, r7, #16
 800e0fc:	e033      	b.n	800e166 <__gethex+0x3e2>
 800e0fe:	f04f 0a01 	mov.w	sl, #1
 800e102:	e7cf      	b.n	800e0a4 <__gethex+0x320>
 800e104:	2701      	movs	r7, #1
 800e106:	e7e2      	b.n	800e0ce <__gethex+0x34a>
 800e108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e10a:	f1c3 0301 	rsb	r3, r3, #1
 800e10e:	9315      	str	r3, [sp, #84]	; 0x54
 800e110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e112:	2b00      	cmp	r3, #0
 800e114:	d0f0      	beq.n	800e0f8 <__gethex+0x374>
 800e116:	f04f 0c00 	mov.w	ip, #0
 800e11a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e11e:	f104 0314 	add.w	r3, r4, #20
 800e122:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e126:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e12a:	4618      	mov	r0, r3
 800e12c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e130:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e134:	d01c      	beq.n	800e170 <__gethex+0x3ec>
 800e136:	3201      	adds	r2, #1
 800e138:	6002      	str	r2, [r0, #0]
 800e13a:	2f02      	cmp	r7, #2
 800e13c:	f104 0314 	add.w	r3, r4, #20
 800e140:	d13d      	bne.n	800e1be <__gethex+0x43a>
 800e142:	f8d8 2000 	ldr.w	r2, [r8]
 800e146:	3a01      	subs	r2, #1
 800e148:	42b2      	cmp	r2, r6
 800e14a:	d10a      	bne.n	800e162 <__gethex+0x3de>
 800e14c:	2201      	movs	r2, #1
 800e14e:	1171      	asrs	r1, r6, #5
 800e150:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e154:	f006 061f 	and.w	r6, r6, #31
 800e158:	fa02 f606 	lsl.w	r6, r2, r6
 800e15c:	421e      	tst	r6, r3
 800e15e:	bf18      	it	ne
 800e160:	4617      	movne	r7, r2
 800e162:	f047 0720 	orr.w	r7, r7, #32
 800e166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e168:	601c      	str	r4, [r3, #0]
 800e16a:	9b06      	ldr	r3, [sp, #24]
 800e16c:	601d      	str	r5, [r3, #0]
 800e16e:	e69b      	b.n	800dea8 <__gethex+0x124>
 800e170:	4299      	cmp	r1, r3
 800e172:	f843 cc04 	str.w	ip, [r3, #-4]
 800e176:	d8d8      	bhi.n	800e12a <__gethex+0x3a6>
 800e178:	68a3      	ldr	r3, [r4, #8]
 800e17a:	459b      	cmp	fp, r3
 800e17c:	db17      	blt.n	800e1ae <__gethex+0x42a>
 800e17e:	6861      	ldr	r1, [r4, #4]
 800e180:	9802      	ldr	r0, [sp, #8]
 800e182:	3101      	adds	r1, #1
 800e184:	f000 f93a 	bl	800e3fc <_Balloc>
 800e188:	4681      	mov	r9, r0
 800e18a:	b918      	cbnz	r0, 800e194 <__gethex+0x410>
 800e18c:	4602      	mov	r2, r0
 800e18e:	2184      	movs	r1, #132	; 0x84
 800e190:	4b19      	ldr	r3, [pc, #100]	; (800e1f8 <__gethex+0x474>)
 800e192:	e6ac      	b.n	800deee <__gethex+0x16a>
 800e194:	6922      	ldr	r2, [r4, #16]
 800e196:	f104 010c 	add.w	r1, r4, #12
 800e19a:	3202      	adds	r2, #2
 800e19c:	0092      	lsls	r2, r2, #2
 800e19e:	300c      	adds	r0, #12
 800e1a0:	f000 f912 	bl	800e3c8 <memcpy>
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	9802      	ldr	r0, [sp, #8]
 800e1a8:	f000 f968 	bl	800e47c <_Bfree>
 800e1ac:	464c      	mov	r4, r9
 800e1ae:	6923      	ldr	r3, [r4, #16]
 800e1b0:	1c5a      	adds	r2, r3, #1
 800e1b2:	6122      	str	r2, [r4, #16]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1ba:	615a      	str	r2, [r3, #20]
 800e1bc:	e7bd      	b.n	800e13a <__gethex+0x3b6>
 800e1be:	6922      	ldr	r2, [r4, #16]
 800e1c0:	455a      	cmp	r2, fp
 800e1c2:	dd0b      	ble.n	800e1dc <__gethex+0x458>
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f7ff fd74 	bl	800dcb4 <rshift>
 800e1cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1d0:	3501      	adds	r5, #1
 800e1d2:	42ab      	cmp	r3, r5
 800e1d4:	f6ff aed5 	blt.w	800df82 <__gethex+0x1fe>
 800e1d8:	2701      	movs	r7, #1
 800e1da:	e7c2      	b.n	800e162 <__gethex+0x3de>
 800e1dc:	f016 061f 	ands.w	r6, r6, #31
 800e1e0:	d0fa      	beq.n	800e1d8 <__gethex+0x454>
 800e1e2:	449a      	add	sl, r3
 800e1e4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e1e8:	f000 f9fe 	bl	800e5e8 <__hi0bits>
 800e1ec:	f1c6 0620 	rsb	r6, r6, #32
 800e1f0:	42b0      	cmp	r0, r6
 800e1f2:	dbe7      	blt.n	800e1c4 <__gethex+0x440>
 800e1f4:	e7f0      	b.n	800e1d8 <__gethex+0x454>
 800e1f6:	bf00      	nop
 800e1f8:	08010638 	.word	0x08010638

0800e1fc <L_shift>:
 800e1fc:	f1c2 0208 	rsb	r2, r2, #8
 800e200:	0092      	lsls	r2, r2, #2
 800e202:	b570      	push	{r4, r5, r6, lr}
 800e204:	f1c2 0620 	rsb	r6, r2, #32
 800e208:	6843      	ldr	r3, [r0, #4]
 800e20a:	6804      	ldr	r4, [r0, #0]
 800e20c:	fa03 f506 	lsl.w	r5, r3, r6
 800e210:	432c      	orrs	r4, r5
 800e212:	40d3      	lsrs	r3, r2
 800e214:	6004      	str	r4, [r0, #0]
 800e216:	f840 3f04 	str.w	r3, [r0, #4]!
 800e21a:	4288      	cmp	r0, r1
 800e21c:	d3f4      	bcc.n	800e208 <L_shift+0xc>
 800e21e:	bd70      	pop	{r4, r5, r6, pc}

0800e220 <__match>:
 800e220:	b530      	push	{r4, r5, lr}
 800e222:	6803      	ldr	r3, [r0, #0]
 800e224:	3301      	adds	r3, #1
 800e226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e22a:	b914      	cbnz	r4, 800e232 <__match+0x12>
 800e22c:	6003      	str	r3, [r0, #0]
 800e22e:	2001      	movs	r0, #1
 800e230:	bd30      	pop	{r4, r5, pc}
 800e232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e236:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e23a:	2d19      	cmp	r5, #25
 800e23c:	bf98      	it	ls
 800e23e:	3220      	addls	r2, #32
 800e240:	42a2      	cmp	r2, r4
 800e242:	d0f0      	beq.n	800e226 <__match+0x6>
 800e244:	2000      	movs	r0, #0
 800e246:	e7f3      	b.n	800e230 <__match+0x10>

0800e248 <__hexnan>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	2500      	movs	r5, #0
 800e24e:	680b      	ldr	r3, [r1, #0]
 800e250:	4682      	mov	sl, r0
 800e252:	115e      	asrs	r6, r3, #5
 800e254:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e258:	f013 031f 	ands.w	r3, r3, #31
 800e25c:	bf18      	it	ne
 800e25e:	3604      	addne	r6, #4
 800e260:	1f37      	subs	r7, r6, #4
 800e262:	4690      	mov	r8, r2
 800e264:	46b9      	mov	r9, r7
 800e266:	463c      	mov	r4, r7
 800e268:	46ab      	mov	fp, r5
 800e26a:	b087      	sub	sp, #28
 800e26c:	6801      	ldr	r1, [r0, #0]
 800e26e:	9301      	str	r3, [sp, #4]
 800e270:	f846 5c04 	str.w	r5, [r6, #-4]
 800e274:	9502      	str	r5, [sp, #8]
 800e276:	784a      	ldrb	r2, [r1, #1]
 800e278:	1c4b      	adds	r3, r1, #1
 800e27a:	9303      	str	r3, [sp, #12]
 800e27c:	b342      	cbz	r2, 800e2d0 <__hexnan+0x88>
 800e27e:	4610      	mov	r0, r2
 800e280:	9105      	str	r1, [sp, #20]
 800e282:	9204      	str	r2, [sp, #16]
 800e284:	f7ff fd69 	bl	800dd5a <__hexdig_fun>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d14f      	bne.n	800e32c <__hexnan+0xe4>
 800e28c:	9a04      	ldr	r2, [sp, #16]
 800e28e:	9905      	ldr	r1, [sp, #20]
 800e290:	2a20      	cmp	r2, #32
 800e292:	d818      	bhi.n	800e2c6 <__hexnan+0x7e>
 800e294:	9b02      	ldr	r3, [sp, #8]
 800e296:	459b      	cmp	fp, r3
 800e298:	dd13      	ble.n	800e2c2 <__hexnan+0x7a>
 800e29a:	454c      	cmp	r4, r9
 800e29c:	d206      	bcs.n	800e2ac <__hexnan+0x64>
 800e29e:	2d07      	cmp	r5, #7
 800e2a0:	dc04      	bgt.n	800e2ac <__hexnan+0x64>
 800e2a2:	462a      	mov	r2, r5
 800e2a4:	4649      	mov	r1, r9
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f7ff ffa8 	bl	800e1fc <L_shift>
 800e2ac:	4544      	cmp	r4, r8
 800e2ae:	d950      	bls.n	800e352 <__hexnan+0x10a>
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f1a4 0904 	sub.w	r9, r4, #4
 800e2b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2ba:	461d      	mov	r5, r3
 800e2bc:	464c      	mov	r4, r9
 800e2be:	f8cd b008 	str.w	fp, [sp, #8]
 800e2c2:	9903      	ldr	r1, [sp, #12]
 800e2c4:	e7d7      	b.n	800e276 <__hexnan+0x2e>
 800e2c6:	2a29      	cmp	r2, #41	; 0x29
 800e2c8:	d156      	bne.n	800e378 <__hexnan+0x130>
 800e2ca:	3102      	adds	r1, #2
 800e2cc:	f8ca 1000 	str.w	r1, [sl]
 800e2d0:	f1bb 0f00 	cmp.w	fp, #0
 800e2d4:	d050      	beq.n	800e378 <__hexnan+0x130>
 800e2d6:	454c      	cmp	r4, r9
 800e2d8:	d206      	bcs.n	800e2e8 <__hexnan+0xa0>
 800e2da:	2d07      	cmp	r5, #7
 800e2dc:	dc04      	bgt.n	800e2e8 <__hexnan+0xa0>
 800e2de:	462a      	mov	r2, r5
 800e2e0:	4649      	mov	r1, r9
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f7ff ff8a 	bl	800e1fc <L_shift>
 800e2e8:	4544      	cmp	r4, r8
 800e2ea:	d934      	bls.n	800e356 <__hexnan+0x10e>
 800e2ec:	4623      	mov	r3, r4
 800e2ee:	f1a8 0204 	sub.w	r2, r8, #4
 800e2f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2f6:	429f      	cmp	r7, r3
 800e2f8:	f842 1f04 	str.w	r1, [r2, #4]!
 800e2fc:	d2f9      	bcs.n	800e2f2 <__hexnan+0xaa>
 800e2fe:	1b3b      	subs	r3, r7, r4
 800e300:	f023 0303 	bic.w	r3, r3, #3
 800e304:	3304      	adds	r3, #4
 800e306:	3401      	adds	r4, #1
 800e308:	3e03      	subs	r6, #3
 800e30a:	42b4      	cmp	r4, r6
 800e30c:	bf88      	it	hi
 800e30e:	2304      	movhi	r3, #4
 800e310:	2200      	movs	r2, #0
 800e312:	4443      	add	r3, r8
 800e314:	f843 2b04 	str.w	r2, [r3], #4
 800e318:	429f      	cmp	r7, r3
 800e31a:	d2fb      	bcs.n	800e314 <__hexnan+0xcc>
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	b91b      	cbnz	r3, 800e328 <__hexnan+0xe0>
 800e320:	4547      	cmp	r7, r8
 800e322:	d127      	bne.n	800e374 <__hexnan+0x12c>
 800e324:	2301      	movs	r3, #1
 800e326:	603b      	str	r3, [r7, #0]
 800e328:	2005      	movs	r0, #5
 800e32a:	e026      	b.n	800e37a <__hexnan+0x132>
 800e32c:	3501      	adds	r5, #1
 800e32e:	2d08      	cmp	r5, #8
 800e330:	f10b 0b01 	add.w	fp, fp, #1
 800e334:	dd06      	ble.n	800e344 <__hexnan+0xfc>
 800e336:	4544      	cmp	r4, r8
 800e338:	d9c3      	bls.n	800e2c2 <__hexnan+0x7a>
 800e33a:	2300      	movs	r3, #0
 800e33c:	2501      	movs	r5, #1
 800e33e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e342:	3c04      	subs	r4, #4
 800e344:	6822      	ldr	r2, [r4, #0]
 800e346:	f000 000f 	and.w	r0, r0, #15
 800e34a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e34e:	6022      	str	r2, [r4, #0]
 800e350:	e7b7      	b.n	800e2c2 <__hexnan+0x7a>
 800e352:	2508      	movs	r5, #8
 800e354:	e7b5      	b.n	800e2c2 <__hexnan+0x7a>
 800e356:	9b01      	ldr	r3, [sp, #4]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d0df      	beq.n	800e31c <__hexnan+0xd4>
 800e35c:	f04f 32ff 	mov.w	r2, #4294967295
 800e360:	f1c3 0320 	rsb	r3, r3, #32
 800e364:	fa22 f303 	lsr.w	r3, r2, r3
 800e368:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e36c:	401a      	ands	r2, r3
 800e36e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e372:	e7d3      	b.n	800e31c <__hexnan+0xd4>
 800e374:	3f04      	subs	r7, #4
 800e376:	e7d1      	b.n	800e31c <__hexnan+0xd4>
 800e378:	2004      	movs	r0, #4
 800e37a:	b007      	add	sp, #28
 800e37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e380 <_localeconv_r>:
 800e380:	4800      	ldr	r0, [pc, #0]	; (800e384 <_localeconv_r+0x4>)
 800e382:	4770      	bx	lr
 800e384:	200001a0 	.word	0x200001a0

0800e388 <__ascii_mbtowc>:
 800e388:	b082      	sub	sp, #8
 800e38a:	b901      	cbnz	r1, 800e38e <__ascii_mbtowc+0x6>
 800e38c:	a901      	add	r1, sp, #4
 800e38e:	b142      	cbz	r2, 800e3a2 <__ascii_mbtowc+0x1a>
 800e390:	b14b      	cbz	r3, 800e3a6 <__ascii_mbtowc+0x1e>
 800e392:	7813      	ldrb	r3, [r2, #0]
 800e394:	600b      	str	r3, [r1, #0]
 800e396:	7812      	ldrb	r2, [r2, #0]
 800e398:	1e10      	subs	r0, r2, #0
 800e39a:	bf18      	it	ne
 800e39c:	2001      	movne	r0, #1
 800e39e:	b002      	add	sp, #8
 800e3a0:	4770      	bx	lr
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	e7fb      	b.n	800e39e <__ascii_mbtowc+0x16>
 800e3a6:	f06f 0001 	mvn.w	r0, #1
 800e3aa:	e7f8      	b.n	800e39e <__ascii_mbtowc+0x16>

0800e3ac <memchr>:
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	b510      	push	{r4, lr}
 800e3b0:	b2c9      	uxtb	r1, r1
 800e3b2:	4402      	add	r2, r0
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	d101      	bne.n	800e3be <memchr+0x12>
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	e003      	b.n	800e3c6 <memchr+0x1a>
 800e3be:	7804      	ldrb	r4, [r0, #0]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	428c      	cmp	r4, r1
 800e3c4:	d1f6      	bne.n	800e3b4 <memchr+0x8>
 800e3c6:	bd10      	pop	{r4, pc}

0800e3c8 <memcpy>:
 800e3c8:	440a      	add	r2, r1
 800e3ca:	4291      	cmp	r1, r2
 800e3cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3d0:	d100      	bne.n	800e3d4 <memcpy+0xc>
 800e3d2:	4770      	bx	lr
 800e3d4:	b510      	push	{r4, lr}
 800e3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3da:	4291      	cmp	r1, r2
 800e3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3e0:	d1f9      	bne.n	800e3d6 <memcpy+0xe>
 800e3e2:	bd10      	pop	{r4, pc}

0800e3e4 <__malloc_lock>:
 800e3e4:	4801      	ldr	r0, [pc, #4]	; (800e3ec <__malloc_lock+0x8>)
 800e3e6:	f000 be82 	b.w	800f0ee <__retarget_lock_acquire_recursive>
 800e3ea:	bf00      	nop
 800e3ec:	200008ec 	.word	0x200008ec

0800e3f0 <__malloc_unlock>:
 800e3f0:	4801      	ldr	r0, [pc, #4]	; (800e3f8 <__malloc_unlock+0x8>)
 800e3f2:	f000 be7d 	b.w	800f0f0 <__retarget_lock_release_recursive>
 800e3f6:	bf00      	nop
 800e3f8:	200008ec 	.word	0x200008ec

0800e3fc <_Balloc>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e400:	4604      	mov	r4, r0
 800e402:	460d      	mov	r5, r1
 800e404:	b976      	cbnz	r6, 800e424 <_Balloc+0x28>
 800e406:	2010      	movs	r0, #16
 800e408:	f7fc ff8a 	bl	800b320 <malloc>
 800e40c:	4602      	mov	r2, r0
 800e40e:	6260      	str	r0, [r4, #36]	; 0x24
 800e410:	b920      	cbnz	r0, 800e41c <_Balloc+0x20>
 800e412:	2166      	movs	r1, #102	; 0x66
 800e414:	4b17      	ldr	r3, [pc, #92]	; (800e474 <_Balloc+0x78>)
 800e416:	4818      	ldr	r0, [pc, #96]	; (800e478 <_Balloc+0x7c>)
 800e418:	f000 fe38 	bl	800f08c <__assert_func>
 800e41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e420:	6006      	str	r6, [r0, #0]
 800e422:	60c6      	str	r6, [r0, #12]
 800e424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e426:	68f3      	ldr	r3, [r6, #12]
 800e428:	b183      	cbz	r3, 800e44c <_Balloc+0x50>
 800e42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e432:	b9b8      	cbnz	r0, 800e464 <_Balloc+0x68>
 800e434:	2101      	movs	r1, #1
 800e436:	fa01 f605 	lsl.w	r6, r1, r5
 800e43a:	1d72      	adds	r2, r6, #5
 800e43c:	4620      	mov	r0, r4
 800e43e:	0092      	lsls	r2, r2, #2
 800e440:	f000 fc94 	bl	800ed6c <_calloc_r>
 800e444:	b160      	cbz	r0, 800e460 <_Balloc+0x64>
 800e446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e44a:	e00e      	b.n	800e46a <_Balloc+0x6e>
 800e44c:	2221      	movs	r2, #33	; 0x21
 800e44e:	2104      	movs	r1, #4
 800e450:	4620      	mov	r0, r4
 800e452:	f000 fc8b 	bl	800ed6c <_calloc_r>
 800e456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e458:	60f0      	str	r0, [r6, #12]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d1e4      	bne.n	800e42a <_Balloc+0x2e>
 800e460:	2000      	movs	r0, #0
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	6802      	ldr	r2, [r0, #0]
 800e466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e46a:	2300      	movs	r3, #0
 800e46c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e470:	e7f7      	b.n	800e462 <_Balloc+0x66>
 800e472:	bf00      	nop
 800e474:	080105c2 	.word	0x080105c2
 800e478:	080106c8 	.word	0x080106c8

0800e47c <_Bfree>:
 800e47c:	b570      	push	{r4, r5, r6, lr}
 800e47e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e480:	4605      	mov	r5, r0
 800e482:	460c      	mov	r4, r1
 800e484:	b976      	cbnz	r6, 800e4a4 <_Bfree+0x28>
 800e486:	2010      	movs	r0, #16
 800e488:	f7fc ff4a 	bl	800b320 <malloc>
 800e48c:	4602      	mov	r2, r0
 800e48e:	6268      	str	r0, [r5, #36]	; 0x24
 800e490:	b920      	cbnz	r0, 800e49c <_Bfree+0x20>
 800e492:	218a      	movs	r1, #138	; 0x8a
 800e494:	4b08      	ldr	r3, [pc, #32]	; (800e4b8 <_Bfree+0x3c>)
 800e496:	4809      	ldr	r0, [pc, #36]	; (800e4bc <_Bfree+0x40>)
 800e498:	f000 fdf8 	bl	800f08c <__assert_func>
 800e49c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4a0:	6006      	str	r6, [r0, #0]
 800e4a2:	60c6      	str	r6, [r0, #12]
 800e4a4:	b13c      	cbz	r4, 800e4b6 <_Bfree+0x3a>
 800e4a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e4a8:	6862      	ldr	r2, [r4, #4]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4b0:	6021      	str	r1, [r4, #0]
 800e4b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4b6:	bd70      	pop	{r4, r5, r6, pc}
 800e4b8:	080105c2 	.word	0x080105c2
 800e4bc:	080106c8 	.word	0x080106c8

0800e4c0 <__multadd>:
 800e4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c4:	4698      	mov	r8, r3
 800e4c6:	460c      	mov	r4, r1
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	690e      	ldr	r6, [r1, #16]
 800e4cc:	4607      	mov	r7, r0
 800e4ce:	f101 0014 	add.w	r0, r1, #20
 800e4d2:	6805      	ldr	r5, [r0, #0]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	b2a9      	uxth	r1, r5
 800e4d8:	fb02 8101 	mla	r1, r2, r1, r8
 800e4dc:	0c2d      	lsrs	r5, r5, #16
 800e4de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e4e2:	fb02 c505 	mla	r5, r2, r5, ip
 800e4e6:	b289      	uxth	r1, r1
 800e4e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e4ec:	429e      	cmp	r6, r3
 800e4ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e4f2:	f840 1b04 	str.w	r1, [r0], #4
 800e4f6:	dcec      	bgt.n	800e4d2 <__multadd+0x12>
 800e4f8:	f1b8 0f00 	cmp.w	r8, #0
 800e4fc:	d022      	beq.n	800e544 <__multadd+0x84>
 800e4fe:	68a3      	ldr	r3, [r4, #8]
 800e500:	42b3      	cmp	r3, r6
 800e502:	dc19      	bgt.n	800e538 <__multadd+0x78>
 800e504:	6861      	ldr	r1, [r4, #4]
 800e506:	4638      	mov	r0, r7
 800e508:	3101      	adds	r1, #1
 800e50a:	f7ff ff77 	bl	800e3fc <_Balloc>
 800e50e:	4605      	mov	r5, r0
 800e510:	b928      	cbnz	r0, 800e51e <__multadd+0x5e>
 800e512:	4602      	mov	r2, r0
 800e514:	21b5      	movs	r1, #181	; 0xb5
 800e516:	4b0d      	ldr	r3, [pc, #52]	; (800e54c <__multadd+0x8c>)
 800e518:	480d      	ldr	r0, [pc, #52]	; (800e550 <__multadd+0x90>)
 800e51a:	f000 fdb7 	bl	800f08c <__assert_func>
 800e51e:	6922      	ldr	r2, [r4, #16]
 800e520:	f104 010c 	add.w	r1, r4, #12
 800e524:	3202      	adds	r2, #2
 800e526:	0092      	lsls	r2, r2, #2
 800e528:	300c      	adds	r0, #12
 800e52a:	f7ff ff4d 	bl	800e3c8 <memcpy>
 800e52e:	4621      	mov	r1, r4
 800e530:	4638      	mov	r0, r7
 800e532:	f7ff ffa3 	bl	800e47c <_Bfree>
 800e536:	462c      	mov	r4, r5
 800e538:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e53c:	3601      	adds	r6, #1
 800e53e:	f8c3 8014 	str.w	r8, [r3, #20]
 800e542:	6126      	str	r6, [r4, #16]
 800e544:	4620      	mov	r0, r4
 800e546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e54a:	bf00      	nop
 800e54c:	08010638 	.word	0x08010638
 800e550:	080106c8 	.word	0x080106c8

0800e554 <__s2b>:
 800e554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e558:	4615      	mov	r5, r2
 800e55a:	2209      	movs	r2, #9
 800e55c:	461f      	mov	r7, r3
 800e55e:	3308      	adds	r3, #8
 800e560:	460c      	mov	r4, r1
 800e562:	fb93 f3f2 	sdiv	r3, r3, r2
 800e566:	4606      	mov	r6, r0
 800e568:	2201      	movs	r2, #1
 800e56a:	2100      	movs	r1, #0
 800e56c:	429a      	cmp	r2, r3
 800e56e:	db09      	blt.n	800e584 <__s2b+0x30>
 800e570:	4630      	mov	r0, r6
 800e572:	f7ff ff43 	bl	800e3fc <_Balloc>
 800e576:	b940      	cbnz	r0, 800e58a <__s2b+0x36>
 800e578:	4602      	mov	r2, r0
 800e57a:	21ce      	movs	r1, #206	; 0xce
 800e57c:	4b18      	ldr	r3, [pc, #96]	; (800e5e0 <__s2b+0x8c>)
 800e57e:	4819      	ldr	r0, [pc, #100]	; (800e5e4 <__s2b+0x90>)
 800e580:	f000 fd84 	bl	800f08c <__assert_func>
 800e584:	0052      	lsls	r2, r2, #1
 800e586:	3101      	adds	r1, #1
 800e588:	e7f0      	b.n	800e56c <__s2b+0x18>
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	2d09      	cmp	r5, #9
 800e58e:	6143      	str	r3, [r0, #20]
 800e590:	f04f 0301 	mov.w	r3, #1
 800e594:	6103      	str	r3, [r0, #16]
 800e596:	dd16      	ble.n	800e5c6 <__s2b+0x72>
 800e598:	f104 0909 	add.w	r9, r4, #9
 800e59c:	46c8      	mov	r8, r9
 800e59e:	442c      	add	r4, r5
 800e5a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e5a4:	4601      	mov	r1, r0
 800e5a6:	220a      	movs	r2, #10
 800e5a8:	4630      	mov	r0, r6
 800e5aa:	3b30      	subs	r3, #48	; 0x30
 800e5ac:	f7ff ff88 	bl	800e4c0 <__multadd>
 800e5b0:	45a0      	cmp	r8, r4
 800e5b2:	d1f5      	bne.n	800e5a0 <__s2b+0x4c>
 800e5b4:	f1a5 0408 	sub.w	r4, r5, #8
 800e5b8:	444c      	add	r4, r9
 800e5ba:	1b2d      	subs	r5, r5, r4
 800e5bc:	1963      	adds	r3, r4, r5
 800e5be:	42bb      	cmp	r3, r7
 800e5c0:	db04      	blt.n	800e5cc <__s2b+0x78>
 800e5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5c6:	2509      	movs	r5, #9
 800e5c8:	340a      	adds	r4, #10
 800e5ca:	e7f6      	b.n	800e5ba <__s2b+0x66>
 800e5cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5d0:	4601      	mov	r1, r0
 800e5d2:	220a      	movs	r2, #10
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	3b30      	subs	r3, #48	; 0x30
 800e5d8:	f7ff ff72 	bl	800e4c0 <__multadd>
 800e5dc:	e7ee      	b.n	800e5bc <__s2b+0x68>
 800e5de:	bf00      	nop
 800e5e0:	08010638 	.word	0x08010638
 800e5e4:	080106c8 	.word	0x080106c8

0800e5e8 <__hi0bits>:
 800e5e8:	0c02      	lsrs	r2, r0, #16
 800e5ea:	0412      	lsls	r2, r2, #16
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	b9ca      	cbnz	r2, 800e624 <__hi0bits+0x3c>
 800e5f0:	0403      	lsls	r3, r0, #16
 800e5f2:	2010      	movs	r0, #16
 800e5f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e5f8:	bf04      	itt	eq
 800e5fa:	021b      	lsleq	r3, r3, #8
 800e5fc:	3008      	addeq	r0, #8
 800e5fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e602:	bf04      	itt	eq
 800e604:	011b      	lsleq	r3, r3, #4
 800e606:	3004      	addeq	r0, #4
 800e608:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e60c:	bf04      	itt	eq
 800e60e:	009b      	lsleq	r3, r3, #2
 800e610:	3002      	addeq	r0, #2
 800e612:	2b00      	cmp	r3, #0
 800e614:	db05      	blt.n	800e622 <__hi0bits+0x3a>
 800e616:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e61a:	f100 0001 	add.w	r0, r0, #1
 800e61e:	bf08      	it	eq
 800e620:	2020      	moveq	r0, #32
 800e622:	4770      	bx	lr
 800e624:	2000      	movs	r0, #0
 800e626:	e7e5      	b.n	800e5f4 <__hi0bits+0xc>

0800e628 <__lo0bits>:
 800e628:	6803      	ldr	r3, [r0, #0]
 800e62a:	4602      	mov	r2, r0
 800e62c:	f013 0007 	ands.w	r0, r3, #7
 800e630:	d00b      	beq.n	800e64a <__lo0bits+0x22>
 800e632:	07d9      	lsls	r1, r3, #31
 800e634:	d422      	bmi.n	800e67c <__lo0bits+0x54>
 800e636:	0798      	lsls	r0, r3, #30
 800e638:	bf49      	itett	mi
 800e63a:	085b      	lsrmi	r3, r3, #1
 800e63c:	089b      	lsrpl	r3, r3, #2
 800e63e:	2001      	movmi	r0, #1
 800e640:	6013      	strmi	r3, [r2, #0]
 800e642:	bf5c      	itt	pl
 800e644:	2002      	movpl	r0, #2
 800e646:	6013      	strpl	r3, [r2, #0]
 800e648:	4770      	bx	lr
 800e64a:	b299      	uxth	r1, r3
 800e64c:	b909      	cbnz	r1, 800e652 <__lo0bits+0x2a>
 800e64e:	2010      	movs	r0, #16
 800e650:	0c1b      	lsrs	r3, r3, #16
 800e652:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e656:	bf04      	itt	eq
 800e658:	0a1b      	lsreq	r3, r3, #8
 800e65a:	3008      	addeq	r0, #8
 800e65c:	0719      	lsls	r1, r3, #28
 800e65e:	bf04      	itt	eq
 800e660:	091b      	lsreq	r3, r3, #4
 800e662:	3004      	addeq	r0, #4
 800e664:	0799      	lsls	r1, r3, #30
 800e666:	bf04      	itt	eq
 800e668:	089b      	lsreq	r3, r3, #2
 800e66a:	3002      	addeq	r0, #2
 800e66c:	07d9      	lsls	r1, r3, #31
 800e66e:	d403      	bmi.n	800e678 <__lo0bits+0x50>
 800e670:	085b      	lsrs	r3, r3, #1
 800e672:	f100 0001 	add.w	r0, r0, #1
 800e676:	d003      	beq.n	800e680 <__lo0bits+0x58>
 800e678:	6013      	str	r3, [r2, #0]
 800e67a:	4770      	bx	lr
 800e67c:	2000      	movs	r0, #0
 800e67e:	4770      	bx	lr
 800e680:	2020      	movs	r0, #32
 800e682:	4770      	bx	lr

0800e684 <__i2b>:
 800e684:	b510      	push	{r4, lr}
 800e686:	460c      	mov	r4, r1
 800e688:	2101      	movs	r1, #1
 800e68a:	f7ff feb7 	bl	800e3fc <_Balloc>
 800e68e:	4602      	mov	r2, r0
 800e690:	b928      	cbnz	r0, 800e69e <__i2b+0x1a>
 800e692:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e696:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <__i2b+0x24>)
 800e698:	4804      	ldr	r0, [pc, #16]	; (800e6ac <__i2b+0x28>)
 800e69a:	f000 fcf7 	bl	800f08c <__assert_func>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	6144      	str	r4, [r0, #20]
 800e6a2:	6103      	str	r3, [r0, #16]
 800e6a4:	bd10      	pop	{r4, pc}
 800e6a6:	bf00      	nop
 800e6a8:	08010638 	.word	0x08010638
 800e6ac:	080106c8 	.word	0x080106c8

0800e6b0 <__multiply>:
 800e6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b4:	4614      	mov	r4, r2
 800e6b6:	690a      	ldr	r2, [r1, #16]
 800e6b8:	6923      	ldr	r3, [r4, #16]
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	bfbe      	ittt	lt
 800e6c0:	460b      	movlt	r3, r1
 800e6c2:	4625      	movlt	r5, r4
 800e6c4:	461c      	movlt	r4, r3
 800e6c6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e6ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e6ce:	68ab      	ldr	r3, [r5, #8]
 800e6d0:	6869      	ldr	r1, [r5, #4]
 800e6d2:	eb0a 0709 	add.w	r7, sl, r9
 800e6d6:	42bb      	cmp	r3, r7
 800e6d8:	b085      	sub	sp, #20
 800e6da:	bfb8      	it	lt
 800e6dc:	3101      	addlt	r1, #1
 800e6de:	f7ff fe8d 	bl	800e3fc <_Balloc>
 800e6e2:	b930      	cbnz	r0, 800e6f2 <__multiply+0x42>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	f240 115d 	movw	r1, #349	; 0x15d
 800e6ea:	4b41      	ldr	r3, [pc, #260]	; (800e7f0 <__multiply+0x140>)
 800e6ec:	4841      	ldr	r0, [pc, #260]	; (800e7f4 <__multiply+0x144>)
 800e6ee:	f000 fccd 	bl	800f08c <__assert_func>
 800e6f2:	f100 0614 	add.w	r6, r0, #20
 800e6f6:	4633      	mov	r3, r6
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e6fe:	4543      	cmp	r3, r8
 800e700:	d31e      	bcc.n	800e740 <__multiply+0x90>
 800e702:	f105 0c14 	add.w	ip, r5, #20
 800e706:	f104 0314 	add.w	r3, r4, #20
 800e70a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e70e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e712:	9202      	str	r2, [sp, #8]
 800e714:	ebac 0205 	sub.w	r2, ip, r5
 800e718:	3a15      	subs	r2, #21
 800e71a:	f022 0203 	bic.w	r2, r2, #3
 800e71e:	3204      	adds	r2, #4
 800e720:	f105 0115 	add.w	r1, r5, #21
 800e724:	458c      	cmp	ip, r1
 800e726:	bf38      	it	cc
 800e728:	2204      	movcc	r2, #4
 800e72a:	9201      	str	r2, [sp, #4]
 800e72c:	9a02      	ldr	r2, [sp, #8]
 800e72e:	9303      	str	r3, [sp, #12]
 800e730:	429a      	cmp	r2, r3
 800e732:	d808      	bhi.n	800e746 <__multiply+0x96>
 800e734:	2f00      	cmp	r7, #0
 800e736:	dc55      	bgt.n	800e7e4 <__multiply+0x134>
 800e738:	6107      	str	r7, [r0, #16]
 800e73a:	b005      	add	sp, #20
 800e73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e740:	f843 2b04 	str.w	r2, [r3], #4
 800e744:	e7db      	b.n	800e6fe <__multiply+0x4e>
 800e746:	f8b3 a000 	ldrh.w	sl, [r3]
 800e74a:	f1ba 0f00 	cmp.w	sl, #0
 800e74e:	d020      	beq.n	800e792 <__multiply+0xe2>
 800e750:	46b1      	mov	r9, r6
 800e752:	2200      	movs	r2, #0
 800e754:	f105 0e14 	add.w	lr, r5, #20
 800e758:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e75c:	f8d9 b000 	ldr.w	fp, [r9]
 800e760:	b2a1      	uxth	r1, r4
 800e762:	fa1f fb8b 	uxth.w	fp, fp
 800e766:	fb0a b101 	mla	r1, sl, r1, fp
 800e76a:	4411      	add	r1, r2
 800e76c:	f8d9 2000 	ldr.w	r2, [r9]
 800e770:	0c24      	lsrs	r4, r4, #16
 800e772:	0c12      	lsrs	r2, r2, #16
 800e774:	fb0a 2404 	mla	r4, sl, r4, r2
 800e778:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e77c:	b289      	uxth	r1, r1
 800e77e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e782:	45f4      	cmp	ip, lr
 800e784:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e788:	f849 1b04 	str.w	r1, [r9], #4
 800e78c:	d8e4      	bhi.n	800e758 <__multiply+0xa8>
 800e78e:	9901      	ldr	r1, [sp, #4]
 800e790:	5072      	str	r2, [r6, r1]
 800e792:	9a03      	ldr	r2, [sp, #12]
 800e794:	3304      	adds	r3, #4
 800e796:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e79a:	f1b9 0f00 	cmp.w	r9, #0
 800e79e:	d01f      	beq.n	800e7e0 <__multiply+0x130>
 800e7a0:	46b6      	mov	lr, r6
 800e7a2:	f04f 0a00 	mov.w	sl, #0
 800e7a6:	6834      	ldr	r4, [r6, #0]
 800e7a8:	f105 0114 	add.w	r1, r5, #20
 800e7ac:	880a      	ldrh	r2, [r1, #0]
 800e7ae:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e7b2:	b2a4      	uxth	r4, r4
 800e7b4:	fb09 b202 	mla	r2, r9, r2, fp
 800e7b8:	4492      	add	sl, r2
 800e7ba:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e7be:	f84e 4b04 	str.w	r4, [lr], #4
 800e7c2:	f851 4b04 	ldr.w	r4, [r1], #4
 800e7c6:	f8be 2000 	ldrh.w	r2, [lr]
 800e7ca:	0c24      	lsrs	r4, r4, #16
 800e7cc:	fb09 2404 	mla	r4, r9, r4, r2
 800e7d0:	458c      	cmp	ip, r1
 800e7d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e7d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e7da:	d8e7      	bhi.n	800e7ac <__multiply+0xfc>
 800e7dc:	9a01      	ldr	r2, [sp, #4]
 800e7de:	50b4      	str	r4, [r6, r2]
 800e7e0:	3604      	adds	r6, #4
 800e7e2:	e7a3      	b.n	800e72c <__multiply+0x7c>
 800e7e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1a5      	bne.n	800e738 <__multiply+0x88>
 800e7ec:	3f01      	subs	r7, #1
 800e7ee:	e7a1      	b.n	800e734 <__multiply+0x84>
 800e7f0:	08010638 	.word	0x08010638
 800e7f4:	080106c8 	.word	0x080106c8

0800e7f8 <__pow5mult>:
 800e7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7fc:	4615      	mov	r5, r2
 800e7fe:	f012 0203 	ands.w	r2, r2, #3
 800e802:	4606      	mov	r6, r0
 800e804:	460f      	mov	r7, r1
 800e806:	d007      	beq.n	800e818 <__pow5mult+0x20>
 800e808:	4c25      	ldr	r4, [pc, #148]	; (800e8a0 <__pow5mult+0xa8>)
 800e80a:	3a01      	subs	r2, #1
 800e80c:	2300      	movs	r3, #0
 800e80e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e812:	f7ff fe55 	bl	800e4c0 <__multadd>
 800e816:	4607      	mov	r7, r0
 800e818:	10ad      	asrs	r5, r5, #2
 800e81a:	d03d      	beq.n	800e898 <__pow5mult+0xa0>
 800e81c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e81e:	b97c      	cbnz	r4, 800e840 <__pow5mult+0x48>
 800e820:	2010      	movs	r0, #16
 800e822:	f7fc fd7d 	bl	800b320 <malloc>
 800e826:	4602      	mov	r2, r0
 800e828:	6270      	str	r0, [r6, #36]	; 0x24
 800e82a:	b928      	cbnz	r0, 800e838 <__pow5mult+0x40>
 800e82c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e830:	4b1c      	ldr	r3, [pc, #112]	; (800e8a4 <__pow5mult+0xac>)
 800e832:	481d      	ldr	r0, [pc, #116]	; (800e8a8 <__pow5mult+0xb0>)
 800e834:	f000 fc2a 	bl	800f08c <__assert_func>
 800e838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e83c:	6004      	str	r4, [r0, #0]
 800e83e:	60c4      	str	r4, [r0, #12]
 800e840:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e848:	b94c      	cbnz	r4, 800e85e <__pow5mult+0x66>
 800e84a:	f240 2171 	movw	r1, #625	; 0x271
 800e84e:	4630      	mov	r0, r6
 800e850:	f7ff ff18 	bl	800e684 <__i2b>
 800e854:	2300      	movs	r3, #0
 800e856:	4604      	mov	r4, r0
 800e858:	f8c8 0008 	str.w	r0, [r8, #8]
 800e85c:	6003      	str	r3, [r0, #0]
 800e85e:	f04f 0900 	mov.w	r9, #0
 800e862:	07eb      	lsls	r3, r5, #31
 800e864:	d50a      	bpl.n	800e87c <__pow5mult+0x84>
 800e866:	4639      	mov	r1, r7
 800e868:	4622      	mov	r2, r4
 800e86a:	4630      	mov	r0, r6
 800e86c:	f7ff ff20 	bl	800e6b0 <__multiply>
 800e870:	4680      	mov	r8, r0
 800e872:	4639      	mov	r1, r7
 800e874:	4630      	mov	r0, r6
 800e876:	f7ff fe01 	bl	800e47c <_Bfree>
 800e87a:	4647      	mov	r7, r8
 800e87c:	106d      	asrs	r5, r5, #1
 800e87e:	d00b      	beq.n	800e898 <__pow5mult+0xa0>
 800e880:	6820      	ldr	r0, [r4, #0]
 800e882:	b938      	cbnz	r0, 800e894 <__pow5mult+0x9c>
 800e884:	4622      	mov	r2, r4
 800e886:	4621      	mov	r1, r4
 800e888:	4630      	mov	r0, r6
 800e88a:	f7ff ff11 	bl	800e6b0 <__multiply>
 800e88e:	6020      	str	r0, [r4, #0]
 800e890:	f8c0 9000 	str.w	r9, [r0]
 800e894:	4604      	mov	r4, r0
 800e896:	e7e4      	b.n	800e862 <__pow5mult+0x6a>
 800e898:	4638      	mov	r0, r7
 800e89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e89e:	bf00      	nop
 800e8a0:	08010818 	.word	0x08010818
 800e8a4:	080105c2 	.word	0x080105c2
 800e8a8:	080106c8 	.word	0x080106c8

0800e8ac <__lshift>:
 800e8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b0:	460c      	mov	r4, r1
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	4691      	mov	r9, r2
 800e8b6:	6923      	ldr	r3, [r4, #16]
 800e8b8:	6849      	ldr	r1, [r1, #4]
 800e8ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8be:	68a3      	ldr	r3, [r4, #8]
 800e8c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8c4:	f108 0601 	add.w	r6, r8, #1
 800e8c8:	42b3      	cmp	r3, r6
 800e8ca:	db0b      	blt.n	800e8e4 <__lshift+0x38>
 800e8cc:	4638      	mov	r0, r7
 800e8ce:	f7ff fd95 	bl	800e3fc <_Balloc>
 800e8d2:	4605      	mov	r5, r0
 800e8d4:	b948      	cbnz	r0, 800e8ea <__lshift+0x3e>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8dc:	4b27      	ldr	r3, [pc, #156]	; (800e97c <__lshift+0xd0>)
 800e8de:	4828      	ldr	r0, [pc, #160]	; (800e980 <__lshift+0xd4>)
 800e8e0:	f000 fbd4 	bl	800f08c <__assert_func>
 800e8e4:	3101      	adds	r1, #1
 800e8e6:	005b      	lsls	r3, r3, #1
 800e8e8:	e7ee      	b.n	800e8c8 <__lshift+0x1c>
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f100 0114 	add.w	r1, r0, #20
 800e8f0:	f100 0210 	add.w	r2, r0, #16
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	4553      	cmp	r3, sl
 800e8f8:	db33      	blt.n	800e962 <__lshift+0xb6>
 800e8fa:	6920      	ldr	r0, [r4, #16]
 800e8fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e900:	f104 0314 	add.w	r3, r4, #20
 800e904:	f019 091f 	ands.w	r9, r9, #31
 800e908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e90c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e910:	d02b      	beq.n	800e96a <__lshift+0xbe>
 800e912:	468a      	mov	sl, r1
 800e914:	2200      	movs	r2, #0
 800e916:	f1c9 0e20 	rsb	lr, r9, #32
 800e91a:	6818      	ldr	r0, [r3, #0]
 800e91c:	fa00 f009 	lsl.w	r0, r0, r9
 800e920:	4302      	orrs	r2, r0
 800e922:	f84a 2b04 	str.w	r2, [sl], #4
 800e926:	f853 2b04 	ldr.w	r2, [r3], #4
 800e92a:	459c      	cmp	ip, r3
 800e92c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e930:	d8f3      	bhi.n	800e91a <__lshift+0x6e>
 800e932:	ebac 0304 	sub.w	r3, ip, r4
 800e936:	3b15      	subs	r3, #21
 800e938:	f023 0303 	bic.w	r3, r3, #3
 800e93c:	3304      	adds	r3, #4
 800e93e:	f104 0015 	add.w	r0, r4, #21
 800e942:	4584      	cmp	ip, r0
 800e944:	bf38      	it	cc
 800e946:	2304      	movcc	r3, #4
 800e948:	50ca      	str	r2, [r1, r3]
 800e94a:	b10a      	cbz	r2, 800e950 <__lshift+0xa4>
 800e94c:	f108 0602 	add.w	r6, r8, #2
 800e950:	3e01      	subs	r6, #1
 800e952:	4638      	mov	r0, r7
 800e954:	4621      	mov	r1, r4
 800e956:	612e      	str	r6, [r5, #16]
 800e958:	f7ff fd90 	bl	800e47c <_Bfree>
 800e95c:	4628      	mov	r0, r5
 800e95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e962:	f842 0f04 	str.w	r0, [r2, #4]!
 800e966:	3301      	adds	r3, #1
 800e968:	e7c5      	b.n	800e8f6 <__lshift+0x4a>
 800e96a:	3904      	subs	r1, #4
 800e96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e970:	459c      	cmp	ip, r3
 800e972:	f841 2f04 	str.w	r2, [r1, #4]!
 800e976:	d8f9      	bhi.n	800e96c <__lshift+0xc0>
 800e978:	e7ea      	b.n	800e950 <__lshift+0xa4>
 800e97a:	bf00      	nop
 800e97c:	08010638 	.word	0x08010638
 800e980:	080106c8 	.word	0x080106c8

0800e984 <__mcmp>:
 800e984:	4603      	mov	r3, r0
 800e986:	690a      	ldr	r2, [r1, #16]
 800e988:	6900      	ldr	r0, [r0, #16]
 800e98a:	b530      	push	{r4, r5, lr}
 800e98c:	1a80      	subs	r0, r0, r2
 800e98e:	d10d      	bne.n	800e9ac <__mcmp+0x28>
 800e990:	3314      	adds	r3, #20
 800e992:	3114      	adds	r1, #20
 800e994:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e998:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e99c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9a4:	4295      	cmp	r5, r2
 800e9a6:	d002      	beq.n	800e9ae <__mcmp+0x2a>
 800e9a8:	d304      	bcc.n	800e9b4 <__mcmp+0x30>
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	bd30      	pop	{r4, r5, pc}
 800e9ae:	42a3      	cmp	r3, r4
 800e9b0:	d3f4      	bcc.n	800e99c <__mcmp+0x18>
 800e9b2:	e7fb      	b.n	800e9ac <__mcmp+0x28>
 800e9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9b8:	e7f8      	b.n	800e9ac <__mcmp+0x28>
	...

0800e9bc <__mdiff>:
 800e9bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c0:	460c      	mov	r4, r1
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	4692      	mov	sl, r2
 800e9ca:	f7ff ffdb 	bl	800e984 <__mcmp>
 800e9ce:	1e05      	subs	r5, r0, #0
 800e9d0:	d111      	bne.n	800e9f6 <__mdiff+0x3a>
 800e9d2:	4629      	mov	r1, r5
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f7ff fd11 	bl	800e3fc <_Balloc>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	b928      	cbnz	r0, 800e9ea <__mdiff+0x2e>
 800e9de:	f240 2132 	movw	r1, #562	; 0x232
 800e9e2:	4b3c      	ldr	r3, [pc, #240]	; (800ead4 <__mdiff+0x118>)
 800e9e4:	483c      	ldr	r0, [pc, #240]	; (800ead8 <__mdiff+0x11c>)
 800e9e6:	f000 fb51 	bl	800f08c <__assert_func>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f6:	bfa4      	itt	ge
 800e9f8:	4653      	movge	r3, sl
 800e9fa:	46a2      	movge	sl, r4
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ea02:	bfa6      	itte	ge
 800ea04:	461c      	movge	r4, r3
 800ea06:	2500      	movge	r5, #0
 800ea08:	2501      	movlt	r5, #1
 800ea0a:	f7ff fcf7 	bl	800e3fc <_Balloc>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	b918      	cbnz	r0, 800ea1a <__mdiff+0x5e>
 800ea12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea16:	4b2f      	ldr	r3, [pc, #188]	; (800ead4 <__mdiff+0x118>)
 800ea18:	e7e4      	b.n	800e9e4 <__mdiff+0x28>
 800ea1a:	f100 0814 	add.w	r8, r0, #20
 800ea1e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800ea22:	60c5      	str	r5, [r0, #12]
 800ea24:	f04f 0c00 	mov.w	ip, #0
 800ea28:	f10a 0514 	add.w	r5, sl, #20
 800ea2c:	f10a 0010 	add.w	r0, sl, #16
 800ea30:	46c2      	mov	sl, r8
 800ea32:	6926      	ldr	r6, [r4, #16]
 800ea34:	f104 0914 	add.w	r9, r4, #20
 800ea38:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800ea3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea40:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800ea44:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea48:	fa1f f18b 	uxth.w	r1, fp
 800ea4c:	4461      	add	r1, ip
 800ea4e:	fa1f fc83 	uxth.w	ip, r3
 800ea52:	0c1b      	lsrs	r3, r3, #16
 800ea54:	eba1 010c 	sub.w	r1, r1, ip
 800ea58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ea60:	b289      	uxth	r1, r1
 800ea62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ea66:	454e      	cmp	r6, r9
 800ea68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ea6c:	f84a 3b04 	str.w	r3, [sl], #4
 800ea70:	d8e6      	bhi.n	800ea40 <__mdiff+0x84>
 800ea72:	1b33      	subs	r3, r6, r4
 800ea74:	3b15      	subs	r3, #21
 800ea76:	f023 0303 	bic.w	r3, r3, #3
 800ea7a:	3415      	adds	r4, #21
 800ea7c:	3304      	adds	r3, #4
 800ea7e:	42a6      	cmp	r6, r4
 800ea80:	bf38      	it	cc
 800ea82:	2304      	movcc	r3, #4
 800ea84:	441d      	add	r5, r3
 800ea86:	4443      	add	r3, r8
 800ea88:	461e      	mov	r6, r3
 800ea8a:	462c      	mov	r4, r5
 800ea8c:	4574      	cmp	r4, lr
 800ea8e:	d30e      	bcc.n	800eaae <__mdiff+0xf2>
 800ea90:	f10e 0103 	add.w	r1, lr, #3
 800ea94:	1b49      	subs	r1, r1, r5
 800ea96:	f021 0103 	bic.w	r1, r1, #3
 800ea9a:	3d03      	subs	r5, #3
 800ea9c:	45ae      	cmp	lr, r5
 800ea9e:	bf38      	it	cc
 800eaa0:	2100      	movcc	r1, #0
 800eaa2:	4419      	add	r1, r3
 800eaa4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800eaa8:	b18b      	cbz	r3, 800eace <__mdiff+0x112>
 800eaaa:	6117      	str	r7, [r2, #16]
 800eaac:	e7a0      	b.n	800e9f0 <__mdiff+0x34>
 800eaae:	f854 8b04 	ldr.w	r8, [r4], #4
 800eab2:	fa1f f188 	uxth.w	r1, r8
 800eab6:	4461      	add	r1, ip
 800eab8:	1408      	asrs	r0, r1, #16
 800eaba:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800eabe:	b289      	uxth	r1, r1
 800eac0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eac4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eac8:	f846 1b04 	str.w	r1, [r6], #4
 800eacc:	e7de      	b.n	800ea8c <__mdiff+0xd0>
 800eace:	3f01      	subs	r7, #1
 800ead0:	e7e8      	b.n	800eaa4 <__mdiff+0xe8>
 800ead2:	bf00      	nop
 800ead4:	08010638 	.word	0x08010638
 800ead8:	080106c8 	.word	0x080106c8

0800eadc <__ulp>:
 800eadc:	4b11      	ldr	r3, [pc, #68]	; (800eb24 <__ulp+0x48>)
 800eade:	400b      	ands	r3, r1
 800eae0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dd02      	ble.n	800eaee <__ulp+0x12>
 800eae8:	2000      	movs	r0, #0
 800eaea:	4619      	mov	r1, r3
 800eaec:	4770      	bx	lr
 800eaee:	425b      	negs	r3, r3
 800eaf0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800eaf4:	f04f 0000 	mov.w	r0, #0
 800eaf8:	f04f 0100 	mov.w	r1, #0
 800eafc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb00:	da04      	bge.n	800eb0c <__ulp+0x30>
 800eb02:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eb06:	fa43 f102 	asr.w	r1, r3, r2
 800eb0a:	4770      	bx	lr
 800eb0c:	f1a2 0314 	sub.w	r3, r2, #20
 800eb10:	2b1e      	cmp	r3, #30
 800eb12:	bfd6      	itet	le
 800eb14:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800eb18:	2301      	movgt	r3, #1
 800eb1a:	fa22 f303 	lsrle.w	r3, r2, r3
 800eb1e:	4618      	mov	r0, r3
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	7ff00000 	.word	0x7ff00000

0800eb28 <__b2d>:
 800eb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb2c:	6907      	ldr	r7, [r0, #16]
 800eb2e:	f100 0914 	add.w	r9, r0, #20
 800eb32:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800eb36:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800eb3a:	f1a7 0804 	sub.w	r8, r7, #4
 800eb3e:	4630      	mov	r0, r6
 800eb40:	f7ff fd52 	bl	800e5e8 <__hi0bits>
 800eb44:	f1c0 0320 	rsb	r3, r0, #32
 800eb48:	280a      	cmp	r0, #10
 800eb4a:	600b      	str	r3, [r1, #0]
 800eb4c:	491f      	ldr	r1, [pc, #124]	; (800ebcc <__b2d+0xa4>)
 800eb4e:	dc17      	bgt.n	800eb80 <__b2d+0x58>
 800eb50:	45c1      	cmp	r9, r8
 800eb52:	bf28      	it	cs
 800eb54:	2200      	movcs	r2, #0
 800eb56:	f1c0 0c0b 	rsb	ip, r0, #11
 800eb5a:	fa26 f30c 	lsr.w	r3, r6, ip
 800eb5e:	bf38      	it	cc
 800eb60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800eb64:	ea43 0501 	orr.w	r5, r3, r1
 800eb68:	f100 0315 	add.w	r3, r0, #21
 800eb6c:	fa06 f303 	lsl.w	r3, r6, r3
 800eb70:	fa22 f20c 	lsr.w	r2, r2, ip
 800eb74:	ea43 0402 	orr.w	r4, r3, r2
 800eb78:	4620      	mov	r0, r4
 800eb7a:	4629      	mov	r1, r5
 800eb7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb80:	45c1      	cmp	r9, r8
 800eb82:	bf2e      	itee	cs
 800eb84:	2200      	movcs	r2, #0
 800eb86:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800eb8a:	f1a7 0808 	subcc.w	r8, r7, #8
 800eb8e:	f1b0 030b 	subs.w	r3, r0, #11
 800eb92:	d016      	beq.n	800ebc2 <__b2d+0x9a>
 800eb94:	f1c3 0720 	rsb	r7, r3, #32
 800eb98:	fa22 f107 	lsr.w	r1, r2, r7
 800eb9c:	45c8      	cmp	r8, r9
 800eb9e:	fa06 f603 	lsl.w	r6, r6, r3
 800eba2:	ea46 0601 	orr.w	r6, r6, r1
 800eba6:	bf94      	ite	ls
 800eba8:	2100      	movls	r1, #0
 800ebaa:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800ebae:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800ebb2:	fa02 f003 	lsl.w	r0, r2, r3
 800ebb6:	40f9      	lsrs	r1, r7
 800ebb8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ebbc:	ea40 0401 	orr.w	r4, r0, r1
 800ebc0:	e7da      	b.n	800eb78 <__b2d+0x50>
 800ebc2:	4614      	mov	r4, r2
 800ebc4:	ea46 0501 	orr.w	r5, r6, r1
 800ebc8:	e7d6      	b.n	800eb78 <__b2d+0x50>
 800ebca:	bf00      	nop
 800ebcc:	3ff00000 	.word	0x3ff00000

0800ebd0 <__d2b>:
 800ebd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ebd4:	2101      	movs	r1, #1
 800ebd6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800ebda:	4690      	mov	r8, r2
 800ebdc:	461d      	mov	r5, r3
 800ebde:	f7ff fc0d 	bl	800e3fc <_Balloc>
 800ebe2:	4604      	mov	r4, r0
 800ebe4:	b930      	cbnz	r0, 800ebf4 <__d2b+0x24>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	f240 310a 	movw	r1, #778	; 0x30a
 800ebec:	4b24      	ldr	r3, [pc, #144]	; (800ec80 <__d2b+0xb0>)
 800ebee:	4825      	ldr	r0, [pc, #148]	; (800ec84 <__d2b+0xb4>)
 800ebf0:	f000 fa4c 	bl	800f08c <__assert_func>
 800ebf4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800ebf8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800ebfc:	bb2d      	cbnz	r5, 800ec4a <__d2b+0x7a>
 800ebfe:	9301      	str	r3, [sp, #4]
 800ec00:	f1b8 0300 	subs.w	r3, r8, #0
 800ec04:	d026      	beq.n	800ec54 <__d2b+0x84>
 800ec06:	4668      	mov	r0, sp
 800ec08:	9300      	str	r3, [sp, #0]
 800ec0a:	f7ff fd0d 	bl	800e628 <__lo0bits>
 800ec0e:	9900      	ldr	r1, [sp, #0]
 800ec10:	b1f0      	cbz	r0, 800ec50 <__d2b+0x80>
 800ec12:	9a01      	ldr	r2, [sp, #4]
 800ec14:	f1c0 0320 	rsb	r3, r0, #32
 800ec18:	fa02 f303 	lsl.w	r3, r2, r3
 800ec1c:	430b      	orrs	r3, r1
 800ec1e:	40c2      	lsrs	r2, r0
 800ec20:	6163      	str	r3, [r4, #20]
 800ec22:	9201      	str	r2, [sp, #4]
 800ec24:	9b01      	ldr	r3, [sp, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	bf14      	ite	ne
 800ec2a:	2102      	movne	r1, #2
 800ec2c:	2101      	moveq	r1, #1
 800ec2e:	61a3      	str	r3, [r4, #24]
 800ec30:	6121      	str	r1, [r4, #16]
 800ec32:	b1c5      	cbz	r5, 800ec66 <__d2b+0x96>
 800ec34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec38:	4405      	add	r5, r0
 800ec3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec3e:	603d      	str	r5, [r7, #0]
 800ec40:	6030      	str	r0, [r6, #0]
 800ec42:	4620      	mov	r0, r4
 800ec44:	b002      	add	sp, #8
 800ec46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec4e:	e7d6      	b.n	800ebfe <__d2b+0x2e>
 800ec50:	6161      	str	r1, [r4, #20]
 800ec52:	e7e7      	b.n	800ec24 <__d2b+0x54>
 800ec54:	a801      	add	r0, sp, #4
 800ec56:	f7ff fce7 	bl	800e628 <__lo0bits>
 800ec5a:	2101      	movs	r1, #1
 800ec5c:	9b01      	ldr	r3, [sp, #4]
 800ec5e:	6121      	str	r1, [r4, #16]
 800ec60:	6163      	str	r3, [r4, #20]
 800ec62:	3020      	adds	r0, #32
 800ec64:	e7e5      	b.n	800ec32 <__d2b+0x62>
 800ec66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800ec6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec6e:	6038      	str	r0, [r7, #0]
 800ec70:	6918      	ldr	r0, [r3, #16]
 800ec72:	f7ff fcb9 	bl	800e5e8 <__hi0bits>
 800ec76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ec7a:	6031      	str	r1, [r6, #0]
 800ec7c:	e7e1      	b.n	800ec42 <__d2b+0x72>
 800ec7e:	bf00      	nop
 800ec80:	08010638 	.word	0x08010638
 800ec84:	080106c8 	.word	0x080106c8

0800ec88 <__ratio>:
 800ec88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec8c:	4688      	mov	r8, r1
 800ec8e:	4669      	mov	r1, sp
 800ec90:	4681      	mov	r9, r0
 800ec92:	f7ff ff49 	bl	800eb28 <__b2d>
 800ec96:	460f      	mov	r7, r1
 800ec98:	4604      	mov	r4, r0
 800ec9a:	460d      	mov	r5, r1
 800ec9c:	4640      	mov	r0, r8
 800ec9e:	a901      	add	r1, sp, #4
 800eca0:	f7ff ff42 	bl	800eb28 <__b2d>
 800eca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eca8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ecac:	468b      	mov	fp, r1
 800ecae:	eba3 0c02 	sub.w	ip, r3, r2
 800ecb2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ecb6:	1a9b      	subs	r3, r3, r2
 800ecb8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	bfd5      	itete	le
 800ecc0:	460a      	movle	r2, r1
 800ecc2:	462a      	movgt	r2, r5
 800ecc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ecc8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eccc:	bfd8      	it	le
 800ecce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ecd2:	465b      	mov	r3, fp
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	4639      	mov	r1, r7
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f7f1 fd93 	bl	8000804 <__aeabi_ddiv>
 800ecde:	b003      	add	sp, #12
 800ece0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ece4 <__copybits>:
 800ece4:	3901      	subs	r1, #1
 800ece6:	b570      	push	{r4, r5, r6, lr}
 800ece8:	1149      	asrs	r1, r1, #5
 800ecea:	6914      	ldr	r4, [r2, #16]
 800ecec:	3101      	adds	r1, #1
 800ecee:	f102 0314 	add.w	r3, r2, #20
 800ecf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ecf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ecfa:	1f05      	subs	r5, r0, #4
 800ecfc:	42a3      	cmp	r3, r4
 800ecfe:	d30c      	bcc.n	800ed1a <__copybits+0x36>
 800ed00:	1aa3      	subs	r3, r4, r2
 800ed02:	3b11      	subs	r3, #17
 800ed04:	f023 0303 	bic.w	r3, r3, #3
 800ed08:	3211      	adds	r2, #17
 800ed0a:	42a2      	cmp	r2, r4
 800ed0c:	bf88      	it	hi
 800ed0e:	2300      	movhi	r3, #0
 800ed10:	4418      	add	r0, r3
 800ed12:	2300      	movs	r3, #0
 800ed14:	4288      	cmp	r0, r1
 800ed16:	d305      	bcc.n	800ed24 <__copybits+0x40>
 800ed18:	bd70      	pop	{r4, r5, r6, pc}
 800ed1a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed1e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed22:	e7eb      	b.n	800ecfc <__copybits+0x18>
 800ed24:	f840 3b04 	str.w	r3, [r0], #4
 800ed28:	e7f4      	b.n	800ed14 <__copybits+0x30>

0800ed2a <__any_on>:
 800ed2a:	f100 0214 	add.w	r2, r0, #20
 800ed2e:	6900      	ldr	r0, [r0, #16]
 800ed30:	114b      	asrs	r3, r1, #5
 800ed32:	4298      	cmp	r0, r3
 800ed34:	b510      	push	{r4, lr}
 800ed36:	db11      	blt.n	800ed5c <__any_on+0x32>
 800ed38:	dd0a      	ble.n	800ed50 <__any_on+0x26>
 800ed3a:	f011 011f 	ands.w	r1, r1, #31
 800ed3e:	d007      	beq.n	800ed50 <__any_on+0x26>
 800ed40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed44:	fa24 f001 	lsr.w	r0, r4, r1
 800ed48:	fa00 f101 	lsl.w	r1, r0, r1
 800ed4c:	428c      	cmp	r4, r1
 800ed4e:	d10b      	bne.n	800ed68 <__any_on+0x3e>
 800ed50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d803      	bhi.n	800ed60 <__any_on+0x36>
 800ed58:	2000      	movs	r0, #0
 800ed5a:	bd10      	pop	{r4, pc}
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	e7f7      	b.n	800ed50 <__any_on+0x26>
 800ed60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed64:	2900      	cmp	r1, #0
 800ed66:	d0f5      	beq.n	800ed54 <__any_on+0x2a>
 800ed68:	2001      	movs	r0, #1
 800ed6a:	e7f6      	b.n	800ed5a <__any_on+0x30>

0800ed6c <_calloc_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	fb02 f501 	mul.w	r5, r2, r1
 800ed72:	4629      	mov	r1, r5
 800ed74:	f7fc fb38 	bl	800b3e8 <_malloc_r>
 800ed78:	4604      	mov	r4, r0
 800ed7a:	b118      	cbz	r0, 800ed84 <_calloc_r+0x18>
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	2100      	movs	r1, #0
 800ed80:	f7fc fade 	bl	800b340 <memset>
 800ed84:	4620      	mov	r0, r4
 800ed86:	bd38      	pop	{r3, r4, r5, pc}

0800ed88 <__ssputs_r>:
 800ed88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8c:	688e      	ldr	r6, [r1, #8]
 800ed8e:	4682      	mov	sl, r0
 800ed90:	429e      	cmp	r6, r3
 800ed92:	460c      	mov	r4, r1
 800ed94:	4690      	mov	r8, r2
 800ed96:	461f      	mov	r7, r3
 800ed98:	d838      	bhi.n	800ee0c <__ssputs_r+0x84>
 800ed9a:	898a      	ldrh	r2, [r1, #12]
 800ed9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eda0:	d032      	beq.n	800ee08 <__ssputs_r+0x80>
 800eda2:	6825      	ldr	r5, [r4, #0]
 800eda4:	6909      	ldr	r1, [r1, #16]
 800eda6:	3301      	adds	r3, #1
 800eda8:	eba5 0901 	sub.w	r9, r5, r1
 800edac:	6965      	ldr	r5, [r4, #20]
 800edae:	444b      	add	r3, r9
 800edb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edb8:	106d      	asrs	r5, r5, #1
 800edba:	429d      	cmp	r5, r3
 800edbc:	bf38      	it	cc
 800edbe:	461d      	movcc	r5, r3
 800edc0:	0553      	lsls	r3, r2, #21
 800edc2:	d531      	bpl.n	800ee28 <__ssputs_r+0xa0>
 800edc4:	4629      	mov	r1, r5
 800edc6:	f7fc fb0f 	bl	800b3e8 <_malloc_r>
 800edca:	4606      	mov	r6, r0
 800edcc:	b950      	cbnz	r0, 800ede4 <__ssputs_r+0x5c>
 800edce:	230c      	movs	r3, #12
 800edd0:	f04f 30ff 	mov.w	r0, #4294967295
 800edd4:	f8ca 3000 	str.w	r3, [sl]
 800edd8:	89a3      	ldrh	r3, [r4, #12]
 800edda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edde:	81a3      	strh	r3, [r4, #12]
 800ede0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ede4:	464a      	mov	r2, r9
 800ede6:	6921      	ldr	r1, [r4, #16]
 800ede8:	f7ff faee 	bl	800e3c8 <memcpy>
 800edec:	89a3      	ldrh	r3, [r4, #12]
 800edee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800edf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edf6:	81a3      	strh	r3, [r4, #12]
 800edf8:	6126      	str	r6, [r4, #16]
 800edfa:	444e      	add	r6, r9
 800edfc:	6026      	str	r6, [r4, #0]
 800edfe:	463e      	mov	r6, r7
 800ee00:	6165      	str	r5, [r4, #20]
 800ee02:	eba5 0509 	sub.w	r5, r5, r9
 800ee06:	60a5      	str	r5, [r4, #8]
 800ee08:	42be      	cmp	r6, r7
 800ee0a:	d900      	bls.n	800ee0e <__ssputs_r+0x86>
 800ee0c:	463e      	mov	r6, r7
 800ee0e:	4632      	mov	r2, r6
 800ee10:	4641      	mov	r1, r8
 800ee12:	6820      	ldr	r0, [r4, #0]
 800ee14:	f000 f96d 	bl	800f0f2 <memmove>
 800ee18:	68a3      	ldr	r3, [r4, #8]
 800ee1a:	6822      	ldr	r2, [r4, #0]
 800ee1c:	1b9b      	subs	r3, r3, r6
 800ee1e:	4432      	add	r2, r6
 800ee20:	2000      	movs	r0, #0
 800ee22:	60a3      	str	r3, [r4, #8]
 800ee24:	6022      	str	r2, [r4, #0]
 800ee26:	e7db      	b.n	800ede0 <__ssputs_r+0x58>
 800ee28:	462a      	mov	r2, r5
 800ee2a:	f000 f97c 	bl	800f126 <_realloc_r>
 800ee2e:	4606      	mov	r6, r0
 800ee30:	2800      	cmp	r0, #0
 800ee32:	d1e1      	bne.n	800edf8 <__ssputs_r+0x70>
 800ee34:	4650      	mov	r0, sl
 800ee36:	6921      	ldr	r1, [r4, #16]
 800ee38:	f7fc fa8a 	bl	800b350 <_free_r>
 800ee3c:	e7c7      	b.n	800edce <__ssputs_r+0x46>
	...

0800ee40 <_svfiprintf_r>:
 800ee40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee44:	4698      	mov	r8, r3
 800ee46:	898b      	ldrh	r3, [r1, #12]
 800ee48:	4607      	mov	r7, r0
 800ee4a:	061b      	lsls	r3, r3, #24
 800ee4c:	460d      	mov	r5, r1
 800ee4e:	4614      	mov	r4, r2
 800ee50:	b09d      	sub	sp, #116	; 0x74
 800ee52:	d50e      	bpl.n	800ee72 <_svfiprintf_r+0x32>
 800ee54:	690b      	ldr	r3, [r1, #16]
 800ee56:	b963      	cbnz	r3, 800ee72 <_svfiprintf_r+0x32>
 800ee58:	2140      	movs	r1, #64	; 0x40
 800ee5a:	f7fc fac5 	bl	800b3e8 <_malloc_r>
 800ee5e:	6028      	str	r0, [r5, #0]
 800ee60:	6128      	str	r0, [r5, #16]
 800ee62:	b920      	cbnz	r0, 800ee6e <_svfiprintf_r+0x2e>
 800ee64:	230c      	movs	r3, #12
 800ee66:	603b      	str	r3, [r7, #0]
 800ee68:	f04f 30ff 	mov.w	r0, #4294967295
 800ee6c:	e0d1      	b.n	800f012 <_svfiprintf_r+0x1d2>
 800ee6e:	2340      	movs	r3, #64	; 0x40
 800ee70:	616b      	str	r3, [r5, #20]
 800ee72:	2300      	movs	r3, #0
 800ee74:	9309      	str	r3, [sp, #36]	; 0x24
 800ee76:	2320      	movs	r3, #32
 800ee78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee7c:	2330      	movs	r3, #48	; 0x30
 800ee7e:	f04f 0901 	mov.w	r9, #1
 800ee82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f02c <_svfiprintf_r+0x1ec>
 800ee8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee8e:	4623      	mov	r3, r4
 800ee90:	469a      	mov	sl, r3
 800ee92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee96:	b10a      	cbz	r2, 800ee9c <_svfiprintf_r+0x5c>
 800ee98:	2a25      	cmp	r2, #37	; 0x25
 800ee9a:	d1f9      	bne.n	800ee90 <_svfiprintf_r+0x50>
 800ee9c:	ebba 0b04 	subs.w	fp, sl, r4
 800eea0:	d00b      	beq.n	800eeba <_svfiprintf_r+0x7a>
 800eea2:	465b      	mov	r3, fp
 800eea4:	4622      	mov	r2, r4
 800eea6:	4629      	mov	r1, r5
 800eea8:	4638      	mov	r0, r7
 800eeaa:	f7ff ff6d 	bl	800ed88 <__ssputs_r>
 800eeae:	3001      	adds	r0, #1
 800eeb0:	f000 80aa 	beq.w	800f008 <_svfiprintf_r+0x1c8>
 800eeb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eeb6:	445a      	add	r2, fp
 800eeb8:	9209      	str	r2, [sp, #36]	; 0x24
 800eeba:	f89a 3000 	ldrb.w	r3, [sl]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f000 80a2 	beq.w	800f008 <_svfiprintf_r+0x1c8>
 800eec4:	2300      	movs	r3, #0
 800eec6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eece:	f10a 0a01 	add.w	sl, sl, #1
 800eed2:	9304      	str	r3, [sp, #16]
 800eed4:	9307      	str	r3, [sp, #28]
 800eed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eeda:	931a      	str	r3, [sp, #104]	; 0x68
 800eedc:	4654      	mov	r4, sl
 800eede:	2205      	movs	r2, #5
 800eee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee4:	4851      	ldr	r0, [pc, #324]	; (800f02c <_svfiprintf_r+0x1ec>)
 800eee6:	f7ff fa61 	bl	800e3ac <memchr>
 800eeea:	9a04      	ldr	r2, [sp, #16]
 800eeec:	b9d8      	cbnz	r0, 800ef26 <_svfiprintf_r+0xe6>
 800eeee:	06d0      	lsls	r0, r2, #27
 800eef0:	bf44      	itt	mi
 800eef2:	2320      	movmi	r3, #32
 800eef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eef8:	0711      	lsls	r1, r2, #28
 800eefa:	bf44      	itt	mi
 800eefc:	232b      	movmi	r3, #43	; 0x2b
 800eefe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef02:	f89a 3000 	ldrb.w	r3, [sl]
 800ef06:	2b2a      	cmp	r3, #42	; 0x2a
 800ef08:	d015      	beq.n	800ef36 <_svfiprintf_r+0xf6>
 800ef0a:	4654      	mov	r4, sl
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	f04f 0c0a 	mov.w	ip, #10
 800ef12:	9a07      	ldr	r2, [sp, #28]
 800ef14:	4621      	mov	r1, r4
 800ef16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef1a:	3b30      	subs	r3, #48	; 0x30
 800ef1c:	2b09      	cmp	r3, #9
 800ef1e:	d94e      	bls.n	800efbe <_svfiprintf_r+0x17e>
 800ef20:	b1b0      	cbz	r0, 800ef50 <_svfiprintf_r+0x110>
 800ef22:	9207      	str	r2, [sp, #28]
 800ef24:	e014      	b.n	800ef50 <_svfiprintf_r+0x110>
 800ef26:	eba0 0308 	sub.w	r3, r0, r8
 800ef2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	46a2      	mov	sl, r4
 800ef32:	9304      	str	r3, [sp, #16]
 800ef34:	e7d2      	b.n	800eedc <_svfiprintf_r+0x9c>
 800ef36:	9b03      	ldr	r3, [sp, #12]
 800ef38:	1d19      	adds	r1, r3, #4
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	9103      	str	r1, [sp, #12]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	bfbb      	ittet	lt
 800ef42:	425b      	neglt	r3, r3
 800ef44:	f042 0202 	orrlt.w	r2, r2, #2
 800ef48:	9307      	strge	r3, [sp, #28]
 800ef4a:	9307      	strlt	r3, [sp, #28]
 800ef4c:	bfb8      	it	lt
 800ef4e:	9204      	strlt	r2, [sp, #16]
 800ef50:	7823      	ldrb	r3, [r4, #0]
 800ef52:	2b2e      	cmp	r3, #46	; 0x2e
 800ef54:	d10c      	bne.n	800ef70 <_svfiprintf_r+0x130>
 800ef56:	7863      	ldrb	r3, [r4, #1]
 800ef58:	2b2a      	cmp	r3, #42	; 0x2a
 800ef5a:	d135      	bne.n	800efc8 <_svfiprintf_r+0x188>
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	3402      	adds	r4, #2
 800ef60:	1d1a      	adds	r2, r3, #4
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	9203      	str	r2, [sp, #12]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	bfb8      	it	lt
 800ef6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef6e:	9305      	str	r3, [sp, #20]
 800ef70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f03c <_svfiprintf_r+0x1fc>
 800ef74:	2203      	movs	r2, #3
 800ef76:	4650      	mov	r0, sl
 800ef78:	7821      	ldrb	r1, [r4, #0]
 800ef7a:	f7ff fa17 	bl	800e3ac <memchr>
 800ef7e:	b140      	cbz	r0, 800ef92 <_svfiprintf_r+0x152>
 800ef80:	2340      	movs	r3, #64	; 0x40
 800ef82:	eba0 000a 	sub.w	r0, r0, sl
 800ef86:	fa03 f000 	lsl.w	r0, r3, r0
 800ef8a:	9b04      	ldr	r3, [sp, #16]
 800ef8c:	3401      	adds	r4, #1
 800ef8e:	4303      	orrs	r3, r0
 800ef90:	9304      	str	r3, [sp, #16]
 800ef92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef96:	2206      	movs	r2, #6
 800ef98:	4825      	ldr	r0, [pc, #148]	; (800f030 <_svfiprintf_r+0x1f0>)
 800ef9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef9e:	f7ff fa05 	bl	800e3ac <memchr>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d038      	beq.n	800f018 <_svfiprintf_r+0x1d8>
 800efa6:	4b23      	ldr	r3, [pc, #140]	; (800f034 <_svfiprintf_r+0x1f4>)
 800efa8:	bb1b      	cbnz	r3, 800eff2 <_svfiprintf_r+0x1b2>
 800efaa:	9b03      	ldr	r3, [sp, #12]
 800efac:	3307      	adds	r3, #7
 800efae:	f023 0307 	bic.w	r3, r3, #7
 800efb2:	3308      	adds	r3, #8
 800efb4:	9303      	str	r3, [sp, #12]
 800efb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb8:	4433      	add	r3, r6
 800efba:	9309      	str	r3, [sp, #36]	; 0x24
 800efbc:	e767      	b.n	800ee8e <_svfiprintf_r+0x4e>
 800efbe:	460c      	mov	r4, r1
 800efc0:	2001      	movs	r0, #1
 800efc2:	fb0c 3202 	mla	r2, ip, r2, r3
 800efc6:	e7a5      	b.n	800ef14 <_svfiprintf_r+0xd4>
 800efc8:	2300      	movs	r3, #0
 800efca:	f04f 0c0a 	mov.w	ip, #10
 800efce:	4619      	mov	r1, r3
 800efd0:	3401      	adds	r4, #1
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	4620      	mov	r0, r4
 800efd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efda:	3a30      	subs	r2, #48	; 0x30
 800efdc:	2a09      	cmp	r2, #9
 800efde:	d903      	bls.n	800efe8 <_svfiprintf_r+0x1a8>
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d0c5      	beq.n	800ef70 <_svfiprintf_r+0x130>
 800efe4:	9105      	str	r1, [sp, #20]
 800efe6:	e7c3      	b.n	800ef70 <_svfiprintf_r+0x130>
 800efe8:	4604      	mov	r4, r0
 800efea:	2301      	movs	r3, #1
 800efec:	fb0c 2101 	mla	r1, ip, r1, r2
 800eff0:	e7f0      	b.n	800efd4 <_svfiprintf_r+0x194>
 800eff2:	ab03      	add	r3, sp, #12
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	462a      	mov	r2, r5
 800eff8:	4638      	mov	r0, r7
 800effa:	4b0f      	ldr	r3, [pc, #60]	; (800f038 <_svfiprintf_r+0x1f8>)
 800effc:	a904      	add	r1, sp, #16
 800effe:	f7fc faeb 	bl	800b5d8 <_printf_float>
 800f002:	1c42      	adds	r2, r0, #1
 800f004:	4606      	mov	r6, r0
 800f006:	d1d6      	bne.n	800efb6 <_svfiprintf_r+0x176>
 800f008:	89ab      	ldrh	r3, [r5, #12]
 800f00a:	065b      	lsls	r3, r3, #25
 800f00c:	f53f af2c 	bmi.w	800ee68 <_svfiprintf_r+0x28>
 800f010:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f012:	b01d      	add	sp, #116	; 0x74
 800f014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f018:	ab03      	add	r3, sp, #12
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	462a      	mov	r2, r5
 800f01e:	4638      	mov	r0, r7
 800f020:	4b05      	ldr	r3, [pc, #20]	; (800f038 <_svfiprintf_r+0x1f8>)
 800f022:	a904      	add	r1, sp, #16
 800f024:	f7fc fd74 	bl	800bb10 <_printf_i>
 800f028:	e7eb      	b.n	800f002 <_svfiprintf_r+0x1c2>
 800f02a:	bf00      	nop
 800f02c:	08010824 	.word	0x08010824
 800f030:	0801082e 	.word	0x0801082e
 800f034:	0800b5d9 	.word	0x0800b5d9
 800f038:	0800ed89 	.word	0x0800ed89
 800f03c:	0801082a 	.word	0x0801082a

0800f040 <nan>:
 800f040:	2000      	movs	r0, #0
 800f042:	4901      	ldr	r1, [pc, #4]	; (800f048 <nan+0x8>)
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	7ff80000 	.word	0x7ff80000

0800f04c <strncmp>:
 800f04c:	b510      	push	{r4, lr}
 800f04e:	b16a      	cbz	r2, 800f06c <strncmp+0x20>
 800f050:	3901      	subs	r1, #1
 800f052:	1884      	adds	r4, r0, r2
 800f054:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f058:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d103      	bne.n	800f068 <strncmp+0x1c>
 800f060:	42a0      	cmp	r0, r4
 800f062:	d001      	beq.n	800f068 <strncmp+0x1c>
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1f5      	bne.n	800f054 <strncmp+0x8>
 800f068:	1a98      	subs	r0, r3, r2
 800f06a:	bd10      	pop	{r4, pc}
 800f06c:	4610      	mov	r0, r2
 800f06e:	e7fc      	b.n	800f06a <strncmp+0x1e>

0800f070 <__ascii_wctomb>:
 800f070:	4603      	mov	r3, r0
 800f072:	4608      	mov	r0, r1
 800f074:	b141      	cbz	r1, 800f088 <__ascii_wctomb+0x18>
 800f076:	2aff      	cmp	r2, #255	; 0xff
 800f078:	d904      	bls.n	800f084 <__ascii_wctomb+0x14>
 800f07a:	228a      	movs	r2, #138	; 0x8a
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295
 800f080:	601a      	str	r2, [r3, #0]
 800f082:	4770      	bx	lr
 800f084:	2001      	movs	r0, #1
 800f086:	700a      	strb	r2, [r1, #0]
 800f088:	4770      	bx	lr
	...

0800f08c <__assert_func>:
 800f08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f08e:	4614      	mov	r4, r2
 800f090:	461a      	mov	r2, r3
 800f092:	4b09      	ldr	r3, [pc, #36]	; (800f0b8 <__assert_func+0x2c>)
 800f094:	4605      	mov	r5, r0
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68d8      	ldr	r0, [r3, #12]
 800f09a:	b14c      	cbz	r4, 800f0b0 <__assert_func+0x24>
 800f09c:	4b07      	ldr	r3, [pc, #28]	; (800f0bc <__assert_func+0x30>)
 800f09e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0a2:	9100      	str	r1, [sp, #0]
 800f0a4:	462b      	mov	r3, r5
 800f0a6:	4906      	ldr	r1, [pc, #24]	; (800f0c0 <__assert_func+0x34>)
 800f0a8:	f000 f80e 	bl	800f0c8 <fiprintf>
 800f0ac:	f000 fa78 	bl	800f5a0 <abort>
 800f0b0:	4b04      	ldr	r3, [pc, #16]	; (800f0c4 <__assert_func+0x38>)
 800f0b2:	461c      	mov	r4, r3
 800f0b4:	e7f3      	b.n	800f09e <__assert_func+0x12>
 800f0b6:	bf00      	nop
 800f0b8:	20000048 	.word	0x20000048
 800f0bc:	08010835 	.word	0x08010835
 800f0c0:	08010842 	.word	0x08010842
 800f0c4:	08010870 	.word	0x08010870

0800f0c8 <fiprintf>:
 800f0c8:	b40e      	push	{r1, r2, r3}
 800f0ca:	b503      	push	{r0, r1, lr}
 800f0cc:	4601      	mov	r1, r0
 800f0ce:	ab03      	add	r3, sp, #12
 800f0d0:	4805      	ldr	r0, [pc, #20]	; (800f0e8 <fiprintf+0x20>)
 800f0d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0d6:	6800      	ldr	r0, [r0, #0]
 800f0d8:	9301      	str	r3, [sp, #4]
 800f0da:	f000 f871 	bl	800f1c0 <_vfiprintf_r>
 800f0de:	b002      	add	sp, #8
 800f0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0e4:	b003      	add	sp, #12
 800f0e6:	4770      	bx	lr
 800f0e8:	20000048 	.word	0x20000048

0800f0ec <__retarget_lock_init_recursive>:
 800f0ec:	4770      	bx	lr

0800f0ee <__retarget_lock_acquire_recursive>:
 800f0ee:	4770      	bx	lr

0800f0f0 <__retarget_lock_release_recursive>:
 800f0f0:	4770      	bx	lr

0800f0f2 <memmove>:
 800f0f2:	4288      	cmp	r0, r1
 800f0f4:	b510      	push	{r4, lr}
 800f0f6:	eb01 0402 	add.w	r4, r1, r2
 800f0fa:	d902      	bls.n	800f102 <memmove+0x10>
 800f0fc:	4284      	cmp	r4, r0
 800f0fe:	4623      	mov	r3, r4
 800f100:	d807      	bhi.n	800f112 <memmove+0x20>
 800f102:	1e43      	subs	r3, r0, #1
 800f104:	42a1      	cmp	r1, r4
 800f106:	d008      	beq.n	800f11a <memmove+0x28>
 800f108:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f10c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f110:	e7f8      	b.n	800f104 <memmove+0x12>
 800f112:	4601      	mov	r1, r0
 800f114:	4402      	add	r2, r0
 800f116:	428a      	cmp	r2, r1
 800f118:	d100      	bne.n	800f11c <memmove+0x2a>
 800f11a:	bd10      	pop	{r4, pc}
 800f11c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f120:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f124:	e7f7      	b.n	800f116 <memmove+0x24>

0800f126 <_realloc_r>:
 800f126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f128:	4607      	mov	r7, r0
 800f12a:	4614      	mov	r4, r2
 800f12c:	460e      	mov	r6, r1
 800f12e:	b921      	cbnz	r1, 800f13a <_realloc_r+0x14>
 800f130:	4611      	mov	r1, r2
 800f132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f136:	f7fc b957 	b.w	800b3e8 <_malloc_r>
 800f13a:	b922      	cbnz	r2, 800f146 <_realloc_r+0x20>
 800f13c:	f7fc f908 	bl	800b350 <_free_r>
 800f140:	4625      	mov	r5, r4
 800f142:	4628      	mov	r0, r5
 800f144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f146:	f000 fc4f 	bl	800f9e8 <_malloc_usable_size_r>
 800f14a:	42a0      	cmp	r0, r4
 800f14c:	d20f      	bcs.n	800f16e <_realloc_r+0x48>
 800f14e:	4621      	mov	r1, r4
 800f150:	4638      	mov	r0, r7
 800f152:	f7fc f949 	bl	800b3e8 <_malloc_r>
 800f156:	4605      	mov	r5, r0
 800f158:	2800      	cmp	r0, #0
 800f15a:	d0f2      	beq.n	800f142 <_realloc_r+0x1c>
 800f15c:	4631      	mov	r1, r6
 800f15e:	4622      	mov	r2, r4
 800f160:	f7ff f932 	bl	800e3c8 <memcpy>
 800f164:	4631      	mov	r1, r6
 800f166:	4638      	mov	r0, r7
 800f168:	f7fc f8f2 	bl	800b350 <_free_r>
 800f16c:	e7e9      	b.n	800f142 <_realloc_r+0x1c>
 800f16e:	4635      	mov	r5, r6
 800f170:	e7e7      	b.n	800f142 <_realloc_r+0x1c>

0800f172 <__sfputc_r>:
 800f172:	6893      	ldr	r3, [r2, #8]
 800f174:	b410      	push	{r4}
 800f176:	3b01      	subs	r3, #1
 800f178:	2b00      	cmp	r3, #0
 800f17a:	6093      	str	r3, [r2, #8]
 800f17c:	da07      	bge.n	800f18e <__sfputc_r+0x1c>
 800f17e:	6994      	ldr	r4, [r2, #24]
 800f180:	42a3      	cmp	r3, r4
 800f182:	db01      	blt.n	800f188 <__sfputc_r+0x16>
 800f184:	290a      	cmp	r1, #10
 800f186:	d102      	bne.n	800f18e <__sfputc_r+0x1c>
 800f188:	bc10      	pop	{r4}
 800f18a:	f000 b949 	b.w	800f420 <__swbuf_r>
 800f18e:	6813      	ldr	r3, [r2, #0]
 800f190:	1c58      	adds	r0, r3, #1
 800f192:	6010      	str	r0, [r2, #0]
 800f194:	7019      	strb	r1, [r3, #0]
 800f196:	4608      	mov	r0, r1
 800f198:	bc10      	pop	{r4}
 800f19a:	4770      	bx	lr

0800f19c <__sfputs_r>:
 800f19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19e:	4606      	mov	r6, r0
 800f1a0:	460f      	mov	r7, r1
 800f1a2:	4614      	mov	r4, r2
 800f1a4:	18d5      	adds	r5, r2, r3
 800f1a6:	42ac      	cmp	r4, r5
 800f1a8:	d101      	bne.n	800f1ae <__sfputs_r+0x12>
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	e007      	b.n	800f1be <__sfputs_r+0x22>
 800f1ae:	463a      	mov	r2, r7
 800f1b0:	4630      	mov	r0, r6
 800f1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1b6:	f7ff ffdc 	bl	800f172 <__sfputc_r>
 800f1ba:	1c43      	adds	r3, r0, #1
 800f1bc:	d1f3      	bne.n	800f1a6 <__sfputs_r+0xa>
 800f1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f1c0 <_vfiprintf_r>:
 800f1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1c4:	460d      	mov	r5, r1
 800f1c6:	4614      	mov	r4, r2
 800f1c8:	4698      	mov	r8, r3
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	b09d      	sub	sp, #116	; 0x74
 800f1ce:	b118      	cbz	r0, 800f1d8 <_vfiprintf_r+0x18>
 800f1d0:	6983      	ldr	r3, [r0, #24]
 800f1d2:	b90b      	cbnz	r3, 800f1d8 <_vfiprintf_r+0x18>
 800f1d4:	f000 fb06 	bl	800f7e4 <__sinit>
 800f1d8:	4b89      	ldr	r3, [pc, #548]	; (800f400 <_vfiprintf_r+0x240>)
 800f1da:	429d      	cmp	r5, r3
 800f1dc:	d11b      	bne.n	800f216 <_vfiprintf_r+0x56>
 800f1de:	6875      	ldr	r5, [r6, #4]
 800f1e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1e2:	07d9      	lsls	r1, r3, #31
 800f1e4:	d405      	bmi.n	800f1f2 <_vfiprintf_r+0x32>
 800f1e6:	89ab      	ldrh	r3, [r5, #12]
 800f1e8:	059a      	lsls	r2, r3, #22
 800f1ea:	d402      	bmi.n	800f1f2 <_vfiprintf_r+0x32>
 800f1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ee:	f7ff ff7e 	bl	800f0ee <__retarget_lock_acquire_recursive>
 800f1f2:	89ab      	ldrh	r3, [r5, #12]
 800f1f4:	071b      	lsls	r3, r3, #28
 800f1f6:	d501      	bpl.n	800f1fc <_vfiprintf_r+0x3c>
 800f1f8:	692b      	ldr	r3, [r5, #16]
 800f1fa:	b9eb      	cbnz	r3, 800f238 <_vfiprintf_r+0x78>
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	4630      	mov	r0, r6
 800f200:	f000 f960 	bl	800f4c4 <__swsetup_r>
 800f204:	b1c0      	cbz	r0, 800f238 <_vfiprintf_r+0x78>
 800f206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f208:	07dc      	lsls	r4, r3, #31
 800f20a:	d50e      	bpl.n	800f22a <_vfiprintf_r+0x6a>
 800f20c:	f04f 30ff 	mov.w	r0, #4294967295
 800f210:	b01d      	add	sp, #116	; 0x74
 800f212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f216:	4b7b      	ldr	r3, [pc, #492]	; (800f404 <_vfiprintf_r+0x244>)
 800f218:	429d      	cmp	r5, r3
 800f21a:	d101      	bne.n	800f220 <_vfiprintf_r+0x60>
 800f21c:	68b5      	ldr	r5, [r6, #8]
 800f21e:	e7df      	b.n	800f1e0 <_vfiprintf_r+0x20>
 800f220:	4b79      	ldr	r3, [pc, #484]	; (800f408 <_vfiprintf_r+0x248>)
 800f222:	429d      	cmp	r5, r3
 800f224:	bf08      	it	eq
 800f226:	68f5      	ldreq	r5, [r6, #12]
 800f228:	e7da      	b.n	800f1e0 <_vfiprintf_r+0x20>
 800f22a:	89ab      	ldrh	r3, [r5, #12]
 800f22c:	0598      	lsls	r0, r3, #22
 800f22e:	d4ed      	bmi.n	800f20c <_vfiprintf_r+0x4c>
 800f230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f232:	f7ff ff5d 	bl	800f0f0 <__retarget_lock_release_recursive>
 800f236:	e7e9      	b.n	800f20c <_vfiprintf_r+0x4c>
 800f238:	2300      	movs	r3, #0
 800f23a:	9309      	str	r3, [sp, #36]	; 0x24
 800f23c:	2320      	movs	r3, #32
 800f23e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f242:	2330      	movs	r3, #48	; 0x30
 800f244:	f04f 0901 	mov.w	r9, #1
 800f248:	f8cd 800c 	str.w	r8, [sp, #12]
 800f24c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f40c <_vfiprintf_r+0x24c>
 800f250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f254:	4623      	mov	r3, r4
 800f256:	469a      	mov	sl, r3
 800f258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f25c:	b10a      	cbz	r2, 800f262 <_vfiprintf_r+0xa2>
 800f25e:	2a25      	cmp	r2, #37	; 0x25
 800f260:	d1f9      	bne.n	800f256 <_vfiprintf_r+0x96>
 800f262:	ebba 0b04 	subs.w	fp, sl, r4
 800f266:	d00b      	beq.n	800f280 <_vfiprintf_r+0xc0>
 800f268:	465b      	mov	r3, fp
 800f26a:	4622      	mov	r2, r4
 800f26c:	4629      	mov	r1, r5
 800f26e:	4630      	mov	r0, r6
 800f270:	f7ff ff94 	bl	800f19c <__sfputs_r>
 800f274:	3001      	adds	r0, #1
 800f276:	f000 80aa 	beq.w	800f3ce <_vfiprintf_r+0x20e>
 800f27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f27c:	445a      	add	r2, fp
 800f27e:	9209      	str	r2, [sp, #36]	; 0x24
 800f280:	f89a 3000 	ldrb.w	r3, [sl]
 800f284:	2b00      	cmp	r3, #0
 800f286:	f000 80a2 	beq.w	800f3ce <_vfiprintf_r+0x20e>
 800f28a:	2300      	movs	r3, #0
 800f28c:	f04f 32ff 	mov.w	r2, #4294967295
 800f290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f294:	f10a 0a01 	add.w	sl, sl, #1
 800f298:	9304      	str	r3, [sp, #16]
 800f29a:	9307      	str	r3, [sp, #28]
 800f29c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2a0:	931a      	str	r3, [sp, #104]	; 0x68
 800f2a2:	4654      	mov	r4, sl
 800f2a4:	2205      	movs	r2, #5
 800f2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2aa:	4858      	ldr	r0, [pc, #352]	; (800f40c <_vfiprintf_r+0x24c>)
 800f2ac:	f7ff f87e 	bl	800e3ac <memchr>
 800f2b0:	9a04      	ldr	r2, [sp, #16]
 800f2b2:	b9d8      	cbnz	r0, 800f2ec <_vfiprintf_r+0x12c>
 800f2b4:	06d1      	lsls	r1, r2, #27
 800f2b6:	bf44      	itt	mi
 800f2b8:	2320      	movmi	r3, #32
 800f2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2be:	0713      	lsls	r3, r2, #28
 800f2c0:	bf44      	itt	mi
 800f2c2:	232b      	movmi	r3, #43	; 0x2b
 800f2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f2ce:	d015      	beq.n	800f2fc <_vfiprintf_r+0x13c>
 800f2d0:	4654      	mov	r4, sl
 800f2d2:	2000      	movs	r0, #0
 800f2d4:	f04f 0c0a 	mov.w	ip, #10
 800f2d8:	9a07      	ldr	r2, [sp, #28]
 800f2da:	4621      	mov	r1, r4
 800f2dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2e0:	3b30      	subs	r3, #48	; 0x30
 800f2e2:	2b09      	cmp	r3, #9
 800f2e4:	d94e      	bls.n	800f384 <_vfiprintf_r+0x1c4>
 800f2e6:	b1b0      	cbz	r0, 800f316 <_vfiprintf_r+0x156>
 800f2e8:	9207      	str	r2, [sp, #28]
 800f2ea:	e014      	b.n	800f316 <_vfiprintf_r+0x156>
 800f2ec:	eba0 0308 	sub.w	r3, r0, r8
 800f2f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	46a2      	mov	sl, r4
 800f2f8:	9304      	str	r3, [sp, #16]
 800f2fa:	e7d2      	b.n	800f2a2 <_vfiprintf_r+0xe2>
 800f2fc:	9b03      	ldr	r3, [sp, #12]
 800f2fe:	1d19      	adds	r1, r3, #4
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	9103      	str	r1, [sp, #12]
 800f304:	2b00      	cmp	r3, #0
 800f306:	bfbb      	ittet	lt
 800f308:	425b      	neglt	r3, r3
 800f30a:	f042 0202 	orrlt.w	r2, r2, #2
 800f30e:	9307      	strge	r3, [sp, #28]
 800f310:	9307      	strlt	r3, [sp, #28]
 800f312:	bfb8      	it	lt
 800f314:	9204      	strlt	r2, [sp, #16]
 800f316:	7823      	ldrb	r3, [r4, #0]
 800f318:	2b2e      	cmp	r3, #46	; 0x2e
 800f31a:	d10c      	bne.n	800f336 <_vfiprintf_r+0x176>
 800f31c:	7863      	ldrb	r3, [r4, #1]
 800f31e:	2b2a      	cmp	r3, #42	; 0x2a
 800f320:	d135      	bne.n	800f38e <_vfiprintf_r+0x1ce>
 800f322:	9b03      	ldr	r3, [sp, #12]
 800f324:	3402      	adds	r4, #2
 800f326:	1d1a      	adds	r2, r3, #4
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	9203      	str	r2, [sp, #12]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	bfb8      	it	lt
 800f330:	f04f 33ff 	movlt.w	r3, #4294967295
 800f334:	9305      	str	r3, [sp, #20]
 800f336:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f41c <_vfiprintf_r+0x25c>
 800f33a:	2203      	movs	r2, #3
 800f33c:	4650      	mov	r0, sl
 800f33e:	7821      	ldrb	r1, [r4, #0]
 800f340:	f7ff f834 	bl	800e3ac <memchr>
 800f344:	b140      	cbz	r0, 800f358 <_vfiprintf_r+0x198>
 800f346:	2340      	movs	r3, #64	; 0x40
 800f348:	eba0 000a 	sub.w	r0, r0, sl
 800f34c:	fa03 f000 	lsl.w	r0, r3, r0
 800f350:	9b04      	ldr	r3, [sp, #16]
 800f352:	3401      	adds	r4, #1
 800f354:	4303      	orrs	r3, r0
 800f356:	9304      	str	r3, [sp, #16]
 800f358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35c:	2206      	movs	r2, #6
 800f35e:	482c      	ldr	r0, [pc, #176]	; (800f410 <_vfiprintf_r+0x250>)
 800f360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f364:	f7ff f822 	bl	800e3ac <memchr>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d03f      	beq.n	800f3ec <_vfiprintf_r+0x22c>
 800f36c:	4b29      	ldr	r3, [pc, #164]	; (800f414 <_vfiprintf_r+0x254>)
 800f36e:	bb1b      	cbnz	r3, 800f3b8 <_vfiprintf_r+0x1f8>
 800f370:	9b03      	ldr	r3, [sp, #12]
 800f372:	3307      	adds	r3, #7
 800f374:	f023 0307 	bic.w	r3, r3, #7
 800f378:	3308      	adds	r3, #8
 800f37a:	9303      	str	r3, [sp, #12]
 800f37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f37e:	443b      	add	r3, r7
 800f380:	9309      	str	r3, [sp, #36]	; 0x24
 800f382:	e767      	b.n	800f254 <_vfiprintf_r+0x94>
 800f384:	460c      	mov	r4, r1
 800f386:	2001      	movs	r0, #1
 800f388:	fb0c 3202 	mla	r2, ip, r2, r3
 800f38c:	e7a5      	b.n	800f2da <_vfiprintf_r+0x11a>
 800f38e:	2300      	movs	r3, #0
 800f390:	f04f 0c0a 	mov.w	ip, #10
 800f394:	4619      	mov	r1, r3
 800f396:	3401      	adds	r4, #1
 800f398:	9305      	str	r3, [sp, #20]
 800f39a:	4620      	mov	r0, r4
 800f39c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3a0:	3a30      	subs	r2, #48	; 0x30
 800f3a2:	2a09      	cmp	r2, #9
 800f3a4:	d903      	bls.n	800f3ae <_vfiprintf_r+0x1ee>
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0c5      	beq.n	800f336 <_vfiprintf_r+0x176>
 800f3aa:	9105      	str	r1, [sp, #20]
 800f3ac:	e7c3      	b.n	800f336 <_vfiprintf_r+0x176>
 800f3ae:	4604      	mov	r4, r0
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3b6:	e7f0      	b.n	800f39a <_vfiprintf_r+0x1da>
 800f3b8:	ab03      	add	r3, sp, #12
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	462a      	mov	r2, r5
 800f3be:	4630      	mov	r0, r6
 800f3c0:	4b15      	ldr	r3, [pc, #84]	; (800f418 <_vfiprintf_r+0x258>)
 800f3c2:	a904      	add	r1, sp, #16
 800f3c4:	f7fc f908 	bl	800b5d8 <_printf_float>
 800f3c8:	4607      	mov	r7, r0
 800f3ca:	1c78      	adds	r0, r7, #1
 800f3cc:	d1d6      	bne.n	800f37c <_vfiprintf_r+0x1bc>
 800f3ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3d0:	07d9      	lsls	r1, r3, #31
 800f3d2:	d405      	bmi.n	800f3e0 <_vfiprintf_r+0x220>
 800f3d4:	89ab      	ldrh	r3, [r5, #12]
 800f3d6:	059a      	lsls	r2, r3, #22
 800f3d8:	d402      	bmi.n	800f3e0 <_vfiprintf_r+0x220>
 800f3da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3dc:	f7ff fe88 	bl	800f0f0 <__retarget_lock_release_recursive>
 800f3e0:	89ab      	ldrh	r3, [r5, #12]
 800f3e2:	065b      	lsls	r3, r3, #25
 800f3e4:	f53f af12 	bmi.w	800f20c <_vfiprintf_r+0x4c>
 800f3e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3ea:	e711      	b.n	800f210 <_vfiprintf_r+0x50>
 800f3ec:	ab03      	add	r3, sp, #12
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	462a      	mov	r2, r5
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	4b08      	ldr	r3, [pc, #32]	; (800f418 <_vfiprintf_r+0x258>)
 800f3f6:	a904      	add	r1, sp, #16
 800f3f8:	f7fc fb8a 	bl	800bb10 <_printf_i>
 800f3fc:	e7e4      	b.n	800f3c8 <_vfiprintf_r+0x208>
 800f3fe:	bf00      	nop
 800f400:	08010894 	.word	0x08010894
 800f404:	080108b4 	.word	0x080108b4
 800f408:	08010874 	.word	0x08010874
 800f40c:	08010824 	.word	0x08010824
 800f410:	0801082e 	.word	0x0801082e
 800f414:	0800b5d9 	.word	0x0800b5d9
 800f418:	0800f19d 	.word	0x0800f19d
 800f41c:	0801082a 	.word	0x0801082a

0800f420 <__swbuf_r>:
 800f420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f422:	460e      	mov	r6, r1
 800f424:	4614      	mov	r4, r2
 800f426:	4605      	mov	r5, r0
 800f428:	b118      	cbz	r0, 800f432 <__swbuf_r+0x12>
 800f42a:	6983      	ldr	r3, [r0, #24]
 800f42c:	b90b      	cbnz	r3, 800f432 <__swbuf_r+0x12>
 800f42e:	f000 f9d9 	bl	800f7e4 <__sinit>
 800f432:	4b21      	ldr	r3, [pc, #132]	; (800f4b8 <__swbuf_r+0x98>)
 800f434:	429c      	cmp	r4, r3
 800f436:	d12b      	bne.n	800f490 <__swbuf_r+0x70>
 800f438:	686c      	ldr	r4, [r5, #4]
 800f43a:	69a3      	ldr	r3, [r4, #24]
 800f43c:	60a3      	str	r3, [r4, #8]
 800f43e:	89a3      	ldrh	r3, [r4, #12]
 800f440:	071a      	lsls	r2, r3, #28
 800f442:	d52f      	bpl.n	800f4a4 <__swbuf_r+0x84>
 800f444:	6923      	ldr	r3, [r4, #16]
 800f446:	b36b      	cbz	r3, 800f4a4 <__swbuf_r+0x84>
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	6820      	ldr	r0, [r4, #0]
 800f44c:	b2f6      	uxtb	r6, r6
 800f44e:	1ac0      	subs	r0, r0, r3
 800f450:	6963      	ldr	r3, [r4, #20]
 800f452:	4637      	mov	r7, r6
 800f454:	4283      	cmp	r3, r0
 800f456:	dc04      	bgt.n	800f462 <__swbuf_r+0x42>
 800f458:	4621      	mov	r1, r4
 800f45a:	4628      	mov	r0, r5
 800f45c:	f000 f92e 	bl	800f6bc <_fflush_r>
 800f460:	bb30      	cbnz	r0, 800f4b0 <__swbuf_r+0x90>
 800f462:	68a3      	ldr	r3, [r4, #8]
 800f464:	3001      	adds	r0, #1
 800f466:	3b01      	subs	r3, #1
 800f468:	60a3      	str	r3, [r4, #8]
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	6022      	str	r2, [r4, #0]
 800f470:	701e      	strb	r6, [r3, #0]
 800f472:	6963      	ldr	r3, [r4, #20]
 800f474:	4283      	cmp	r3, r0
 800f476:	d004      	beq.n	800f482 <__swbuf_r+0x62>
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	07db      	lsls	r3, r3, #31
 800f47c:	d506      	bpl.n	800f48c <__swbuf_r+0x6c>
 800f47e:	2e0a      	cmp	r6, #10
 800f480:	d104      	bne.n	800f48c <__swbuf_r+0x6c>
 800f482:	4621      	mov	r1, r4
 800f484:	4628      	mov	r0, r5
 800f486:	f000 f919 	bl	800f6bc <_fflush_r>
 800f48a:	b988      	cbnz	r0, 800f4b0 <__swbuf_r+0x90>
 800f48c:	4638      	mov	r0, r7
 800f48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f490:	4b0a      	ldr	r3, [pc, #40]	; (800f4bc <__swbuf_r+0x9c>)
 800f492:	429c      	cmp	r4, r3
 800f494:	d101      	bne.n	800f49a <__swbuf_r+0x7a>
 800f496:	68ac      	ldr	r4, [r5, #8]
 800f498:	e7cf      	b.n	800f43a <__swbuf_r+0x1a>
 800f49a:	4b09      	ldr	r3, [pc, #36]	; (800f4c0 <__swbuf_r+0xa0>)
 800f49c:	429c      	cmp	r4, r3
 800f49e:	bf08      	it	eq
 800f4a0:	68ec      	ldreq	r4, [r5, #12]
 800f4a2:	e7ca      	b.n	800f43a <__swbuf_r+0x1a>
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	4628      	mov	r0, r5
 800f4a8:	f000 f80c 	bl	800f4c4 <__swsetup_r>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d0cb      	beq.n	800f448 <__swbuf_r+0x28>
 800f4b0:	f04f 37ff 	mov.w	r7, #4294967295
 800f4b4:	e7ea      	b.n	800f48c <__swbuf_r+0x6c>
 800f4b6:	bf00      	nop
 800f4b8:	08010894 	.word	0x08010894
 800f4bc:	080108b4 	.word	0x080108b4
 800f4c0:	08010874 	.word	0x08010874

0800f4c4 <__swsetup_r>:
 800f4c4:	4b32      	ldr	r3, [pc, #200]	; (800f590 <__swsetup_r+0xcc>)
 800f4c6:	b570      	push	{r4, r5, r6, lr}
 800f4c8:	681d      	ldr	r5, [r3, #0]
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	b125      	cbz	r5, 800f4da <__swsetup_r+0x16>
 800f4d0:	69ab      	ldr	r3, [r5, #24]
 800f4d2:	b913      	cbnz	r3, 800f4da <__swsetup_r+0x16>
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f000 f985 	bl	800f7e4 <__sinit>
 800f4da:	4b2e      	ldr	r3, [pc, #184]	; (800f594 <__swsetup_r+0xd0>)
 800f4dc:	429c      	cmp	r4, r3
 800f4de:	d10f      	bne.n	800f500 <__swsetup_r+0x3c>
 800f4e0:	686c      	ldr	r4, [r5, #4]
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4e8:	0719      	lsls	r1, r3, #28
 800f4ea:	d42c      	bmi.n	800f546 <__swsetup_r+0x82>
 800f4ec:	06dd      	lsls	r5, r3, #27
 800f4ee:	d411      	bmi.n	800f514 <__swsetup_r+0x50>
 800f4f0:	2309      	movs	r3, #9
 800f4f2:	6033      	str	r3, [r6, #0]
 800f4f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fc:	81a3      	strh	r3, [r4, #12]
 800f4fe:	e03e      	b.n	800f57e <__swsetup_r+0xba>
 800f500:	4b25      	ldr	r3, [pc, #148]	; (800f598 <__swsetup_r+0xd4>)
 800f502:	429c      	cmp	r4, r3
 800f504:	d101      	bne.n	800f50a <__swsetup_r+0x46>
 800f506:	68ac      	ldr	r4, [r5, #8]
 800f508:	e7eb      	b.n	800f4e2 <__swsetup_r+0x1e>
 800f50a:	4b24      	ldr	r3, [pc, #144]	; (800f59c <__swsetup_r+0xd8>)
 800f50c:	429c      	cmp	r4, r3
 800f50e:	bf08      	it	eq
 800f510:	68ec      	ldreq	r4, [r5, #12]
 800f512:	e7e6      	b.n	800f4e2 <__swsetup_r+0x1e>
 800f514:	0758      	lsls	r0, r3, #29
 800f516:	d512      	bpl.n	800f53e <__swsetup_r+0x7a>
 800f518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f51a:	b141      	cbz	r1, 800f52e <__swsetup_r+0x6a>
 800f51c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f520:	4299      	cmp	r1, r3
 800f522:	d002      	beq.n	800f52a <__swsetup_r+0x66>
 800f524:	4630      	mov	r0, r6
 800f526:	f7fb ff13 	bl	800b350 <_free_r>
 800f52a:	2300      	movs	r3, #0
 800f52c:	6363      	str	r3, [r4, #52]	; 0x34
 800f52e:	89a3      	ldrh	r3, [r4, #12]
 800f530:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f534:	81a3      	strh	r3, [r4, #12]
 800f536:	2300      	movs	r3, #0
 800f538:	6063      	str	r3, [r4, #4]
 800f53a:	6923      	ldr	r3, [r4, #16]
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	89a3      	ldrh	r3, [r4, #12]
 800f540:	f043 0308 	orr.w	r3, r3, #8
 800f544:	81a3      	strh	r3, [r4, #12]
 800f546:	6923      	ldr	r3, [r4, #16]
 800f548:	b94b      	cbnz	r3, 800f55e <__swsetup_r+0x9a>
 800f54a:	89a3      	ldrh	r3, [r4, #12]
 800f54c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f554:	d003      	beq.n	800f55e <__swsetup_r+0x9a>
 800f556:	4621      	mov	r1, r4
 800f558:	4630      	mov	r0, r6
 800f55a:	f000 fa05 	bl	800f968 <__smakebuf_r>
 800f55e:	89a0      	ldrh	r0, [r4, #12]
 800f560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f564:	f010 0301 	ands.w	r3, r0, #1
 800f568:	d00a      	beq.n	800f580 <__swsetup_r+0xbc>
 800f56a:	2300      	movs	r3, #0
 800f56c:	60a3      	str	r3, [r4, #8]
 800f56e:	6963      	ldr	r3, [r4, #20]
 800f570:	425b      	negs	r3, r3
 800f572:	61a3      	str	r3, [r4, #24]
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	b943      	cbnz	r3, 800f58a <__swsetup_r+0xc6>
 800f578:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f57c:	d1ba      	bne.n	800f4f4 <__swsetup_r+0x30>
 800f57e:	bd70      	pop	{r4, r5, r6, pc}
 800f580:	0781      	lsls	r1, r0, #30
 800f582:	bf58      	it	pl
 800f584:	6963      	ldrpl	r3, [r4, #20]
 800f586:	60a3      	str	r3, [r4, #8]
 800f588:	e7f4      	b.n	800f574 <__swsetup_r+0xb0>
 800f58a:	2000      	movs	r0, #0
 800f58c:	e7f7      	b.n	800f57e <__swsetup_r+0xba>
 800f58e:	bf00      	nop
 800f590:	20000048 	.word	0x20000048
 800f594:	08010894 	.word	0x08010894
 800f598:	080108b4 	.word	0x080108b4
 800f59c:	08010874 	.word	0x08010874

0800f5a0 <abort>:
 800f5a0:	2006      	movs	r0, #6
 800f5a2:	b508      	push	{r3, lr}
 800f5a4:	f000 fa50 	bl	800fa48 <raise>
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	f7f7 f8d0 	bl	800674e <_exit>
	...

0800f5b0 <__sflush_r>:
 800f5b0:	898a      	ldrh	r2, [r1, #12]
 800f5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	0710      	lsls	r0, r2, #28
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	d458      	bmi.n	800f670 <__sflush_r+0xc0>
 800f5be:	684b      	ldr	r3, [r1, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	dc05      	bgt.n	800f5d0 <__sflush_r+0x20>
 800f5c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	dc02      	bgt.n	800f5d0 <__sflush_r+0x20>
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5d2:	2e00      	cmp	r6, #0
 800f5d4:	d0f9      	beq.n	800f5ca <__sflush_r+0x1a>
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f5dc:	682f      	ldr	r7, [r5, #0]
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	d032      	beq.n	800f648 <__sflush_r+0x98>
 800f5e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f5e4:	89a3      	ldrh	r3, [r4, #12]
 800f5e6:	075a      	lsls	r2, r3, #29
 800f5e8:	d505      	bpl.n	800f5f6 <__sflush_r+0x46>
 800f5ea:	6863      	ldr	r3, [r4, #4]
 800f5ec:	1ac0      	subs	r0, r0, r3
 800f5ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f5f0:	b10b      	cbz	r3, 800f5f6 <__sflush_r+0x46>
 800f5f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f5f4:	1ac0      	subs	r0, r0, r3
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	6a21      	ldr	r1, [r4, #32]
 800f600:	47b0      	blx	r6
 800f602:	1c43      	adds	r3, r0, #1
 800f604:	89a3      	ldrh	r3, [r4, #12]
 800f606:	d106      	bne.n	800f616 <__sflush_r+0x66>
 800f608:	6829      	ldr	r1, [r5, #0]
 800f60a:	291d      	cmp	r1, #29
 800f60c:	d82c      	bhi.n	800f668 <__sflush_r+0xb8>
 800f60e:	4a2a      	ldr	r2, [pc, #168]	; (800f6b8 <__sflush_r+0x108>)
 800f610:	40ca      	lsrs	r2, r1
 800f612:	07d6      	lsls	r6, r2, #31
 800f614:	d528      	bpl.n	800f668 <__sflush_r+0xb8>
 800f616:	2200      	movs	r2, #0
 800f618:	6062      	str	r2, [r4, #4]
 800f61a:	6922      	ldr	r2, [r4, #16]
 800f61c:	04d9      	lsls	r1, r3, #19
 800f61e:	6022      	str	r2, [r4, #0]
 800f620:	d504      	bpl.n	800f62c <__sflush_r+0x7c>
 800f622:	1c42      	adds	r2, r0, #1
 800f624:	d101      	bne.n	800f62a <__sflush_r+0x7a>
 800f626:	682b      	ldr	r3, [r5, #0]
 800f628:	b903      	cbnz	r3, 800f62c <__sflush_r+0x7c>
 800f62a:	6560      	str	r0, [r4, #84]	; 0x54
 800f62c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f62e:	602f      	str	r7, [r5, #0]
 800f630:	2900      	cmp	r1, #0
 800f632:	d0ca      	beq.n	800f5ca <__sflush_r+0x1a>
 800f634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f638:	4299      	cmp	r1, r3
 800f63a:	d002      	beq.n	800f642 <__sflush_r+0x92>
 800f63c:	4628      	mov	r0, r5
 800f63e:	f7fb fe87 	bl	800b350 <_free_r>
 800f642:	2000      	movs	r0, #0
 800f644:	6360      	str	r0, [r4, #52]	; 0x34
 800f646:	e7c1      	b.n	800f5cc <__sflush_r+0x1c>
 800f648:	6a21      	ldr	r1, [r4, #32]
 800f64a:	2301      	movs	r3, #1
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b0      	blx	r6
 800f650:	1c41      	adds	r1, r0, #1
 800f652:	d1c7      	bne.n	800f5e4 <__sflush_r+0x34>
 800f654:	682b      	ldr	r3, [r5, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d0c4      	beq.n	800f5e4 <__sflush_r+0x34>
 800f65a:	2b1d      	cmp	r3, #29
 800f65c:	d001      	beq.n	800f662 <__sflush_r+0xb2>
 800f65e:	2b16      	cmp	r3, #22
 800f660:	d101      	bne.n	800f666 <__sflush_r+0xb6>
 800f662:	602f      	str	r7, [r5, #0]
 800f664:	e7b1      	b.n	800f5ca <__sflush_r+0x1a>
 800f666:	89a3      	ldrh	r3, [r4, #12]
 800f668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f66c:	81a3      	strh	r3, [r4, #12]
 800f66e:	e7ad      	b.n	800f5cc <__sflush_r+0x1c>
 800f670:	690f      	ldr	r7, [r1, #16]
 800f672:	2f00      	cmp	r7, #0
 800f674:	d0a9      	beq.n	800f5ca <__sflush_r+0x1a>
 800f676:	0793      	lsls	r3, r2, #30
 800f678:	bf18      	it	ne
 800f67a:	2300      	movne	r3, #0
 800f67c:	680e      	ldr	r6, [r1, #0]
 800f67e:	bf08      	it	eq
 800f680:	694b      	ldreq	r3, [r1, #20]
 800f682:	eba6 0807 	sub.w	r8, r6, r7
 800f686:	600f      	str	r7, [r1, #0]
 800f688:	608b      	str	r3, [r1, #8]
 800f68a:	f1b8 0f00 	cmp.w	r8, #0
 800f68e:	dd9c      	ble.n	800f5ca <__sflush_r+0x1a>
 800f690:	4643      	mov	r3, r8
 800f692:	463a      	mov	r2, r7
 800f694:	4628      	mov	r0, r5
 800f696:	6a21      	ldr	r1, [r4, #32]
 800f698:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f69a:	47b0      	blx	r6
 800f69c:	2800      	cmp	r0, #0
 800f69e:	dc06      	bgt.n	800f6ae <__sflush_r+0xfe>
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6aa:	81a3      	strh	r3, [r4, #12]
 800f6ac:	e78e      	b.n	800f5cc <__sflush_r+0x1c>
 800f6ae:	4407      	add	r7, r0
 800f6b0:	eba8 0800 	sub.w	r8, r8, r0
 800f6b4:	e7e9      	b.n	800f68a <__sflush_r+0xda>
 800f6b6:	bf00      	nop
 800f6b8:	20400001 	.word	0x20400001

0800f6bc <_fflush_r>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	690b      	ldr	r3, [r1, #16]
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	b913      	cbnz	r3, 800f6cc <_fflush_r+0x10>
 800f6c6:	2500      	movs	r5, #0
 800f6c8:	4628      	mov	r0, r5
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	b118      	cbz	r0, 800f6d6 <_fflush_r+0x1a>
 800f6ce:	6983      	ldr	r3, [r0, #24]
 800f6d0:	b90b      	cbnz	r3, 800f6d6 <_fflush_r+0x1a>
 800f6d2:	f000 f887 	bl	800f7e4 <__sinit>
 800f6d6:	4b14      	ldr	r3, [pc, #80]	; (800f728 <_fflush_r+0x6c>)
 800f6d8:	429c      	cmp	r4, r3
 800f6da:	d11b      	bne.n	800f714 <_fflush_r+0x58>
 800f6dc:	686c      	ldr	r4, [r5, #4]
 800f6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d0ef      	beq.n	800f6c6 <_fflush_r+0xa>
 800f6e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6e8:	07d0      	lsls	r0, r2, #31
 800f6ea:	d404      	bmi.n	800f6f6 <_fflush_r+0x3a>
 800f6ec:	0599      	lsls	r1, r3, #22
 800f6ee:	d402      	bmi.n	800f6f6 <_fflush_r+0x3a>
 800f6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6f2:	f7ff fcfc 	bl	800f0ee <__retarget_lock_acquire_recursive>
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	f7ff ff59 	bl	800f5b0 <__sflush_r>
 800f6fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f700:	4605      	mov	r5, r0
 800f702:	07da      	lsls	r2, r3, #31
 800f704:	d4e0      	bmi.n	800f6c8 <_fflush_r+0xc>
 800f706:	89a3      	ldrh	r3, [r4, #12]
 800f708:	059b      	lsls	r3, r3, #22
 800f70a:	d4dd      	bmi.n	800f6c8 <_fflush_r+0xc>
 800f70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f70e:	f7ff fcef 	bl	800f0f0 <__retarget_lock_release_recursive>
 800f712:	e7d9      	b.n	800f6c8 <_fflush_r+0xc>
 800f714:	4b05      	ldr	r3, [pc, #20]	; (800f72c <_fflush_r+0x70>)
 800f716:	429c      	cmp	r4, r3
 800f718:	d101      	bne.n	800f71e <_fflush_r+0x62>
 800f71a:	68ac      	ldr	r4, [r5, #8]
 800f71c:	e7df      	b.n	800f6de <_fflush_r+0x22>
 800f71e:	4b04      	ldr	r3, [pc, #16]	; (800f730 <_fflush_r+0x74>)
 800f720:	429c      	cmp	r4, r3
 800f722:	bf08      	it	eq
 800f724:	68ec      	ldreq	r4, [r5, #12]
 800f726:	e7da      	b.n	800f6de <_fflush_r+0x22>
 800f728:	08010894 	.word	0x08010894
 800f72c:	080108b4 	.word	0x080108b4
 800f730:	08010874 	.word	0x08010874

0800f734 <std>:
 800f734:	2300      	movs	r3, #0
 800f736:	b510      	push	{r4, lr}
 800f738:	4604      	mov	r4, r0
 800f73a:	e9c0 3300 	strd	r3, r3, [r0]
 800f73e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f742:	6083      	str	r3, [r0, #8]
 800f744:	8181      	strh	r1, [r0, #12]
 800f746:	6643      	str	r3, [r0, #100]	; 0x64
 800f748:	81c2      	strh	r2, [r0, #14]
 800f74a:	6183      	str	r3, [r0, #24]
 800f74c:	4619      	mov	r1, r3
 800f74e:	2208      	movs	r2, #8
 800f750:	305c      	adds	r0, #92	; 0x5c
 800f752:	f7fb fdf5 	bl	800b340 <memset>
 800f756:	4b05      	ldr	r3, [pc, #20]	; (800f76c <std+0x38>)
 800f758:	6224      	str	r4, [r4, #32]
 800f75a:	6263      	str	r3, [r4, #36]	; 0x24
 800f75c:	4b04      	ldr	r3, [pc, #16]	; (800f770 <std+0x3c>)
 800f75e:	62a3      	str	r3, [r4, #40]	; 0x28
 800f760:	4b04      	ldr	r3, [pc, #16]	; (800f774 <std+0x40>)
 800f762:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f764:	4b04      	ldr	r3, [pc, #16]	; (800f778 <std+0x44>)
 800f766:	6323      	str	r3, [r4, #48]	; 0x30
 800f768:	bd10      	pop	{r4, pc}
 800f76a:	bf00      	nop
 800f76c:	0800fa81 	.word	0x0800fa81
 800f770:	0800faa3 	.word	0x0800faa3
 800f774:	0800fadb 	.word	0x0800fadb
 800f778:	0800faff 	.word	0x0800faff

0800f77c <_cleanup_r>:
 800f77c:	4901      	ldr	r1, [pc, #4]	; (800f784 <_cleanup_r+0x8>)
 800f77e:	f000 b8af 	b.w	800f8e0 <_fwalk_reent>
 800f782:	bf00      	nop
 800f784:	0800f6bd 	.word	0x0800f6bd

0800f788 <__sfmoreglue>:
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	2568      	movs	r5, #104	; 0x68
 800f78c:	1e4a      	subs	r2, r1, #1
 800f78e:	4355      	muls	r5, r2
 800f790:	460e      	mov	r6, r1
 800f792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f796:	f7fb fe27 	bl	800b3e8 <_malloc_r>
 800f79a:	4604      	mov	r4, r0
 800f79c:	b140      	cbz	r0, 800f7b0 <__sfmoreglue+0x28>
 800f79e:	2100      	movs	r1, #0
 800f7a0:	e9c0 1600 	strd	r1, r6, [r0]
 800f7a4:	300c      	adds	r0, #12
 800f7a6:	60a0      	str	r0, [r4, #8]
 800f7a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f7ac:	f7fb fdc8 	bl	800b340 <memset>
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	bd70      	pop	{r4, r5, r6, pc}

0800f7b4 <__sfp_lock_acquire>:
 800f7b4:	4801      	ldr	r0, [pc, #4]	; (800f7bc <__sfp_lock_acquire+0x8>)
 800f7b6:	f7ff bc9a 	b.w	800f0ee <__retarget_lock_acquire_recursive>
 800f7ba:	bf00      	nop
 800f7bc:	200008f0 	.word	0x200008f0

0800f7c0 <__sfp_lock_release>:
 800f7c0:	4801      	ldr	r0, [pc, #4]	; (800f7c8 <__sfp_lock_release+0x8>)
 800f7c2:	f7ff bc95 	b.w	800f0f0 <__retarget_lock_release_recursive>
 800f7c6:	bf00      	nop
 800f7c8:	200008f0 	.word	0x200008f0

0800f7cc <__sinit_lock_acquire>:
 800f7cc:	4801      	ldr	r0, [pc, #4]	; (800f7d4 <__sinit_lock_acquire+0x8>)
 800f7ce:	f7ff bc8e 	b.w	800f0ee <__retarget_lock_acquire_recursive>
 800f7d2:	bf00      	nop
 800f7d4:	200008eb 	.word	0x200008eb

0800f7d8 <__sinit_lock_release>:
 800f7d8:	4801      	ldr	r0, [pc, #4]	; (800f7e0 <__sinit_lock_release+0x8>)
 800f7da:	f7ff bc89 	b.w	800f0f0 <__retarget_lock_release_recursive>
 800f7de:	bf00      	nop
 800f7e0:	200008eb 	.word	0x200008eb

0800f7e4 <__sinit>:
 800f7e4:	b510      	push	{r4, lr}
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	f7ff fff0 	bl	800f7cc <__sinit_lock_acquire>
 800f7ec:	69a3      	ldr	r3, [r4, #24]
 800f7ee:	b11b      	cbz	r3, 800f7f8 <__sinit+0x14>
 800f7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7f4:	f7ff bff0 	b.w	800f7d8 <__sinit_lock_release>
 800f7f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f7fc:	6523      	str	r3, [r4, #80]	; 0x50
 800f7fe:	4b13      	ldr	r3, [pc, #76]	; (800f84c <__sinit+0x68>)
 800f800:	4a13      	ldr	r2, [pc, #76]	; (800f850 <__sinit+0x6c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	62a2      	str	r2, [r4, #40]	; 0x28
 800f806:	42a3      	cmp	r3, r4
 800f808:	bf08      	it	eq
 800f80a:	2301      	moveq	r3, #1
 800f80c:	4620      	mov	r0, r4
 800f80e:	bf08      	it	eq
 800f810:	61a3      	streq	r3, [r4, #24]
 800f812:	f000 f81f 	bl	800f854 <__sfp>
 800f816:	6060      	str	r0, [r4, #4]
 800f818:	4620      	mov	r0, r4
 800f81a:	f000 f81b 	bl	800f854 <__sfp>
 800f81e:	60a0      	str	r0, [r4, #8]
 800f820:	4620      	mov	r0, r4
 800f822:	f000 f817 	bl	800f854 <__sfp>
 800f826:	2200      	movs	r2, #0
 800f828:	2104      	movs	r1, #4
 800f82a:	60e0      	str	r0, [r4, #12]
 800f82c:	6860      	ldr	r0, [r4, #4]
 800f82e:	f7ff ff81 	bl	800f734 <std>
 800f832:	2201      	movs	r2, #1
 800f834:	2109      	movs	r1, #9
 800f836:	68a0      	ldr	r0, [r4, #8]
 800f838:	f7ff ff7c 	bl	800f734 <std>
 800f83c:	2202      	movs	r2, #2
 800f83e:	2112      	movs	r1, #18
 800f840:	68e0      	ldr	r0, [r4, #12]
 800f842:	f7ff ff77 	bl	800f734 <std>
 800f846:	2301      	movs	r3, #1
 800f848:	61a3      	str	r3, [r4, #24]
 800f84a:	e7d1      	b.n	800f7f0 <__sinit+0xc>
 800f84c:	080104fc 	.word	0x080104fc
 800f850:	0800f77d 	.word	0x0800f77d

0800f854 <__sfp>:
 800f854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f856:	4607      	mov	r7, r0
 800f858:	f7ff ffac 	bl	800f7b4 <__sfp_lock_acquire>
 800f85c:	4b1e      	ldr	r3, [pc, #120]	; (800f8d8 <__sfp+0x84>)
 800f85e:	681e      	ldr	r6, [r3, #0]
 800f860:	69b3      	ldr	r3, [r6, #24]
 800f862:	b913      	cbnz	r3, 800f86a <__sfp+0x16>
 800f864:	4630      	mov	r0, r6
 800f866:	f7ff ffbd 	bl	800f7e4 <__sinit>
 800f86a:	3648      	adds	r6, #72	; 0x48
 800f86c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f870:	3b01      	subs	r3, #1
 800f872:	d503      	bpl.n	800f87c <__sfp+0x28>
 800f874:	6833      	ldr	r3, [r6, #0]
 800f876:	b30b      	cbz	r3, 800f8bc <__sfp+0x68>
 800f878:	6836      	ldr	r6, [r6, #0]
 800f87a:	e7f7      	b.n	800f86c <__sfp+0x18>
 800f87c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f880:	b9d5      	cbnz	r5, 800f8b8 <__sfp+0x64>
 800f882:	4b16      	ldr	r3, [pc, #88]	; (800f8dc <__sfp+0x88>)
 800f884:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f888:	60e3      	str	r3, [r4, #12]
 800f88a:	6665      	str	r5, [r4, #100]	; 0x64
 800f88c:	f7ff fc2e 	bl	800f0ec <__retarget_lock_init_recursive>
 800f890:	f7ff ff96 	bl	800f7c0 <__sfp_lock_release>
 800f894:	2208      	movs	r2, #8
 800f896:	4629      	mov	r1, r5
 800f898:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f89c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f8a0:	6025      	str	r5, [r4, #0]
 800f8a2:	61a5      	str	r5, [r4, #24]
 800f8a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f8a8:	f7fb fd4a 	bl	800b340 <memset>
 800f8ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f8b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8b8:	3468      	adds	r4, #104	; 0x68
 800f8ba:	e7d9      	b.n	800f870 <__sfp+0x1c>
 800f8bc:	2104      	movs	r1, #4
 800f8be:	4638      	mov	r0, r7
 800f8c0:	f7ff ff62 	bl	800f788 <__sfmoreglue>
 800f8c4:	4604      	mov	r4, r0
 800f8c6:	6030      	str	r0, [r6, #0]
 800f8c8:	2800      	cmp	r0, #0
 800f8ca:	d1d5      	bne.n	800f878 <__sfp+0x24>
 800f8cc:	f7ff ff78 	bl	800f7c0 <__sfp_lock_release>
 800f8d0:	230c      	movs	r3, #12
 800f8d2:	603b      	str	r3, [r7, #0]
 800f8d4:	e7ee      	b.n	800f8b4 <__sfp+0x60>
 800f8d6:	bf00      	nop
 800f8d8:	080104fc 	.word	0x080104fc
 800f8dc:	ffff0001 	.word	0xffff0001

0800f8e0 <_fwalk_reent>:
 800f8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e4:	4606      	mov	r6, r0
 800f8e6:	4688      	mov	r8, r1
 800f8e8:	2700      	movs	r7, #0
 800f8ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f8ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f8f2:	f1b9 0901 	subs.w	r9, r9, #1
 800f8f6:	d505      	bpl.n	800f904 <_fwalk_reent+0x24>
 800f8f8:	6824      	ldr	r4, [r4, #0]
 800f8fa:	2c00      	cmp	r4, #0
 800f8fc:	d1f7      	bne.n	800f8ee <_fwalk_reent+0xe>
 800f8fe:	4638      	mov	r0, r7
 800f900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f904:	89ab      	ldrh	r3, [r5, #12]
 800f906:	2b01      	cmp	r3, #1
 800f908:	d907      	bls.n	800f91a <_fwalk_reent+0x3a>
 800f90a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f90e:	3301      	adds	r3, #1
 800f910:	d003      	beq.n	800f91a <_fwalk_reent+0x3a>
 800f912:	4629      	mov	r1, r5
 800f914:	4630      	mov	r0, r6
 800f916:	47c0      	blx	r8
 800f918:	4307      	orrs	r7, r0
 800f91a:	3568      	adds	r5, #104	; 0x68
 800f91c:	e7e9      	b.n	800f8f2 <_fwalk_reent+0x12>

0800f91e <__swhatbuf_r>:
 800f91e:	b570      	push	{r4, r5, r6, lr}
 800f920:	460e      	mov	r6, r1
 800f922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f926:	4614      	mov	r4, r2
 800f928:	2900      	cmp	r1, #0
 800f92a:	461d      	mov	r5, r3
 800f92c:	b096      	sub	sp, #88	; 0x58
 800f92e:	da07      	bge.n	800f940 <__swhatbuf_r+0x22>
 800f930:	2300      	movs	r3, #0
 800f932:	602b      	str	r3, [r5, #0]
 800f934:	89b3      	ldrh	r3, [r6, #12]
 800f936:	061a      	lsls	r2, r3, #24
 800f938:	d410      	bmi.n	800f95c <__swhatbuf_r+0x3e>
 800f93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f93e:	e00e      	b.n	800f95e <__swhatbuf_r+0x40>
 800f940:	466a      	mov	r2, sp
 800f942:	f000 f903 	bl	800fb4c <_fstat_r>
 800f946:	2800      	cmp	r0, #0
 800f948:	dbf2      	blt.n	800f930 <__swhatbuf_r+0x12>
 800f94a:	9a01      	ldr	r2, [sp, #4]
 800f94c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f954:	425a      	negs	r2, r3
 800f956:	415a      	adcs	r2, r3
 800f958:	602a      	str	r2, [r5, #0]
 800f95a:	e7ee      	b.n	800f93a <__swhatbuf_r+0x1c>
 800f95c:	2340      	movs	r3, #64	; 0x40
 800f95e:	2000      	movs	r0, #0
 800f960:	6023      	str	r3, [r4, #0]
 800f962:	b016      	add	sp, #88	; 0x58
 800f964:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f968 <__smakebuf_r>:
 800f968:	898b      	ldrh	r3, [r1, #12]
 800f96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f96c:	079d      	lsls	r5, r3, #30
 800f96e:	4606      	mov	r6, r0
 800f970:	460c      	mov	r4, r1
 800f972:	d507      	bpl.n	800f984 <__smakebuf_r+0x1c>
 800f974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f978:	6023      	str	r3, [r4, #0]
 800f97a:	6123      	str	r3, [r4, #16]
 800f97c:	2301      	movs	r3, #1
 800f97e:	6163      	str	r3, [r4, #20]
 800f980:	b002      	add	sp, #8
 800f982:	bd70      	pop	{r4, r5, r6, pc}
 800f984:	466a      	mov	r2, sp
 800f986:	ab01      	add	r3, sp, #4
 800f988:	f7ff ffc9 	bl	800f91e <__swhatbuf_r>
 800f98c:	9900      	ldr	r1, [sp, #0]
 800f98e:	4605      	mov	r5, r0
 800f990:	4630      	mov	r0, r6
 800f992:	f7fb fd29 	bl	800b3e8 <_malloc_r>
 800f996:	b948      	cbnz	r0, 800f9ac <__smakebuf_r+0x44>
 800f998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f99c:	059a      	lsls	r2, r3, #22
 800f99e:	d4ef      	bmi.n	800f980 <__smakebuf_r+0x18>
 800f9a0:	f023 0303 	bic.w	r3, r3, #3
 800f9a4:	f043 0302 	orr.w	r3, r3, #2
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	e7e3      	b.n	800f974 <__smakebuf_r+0xc>
 800f9ac:	4b0d      	ldr	r3, [pc, #52]	; (800f9e4 <__smakebuf_r+0x7c>)
 800f9ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800f9b0:	89a3      	ldrh	r3, [r4, #12]
 800f9b2:	6020      	str	r0, [r4, #0]
 800f9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9b8:	81a3      	strh	r3, [r4, #12]
 800f9ba:	9b00      	ldr	r3, [sp, #0]
 800f9bc:	6120      	str	r0, [r4, #16]
 800f9be:	6163      	str	r3, [r4, #20]
 800f9c0:	9b01      	ldr	r3, [sp, #4]
 800f9c2:	b15b      	cbz	r3, 800f9dc <__smakebuf_r+0x74>
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9ca:	f000 f8d1 	bl	800fb70 <_isatty_r>
 800f9ce:	b128      	cbz	r0, 800f9dc <__smakebuf_r+0x74>
 800f9d0:	89a3      	ldrh	r3, [r4, #12]
 800f9d2:	f023 0303 	bic.w	r3, r3, #3
 800f9d6:	f043 0301 	orr.w	r3, r3, #1
 800f9da:	81a3      	strh	r3, [r4, #12]
 800f9dc:	89a0      	ldrh	r0, [r4, #12]
 800f9de:	4305      	orrs	r5, r0
 800f9e0:	81a5      	strh	r5, [r4, #12]
 800f9e2:	e7cd      	b.n	800f980 <__smakebuf_r+0x18>
 800f9e4:	0800f77d 	.word	0x0800f77d

0800f9e8 <_malloc_usable_size_r>:
 800f9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9ec:	1f18      	subs	r0, r3, #4
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	bfbc      	itt	lt
 800f9f2:	580b      	ldrlt	r3, [r1, r0]
 800f9f4:	18c0      	addlt	r0, r0, r3
 800f9f6:	4770      	bx	lr

0800f9f8 <_raise_r>:
 800f9f8:	291f      	cmp	r1, #31
 800f9fa:	b538      	push	{r3, r4, r5, lr}
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	460d      	mov	r5, r1
 800fa00:	d904      	bls.n	800fa0c <_raise_r+0x14>
 800fa02:	2316      	movs	r3, #22
 800fa04:	6003      	str	r3, [r0, #0]
 800fa06:	f04f 30ff 	mov.w	r0, #4294967295
 800fa0a:	bd38      	pop	{r3, r4, r5, pc}
 800fa0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa0e:	b112      	cbz	r2, 800fa16 <_raise_r+0x1e>
 800fa10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa14:	b94b      	cbnz	r3, 800fa2a <_raise_r+0x32>
 800fa16:	4620      	mov	r0, r4
 800fa18:	f000 f830 	bl	800fa7c <_getpid_r>
 800fa1c:	462a      	mov	r2, r5
 800fa1e:	4601      	mov	r1, r0
 800fa20:	4620      	mov	r0, r4
 800fa22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa26:	f000 b817 	b.w	800fa58 <_kill_r>
 800fa2a:	2b01      	cmp	r3, #1
 800fa2c:	d00a      	beq.n	800fa44 <_raise_r+0x4c>
 800fa2e:	1c59      	adds	r1, r3, #1
 800fa30:	d103      	bne.n	800fa3a <_raise_r+0x42>
 800fa32:	2316      	movs	r3, #22
 800fa34:	6003      	str	r3, [r0, #0]
 800fa36:	2001      	movs	r0, #1
 800fa38:	e7e7      	b.n	800fa0a <_raise_r+0x12>
 800fa3a:	2400      	movs	r4, #0
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa42:	4798      	blx	r3
 800fa44:	2000      	movs	r0, #0
 800fa46:	e7e0      	b.n	800fa0a <_raise_r+0x12>

0800fa48 <raise>:
 800fa48:	4b02      	ldr	r3, [pc, #8]	; (800fa54 <raise+0xc>)
 800fa4a:	4601      	mov	r1, r0
 800fa4c:	6818      	ldr	r0, [r3, #0]
 800fa4e:	f7ff bfd3 	b.w	800f9f8 <_raise_r>
 800fa52:	bf00      	nop
 800fa54:	20000048 	.word	0x20000048

0800fa58 <_kill_r>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	4d06      	ldr	r5, [pc, #24]	; (800fa78 <_kill_r+0x20>)
 800fa5e:	4604      	mov	r4, r0
 800fa60:	4608      	mov	r0, r1
 800fa62:	4611      	mov	r1, r2
 800fa64:	602b      	str	r3, [r5, #0]
 800fa66:	f7f6 fe62 	bl	800672e <_kill>
 800fa6a:	1c43      	adds	r3, r0, #1
 800fa6c:	d102      	bne.n	800fa74 <_kill_r+0x1c>
 800fa6e:	682b      	ldr	r3, [r5, #0]
 800fa70:	b103      	cbz	r3, 800fa74 <_kill_r+0x1c>
 800fa72:	6023      	str	r3, [r4, #0]
 800fa74:	bd38      	pop	{r3, r4, r5, pc}
 800fa76:	bf00      	nop
 800fa78:	200008e4 	.word	0x200008e4

0800fa7c <_getpid_r>:
 800fa7c:	f7f6 be50 	b.w	8006720 <_getpid>

0800fa80 <__sread>:
 800fa80:	b510      	push	{r4, lr}
 800fa82:	460c      	mov	r4, r1
 800fa84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa88:	f000 f894 	bl	800fbb4 <_read_r>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	bfab      	itete	ge
 800fa90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa92:	89a3      	ldrhlt	r3, [r4, #12]
 800fa94:	181b      	addge	r3, r3, r0
 800fa96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa9a:	bfac      	ite	ge
 800fa9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa9e:	81a3      	strhlt	r3, [r4, #12]
 800faa0:	bd10      	pop	{r4, pc}

0800faa2 <__swrite>:
 800faa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa6:	461f      	mov	r7, r3
 800faa8:	898b      	ldrh	r3, [r1, #12]
 800faaa:	4605      	mov	r5, r0
 800faac:	05db      	lsls	r3, r3, #23
 800faae:	460c      	mov	r4, r1
 800fab0:	4616      	mov	r6, r2
 800fab2:	d505      	bpl.n	800fac0 <__swrite+0x1e>
 800fab4:	2302      	movs	r3, #2
 800fab6:	2200      	movs	r2, #0
 800fab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fabc:	f000 f868 	bl	800fb90 <_lseek_r>
 800fac0:	89a3      	ldrh	r3, [r4, #12]
 800fac2:	4632      	mov	r2, r6
 800fac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fac8:	81a3      	strh	r3, [r4, #12]
 800faca:	4628      	mov	r0, r5
 800facc:	463b      	mov	r3, r7
 800face:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fad6:	f000 b817 	b.w	800fb08 <_write_r>

0800fada <__sseek>:
 800fada:	b510      	push	{r4, lr}
 800fadc:	460c      	mov	r4, r1
 800fade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fae2:	f000 f855 	bl	800fb90 <_lseek_r>
 800fae6:	1c43      	adds	r3, r0, #1
 800fae8:	89a3      	ldrh	r3, [r4, #12]
 800faea:	bf15      	itete	ne
 800faec:	6560      	strne	r0, [r4, #84]	; 0x54
 800faee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800faf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800faf6:	81a3      	strheq	r3, [r4, #12]
 800faf8:	bf18      	it	ne
 800fafa:	81a3      	strhne	r3, [r4, #12]
 800fafc:	bd10      	pop	{r4, pc}

0800fafe <__sclose>:
 800fafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb02:	f000 b813 	b.w	800fb2c <_close_r>
	...

0800fb08 <_write_r>:
 800fb08:	b538      	push	{r3, r4, r5, lr}
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	4608      	mov	r0, r1
 800fb0e:	4611      	mov	r1, r2
 800fb10:	2200      	movs	r2, #0
 800fb12:	4d05      	ldr	r5, [pc, #20]	; (800fb28 <_write_r+0x20>)
 800fb14:	602a      	str	r2, [r5, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	f7f6 fe40 	bl	800679c <_write>
 800fb1c:	1c43      	adds	r3, r0, #1
 800fb1e:	d102      	bne.n	800fb26 <_write_r+0x1e>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	b103      	cbz	r3, 800fb26 <_write_r+0x1e>
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	bd38      	pop	{r3, r4, r5, pc}
 800fb28:	200008e4 	.word	0x200008e4

0800fb2c <_close_r>:
 800fb2c:	b538      	push	{r3, r4, r5, lr}
 800fb2e:	2300      	movs	r3, #0
 800fb30:	4d05      	ldr	r5, [pc, #20]	; (800fb48 <_close_r+0x1c>)
 800fb32:	4604      	mov	r4, r0
 800fb34:	4608      	mov	r0, r1
 800fb36:	602b      	str	r3, [r5, #0]
 800fb38:	f7f6 fe4c 	bl	80067d4 <_close>
 800fb3c:	1c43      	adds	r3, r0, #1
 800fb3e:	d102      	bne.n	800fb46 <_close_r+0x1a>
 800fb40:	682b      	ldr	r3, [r5, #0]
 800fb42:	b103      	cbz	r3, 800fb46 <_close_r+0x1a>
 800fb44:	6023      	str	r3, [r4, #0]
 800fb46:	bd38      	pop	{r3, r4, r5, pc}
 800fb48:	200008e4 	.word	0x200008e4

0800fb4c <_fstat_r>:
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	2300      	movs	r3, #0
 800fb50:	4d06      	ldr	r5, [pc, #24]	; (800fb6c <_fstat_r+0x20>)
 800fb52:	4604      	mov	r4, r0
 800fb54:	4608      	mov	r0, r1
 800fb56:	4611      	mov	r1, r2
 800fb58:	602b      	str	r3, [r5, #0]
 800fb5a:	f7f6 fe46 	bl	80067ea <_fstat>
 800fb5e:	1c43      	adds	r3, r0, #1
 800fb60:	d102      	bne.n	800fb68 <_fstat_r+0x1c>
 800fb62:	682b      	ldr	r3, [r5, #0]
 800fb64:	b103      	cbz	r3, 800fb68 <_fstat_r+0x1c>
 800fb66:	6023      	str	r3, [r4, #0]
 800fb68:	bd38      	pop	{r3, r4, r5, pc}
 800fb6a:	bf00      	nop
 800fb6c:	200008e4 	.word	0x200008e4

0800fb70 <_isatty_r>:
 800fb70:	b538      	push	{r3, r4, r5, lr}
 800fb72:	2300      	movs	r3, #0
 800fb74:	4d05      	ldr	r5, [pc, #20]	; (800fb8c <_isatty_r+0x1c>)
 800fb76:	4604      	mov	r4, r0
 800fb78:	4608      	mov	r0, r1
 800fb7a:	602b      	str	r3, [r5, #0]
 800fb7c:	f7f6 fe44 	bl	8006808 <_isatty>
 800fb80:	1c43      	adds	r3, r0, #1
 800fb82:	d102      	bne.n	800fb8a <_isatty_r+0x1a>
 800fb84:	682b      	ldr	r3, [r5, #0]
 800fb86:	b103      	cbz	r3, 800fb8a <_isatty_r+0x1a>
 800fb88:	6023      	str	r3, [r4, #0]
 800fb8a:	bd38      	pop	{r3, r4, r5, pc}
 800fb8c:	200008e4 	.word	0x200008e4

0800fb90 <_lseek_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4604      	mov	r4, r0
 800fb94:	4608      	mov	r0, r1
 800fb96:	4611      	mov	r1, r2
 800fb98:	2200      	movs	r2, #0
 800fb9a:	4d05      	ldr	r5, [pc, #20]	; (800fbb0 <_lseek_r+0x20>)
 800fb9c:	602a      	str	r2, [r5, #0]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	f7f6 fe3c 	bl	800681c <_lseek>
 800fba4:	1c43      	adds	r3, r0, #1
 800fba6:	d102      	bne.n	800fbae <_lseek_r+0x1e>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	b103      	cbz	r3, 800fbae <_lseek_r+0x1e>
 800fbac:	6023      	str	r3, [r4, #0]
 800fbae:	bd38      	pop	{r3, r4, r5, pc}
 800fbb0:	200008e4 	.word	0x200008e4

0800fbb4 <_read_r>:
 800fbb4:	b538      	push	{r3, r4, r5, lr}
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	4608      	mov	r0, r1
 800fbba:	4611      	mov	r1, r2
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	4d05      	ldr	r5, [pc, #20]	; (800fbd4 <_read_r+0x20>)
 800fbc0:	602a      	str	r2, [r5, #0]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	f7f6 fdcd 	bl	8006762 <_read>
 800fbc8:	1c43      	adds	r3, r0, #1
 800fbca:	d102      	bne.n	800fbd2 <_read_r+0x1e>
 800fbcc:	682b      	ldr	r3, [r5, #0]
 800fbce:	b103      	cbz	r3, 800fbd2 <_read_r+0x1e>
 800fbd0:	6023      	str	r3, [r4, #0]
 800fbd2:	bd38      	pop	{r3, r4, r5, pc}
 800fbd4:	200008e4 	.word	0x200008e4

0800fbd8 <log>:
 800fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbda:	4604      	mov	r4, r0
 800fbdc:	460d      	mov	r5, r1
 800fbde:	f000 f837 	bl	800fc50 <__ieee754_log>
 800fbe2:	4b17      	ldr	r3, [pc, #92]	; (800fc40 <log+0x68>)
 800fbe4:	4606      	mov	r6, r0
 800fbe6:	f993 3000 	ldrsb.w	r3, [r3]
 800fbea:	460f      	mov	r7, r1
 800fbec:	3301      	adds	r3, #1
 800fbee:	d01a      	beq.n	800fc26 <log+0x4e>
 800fbf0:	4622      	mov	r2, r4
 800fbf2:	462b      	mov	r3, r5
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	4629      	mov	r1, r5
 800fbf8:	f7f0 ff74 	bl	8000ae4 <__aeabi_dcmpun>
 800fbfc:	b998      	cbnz	r0, 800fc26 <log+0x4e>
 800fbfe:	2200      	movs	r2, #0
 800fc00:	2300      	movs	r3, #0
 800fc02:	4620      	mov	r0, r4
 800fc04:	4629      	mov	r1, r5
 800fc06:	f7f0 ff63 	bl	8000ad0 <__aeabi_dcmpgt>
 800fc0a:	b960      	cbnz	r0, 800fc26 <log+0x4e>
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	2300      	movs	r3, #0
 800fc10:	4620      	mov	r0, r4
 800fc12:	4629      	mov	r1, r5
 800fc14:	f7f0 ff34 	bl	8000a80 <__aeabi_dcmpeq>
 800fc18:	b140      	cbz	r0, 800fc2c <log+0x54>
 800fc1a:	f7fb fb3d 	bl	800b298 <__errno>
 800fc1e:	2322      	movs	r3, #34	; 0x22
 800fc20:	2600      	movs	r6, #0
 800fc22:	4f08      	ldr	r7, [pc, #32]	; (800fc44 <log+0x6c>)
 800fc24:	6003      	str	r3, [r0, #0]
 800fc26:	4630      	mov	r0, r6
 800fc28:	4639      	mov	r1, r7
 800fc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc2c:	f7fb fb34 	bl	800b298 <__errno>
 800fc30:	2321      	movs	r3, #33	; 0x21
 800fc32:	6003      	str	r3, [r0, #0]
 800fc34:	4804      	ldr	r0, [pc, #16]	; (800fc48 <log+0x70>)
 800fc36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc3a:	f7ff ba01 	b.w	800f040 <nan>
 800fc3e:	bf00      	nop
 800fc40:	2000021c 	.word	0x2000021c
 800fc44:	fff00000 	.word	0xfff00000
 800fc48:	08010870 	.word	0x08010870
 800fc4c:	00000000 	.word	0x00000000

0800fc50 <__ieee754_log>:
 800fc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800fc58:	4602      	mov	r2, r0
 800fc5a:	460b      	mov	r3, r1
 800fc5c:	460d      	mov	r5, r1
 800fc5e:	b087      	sub	sp, #28
 800fc60:	da24      	bge.n	800fcac <__ieee754_log+0x5c>
 800fc62:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800fc66:	4304      	orrs	r4, r0
 800fc68:	d108      	bne.n	800fc7c <__ieee754_log+0x2c>
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	2000      	movs	r0, #0
 800fc70:	49cb      	ldr	r1, [pc, #812]	; (800ffa0 <__ieee754_log+0x350>)
 800fc72:	f7f0 fdc7 	bl	8000804 <__aeabi_ddiv>
 800fc76:	b007      	add	sp, #28
 800fc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7c:	2900      	cmp	r1, #0
 800fc7e:	da04      	bge.n	800fc8a <__ieee754_log+0x3a>
 800fc80:	f7f0 fade 	bl	8000240 <__aeabi_dsub>
 800fc84:	2200      	movs	r2, #0
 800fc86:	2300      	movs	r3, #0
 800fc88:	e7f3      	b.n	800fc72 <__ieee754_log+0x22>
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	4bc5      	ldr	r3, [pc, #788]	; (800ffa4 <__ieee754_log+0x354>)
 800fc8e:	f7f0 fc8f 	bl	80005b0 <__aeabi_dmul>
 800fc92:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800fc96:	4602      	mov	r2, r0
 800fc98:	460b      	mov	r3, r1
 800fc9a:	460d      	mov	r5, r1
 800fc9c:	49c2      	ldr	r1, [pc, #776]	; (800ffa8 <__ieee754_log+0x358>)
 800fc9e:	428d      	cmp	r5, r1
 800fca0:	dd06      	ble.n	800fcb0 <__ieee754_log+0x60>
 800fca2:	4610      	mov	r0, r2
 800fca4:	4619      	mov	r1, r3
 800fca6:	f7f0 facd 	bl	8000244 <__adddf3>
 800fcaa:	e7e4      	b.n	800fc76 <__ieee754_log+0x26>
 800fcac:	2600      	movs	r6, #0
 800fcae:	e7f5      	b.n	800fc9c <__ieee754_log+0x4c>
 800fcb0:	152c      	asrs	r4, r5, #20
 800fcb2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fcb6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800fcba:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fcbe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800fcc2:	4426      	add	r6, r4
 800fcc4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800fcc8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800fccc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800fcd0:	ea41 0305 	orr.w	r3, r1, r5
 800fcd4:	4610      	mov	r0, r2
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	2200      	movs	r2, #0
 800fcda:	4bb4      	ldr	r3, [pc, #720]	; (800ffac <__ieee754_log+0x35c>)
 800fcdc:	f7f0 fab0 	bl	8000240 <__aeabi_dsub>
 800fce0:	1cab      	adds	r3, r5, #2
 800fce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	4682      	mov	sl, r0
 800fcea:	468b      	mov	fp, r1
 800fcec:	f04f 0200 	mov.w	r2, #0
 800fcf0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800fcf4:	dc53      	bgt.n	800fd9e <__ieee754_log+0x14e>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f7f0 fec2 	bl	8000a80 <__aeabi_dcmpeq>
 800fcfc:	b1d0      	cbz	r0, 800fd34 <__ieee754_log+0xe4>
 800fcfe:	2c00      	cmp	r4, #0
 800fd00:	f000 8122 	beq.w	800ff48 <__ieee754_log+0x2f8>
 800fd04:	4620      	mov	r0, r4
 800fd06:	f7f0 fbe9 	bl	80004dc <__aeabi_i2d>
 800fd0a:	a391      	add	r3, pc, #580	; (adr r3, 800ff50 <__ieee754_log+0x300>)
 800fd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd10:	4606      	mov	r6, r0
 800fd12:	460f      	mov	r7, r1
 800fd14:	f7f0 fc4c 	bl	80005b0 <__aeabi_dmul>
 800fd18:	a38f      	add	r3, pc, #572	; (adr r3, 800ff58 <__ieee754_log+0x308>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	4604      	mov	r4, r0
 800fd20:	460d      	mov	r5, r1
 800fd22:	4630      	mov	r0, r6
 800fd24:	4639      	mov	r1, r7
 800fd26:	f7f0 fc43 	bl	80005b0 <__aeabi_dmul>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	4620      	mov	r0, r4
 800fd30:	4629      	mov	r1, r5
 800fd32:	e7b8      	b.n	800fca6 <__ieee754_log+0x56>
 800fd34:	a38a      	add	r3, pc, #552	; (adr r3, 800ff60 <__ieee754_log+0x310>)
 800fd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3a:	4650      	mov	r0, sl
 800fd3c:	4659      	mov	r1, fp
 800fd3e:	f7f0 fc37 	bl	80005b0 <__aeabi_dmul>
 800fd42:	4602      	mov	r2, r0
 800fd44:	460b      	mov	r3, r1
 800fd46:	2000      	movs	r0, #0
 800fd48:	4999      	ldr	r1, [pc, #612]	; (800ffb0 <__ieee754_log+0x360>)
 800fd4a:	f7f0 fa79 	bl	8000240 <__aeabi_dsub>
 800fd4e:	4652      	mov	r2, sl
 800fd50:	4606      	mov	r6, r0
 800fd52:	460f      	mov	r7, r1
 800fd54:	465b      	mov	r3, fp
 800fd56:	4650      	mov	r0, sl
 800fd58:	4659      	mov	r1, fp
 800fd5a:	f7f0 fc29 	bl	80005b0 <__aeabi_dmul>
 800fd5e:	4602      	mov	r2, r0
 800fd60:	460b      	mov	r3, r1
 800fd62:	4630      	mov	r0, r6
 800fd64:	4639      	mov	r1, r7
 800fd66:	f7f0 fc23 	bl	80005b0 <__aeabi_dmul>
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	460f      	mov	r7, r1
 800fd6e:	b914      	cbnz	r4, 800fd76 <__ieee754_log+0x126>
 800fd70:	4632      	mov	r2, r6
 800fd72:	463b      	mov	r3, r7
 800fd74:	e0a2      	b.n	800febc <__ieee754_log+0x26c>
 800fd76:	4620      	mov	r0, r4
 800fd78:	f7f0 fbb0 	bl	80004dc <__aeabi_i2d>
 800fd7c:	a374      	add	r3, pc, #464	; (adr r3, 800ff50 <__ieee754_log+0x300>)
 800fd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd82:	4680      	mov	r8, r0
 800fd84:	4689      	mov	r9, r1
 800fd86:	f7f0 fc13 	bl	80005b0 <__aeabi_dmul>
 800fd8a:	a373      	add	r3, pc, #460	; (adr r3, 800ff58 <__ieee754_log+0x308>)
 800fd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd90:	4604      	mov	r4, r0
 800fd92:	460d      	mov	r5, r1
 800fd94:	4640      	mov	r0, r8
 800fd96:	4649      	mov	r1, r9
 800fd98:	f7f0 fc0a 	bl	80005b0 <__aeabi_dmul>
 800fd9c:	e0a7      	b.n	800feee <__ieee754_log+0x29e>
 800fd9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fda2:	f7f0 fa4f 	bl	8000244 <__adddf3>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	4650      	mov	r0, sl
 800fdac:	4659      	mov	r1, fp
 800fdae:	f7f0 fd29 	bl	8000804 <__aeabi_ddiv>
 800fdb2:	e9cd 0100 	strd	r0, r1, [sp]
 800fdb6:	4620      	mov	r0, r4
 800fdb8:	f7f0 fb90 	bl	80004dc <__aeabi_i2d>
 800fdbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fdc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	f7f0 fbf2 	bl	80005b0 <__aeabi_dmul>
 800fdcc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800fdd0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	9305      	str	r3, [sp, #20]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	4606      	mov	r6, r0
 800fddc:	460f      	mov	r7, r1
 800fdde:	f7f0 fbe7 	bl	80005b0 <__aeabi_dmul>
 800fde2:	a361      	add	r3, pc, #388	; (adr r3, 800ff68 <__ieee754_log+0x318>)
 800fde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde8:	4680      	mov	r8, r0
 800fdea:	4689      	mov	r9, r1
 800fdec:	f7f0 fbe0 	bl	80005b0 <__aeabi_dmul>
 800fdf0:	a35f      	add	r3, pc, #380	; (adr r3, 800ff70 <__ieee754_log+0x320>)
 800fdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf6:	f7f0 fa25 	bl	8000244 <__adddf3>
 800fdfa:	4642      	mov	r2, r8
 800fdfc:	464b      	mov	r3, r9
 800fdfe:	f7f0 fbd7 	bl	80005b0 <__aeabi_dmul>
 800fe02:	a35d      	add	r3, pc, #372	; (adr r3, 800ff78 <__ieee754_log+0x328>)
 800fe04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe08:	f7f0 fa1c 	bl	8000244 <__adddf3>
 800fe0c:	4642      	mov	r2, r8
 800fe0e:	464b      	mov	r3, r9
 800fe10:	f7f0 fbce 	bl	80005b0 <__aeabi_dmul>
 800fe14:	a35a      	add	r3, pc, #360	; (adr r3, 800ff80 <__ieee754_log+0x330>)
 800fe16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe1a:	f7f0 fa13 	bl	8000244 <__adddf3>
 800fe1e:	4632      	mov	r2, r6
 800fe20:	463b      	mov	r3, r7
 800fe22:	f7f0 fbc5 	bl	80005b0 <__aeabi_dmul>
 800fe26:	a358      	add	r3, pc, #352	; (adr r3, 800ff88 <__ieee754_log+0x338>)
 800fe28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe2c:	4606      	mov	r6, r0
 800fe2e:	460f      	mov	r7, r1
 800fe30:	4640      	mov	r0, r8
 800fe32:	4649      	mov	r1, r9
 800fe34:	f7f0 fbbc 	bl	80005b0 <__aeabi_dmul>
 800fe38:	a355      	add	r3, pc, #340	; (adr r3, 800ff90 <__ieee754_log+0x340>)
 800fe3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe3e:	f7f0 fa01 	bl	8000244 <__adddf3>
 800fe42:	4642      	mov	r2, r8
 800fe44:	464b      	mov	r3, r9
 800fe46:	f7f0 fbb3 	bl	80005b0 <__aeabi_dmul>
 800fe4a:	a353      	add	r3, pc, #332	; (adr r3, 800ff98 <__ieee754_log+0x348>)
 800fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe50:	f7f0 f9f8 	bl	8000244 <__adddf3>
 800fe54:	4642      	mov	r2, r8
 800fe56:	464b      	mov	r3, r9
 800fe58:	f7f0 fbaa 	bl	80005b0 <__aeabi_dmul>
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	4602      	mov	r2, r0
 800fe60:	4639      	mov	r1, r7
 800fe62:	4630      	mov	r0, r6
 800fe64:	f7f0 f9ee 	bl	8000244 <__adddf3>
 800fe68:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800fe6c:	9b05      	ldr	r3, [sp, #20]
 800fe6e:	3551      	adds	r5, #81	; 0x51
 800fe70:	431d      	orrs	r5, r3
 800fe72:	2d00      	cmp	r5, #0
 800fe74:	4680      	mov	r8, r0
 800fe76:	4689      	mov	r9, r1
 800fe78:	dd48      	ble.n	800ff0c <__ieee754_log+0x2bc>
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	4b4c      	ldr	r3, [pc, #304]	; (800ffb0 <__ieee754_log+0x360>)
 800fe7e:	4650      	mov	r0, sl
 800fe80:	4659      	mov	r1, fp
 800fe82:	f7f0 fb95 	bl	80005b0 <__aeabi_dmul>
 800fe86:	4652      	mov	r2, sl
 800fe88:	465b      	mov	r3, fp
 800fe8a:	f7f0 fb91 	bl	80005b0 <__aeabi_dmul>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	460b      	mov	r3, r1
 800fe92:	4606      	mov	r6, r0
 800fe94:	460f      	mov	r7, r1
 800fe96:	4640      	mov	r0, r8
 800fe98:	4649      	mov	r1, r9
 800fe9a:	f7f0 f9d3 	bl	8000244 <__adddf3>
 800fe9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fea2:	f7f0 fb85 	bl	80005b0 <__aeabi_dmul>
 800fea6:	4680      	mov	r8, r0
 800fea8:	4689      	mov	r9, r1
 800feaa:	b964      	cbnz	r4, 800fec6 <__ieee754_log+0x276>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	4630      	mov	r0, r6
 800feb2:	4639      	mov	r1, r7
 800feb4:	f7f0 f9c4 	bl	8000240 <__aeabi_dsub>
 800feb8:	4602      	mov	r2, r0
 800feba:	460b      	mov	r3, r1
 800febc:	4650      	mov	r0, sl
 800febe:	4659      	mov	r1, fp
 800fec0:	f7f0 f9be 	bl	8000240 <__aeabi_dsub>
 800fec4:	e6d7      	b.n	800fc76 <__ieee754_log+0x26>
 800fec6:	a322      	add	r3, pc, #136	; (adr r3, 800ff50 <__ieee754_log+0x300>)
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fed0:	f7f0 fb6e 	bl	80005b0 <__aeabi_dmul>
 800fed4:	a320      	add	r3, pc, #128	; (adr r3, 800ff58 <__ieee754_log+0x308>)
 800fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feda:	4604      	mov	r4, r0
 800fedc:	460d      	mov	r5, r1
 800fede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fee2:	f7f0 fb65 	bl	80005b0 <__aeabi_dmul>
 800fee6:	4642      	mov	r2, r8
 800fee8:	464b      	mov	r3, r9
 800feea:	f7f0 f9ab 	bl	8000244 <__adddf3>
 800feee:	4602      	mov	r2, r0
 800fef0:	460b      	mov	r3, r1
 800fef2:	4630      	mov	r0, r6
 800fef4:	4639      	mov	r1, r7
 800fef6:	f7f0 f9a3 	bl	8000240 <__aeabi_dsub>
 800fefa:	4652      	mov	r2, sl
 800fefc:	465b      	mov	r3, fp
 800fefe:	f7f0 f99f 	bl	8000240 <__aeabi_dsub>
 800ff02:	4602      	mov	r2, r0
 800ff04:	460b      	mov	r3, r1
 800ff06:	4620      	mov	r0, r4
 800ff08:	4629      	mov	r1, r5
 800ff0a:	e7d9      	b.n	800fec0 <__ieee754_log+0x270>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	460b      	mov	r3, r1
 800ff10:	4650      	mov	r0, sl
 800ff12:	4659      	mov	r1, fp
 800ff14:	f7f0 f994 	bl	8000240 <__aeabi_dsub>
 800ff18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff1c:	f7f0 fb48 	bl	80005b0 <__aeabi_dmul>
 800ff20:	4606      	mov	r6, r0
 800ff22:	460f      	mov	r7, r1
 800ff24:	2c00      	cmp	r4, #0
 800ff26:	f43f af23 	beq.w	800fd70 <__ieee754_log+0x120>
 800ff2a:	a309      	add	r3, pc, #36	; (adr r3, 800ff50 <__ieee754_log+0x300>)
 800ff2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff34:	f7f0 fb3c 	bl	80005b0 <__aeabi_dmul>
 800ff38:	a307      	add	r3, pc, #28	; (adr r3, 800ff58 <__ieee754_log+0x308>)
 800ff3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff3e:	4604      	mov	r4, r0
 800ff40:	460d      	mov	r5, r1
 800ff42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff46:	e727      	b.n	800fd98 <__ieee754_log+0x148>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	e693      	b.n	800fc76 <__ieee754_log+0x26>
 800ff4e:	bf00      	nop
 800ff50:	fee00000 	.word	0xfee00000
 800ff54:	3fe62e42 	.word	0x3fe62e42
 800ff58:	35793c76 	.word	0x35793c76
 800ff5c:	3dea39ef 	.word	0x3dea39ef
 800ff60:	55555555 	.word	0x55555555
 800ff64:	3fd55555 	.word	0x3fd55555
 800ff68:	df3e5244 	.word	0xdf3e5244
 800ff6c:	3fc2f112 	.word	0x3fc2f112
 800ff70:	96cb03de 	.word	0x96cb03de
 800ff74:	3fc74664 	.word	0x3fc74664
 800ff78:	94229359 	.word	0x94229359
 800ff7c:	3fd24924 	.word	0x3fd24924
 800ff80:	55555593 	.word	0x55555593
 800ff84:	3fe55555 	.word	0x3fe55555
 800ff88:	d078c69f 	.word	0xd078c69f
 800ff8c:	3fc39a09 	.word	0x3fc39a09
 800ff90:	1d8e78af 	.word	0x1d8e78af
 800ff94:	3fcc71c5 	.word	0x3fcc71c5
 800ff98:	9997fa04 	.word	0x9997fa04
 800ff9c:	3fd99999 	.word	0x3fd99999
 800ffa0:	c3500000 	.word	0xc3500000
 800ffa4:	43500000 	.word	0x43500000
 800ffa8:	7fefffff 	.word	0x7fefffff
 800ffac:	3ff00000 	.word	0x3ff00000
 800ffb0:	3fe00000 	.word	0x3fe00000

0800ffb4 <_init>:
 800ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb6:	bf00      	nop
 800ffb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffba:	bc08      	pop	{r3}
 800ffbc:	469e      	mov	lr, r3
 800ffbe:	4770      	bx	lr

0800ffc0 <_fini>:
 800ffc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc2:	bf00      	nop
 800ffc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffc6:	bc08      	pop	{r3}
 800ffc8:	469e      	mov	lr, r3
 800ffca:	4770      	bx	lr
