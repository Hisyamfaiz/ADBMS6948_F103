
ADBMS6948_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e6c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001204  08013058  08013058  00023058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801425c  0801425c  00030250  2**0
                  CONTENTS
  4 .ARM          00000000  0801425c  0801425c  00030250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801425c  0801425c  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801425c  0801425c  0002425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014260  08014260  00024260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  08014264  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000acc  20000250  080144b4  00030250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d1c  080144b4  00030d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .debug_info   000313ad  00000000  00000000  00030279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059fd  00000000  00000000  00061626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cc0  00000000  00000000  00067028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a90  00000000  00000000  00068ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243a9  00000000  00000000  0006a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026997  00000000  00000000  0008eb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b957c  00000000  00000000  000b54b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ea34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e5c  00000000  00000000  0016ea88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000250 	.word	0x20000250
 8000204:	00000000 	.word	0x00000000
 8000208:	0801303c 	.word	0x0801303c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000254 	.word	0x20000254
 8000224:	0801303c 	.word	0x0801303c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4605      	mov	r5, r0
 800127a:	4621      	mov	r1, r4
 800127c:	4628      	mov	r0, r5
 800127e:	2200      	movs	r2, #0
 8001280:	2300      	movs	r3, #0
 8001282:	f7ff fc07 	bl	8000a94 <__aeabi_dcmplt>
 8001286:	b928      	cbnz	r0, 8001294 <__aeabi_d2lz+0x20>
 8001288:	4628      	mov	r0, r5
 800128a:	4621      	mov	r1, r4
 800128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001290:	f000 b80a 	b.w	80012a8 <__aeabi_d2ulz>
 8001294:	4628      	mov	r0, r5
 8001296:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800129a:	f000 f805 	bl	80012a8 <__aeabi_d2ulz>
 800129e:	4240      	negs	r0, r0
 80012a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	bf00      	nop

080012a8 <__aeabi_d2ulz>:
 80012a8:	b5d0      	push	{r4, r6, r7, lr}
 80012aa:	2200      	movs	r2, #0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__aeabi_d2ulz+0x34>)
 80012ae:	4606      	mov	r6, r0
 80012b0:	460f      	mov	r7, r1
 80012b2:	f7ff f97d 	bl	80005b0 <__aeabi_dmul>
 80012b6:	f7ff fc53 	bl	8000b60 <__aeabi_d2uiz>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_ui2d>
 80012c0:	2200      	movs	r2, #0
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <__aeabi_d2ulz+0x38>)
 80012c4:	f7ff f974 	bl	80005b0 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4630      	mov	r0, r6
 80012ce:	4639      	mov	r1, r7
 80012d0:	f7fe ffb6 	bl	8000240 <__aeabi_dsub>
 80012d4:	f7ff fc44 	bl	8000b60 <__aeabi_d2uiz>
 80012d8:	4621      	mov	r1, r4
 80012da:	bdd0      	pop	{r4, r6, r7, pc}
 80012dc:	3df00000 	.word	0x3df00000
 80012e0:	41f00000 	.word	0x41f00000

080012e4 <_Z11Adbms_Delaym>:
extern "C" void Adbms6948_measure_aux_voltage(const uint8_t knChainId, int nRet);
extern "C" void Adbms6948_measure_status_voltage(const uint8_t knChainId, int nRet);
extern "C" void Adbms6948_Discharge_Cell (uint16 Unbalanced_Cell);

void Adbms_Delay(uint32_t ms)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f005 fd35 	bl	8006d5c <HAL_Delay>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_Z18Adbms6948_SPI_Lockv>:
uint32_t Adbms_Timer_GetTick(void)
{
	return HAL_GetTick();
}

void Adbms6948_SPI_Lock(void){}
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <_Z20Adbms6948_SPI_Unlockv>:
void Adbms6948_SPI_Unlock(void){}
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
	...

08001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>:
{

}

void Adbms6948_SPI_WriteRead(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af02      	add	r7, sp, #8
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x50>)
 800132a:	f007 feb5 	bl	8009098 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Size, 1000);
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x54>)
 800133c:	f009 ff1e 	bl	800b17c <HAL_SPI_TransmitReceive>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x3c>
		printf("SPI transmit ERROR.\r\n");
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <_Z23Adbms6948_SPI_WriteReadPhS_t+0x58>)
 800134c:	f00e f8aa 	bl	800f4a4 <puts>
	}
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x50>)
 8001358:	f007 fe9e 	bl	8009098 <HAL_GPIO_WritePin>
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40011000 	.word	0x40011000
 8001368:	20000a44 	.word	0x20000a44
 800136c:	08013058 	.word	0x08013058

08001370 <Adbms_Init>:

void Adbms_Init(void *argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	init:
	nRet = Adbms6948_Init(&koConfig);
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <Adbms_Init+0x30>)
 800137a:	f00a fec3 	bl	800c104 <_Z14Adbms6948_InitPK17Adbms6948_CfgType>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <Adbms_Init+0x34>)
 8001384:	601a      	str	r2, [r3, #0]

	if (nRet != E_OK) {
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <Adbms_Init+0x34>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <Adbms_Init+0x28>
		HAL_Delay(1000);
 800138e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001392:	f005 fce3 	bl	8006d5c <HAL_Delay>
		goto init;
 8001396:	e7ef      	b.n	8001378 <Adbms_Init+0x8>
	}
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000002c 	.word	0x2000002c
 80013a4:	2000034c 	.word	0x2000034c

080013a8 <Adbms6948_measure_cells>:
		printf("Write Failed\n");
	}
}

void Adbms6948_measure_cells(const uint8_t knChainId, int nRet)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
	Adbms6948_Cmn_SendCommandOnly(0x0028, TRUE, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f00b fd56 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	Adbms_Delay(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff ff90 	bl	80012e4 <_Z11Adbms_Delaym>
	Adbms6948_TrigCADCInputs oCADCInputs{
 80013c4:	2300      	movs	r3, #0
 80013c6:	723b      	strb	r3, [r7, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	727b      	strb	r3, [r7, #9]
 80013cc:	2300      	movs	r3, #0
 80013ce:	72bb      	strb	r3, [r7, #10]
 80013d0:	2300      	movs	r3, #0
 80013d2:	72fb      	strb	r3, [r7, #11]
 80013d4:	2300      	movs	r3, #0
 80013d6:	733b      	strb	r3, [r7, #12]
		0,
		1,
		0,
		0,
		ADBMS6948_CELL_OW_NONE};
	if(nRet == 0) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <Adbms6948_measure_cells+0x64>

		nRet = Adbms6948_TrigCADC(&oCADCInputs, knChainId);
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00a fe98 	bl	800c11c <_Z18Adbms6948_TrigCADCP24Adbms6948_TrigCADCInputsh>
 80013ec:	4603      	mov	r3, r0
 80013ee:	603b      	str	r3, [r7, #0]
		Adbms_Delay(1); //1.1ms
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ff77 	bl	80012e4 <_Z11Adbms_Delaym>

		nRet = Adbms6948_ReadCellVolt(ADBMS6948_CELL_MEAS_DATA,
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <Adbms6948_measure_cells+0xc0>)
 80013fe:	2106      	movs	r1, #6
 8001400:	2000      	movs	r0, #0
 8001402:	f00a feab 	bl	800c15c <_Z22Adbms6948_ReadCellVolt26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePs21Adbms6948_SnapSelTypeh>
 8001406:	4603      	mov	r3, r0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	e002      	b.n	8001412 <Adbms6948_measure_cells+0x6a>
				ADBMS6948_SEND_NONE,
				knChainId);
	}

	else {
		printf("Init Failed\n");
 800140c:	4817      	ldr	r0, [pc, #92]	; (800146c <Adbms6948_measure_cells+0xc4>)
 800140e:	f00e f849 	bl	800f4a4 <puts>
	}
	for(uint8_t J=0; J<10; J++){
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b09      	cmp	r3, #9
 800141a:	d81b      	bhi.n	8001454 <Adbms6948_measure_cells+0xac>
		CellVoltage[J] = (float)(anCellVolt[J] * 0.000150f + 1.5f);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <Adbms6948_measure_cells+0xc0>)
 8001420:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fcc5 	bl	8000db4 <__aeabi_i2f>
 800142a:	4603      	mov	r3, r0
 800142c:	4910      	ldr	r1, [pc, #64]	; (8001470 <Adbms6948_measure_cells+0xc8>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fd14 	bl	8000e5c <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	7bfc      	ldrb	r4, [r7, #15]
 8001438:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fc05 	bl	8000c4c <__addsf3>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <Adbms6948_measure_cells+0xcc>)
 8001448:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint8_t J=0; J<10; J++){
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	3301      	adds	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e7e0      	b.n	8001416 <Adbms6948_measure_cells+0x6e>
	}
	Adbms6948_Cmn_SendCommandOnly(0x0029, TRUE, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	2029      	movs	r0, #41	; 0x29
 800145a:	f00b fd06 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	20000324 	.word	0x20000324
 800146c:	080130a0 	.word	0x080130a0
 8001470:	391d4952 	.word	0x391d4952
 8001474:	20000a04 	.word	0x20000a04

08001478 <Adbms6948_measure_current>:


void Adbms6948_measure_current(const uint8_t knChainId, int nRet)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]

	Adbms6948_TrigI1ADCInputs oI1ADCInputs{1, 1, ADBMS6948_CURRENT_OW_NONE};
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <Adbms6948_measure_current+0x98>)
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	4611      	mov	r1, r2
 800148e:	8019      	strh	r1, [r3, #0]
 8001490:	3302      	adds	r3, #2
 8001492:	0c12      	lsrs	r2, r2, #16
 8001494:	701a      	strb	r2, [r3, #0]

	if(nRet == 0) {
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d12e      	bne.n	80014fa <Adbms6948_measure_current+0x82>
		Adbms6948_TrigI1ADC(&oI1ADCInputs, knChainId);
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00a fe49 	bl	800c13c <_Z19Adbms6948_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>
		Adbms_Delay(1); //1.1ms
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff ff1a 	bl	80012e4 <_Z11Adbms_Delaym>
		Adbms6948_ReadCurrent(ADBMS6948_CURRENT_MEAS_DATA,
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <Adbms6948_measure_current+0x9c>)
 80014b8:	2100      	movs	r1, #0
 80014ba:	2000      	movs	r0, #0
 80014bc:	f00a fe64 	bl	800c188 <_Z21Adbms6948_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>
				ADBMS6948_CURRENT_I1,
				&nCurrent,
				ADBMS6948_SEND_NONE,
				knChainId);
		Current = (float) (nCurrent)*0.000415f - 0.0326;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <Adbms6948_measure_current+0x9c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc75 	bl	8000db4 <__aeabi_i2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4912      	ldr	r1, [pc, #72]	; (8001518 <Adbms6948_measure_current+0xa0>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fcc4 	bl	8000e5c <__aeabi_fmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f812 	bl	8000500 <__aeabi_f2d>
 80014dc:	a30a      	add	r3, pc, #40	; (adr r3, 8001508 <Adbms6948_measure_current+0x90>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7fe fead 	bl	8000240 <__aeabi_dsub>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb57 	bl	8000ba0 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <Adbms6948_measure_current+0xa4>)
 80014f6:	6013      	str	r3, [r2, #0]
	}

	else {
		printf("Init Failed\n");
	}
}
 80014f8:	e002      	b.n	8001500 <Adbms6948_measure_current+0x88>
		printf("Init Failed\n");
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <Adbms6948_measure_current+0xa8>)
 80014fc:	f00d ffd2 	bl	800f4a4 <puts>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	7bb2fec5 	.word	0x7bb2fec5
 800150c:	3fa0b0f2 	.word	0x3fa0b0f2
 8001510:	080130ac 	.word	0x080130ac
 8001514:	20000344 	.word	0x20000344
 8001518:	39d9945b 	.word	0x39d9945b
 800151c:	200009dc 	.word	0x200009dc
 8001520:	080130a0 	.word	0x080130a0

08001524 <Adbms6948_Discharge_Cell>:
			knChainId);
	PrintStatusVoltage(&anStatVoltage[0]);
}

void Adbms6948_Discharge_Cell (uint16 Unbalanced_Cell)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
	Adbms6948_discharge_cell(Unbalanced_Cell);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4618      	mov	r0, r3
 8001532:	f00b faff 	bl	800cb34 <_Z24Adbms6948_discharge_cellt>
	Adbms_Delay(20); //20ms
 8001536:	2014      	movs	r0, #20
 8001538:	f7ff fed4 	bl	80012e4 <_Z11Adbms_Delaym>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Batt_Discharge_Mode>:
extern float Pack_SOC, Delta_VCell,Bat_Pow_Out, Pack_Cap;
extern uint16_t LifeTime;
extern uint8_t BATT_State;

void Batt_Discharge_Mode(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON||
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <Batt_Discharge_Mode+0x7c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d01b      	beq.n	8001588 <Batt_Discharge_Mode+0x44>
			flag_trip_overtemperature==ON||
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <Batt_Discharge_Mode+0x80>)
 8001552:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON||
 8001554:	2b01      	cmp	r3, #1
 8001556:	d017      	beq.n	8001588 <Batt_Discharge_Mode+0x44>
			flag_trip_undertemperature==ON||
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <Batt_Discharge_Mode+0x84>)
 800155a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON||
 800155c:	2b01      	cmp	r3, #1
 800155e:	d013      	beq.n	8001588 <Batt_Discharge_Mode+0x44>
			flag_trip_overcurrentdischarge==ON||
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <Batt_Discharge_Mode+0x88>)
 8001562:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON||
 8001564:	2b01      	cmp	r3, #1
 8001566:	d00f      	beq.n	8001588 <Batt_Discharge_Mode+0x44>
			flag_trip_SOCOverDischarge==ON||
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <Batt_Discharge_Mode+0x8c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 800156c:	2b01      	cmp	r3, #1
 800156e:	d00b      	beq.n	8001588 <Batt_Discharge_Mode+0x44>
			flag_trip_shortcircuit==ON||
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <Batt_Discharge_Mode+0x90>)
 8001572:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON||
 8001574:	2b01      	cmp	r3, #1
 8001576:	d007      	beq.n	8001588 <Batt_Discharge_Mode+0x44>
			flag_trip_unbalance==ON||
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <Batt_Discharge_Mode+0x94>)
 800157a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON||
 800157c:	2b01      	cmp	r3, #1
 800157e:	d003      	beq.n	8001588 <Batt_Discharge_Mode+0x44>
			flag_trip_systemfailure==ON)
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <Batt_Discharge_Mode+0x98>)
 8001582:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON||
 8001584:	2b01      	cmp	r3, #1
 8001586:	d102      	bne.n	800158e <Batt_Discharge_Mode+0x4a>
	{
		Batt_Open_Mode();
 8001588:	f000 f908 	bl	800179c <Batt_Open_Mode>
 800158c:	e015      	b.n	80015ba <Batt_Discharge_Mode+0x76>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4812      	ldr	r0, [pc, #72]	; (80015e0 <Batt_Discharge_Mode+0x9c>)
 8001596:	f007 fd7f 	bl	8009098 <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <Batt_Discharge_Mode+0xa0>)
 800159c:	2202      	movs	r2, #2
 800159e:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <Batt_Discharge_Mode+0xa4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <Batt_Discharge_Mode+0xa8>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <Batt_Discharge_Mode+0xac>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <Batt_Discharge_Mode+0xb0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
	}


}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000314 	.word	0x20000314
 80015c4:	20000310 	.word	0x20000310
 80015c8:	20000311 	.word	0x20000311
 80015cc:	20000316 	.word	0x20000316
 80015d0:	20000312 	.word	0x20000312
 80015d4:	20000318 	.word	0x20000318
 80015d8:	2000031a 	.word	0x2000031a
 80015dc:	20000319 	.word	0x20000319
 80015e0:	40010800 	.word	0x40010800
 80015e4:	200009e4 	.word	0x200009e4
 80015e8:	200002cb 	.word	0x200002cb
 80015ec:	200002cc 	.word	0x200002cc
 80015f0:	200002cd 	.word	0x200002cd
 80015f4:	2000078d 	.word	0x2000078d

080015f8 <Batt_Charge_Mode>:

void Batt_Charge_Mode(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	if(flag_trip_overvoltage==ON			||
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <Batt_Charge_Mode+0x94>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d017      	beq.n	8001634 <Batt_Charge_Mode+0x3c>
			flag_trip_overtemperature==ON	||
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <Batt_Charge_Mode+0x98>)
 8001606:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_overvoltage==ON			||
 8001608:	2b01      	cmp	r3, #1
 800160a:	d013      	beq.n	8001634 <Batt_Charge_Mode+0x3c>
			flag_trip_undertemperature==ON	||
 800160c:	4b21      	ldr	r3, [pc, #132]	; (8001694 <Batt_Charge_Mode+0x9c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 8001610:	2b01      	cmp	r3, #1
 8001612:	d00f      	beq.n	8001634 <Batt_Charge_Mode+0x3c>
			flag_trip_overcurrentcharge==ON	||
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <Batt_Charge_Mode+0xa0>)
 8001616:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 8001618:	2b01      	cmp	r3, #1
 800161a:	d00b      	beq.n	8001634 <Batt_Charge_Mode+0x3c>
			flag_trip_SOCOverCharge==ON		||
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <Batt_Charge_Mode+0xa4>)
 800161e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 8001620:	2b01      	cmp	r3, #1
 8001622:	d007      	beq.n	8001634 <Batt_Charge_Mode+0x3c>
			flag_trip_shortcircuit==ON		||
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <Batt_Charge_Mode+0xa8>)
 8001626:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001628:	2b01      	cmp	r3, #1
 800162a:	d003      	beq.n	8001634 <Batt_Charge_Mode+0x3c>
			flag_trip_systemfailure==ON		)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <Batt_Charge_Mode+0xac>)
 800162e:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001630:	2b01      	cmp	r3, #1
 8001632:	d102      	bne.n	800163a <Batt_Charge_Mode+0x42>
	{
		Batt_Open_Mode();
 8001634:	f000 f8b2 	bl	800179c <Batt_Open_Mode>
			EEPROM_WriteData(11, cycle);
			flag_write_cycle = 1;
		}
	}

}
 8001638:	e026      	b.n	8001688 <Batt_Charge_Mode+0x90>
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001640:	4819      	ldr	r0, [pc, #100]	; (80016a8 <Batt_Charge_Mode+0xb0>)
 8001642:	f007 fd29 	bl	8009098 <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <Batt_Charge_Mode+0xb4>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <Batt_Charge_Mode+0xb8>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <Batt_Charge_Mode+0xbc>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <Batt_Charge_Mode+0xc0>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
		if (flag_write_cycle == 0){
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <Batt_Charge_Mode+0xc4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d110      	bne.n	8001688 <Batt_Charge_Mode+0x90>
			cycle = EEPROM_ReadData(11) + 1;
 8001666:	200b      	movs	r0, #11
 8001668:	f000 fad2 	bl	8001c10 <EEPROM_ReadData>
 800166c:	4603      	mov	r3, r0
 800166e:	3301      	adds	r3, #1
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <Batt_Charge_Mode+0xc8>)
 8001674:	701a      	strb	r2, [r3, #0]
			EEPROM_WriteData(11, cycle);
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <Batt_Charge_Mode+0xc8>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	200b      	movs	r0, #11
 800167e:	f000 faa9 	bl	8001bd4 <EEPROM_WriteData>
			flag_write_cycle = 1;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <Batt_Charge_Mode+0xc4>)
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000315 	.word	0x20000315
 8001690:	20000310 	.word	0x20000310
 8001694:	20000311 	.word	0x20000311
 8001698:	20000317 	.word	0x20000317
 800169c:	20000313 	.word	0x20000313
 80016a0:	20000318 	.word	0x20000318
 80016a4:	20000319 	.word	0x20000319
 80016a8:	40010800 	.word	0x40010800
 80016ac:	200009e4 	.word	0x200009e4
 80016b0:	200002cb 	.word	0x200002cb
 80016b4:	200002cc 	.word	0x200002cc
 80016b8:	200002cd 	.word	0x200002cd
 80016bc:	2000078d 	.word	0x2000078d
 80016c0:	2000078c 	.word	0x2000078c

080016c4 <Batt_Full_CD_Mode>:

void Batt_Full_CD_Mode(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <Batt_Full_CD_Mode+0x94>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d027      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <Batt_Full_CD_Mode+0x98>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d023      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <Batt_Full_CD_Mode+0x9c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d01f      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 80016e0:	4b20      	ldr	r3, [pc, #128]	; (8001764 <Batt_Full_CD_Mode+0xa0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d01b      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <Batt_Full_CD_Mode+0xa4>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d017      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <Batt_Full_CD_Mode+0xa8>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d013      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <Batt_Full_CD_Mode+0xac>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d00f      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <Batt_Full_CD_Mode+0xb0>)
 8001702:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 8001704:	2b01      	cmp	r3, #1
 8001706:	d00b      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <Batt_Full_CD_Mode+0xb4>)
 800170a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 800170c:	2b01      	cmp	r3, #1
 800170e:	d007      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <Batt_Full_CD_Mode+0xb8>)
 8001712:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 8001714:	2b01      	cmp	r3, #1
 8001716:	d003      	beq.n	8001720 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <Batt_Full_CD_Mode+0xbc>)
 800171a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 800171c:	2b01      	cmp	r3, #1
 800171e:	d102      	bne.n	8001726 <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 8001720:	f000 f83c 	bl	800179c <Batt_Open_Mode>
 8001724:	e015      	b.n	8001752 <Batt_Full_CD_Mode+0x8e>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172c:	4815      	ldr	r0, [pc, #84]	; (8001784 <Batt_Full_CD_Mode+0xc0>)
 800172e:	f007 fcb3 	bl	8009098 <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <Batt_Full_CD_Mode+0xc4>)
 8001734:	2203      	movs	r2, #3
 8001736:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <Batt_Full_CD_Mode+0xc8>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <Batt_Full_CD_Mode+0xcc>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <Batt_Full_CD_Mode+0xd0>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <Batt_Full_CD_Mode+0xd4>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
	}
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000314 	.word	0x20000314
 800175c:	20000315 	.word	0x20000315
 8001760:	20000310 	.word	0x20000310
 8001764:	20000311 	.word	0x20000311
 8001768:	20000316 	.word	0x20000316
 800176c:	20000317 	.word	0x20000317
 8001770:	20000312 	.word	0x20000312
 8001774:	20000313 	.word	0x20000313
 8001778:	20000318 	.word	0x20000318
 800177c:	2000031a 	.word	0x2000031a
 8001780:	20000319 	.word	0x20000319
 8001784:	40010800 	.word	0x40010800
 8001788:	200009e4 	.word	0x200009e4
 800178c:	200002cb 	.word	0x200002cb
 8001790:	200002cc 	.word	0x200002cc
 8001794:	200002cd 	.word	0x200002cd
 8001798:	2000078d 	.word	0x2000078d

0800179c <Batt_Open_Mode>:

void Batt_Open_Mode(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a6:	480c      	ldr	r0, [pc, #48]	; (80017d8 <Batt_Open_Mode+0x3c>)
 80017a8:	f007 fc76 	bl	8009098 <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <Batt_Open_Mode+0x40>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <Batt_Open_Mode+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <Batt_Open_Mode+0x48>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <Batt_Open_Mode+0x4c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <Batt_Open_Mode+0x50>)
 80017cc:	f007 fc64 	bl	8009098 <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 80017d0:	f000 f80e 	bl	80017f0 <check_SOC_Based_OCV>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40010800 	.word	0x40010800
 80017dc:	200009e4 	.word	0x200009e4
 80017e0:	200002cb 	.word	0x200002cb
 80017e4:	200002cc 	.word	0x200002cc
 80017e8:	200002cd 	.word	0x200002cd
 80017ec:	40011000 	.word	0x40011000

080017f0 <check_SOC_Based_OCV>:

void check_SOC_Based_OCV(void)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 80017f4:	4b66      	ldr	r3, [pc, #408]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe81 	bl	8000500 <__aeabi_f2d>
 80017fe:	a354      	add	r3, pc, #336	; (adr r3, 8001950 <check_SOC_Based_OCV+0x160>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7ff f950 	bl	8000aa8 <__aeabi_dcmple>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d025      	beq.n	800185a <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe74 	bl	8000500 <__aeabi_f2d>
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	4b5d      	ldr	r3, [pc, #372]	; (8001994 <check_SOC_Based_OCV+0x1a4>)
 800181e:	f7fe fff1 	bl	8000804 <__aeabi_ddiv>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	a34b      	add	r3, pc, #300	; (adr r3, 8001958 <check_SOC_Based_OCV+0x168>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe febe 	bl	80005b0 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	a348      	add	r3, pc, #288	; (adr r3, 8001960 <check_SOC_Based_OCV+0x170>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fcfd 	bl	8000240 <__aeabi_dsub>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9a7 	bl	8000ba0 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	4a50      	ldr	r2, [pc, #320]	; (8001998 <check_SOC_Based_OCV+0x1a8>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e0d4      	b.n	8001a04 <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 800185a:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe4e 	bl	8000500 <__aeabi_f2d>
 8001864:	a33a      	add	r3, pc, #232	; (adr r3, 8001950 <check_SOC_Based_OCV+0x160>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7ff f931 	bl	8000ad0 <__aeabi_dcmpgt>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d02e      	beq.n	80018d2 <check_SOC_Based_OCV+0xe2>
 8001874:	4b46      	ldr	r3, [pc, #280]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4948      	ldr	r1, [pc, #288]	; (800199c <check_SOC_Based_OCV+0x1ac>)
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fc96 	bl	80011ac <__aeabi_fcmple>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d025      	beq.n	80018d2 <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 8001886:	4b42      	ldr	r3, [pc, #264]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe38 	bl	8000500 <__aeabi_f2d>
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <check_SOC_Based_OCV+0x1a4>)
 8001896:	f7fe ffb5 	bl	8000804 <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	a331      	add	r3, pc, #196	; (adr r3, 8001968 <check_SOC_Based_OCV+0x178>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fe82 	bl	80005b0 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	a32e      	add	r3, pc, #184	; (adr r3, 8001970 <check_SOC_Based_OCV+0x180>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7fe fcc1 	bl	8000240 <__aeabi_dsub>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f96b 	bl	8000ba0 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a32      	ldr	r2, [pc, #200]	; (8001998 <check_SOC_Based_OCV+0x1a8>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	e098      	b.n	8001a04 <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4931      	ldr	r1, [pc, #196]	; (800199c <check_SOC_Based_OCV+0x1ac>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc7b 	bl	80011d4 <__aeabi_fcmpgt>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05d      	beq.n	80019a0 <check_SOC_Based_OCV+0x1b0>
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fe09 	bl	8000500 <__aeabi_f2d>
 80018ee:	a322      	add	r3, pc, #136	; (adr r3, 8001978 <check_SOC_Based_OCV+0x188>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7ff f8d8 	bl	8000aa8 <__aeabi_dcmple>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d050      	beq.n	80019a0 <check_SOC_Based_OCV+0x1b0>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <check_SOC_Based_OCV+0x1a0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdfc 	bl	8000500 <__aeabi_f2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <check_SOC_Based_OCV+0x1a4>)
 800190e:	f7fe ff79 	bl	8000804 <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	a319      	add	r3, pc, #100	; (adr r3, 8001980 <check_SOC_Based_OCV+0x190>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe46 	bl	80005b0 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	a316      	add	r3, pc, #88	; (adr r3, 8001988 <check_SOC_Based_OCV+0x198>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fc85 	bl	8000240 <__aeabi_dsub>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff f92f 	bl	8000ba0 <__aeabi_d2f>
 8001942:	4603      	mov	r3, r0
 8001944:	4a14      	ldr	r2, [pc, #80]	; (8001998 <check_SOC_Based_OCV+0x1a8>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e05c      	b.n	8001a04 <check_SOC_Based_OCV+0x214>
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w
 8001950:	66666666 	.word	0x66666666
 8001954:	4049a666 	.word	0x4049a666
 8001958:	9d89d6ed 	.word	0x9d89d6ed
 800195c:	403809d8 	.word	0x403809d8
 8001960:	00000000 	.word	0x00000000
 8001964:	40534c00 	.word	0x40534c00
 8001968:	26317911 	.word	0x26317911
 800196c:	4060e88b 	.word	0x4060e88b
 8001970:	a5947ec7 	.word	0xa5947ec7
 8001974:	407ca45a 	.word	0x407ca45a
 8001978:	9999999a 	.word	0x9999999a
 800197c:	404b5999 	.word	0x404b5999
 8001980:	f989b8e3 	.word	0xf989b8e3
 8001984:	4074ce1a 	.word	0x4074ce1a
 8001988:	e9c08a8b 	.word	0xe9c08a8b
 800198c:	409227ee 	.word	0x409227ee
 8001990:	20000280 	.word	0x20000280
 8001994:	402e0000 	.word	0x402e0000
 8001998:	20000320 	.word	0x20000320
 800199c:	42560000 	.word	0x42560000
	}
	else if(VBATT > 54.7){
 80019a0:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <check_SOC_Based_OCV+0x380>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdab 	bl	8000500 <__aeabi_f2d>
 80019aa:	a365      	add	r3, pc, #404	; (adr r3, 8001b40 <check_SOC_Based_OCV+0x350>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7ff f88e 	bl	8000ad0 <__aeabi_dcmpgt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d024      	beq.n	8001a04 <check_SOC_Based_OCV+0x214>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <check_SOC_Based_OCV+0x380>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fd9e 	bl	8000500 <__aeabi_f2d>
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <check_SOC_Based_OCV+0x384>)
 80019ca:	f7fe ff1b 	bl	8000804 <__aeabi_ddiv>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	a35c      	add	r3, pc, #368	; (adr r3, 8001b48 <check_SOC_Based_OCV+0x358>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fde8 	bl	80005b0 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	a359      	add	r3, pc, #356	; (adr r3, 8001b50 <check_SOC_Based_OCV+0x360>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fc27 	bl	8000240 <__aeabi_dsub>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f7ff f8d1 	bl	8000ba0 <__aeabi_d2f>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a5d      	ldr	r2, [pc, #372]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001a02:	6013      	str	r3, [r2, #0]
	}

	Pack_SOC=(0.4884934490 * VBATT * VBATT) - (26.2875616013 * VBATT) + 348.6849534722;   //Persamaan Baterai INR 21700
 8001a04:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <check_SOC_Based_OCV+0x380>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd79 	bl	8000500 <__aeabi_f2d>
 8001a0e:	a352      	add	r3, pc, #328	; (adr r3, 8001b58 <check_SOC_Based_OCV+0x368>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fdcc 	bl	80005b0 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	461d      	mov	r5, r3
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <check_SOC_Based_OCV+0x380>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fd6b 	bl	8000500 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4620      	mov	r0, r4
 8001a30:	4629      	mov	r1, r5
 8001a32:	f7fe fdbd 	bl	80005b0 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4614      	mov	r4, r2
 8001a3c:	461d      	mov	r5, r3
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <check_SOC_Based_OCV+0x380>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd5c 	bl	8000500 <__aeabi_f2d>
 8001a48:	a345      	add	r3, pc, #276	; (adr r3, 8001b60 <check_SOC_Based_OCV+0x370>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fdaf 	bl	80005b0 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4620      	mov	r0, r4
 8001a58:	4629      	mov	r1, r5
 8001a5a:	f7fe fbf1 	bl	8000240 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	a340      	add	r3, pc, #256	; (adr r3, 8001b68 <check_SOC_Based_OCV+0x378>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fbea 	bl	8000244 <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f892 	bl	8000ba0 <__aeabi_d2f>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a3e      	ldr	r2, [pc, #248]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001a80:	6013      	str	r3, [r2, #0]
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 8001a82:	4b3e      	ldr	r3, [pc, #248]	; (8001b7c <check_SOC_Based_OCV+0x38c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3e      	ldr	r2, [pc, #248]	; (8001b80 <check_SOC_Based_OCV+0x390>)
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff f8db 	bl	8000c48 <__aeabi_fsub>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4619      	mov	r1, r3
 8001a96:	483b      	ldr	r0, [pc, #236]	; (8001b84 <check_SOC_Based_OCV+0x394>)
 8001a98:	f7ff fa94 	bl	8000fc4 <__aeabi_fdiv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <check_SOC_Based_OCV+0x398>)
 8001aa2:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <check_SOC_Based_OCV+0x398>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a35      	ldr	r2, [pc, #212]	; (8001b80 <check_SOC_Based_OCV+0x390>)
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f9d4 	bl	8000e5c <__aeabi_fmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001aba:	4a34      	ldr	r2, [pc, #208]	; (8001b8c <check_SOC_Based_OCV+0x39c>)
 8001abc:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <check_SOC_Based_OCV+0x398>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f9c7 	bl	8000e5c <__aeabi_fmul>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <check_SOC_Based_OCV+0x39c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7ff f8b7 	bl	8000c4c <__addsf3>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <check_SOC_Based_OCV+0x3a0>)
 8001ae4:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	492a      	ldr	r1, [pc, #168]	; (8001b94 <check_SOC_Based_OCV+0x3a4>)
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fb71 	bl	80011d4 <__aeabi_fcmpgt>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <check_SOC_Based_OCV+0x310>
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <check_SOC_Based_OCV+0x394>)
 8001afc:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 8001afe:	e01b      	b.n	8001b38 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC>100) Pack_SOC=100;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	491f      	ldr	r1, [pc, #124]	; (8001b84 <check_SOC_Based_OCV+0x394>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb64 	bl	80011d4 <__aeabi_fcmpgt>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <check_SOC_Based_OCV+0x32a>
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <check_SOC_Based_OCV+0x394>)
 8001b16:	601a      	str	r2, [r3, #0]
}
 8001b18:	e00e      	b.n	8001b38 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fb38 	bl	8001198 <__aeabi_fcmplt>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d100      	bne.n	8001b30 <check_SOC_Based_OCV+0x340>
}
 8001b2e:	e003      	b.n	8001b38 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <check_SOC_Based_OCV+0x388>)
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	f3af 8000 	nop.w
 8001b40:	9999999a 	.word	0x9999999a
 8001b44:	404b5999 	.word	0x404b5999
 8001b48:	99fc263d 	.word	0x99fc263d
 8001b4c:	405bdb4c 	.word	0x405bdb4c
 8001b50:	be4fd9fa 	.word	0xbe4fd9fa
 8001b54:	40761dc4 	.word	0x40761dc4
 8001b58:	06f0f9c2 	.word	0x06f0f9c2
 8001b5c:	3fdf437a 	.word	0x3fdf437a
 8001b60:	a3192b3c 	.word	0xa3192b3c
 8001b64:	403a499d 	.word	0x403a499d
 8001b68:	91c5a617 	.word	0x91c5a617
 8001b6c:	4075caf5 	.word	0x4075caf5
 8001b70:	20000280 	.word	0x20000280
 8001b74:	402e0000 	.word	0x402e0000
 8001b78:	20000320 	.word	0x20000320
 8001b7c:	200002ec 	.word	0x200002ec
 8001b80:	200002f0 	.word	0x200002f0
 8001b84:	42c80000 	.word	0x42c80000
 8001b88:	200002f8 	.word	0x200002f8
 8001b8c:	200002fc 	.word	0x200002fc
 8001b90:	200002f4 	.word	0x200002f4
 8001b94:	43020000 	.word	0x43020000

08001b98 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c2, addr, 3, 100)!=HAL_OK){
 8001ba2:	88f9      	ldrh	r1, [r7, #6]
 8001ba4:	2364      	movs	r3, #100	; 0x64
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4808      	ldr	r0, [pc, #32]	; (8001bcc <EEPROM_isDeviceReady+0x34>)
 8001baa:	f008 f84b 	bl	8009c44 <HAL_I2C_IsDeviceReady>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001bb4:	2140      	movs	r1, #64	; 0x40
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <EEPROM_isDeviceReady+0x38>)
 8001bb8:	f007 fa86 	bl	80090c8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001bbc:	2064      	movs	r0, #100	; 0x64
 8001bbe:	f005 f8cd 	bl	8006d5c <HAL_Delay>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001bc2:	e7f7      	b.n	8001bb4 <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000958 	.word	0x20000958
 8001bd0:	40011000 	.word	0x40011000

08001bd4 <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af04      	add	r7, sp, #16
 8001bda:	4603      	mov	r3, r0
 8001bdc:	460a      	mov	r2, r1
 8001bde:	80fb      	strh	r3, [r7, #6]
 8001be0:	4613      	mov	r3, r2
 8001be2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2,EEPROM_ADDRESS,addr,64,&data,1,10);
 8001be4:	88fa      	ldrh	r2, [r7, #6]
 8001be6:	230a      	movs	r3, #10
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2301      	movs	r3, #1
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	1d7b      	adds	r3, r7, #5
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2340      	movs	r3, #64	; 0x40
 8001bf4:	21a0      	movs	r1, #160	; 0xa0
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <EEPROM_WriteData+0x38>)
 8001bf8:	f007 fcc2 	bl	8009580 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001bfc:	2064      	movs	r0, #100	; 0x64
 8001bfe:	f005 f8ad 	bl	8006d5c <HAL_Delay>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000958 	.word	0x20000958

08001c10 <EEPROM_ReadData>:

uint8_t EEPROM_ReadData(uint16_t addr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af04      	add	r7, sp, #16
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
	uint8_t EEPROM_data;
	HAL_I2C_Mem_Read(&hi2c2,0xA0,addr,64,&EEPROM_data,1,10);
 8001c1a:	88fa      	ldrh	r2, [r7, #6]
 8001c1c:	230a      	movs	r3, #10
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	2301      	movs	r3, #1
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	f107 030f 	add.w	r3, r7, #15
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2340      	movs	r3, #64	; 0x40
 8001c2c:	21a0      	movs	r1, #160	; 0xa0
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <EEPROM_ReadData+0x34>)
 8001c30:	f007 fda0 	bl	8009774 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f005 f891 	bl	8006d5c <HAL_Delay>
	return EEPROM_data;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000958 	.word	0x20000958

08001c48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c5a:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <MX_ADC1_Init+0x124>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c5e:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c72:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c74:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c82:	2207      	movs	r2, #7
 8001c84:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c86:	4838      	ldr	r0, [pc, #224]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001c88:	f005 f88c 	bl	8006da4 <HAL_ADC_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001c92:	f001 fc2b 	bl	80034ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4830      	ldr	r0, [pc, #192]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001ca8:	f005 fa60 	bl	800716c <HAL_ADC_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f001 fc1b 	bl	80034ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4829      	ldr	r0, [pc, #164]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001cc4:	f005 fa52 	bl	800716c <HAL_ADC_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001cce:	f001 fc0d 	bl	80034ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4822      	ldr	r0, [pc, #136]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001ce0:	f005 fa44 	bl	800716c <HAL_ADC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001cea:	f001 fbff 	bl	80034ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481b      	ldr	r0, [pc, #108]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001cfc:	f005 fa36 	bl	800716c <HAL_ADC_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001d06:	f001 fbf1 	bl	80034ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d0e:	2305      	movs	r3, #5
 8001d10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	4814      	ldr	r0, [pc, #80]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001d18:	f005 fa28 	bl	800716c <HAL_ADC_ConfigChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001d22:	f001 fbe3 	bl	80034ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d26:	2306      	movs	r3, #6
 8001d28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001d34:	f005 fa1a 	bl	800716c <HAL_ADC_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001d3e:	f001 fbd5 	bl	80034ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d42:	2308      	movs	r3, #8
 8001d44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d46:	2307      	movs	r3, #7
 8001d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <MX_ADC1_Init+0x120>)
 8001d50:	f005 fa0c 	bl	800716c <HAL_ADC_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001d5a:	f001 fbc7 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000790 	.word	0x20000790
 8001d6c:	40012400 	.word	0x40012400

08001d70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a33      	ldr	r2, [pc, #204]	; (8001e58 <HAL_ADC_MspInit+0xe8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d15f      	bne.n	8001e50 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a31      	ldr	r2, [pc, #196]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da8:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001dc6:	f043 0308 	orr.w	r3, r3, #8
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_ADC_MspInit+0xec>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = LOWCELL_TEMP_Pin|HIGHCELL_TEMP_Pin|MOSFET_TEMP_Pin|CURRENT_SENSE_TEMP_Pin
 8001dd8:	237e      	movs	r3, #126	; 0x7e
 8001dda:	61bb      	str	r3, [r7, #24]
                          |CURRENT_SENSOR_Pin|SPARE_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	4619      	mov	r1, r3
 8001de6:	481e      	ldr	r0, [pc, #120]	; (8001e60 <HAL_ADC_MspInit+0xf0>)
 8001de8:	f006 ffc2 	bl	8008d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIDCELL_TEMP_Pin;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df0:	2303      	movs	r3, #3
 8001df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIDCELL_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	481a      	ldr	r0, [pc, #104]	; (8001e64 <HAL_ADC_MspInit+0xf4>)
 8001dfc:	f006 ffb8 	bl	8008d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e02:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <HAL_ADC_MspInit+0xfc>)
 8001e04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e36:	f006 fb53 	bl	80084e0 <HAL_DMA_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001e40:	f001 fb54 	bl	80034ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e48:	621a      	str	r2, [r3, #32]
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_ADC_MspInit+0xf8>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012400 	.word	0x40012400
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010800 	.word	0x40010800
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	200007c0 	.word	0x200007c0
 8001e6c:	40020008 	.word	0x40020008

08001e70 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <MX_CAN_Init+0x68>)
 8001e78:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001e7c:	2208      	movs	r2, #8
 8001e7e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001e8e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001e92:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001e96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e9a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MX_CAN_Init+0x64>)
 8001ec2:	f005 fb4c 	bl	800755e <HAL_CAN_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001ecc:	f001 fb0e 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000820 	.word	0x20000820
 8001ed8:	40006400 	.word	0x40006400

08001edc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_CAN_MspInit+0xc0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d14b      	bne.n	8001f94 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f06:	61d3      	str	r3, [r2, #28]
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_CAN_MspInit+0xc4>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <HAL_CAN_MspInit+0xc8>)
 8001f42:	f006 ff15 	bl	8008d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4812      	ldr	r0, [pc, #72]	; (8001fa4 <HAL_CAN_MspInit+0xc8>)
 8001f5c:	f006 ff08 	bl	8008d70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_CAN_MspInit+0xcc>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_CAN_MspInit+0xcc>)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2014      	movs	r0, #20
 8001f8a:	f006 fa72 	bl	8008472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001f8e:	2014      	movs	r0, #20
 8001f90:	f006 fa8b 	bl	80084aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	; 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40006400 	.word	0x40006400
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40010000 	.word	0x40010000
 8001fac:	00000000 	.word	0x00000000

08001fb0 <CANTX_BattParameter>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CANTX_BattParameter() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;

	Batt_voltage.m_uint16_t	= VBATT*100;
 8001fb6:	4b84      	ldr	r3, [pc, #528]	; (80021c8 <CANTX_BattParameter+0x218>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4984      	ldr	r1, [pc, #528]	; (80021cc <CANTX_BattParameter+0x21c>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe ff4d 	bl	8000e5c <__aeabi_fmul>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f935 	bl	8001234 <__aeabi_f2uiz>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <CANTX_BattParameter+0x220>)
 8001fd0:	801a      	strh	r2, [r3, #0]
	Batt_current.m_uint16_t	= fabs(IBATT)*10;
 8001fd2:	4b80      	ldr	r3, [pc, #512]	; (80021d4 <CANTX_BattParameter+0x224>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fa90 	bl	8000500 <__aeabi_f2d>
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b7c      	ldr	r3, [pc, #496]	; (80021d8 <CANTX_BattParameter+0x228>)
 8001fe6:	f7fe fae3 	bl	80005b0 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fdb5 	bl	8000b60 <__aeabi_d2uiz>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b78      	ldr	r3, [pc, #480]	; (80021dc <CANTX_BattParameter+0x22c>)
 8001ffc:	801a      	strh	r2, [r3, #0]
	Batt_SOC.m_uint16_t		= (int)Pack_SOC;
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <CANTX_BattParameter+0x230>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f8f0 	bl	80011e8 <__aeabi_f2iz>
 8002008:	4603      	mov	r3, r0
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <CANTX_BattParameter+0x234>)
 800200e:	801a      	strh	r2, [r3, #0]

	Tmax=Suhu_T1;
 8002010:	4b75      	ldr	r3, [pc, #468]	; (80021e8 <CANTX_BattParameter+0x238>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a75      	ldr	r2, [pc, #468]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002016:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8002018:	4b74      	ldr	r3, [pc, #464]	; (80021ec <CANTX_BattParameter+0x23c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a74      	ldr	r2, [pc, #464]	; (80021f0 <CANTX_BattParameter+0x240>)
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f8b8 	bl	8001198 <__aeabi_fcmplt>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <CANTX_BattParameter+0x86>
 800202e:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <CANTX_BattParameter+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6e      	ldr	r2, [pc, #440]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002034:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 8002036:	4b6d      	ldr	r3, [pc, #436]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <CANTX_BattParameter+0x244>)
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff f8a9 	bl	8001198 <__aeabi_fcmplt>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <CANTX_BattParameter+0xa4>
 800204c:	4b69      	ldr	r3, [pc, #420]	; (80021f4 <CANTX_BattParameter+0x244>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a66      	ldr	r2, [pc, #408]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002052:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 8002054:	4b65      	ldr	r3, [pc, #404]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a67      	ldr	r2, [pc, #412]	; (80021f8 <CANTX_BattParameter+0x248>)
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f89a 	bl	8001198 <__aeabi_fcmplt>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <CANTX_BattParameter+0xc2>
 800206a:	4b63      	ldr	r3, [pc, #396]	; (80021f8 <CANTX_BattParameter+0x248>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a5f      	ldr	r2, [pc, #380]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002070:	6013      	str	r3, [r2, #0]

	Batt_temp.m_uint16_t		= Tmax+40;
 8002072:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4961      	ldr	r1, [pc, #388]	; (80021fc <CANTX_BattParameter+0x24c>)
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fde7 	bl	8000c4c <__addsf3>
 800207e:	4603      	mov	r3, r0
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff f8d7 	bl	8001234 <__aeabi_f2uiz>
 8002086:	4603      	mov	r3, r0
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <CANTX_BattParameter+0x250>)
 800208c:	801a      	strh	r2, [r3, #0]
	Batt_capacity.m_uint16_t	= Pack_Cap*10;
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <CANTX_BattParameter+0x254>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	495d      	ldr	r1, [pc, #372]	; (8002208 <CANTX_BattParameter+0x258>)
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fee1 	bl	8000e5c <__aeabi_fmul>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f8c9 	bl	8001234 <__aeabi_f2uiz>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <CANTX_BattParameter+0x25c>)
 80020a8:	801a      	strh	r2, [r3, #0]
	Batt_SOH.m_uint16_t			= SOH_batt;
 80020aa:	4b59      	ldr	r3, [pc, #356]	; (8002210 <CANTX_BattParameter+0x260>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b58      	ldr	r3, [pc, #352]	; (8002214 <CANTX_BattParameter+0x264>)
 80020b2:	801a      	strh	r2, [r3, #0]
	Batt_cycle.m_uint16_t		= cycle;
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <CANTX_BattParameter+0x268>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b58      	ldr	r3, [pc, #352]	; (800221c <CANTX_BattParameter+0x26c>)
 80020bc:	801a      	strh	r2, [r3, #0]
	max_voltage.m_uint16_t 		= 63;
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <CANTX_BattParameter+0x270>)
 80020c0:	223f      	movs	r2, #63	; 0x3f
 80020c2:	801a      	strh	r2, [r3, #0]

	max_chargevoltage.m_uint16_t = VBATT*1.3;
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <CANTX_BattParameter+0x218>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fa19 	bl	8000500 <__aeabi_f2d>
 80020ce:	a33c      	add	r3, pc, #240	; (adr r3, 80021c0 <CANTX_BattParameter+0x210>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fa6c 	bl	80005b0 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fd3e 	bl	8000b60 <__aeabi_d2uiz>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b4e      	ldr	r3, [pc, #312]	; (8002224 <CANTX_BattParameter+0x274>)
 80020ea:	801a      	strh	r2, [r3, #0]
	max_chargecurrent.m_uint16_t = VBATT-20;
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <CANTX_BattParameter+0x218>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	494d      	ldr	r1, [pc, #308]	; (8002228 <CANTX_BattParameter+0x278>)
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fda8 	bl	8000c48 <__aeabi_fsub>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f89a 	bl	8001234 <__aeabi_f2uiz>
 8002100:	4603      	mov	r3, r0
 8002102:	b29a      	uxth	r2, r3
 8002104:	4b49      	ldr	r3, [pc, #292]	; (800222c <CANTX_BattParameter+0x27c>)
 8002106:	801a      	strh	r2, [r3, #0]

	// *********************** GENERAL CAN COMMUNICATION ******************************
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8002108:	4b49      	ldr	r3, [pc, #292]	; (8002230 <CANTX_BattParameter+0x280>)
 800210a:	2204      	movs	r2, #4
 800210c:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);
 800210e:	4b48      	ldr	r3, [pc, #288]	; (8002230 <CANTX_BattParameter+0x280>)
 8002110:	4a48      	ldr	r2, [pc, #288]	; (8002234 <CANTX_BattParameter+0x284>)
 8002112:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = Batt_voltage.m_bytes[0];
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <CANTX_BattParameter+0x220>)
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	4b47      	ldr	r3, [pc, #284]	; (8002238 <CANTX_BattParameter+0x288>)
 800211a:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_voltage.m_bytes[1];
 800211c:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <CANTX_BattParameter+0x220>)
 800211e:	785a      	ldrb	r2, [r3, #1]
 8002120:	4b45      	ldr	r3, [pc, #276]	; (8002238 <CANTX_BattParameter+0x288>)
 8002122:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_current.m_bytes[0];
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <CANTX_BattParameter+0x22c>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	4b43      	ldr	r3, [pc, #268]	; (8002238 <CANTX_BattParameter+0x288>)
 800212a:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_current.m_bytes[1];
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <CANTX_BattParameter+0x22c>)
 800212e:	785a      	ldrb	r2, [r3, #1]
 8002130:	4b41      	ldr	r3, [pc, #260]	; (8002238 <CANTX_BattParameter+0x288>)
 8002132:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_SOC.m_bytes[0];
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <CANTX_BattParameter+0x234>)
 8002136:	781a      	ldrb	r2, [r3, #0]
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <CANTX_BattParameter+0x288>)
 800213a:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_SOC.m_bytes[1];
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <CANTX_BattParameter+0x234>)
 800213e:	785a      	ldrb	r2, [r3, #1]
 8002140:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <CANTX_BattParameter+0x288>)
 8002142:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = Tmax+40;
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <CANTX_BattParameter+0x23c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	492c      	ldr	r1, [pc, #176]	; (80021fc <CANTX_BattParameter+0x24c>)
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe fd7e 	bl	8000c4c <__addsf3>
 8002150:	4603      	mov	r3, r0
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f86e 	bl	8001234 <__aeabi_f2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <CANTX_BattParameter+0x288>)
 800215e:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 1;
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <CANTX_BattParameter+0x288>)
 8002162:	2201      	movs	r2, #1
 8002164:	71da      	strb	r2, [r3, #7]
	//		Tx_data[6] = Batt_temp.m_bytes[1];
	//		Tx_data[7] = Batt_temp.m_bytes[0];

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 8002166:	4b32      	ldr	r3, [pc, #200]	; (8002230 <CANTX_BattParameter+0x280>)
 8002168:	2208      	movs	r2, #8
 800216a:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800216c:	e00f      	b.n	800218e <CANTX_BattParameter+0x1de>
		if(delay_mailboxcheck > 1000){
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002174:	dd08      	ble.n	8002188 <CANTX_BattParameter+0x1d8>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002176:	4b31      	ldr	r3, [pc, #196]	; (800223c <CANTX_BattParameter+0x28c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	4830      	ldr	r0, [pc, #192]	; (8002240 <CANTX_BattParameter+0x290>)
 800217e:	f005 fcd0 	bl	8007b22 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
			break;
 8002186:	e008      	b.n	800219a <CANTX_BattParameter+0x1ea>
		}
		delay_mailboxcheck++;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3301      	adds	r3, #1
 800218c:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800218e:	482c      	ldr	r0, [pc, #176]	; (8002240 <CANTX_BattParameter+0x290>)
 8002190:	f005 fd0b 	bl	8007baa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0e9      	beq.n	800216e <CANTX_BattParameter+0x1be>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 800219a:	4b28      	ldr	r3, [pc, #160]	; (800223c <CANTX_BattParameter+0x28c>)
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <CANTX_BattParameter+0x288>)
 800219e:	4924      	ldr	r1, [pc, #144]	; (8002230 <CANTX_BattParameter+0x280>)
 80021a0:	4827      	ldr	r0, [pc, #156]	; (8002240 <CANTX_BattParameter+0x290>)
 80021a2:	f005 fbe4 	bl	800796e <HAL_CAN_AddTxMessage>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <CANTX_BattParameter+0x20a>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <CANTX_BattParameter+0x28c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4823      	ldr	r0, [pc, #140]	; (8002240 <CANTX_BattParameter+0x290>)
 80021b4:	f005 fcb5 	bl	8007b22 <HAL_CAN_AbortTxRequest>
		return;
 80021b8:	bf00      	nop
//		Error_Handler();
	}

}
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	cccccccd 	.word	0xcccccccd
 80021c4:	3ff4cccc 	.word	0x3ff4cccc
 80021c8:	20000280 	.word	0x20000280
 80021cc:	42c80000 	.word	0x42c80000
 80021d0:	20000900 	.word	0x20000900
 80021d4:	20000284 	.word	0x20000284
 80021d8:	40240000 	.word	0x40240000
 80021dc:	2000085c 	.word	0x2000085c
 80021e0:	20000320 	.word	0x20000320
 80021e4:	20000864 	.word	0x20000864
 80021e8:	200002b0 	.word	0x200002b0
 80021ec:	200008ac 	.word	0x200008ac
 80021f0:	200002b4 	.word	0x200002b4
 80021f4:	200002b8 	.word	0x200002b8
 80021f8:	200002bc 	.word	0x200002bc
 80021fc:	42200000 	.word	0x42200000
 8002200:	200008a8 	.word	0x200008a8
 8002204:	20000044 	.word	0x20000044
 8002208:	41200000 	.word	0x41200000
 800220c:	200008f8 	.word	0x200008f8
 8002210:	20000034 	.word	0x20000034
 8002214:	2000080c 	.word	0x2000080c
 8002218:	2000078c 	.word	0x2000078c
 800221c:	20000854 	.word	0x20000854
 8002220:	200008d4 	.word	0x200008d4
 8002224:	200008f4 	.word	0x200008f4
 8002228:	41a00000 	.word	0x41a00000
 800222c:	20000810 	.word	0x20000810
 8002230:	200008dc 	.word	0x200008dc
 8002234:	0b000a22 	.word	0x0b000a22
 8002238:	20000818 	.word	0x20000818
 800223c:	200008cc 	.word	0x200008cc
 8002240:	20000820 	.word	0x20000820

08002244 <CANTX_BattProtection>:

void CANTX_BattProtection() {
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 800224a:	4b8c      	ldr	r3, [pc, #560]	; (800247c <CANTX_BattProtection+0x238>)
 800224c:	2204      	movs	r2, #4
 800224e:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code);
 8002250:	4b8a      	ldr	r3, [pc, #552]	; (800247c <CANTX_BattProtection+0x238>)
 8002252:	4a8b      	ldr	r2, [pc, #556]	; (8002480 <CANTX_BattProtection+0x23c>)
 8002254:	605a      	str	r2, [r3, #4]
	//CAN Data #2
	Tx_data[0] = Batt_capacity.m_bytes[0];
 8002256:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <CANTX_BattProtection+0x240>)
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	4b8b      	ldr	r3, [pc, #556]	; (8002488 <CANTX_BattProtection+0x244>)
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_capacity.m_bytes[1];
 800225e:	4b89      	ldr	r3, [pc, #548]	; (8002484 <CANTX_BattProtection+0x240>)
 8002260:	785a      	ldrb	r2, [r3, #1]
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <CANTX_BattProtection+0x244>)
 8002264:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_SOH.m_bytes[0];
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <CANTX_BattProtection+0x248>)
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	4b87      	ldr	r3, [pc, #540]	; (8002488 <CANTX_BattProtection+0x244>)
 800226c:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_SOH.m_bytes[1];
 800226e:	4b87      	ldr	r3, [pc, #540]	; (800248c <CANTX_BattProtection+0x248>)
 8002270:	785a      	ldrb	r2, [r3, #1]
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <CANTX_BattProtection+0x244>)
 8002274:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_cycle.m_bytes[0];
 8002276:	4b86      	ldr	r3, [pc, #536]	; (8002490 <CANTX_BattProtection+0x24c>)
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b83      	ldr	r3, [pc, #524]	; (8002488 <CANTX_BattProtection+0x244>)
 800227c:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_cycle.m_bytes[1];
 800227e:	4b84      	ldr	r3, [pc, #528]	; (8002490 <CANTX_BattProtection+0x24c>)
 8002280:	785a      	ldrb	r2, [r3, #1]
 8002282:	4b81      	ldr	r3, [pc, #516]	; (8002488 <CANTX_BattProtection+0x244>)
 8002284:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = flag_trip_overcurrentdischarge&0x01;
 8002286:	4b83      	ldr	r3, [pc, #524]	; (8002494 <CANTX_BattProtection+0x250>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b7d      	ldr	r3, [pc, #500]	; (8002488 <CANTX_BattProtection+0x244>)
 8002292:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<1;
 8002294:	4b7c      	ldr	r3, [pc, #496]	; (8002488 <CANTX_BattProtection+0x244>)
 8002296:	799b      	ldrb	r3, [r3, #6]
 8002298:	b25a      	sxtb	r2, r3
 800229a:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <CANTX_BattProtection+0x254>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	b25b      	sxtb	r3, r3
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <CANTX_BattProtection+0x244>)
 80022b0:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_shortcircuit&0x01)<<2;
 80022b2:	4b75      	ldr	r3, [pc, #468]	; (8002488 <CANTX_BattProtection+0x244>)
 80022b4:	799b      	ldrb	r3, [r3, #6]
 80022b6:	b25a      	sxtb	r2, r3
 80022b8:	4b78      	ldr	r3, [pc, #480]	; (800249c <CANTX_BattProtection+0x258>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b6e      	ldr	r3, [pc, #440]	; (8002488 <CANTX_BattProtection+0x244>)
 80022ce:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 80022d0:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <CANTX_BattProtection+0x244>)
 80022d2:	799b      	ldrb	r3, [r3, #6]
 80022d4:	b25a      	sxtb	r2, r3
 80022d6:	4b72      	ldr	r3, [pc, #456]	; (80024a0 <CANTX_BattProtection+0x25c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	4313      	orrs	r3, r2
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <CANTX_BattProtection+0x244>)
 80022ec:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 80022ee:	4b66      	ldr	r3, [pc, #408]	; (8002488 <CANTX_BattProtection+0x244>)
 80022f0:	799b      	ldrb	r3, [r3, #6]
 80022f2:	b25a      	sxtb	r2, r3
 80022f4:	4b6b      	ldr	r3, [pc, #428]	; (80024a4 <CANTX_BattProtection+0x260>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	b25b      	sxtb	r3, r3
 8002302:	4313      	orrs	r3, r2
 8002304:	b25b      	sxtb	r3, r3
 8002306:	b2da      	uxtb	r2, r3
 8002308:	4b5f      	ldr	r3, [pc, #380]	; (8002488 <CANTX_BattProtection+0x244>)
 800230a:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 800230c:	4b5e      	ldr	r3, [pc, #376]	; (8002488 <CANTX_BattProtection+0x244>)
 800230e:	799b      	ldrb	r3, [r3, #6]
 8002310:	b25a      	sxtb	r2, r3
 8002312:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <CANTX_BattProtection+0x25c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	015b      	lsls	r3, r3, #5
 8002318:	b25b      	sxtb	r3, r3
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	b25b      	sxtb	r3, r3
 8002320:	4313      	orrs	r3, r2
 8002322:	b25b      	sxtb	r3, r3
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b58      	ldr	r3, [pc, #352]	; (8002488 <CANTX_BattProtection+0x244>)
 8002328:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 800232a:	4b57      	ldr	r3, [pc, #348]	; (8002488 <CANTX_BattProtection+0x244>)
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	b25a      	sxtb	r2, r3
 8002330:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <CANTX_BattProtection+0x260>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	b25b      	sxtb	r3, r3
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	b25b      	sxtb	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	b25b      	sxtb	r3, r3
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <CANTX_BattProtection+0x244>)
 8002346:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |=  (flag_trip_undervoltage&0x01)<<7;
 8002348:	4b4f      	ldr	r3, [pc, #316]	; (8002488 <CANTX_BattProtection+0x244>)
 800234a:	799b      	ldrb	r3, [r3, #6]
 800234c:	b25a      	sxtb	r2, r3
 800234e:	4b56      	ldr	r3, [pc, #344]	; (80024a8 <CANTX_BattProtection+0x264>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	b25b      	sxtb	r3, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	b25b      	sxtb	r3, r3
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <CANTX_BattProtection+0x244>)
 800235e:	719a      	strb	r2, [r3, #6]

	Tx_data[7] = (flag_trip_overvoltage&0x01);
 8002360:	4b52      	ldr	r3, [pc, #328]	; (80024ac <CANTX_BattProtection+0x268>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <CANTX_BattProtection+0x244>)
 800236c:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<1;
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <CANTX_BattProtection+0x244>)
 8002370:	79db      	ldrb	r3, [r3, #7]
 8002372:	b25a      	sxtb	r2, r3
 8002374:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <CANTX_BattProtection+0x26c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	b25b      	sxtb	r3, r3
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	b25b      	sxtb	r3, r3
 8002382:	4313      	orrs	r3, r2
 8002384:	b25b      	sxtb	r3, r3
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <CANTX_BattProtection+0x244>)
 800238a:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_unbalance&0x01)<<2;
 800238c:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <CANTX_BattProtection+0x244>)
 800238e:	79db      	ldrb	r3, [r3, #7]
 8002390:	b25a      	sxtb	r2, r3
 8002392:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <CANTX_BattProtection+0x270>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	b25b      	sxtb	r3, r3
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	4313      	orrs	r3, r2
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <CANTX_BattProtection+0x244>)
 80023a8:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <CANTX_BattProtection+0x244>)
 80023ac:	79db      	ldrb	r3, [r3, #7]
 80023ae:	b25a      	sxtb	r2, r3
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <CANTX_BattProtection+0x274>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b25b      	sxtb	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	4b30      	ldr	r3, [pc, #192]	; (8002488 <CANTX_BattProtection+0x244>)
 80023c6:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (charge_state&0x01)<<4;
 80023c8:	4b2f      	ldr	r3, [pc, #188]	; (8002488 <CANTX_BattProtection+0x244>)
 80023ca:	79db      	ldrb	r3, [r3, #7]
 80023cc:	b25a      	sxtb	r2, r3
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <CANTX_BattProtection+0x278>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	b25b      	sxtb	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <CANTX_BattProtection+0x244>)
 80023e4:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (discharge_state&0x01)<<5;
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <CANTX_BattProtection+0x244>)
 80023e8:	79db      	ldrb	r3, [r3, #7]
 80023ea:	b25a      	sxtb	r2, r3
 80023ec:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <CANTX_BattProtection+0x27c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	015b      	lsls	r3, r3, #5
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <CANTX_BattProtection+0x244>)
 8002402:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (sleep_state&0x01)<<6;
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <CANTX_BattProtection+0x244>)
 8002406:	79db      	ldrb	r3, [r3, #7]
 8002408:	b25a      	sxtb	r2, r3
 800240a:	4b2e      	ldr	r3, [pc, #184]	; (80024c4 <CANTX_BattProtection+0x280>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	019b      	lsls	r3, r3, #6
 8002410:	b25b      	sxtb	r3, r3
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	b25b      	sxtb	r3, r3
 8002418:	4313      	orrs	r3, r2
 800241a:	b25b      	sxtb	r3, r3
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <CANTX_BattProtection+0x244>)
 8002420:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <CANTX_BattProtection+0x238>)
 8002424:	2208      	movs	r2, #8
 8002426:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002428:	e00f      	b.n	800244a <CANTX_BattProtection+0x206>
		if(delay_mailboxcheck > 1000){
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002430:	dd08      	ble.n	8002444 <CANTX_BattProtection+0x200>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <CANTX_BattProtection+0x284>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	4824      	ldr	r0, [pc, #144]	; (80024cc <CANTX_BattProtection+0x288>)
 800243a:	f005 fb72 	bl	8007b22 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
			break;
 8002442:	e008      	b.n	8002456 <CANTX_BattProtection+0x212>
		}
		delay_mailboxcheck++;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3301      	adds	r3, #1
 8002448:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800244a:	4820      	ldr	r0, [pc, #128]	; (80024cc <CANTX_BattProtection+0x288>)
 800244c:	f005 fbad 	bl	8007baa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0e9      	beq.n	800242a <CANTX_BattProtection+0x1e6>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <CANTX_BattProtection+0x284>)
 8002458:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <CANTX_BattProtection+0x244>)
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <CANTX_BattProtection+0x238>)
 800245c:	481b      	ldr	r0, [pc, #108]	; (80024cc <CANTX_BattProtection+0x288>)
 800245e:	f005 fa86 	bl	800796e <HAL_CAN_AddTxMessage>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <CANTX_BattProtection+0x232>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <CANTX_BattProtection+0x284>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <CANTX_BattProtection+0x288>)
 8002470:	f005 fb57 	bl	8007b22 <HAL_CAN_AbortTxRequest>
		return;
 8002474:	bf00      	nop
//		Error_Handler();
	}
}
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200008dc 	.word	0x200008dc
 8002480:	0b100a22 	.word	0x0b100a22
 8002484:	200008f8 	.word	0x200008f8
 8002488:	20000818 	.word	0x20000818
 800248c:	2000080c 	.word	0x2000080c
 8002490:	20000854 	.word	0x20000854
 8002494:	20000316 	.word	0x20000316
 8002498:	20000317 	.word	0x20000317
 800249c:	20000318 	.word	0x20000318
 80024a0:	20000310 	.word	0x20000310
 80024a4:	20000311 	.word	0x20000311
 80024a8:	20000314 	.word	0x20000314
 80024ac:	20000315 	.word	0x20000315
 80024b0:	20000312 	.word	0x20000312
 80024b4:	2000031a 	.word	0x2000031a
 80024b8:	20000319 	.word	0x20000319
 80024bc:	200002cb 	.word	0x200002cb
 80024c0:	200002cc 	.word	0x200002cc
 80024c4:	200002cd 	.word	0x200002cd
 80024c8:	200008cc 	.word	0x200008cc
 80024cc:	20000820 	.word	0x20000820

080024d0 <CANTX_ReportToCharger>:

void CANTX_ReportToCharger() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
	// *********************** CHARGING CAN COMMUNICATION ******************************
	int delay_mailboxcheck;
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <CANTX_ReportToCharger+0xc8>)
 80024d8:	2204      	movs	r2, #4
 80024da:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code);
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <CANTX_ReportToCharger+0xc8>)
 80024de:	4a2f      	ldr	r2, [pc, #188]	; (800259c <CANTX_ReportToCharger+0xcc>)
 80024e0:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = max_chargevoltage.m_bytes[0];
 80024e2:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <CANTX_ReportToCharger+0xd0>)
 80024e4:	781a      	ldrb	r2, [r3, #0]
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 80024e8:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = max_chargevoltage.m_bytes[1];
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <CANTX_ReportToCharger+0xd0>)
 80024ec:	785a      	ldrb	r2, [r3, #1]
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 80024f0:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = max_chargecurrent.m_bytes[0];
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <CANTX_ReportToCharger+0xd8>)
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 80024f8:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = max_chargecurrent.m_bytes[1];
 80024fa:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <CANTX_ReportToCharger+0xd8>)
 80024fc:	785a      	ldrb	r2, [r3, #1]
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 8002500:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = charge_state;
 8002502:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <CANTX_ReportToCharger+0xdc>)
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 8002508:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = 0;
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 800250c:	2200      	movs	r2, #0
 800250e:	715a      	strb	r2, [r3, #5]

	if(BMS_mode == 0) handshake_recognition = 0x55;
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <CANTX_ReportToCharger+0xe0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d103      	bne.n	8002520 <CANTX_ReportToCharger+0x50>
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <CANTX_ReportToCharger+0xe4>)
 800251a:	2255      	movs	r2, #85	; 0x55
 800251c:	801a      	strh	r2, [r3, #0]
 800251e:	e006      	b.n	800252e <CANTX_ReportToCharger+0x5e>
	else if(BMS_mode == 2) handshake_recognition = 0xAA;
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <CANTX_ReportToCharger+0xe0>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d102      	bne.n	800252e <CANTX_ReportToCharger+0x5e>
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <CANTX_ReportToCharger+0xe4>)
 800252a:	22aa      	movs	r2, #170	; 0xaa
 800252c:	801a      	strh	r2, [r3, #0]

	Tx_data[6] = handshake_recognition;
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <CANTX_ReportToCharger+0xe4>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 8002536:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 800253a:	2200      	movs	r2, #0
 800253c:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <CANTX_ReportToCharger+0xc8>)
 8002540:	2208      	movs	r2, #8
 8002542:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002544:	e00f      	b.n	8002566 <CANTX_ReportToCharger+0x96>
		if(delay_mailboxcheck > 1000){
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800254c:	dd08      	ble.n	8002560 <CANTX_ReportToCharger+0x90>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <CANTX_ReportToCharger+0xe8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4619      	mov	r1, r3
 8002554:	4819      	ldr	r0, [pc, #100]	; (80025bc <CANTX_ReportToCharger+0xec>)
 8002556:	f005 fae4 	bl	8007b22 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
			break;
 800255e:	e008      	b.n	8002572 <CANTX_ReportToCharger+0xa2>
		}
		delay_mailboxcheck++;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3301      	adds	r3, #1
 8002564:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002566:	4815      	ldr	r0, [pc, #84]	; (80025bc <CANTX_ReportToCharger+0xec>)
 8002568:	f005 fb1f 	bl	8007baa <HAL_CAN_GetTxMailboxesFreeLevel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0e9      	beq.n	8002546 <CANTX_ReportToCharger+0x76>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <CANTX_ReportToCharger+0xe8>)
 8002574:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <CANTX_ReportToCharger+0xd4>)
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <CANTX_ReportToCharger+0xc8>)
 8002578:	4810      	ldr	r0, [pc, #64]	; (80025bc <CANTX_ReportToCharger+0xec>)
 800257a:	f005 f9f8 	bl	800796e <HAL_CAN_AddTxMessage>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <CANTX_ReportToCharger+0xc2>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <CANTX_ReportToCharger+0xe8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	480c      	ldr	r0, [pc, #48]	; (80025bc <CANTX_ReportToCharger+0xec>)
 800258c:	f005 fac9 	bl	8007b22 <HAL_CAN_AbortTxRequest>
		return;
 8002590:	bf00      	nop
//		Error_Handler();
	}
}
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200008dc 	.word	0x200008dc
 800259c:	0e000a22 	.word	0x0e000a22
 80025a0:	200008f4 	.word	0x200008f4
 80025a4:	20000818 	.word	0x20000818
 80025a8:	20000810 	.word	0x20000810
 80025ac:	200002cb 	.word	0x200002cb
 80025b0:	200002ca 	.word	0x200002ca
 80025b4:	20000804 	.word	0x20000804
 80025b8:	200008cc 	.word	0x200008cc
 80025bc:	20000820 	.word	0x20000820

080025c0 <CANTX_BattId>:

void CANTX_BattId() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <CANTX_BattId+0x9c>)
 80025c8:	2204      	movs	r2, #4
 80025ca:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E1<<20|UNIQUE_Code);
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <CANTX_BattId+0x9c>)
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <CANTX_BattId+0xa0>)
 80025d0:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = 0;
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <CANTX_BattId+0xa4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = 0;
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <CANTX_BattId+0xa4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = 0x21;
 80025de:	4b21      	ldr	r3, [pc, #132]	; (8002664 <CANTX_BattId+0xa4>)
 80025e0:	2221      	movs	r2, #33	; 0x21
 80025e2:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = 0x04;
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <CANTX_BattId+0xa4>)
 80025e6:	2204      	movs	r2, #4
 80025e8:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = UNIQUE_Code >> 16;
 80025ea:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <CANTX_BattId+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = UNIQUE_Code >> 8;
 80025f0:	4b1c      	ldr	r3, [pc, #112]	; (8002664 <CANTX_BattId+0xa4>)
 80025f2:	220a      	movs	r2, #10
 80025f4:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = UNIQUE_Code;
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <CANTX_BattId+0xa4>)
 80025f8:	2222      	movs	r2, #34	; 0x22
 80025fa:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <CANTX_BattId+0xa4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <CANTX_BattId+0x9c>)
 8002604:	2208      	movs	r2, #8
 8002606:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002608:	e00f      	b.n	800262a <CANTX_BattId+0x6a>
		if(delay_mailboxcheck > 1000){
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002610:	dd08      	ble.n	8002624 <CANTX_BattId+0x64>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <CANTX_BattId+0xa8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	4814      	ldr	r0, [pc, #80]	; (800266c <CANTX_BattId+0xac>)
 800261a:	f005 fa82 	bl	8007b22 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
			break;
 8002622:	e008      	b.n	8002636 <CANTX_BattId+0x76>
		}
		delay_mailboxcheck++;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3301      	adds	r3, #1
 8002628:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800262a:	4810      	ldr	r0, [pc, #64]	; (800266c <CANTX_BattId+0xac>)
 800262c:	f005 fabd 	bl	8007baa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0e9      	beq.n	800260a <CANTX_BattId+0x4a>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <CANTX_BattId+0xa8>)
 8002638:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <CANTX_BattId+0xa4>)
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <CANTX_BattId+0x9c>)
 800263c:	480b      	ldr	r0, [pc, #44]	; (800266c <CANTX_BattId+0xac>)
 800263e:	f005 f996 	bl	800796e <HAL_CAN_AddTxMessage>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <CANTX_BattId+0x96>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <CANTX_BattId+0xa8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4619      	mov	r1, r3
 800264e:	4807      	ldr	r0, [pc, #28]	; (800266c <CANTX_BattId+0xac>)
 8002650:	f005 fa67 	bl	8007b22 <HAL_CAN_AbortTxRequest>
		return;
 8002654:	bf00      	nop
//		Error_Handler();
	}
}
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200008dc 	.word	0x200008dc
 8002660:	0e100a22 	.word	0x0e100a22
 8002664:	20000818 	.word	0x20000818
 8002668:	200008cc 	.word	0x200008cc
 800266c:	20000820 	.word	0x20000820

08002670 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data) == HAL_OK) {
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800267a:	4a61      	ldr	r2, [pc, #388]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800267c:	2100      	movs	r1, #0
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f005 fac7 	bl	8007c12 <HAL_CAN_GetRxMessage>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80b3 	bne.w	80027f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		if(Rx_Header.ExtId == 0x1B2){
 800268c:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 8002694:	d134      	bne.n	8002700 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			flag_start_shutdown=Rx_data[0]&0x01;
 8002696:	4b59      	ldr	r3, [pc, #356]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b58      	ldr	r3, [pc, #352]	; (8002804 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80026a2:	701a      	strb	r2, [r3, #0]
			BMS_mode=(Rx_data[0]>>1)&0x03;
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	085b      	lsrs	r3, r3, #1
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b55      	ldr	r3, [pc, #340]	; (8002808 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80026b4:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 80026b6:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	08db      	lsrs	r3, r3, #3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	bf14      	ite	ne
 80026c2:	2301      	movne	r3, #1
 80026c4:	2300      	moveq	r3, #0
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80026cc:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80026e4:	701a      	strb	r2, [r3, #0]

			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 80026e6:	f004 fb2f 	bl	8006d48 <HAL_GetTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80026f0:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 80026f2:	f004 fb29 	bl	8006d48 <HAL_GetTick>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e06d      	b.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(((Rx_Header.ExtId & 0xFFF00000) == 0x0E300000) && (flag_get_UNIQUECODE < 3) ) {
 8002700:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0d1b      	lsrs	r3, r3, #20
 8002706:	051b      	lsls	r3, r3, #20
 8002708:	f1b3 6f63 	cmp.w	r3, #238026752	; 0xe300000
 800270c:	d11c      	bne.n	8002748 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 800270e:	4b43      	ldr	r3, [pc, #268]	; (800281c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d818      	bhi.n	8002748 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
			flag_start_shutdown = 1;
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
			BMS_mode = 0;
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
			flag_get_UNIQUECODE++;
 8002722:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b3c      	ldr	r3, [pc, #240]	; (800281c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800272c:	701a      	strb	r2, [r3, #0]
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 800272e:	f004 fb0b 	bl	8006d48 <HAL_GetTick>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8002738:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 800273a:	f004 fb05 	bl	8006d48 <HAL_GetTick>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e049      	b.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.ExtId == (0x0E3<<20|UNIQUE_Code)){
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4a34      	ldr	r2, [pc, #208]	; (8002820 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d121      	bne.n	8002796 <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
			if(Rx_data[5] == 0x55){
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8002754:	795b      	ldrb	r3, [r3, #5]
 8002756:	2b55      	cmp	r3, #85	; 0x55
 8002758:	d106      	bne.n	8002768 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				BMS_mode = 0;
 800275a:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
				charge_state = 0;
 8002760:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e009      	b.n	800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			}
			else if(Rx_data[5] == 0xAA){
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800276a:	795b      	ldrb	r3, [r3, #5]
 800276c:	2baa      	cmp	r3, #170	; 0xaa
 800276e:	d105      	bne.n	800277c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
				BMS_mode = 2;
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8002772:	2202      	movs	r2, #2
 8002774:	701a      	strb	r2, [r3, #0]
				charge_state = 1;
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
			}
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 800277c:	f004 fae4 	bl	8006d48 <HAL_GetTick>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8002786:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8002788:	f004 fade 	bl	8006d48 <HAL_GetTick>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e022      	b.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.RTR == 2){
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d11e      	bne.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			if(Rx_Header.StdId == 0x0B4) dataRTR = 4;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2bb4      	cmp	r3, #180	; 0xb4
 80027a4:	d103      	bne.n	80027ae <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
 80027a6:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027a8:	2204      	movs	r2, #4
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e016      	b.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B5) dataRTR = 5;
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2bb5      	cmp	r3, #181	; 0xb5
 80027b4:	d103      	bne.n	80027be <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027b8:	2205      	movs	r2, #5
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e00e      	b.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B6) dataRTR = 6;
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2bb6      	cmp	r3, #182	; 0xb6
 80027c4:	d103      	bne.n	80027ce <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027c8:	2206      	movs	r2, #6
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e006      	b.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B7) dataRTR = 7;
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2bb7      	cmp	r3, #183	; 0xb7
 80027d4:	d102      	bne.n	80027dc <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027d8:	2207      	movs	r2, #7
 80027da:	701a      	strb	r2, [r3, #0]
		}

		Rx_Header.ExtId = 0;
 80027dc:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027de:	2200      	movs	r2, #0
 80027e0:	605a      	str	r2, [r3, #4]
		Rx_Header.StdId = 0;
 80027e2:	4b07      	ldr	r3, [pc, #28]	; (8002800 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 80027e8:	2208      	movs	r2, #8
 80027ea:	2100      	movs	r1, #0
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80027ee:	f00b ff71 	bl	800e6d4 <memset>
	}
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000848 	.word	0x20000848
 8002800:	200008b0 	.word	0x200008b0
 8002804:	200002c8 	.word	0x200002c8
 8002808:	200002ca 	.word	0x200002ca
 800280c:	2000031c 	.word	0x2000031c
 8002810:	2000031b 	.word	0x2000031b
 8002814:	200002dc 	.word	0x200002dc
 8002818:	200002e4 	.word	0x200002e4
 800281c:	200002e8 	.word	0x200002e8
 8002820:	0e300a22 	.word	0x0e300a22
 8002824:	200002cb 	.word	0x200002cb
 8002828:	20000348 	.word	0x20000348

0800282c <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800283a:	2301      	movs	r3, #1
 800283c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 800283e:	2300      	movs	r3, #0
 8002840:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8002852:	2301      	movs	r3, #1
 8002854:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002856:	230e      	movs	r3, #14
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 800285a:	463b      	mov	r3, r7
 800285c:	4619      	mov	r1, r3
 800285e:	4810      	ldr	r0, [pc, #64]	; (80028a0 <BMS_CAN_Config+0x74>)
 8002860:	f004 ff78 	bl	8007754 <HAL_CAN_ConfigFilter>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <BMS_CAN_Config+0x42>
 800286a:	f000 fe3f 	bl	80034ec <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 800286e:	480c      	ldr	r0, [pc, #48]	; (80028a0 <BMS_CAN_Config+0x74>)
 8002870:	f005 f839 	bl	80078e6 <HAL_CAN_Start>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <BMS_CAN_Config+0x52>
 800287a:	f000 fe37 	bl	80034ec <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800287e:	2102      	movs	r1, #2
 8002880:	4807      	ldr	r0, [pc, #28]	; (80028a0 <BMS_CAN_Config+0x74>)
 8002882:	f005 fad7 	bl	8007e34 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <BMS_CAN_Config+0x78>)
 8002888:	2200      	movs	r2, #0
 800288a:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <BMS_CAN_Config+0x78>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <BMS_CAN_Config+0x78>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	bf00      	nop
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000820 	.word	0x20000820
 80028a4:	200008dc 	.word	0x200008dc

080028a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <MX_DMA_Init+0x38>)
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <MX_DMA_Init+0x38>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6153      	str	r3, [r2, #20]
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <MX_DMA_Init+0x38>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	200b      	movs	r0, #11
 80028cc:	f005 fdd1 	bl	8008472 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028d0:	200b      	movs	r0, #11
 80028d2:	f005 fdea 	bl	80084aa <HAL_NVIC_EnableIRQ>

}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <MX_GPIO_Init+0xf0>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a35      	ldr	r2, [pc, #212]	; (80029d4 <MX_GPIO_Init+0xf0>)
 80028fe:	f043 0310 	orr.w	r3, r3, #16
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <MX_GPIO_Init+0xf0>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <MX_GPIO_Init+0xf0>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <MX_GPIO_Init+0xf0>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <MX_GPIO_Init+0xf0>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <MX_GPIO_Init+0xf0>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <MX_GPIO_Init+0xf0>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <MX_GPIO_Init+0xf0>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|BMS_SHUTDOWN_Pin|EEPROM_WP_Pin|LED_Pin
 8002940:	2200      	movs	r2, #0
 8002942:	f243 0162 	movw	r1, #12386	; 0x3062
 8002946:	4824      	ldr	r0, [pc, #144]	; (80029d8 <MX_GPIO_Init+0xf4>)
 8002948:	f006 fba6 	bl	8009098 <HAL_GPIO_WritePin>
                          |SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 800294c:	2200      	movs	r2, #0
 800294e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002952:	4822      	ldr	r0, [pc, #136]	; (80029dc <MX_GPIO_Init+0xf8>)
 8002954:	f006 fba0 	bl	8009098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BMS_SHUTDOWN_Pin;
 8002958:	f242 0302 	movw	r3, #8194	; 0x2002
 800295c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295e:	2301      	movs	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002962:	2302      	movs	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2302      	movs	r3, #2
 8002968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296a:	f107 0310 	add.w	r3, r7, #16
 800296e:	4619      	mov	r1, r3
 8002970:	4819      	ldr	r0, [pc, #100]	; (80029d8 <MX_GPIO_Init+0xf4>)
 8002972:	f006 f9fd 	bl	8008d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EEPROM_WP_Pin|LED_Pin|SPI1_CS_Pin;
 8002976:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 800297a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297c:	2301      	movs	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2302      	movs	r3, #2
 8002986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	4619      	mov	r1, r3
 800298e:	4812      	ldr	r0, [pc, #72]	; (80029d8 <MX_GPIO_Init+0xf4>)
 8002990:	f006 f9ee 	bl	8008d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GATE_MOS_Pin;
 8002994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299a:	2301      	movs	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GATE_MOS_GPIO_Port, &GPIO_InitStruct);
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4619      	mov	r1, r3
 80029ac:	480b      	ldr	r0, [pc, #44]	; (80029dc <MX_GPIO_Init+0xf8>)
 80029ae:	f006 f9df 	bl	8008d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4619      	mov	r1, r3
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_GPIO_Init+0xf8>)
 80029c8:	f006 f9d2 	bl	8008d70 <HAL_GPIO_Init>

}
 80029cc:	bf00      	nop
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40011000 	.word	0x40011000
 80029dc:	40010800 	.word	0x40010800

080029e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029e6:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <MX_I2C1_Init+0x54>)
 80029e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029ec:	4a12      	ldr	r2, [pc, #72]	; (8002a38 <MX_I2C1_Init+0x58>)
 80029ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <MX_I2C1_Init+0x50>)
 80029fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a16:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a1c:	4804      	ldr	r0, [pc, #16]	; (8002a30 <MX_I2C1_Init+0x50>)
 8002a1e:	f006 fb6d 	bl	80090fc <HAL_I2C_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a28:	f000 fd60 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000904 	.word	0x20000904
 8002a34:	40005400 	.word	0x40005400
 8002a38:	00061a80 	.word	0x00061a80

08002a3c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <MX_I2C2_Init+0x54>)
 8002a44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a48:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <MX_I2C2_Init+0x58>)
 8002a4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a5e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a78:	4804      	ldr	r0, [pc, #16]	; (8002a8c <MX_I2C2_Init+0x50>)
 8002a7a:	f006 fb3f 	bl	80090fc <HAL_I2C_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a84:	f000 fd32 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	20000958 	.word	0x20000958
 8002a90:	40005800 	.word	0x40005800
 8002a94:	000186a0 	.word	0x000186a0

08002a98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0318 	add.w	r3, r7, #24
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <HAL_I2C_MspInit+0xc8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d124      	bne.n	8002b02 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002ad0:	23c0      	movs	r3, #192	; 0xc0
 8002ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad4:	2312      	movs	r3, #18
 8002ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002adc:	f107 0318 	add.w	r3, r7, #24
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4821      	ldr	r0, [pc, #132]	; (8002b68 <HAL_I2C_MspInit+0xd0>)
 8002ae4:	f006 f944 	bl	8008d70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002aee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002af2:	61d3      	str	r3, [r2, #28]
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002b00:	e029      	b.n	8002b56 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_I2C_MspInit+0xd4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d124      	bne.n	8002b56 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002b12:	f043 0308 	orr.w	r3, r3, #8
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8002b24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2a:	2312      	movs	r3, #18
 8002b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	f107 0318 	add.w	r3, r7, #24
 8002b36:	4619      	mov	r1, r3
 8002b38:	480b      	ldr	r0, [pc, #44]	; (8002b68 <HAL_I2C_MspInit+0xd0>)
 8002b3a:	f006 f919 	bl	8008d70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b48:	61d3      	str	r3, [r2, #28]
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_I2C_MspInit+0xcc>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]
}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40005400 	.word	0x40005400
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40010c00 	.word	0x40010c00
 8002b6c:	40005800 	.word	0x40005800

08002b70 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <MX_IWDG_Init+0x2c>)
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <MX_IWDG_Init+0x30>)
 8002b78:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <MX_IWDG_Init+0x2c>)
 8002b7c:	2206      	movs	r2, #6
 8002b7e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <MX_IWDG_Init+0x2c>)
 8002b82:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002b86:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002b88:	4804      	ldr	r0, [pc, #16]	; (8002b9c <MX_IWDG_Init+0x2c>)
 8002b8a:	f007 fd65 	bl	800a658 <HAL_IWDG_Init>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002b94:	f000 fcaa 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200009ac 	.word	0x200009ac
 8002ba0:	40003000 	.word	0x40003000
 8002ba4:	00000000 	.word	0x00000000

08002ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bae:	f004 f873 	bl	8006c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bb2:	f000 f8a3 	bl	8002cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bb6:	f7ff fe95 	bl	80028e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bba:	f7ff fe75 	bl	80028a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002bbe:	f7ff f843 	bl	8001c48 <MX_ADC1_Init>
  MX_CAN_Init();
 8002bc2:	f7ff f955 	bl	8001e70 <MX_CAN_Init>
  MX_I2C1_Init();
 8002bc6:	f7ff ff0b 	bl	80029e0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002bca:	f003 ff63 	bl	8006a94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002bce:	f003 ffaf 	bl	8006b30 <MX_TIM3_Init>
  MX_I2C2_Init();
 8002bd2:	f7ff ff33 	bl	8002a3c <MX_I2C2_Init>
  MX_IWDG_Init();
 8002bd6:	f7ff ffcb 	bl	8002b70 <MX_IWDG_Init>
  MX_SPI1_Init();
 8002bda:	f000 fc8d 	bl	80034f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BMS_Init();
 8002bde:	f000 f8e9 	bl	8002db4 <BMS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read voltage per-cell and total voltage
	  Adbms6948_measure_cells(knChainId, nRet);
 8002be2:	2200      	movs	r2, #0
 8002be4:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <main+0x120>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f7fe fbdc 	bl	80013a8 <Adbms6948_measure_cells>
	  HAL_Delay(1);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f004 f8b3 	bl	8006d5c <HAL_Delay>
	  for(uint8_t ij=0; ij<10; ij++){
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	e010      	b.n	8002c1e <main+0x76>
		  pack_voltage += CellVoltage[ij];
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	4a33      	ldr	r2, [pc, #204]	; (8002ccc <main+0x124>)
 8002c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c04:	4a32      	ldr	r2, [pc, #200]	; (8002cd0 <main+0x128>)
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f81e 	bl	8000c4c <__addsf3>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b2e      	ldr	r3, [pc, #184]	; (8002cd0 <main+0x128>)
 8002c16:	601a      	str	r2, [r3, #0]
	  for(uint8_t ij=0; ij<10; ij++){
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	71fb      	strb	r3, [r7, #7]
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	d9eb      	bls.n	8002bfc <main+0x54>
	  }
	  sum_voltage = pack_voltage;
 8002c24:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <main+0x128>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <main+0x12c>)
 8002c2a:	6013      	str	r3, [r2, #0]
	  pack_voltage = 0;
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <main+0x128>)
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

	  //Read Current
	  Adbms6948_measure_current(knChainId, nRet);
 8002c34:	2200      	movs	r2, #0
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <main+0x120>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fe fc1b 	bl	8001478 <Adbms6948_measure_current>
	  HAL_Delay(1);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f004 f88a 	bl	8006d5c <HAL_Delay>

	  //comparing cell voltage to get
	  unbalance_cell = get_balance_status(CellVoltage);
 8002c48:	4820      	ldr	r0, [pc, #128]	; (8002ccc <main+0x124>)
 8002c4a:	f000 fb9d 	bl	8003388 <get_balance_status>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <main+0x130>)
 8002c54:	801a      	strh	r2, [r3, #0]

	  // Balancing Process
	  if(BMS_mode == 2 && IBATT < -0.1 && (VBATT > VBATT_BALANCE_START))     //arus charging 0.1 tidak perlu di balancing
 8002c56:	4b21      	ldr	r3, [pc, #132]	; (8002cdc <main+0x134>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d115      	bne.n	8002c8a <main+0xe2>
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <main+0x138>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc4c 	bl	8000500 <__aeabi_f2d>
 8002c68:	a315      	add	r3, pc, #84	; (adr r3, 8002cc0 <main+0x118>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f7fd ff11 	bl	8000a94 <__aeabi_dcmplt>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <main+0xe2>
 8002c78:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <main+0x13c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	491a      	ldr	r1, [pc, #104]	; (8002ce8 <main+0x140>)
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe faa8 	bl	80011d4 <__aeabi_fcmpgt>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <main+0xe8>
	  {
//		  Adbms6948_discharge_cell(balance_status);
	  }
	  else
	  {
		  balance_status = 0;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <main+0x144>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
//		  Adbms6948_Discharge_Cell(0);
	  }

	  Adbms6948_Discharge_Cell(8);
 8002c90:	2008      	movs	r0, #8
 8002c92:	f7fe fc47 	bl	8001524 <Adbms6948_Discharge_Cell>

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <main+0x148>)
 8002c9a:	f006 fa15 	bl	80090c8 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8002c9e:	2032      	movs	r0, #50	; 0x32
 8002ca0:	f004 f85c 	bl	8006d5c <HAL_Delay>

	  BMS_ScreenMode_RUN();
 8002ca4:	f000 f94e 	bl	8002f44 <BMS_ScreenMode_RUN>
	  HAL_IWDG_Refresh(&hiwdg);
 8002ca8:	4812      	ldr	r0, [pc, #72]	; (8002cf4 <main+0x14c>)
 8002caa:	f007 fd17 	bl	800a6dc <HAL_IWDG_Refresh>
	  test++;
 8002cae:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <main+0x150>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	4a10      	ldr	r2, [pc, #64]	; (8002cf8 <main+0x150>)
 8002cb6:	6013      	str	r3, [r2, #0]
	  Adbms6948_measure_cells(knChainId, nRet);
 8002cb8:	e793      	b.n	8002be2 <main+0x3a>
 8002cba:	bf00      	nop
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	9999999a 	.word	0x9999999a
 8002cc4:	bfb99999 	.word	0xbfb99999
 8002cc8:	2000034c 	.word	0x2000034c
 8002ccc:	20000a04 	.word	0x20000a04
 8002cd0:	200009ec 	.word	0x200009ec
 8002cd4:	200009e8 	.word	0x200009e8
 8002cd8:	200002d0 	.word	0x200002d0
 8002cdc:	200002ca 	.word	0x200002ca
 8002ce0:	20000284 	.word	0x20000284
 8002ce4:	20000280 	.word	0x20000280
 8002ce8:	42040000 	.word	0x42040000
 8002cec:	200002ce 	.word	0x200002ce
 8002cf0:	40011000 	.word	0x40011000
 8002cf4:	200009ac 	.word	0x200009ac
 8002cf8:	200009e0 	.word	0x200009e0

08002cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b096      	sub	sp, #88	; 0x58
 8002d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d06:	2228      	movs	r2, #40	; 0x28
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f00b fce2 	bl	800e6d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d20:	1d3b      	adds	r3, r7, #4
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d30:	230a      	movs	r3, #10
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d34:	2301      	movs	r3, #1
 8002d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d38:	2310      	movs	r3, #16
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d40:	2302      	movs	r3, #2
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002d44:	2300      	movs	r3, #0
 8002d46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002d48:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002d4c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d52:	4618      	mov	r0, r3
 8002d54:	f007 fcd2 	bl	800a6fc <HAL_RCC_OscConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d5e:	f000 fbc5 	bl	80034ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d62:	230f      	movs	r3, #15
 8002d64:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d66:	2302      	movs	r3, #2
 8002d68:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d78:	f107 031c 	add.w	r3, r7, #28
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f007 ff3c 	bl	800abfc <HAL_RCC_ClockConfig>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d8a:	f000 fbaf 	bl	80034ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d96:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f008 f8b4 	bl	800af08 <HAL_RCCEx_PeriphCLKConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002da6:	f000 fba1 	bl	80034ec <Error_Handler>
  }
}
 8002daa:	bf00      	nop
 8002dac:	3758      	adds	r7, #88	; 0x58
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <BMS_Init>:

/* USER CODE BEGIN 4 */
void BMS_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 8002dba:	2210      	movs	r2, #16
 8002dbc:	4953      	ldr	r1, [pc, #332]	; (8002f0c <BMS_Init+0x158>)
 8002dbe:	f640 2022 	movw	r0, #2594	; 0xa22
 8002dc2:	f00b fc77 	bl	800e6b4 <itoa>
	int ii=0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002dca:	e01a      	b.n	8002e02 <BMS_Init+0x4e>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8002dcc:	4a4f      	ldr	r2, [pc, #316]	; (8002f0c <BMS_Init+0x158>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	70fb      	strb	r3, [r7, #3]
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	4a4d      	ldr	r2, [pc, #308]	; (8002f10 <BMS_Init+0x15c>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d102      	bne.n	8002dee <BMS_Init+0x3a>
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	3b20      	subs	r3, #32
 8002dec:	e000      	b.n	8002df0 <BMS_Init+0x3c>
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	b2d9      	uxtb	r1, r3
 8002df2:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <BMS_Init+0x160>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	460a      	mov	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
		ii++;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	dde1      	ble.n	8002dcc <BMS_Init+0x18>
	}

	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e0e:	4842      	ldr	r0, [pc, #264]	; (8002f18 <BMS_Init+0x164>)
 8002e10:	f006 f942 	bl	8009098 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002e14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e18:	f003 ffa0 	bl	8006d5c <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e20:	483d      	ldr	r0, [pc, #244]	; (8002f18 <BMS_Init+0x164>)
 8002e22:	f006 f951 	bl	80090c8 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8002e26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e2a:	f003 ff97 	bl	8006d5c <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e32:	4839      	ldr	r0, [pc, #228]	; (8002f18 <BMS_Init+0x164>)
 8002e34:	f006 f948 	bl	80090c8 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	f003 ff8f 	bl	8006d5c <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e42:	4835      	ldr	r0, [pc, #212]	; (8002f18 <BMS_Init+0x164>)
 8002e44:	f006 f940 	bl	80090c8 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002e48:	2064      	movs	r0, #100	; 0x64
 8002e4a:	f003 ff87 	bl	8006d5c <HAL_Delay>
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8002e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e52:	4831      	ldr	r0, [pc, #196]	; (8002f18 <BMS_Init+0x164>)
 8002e54:	f006 f938 	bl	80090c8 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002e58:	2064      	movs	r0, #100	; 0x64
 8002e5a:	f003 ff7f 	bl	8006d5c <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e64:	482c      	ldr	r0, [pc, #176]	; (8002f18 <BMS_Init+0x164>)
 8002e66:	f006 f917 	bl	8009098 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e6a:	2064      	movs	r0, #100	; 0x64
 8002e6c:	f003 ff76 	bl	8006d5c <HAL_Delay>

	Adbms_Init(NULL);
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fe fa7d 	bl	8001370 <Adbms_Init>

	SSD1306_Init();
 8002e76:	f000 fbd7 	bl	8003628 <SSD1306_Init>
	HAL_Delay(500);
 8002e7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e7e:	f003 ff6d 	bl	8006d5c <HAL_Delay>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 fcbc 	bl	8003800 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002e88:	f000 fc8c 	bl	80037a4 <SSD1306_UpdateScreen>

	SSD1306_GotoXY (30,10);
 8002e8c:	210a      	movs	r1, #10
 8002e8e:	201e      	movs	r0, #30
 8002e90:	f000 fd2c 	bl	80038ec <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I BMS", &Font_7x10, 1);
 8002e94:	2201      	movs	r2, #1
 8002e96:	4921      	ldr	r1, [pc, #132]	; (8002f1c <BMS_Init+0x168>)
 8002e98:	4821      	ldr	r0, [pc, #132]	; (8002f20 <BMS_Init+0x16c>)
 8002e9a:	f000 fdbd 	bl	8003a18 <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8002e9e:	211e      	movs	r1, #30
 8002ea0:	2028      	movs	r0, #40	; 0x28
 8002ea2:	f000 fd23 	bl	80038ec <SSD1306_GotoXY>
	SSD1306_Puts ("10S13P", &Font_7x10, 1);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	491c      	ldr	r1, [pc, #112]	; (8002f1c <BMS_Init+0x168>)
 8002eaa:	481e      	ldr	r0, [pc, #120]	; (8002f24 <BMS_Init+0x170>)
 8002eac:	f000 fdb4 	bl	8003a18 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002eb0:	f000 fc78 	bl	80037a4 <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f000 fca3 	bl	8003800 <SSD1306_Fill>
	HAL_Delay(10);
 8002eba:	200a      	movs	r0, #10
 8002ebc:	f003 ff4e 	bl	8006d5c <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_value, 7);
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	4919      	ldr	r1, [pc, #100]	; (8002f28 <BMS_Init+0x174>)
 8002ec4:	4819      	ldr	r0, [pc, #100]	; (8002f2c <BMS_Init+0x178>)
 8002ec6:	f004 f857 	bl	8006f78 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8002eca:	4819      	ldr	r0, [pc, #100]	; (8002f30 <BMS_Init+0x17c>)
 8002ecc:	f008 fcf2 	bl	800b8b4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002ed0:	4818      	ldr	r0, [pc, #96]	; (8002f34 <BMS_Init+0x180>)
 8002ed2:	f008 fcef 	bl	800b8b4 <HAL_TIM_Base_Start_IT>

	BATT_State=STATE_STANDBY;
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <BMS_Init+0x184>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8002edc:	f7fe fc5e 	bl	800179c <Batt_Open_Mode>
	BATT_Start_Up = 1;
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <BMS_Init+0x188>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	701a      	strb	r2, [r3, #0]
	flag_start_shutdown = 0;
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <BMS_Init+0x18c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
	HAL_Delay(50);
 8002eec:	2032      	movs	r0, #50	; 0x32
 8002eee:	f003 ff35 	bl	8006d5c <HAL_Delay>
	EEPROM_isDeviceReady(0xA0);
 8002ef2:	20a0      	movs	r0, #160	; 0xa0
 8002ef4:	f7fe fe50 	bl	8001b98 <EEPROM_isDeviceReady>
	BMS_CAN_Config();
 8002ef8:	f7ff fc98 	bl	800282c <BMS_CAN_Config>
	HAL_Delay(100);
 8002efc:	2064      	movs	r0, #100	; 0x64
 8002efe:	f003 ff2d 	bl	8006d5c <HAL_Delay>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200009d4 	.word	0x200009d4
 8002f10:	08013d7c 	.word	0x08013d7c
 8002f14:	200009cc 	.word	0x200009cc
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	20000038 	.word	0x20000038
 8002f20:	080130d8 	.word	0x080130d8
 8002f24:	080130e4 	.word	0x080130e4
 8002f28:	2000026c 	.word	0x2000026c
 8002f2c:	20000790 	.word	0x20000790
 8002f30:	20000cc0 	.word	0x20000cc0
 8002f34:	20000c78 	.word	0x20000c78
 8002f38:	200009e4 	.word	0x200009e4
 8002f3c:	20000349 	.word	0x20000349
 8002f40:	200002c8 	.word	0x200002c8

08002f44 <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8002f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	af06      	add	r7, sp, #24
	if(flag_start_shutdown == 0)
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <BMS_ScreenMode_RUN+0x14c>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d160      	bne.n	8003016 <BMS_ScreenMode_RUN+0xd2>
	{

		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f000 fc53 	bl	8003800 <SSD1306_Fill>
		sprintf(buff_lcd,"RUNNING");
 8002f5a:	494e      	ldr	r1, [pc, #312]	; (8003094 <BMS_ScreenMode_RUN+0x150>)
 8002f5c:	484e      	ldr	r0, [pc, #312]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8002f5e:	f00c faad 	bl	800f4bc <siprintf>
		SSD1306_GotoXY(40,18);
 8002f62:	2112      	movs	r1, #18
 8002f64:	2028      	movs	r0, #40	; 0x28
 8002f66:	f000 fcc1 	bl	80038ec <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	494b      	ldr	r1, [pc, #300]	; (800309c <BMS_ScreenMode_RUN+0x158>)
 8002f6e:	484a      	ldr	r0, [pc, #296]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8002f70:	f000 fd52 	bl	8003a18 <SSD1306_Puts>

		sprintf(buff_lcd,"SLEEP_STATE");
 8002f74:	494a      	ldr	r1, [pc, #296]	; (80030a0 <BMS_ScreenMode_RUN+0x15c>)
 8002f76:	4848      	ldr	r0, [pc, #288]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8002f78:	f00c faa0 	bl	800f4bc <siprintf>
		SSD1306_GotoXY(25,38);
 8002f7c:	2126      	movs	r1, #38	; 0x26
 8002f7e:	2019      	movs	r0, #25
 8002f80:	f000 fcb4 	bl	80038ec <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8002f84:	2201      	movs	r2, #1
 8002f86:	4945      	ldr	r1, [pc, #276]	; (800309c <BMS_ScreenMode_RUN+0x158>)
 8002f88:	4843      	ldr	r0, [pc, #268]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8002f8a:	f000 fd45 	bl	8003a18 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002f8e:	f000 fc09 	bl	80037a4 <SSD1306_UpdateScreen>


		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8002f92:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <BMS_ScreenMode_RUN+0x160>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a44      	ldr	r2, [pc, #272]	; (80030a8 <BMS_ScreenMode_RUN+0x164>)
 8002f98:	6013      	str	r3, [r2, #0]
		Batt_Open_Mode();
 8002f9a:	f7fe fbff 	bl	800179c <Batt_Open_Mode>

		flag_trip_overtemperature=OFF;
 8002f9e:	4b43      	ldr	r3, [pc, #268]	; (80030ac <BMS_ScreenMode_RUN+0x168>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
		flag_trip_undertemperature=OFF;
 8002fa4:	4b42      	ldr	r3, [pc, #264]	; (80030b0 <BMS_ScreenMode_RUN+0x16c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverDischarge=OFF;
 8002faa:	4b42      	ldr	r3, [pc, #264]	; (80030b4 <BMS_ScreenMode_RUN+0x170>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
		flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 8002fb0:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <BMS_ScreenMode_RUN+0x174>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
		flag_trip_undervoltage=OFF;
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <BMS_ScreenMode_RUN+0x178>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=OFF;
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <BMS_ScreenMode_RUN+0x17c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentdischarge=OFF;
 8002fc2:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <BMS_ScreenMode_RUN+0x180>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
		flag_trip_overcurrentcharge=OFF;
 8002fc8:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <BMS_ScreenMode_RUN+0x184>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
		flag_trip_shortcircuit=OFF;
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <BMS_ScreenMode_RUN+0x188>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
		flag_trip_systemfailure=OFF;
 8002fd4:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <BMS_ScreenMode_RUN+0x18c>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
		flag_trip_unbalance=OFF;
 8002fda:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <BMS_ScreenMode_RUN+0x190>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
		flag_get_UNIQUECODE=OFF;
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <BMS_ScreenMode_RUN+0x194>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
		OFFSET_SENSOR_ARUS=IBATT_for_offset_cal;
 8002fe6:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <BMS_ScreenMode_RUN+0x160>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <BMS_ScreenMode_RUN+0x164>)
 8002fec:	6013      	str	r3, [r2, #0]

		if(last_flag_start_shutdown==1) Shutdown_time_last = HAL_GetTick();
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <BMS_ScreenMode_RUN+0x198>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d105      	bne.n	8003002 <BMS_ScreenMode_RUN+0xbe>
 8002ff6:	f003 fea7 	bl	8006d48 <HAL_GetTick>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <BMS_ScreenMode_RUN+0x19c>)
 8003000:	601a      	str	r2, [r3, #0]

		// Automatic sleep after 30s without receive CAN
		Shutdown_time=HAL_GetTick();
 8003002:	f003 fea1 	bl	8006d48 <HAL_GetTick>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	4b36      	ldr	r3, [pc, #216]	; (80030e4 <BMS_ScreenMode_RUN+0x1a0>)
 800300c:	601a      	str	r2, [r3, #0]
//			HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
//			HAL_Delay(750);
//			HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);
		}

		last_flag_start_shutdown = 0;
 800300e:	4b33      	ldr	r3, [pc, #204]	; (80030dc <BMS_ScreenMode_RUN+0x198>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e172      	b.n	80032fc <BMS_ScreenMode_RUN+0x3b8>
	}
	else
	{

		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003016:	2000      	movs	r0, #0
 8003018:	f000 fbf2 	bl	8003800 <SSD1306_Fill>

		if(BATT_State==STATE_CHARGE)
 800301c:	4b32      	ldr	r3, [pc, #200]	; (80030e8 <BMS_ScreenMode_RUN+0x1a4>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d10e      	bne.n	8003042 <BMS_ScreenMode_RUN+0xfe>
		{
			sprintf(buff_lcd,"RUN (C) - %05s", UPPER_UNIQUE_Code);
 8003024:	4a31      	ldr	r2, [pc, #196]	; (80030ec <BMS_ScreenMode_RUN+0x1a8>)
 8003026:	4932      	ldr	r1, [pc, #200]	; (80030f0 <BMS_ScreenMode_RUN+0x1ac>)
 8003028:	481b      	ldr	r0, [pc, #108]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 800302a:	f00c fa47 	bl	800f4bc <siprintf>
			SSD1306_GotoXY(0,0);
 800302e:	2100      	movs	r1, #0
 8003030:	2000      	movs	r0, #0
 8003032:	f000 fc5b 	bl	80038ec <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003036:	2201      	movs	r2, #1
 8003038:	4918      	ldr	r1, [pc, #96]	; (800309c <BMS_ScreenMode_RUN+0x158>)
 800303a:	4817      	ldr	r0, [pc, #92]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 800303c:	f000 fcec 	bl	8003a18 <SSD1306_Puts>
 8003040:	e06e      	b.n	8003120 <BMS_ScreenMode_RUN+0x1dc>
		}
		else if(BATT_State==STATE_DISCHARGE)
 8003042:	4b29      	ldr	r3, [pc, #164]	; (80030e8 <BMS_ScreenMode_RUN+0x1a4>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d10e      	bne.n	8003068 <BMS_ScreenMode_RUN+0x124>
		{
			sprintf(buff_lcd,"RUN (D) - %05s", UPPER_UNIQUE_Code);
 800304a:	4a28      	ldr	r2, [pc, #160]	; (80030ec <BMS_ScreenMode_RUN+0x1a8>)
 800304c:	4929      	ldr	r1, [pc, #164]	; (80030f4 <BMS_ScreenMode_RUN+0x1b0>)
 800304e:	4812      	ldr	r0, [pc, #72]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8003050:	f00c fa34 	bl	800f4bc <siprintf>
			SSD1306_GotoXY(0,0);
 8003054:	2100      	movs	r1, #0
 8003056:	2000      	movs	r0, #0
 8003058:	f000 fc48 	bl	80038ec <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 800305c:	2201      	movs	r2, #1
 800305e:	490f      	ldr	r1, [pc, #60]	; (800309c <BMS_ScreenMode_RUN+0x158>)
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8003062:	f000 fcd9 	bl	8003a18 <SSD1306_Puts>
 8003066:	e05b      	b.n	8003120 <BMS_ScreenMode_RUN+0x1dc>
		}
		else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <BMS_ScreenMode_RUN+0x1a4>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d145      	bne.n	80030fc <BMS_ScreenMode_RUN+0x1b8>
		{
			sprintf(buff_lcd,"RUN (C/D) - %05s", UPPER_UNIQUE_Code);
 8003070:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <BMS_ScreenMode_RUN+0x1a8>)
 8003072:	4921      	ldr	r1, [pc, #132]	; (80030f8 <BMS_ScreenMode_RUN+0x1b4>)
 8003074:	4808      	ldr	r0, [pc, #32]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8003076:	f00c fa21 	bl	800f4bc <siprintf>
			SSD1306_GotoXY(0,0);
 800307a:	2100      	movs	r1, #0
 800307c:	2000      	movs	r0, #0
 800307e:	f000 fc35 	bl	80038ec <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003082:	2201      	movs	r2, #1
 8003084:	4905      	ldr	r1, [pc, #20]	; (800309c <BMS_ScreenMode_RUN+0x158>)
 8003086:	4804      	ldr	r0, [pc, #16]	; (8003098 <BMS_ScreenMode_RUN+0x154>)
 8003088:	f000 fcc6 	bl	8003a18 <SSD1306_Puts>
 800308c:	e048      	b.n	8003120 <BMS_ScreenMode_RUN+0x1dc>
 800308e:	bf00      	nop
 8003090:	200002c8 	.word	0x200002c8
 8003094:	080130ec 	.word	0x080130ec
 8003098:	200009b8 	.word	0x200009b8
 800309c:	20000038 	.word	0x20000038
 80030a0:	080130f4 	.word	0x080130f4
 80030a4:	20000294 	.word	0x20000294
 80030a8:	20000290 	.word	0x20000290
 80030ac:	20000310 	.word	0x20000310
 80030b0:	20000311 	.word	0x20000311
 80030b4:	20000312 	.word	0x20000312
 80030b8:	20000313 	.word	0x20000313
 80030bc:	20000314 	.word	0x20000314
 80030c0:	20000315 	.word	0x20000315
 80030c4:	20000316 	.word	0x20000316
 80030c8:	20000317 	.word	0x20000317
 80030cc:	20000318 	.word	0x20000318
 80030d0:	20000319 	.word	0x20000319
 80030d4:	2000031a 	.word	0x2000031a
 80030d8:	200002e8 	.word	0x200002e8
 80030dc:	200002c9 	.word	0x200002c9
 80030e0:	200002e4 	.word	0x200002e4
 80030e4:	200002e0 	.word	0x200002e0
 80030e8:	200009e4 	.word	0x200009e4
 80030ec:	200009cc 	.word	0x200009cc
 80030f0:	08013100 	.word	0x08013100
 80030f4:	08013110 	.word	0x08013110
 80030f8:	08013120 	.word	0x08013120
		}
		else if(BATT_State==STATE_STANDBY)
 80030fc:	4b83      	ldr	r3, [pc, #524]	; (800330c <BMS_ScreenMode_RUN+0x3c8>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10d      	bne.n	8003120 <BMS_ScreenMode_RUN+0x1dc>
		{
			sprintf(buff_lcd,"RUN (Open) - %05s", UPPER_UNIQUE_Code);
 8003104:	4a82      	ldr	r2, [pc, #520]	; (8003310 <BMS_ScreenMode_RUN+0x3cc>)
 8003106:	4983      	ldr	r1, [pc, #524]	; (8003314 <BMS_ScreenMode_RUN+0x3d0>)
 8003108:	4883      	ldr	r0, [pc, #524]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 800310a:	f00c f9d7 	bl	800f4bc <siprintf>
			SSD1306_GotoXY(0,0);
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f000 fbeb 	bl	80038ec <SSD1306_GotoXY>
			SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003116:	2201      	movs	r2, #1
 8003118:	4980      	ldr	r1, [pc, #512]	; (800331c <BMS_ScreenMode_RUN+0x3d8>)
 800311a:	487f      	ldr	r0, [pc, #508]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 800311c:	f000 fc7c 	bl	8003a18 <SSD1306_Puts>
		}

		sprintf(buff_lcd,"V=%6.2f I=%6.2f",VBATT, IBATT);
 8003120:	4b7f      	ldr	r3, [pc, #508]	; (8003320 <BMS_ScreenMode_RUN+0x3dc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f9eb 	bl	8000500 <__aeabi_f2d>
 800312a:	4604      	mov	r4, r0
 800312c:	460d      	mov	r5, r1
 800312e:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <BMS_ScreenMode_RUN+0x3e0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd f9e4 	bl	8000500 <__aeabi_f2d>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	e9cd 2300 	strd	r2, r3, [sp]
 8003140:	4622      	mov	r2, r4
 8003142:	462b      	mov	r3, r5
 8003144:	4978      	ldr	r1, [pc, #480]	; (8003328 <BMS_ScreenMode_RUN+0x3e4>)
 8003146:	4874      	ldr	r0, [pc, #464]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 8003148:	f00c f9b8 	bl	800f4bc <siprintf>
		SSD1306_GotoXY(0,10);
 800314c:	210a      	movs	r1, #10
 800314e:	2000      	movs	r0, #0
 8003150:	f000 fbcc 	bl	80038ec <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003154:	2201      	movs	r2, #1
 8003156:	4971      	ldr	r1, [pc, #452]	; (800331c <BMS_ScreenMode_RUN+0x3d8>)
 8003158:	486f      	ldr	r0, [pc, #444]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 800315a:	f000 fc5d 	bl	8003a18 <SSD1306_Puts>
		sprintf(buff_lcd,"T=%3.0f|%3.0f|%3.0f|%3.0f", Suhu_T1, Suhu_T2, Suhu_T3, Suhu_T4);
 800315e:	4b73      	ldr	r3, [pc, #460]	; (800332c <BMS_ScreenMode_RUN+0x3e8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f9cc 	bl	8000500 <__aeabi_f2d>
 8003168:	4682      	mov	sl, r0
 800316a:	468b      	mov	fp, r1
 800316c:	4b70      	ldr	r3, [pc, #448]	; (8003330 <BMS_ScreenMode_RUN+0x3ec>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd f9c5 	bl	8000500 <__aeabi_f2d>
 8003176:	4604      	mov	r4, r0
 8003178:	460d      	mov	r5, r1
 800317a:	4b6e      	ldr	r3, [pc, #440]	; (8003334 <BMS_ScreenMode_RUN+0x3f0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f9be 	bl	8000500 <__aeabi_f2d>
 8003184:	4680      	mov	r8, r0
 8003186:	4689      	mov	r9, r1
 8003188:	4b6b      	ldr	r3, [pc, #428]	; (8003338 <BMS_ScreenMode_RUN+0x3f4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f9b7 	bl	8000500 <__aeabi_f2d>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800319a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800319e:	e9cd 4500 	strd	r4, r5, [sp]
 80031a2:	4652      	mov	r2, sl
 80031a4:	465b      	mov	r3, fp
 80031a6:	4965      	ldr	r1, [pc, #404]	; (800333c <BMS_ScreenMode_RUN+0x3f8>)
 80031a8:	485b      	ldr	r0, [pc, #364]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 80031aa:	f00c f987 	bl	800f4bc <siprintf>
		SSD1306_GotoXY(0,20);
 80031ae:	2114      	movs	r1, #20
 80031b0:	2000      	movs	r0, #0
 80031b2:	f000 fb9b 	bl	80038ec <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 80031b6:	2201      	movs	r2, #1
 80031b8:	4958      	ldr	r1, [pc, #352]	; (800331c <BMS_ScreenMode_RUN+0x3d8>)
 80031ba:	4857      	ldr	r0, [pc, #348]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 80031bc:	f000 fc2c 	bl	8003a18 <SSD1306_Puts>
		sprintf(buff_lcd,"C=%5.1f%%--%5.1f%%",Pack_SOC,SOC_manipulasi);
 80031c0:	4b5f      	ldr	r3, [pc, #380]	; (8003340 <BMS_ScreenMode_RUN+0x3fc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd f99b 	bl	8000500 <__aeabi_f2d>
 80031ca:	4604      	mov	r4, r0
 80031cc:	460d      	mov	r5, r1
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <BMS_ScreenMode_RUN+0x400>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f994 	bl	8000500 <__aeabi_f2d>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	e9cd 2300 	strd	r2, r3, [sp]
 80031e0:	4622      	mov	r2, r4
 80031e2:	462b      	mov	r3, r5
 80031e4:	4958      	ldr	r1, [pc, #352]	; (8003348 <BMS_ScreenMode_RUN+0x404>)
 80031e6:	484c      	ldr	r0, [pc, #304]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 80031e8:	f00c f968 	bl	800f4bc <siprintf>
		SSD1306_GotoXY(0,30);
 80031ec:	211e      	movs	r1, #30
 80031ee:	2000      	movs	r0, #0
 80031f0:	f000 fb7c 	bl	80038ec <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 80031f4:	2201      	movs	r2, #1
 80031f6:	4949      	ldr	r1, [pc, #292]	; (800331c <BMS_ScreenMode_RUN+0x3d8>)
 80031f8:	4847      	ldr	r0, [pc, #284]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 80031fa:	f000 fc0d 	bl	8003a18 <SSD1306_Puts>
		sprintf(buff_lcd,"B=%5d|%4.2f|%4.2f",unbalance_cell, persen_imbalance, OFFSET_SENSOR_ARUS);
 80031fe:	4b53      	ldr	r3, [pc, #332]	; (800334c <BMS_ScreenMode_RUN+0x408>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	461e      	mov	r6, r3
 8003204:	4b52      	ldr	r3, [pc, #328]	; (8003350 <BMS_ScreenMode_RUN+0x40c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f979 	bl	8000500 <__aeabi_f2d>
 800320e:	4604      	mov	r4, r0
 8003210:	460d      	mov	r5, r1
 8003212:	4b50      	ldr	r3, [pc, #320]	; (8003354 <BMS_ScreenMode_RUN+0x410>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f972 	bl	8000500 <__aeabi_f2d>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003224:	e9cd 4500 	strd	r4, r5, [sp]
 8003228:	4632      	mov	r2, r6
 800322a:	494b      	ldr	r1, [pc, #300]	; (8003358 <BMS_ScreenMode_RUN+0x414>)
 800322c:	483a      	ldr	r0, [pc, #232]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 800322e:	f00c f945 	bl	800f4bc <siprintf>
		SSD1306_GotoXY(0,40);
 8003232:	2128      	movs	r1, #40	; 0x28
 8003234:	2000      	movs	r0, #0
 8003236:	f000 fb59 	bl	80038ec <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 800323a:	2201      	movs	r2, #1
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <BMS_ScreenMode_RUN+0x3d8>)
 800323e:	4836      	ldr	r0, [pc, #216]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 8003240:	f000 fbea 	bl	8003a18 <SSD1306_Puts>

		sprintf(buff_lcd,"%d-%d--%4.2f| %5.0f",fault_code,last_fault_code,Isc, AH_Total);
 8003244:	4b45      	ldr	r3, [pc, #276]	; (800335c <BMS_ScreenMode_RUN+0x418>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461e      	mov	r6, r3
 800324a:	4b45      	ldr	r3, [pc, #276]	; (8003360 <BMS_ScreenMode_RUN+0x41c>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4698      	mov	r8, r3
 8003250:	4b44      	ldr	r3, [pc, #272]	; (8003364 <BMS_ScreenMode_RUN+0x420>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f953 	bl	8000500 <__aeabi_f2d>
 800325a:	4604      	mov	r4, r0
 800325c:	460d      	mov	r5, r1
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <BMS_ScreenMode_RUN+0x424>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f94c 	bl	8000500 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003270:	e9cd 4500 	strd	r4, r5, [sp]
 8003274:	4643      	mov	r3, r8
 8003276:	4632      	mov	r2, r6
 8003278:	493c      	ldr	r1, [pc, #240]	; (800336c <BMS_ScreenMode_RUN+0x428>)
 800327a:	4827      	ldr	r0, [pc, #156]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 800327c:	f00c f91e 	bl	800f4bc <siprintf>
		SSD1306_GotoXY(0,50);
 8003280:	2132      	movs	r1, #50	; 0x32
 8003282:	2000      	movs	r0, #0
 8003284:	f000 fb32 	bl	80038ec <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003288:	2201      	movs	r2, #1
 800328a:	4924      	ldr	r1, [pc, #144]	; (800331c <BMS_ScreenMode_RUN+0x3d8>)
 800328c:	4822      	ldr	r0, [pc, #136]	; (8003318 <BMS_ScreenMode_RUN+0x3d4>)
 800328e:	f000 fbc3 	bl	8003a18 <SSD1306_Puts>

		SSD1306_UpdateScreen();
 8003292:	f000 fa87 	bl	80037a4 <SSD1306_UpdateScreen>

		if(BMS_mode==0) Batt_Open_Mode();
 8003296:	4b36      	ldr	r3, [pc, #216]	; (8003370 <BMS_ScreenMode_RUN+0x42c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <BMS_ScreenMode_RUN+0x360>
 800329e:	f7fe fa7d 	bl	800179c <Batt_Open_Mode>
 80032a2:	e013      	b.n	80032cc <BMS_ScreenMode_RUN+0x388>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <BMS_ScreenMode_RUN+0x42c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <BMS_ScreenMode_RUN+0x36e>
 80032ac:	f7fe f94a 	bl	8001544 <Batt_Discharge_Mode>
 80032b0:	e00c      	b.n	80032cc <BMS_ScreenMode_RUN+0x388>
		else if(BMS_mode==2) Batt_Charge_Mode();
 80032b2:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <BMS_ScreenMode_RUN+0x42c>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d102      	bne.n	80032c0 <BMS_ScreenMode_RUN+0x37c>
 80032ba:	f7fe f99d 	bl	80015f8 <Batt_Charge_Mode>
 80032be:	e005      	b.n	80032cc <BMS_ScreenMode_RUN+0x388>
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 80032c0:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <BMS_ScreenMode_RUN+0x42c>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d101      	bne.n	80032cc <BMS_ScreenMode_RUN+0x388>
 80032c8:	f7fe f9fc 	bl	80016c4 <Batt_Full_CD_Mode>

	//  Automatically sleep after 30s without receive CAN
		Sleep_time=HAL_GetTick();
 80032cc:	f003 fd3c 	bl	8006d48 <HAL_GetTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <BMS_ScreenMode_RUN+0x430>)
 80032d6:	601a      	str	r2, [r3, #0]
		if(Sleep_time-Active_time_last>Sleep_tick)
 80032d8:	4b26      	ldr	r3, [pc, #152]	; (8003374 <BMS_ScreenMode_RUN+0x430>)
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b26      	ldr	r3, [pc, #152]	; (8003378 <BMS_ScreenMode_RUN+0x434>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1ad2      	subs	r2, r2, r3
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <BMS_ScreenMode_RUN+0x438>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	dd05      	ble.n	80032f6 <BMS_ScreenMode_RUN+0x3b2>
		{
			BMS_mode=0;
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <BMS_ScreenMode_RUN+0x42c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
			flag_start_shutdown=0;
 80032f0:	4b23      	ldr	r3, [pc, #140]	; (8003380 <BMS_ScreenMode_RUN+0x43c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
		}
		last_flag_start_shutdown = 1;
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <BMS_ScreenMode_RUN+0x440>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1);
 80032fc:	2001      	movs	r0, #1
 80032fe:	f003 fd2d 	bl	8006d5c <HAL_Delay>
}
 8003302:	bf00      	nop
 8003304:	3704      	adds	r7, #4
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800330c:	200009e4 	.word	0x200009e4
 8003310:	200009cc 	.word	0x200009cc
 8003314:	08013134 	.word	0x08013134
 8003318:	200009b8 	.word	0x200009b8
 800331c:	20000038 	.word	0x20000038
 8003320:	20000280 	.word	0x20000280
 8003324:	20000284 	.word	0x20000284
 8003328:	08013148 	.word	0x08013148
 800332c:	200002b0 	.word	0x200002b0
 8003330:	200002b4 	.word	0x200002b4
 8003334:	200002b8 	.word	0x200002b8
 8003338:	200002bc 	.word	0x200002bc
 800333c:	08013158 	.word	0x08013158
 8003340:	20000320 	.word	0x20000320
 8003344:	200002f4 	.word	0x200002f4
 8003348:	08013174 	.word	0x08013174
 800334c:	200002d0 	.word	0x200002d0
 8003350:	200002d4 	.word	0x200002d4
 8003354:	20000290 	.word	0x20000290
 8003358:	08013188 	.word	0x08013188
 800335c:	20000300 	.word	0x20000300
 8003360:	20000301 	.word	0x20000301
 8003364:	20000288 	.word	0x20000288
 8003368:	20000758 	.word	0x20000758
 800336c:	0801319c 	.word	0x0801319c
 8003370:	200002ca 	.word	0x200002ca
 8003374:	200002d8 	.word	0x200002d8
 8003378:	200002dc 	.word	0x200002dc
 800337c:	20000040 	.word	0x20000040
 8003380:	200002c8 	.word	0x200002c8
 8003384:	200002c9 	.word	0x200002c9

08003388 <get_balance_status>:

uint16_t get_balance_status(float Cell_Voltage_10data[10])
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b092      	sub	sp, #72	; 0x48
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	uint16_t balance_status;
	float Cell_Voltage_Lowest = 4.2;
 8003390:	4b51      	ldr	r3, [pc, #324]	; (80034d8 <get_balance_status+0x150>)
 8003392:	643b      	str	r3, [r7, #64]	; 0x40
	float delta_vbatt[10];
	balance_status=0x0000;
 8003394:	2300      	movs	r3, #0
 8003396:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t temp_dat;
	float buffer_imbalance;

	for(int ik=0;ik<10;ik++) {
 800339a:	2300      	movs	r3, #0
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
 800339e:	e014      	b.n	80033ca <get_balance_status+0x42>
		if(Cell_Voltage_10data[ik] < Cell_Voltage_Lowest)
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4619      	mov	r1, r3
 80033ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80033ae:	f7fd ff11 	bl	80011d4 <__aeabi_fcmpgt>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <get_balance_status+0x3c>
			Cell_Voltage_Lowest = Cell_Voltage_10data[ik];
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	643b      	str	r3, [r7, #64]	; 0x40
	for(int ik=0;ik<10;ik++) {
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	3301      	adds	r3, #1
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	dde7      	ble.n	80033a0 <get_balance_status+0x18>
	}

	for(int ik=0;ik<10;ik++) {
 80033d0:	2300      	movs	r3, #0
 80033d2:	637b      	str	r3, [r7, #52]	; 0x34
 80033d4:	e050      	b.n	8003478 <get_balance_status+0xf0>
		delta_vbatt[ik] = Cell_Voltage_10data[ik] - Cell_Voltage_Lowest;
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd fc30 	bl	8000c48 <__aeabi_fsub>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80033f4:	440b      	add	r3, r1
 80033f6:	f843 2c40 	str.w	r2, [r3, #-64]

		buffer_imbalance+=delta_vbatt[ik];
 80033fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003402:	4413      	add	r3, r2
 8003404:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003408:	4619      	mov	r1, r3
 800340a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800340c:	f7fd fc1e 	bl	8000c4c <__addsf3>
 8003410:	4603      	mov	r3, r0
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c

		if(delta_vbatt[ik]> 0.025 && Cell_Voltage_10data[ik] > VCELL_BALANCE_PERMITTED) {
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800341c:	4413      	add	r3, r2
 800341e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd f86c 	bl	8000500 <__aeabi_f2d>
 8003428:	a327      	add	r3, pc, #156	; (adr r3, 80034c8 <get_balance_status+0x140>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f7fd fb4f 	bl	8000ad0 <__aeabi_dcmpgt>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01c      	beq.n	8003472 <get_balance_status+0xea>
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd f85c 	bl	8000500 <__aeabi_f2d>
 8003448:	a321      	add	r3, pc, #132	; (adr r3, 80034d0 <get_balance_status+0x148>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fd fb3f 	bl	8000ad0 <__aeabi_dcmpgt>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <get_balance_status+0xea>
			temp_dat = 0x01;
 8003458:	2301      	movs	r3, #1
 800345a:	867b      	strh	r3, [r7, #50]	; 0x32
			temp_dat = temp_dat << ik;
 800345c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	867b      	strh	r3, [r7, #50]	; 0x32
			balance_status= balance_status+temp_dat;
 8003466:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800346a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800346c:	4413      	add	r3, r2
 800346e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	for(int ik=0;ik<10;ik++) {
 8003472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003474:	3301      	adds	r3, #1
 8003476:	637b      	str	r3, [r7, #52]	; 0x34
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	2b09      	cmp	r3, #9
 800347c:	ddab      	ble.n	80033d6 <get_balance_status+0x4e>
		}
	}
	persen_imbalance=buffer_imbalance*100/9.0/1.2;
 800347e:	4917      	ldr	r1, [pc, #92]	; (80034dc <get_balance_status+0x154>)
 8003480:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003482:	f7fd fceb 	bl	8000e5c <__aeabi_fmul>
 8003486:	4603      	mov	r3, r0
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f839 	bl	8000500 <__aeabi_f2d>
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	4b13      	ldr	r3, [pc, #76]	; (80034e0 <get_balance_status+0x158>)
 8003494:	f7fd f9b6 	bl	8000804 <__aeabi_ddiv>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <get_balance_status+0x15c>)
 80034a6:	f7fd f9ad 	bl	8000804 <__aeabi_ddiv>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f7fd fb75 	bl	8000ba0 <__aeabi_d2f>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4a0b      	ldr	r2, [pc, #44]	; (80034e8 <get_balance_status+0x160>)
 80034ba:	6013      	str	r3, [r2, #0]
	return(balance_status);
 80034bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3748      	adds	r7, #72	; 0x48
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	9999999a 	.word	0x9999999a
 80034cc:	3f999999 	.word	0x3f999999
 80034d0:	66666666 	.word	0x66666666
 80034d4:	400a6666 	.word	0x400a6666
 80034d8:	40866666 	.word	0x40866666
 80034dc:	42c80000 	.word	0x42c80000
 80034e0:	40220000 	.word	0x40220000
 80034e4:	3ff33333 	.word	0x3ff33333
 80034e8:	200002d4 	.word	0x200002d4

080034ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f0:	b672      	cpsid	i
}
 80034f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <Error_Handler+0x8>
	...

080034f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <MX_SPI1_Init+0x64>)
 80034fe:	4a18      	ldr	r2, [pc, #96]	; (8003560 <MX_SPI1_Init+0x68>)
 8003500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <MX_SPI1_Init+0x64>)
 8003504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800350a:	4b14      	ldr	r3, [pc, #80]	; (800355c <MX_SPI1_Init+0x64>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <MX_SPI1_Init+0x64>)
 8003512:	2200      	movs	r2, #0
 8003514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <MX_SPI1_Init+0x64>)
 8003518:	2200      	movs	r2, #0
 800351a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <MX_SPI1_Init+0x64>)
 800351e:	2200      	movs	r2, #0
 8003520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003522:	4b0e      	ldr	r3, [pc, #56]	; (800355c <MX_SPI1_Init+0x64>)
 8003524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800352a:	4b0c      	ldr	r3, [pc, #48]	; (800355c <MX_SPI1_Init+0x64>)
 800352c:	2220      	movs	r2, #32
 800352e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <MX_SPI1_Init+0x64>)
 8003532:	2200      	movs	r2, #0
 8003534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <MX_SPI1_Init+0x64>)
 8003538:	2200      	movs	r2, #0
 800353a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <MX_SPI1_Init+0x64>)
 800353e:	2200      	movs	r2, #0
 8003540:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003542:	4b06      	ldr	r3, [pc, #24]	; (800355c <MX_SPI1_Init+0x64>)
 8003544:	220a      	movs	r2, #10
 8003546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003548:	4804      	ldr	r0, [pc, #16]	; (800355c <MX_SPI1_Init+0x64>)
 800354a:	f007 fd93 	bl	800b074 <HAL_SPI_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003554:	f7ff ffca 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000a44 	.word	0x20000a44
 8003560:	40013000 	.word	0x40013000

08003564 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_SPI_MspInit+0xb4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d145      	bne.n	8003610 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003584:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_SPI_MspInit+0xb8>)
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	4a24      	ldr	r2, [pc, #144]	; (800361c <HAL_SPI_MspInit+0xb8>)
 800358a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800358e:	6193      	str	r3, [r2, #24]
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <HAL_SPI_MspInit+0xb8>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359c:	4b1f      	ldr	r3, [pc, #124]	; (800361c <HAL_SPI_MspInit+0xb8>)
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	4a1e      	ldr	r2, [pc, #120]	; (800361c <HAL_SPI_MspInit+0xb8>)
 80035a2:	f043 0308 	orr.w	r3, r3, #8
 80035a6:	6193      	str	r3, [r2, #24]
 80035a8:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_SPI_MspInit+0xb8>)
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80035b4:	2328      	movs	r3, #40	; 0x28
 80035b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b8:	2302      	movs	r3, #2
 80035ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035bc:	2303      	movs	r3, #3
 80035be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	4816      	ldr	r0, [pc, #88]	; (8003620 <HAL_SPI_MspInit+0xbc>)
 80035c8:	f005 fbd2 	bl	8008d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035cc:	2310      	movs	r3, #16
 80035ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	4619      	mov	r1, r3
 80035de:	4810      	ldr	r0, [pc, #64]	; (8003620 <HAL_SPI_MspInit+0xbc>)
 80035e0:	f005 fbc6 	bl	8008d70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_SPI_MspInit+0xc0>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_SPI_MspInit+0xc0>)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2023      	movs	r0, #35	; 0x23
 8003606:	f004 ff34 	bl	8008472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800360a:	2023      	movs	r0, #35	; 0x23
 800360c:	f004 ff4d 	bl	80084aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40013000 	.word	0x40013000
 800361c:	40021000 	.word	0x40021000
 8003620:	40010c00 	.word	0x40010c00
 8003624:	40010000 	.word	0x40010000

08003628 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800362e:	f000 fa19 	bl	8003a64 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003632:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003636:	2201      	movs	r2, #1
 8003638:	2178      	movs	r1, #120	; 0x78
 800363a:	4858      	ldr	r0, [pc, #352]	; (800379c <SSD1306_Init+0x174>)
 800363c:	f006 fb02 	bl	8009c44 <HAL_I2C_IsDeviceReady>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003646:	2300      	movs	r3, #0
 8003648:	e0a4      	b.n	8003794 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 25000;
 800364a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800364e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003650:	e002      	b.n	8003658 <SSD1306_Init+0x30>
		p--;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3b01      	subs	r3, #1
 8003656:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f9      	bne.n	8003652 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800365e:	22ae      	movs	r2, #174	; 0xae
 8003660:	2100      	movs	r1, #0
 8003662:	2078      	movs	r0, #120	; 0x78
 8003664:	f000 fa6a 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003668:	2220      	movs	r2, #32
 800366a:	2100      	movs	r1, #0
 800366c:	2078      	movs	r0, #120	; 0x78
 800366e:	f000 fa65 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003672:	2210      	movs	r2, #16
 8003674:	2100      	movs	r1, #0
 8003676:	2078      	movs	r0, #120	; 0x78
 8003678:	f000 fa60 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800367c:	22b0      	movs	r2, #176	; 0xb0
 800367e:	2100      	movs	r1, #0
 8003680:	2078      	movs	r0, #120	; 0x78
 8003682:	f000 fa5b 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003686:	22c8      	movs	r2, #200	; 0xc8
 8003688:	2100      	movs	r1, #0
 800368a:	2078      	movs	r0, #120	; 0x78
 800368c:	f000 fa56 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2078      	movs	r0, #120	; 0x78
 8003696:	f000 fa51 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800369a:	2210      	movs	r2, #16
 800369c:	2100      	movs	r1, #0
 800369e:	2078      	movs	r0, #120	; 0x78
 80036a0:	f000 fa4c 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80036a4:	2240      	movs	r2, #64	; 0x40
 80036a6:	2100      	movs	r1, #0
 80036a8:	2078      	movs	r0, #120	; 0x78
 80036aa:	f000 fa47 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80036ae:	2281      	movs	r2, #129	; 0x81
 80036b0:	2100      	movs	r1, #0
 80036b2:	2078      	movs	r0, #120	; 0x78
 80036b4:	f000 fa42 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80036b8:	22ff      	movs	r2, #255	; 0xff
 80036ba:	2100      	movs	r1, #0
 80036bc:	2078      	movs	r0, #120	; 0x78
 80036be:	f000 fa3d 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80036c2:	22a1      	movs	r2, #161	; 0xa1
 80036c4:	2100      	movs	r1, #0
 80036c6:	2078      	movs	r0, #120	; 0x78
 80036c8:	f000 fa38 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80036cc:	22a6      	movs	r2, #166	; 0xa6
 80036ce:	2100      	movs	r1, #0
 80036d0:	2078      	movs	r0, #120	; 0x78
 80036d2:	f000 fa33 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80036d6:	22a8      	movs	r2, #168	; 0xa8
 80036d8:	2100      	movs	r1, #0
 80036da:	2078      	movs	r0, #120	; 0x78
 80036dc:	f000 fa2e 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80036e0:	223f      	movs	r2, #63	; 0x3f
 80036e2:	2100      	movs	r1, #0
 80036e4:	2078      	movs	r0, #120	; 0x78
 80036e6:	f000 fa29 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80036ea:	22a4      	movs	r2, #164	; 0xa4
 80036ec:	2100      	movs	r1, #0
 80036ee:	2078      	movs	r0, #120	; 0x78
 80036f0:	f000 fa24 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80036f4:	22d3      	movs	r2, #211	; 0xd3
 80036f6:	2100      	movs	r1, #0
 80036f8:	2078      	movs	r0, #120	; 0x78
 80036fa:	f000 fa1f 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2078      	movs	r0, #120	; 0x78
 8003704:	f000 fa1a 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003708:	22d5      	movs	r2, #213	; 0xd5
 800370a:	2100      	movs	r1, #0
 800370c:	2078      	movs	r0, #120	; 0x78
 800370e:	f000 fa15 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003712:	22f0      	movs	r2, #240	; 0xf0
 8003714:	2100      	movs	r1, #0
 8003716:	2078      	movs	r0, #120	; 0x78
 8003718:	f000 fa10 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800371c:	22d9      	movs	r2, #217	; 0xd9
 800371e:	2100      	movs	r1, #0
 8003720:	2078      	movs	r0, #120	; 0x78
 8003722:	f000 fa0b 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003726:	2222      	movs	r2, #34	; 0x22
 8003728:	2100      	movs	r1, #0
 800372a:	2078      	movs	r0, #120	; 0x78
 800372c:	f000 fa06 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003730:	22da      	movs	r2, #218	; 0xda
 8003732:	2100      	movs	r1, #0
 8003734:	2078      	movs	r0, #120	; 0x78
 8003736:	f000 fa01 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800373a:	2212      	movs	r2, #18
 800373c:	2100      	movs	r1, #0
 800373e:	2078      	movs	r0, #120	; 0x78
 8003740:	f000 f9fc 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003744:	22db      	movs	r2, #219	; 0xdb
 8003746:	2100      	movs	r1, #0
 8003748:	2078      	movs	r0, #120	; 0x78
 800374a:	f000 f9f7 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800374e:	2220      	movs	r2, #32
 8003750:	2100      	movs	r1, #0
 8003752:	2078      	movs	r0, #120	; 0x78
 8003754:	f000 f9f2 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003758:	228d      	movs	r2, #141	; 0x8d
 800375a:	2100      	movs	r1, #0
 800375c:	2078      	movs	r0, #120	; 0x78
 800375e:	f000 f9ed 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003762:	2214      	movs	r2, #20
 8003764:	2100      	movs	r1, #0
 8003766:	2078      	movs	r0, #120	; 0x78
 8003768:	f000 f9e8 	bl	8003b3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800376c:	22af      	movs	r2, #175	; 0xaf
 800376e:	2100      	movs	r1, #0
 8003770:	2078      	movs	r0, #120	; 0x78
 8003772:	f000 f9e3 	bl	8003b3c <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003776:	2000      	movs	r0, #0
 8003778:	f000 f842 	bl	8003800 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800377c:	f000 f812 	bl	80037a4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <SSD1306_Init+0x178>)
 8003782:	2200      	movs	r2, #0
 8003784:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <SSD1306_Init+0x178>)
 8003788:	2200      	movs	r2, #0
 800378a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <SSD1306_Init+0x178>)
 800378e:	2201      	movs	r2, #1
 8003790:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003792:	2301      	movs	r3, #1
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000904 	.word	0x20000904
 80037a0:	20000750 	.word	0x20000750

080037a4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80037aa:	2300      	movs	r3, #0
 80037ac:	71fb      	strb	r3, [r7, #7]
 80037ae:	e01d      	b.n	80037ec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	3b50      	subs	r3, #80	; 0x50
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	2100      	movs	r1, #0
 80037ba:	2078      	movs	r0, #120	; 0x78
 80037bc:	f000 f9be 	bl	8003b3c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	2078      	movs	r0, #120	; 0x78
 80037c6:	f000 f9b9 	bl	8003b3c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80037ca:	2210      	movs	r2, #16
 80037cc:	2100      	movs	r1, #0
 80037ce:	2078      	movs	r0, #120	; 0x78
 80037d0:	f000 f9b4 	bl	8003b3c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	01db      	lsls	r3, r3, #7
 80037d8:	4a08      	ldr	r2, [pc, #32]	; (80037fc <SSD1306_UpdateScreen+0x58>)
 80037da:	441a      	add	r2, r3
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	2140      	movs	r1, #64	; 0x40
 80037e0:	2078      	movs	r0, #120	; 0x78
 80037e2:	f000 f953 	bl	8003a8c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	3301      	adds	r3, #1
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	2b07      	cmp	r3, #7
 80037f0:	d9de      	bls.n	80037b0 <SSD1306_UpdateScreen+0xc>
	}
}
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000350 	.word	0x20000350

08003800 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <SSD1306_Fill+0x14>
 8003810:	2300      	movs	r3, #0
 8003812:	e001      	b.n	8003818 <SSD1306_Fill+0x18>
 8003814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800381c:	4619      	mov	r1, r3
 800381e:	4803      	ldr	r0, [pc, #12]	; (800382c <SSD1306_Fill+0x2c>)
 8003820:	f00a ff58 	bl	800e6d4 <memset>
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20000350 	.word	0x20000350

08003830 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
 800383a:	460b      	mov	r3, r1
 800383c:	80bb      	strh	r3, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	70fb      	strb	r3, [r7, #3]
	if (
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b7f      	cmp	r3, #127	; 0x7f
 8003846:	d848      	bhi.n	80038da <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003848:	88bb      	ldrh	r3, [r7, #4]
 800384a:	2b3f      	cmp	r3, #63	; 0x3f
 800384c:	d845      	bhi.n	80038da <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <SSD1306_DrawPixel+0xb4>)
 8003850:	791b      	ldrb	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d11a      	bne.n	80038a0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	88bb      	ldrh	r3, [r7, #4]
 800386e:	08db      	lsrs	r3, r3, #3
 8003870:	b298      	uxth	r0, r3
 8003872:	4603      	mov	r3, r0
 8003874:	01db      	lsls	r3, r3, #7
 8003876:	4413      	add	r3, r2
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <SSD1306_DrawPixel+0xb8>)
 800387a:	5cd3      	ldrb	r3, [r2, r3]
 800387c:	b25a      	sxtb	r2, r3
 800387e:	88bb      	ldrh	r3, [r7, #4]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	2101      	movs	r1, #1
 8003886:	fa01 f303 	lsl.w	r3, r1, r3
 800388a:	b25b      	sxtb	r3, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	b259      	sxtb	r1, r3
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	4603      	mov	r3, r0
 8003894:	01db      	lsls	r3, r3, #7
 8003896:	4413      	add	r3, r2
 8003898:	b2c9      	uxtb	r1, r1
 800389a:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <SSD1306_DrawPixel+0xb8>)
 800389c:	54d1      	strb	r1, [r2, r3]
 800389e:	e01d      	b.n	80038dc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	88bb      	ldrh	r3, [r7, #4]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	b298      	uxth	r0, r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	01db      	lsls	r3, r3, #7
 80038ac:	4413      	add	r3, r2
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <SSD1306_DrawPixel+0xb8>)
 80038b0:	5cd3      	ldrb	r3, [r2, r3]
 80038b2:	b25a      	sxtb	r2, r3
 80038b4:	88bb      	ldrh	r3, [r7, #4]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	b25b      	sxtb	r3, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	4013      	ands	r3, r2
 80038c8:	b259      	sxtb	r1, r3
 80038ca:	88fa      	ldrh	r2, [r7, #6]
 80038cc:	4603      	mov	r3, r0
 80038ce:	01db      	lsls	r3, r3, #7
 80038d0:	4413      	add	r3, r2
 80038d2:	b2c9      	uxtb	r1, r1
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <SSD1306_DrawPixel+0xb8>)
 80038d6:	54d1      	strb	r1, [r2, r3]
 80038d8:	e000      	b.n	80038dc <SSD1306_DrawPixel+0xac>
		return;
 80038da:	bf00      	nop
	}
}
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	20000750 	.word	0x20000750
 80038e8:	20000350 	.word	0x20000350

080038ec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	460a      	mov	r2, r1
 80038f6:	80fb      	strh	r3, [r7, #6]
 80038f8:	4613      	mov	r3, r2
 80038fa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80038fc:	4a05      	ldr	r2, [pc, #20]	; (8003914 <SSD1306_GotoXY+0x28>)
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <SSD1306_GotoXY+0x28>)
 8003904:	88bb      	ldrh	r3, [r7, #4]
 8003906:	8053      	strh	r3, [r2, #2]
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000750 	.word	0x20000750

08003918 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
 8003924:	4613      	mov	r3, r2
 8003926:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003928:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <SSD1306_Putc+0xfc>)
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	4413      	add	r3, r2
	if (
 8003934:	2b7f      	cmp	r3, #127	; 0x7f
 8003936:	dc07      	bgt.n	8003948 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <SSD1306_Putc+0xfc>)
 800393a:	885b      	ldrh	r3, [r3, #2]
 800393c:	461a      	mov	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003944:	2b3f      	cmp	r3, #63	; 0x3f
 8003946:	dd01      	ble.n	800394c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003948:	2300      	movs	r3, #0
 800394a:	e05e      	b.n	8003a0a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e04b      	b.n	80039ea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	3b20      	subs	r3, #32
 800395a:	6839      	ldr	r1, [r7, #0]
 800395c:	7849      	ldrb	r1, [r1, #1]
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4619      	mov	r1, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	440b      	add	r3, r1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e030      	b.n	80039d8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d010      	beq.n	80039a8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003986:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <SSD1306_Putc+0xfc>)
 8003988:	881a      	ldrh	r2, [r3, #0]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	b29b      	uxth	r3, r3
 800398e:	4413      	add	r3, r2
 8003990:	b298      	uxth	r0, r3
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <SSD1306_Putc+0xfc>)
 8003994:	885a      	ldrh	r2, [r3, #2]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	b29b      	uxth	r3, r3
 800399a:	4413      	add	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	79ba      	ldrb	r2, [r7, #6]
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7ff ff45 	bl	8003830 <SSD1306_DrawPixel>
 80039a6:	e014      	b.n	80039d2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <SSD1306_Putc+0xfc>)
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	b298      	uxth	r0, r3
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <SSD1306_Putc+0xfc>)
 80039b6:	885a      	ldrh	r2, [r3, #2]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4413      	add	r3, r2
 80039be:	b299      	uxth	r1, r3
 80039c0:	79bb      	ldrb	r3, [r7, #6]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	f7ff ff2f 	bl	8003830 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3301      	adds	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d3c8      	bcc.n	8003976 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	3301      	adds	r3, #1
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	785b      	ldrb	r3, [r3, #1]
 80039ee:	461a      	mov	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d3ad      	bcc.n	8003952 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <SSD1306_Putc+0xfc>)
 80039f8:	881a      	ldrh	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <SSD1306_Putc+0xfc>)
 8003a06:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003a08:	79fb      	ldrb	r3, [r7, #7]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000750 	.word	0x20000750

08003a18 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003a26:	e012      	b.n	8003a4e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	79fa      	ldrb	r2, [r7, #7]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff71 	bl	8003918 <SSD1306_Putc>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d002      	beq.n	8003a48 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	e008      	b.n	8003a5a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e8      	bne.n	8003a28 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	781b      	ldrb	r3, [r3, #0]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <ssd1306_I2C_Init+0x24>)
 8003a6c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003a6e:	e002      	b.n	8003a76 <ssd1306_I2C_Init+0x12>
		p--;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	00055730 	.word	0x00055730

08003a8c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003a8c:	b5b0      	push	{r4, r5, r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	603a      	str	r2, [r7, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	71bb      	strb	r3, [r7, #6]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80bb      	strh	r3, [r7, #4]
 8003aa2:	466b      	mov	r3, sp
 8003aa4:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8003aa6:	88bb      	ldrh	r3, [r7, #4]
 8003aa8:	1c5c      	adds	r4, r3, #1
 8003aaa:	1e63      	subs	r3, r4, #1
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	4623      	mov	r3, r4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f04f 0100 	mov.w	r1, #0
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	00cb      	lsls	r3, r1, #3
 8003ac0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ac4:	00c2      	lsls	r2, r0, #3
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	00cb      	lsls	r3, r1, #3
 8003ad8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003adc:	00c2      	lsls	r2, r0, #3
 8003ade:	4623      	mov	r3, r4
 8003ae0:	3307      	adds	r3, #7
 8003ae2:	08db      	lsrs	r3, r3, #3
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	ebad 0d03 	sub.w	sp, sp, r3
 8003aea:	ab02      	add	r3, sp, #8
 8003aec:	3300      	adds	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	79ba      	ldrb	r2, [r7, #6]
 8003af4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8003af6:	2301      	movs	r3, #1
 8003af8:	75fb      	strb	r3, [r7, #23]
 8003afa:	e00a      	b.n	8003b12 <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	441a      	add	r2, r3
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	7811      	ldrb	r1, [r2, #0]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	88ba      	ldrh	r2, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d2ef      	bcs.n	8003afc <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	b299      	uxth	r1, r3
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	88bb      	ldrh	r3, [r7, #4]
 8003b24:	200a      	movs	r0, #10
 8003b26:	9000      	str	r0, [sp, #0]
 8003b28:	4803      	ldr	r0, [pc, #12]	; (8003b38 <ssd1306_I2C_WriteMulti+0xac>)
 8003b2a:	f005 fc2b 	bl	8009384 <HAL_I2C_Master_Transmit>
 8003b2e:	46ad      	mov	sp, r5
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bdb0      	pop	{r4, r5, r7, pc}
 8003b38:	20000904 	.word	0x20000904

08003b3c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
 8003b46:	460b      	mov	r3, r1
 8003b48:	71bb      	strb	r3, [r7, #6]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003b4e:	79bb      	ldrb	r3, [r7, #6]
 8003b50:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003b52:	797b      	ldrb	r3, [r7, #5]
 8003b54:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	b299      	uxth	r1, r3
 8003b5a:	f107 020c 	add.w	r2, r7, #12
 8003b5e:	230a      	movs	r3, #10
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2302      	movs	r3, #2
 8003b64:	4803      	ldr	r0, [pc, #12]	; (8003b74 <ssd1306_I2C_Write+0x38>)
 8003b66:	f005 fc0d 	bl	8009384 <HAL_I2C_Master_Transmit>
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000904 	.word	0x20000904

08003b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_MspInit+0x5c>)
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <HAL_MspInit+0x5c>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	6193      	str	r3, [r2, #24]
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_MspInit+0x5c>)
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <HAL_MspInit+0x5c>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <HAL_MspInit+0x5c>)
 8003b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba0:	61d3      	str	r3, [r2, #28]
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_MspInit+0x5c>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_MspInit+0x60>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <HAL_MspInit+0x60>)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40010000 	.word	0x40010000

08003bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003be0:	e7fe      	b.n	8003be0 <NMI_Handler+0x4>

08003be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be6:	e7fe      	b.n	8003be6 <HardFault_Handler+0x4>

08003be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bec:	e7fe      	b.n	8003bec <MemManage_Handler+0x4>

08003bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <BusFault_Handler+0x4>

08003bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <UsageFault_Handler+0x4>

08003bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bc80      	pop	{r7}
 8003c10:	4770      	bx	lr

08003c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr

08003c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c22:	f003 f87f 	bl	8006d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <DMA1_Channel1_IRQHandler+0x10>)
 8003c32:	f004 fe33 	bl	800889c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	200007c0 	.word	0x200007c0

08003c40 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003c44:	4802      	ldr	r0, [pc, #8]	; (8003c50 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003c46:	f004 f91a 	bl	8007e7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000820 	.word	0x20000820
 8003c54:	00000000 	.word	0x00000000

08003c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c58:	b5b0      	push	{r4, r5, r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c5c:	48be      	ldr	r0, [pc, #760]	; (8003f58 <TIM2_IRQHandler+0x300>)
 8003c5e:	f007 fe97 	bl	800b990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	hitung_suhu++;
 8003c62:	4bbe      	ldr	r3, [pc, #760]	; (8003f5c <TIM2_IRQHandler+0x304>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	3301      	adds	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	4bbc      	ldr	r3, [pc, #752]	; (8003f5c <TIM2_IRQHandler+0x304>)
 8003c6c:	801a      	strh	r2, [r3, #0]
	test_tim2++;
 8003c6e:	4bbc      	ldr	r3, [pc, #752]	; (8003f60 <TIM2_IRQHandler+0x308>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4aba      	ldr	r2, [pc, #744]	; (8003f60 <TIM2_IRQHandler+0x308>)
 8003c76:	6013      	str	r3, [r2, #0]

	//Moving Average
	sumI=sumI-i_arrdata[i];		//menghapus sample data pertama/data lama
 8003c78:	4bba      	ldr	r3, [pc, #744]	; (8003f64 <TIM2_IRQHandler+0x30c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4aba      	ldr	r2, [pc, #744]	; (8003f68 <TIM2_IRQHandler+0x310>)
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	49ba      	ldr	r1, [pc, #744]	; (8003f6c <TIM2_IRQHandler+0x314>)
 8003c82:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	4ab6      	ldr	r2, [pc, #728]	; (8003f64 <TIM2_IRQHandler+0x30c>)
 8003c8a:	6013      	str	r3, [r2, #0]
	i_arrdata[i]=adc_value[4];	//save nilai ADC dari variable DMA
 8003c8c:	4bb6      	ldr	r3, [pc, #728]	; (8003f68 <TIM2_IRQHandler+0x310>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4ab7      	ldr	r2, [pc, #732]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003c92:	8911      	ldrh	r1, [r2, #8]
 8003c94:	4ab5      	ldr	r2, [pc, #724]	; (8003f6c <TIM2_IRQHandler+0x314>)
 8003c96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sumI=sumI+i_arrdata[i];		//menambahkan sample data paling baru
 8003c9a:	4bb3      	ldr	r3, [pc, #716]	; (8003f68 <TIM2_IRQHandler+0x310>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4ab3      	ldr	r2, [pc, #716]	; (8003f6c <TIM2_IRQHandler+0x314>)
 8003ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4baf      	ldr	r3, [pc, #700]	; (8003f64 <TIM2_IRQHandler+0x30c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	4aad      	ldr	r2, [pc, #692]	; (8003f64 <TIM2_IRQHandler+0x30c>)
 8003cae:	6013      	str	r3, [r2, #0]
	i_datadigi=sumI/maxdata;	//menghitung rata-rata
 8003cb0:	4bac      	ldr	r3, [pc, #688]	; (8003f64 <TIM2_IRQHandler+0x30c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4aaf      	ldr	r2, [pc, #700]	; (8003f74 <TIM2_IRQHandler+0x31c>)
 8003cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8003cba:	1192      	asrs	r2, r2, #6
 8003cbc:	17db      	asrs	r3, r3, #31
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fd f877 	bl	8000db4 <__aeabi_i2f>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4aab      	ldr	r2, [pc, #684]	; (8003f78 <TIM2_IRQHandler+0x320>)
 8003cca:	6013      	str	r3, [r2, #0]
	//  sum_datadigi_suhu3+=adc_value[3];
	//  sum_datadigi_suhu5+=adc_value[5];
	//  sum_datadigi_suhu6+=adc_value[6];
	// *************PROSES Konversi dari DATA ADC ke Data Real *******************************/////

	VBATT = sum_voltage;
 8003ccc:	4bab      	ldr	r3, [pc, #684]	; (8003f7c <TIM2_IRQHandler+0x324>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4aab      	ldr	r2, [pc, #684]	; (8003f80 <TIM2_IRQHandler+0x328>)
 8003cd2:	6013      	str	r3, [r2, #0]
	if(VBATT<0) VBATT=-1;
 8003cd4:	4baa      	ldr	r3, [pc, #680]	; (8003f80 <TIM2_IRQHandler+0x328>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fd fa5b 	bl	8001198 <__aeabi_fcmplt>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <TIM2_IRQHandler+0x96>
 8003ce8:	4ba5      	ldr	r3, [pc, #660]	; (8003f80 <TIM2_IRQHandler+0x328>)
 8003cea:	4aa6      	ldr	r2, [pc, #664]	; (8003f84 <TIM2_IRQHandler+0x32c>)
 8003cec:	601a      	str	r2, [r3, #0]
		IBATT = 0.062151574718308*i_datadigi - 121.796885042846 - OFFSET_SENSOR_ARUS; // Modul B fix
		IBATT_for_offset_cal= 0.062151574718308*i_datadigi - 121.796885042846;
	}

	else if (UNIQUE_Code == 0x00A22) {
		IBATT = 0.0635607965300084*i_datadigi - 126.923575896323 - OFFSET_SENSOR_ARUS; // Modul B fix
 8003cee:	4ba2      	ldr	r3, [pc, #648]	; (8003f78 <TIM2_IRQHandler+0x320>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fc04 	bl	8000500 <__aeabi_f2d>
 8003cf8:	a38f      	add	r3, pc, #572	; (adr r3, 8003f38 <TIM2_IRQHandler+0x2e0>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fc57 	bl	80005b0 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	a38d      	add	r3, pc, #564	; (adr r3, 8003f40 <TIM2_IRQHandler+0x2e8>)
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f7fc fa96 	bl	8000240 <__aeabi_dsub>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4614      	mov	r4, r2
 8003d1a:	461d      	mov	r5, r3
 8003d1c:	4b9a      	ldr	r3, [pc, #616]	; (8003f88 <TIM2_IRQHandler+0x330>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fc fbed 	bl	8000500 <__aeabi_f2d>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	f7fc fa87 	bl	8000240 <__aeabi_dsub>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	f7fc ff31 	bl	8000ba0 <__aeabi_d2f>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a92      	ldr	r2, [pc, #584]	; (8003f8c <TIM2_IRQHandler+0x334>)
 8003d42:	6013      	str	r3, [r2, #0]
		IBATT_for_offset_cal= 0.0635607965300084*i_datadigi - 126.923575896323;
 8003d44:	4b8c      	ldr	r3, [pc, #560]	; (8003f78 <TIM2_IRQHandler+0x320>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc fbd9 	bl	8000500 <__aeabi_f2d>
 8003d4e:	a37a      	add	r3, pc, #488	; (adr r3, 8003f38 <TIM2_IRQHandler+0x2e0>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fc2c 	bl	80005b0 <__aeabi_dmul>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	a377      	add	r3, pc, #476	; (adr r3, 8003f40 <TIM2_IRQHandler+0x2e8>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fa6b 	bl	8000240 <__aeabi_dsub>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	f7fc ff15 	bl	8000ba0 <__aeabi_d2f>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4a85      	ldr	r2, [pc, #532]	; (8003f90 <TIM2_IRQHandler+0x338>)
 8003d7a:	6013      	str	r3, [r2, #0]
	}
	IBATT = 0;
 8003d7c:	4b83      	ldr	r3, [pc, #524]	; (8003f8c <TIM2_IRQHandler+0x334>)
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

	if(hitung_suhu >= interval_hitungsuhu) {
 8003d84:	4b75      	ldr	r3, [pc, #468]	; (8003f5c <TIM2_IRQHandler+0x304>)
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	2bc7      	cmp	r3, #199	; 0xc7
 8003d8a:	f240 81cd 	bls.w	8004128 <TIM2_IRQHandler+0x4d0>

		Res_T1  = adc_value[0]*10000/(3900-adc_value[0]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8003d8e:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f242 7310 	movw	r3, #10000	; 0x2710
 8003d98:	fb03 f202 	mul.w	r2, r3, r2
 8003d9c:	4b74      	ldr	r3, [pc, #464]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003da4:	330c      	adds	r3, #12
 8003da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd f802 	bl	8000db4 <__aeabi_i2f>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a78      	ldr	r2, [pc, #480]	; (8003f94 <TIM2_IRQHandler+0x33c>)
 8003db4:	6013      	str	r3, [r2, #0]
		Suhu_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003db6:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <TIM2_IRQHandler+0x33c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fba0 	bl	8000500 <__aeabi_f2d>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f00a fa3e 	bl	800e248 <log>
 8003dcc:	a35e      	add	r3, pc, #376	; (adr r3, 8003f48 <TIM2_IRQHandler+0x2f0>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fbed 	bl	80005b0 <__aeabi_dmul>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	a35c      	add	r3, pc, #368	; (adr r3, 8003f50 <TIM2_IRQHandler+0x2f8>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fa2e 	bl	8000244 <__adddf3>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fc fed6 	bl	8000ba0 <__aeabi_d2f>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4a68      	ldr	r2, [pc, #416]	; (8003f98 <TIM2_IRQHandler+0x340>)
 8003df8:	6013      	str	r3, [r2, #0]

		Res_T2  = adc_value[1]*10000/(3900-adc_value[1]);
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003dfc:	885b      	ldrh	r3, [r3, #2]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e04:	fb03 f202 	mul.w	r2, r3, r2
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003e0a:	885b      	ldrh	r3, [r3, #2]
 8003e0c:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003e10:	330c      	adds	r3, #12
 8003e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fc ffcc 	bl	8000db4 <__aeabi_i2f>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4a5f      	ldr	r2, [pc, #380]	; (8003f9c <TIM2_IRQHandler+0x344>)
 8003e20:	6013      	str	r3, [r2, #0]
		Suhu_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003e22:	4b5e      	ldr	r3, [pc, #376]	; (8003f9c <TIM2_IRQHandler+0x344>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fb6a 	bl	8000500 <__aeabi_f2d>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	460b      	mov	r3, r1
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	f00a fa08 	bl	800e248 <log>
 8003e38:	a343      	add	r3, pc, #268	; (adr r3, 8003f48 <TIM2_IRQHandler+0x2f0>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7fc fbb7 	bl	80005b0 <__aeabi_dmul>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	a341      	add	r3, pc, #260	; (adr r3, 8003f50 <TIM2_IRQHandler+0x2f8>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc f9f8 	bl	8000244 <__adddf3>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	f7fc fea0 	bl	8000ba0 <__aeabi_d2f>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4a4f      	ldr	r2, [pc, #316]	; (8003fa0 <TIM2_IRQHandler+0x348>)
 8003e64:	6013      	str	r3, [r2, #0]

		Res_T3  = adc_value[5]*10000/(3900-adc_value[5]);
 8003e66:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003e68:	895b      	ldrh	r3, [r3, #10]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e70:	fb03 f202 	mul.w	r2, r3, r2
 8003e74:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003e76:	895b      	ldrh	r3, [r3, #10]
 8003e78:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc ff96 	bl	8000db4 <__aeabi_i2f>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4a46      	ldr	r2, [pc, #280]	; (8003fa4 <TIM2_IRQHandler+0x34c>)
 8003e8c:	6013      	str	r3, [r2, #0]
		Suhu_T3 = -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003e8e:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <TIM2_IRQHandler+0x34c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb34 	bl	8000500 <__aeabi_f2d>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f00a f9d2 	bl	800e248 <log>
 8003ea4:	a328      	add	r3, pc, #160	; (adr r3, 8003f48 <TIM2_IRQHandler+0x2f0>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	f7fc fb81 	bl	80005b0 <__aeabi_dmul>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	a326      	add	r3, pc, #152	; (adr r3, 8003f50 <TIM2_IRQHandler+0x2f8>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f7fc f9c2 	bl	8000244 <__adddf3>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	f7fc fe6a 	bl	8000ba0 <__aeabi_d2f>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4a36      	ldr	r2, [pc, #216]	; (8003fa8 <TIM2_IRQHandler+0x350>)
 8003ed0:	6013      	str	r3, [r2, #0]

		Res_T4  = adc_value[6]*10000/(3900-adc_value[6]);
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003ed4:	899b      	ldrh	r3, [r3, #12]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f242 7310 	movw	r3, #10000	; 0x2710
 8003edc:	fb03 f202 	mul.w	r2, r3, r2
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <TIM2_IRQHandler+0x318>)
 8003ee2:	899b      	ldrh	r3, [r3, #12]
 8003ee4:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003ee8:	330c      	adds	r3, #12
 8003eea:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc ff60 	bl	8000db4 <__aeabi_i2f>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <TIM2_IRQHandler+0x354>)
 8003ef8:	6013      	str	r3, [r2, #0]
		Suhu_T4 = -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003efa:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <TIM2_IRQHandler+0x354>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc fafe 	bl	8000500 <__aeabi_f2d>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f00a f99c 	bl	800e248 <log>
 8003f10:	a30d      	add	r3, pc, #52	; (adr r3, 8003f48 <TIM2_IRQHandler+0x2f0>)
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	f7fc fb4b 	bl	80005b0 <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	a30b      	add	r3, pc, #44	; (adr r3, 8003f50 <TIM2_IRQHandler+0x2f8>)
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f7fc f98c 	bl	8000244 <__adddf3>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4610      	mov	r0, r2
 8003f32:	4619      	mov	r1, r3
 8003f34:	e03c      	b.n	8003fb0 <TIM2_IRQHandler+0x358>
 8003f36:	bf00      	nop
 8003f38:	366772dc 	.word	0x366772dc
 8003f3c:	3fb04585 	.word	0x3fb04585
 8003f40:	de138532 	.word	0xde138532
 8003f44:	405fbb1b 	.word	0x405fbb1b
 8003f48:	cccccccd 	.word	0xcccccccd
 8003f4c:	c0380ccc 	.word	0xc0380ccc
 8003f50:	b851eb85 	.word	0xb851eb85
 8003f54:	406ecd1e 	.word	0x406ecd1e
 8003f58:	20000cc0 	.word	0x20000cc0
 8003f5c:	20000c64 	.word	0x20000c64
 8003f60:	2000030c 	.word	0x2000030c
 8003f64:	20000c60 	.word	0x20000c60
 8003f68:	20000c48 	.word	0x20000c48
 8003f6c:	20000a9c 	.word	0x20000a9c
 8003f70:	2000026c 	.word	0x2000026c
 8003f74:	51eb851f 	.word	0x51eb851f
 8003f78:	2000027c 	.word	0x2000027c
 8003f7c:	200009e8 	.word	0x200009e8
 8003f80:	20000280 	.word	0x20000280
 8003f84:	bf800000 	.word	0xbf800000
 8003f88:	20000290 	.word	0x20000290
 8003f8c:	20000284 	.word	0x20000284
 8003f90:	20000294 	.word	0x20000294
 8003f94:	20000298 	.word	0x20000298
 8003f98:	200002b0 	.word	0x200002b0
 8003f9c:	2000029c 	.word	0x2000029c
 8003fa0:	200002b4 	.word	0x200002b4
 8003fa4:	200002a0 	.word	0x200002a0
 8003fa8:	200002b8 	.word	0x200002b8
 8003fac:	200002a4 	.word	0x200002a4
 8003fb0:	f7fc fdf6 	bl	8000ba0 <__aeabi_d2f>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	4a66      	ldr	r2, [pc, #408]	; (8004150 <TIM2_IRQHandler+0x4f8>)
 8003fb8:	6013      	str	r3, [r2, #0]

		Res_T5 = adc_value[2]*10000/(3900-adc_value[2]);
 8003fba:	4b66      	ldr	r3, [pc, #408]	; (8004154 <TIM2_IRQHandler+0x4fc>)
 8003fbc:	889b      	ldrh	r3, [r3, #4]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8003fc4:	fb03 f202 	mul.w	r2, r3, r2
 8003fc8:	4b62      	ldr	r3, [pc, #392]	; (8004154 <TIM2_IRQHandler+0x4fc>)
 8003fca:	889b      	ldrh	r3, [r3, #4]
 8003fcc:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc feec 	bl	8000db4 <__aeabi_i2f>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	4a5e      	ldr	r2, [pc, #376]	; (8004158 <TIM2_IRQHandler+0x500>)
 8003fe0:	6013      	str	r3, [r2, #0]
		MOS_Temp = -24.05*log(Res_T5) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	; (8004158 <TIM2_IRQHandler+0x500>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc fa8a 	bl	8000500 <__aeabi_f2d>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f00a f928 	bl	800e248 <log>
 8003ff8:	a351      	add	r3, pc, #324	; (adr r3, 8004140 <TIM2_IRQHandler+0x4e8>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fad7 	bl	80005b0 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	a34f      	add	r3, pc, #316	; (adr r3, 8004148 <TIM2_IRQHandler+0x4f0>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f7fc f918 	bl	8000244 <__adddf3>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	f7fc fdc0 	bl	8000ba0 <__aeabi_d2f>
 8004020:	4603      	mov	r3, r0
 8004022:	4a4e      	ldr	r2, [pc, #312]	; (800415c <TIM2_IRQHandler+0x504>)
 8004024:	6013      	str	r3, [r2, #0]

		Res_T6 = adc_value[3]*10000/(3900-adc_value[3]);
 8004026:	4b4b      	ldr	r3, [pc, #300]	; (8004154 <TIM2_IRQHandler+0x4fc>)
 8004028:	88db      	ldrh	r3, [r3, #6]
 800402a:	461a      	mov	r2, r3
 800402c:	f242 7310 	movw	r3, #10000	; 0x2710
 8004030:	fb03 f202 	mul.w	r2, r3, r2
 8004034:	4b47      	ldr	r3, [pc, #284]	; (8004154 <TIM2_IRQHandler+0x4fc>)
 8004036:	88db      	ldrh	r3, [r3, #6]
 8004038:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 800403c:	330c      	adds	r3, #12
 800403e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc feb6 	bl	8000db4 <__aeabi_i2f>
 8004048:	4603      	mov	r3, r0
 800404a:	4a45      	ldr	r2, [pc, #276]	; (8004160 <TIM2_IRQHandler+0x508>)
 800404c:	6013      	str	r3, [r2, #0]
		CurrentSensor_Temp = -24.05*log(Res_T6) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800404e:	4b44      	ldr	r3, [pc, #272]	; (8004160 <TIM2_IRQHandler+0x508>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc fa54 	bl	8000500 <__aeabi_f2d>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	f00a f8f2 	bl	800e248 <log>
 8004064:	a336      	add	r3, pc, #216	; (adr r3, 8004140 <TIM2_IRQHandler+0x4e8>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc faa1 	bl	80005b0 <__aeabi_dmul>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	a334      	add	r3, pc, #208	; (adr r3, 8004148 <TIM2_IRQHandler+0x4f0>)
 8004078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407c:	f7fc f8e2 	bl	8000244 <__adddf3>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	f7fc fd8a 	bl	8000ba0 <__aeabi_d2f>
 800408c:	4603      	mov	r3, r0
 800408e:	4a35      	ldr	r2, [pc, #212]	; (8004164 <TIM2_IRQHandler+0x50c>)
 8004090:	6013      	str	r3, [r2, #0]

		if(Suhu_T1>=130) Suhu_T1 = 130;
 8004092:	4b35      	ldr	r3, [pc, #212]	; (8004168 <TIM2_IRQHandler+0x510>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4935      	ldr	r1, [pc, #212]	; (800416c <TIM2_IRQHandler+0x514>)
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd f891 	bl	80011c0 <__aeabi_fcmpge>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <TIM2_IRQHandler+0x452>
 80040a4:	4b30      	ldr	r3, [pc, #192]	; (8004168 <TIM2_IRQHandler+0x510>)
 80040a6:	4a31      	ldr	r2, [pc, #196]	; (800416c <TIM2_IRQHandler+0x514>)
 80040a8:	601a      	str	r2, [r3, #0]
		if(Suhu_T2>=130) Suhu_T2 = 130;
 80040aa:	4b31      	ldr	r3, [pc, #196]	; (8004170 <TIM2_IRQHandler+0x518>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	492f      	ldr	r1, [pc, #188]	; (800416c <TIM2_IRQHandler+0x514>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fd f885 	bl	80011c0 <__aeabi_fcmpge>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <TIM2_IRQHandler+0x46a>
 80040bc:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <TIM2_IRQHandler+0x518>)
 80040be:	4a2b      	ldr	r2, [pc, #172]	; (800416c <TIM2_IRQHandler+0x514>)
 80040c0:	601a      	str	r2, [r3, #0]
		if(Suhu_T3>=130) Suhu_T3 = 130;
 80040c2:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <TIM2_IRQHandler+0x51c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4929      	ldr	r1, [pc, #164]	; (800416c <TIM2_IRQHandler+0x514>)
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd f879 	bl	80011c0 <__aeabi_fcmpge>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <TIM2_IRQHandler+0x482>
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <TIM2_IRQHandler+0x51c>)
 80040d6:	4a25      	ldr	r2, [pc, #148]	; (800416c <TIM2_IRQHandler+0x514>)
 80040d8:	601a      	str	r2, [r3, #0]
		if(Suhu_T4>=130) Suhu_T4 = 130;
 80040da:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <TIM2_IRQHandler+0x4f8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4923      	ldr	r1, [pc, #140]	; (800416c <TIM2_IRQHandler+0x514>)
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fd f86d 	bl	80011c0 <__aeabi_fcmpge>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <TIM2_IRQHandler+0x49a>
 80040ec:	4b18      	ldr	r3, [pc, #96]	; (8004150 <TIM2_IRQHandler+0x4f8>)
 80040ee:	4a1f      	ldr	r2, [pc, #124]	; (800416c <TIM2_IRQHandler+0x514>)
 80040f0:	601a      	str	r2, [r3, #0]
		if(MOS_Temp>=130) MOS_Temp = 130;
 80040f2:	4b1a      	ldr	r3, [pc, #104]	; (800415c <TIM2_IRQHandler+0x504>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	491d      	ldr	r1, [pc, #116]	; (800416c <TIM2_IRQHandler+0x514>)
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd f861 	bl	80011c0 <__aeabi_fcmpge>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <TIM2_IRQHandler+0x4b2>
 8004104:	4b15      	ldr	r3, [pc, #84]	; (800415c <TIM2_IRQHandler+0x504>)
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <TIM2_IRQHandler+0x514>)
 8004108:	601a      	str	r2, [r3, #0]
		if(CurrentSensor_Temp>=130) CurrentSensor_Temp = 130;
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <TIM2_IRQHandler+0x50c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4917      	ldr	r1, [pc, #92]	; (800416c <TIM2_IRQHandler+0x514>)
 8004110:	4618      	mov	r0, r3
 8004112:	f7fd f855 	bl	80011c0 <__aeabi_fcmpge>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <TIM2_IRQHandler+0x4ca>
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <TIM2_IRQHandler+0x50c>)
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <TIM2_IRQHandler+0x514>)
 8004120:	601a      	str	r2, [r3, #0]

		hitung_suhu=0;
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <TIM2_IRQHandler+0x520>)
 8004124:	2200      	movs	r2, #0
 8004126:	801a      	strh	r2, [r3, #0]
	}

	if(BATT_Start_Up==1)
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <TIM2_IRQHandler+0x524>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 80d0 	bne.w	80042d2 <TIM2_IRQHandler+0x67a>
	{
		if(BATT_State == STATE_DISCHARGE){
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <TIM2_IRQHandler+0x528>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d124      	bne.n	8004184 <TIM2_IRQHandler+0x52c>
			Batt_Protection_when_discharge();
 800413a:	f000 fa29 	bl	8004590 <Batt_Protection_when_discharge>
 800413e:	e027      	b.n	8004190 <TIM2_IRQHandler+0x538>
 8004140:	cccccccd 	.word	0xcccccccd
 8004144:	c0380ccc 	.word	0xc0380ccc
 8004148:	b851eb85 	.word	0xb851eb85
 800414c:	406ecd1e 	.word	0x406ecd1e
 8004150:	200002bc 	.word	0x200002bc
 8004154:	2000026c 	.word	0x2000026c
 8004158:	200002a8 	.word	0x200002a8
 800415c:	200002c0 	.word	0x200002c0
 8004160:	200002ac 	.word	0x200002ac
 8004164:	200002c4 	.word	0x200002c4
 8004168:	200002b0 	.word	0x200002b0
 800416c:	43020000 	.word	0x43020000
 8004170:	200002b4 	.word	0x200002b4
 8004174:	200002b8 	.word	0x200002b8
 8004178:	20000c64 	.word	0x20000c64
 800417c:	20000349 	.word	0x20000349
 8004180:	200009e4 	.word	0x200009e4
		}
		else if(BATT_State == STATE_CHARGE){
 8004184:	4ba6      	ldr	r3, [pc, #664]	; (8004420 <TIM2_IRQHandler+0x7c8>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <TIM2_IRQHandler+0x538>
			Batt_Protection_when_charge();
 800418c:	f001 f8a0 	bl	80052d0 <Batt_Protection_when_charge>
		}
		if(BATT_State == STATE_FULL_CHARGE_DISCHARGE){
 8004190:	4ba3      	ldr	r3, [pc, #652]	; (8004420 <TIM2_IRQHandler+0x7c8>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d101      	bne.n	800419c <TIM2_IRQHandler+0x544>
			Batt_Protection_when_chargedischarge();
 8004198:	f001 fd86 	bl	8005ca8 <Batt_Protection_when_chargedischarge>
		}

		//********************* Clearing protection status *****************************////
		// ---> Clearing UnderVoltage
		if(((Clear_Trip_undervoltage==1)||(VBATT>54))&&flag_trip_undervoltage==ON){
 800419c:	4ba1      	ldr	r3, [pc, #644]	; (8004424 <TIM2_IRQHandler+0x7cc>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d008      	beq.n	80041b6 <TIM2_IRQHandler+0x55e>
 80041a4:	4ba0      	ldr	r3, [pc, #640]	; (8004428 <TIM2_IRQHandler+0x7d0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	49a0      	ldr	r1, [pc, #640]	; (800442c <TIM2_IRQHandler+0x7d4>)
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd f812 	bl	80011d4 <__aeabi_fcmpgt>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <TIM2_IRQHandler+0x572>
 80041b6:	4b9e      	ldr	r3, [pc, #632]	; (8004430 <TIM2_IRQHandler+0x7d8>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d105      	bne.n	80041ca <TIM2_IRQHandler+0x572>
			flag_trip_undervoltage=OFF;
 80041be:	4b9c      	ldr	r3, [pc, #624]	; (8004430 <TIM2_IRQHandler+0x7d8>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=0;
 80041c4:	4b97      	ldr	r3, [pc, #604]	; (8004424 <TIM2_IRQHandler+0x7cc>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCurrent Discharge
		if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1){
 80041ca:	4b9a      	ldr	r3, [pc, #616]	; (8004434 <TIM2_IRQHandler+0x7dc>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d109      	bne.n	80041e6 <TIM2_IRQHandler+0x58e>
 80041d2:	4b99      	ldr	r3, [pc, #612]	; (8004438 <TIM2_IRQHandler+0x7e0>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <TIM2_IRQHandler+0x58e>
			flag_trip_overcurrentdischarge=OFF;
 80041da:	4b96      	ldr	r3, [pc, #600]	; (8004434 <TIM2_IRQHandler+0x7dc>)
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=0;
 80041e0:	4b95      	ldr	r3, [pc, #596]	; (8004438 <TIM2_IRQHandler+0x7e0>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverTemperature
		if(flag_trip_overtemperature==ON && (Suhu_T1<40)&&(Suhu_T2<50)&&(Suhu_T3<40)&&(Suhu_T4<50)){
 80041e6:	4b95      	ldr	r3, [pc, #596]	; (800443c <TIM2_IRQHandler+0x7e4>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d126      	bne.n	800423c <TIM2_IRQHandler+0x5e4>
 80041ee:	4b94      	ldr	r3, [pc, #592]	; (8004440 <TIM2_IRQHandler+0x7e8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4994      	ldr	r1, [pc, #592]	; (8004444 <TIM2_IRQHandler+0x7ec>)
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc ffcf 	bl	8001198 <__aeabi_fcmplt>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01d      	beq.n	800423c <TIM2_IRQHandler+0x5e4>
 8004200:	4b91      	ldr	r3, [pc, #580]	; (8004448 <TIM2_IRQHandler+0x7f0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4991      	ldr	r1, [pc, #580]	; (800444c <TIM2_IRQHandler+0x7f4>)
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc ffc6 	bl	8001198 <__aeabi_fcmplt>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d014      	beq.n	800423c <TIM2_IRQHandler+0x5e4>
 8004212:	4b8f      	ldr	r3, [pc, #572]	; (8004450 <TIM2_IRQHandler+0x7f8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	498b      	ldr	r1, [pc, #556]	; (8004444 <TIM2_IRQHandler+0x7ec>)
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc ffbd 	bl	8001198 <__aeabi_fcmplt>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <TIM2_IRQHandler+0x5e4>
 8004224:	4b8b      	ldr	r3, [pc, #556]	; (8004454 <TIM2_IRQHandler+0x7fc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4988      	ldr	r1, [pc, #544]	; (800444c <TIM2_IRQHandler+0x7f4>)
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc ffb4 	bl	8001198 <__aeabi_fcmplt>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <TIM2_IRQHandler+0x5e4>
			flag_trip_overtemperature=OFF;
 8004236:	4b81      	ldr	r3, [pc, #516]	; (800443c <TIM2_IRQHandler+0x7e4>)
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing UnderTemperature
		if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20)){
 800423c:	4b86      	ldr	r3, [pc, #536]	; (8004458 <TIM2_IRQHandler+0x800>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d126      	bne.n	8004292 <TIM2_IRQHandler+0x63a>
 8004244:	4b7e      	ldr	r3, [pc, #504]	; (8004440 <TIM2_IRQHandler+0x7e8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4984      	ldr	r1, [pc, #528]	; (800445c <TIM2_IRQHandler+0x804>)
 800424a:	4618      	mov	r0, r3
 800424c:	f7fc ffc2 	bl	80011d4 <__aeabi_fcmpgt>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01d      	beq.n	8004292 <TIM2_IRQHandler+0x63a>
 8004256:	4b7c      	ldr	r3, [pc, #496]	; (8004448 <TIM2_IRQHandler+0x7f0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4980      	ldr	r1, [pc, #512]	; (800445c <TIM2_IRQHandler+0x804>)
 800425c:	4618      	mov	r0, r3
 800425e:	f7fc ffb9 	bl	80011d4 <__aeabi_fcmpgt>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d014      	beq.n	8004292 <TIM2_IRQHandler+0x63a>
 8004268:	4b79      	ldr	r3, [pc, #484]	; (8004450 <TIM2_IRQHandler+0x7f8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	497b      	ldr	r1, [pc, #492]	; (800445c <TIM2_IRQHandler+0x804>)
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc ffb0 	bl	80011d4 <__aeabi_fcmpgt>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <TIM2_IRQHandler+0x63a>
 800427a:	4b76      	ldr	r3, [pc, #472]	; (8004454 <TIM2_IRQHandler+0x7fc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4977      	ldr	r1, [pc, #476]	; (800445c <TIM2_IRQHandler+0x804>)
 8004280:	4618      	mov	r0, r3
 8004282:	f7fc ffa7 	bl	80011d4 <__aeabi_fcmpgt>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <TIM2_IRQHandler+0x63a>
			flag_trip_undertemperature=OFF;
 800428c:	4b72      	ldr	r3, [pc, #456]	; (8004458 <TIM2_IRQHandler+0x800>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverDischarge
		if(flag_trip_SOCOverDischarge==ON && Pack_SOC>20){
 8004292:	4b73      	ldr	r3, [pc, #460]	; (8004460 <TIM2_IRQHandler+0x808>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d10b      	bne.n	80042b2 <TIM2_IRQHandler+0x65a>
 800429a:	4b72      	ldr	r3, [pc, #456]	; (8004464 <TIM2_IRQHandler+0x80c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	496f      	ldr	r1, [pc, #444]	; (800445c <TIM2_IRQHandler+0x804>)
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fc ff97 	bl	80011d4 <__aeabi_fcmpgt>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <TIM2_IRQHandler+0x65a>
			flag_trip_SOCOverDischarge=OFF;
 80042ac:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <TIM2_IRQHandler+0x808>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCharge
		if(flag_trip_SOCOverCharge==ON && Pack_SOC<70){
 80042b2:	4b6d      	ldr	r3, [pc, #436]	; (8004468 <TIM2_IRQHandler+0x810>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10b      	bne.n	80042d2 <TIM2_IRQHandler+0x67a>
 80042ba:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <TIM2_IRQHandler+0x80c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	496b      	ldr	r1, [pc, #428]	; (800446c <TIM2_IRQHandler+0x814>)
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fc ff69 	bl	8001198 <__aeabi_fcmplt>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <TIM2_IRQHandler+0x67a>
			flag_trip_SOCOverCharge=OFF;
 80042cc:	4b66      	ldr	r3, [pc, #408]	; (8004468 <TIM2_IRQHandler+0x810>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
		}
	}

	i++;
 80042d2:	4b67      	ldr	r3, [pc, #412]	; (8004470 <TIM2_IRQHandler+0x818>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3301      	adds	r3, #1
 80042d8:	4a65      	ldr	r2, [pc, #404]	; (8004470 <TIM2_IRQHandler+0x818>)
 80042da:	6013      	str	r3, [r2, #0]
	i=i%maxdata;
 80042dc:	4b64      	ldr	r3, [pc, #400]	; (8004470 <TIM2_IRQHandler+0x818>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b64      	ldr	r3, [pc, #400]	; (8004474 <TIM2_IRQHandler+0x81c>)
 80042e2:	fb83 1302 	smull	r1, r3, r3, r2
 80042e6:	1199      	asrs	r1, r3, #6
 80042e8:	17d3      	asrs	r3, r2, #31
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	21c8      	movs	r1, #200	; 0xc8
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	4a5e      	ldr	r2, [pc, #376]	; (8004470 <TIM2_IRQHandler+0x818>)
 80042f6:	6013      	str	r3, [r2, #0]

	//////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
	if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 80042f8:	4b49      	ldr	r3, [pc, #292]	; (8004420 <TIM2_IRQHandler+0x7c8>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d008      	beq.n	8004312 <TIM2_IRQHandler+0x6ba>
 8004300:	4b47      	ldr	r3, [pc, #284]	; (8004420 <TIM2_IRQHandler+0x7c8>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d004      	beq.n	8004312 <TIM2_IRQHandler+0x6ba>
 8004308:	4b45      	ldr	r3, [pc, #276]	; (8004420 <TIM2_IRQHandler+0x7c8>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b03      	cmp	r3, #3
 800430e:	f040 80e2 	bne.w	80044d6 <TIM2_IRQHandler+0x87e>
	{
		time_soc++;
 8004312:	4b59      	ldr	r3, [pc, #356]	; (8004478 <TIM2_IRQHandler+0x820>)
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	4b57      	ldr	r3, [pc, #348]	; (8004478 <TIM2_IRQHandler+0x820>)
 800431c:	801a      	strh	r2, [r3, #0]
		sum_current+=IBATT;
 800431e:	4b57      	ldr	r3, [pc, #348]	; (800447c <TIM2_IRQHandler+0x824>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a57      	ldr	r2, [pc, #348]	; (8004480 <TIM2_IRQHandler+0x828>)
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc fc8f 	bl	8000c4c <__addsf3>
 800432e:	4603      	mov	r3, r0
 8004330:	461a      	mov	r2, r3
 8004332:	4b52      	ldr	r3, [pc, #328]	; (800447c <TIM2_IRQHandler+0x824>)
 8004334:	601a      	str	r2, [r3, #0]
		if(time_soc>99)
 8004336:	4b50      	ldr	r3, [pc, #320]	; (8004478 <TIM2_IRQHandler+0x820>)
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	2b63      	cmp	r3, #99	; 0x63
 800433c:	f240 80cb 	bls.w	80044d6 <TIM2_IRQHandler+0x87e>
		{
			AH_Consumption = (-1*sum_current/100*(1.0/3600.0))/Pack_Cap*100-(4e-5); //Konsumsi System 4e-5
 8004340:	4b4e      	ldr	r3, [pc, #312]	; (800447c <TIM2_IRQHandler+0x824>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004348:	494e      	ldr	r1, [pc, #312]	; (8004484 <TIM2_IRQHandler+0x82c>)
 800434a:	4618      	mov	r0, r3
 800434c:	f7fc fe3a 	bl	8000fc4 <__aeabi_fdiv>
 8004350:	4603      	mov	r3, r0
 8004352:	4618      	mov	r0, r3
 8004354:	f7fc f8d4 	bl	8000500 <__aeabi_f2d>
 8004358:	a32d      	add	r3, pc, #180	; (adr r3, 8004410 <TIM2_IRQHandler+0x7b8>)
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f7fc f927 	bl	80005b0 <__aeabi_dmul>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4614      	mov	r4, r2
 8004368:	461d      	mov	r5, r3
 800436a:	4b47      	ldr	r3, [pc, #284]	; (8004488 <TIM2_IRQHandler+0x830>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc f8c6 	bl	8000500 <__aeabi_f2d>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4620      	mov	r0, r4
 800437a:	4629      	mov	r1, r5
 800437c:	f7fc fa42 	bl	8000804 <__aeabi_ddiv>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	4b3f      	ldr	r3, [pc, #252]	; (800448c <TIM2_IRQHandler+0x834>)
 800438e:	f7fc f90f 	bl	80005b0 <__aeabi_dmul>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4610      	mov	r0, r2
 8004398:	4619      	mov	r1, r3
 800439a:	a31f      	add	r3, pc, #124	; (adr r3, 8004418 <TIM2_IRQHandler+0x7c0>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff4e 	bl	8000240 <__aeabi_dsub>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7fc fbf8 	bl	8000ba0 <__aeabi_d2f>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a37      	ldr	r2, [pc, #220]	; (8004490 <TIM2_IRQHandler+0x838>)
 80043b4:	6013      	str	r3, [r2, #0]
			Pack_SOC=Pack_SOC+AH_Consumption;
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <TIM2_IRQHandler+0x80c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a35      	ldr	r2, [pc, #212]	; (8004490 <TIM2_IRQHandler+0x838>)
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	4611      	mov	r1, r2
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fc fc43 	bl	8000c4c <__addsf3>
 80043c6:	4603      	mov	r3, r0
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <TIM2_IRQHandler+0x80c>)
 80043cc:	601a      	str	r2, [r3, #0]
			time_soc=0;
 80043ce:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <TIM2_IRQHandler+0x820>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	801a      	strh	r2, [r3, #0]
			sum_current=0;
 80043d4:	4b29      	ldr	r3, [pc, #164]	; (800447c <TIM2_IRQHandler+0x824>)
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

			grad=(100-0)/(batas_atas-batas_bawah);
 80043dc:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <TIM2_IRQHandler+0x83c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2d      	ldr	r2, [pc, #180]	; (8004498 <TIM2_IRQHandler+0x840>)
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc fc2e 	bl	8000c48 <__aeabi_fsub>
 80043ec:	4603      	mov	r3, r0
 80043ee:	4619      	mov	r1, r3
 80043f0:	4824      	ldr	r0, [pc, #144]	; (8004484 <TIM2_IRQHandler+0x82c>)
 80043f2:	f7fc fde7 	bl	8000fc4 <__aeabi_fdiv>
 80043f6:	4603      	mov	r3, r0
 80043f8:	461a      	mov	r2, r3
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <TIM2_IRQHandler+0x844>)
 80043fc:	601a      	str	r2, [r3, #0]
			constanta=grad*batas_bawah*(-1);
 80043fe:	4b27      	ldr	r3, [pc, #156]	; (800449c <TIM2_IRQHandler+0x844>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a25      	ldr	r2, [pc, #148]	; (8004498 <TIM2_IRQHandler+0x840>)
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	4611      	mov	r1, r2
 8004408:	4618      	mov	r0, r3
 800440a:	e049      	b.n	80044a0 <TIM2_IRQHandler+0x848>
 800440c:	f3af 8000 	nop.w
 8004410:	789abcdf 	.word	0x789abcdf
 8004414:	3f323456 	.word	0x3f323456
 8004418:	88e368f1 	.word	0x88e368f1
 800441c:	3f04f8b5 	.word	0x3f04f8b5
 8004420:	200009e4 	.word	0x200009e4
 8004424:	2000031b 	.word	0x2000031b
 8004428:	20000280 	.word	0x20000280
 800442c:	42580000 	.word	0x42580000
 8004430:	20000314 	.word	0x20000314
 8004434:	20000316 	.word	0x20000316
 8004438:	2000031c 	.word	0x2000031c
 800443c:	20000310 	.word	0x20000310
 8004440:	200002b0 	.word	0x200002b0
 8004444:	42200000 	.word	0x42200000
 8004448:	200002b4 	.word	0x200002b4
 800444c:	42480000 	.word	0x42480000
 8004450:	200002b8 	.word	0x200002b8
 8004454:	200002bc 	.word	0x200002bc
 8004458:	20000311 	.word	0x20000311
 800445c:	41a00000 	.word	0x41a00000
 8004460:	20000312 	.word	0x20000312
 8004464:	20000320 	.word	0x20000320
 8004468:	20000313 	.word	0x20000313
 800446c:	428c0000 	.word	0x428c0000
 8004470:	20000c48 	.word	0x20000c48
 8004474:	51eb851f 	.word	0x51eb851f
 8004478:	20000c3c 	.word	0x20000c3c
 800447c:	20000c74 	.word	0x20000c74
 8004480:	20000284 	.word	0x20000284
 8004484:	42c80000 	.word	0x42c80000
 8004488:	20000044 	.word	0x20000044
 800448c:	40590000 	.word	0x40590000
 8004490:	20000c2c 	.word	0x20000c2c
 8004494:	200002ec 	.word	0x200002ec
 8004498:	200002f0 	.word	0x200002f0
 800449c:	200002f8 	.word	0x200002f8
 80044a0:	f7fc fcdc 	bl	8000e5c <__aeabi_fmul>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044aa:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <TIM2_IRQHandler+0x884>)
 80044ac:	6013      	str	r3, [r2, #0]
			SOC_manipulasi=grad*Pack_SOC+constanta;
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <TIM2_IRQHandler+0x888>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a0c      	ldr	r2, [pc, #48]	; (80044e4 <TIM2_IRQHandler+0x88c>)
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fc fccf 	bl	8000e5c <__aeabi_fmul>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <TIM2_IRQHandler+0x884>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7fc fbbf 	bl	8000c4c <__addsf3>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <TIM2_IRQHandler+0x890>)
 80044d4:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bdb0      	pop	{r4, r5, r7, pc}
 80044da:	bf00      	nop
 80044dc:	200002fc 	.word	0x200002fc
 80044e0:	200002f8 	.word	0x200002f8
 80044e4:	20000320 	.word	0x20000320
 80044e8:	200002f4 	.word	0x200002f4

080044ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044f0:	481d      	ldr	r0, [pc, #116]	; (8004568 <TIM3_IRQHandler+0x7c>)
 80044f2:	f007 fa4d 	bl	800b990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	testtim3++;
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <TIM3_IRQHandler+0x80>)
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	4b1b      	ldr	r3, [pc, #108]	; (800456c <TIM3_IRQHandler+0x80>)
 8004500:	801a      	strh	r2, [r3, #0]
	if(flag_start_shutdown==1){
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <TIM3_IRQHandler+0x84>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d12b      	bne.n	8004562 <TIM3_IRQHandler+0x76>
		if(Tick_33ms == 1) CANTX_BattParameter();
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <TIM3_IRQHandler+0x88>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <TIM3_IRQHandler+0x2c>
 8004512:	f7fd fd4d 	bl	8001fb0 <CANTX_BattParameter>
 8004516:	e00f      	b.n	8004538 <TIM3_IRQHandler+0x4c>
		else if(Tick_33ms == 2) CANTX_BattProtection();
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <TIM3_IRQHandler+0x88>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d102      	bne.n	8004526 <TIM3_IRQHandler+0x3a>
 8004520:	f7fd fe90 	bl	8002244 <CANTX_BattProtection>
 8004524:	e008      	b.n	8004538 <TIM3_IRQHandler+0x4c>
		else if(Tick_33ms == 3) {
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <TIM3_IRQHandler+0x88>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d104      	bne.n	8004538 <TIM3_IRQHandler+0x4c>
			CANTX_ReportToCharger();
 800452e:	f7fd ffcf 	bl	80024d0 <CANTX_ReportToCharger>
			Tick_33ms = 0;
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <TIM3_IRQHandler+0x88>)
 8004534:	2200      	movs	r2, #0
 8004536:	701a      	strb	r2, [r3, #0]
		}
		if(Tick_BattId > 30) {
 8004538:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <TIM3_IRQHandler+0x8c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b1e      	cmp	r3, #30
 800453e:	d904      	bls.n	800454a <TIM3_IRQHandler+0x5e>
			CANTX_BattId();
 8004540:	f7fe f83e 	bl	80025c0 <CANTX_BattId>
			Tick_BattId = 0;
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <TIM3_IRQHandler+0x8c>)
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
		}
		Tick_33ms++;
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <TIM3_IRQHandler+0x88>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <TIM3_IRQHandler+0x88>)
 8004554:	701a      	strb	r2, [r3, #0]
		Tick_BattId++;
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <TIM3_IRQHandler+0x8c>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	3301      	adds	r3, #1
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <TIM3_IRQHandler+0x8c>)
 8004560:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000c78 	.word	0x20000c78
 800456c:	20000c66 	.word	0x20000c66
 8004570:	200002c8 	.word	0x200002c8
 8004574:	20000c5a 	.word	0x20000c5a
 8004578:	20000c54 	.word	0x20000c54

0800457c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004580:	4802      	ldr	r0, [pc, #8]	; (800458c <SPI1_IRQHandler+0x10>)
 8004582:	f006 ff9d 	bl	800b4c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000a44 	.word	0x20000a44

08004590 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void) {
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT/0.5)) {
 8004594:	4b84      	ldr	r3, [pc, #528]	; (80047a8 <Batt_Protection_when_discharge+0x218>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fb ffb1 	bl	8000500 <__aeabi_f2d>
 800459e:	4604      	mov	r4, r0
 80045a0:	460d      	mov	r5, r1
 80045a2:	4b82      	ldr	r3, [pc, #520]	; (80047ac <Batt_Protection_when_discharge+0x21c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fb ffaa 	bl	8000500 <__aeabi_f2d>
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <Batt_Protection_when_discharge+0x220>)
 80045b2:	f7fc f927 	bl	8000804 <__aeabi_ddiv>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4620      	mov	r0, r4
 80045bc:	4629      	mov	r1, r5
 80045be:	f7fc fa87 	bl	8000ad0 <__aeabi_dcmpgt>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <Batt_Protection_when_discharge+0x68>
		Isc = IBATT;
 80045c8:	4b77      	ldr	r3, [pc, #476]	; (80047a8 <Batt_Protection_when_discharge+0x218>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a79      	ldr	r2, [pc, #484]	; (80047b4 <Batt_Protection_when_discharge+0x224>)
 80045ce:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 80045d0:	4b76      	ldr	r3, [pc, #472]	; (80047ac <Batt_Protection_when_discharge+0x21c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a78      	ldr	r2, [pc, #480]	; (80047b8 <Batt_Protection_when_discharge+0x228>)
 80045d6:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 80045d8:	4b78      	ldr	r3, [pc, #480]	; (80047bc <Batt_Protection_when_discharge+0x22c>)
 80045da:	220c      	movs	r2, #12
 80045dc:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 80045de:	f7fd f8dd 	bl	800179c <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 80045e2:	4b77      	ldr	r3, [pc, #476]	; (80047c0 <Batt_Protection_when_discharge+0x230>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80045e8:	2200      	movs	r2, #0
 80045ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045ee:	4875      	ldr	r0, [pc, #468]	; (80047c4 <Batt_Protection_when_discharge+0x234>)
 80045f0:	f004 fd52 	bl	8009098 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 80045f4:	f000 be58 	b.w	80052a8 <Batt_Protection_when_discharge+0xd18>
	else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 80045f8:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <Batt_Protection_when_discharge+0x21c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a72      	ldr	r2, [pc, #456]	; (80047c8 <Batt_Protection_when_discharge+0x238>)
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4611      	mov	r1, r2
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fdc8 	bl	8001198 <__aeabi_fcmplt>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80f2 	beq.w	80047f4 <Batt_Protection_when_discharge+0x264>
 8004610:	4b6e      	ldr	r3, [pc, #440]	; (80047cc <Batt_Protection_when_discharge+0x23c>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f040 80ed 	bne.w	80047f4 <Batt_Protection_when_discharge+0x264>
		fault_code=1;
 800461a:	4b68      	ldr	r3, [pc, #416]	; (80047bc <Batt_Protection_when_discharge+0x22c>)
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8004620:	4b6b      	ldr	r3, [pc, #428]	; (80047d0 <Batt_Protection_when_discharge+0x240>)
 8004622:	681c      	ldr	r4, [r3, #0]
 8004624:	4b61      	ldr	r3, [pc, #388]	; (80047ac <Batt_Protection_when_discharge+0x21c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a67      	ldr	r2, [pc, #412]	; (80047c8 <Batt_Protection_when_discharge+0x238>)
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	4611      	mov	r1, r2
 800462e:	4618      	mov	r0, r3
 8004630:	f7fc fcc8 	bl	8000fc4 <__aeabi_fdiv>
 8004634:	4603      	mov	r3, r0
 8004636:	4619      	mov	r1, r3
 8004638:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800463c:	f7fc fb04 	bl	8000c48 <__aeabi_fsub>
 8004640:	4603      	mov	r3, r0
 8004642:	4619      	mov	r1, r3
 8004644:	4620      	mov	r0, r4
 8004646:	f7fc fcbd 	bl	8000fc4 <__aeabi_fdiv>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <Batt_Protection_when_discharge+0x244>)
 8004650:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8004652:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <Batt_Protection_when_discharge+0x248>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fb ff52 	bl	8000500 <__aeabi_f2d>
 800465c:	a350      	add	r3, pc, #320	; (adr r3, 80047a0 <Batt_Protection_when_discharge+0x210>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	f7fb fdef 	bl	8000244 <__adddf3>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	f7fc fa97 	bl	8000ba0 <__aeabi_d2f>
 8004672:	4603      	mov	r3, r0
 8004674:	4a58      	ldr	r2, [pc, #352]	; (80047d8 <Batt_Protection_when_discharge+0x248>)
 8004676:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8004678:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <Batt_Protection_when_discharge+0x248>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a55      	ldr	r2, [pc, #340]	; (80047d4 <Batt_Protection_when_discharge+0x244>)
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fda6 	bl	80011d4 <__aeabi_fcmpgt>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d012      	beq.n	80046b4 <Batt_Protection_when_discharge+0x124>
 800468e:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <Batt_Protection_when_discharge+0x23c>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10e      	bne.n	80046b4 <Batt_Protection_when_discharge+0x124>
			Batt_Open_Mode();
 8004696:	f7fd f881 	bl	800179c <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 800469a:	4b4e      	ldr	r3, [pc, #312]	; (80047d4 <Batt_Protection_when_discharge+0x244>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a4e      	ldr	r2, [pc, #312]	; (80047d8 <Batt_Protection_when_discharge+0x248>)
 80046a0:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 80046a2:	4b4a      	ldr	r3, [pc, #296]	; (80047cc <Batt_Protection_when_discharge+0x23c>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 80046a8:	2200      	movs	r2, #0
 80046aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046ae:	484b      	ldr	r0, [pc, #300]	; (80047dc <Batt_Protection_when_discharge+0x24c>)
 80046b0:	f004 fcf2 	bl	8009098 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 80046b4:	4b45      	ldr	r3, [pc, #276]	; (80047cc <Batt_Protection_when_discharge+0x23c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f040 85f2 	bne.w	80052a2 <Batt_Protection_when_discharge+0xd12>
			if(T_Under_trip-T_trip_cycle>15) {
 80046be:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <Batt_Protection_when_discharge+0x244>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a45      	ldr	r2, [pc, #276]	; (80047d8 <Batt_Protection_when_discharge+0x248>)
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fc fabd 	bl	8000c48 <__aeabi_fsub>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4943      	ldr	r1, [pc, #268]	; (80047e0 <Batt_Protection_when_discharge+0x250>)
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fc fd7e 	bl	80011d4 <__aeabi_fcmpgt>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d019      	beq.n	8004712 <Batt_Protection_when_discharge+0x182>
				if((test_tim2%1000)==0) {
 80046de:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <Batt_Protection_when_discharge+0x254>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <Batt_Protection_when_discharge+0x258>)
 80046e4:	fb83 1302 	smull	r1, r3, r3, r2
 80046e8:	1199      	asrs	r1, r3, #6
 80046ea:	17d3      	asrs	r3, r2, #31
 80046ec:	1acb      	subs	r3, r1, r3
 80046ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 85d2 	bne.w	80052a2 <Batt_Protection_when_discharge+0xd12>
					BUZZ_Toggle;
 80046fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004702:	4830      	ldr	r0, [pc, #192]	; (80047c4 <Batt_Protection_when_discharge+0x234>)
 8004704:	f004 fce0 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004708:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <Batt_Protection_when_discharge+0x254>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 800470e:	f000 bdc8 	b.w	80052a2 <Batt_Protection_when_discharge+0xd12>
			else if(T_Under_trip-T_trip_cycle>10) {
 8004712:	4b30      	ldr	r3, [pc, #192]	; (80047d4 <Batt_Protection_when_discharge+0x244>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a30      	ldr	r2, [pc, #192]	; (80047d8 <Batt_Protection_when_discharge+0x248>)
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc fa93 	bl	8000c48 <__aeabi_fsub>
 8004722:	4603      	mov	r3, r0
 8004724:	4931      	ldr	r1, [pc, #196]	; (80047ec <Batt_Protection_when_discharge+0x25c>)
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc fd54 	bl	80011d4 <__aeabi_fcmpgt>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <Batt_Protection_when_discharge+0x1d4>
				if((test_tim2%100)==0) {
 8004732:	4b2c      	ldr	r3, [pc, #176]	; (80047e4 <Batt_Protection_when_discharge+0x254>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <Batt_Protection_when_discharge+0x260>)
 8004738:	fb83 1302 	smull	r1, r3, r3, r2
 800473c:	1159      	asrs	r1, r3, #5
 800473e:	17d3      	asrs	r3, r2, #31
 8004740:	1acb      	subs	r3, r1, r3
 8004742:	2164      	movs	r1, #100	; 0x64
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 85a9 	bne.w	80052a2 <Batt_Protection_when_discharge+0xd12>
					BUZZ_Toggle;
 8004750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004754:	481b      	ldr	r0, [pc, #108]	; (80047c4 <Batt_Protection_when_discharge+0x234>)
 8004756:	f004 fcb7 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800475a:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <Batt_Protection_when_discharge+0x254>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]
		if(flag_trip_undervoltage==OFF) {
 8004760:	f000 bd9f 	b.w	80052a2 <Batt_Protection_when_discharge+0xd12>
			else if(T_Under_trip-T_trip_cycle>1) {
 8004764:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <Batt_Protection_when_discharge+0x244>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <Batt_Protection_when_discharge+0x248>)
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fa6a 	bl	8000c48 <__aeabi_fsub>
 8004774:	4603      	mov	r3, r0
 8004776:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800477a:	4618      	mov	r0, r3
 800477c:	f7fc fd2a 	bl	80011d4 <__aeabi_fcmpgt>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <Batt_Protection_when_discharge+0x1fa>
		if(flag_trip_undervoltage==OFF) {
 8004786:	f000 bd8c 	b.w	80052a2 <Batt_Protection_when_discharge+0xd12>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800478a:	2201      	movs	r2, #1
 800478c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004790:	480c      	ldr	r0, [pc, #48]	; (80047c4 <Batt_Protection_when_discharge+0x234>)
 8004792:	f004 fc81 	bl	8009098 <HAL_GPIO_WritePin>
		if(flag_trip_undervoltage==OFF) {
 8004796:	f000 bd84 	b.w	80052a2 <Batt_Protection_when_discharge+0xd12>
 800479a:	bf00      	nop
 800479c:	f3af 8000 	nop.w
 80047a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047a4:	3f50624d 	.word	0x3f50624d
 80047a8:	20000284 	.word	0x20000284
 80047ac:	20000280 	.word	0x20000280
 80047b0:	3fe00000 	.word	0x3fe00000
 80047b4:	20000288 	.word	0x20000288
 80047b8:	2000028c 	.word	0x2000028c
 80047bc:	20000300 	.word	0x20000300
 80047c0:	20000318 	.word	0x20000318
 80047c4:	40011000 	.word	0x40011000
 80047c8:	2000005c 	.word	0x2000005c
 80047cc:	20000314 	.word	0x20000314
 80047d0:	20000068 	.word	0x20000068
 80047d4:	20000c30 	.word	0x20000c30
 80047d8:	20000c50 	.word	0x20000c50
 80047dc:	40010800 	.word	0x40010800
 80047e0:	41700000 	.word	0x41700000
 80047e4:	2000030c 	.word	0x2000030c
 80047e8:	10624dd3 	.word	0x10624dd3
 80047ec:	41200000 	.word	0x41200000
 80047f0:	51eb851f 	.word	0x51eb851f
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {   //Indikasi terjadi Over Current
 80047f4:	4b94      	ldr	r3, [pc, #592]	; (8004a48 <Batt_Protection_when_discharge+0x4b8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a94      	ldr	r2, [pc, #592]	; (8004a4c <Batt_Protection_when_discharge+0x4bc>)
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fc fa22 	bl	8000c48 <__aeabi_fsub>
 8004804:	4603      	mov	r3, r0
 8004806:	f04f 0100 	mov.w	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f7fc fce2 	bl	80011d4 <__aeabi_fcmpgt>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8138 	beq.w	8004a88 <Batt_Protection_when_discharge+0x4f8>
 8004818:	4b8d      	ldr	r3, [pc, #564]	; (8004a50 <Batt_Protection_when_discharge+0x4c0>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 8133 	bne.w	8004a88 <Batt_Protection_when_discharge+0x4f8>
		fault_code=2;
 8004822:	4b8c      	ldr	r3, [pc, #560]	; (8004a54 <Batt_Protection_when_discharge+0x4c4>)
 8004824:	2202      	movs	r2, #2
 8004826:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=50/(((IBATT/6.9)*(IBATT/6.9))-1);
 8004828:	4b87      	ldr	r3, [pc, #540]	; (8004a48 <Batt_Protection_when_discharge+0x4b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7fb fe67 	bl	8000500 <__aeabi_f2d>
 8004832:	a381      	add	r3, pc, #516	; (adr r3, 8004a38 <Batt_Protection_when_discharge+0x4a8>)
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f7fb ffe4 	bl	8000804 <__aeabi_ddiv>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4614      	mov	r4, r2
 8004842:	461d      	mov	r5, r3
 8004844:	4b80      	ldr	r3, [pc, #512]	; (8004a48 <Batt_Protection_when_discharge+0x4b8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fb fe59 	bl	8000500 <__aeabi_f2d>
 800484e:	a37a      	add	r3, pc, #488	; (adr r3, 8004a38 <Batt_Protection_when_discharge+0x4a8>)
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f7fb ffd6 	bl	8000804 <__aeabi_ddiv>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4620      	mov	r0, r4
 800485e:	4629      	mov	r1, r5
 8004860:	f7fb fea6 	bl	80005b0 <__aeabi_dmul>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	4b79      	ldr	r3, [pc, #484]	; (8004a58 <Batt_Protection_when_discharge+0x4c8>)
 8004872:	f7fb fce5 	bl	8000240 <__aeabi_dsub>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	f04f 0000 	mov.w	r0, #0
 800487e:	4977      	ldr	r1, [pc, #476]	; (8004a5c <Batt_Protection_when_discharge+0x4cc>)
 8004880:	f7fb ffc0 	bl	8000804 <__aeabi_ddiv>
 8004884:	4602      	mov	r2, r0
 8004886:	460b      	mov	r3, r1
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	f7fc f988 	bl	8000ba0 <__aeabi_d2f>
 8004890:	4603      	mov	r3, r0
 8004892:	4a73      	ldr	r2, [pc, #460]	; (8004a60 <Batt_Protection_when_discharge+0x4d0>)
 8004894:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 8004896:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fb fe30 	bl	8000500 <__aeabi_f2d>
 80048a0:	a367      	add	r3, pc, #412	; (adr r3, 8004a40 <Batt_Protection_when_discharge+0x4b0>)
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	f7fb fccd 	bl	8000244 <__adddf3>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	f7fc f975 	bl	8000ba0 <__aeabi_d2f>
 80048b6:	4603      	mov	r3, r0
 80048b8:	4a6a      	ldr	r2, [pc, #424]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 80048ba:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 80048bc:	4b69      	ldr	r3, [pc, #420]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a67      	ldr	r2, [pc, #412]	; (8004a60 <Batt_Protection_when_discharge+0x4d0>)
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fc fc84 	bl	80011d4 <__aeabi_fcmpgt>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d012      	beq.n	80048f8 <Batt_Protection_when_discharge+0x368>
 80048d2:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <Batt_Protection_when_discharge+0x4c0>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <Batt_Protection_when_discharge+0x368>
			Batt_Open_Mode();
 80048da:	f7fc ff5f 	bl	800179c <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 80048de:	4b60      	ldr	r3, [pc, #384]	; (8004a60 <Batt_Protection_when_discharge+0x4d0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a60      	ldr	r2, [pc, #384]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 80048e4:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 80048e6:	4b5a      	ldr	r3, [pc, #360]	; (8004a50 <Batt_Protection_when_discharge+0x4c0>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80048ec:	2200      	movs	r2, #0
 80048ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048f2:	485d      	ldr	r0, [pc, #372]	; (8004a68 <Batt_Protection_when_discharge+0x4d8>)
 80048f4:	f004 fbd0 	bl	8009098 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 80048f8:	4b55      	ldr	r3, [pc, #340]	; (8004a50 <Batt_Protection_when_discharge+0x4c0>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 84d2 	bne.w	80052a6 <Batt_Protection_when_discharge+0xd16>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8004902:	4b57      	ldr	r3, [pc, #348]	; (8004a60 <Batt_Protection_when_discharge+0x4d0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a57      	ldr	r2, [pc, #348]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f7fc f99b 	bl	8000c48 <__aeabi_fsub>
 8004912:	4603      	mov	r3, r0
 8004914:	4955      	ldr	r1, [pc, #340]	; (8004a6c <Batt_Protection_when_discharge+0x4dc>)
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc fc5c 	bl	80011d4 <__aeabi_fcmpgt>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d019      	beq.n	8004956 <Batt_Protection_when_discharge+0x3c6>
				if((test_tim2%1000)==0) {
 8004922:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <Batt_Protection_when_discharge+0x4e0>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <Batt_Protection_when_discharge+0x4e4>)
 8004928:	fb83 1302 	smull	r1, r3, r3, r2
 800492c:	1199      	asrs	r1, r3, #6
 800492e:	17d3      	asrs	r3, r2, #31
 8004930:	1acb      	subs	r3, r1, r3
 8004932:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004936:	fb01 f303 	mul.w	r3, r1, r3
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 84b2 	bne.w	80052a6 <Batt_Protection_when_discharge+0xd16>
					BUZZ_Toggle;
 8004942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004946:	4848      	ldr	r0, [pc, #288]	; (8004a68 <Batt_Protection_when_discharge+0x4d8>)
 8004948:	f004 fbbe 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800494c:	4b48      	ldr	r3, [pc, #288]	; (8004a70 <Batt_Protection_when_discharge+0x4e0>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8004952:	f000 bca8 	b.w	80052a6 <Batt_Protection_when_discharge+0xd16>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10){
 8004956:	4b42      	ldr	r3, [pc, #264]	; (8004a60 <Batt_Protection_when_discharge+0x4d0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a42      	ldr	r2, [pc, #264]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc f971 	bl	8000c48 <__aeabi_fsub>
 8004966:	4603      	mov	r3, r0
 8004968:	4943      	ldr	r1, [pc, #268]	; (8004a78 <Batt_Protection_when_discharge+0x4e8>)
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fc32 	bl	80011d4 <__aeabi_fcmpgt>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d018      	beq.n	80049a8 <Batt_Protection_when_discharge+0x418>
				if((test_tim2%100)==0){
 8004976:	4b3e      	ldr	r3, [pc, #248]	; (8004a70 <Batt_Protection_when_discharge+0x4e0>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b40      	ldr	r3, [pc, #256]	; (8004a7c <Batt_Protection_when_discharge+0x4ec>)
 800497c:	fb83 1302 	smull	r1, r3, r3, r2
 8004980:	1159      	asrs	r1, r3, #5
 8004982:	17d3      	asrs	r3, r2, #31
 8004984:	1acb      	subs	r3, r1, r3
 8004986:	2164      	movs	r1, #100	; 0x64
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 8489 	bne.w	80052a6 <Batt_Protection_when_discharge+0xd16>
					BUZZ_Toggle;
 8004994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004998:	4833      	ldr	r0, [pc, #204]	; (8004a68 <Batt_Protection_when_discharge+0x4d8>)
 800499a:	f004 fb95 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800499e:	4b34      	ldr	r3, [pc, #208]	; (8004a70 <Batt_Protection_when_discharge+0x4e0>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 80049a4:	f000 bc7f 	b.w	80052a6 <Batt_Protection_when_discharge+0xd16>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3){
 80049a8:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <Batt_Protection_when_discharge+0x4d0>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a2d      	ldr	r2, [pc, #180]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fc f948 	bl	8000c48 <__aeabi_fsub>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4931      	ldr	r1, [pc, #196]	; (8004a80 <Batt_Protection_when_discharge+0x4f0>)
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fc fc09 	bl	80011d4 <__aeabi_fcmpgt>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d019      	beq.n	80049fc <Batt_Protection_when_discharge+0x46c>
				if((test_tim2%10)==0){
 80049c8:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <Batt_Protection_when_discharge+0x4e0>)
 80049ca:	6819      	ldr	r1, [r3, #0]
 80049cc:	4b2d      	ldr	r3, [pc, #180]	; (8004a84 <Batt_Protection_when_discharge+0x4f4>)
 80049ce:	fb83 2301 	smull	r2, r3, r3, r1
 80049d2:	109a      	asrs	r2, r3, #2
 80049d4:	17cb      	asrs	r3, r1, #31
 80049d6:	1ad2      	subs	r2, r2, r3
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	1aca      	subs	r2, r1, r3
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	f040 845f 	bne.w	80052a6 <Batt_Protection_when_discharge+0xd16>
					BUZZ_Toggle;
 80049e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049ec:	481e      	ldr	r0, [pc, #120]	; (8004a68 <Batt_Protection_when_discharge+0x4d8>)
 80049ee:	f004 fb6b 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80049f2:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <Batt_Protection_when_discharge+0x4e0>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 80049f8:	f000 bc55 	b.w	80052a6 <Batt_Protection_when_discharge+0xd16>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1){
 80049fc:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <Batt_Protection_when_discharge+0x4d0>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a18      	ldr	r2, [pc, #96]	; (8004a64 <Batt_Protection_when_discharge+0x4d4>)
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	4611      	mov	r1, r2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fc f91e 	bl	8000c48 <__aeabi_fsub>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fc fbde 	bl	80011d4 <__aeabi_fcmpgt>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <Batt_Protection_when_discharge+0x492>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004a1e:	f000 bc42 	b.w	80052a6 <Batt_Protection_when_discharge+0xd16>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8004a22:	2201      	movs	r2, #1
 8004a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a28:	480f      	ldr	r0, [pc, #60]	; (8004a68 <Batt_Protection_when_discharge+0x4d8>)
 8004a2a:	f004 fb35 	bl	8009098 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004a2e:	f000 bc3a 	b.w	80052a6 <Batt_Protection_when_discharge+0xd16>
 8004a32:	bf00      	nop
 8004a34:	f3af 8000 	nop.w
 8004a38:	9999999a 	.word	0x9999999a
 8004a3c:	401b9999 	.word	0x401b9999
 8004a40:	47ae147b 	.word	0x47ae147b
 8004a44:	3f847ae1 	.word	0x3f847ae1
 8004a48:	20000284 	.word	0x20000284
 8004a4c:	20000048 	.word	0x20000048
 8004a50:	20000316 	.word	0x20000316
 8004a54:	20000300 	.word	0x20000300
 8004a58:	3ff00000 	.word	0x3ff00000
 8004a5c:	40490000 	.word	0x40490000
 8004a60:	20000304 	.word	0x20000304
 8004a64:	20000308 	.word	0x20000308
 8004a68:	40011000 	.word	0x40011000
 8004a6c:	41700000 	.word	0x41700000
 8004a70:	2000030c 	.word	0x2000030c
 8004a74:	10624dd3 	.word	0x10624dd3
 8004a78:	41200000 	.word	0x41200000
 8004a7c:	51eb851f 	.word	0x51eb851f
 8004a80:	40400000 	.word	0x40400000
 8004a84:	66666667 	.word	0x66666667
	else if(((Suhu_T1>Temp_Over_Set)||(Suhu_T2>Temp_Over_Set)||(Suhu_T3>Temp_Over_Set)||(Suhu_T4>Temp_Over_Set)) && flag_trip_overtemperature==OFF) {
 8004a88:	4b9a      	ldr	r3, [pc, #616]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a9a      	ldr	r2, [pc, #616]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc fb9e 	bl	80011d4 <__aeabi_fcmpgt>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d121      	bne.n	8004ae2 <Batt_Protection_when_discharge+0x552>
 8004a9e:	4b97      	ldr	r3, [pc, #604]	; (8004cfc <Batt_Protection_when_discharge+0x76c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a95      	ldr	r2, [pc, #596]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004aa4:	6812      	ldr	r2, [r2, #0]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fc fb93 	bl	80011d4 <__aeabi_fcmpgt>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d116      	bne.n	8004ae2 <Batt_Protection_when_discharge+0x552>
 8004ab4:	4b92      	ldr	r3, [pc, #584]	; (8004d00 <Batt_Protection_when_discharge+0x770>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a8f      	ldr	r2, [pc, #572]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc fb88 	bl	80011d4 <__aeabi_fcmpgt>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <Batt_Protection_when_discharge+0x552>
 8004aca:	4b8e      	ldr	r3, [pc, #568]	; (8004d04 <Batt_Protection_when_discharge+0x774>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a8a      	ldr	r2, [pc, #552]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fc fb7d 	bl	80011d4 <__aeabi_fcmpgt>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 811f 	beq.w	8004d20 <Batt_Protection_when_discharge+0x790>
 8004ae2:	4b89      	ldr	r3, [pc, #548]	; (8004d08 <Batt_Protection_when_discharge+0x778>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 811a 	bne.w	8004d20 <Batt_Protection_when_discharge+0x790>
		fault_code=3;
 8004aec:	4b87      	ldr	r3, [pc, #540]	; (8004d0c <Batt_Protection_when_discharge+0x77c>)
 8004aee:	2203      	movs	r2, #3
 8004af0:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8004af2:	4b80      	ldr	r3, [pc, #512]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a80      	ldr	r2, [pc, #512]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	4611      	mov	r1, r2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fc fb69 	bl	80011d4 <__aeabi_fcmpgt>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02a      	beq.n	8004b5e <Batt_Protection_when_discharge+0x5ce>
 8004b08:	4b7b      	ldr	r3, [pc, #492]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fc f89b 	bl	8000c4c <__addsf3>
 8004b16:	4603      	mov	r3, r0
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fc fb4d 	bl	80011c0 <__aeabi_fcmpge>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d018      	beq.n	8004b5e <Batt_Protection_when_discharge+0x5ce>
			if((test_tim2%1000)==0) {
 8004b2c:	4b78      	ldr	r3, [pc, #480]	; (8004d10 <Batt_Protection_when_discharge+0x780>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b78      	ldr	r3, [pc, #480]	; (8004d14 <Batt_Protection_when_discharge+0x784>)
 8004b32:	fb83 1302 	smull	r1, r3, r3, r2
 8004b36:	1199      	asrs	r1, r3, #6
 8004b38:	17d3      	asrs	r3, r2, #31
 8004b3a:	1acb      	subs	r3, r1, r3
 8004b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b40:	fb01 f303 	mul.w	r3, r1, r3
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 80d2 	bne.w	8004cf0 <Batt_Protection_when_discharge+0x760>
				BUZZ_Toggle;
 8004b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b50:	4871      	ldr	r0, [pc, #452]	; (8004d18 <Batt_Protection_when_discharge+0x788>)
 8004b52:	f004 fab9 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004b56:	4b6e      	ldr	r3, [pc, #440]	; (8004d10 <Batt_Protection_when_discharge+0x780>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8004b5c:	e0c8      	b.n	8004cf0 <Batt_Protection_when_discharge+0x760>
		else if(Suhu_T1>Temp_Over_Set+1 && Suhu_T1<=Temp_Over_Set+2){
 8004b5e:	4b66      	ldr	r3, [pc, #408]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fc f870 	bl	8000c4c <__addsf3>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b60      	ldr	r3, [pc, #384]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7fc fb0e 	bl	8001198 <__aeabi_fcmplt>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d02a      	beq.n	8004bd8 <Batt_Protection_when_discharge+0x648>
 8004b82:	4b5d      	ldr	r3, [pc, #372]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fc f85e 	bl	8000c4c <__addsf3>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b57      	ldr	r3, [pc, #348]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fc fb10 	bl	80011c0 <__aeabi_fcmpge>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d018      	beq.n	8004bd8 <Batt_Protection_when_discharge+0x648>
			if((test_tim2%500)==0){
 8004ba6:	4b5a      	ldr	r3, [pc, #360]	; (8004d10 <Batt_Protection_when_discharge+0x780>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b5a      	ldr	r3, [pc, #360]	; (8004d14 <Batt_Protection_when_discharge+0x784>)
 8004bac:	fb83 1302 	smull	r1, r3, r3, r2
 8004bb0:	1159      	asrs	r1, r3, #5
 8004bb2:	17d3      	asrs	r3, r2, #31
 8004bb4:	1acb      	subs	r3, r1, r3
 8004bb6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 8095 	bne.w	8004cf0 <Batt_Protection_when_discharge+0x760>
				BUZZ_Toggle;
 8004bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bca:	4853      	ldr	r0, [pc, #332]	; (8004d18 <Batt_Protection_when_discharge+0x788>)
 8004bcc:	f004 fa7c 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004bd0:	4b4f      	ldr	r3, [pc, #316]	; (8004d10 <Batt_Protection_when_discharge+0x780>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004bd6:	e08b      	b.n	8004cf0 <Batt_Protection_when_discharge+0x760>
		else if(Suhu_T1>Temp_Over_Set+2 && Suhu_T1<=Temp_Over_Set+3){
 8004bd8:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc f833 	bl	8000c4c <__addsf3>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f7fc fad1 	bl	8001198 <__aeabi_fcmplt>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d028      	beq.n	8004c4e <Batt_Protection_when_discharge+0x6be>
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4946      	ldr	r1, [pc, #280]	; (8004d1c <Batt_Protection_when_discharge+0x78c>)
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fc f822 	bl	8000c4c <__addsf3>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	4b39      	ldr	r3, [pc, #228]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7fc fad4 	bl	80011c0 <__aeabi_fcmpge>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <Batt_Protection_when_discharge+0x6be>
			if((test_tim2%500)==0){
 8004c1e:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <Batt_Protection_when_discharge+0x780>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4b3c      	ldr	r3, [pc, #240]	; (8004d14 <Batt_Protection_when_discharge+0x784>)
 8004c24:	fb83 1302 	smull	r1, r3, r3, r2
 8004c28:	1159      	asrs	r1, r3, #5
 8004c2a:	17d3      	asrs	r3, r2, #31
 8004c2c:	1acb      	subs	r3, r1, r3
 8004c2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004c32:	fb01 f303 	mul.w	r3, r1, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d159      	bne.n	8004cf0 <Batt_Protection_when_discharge+0x760>
				BUZZ_Toggle;
 8004c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c40:	4835      	ldr	r0, [pc, #212]	; (8004d18 <Batt_Protection_when_discharge+0x788>)
 8004c42:	f004 fa41 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004c46:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <Batt_Protection_when_discharge+0x780>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004c4c:	e050      	b.n	8004cf0 <Batt_Protection_when_discharge+0x760>
		else if(Suhu_T1>Temp_Over_Set+3||Suhu_T2>Temp_Over_Set+3||Suhu_T3>Temp_Over_Set+3||Suhu_T4>Temp_Over_Set+3){
 8004c4e:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4932      	ldr	r1, [pc, #200]	; (8004d1c <Batt_Protection_when_discharge+0x78c>)
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fb fff9 	bl	8000c4c <__addsf3>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <Batt_Protection_when_discharge+0x764>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fc fa97 	bl	8001198 <__aeabi_fcmplt>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d133      	bne.n	8004cd8 <Batt_Protection_when_discharge+0x748>
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4929      	ldr	r1, [pc, #164]	; (8004d1c <Batt_Protection_when_discharge+0x78c>)
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb ffe8 	bl	8000c4c <__addsf3>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <Batt_Protection_when_discharge+0x76c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f7fc fa86 	bl	8001198 <__aeabi_fcmplt>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d122      	bne.n	8004cd8 <Batt_Protection_when_discharge+0x748>
 8004c92:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4921      	ldr	r1, [pc, #132]	; (8004d1c <Batt_Protection_when_discharge+0x78c>)
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fb ffd7 	bl	8000c4c <__addsf3>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <Batt_Protection_when_discharge+0x770>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7fc fa75 	bl	8001198 <__aeabi_fcmplt>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d111      	bne.n	8004cd8 <Batt_Protection_when_discharge+0x748>
 8004cb4:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <Batt_Protection_when_discharge+0x768>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4918      	ldr	r1, [pc, #96]	; (8004d1c <Batt_Protection_when_discharge+0x78c>)
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb ffc6 	bl	8000c4c <__addsf3>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <Batt_Protection_when_discharge+0x774>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f7fc fa64 	bl	8001198 <__aeabi_fcmplt>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d100      	bne.n	8004cd8 <Batt_Protection_when_discharge+0x748>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8004cd6:	e2e7      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
			Batt_Open_Mode();
 8004cd8:	f7fc fd60 	bl	800179c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8004cdc:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <Batt_Protection_when_discharge+0x778>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ce8:	480b      	ldr	r0, [pc, #44]	; (8004d18 <Batt_Protection_when_discharge+0x788>)
 8004cea:	f004 f9d5 	bl	8009098 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8004cee:	e2db      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
 8004cf0:	e2da      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
 8004cf2:	bf00      	nop
 8004cf4:	200002b0 	.word	0x200002b0
 8004cf8:	20000050 	.word	0x20000050
 8004cfc:	200002b4 	.word	0x200002b4
 8004d00:	200002b8 	.word	0x200002b8
 8004d04:	200002bc 	.word	0x200002bc
 8004d08:	20000310 	.word	0x20000310
 8004d0c:	20000300 	.word	0x20000300
 8004d10:	2000030c 	.word	0x2000030c
 8004d14:	10624dd3 	.word	0x10624dd3
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40400000 	.word	0x40400000
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8004d20:	4b96      	ldr	r3, [pc, #600]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a96      	ldr	r2, [pc, #600]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fb ff8c 	bl	8000c48 <__aeabi_fsub>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4994      	ldr	r1, [pc, #592]	; (8004f84 <Batt_Protection_when_discharge+0x9f4>)
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7fc fa39 	bl	80011ac <__aeabi_fcmple>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d130      	bne.n	8004da2 <Batt_Protection_when_discharge+0x812>
 8004d40:	4b91      	ldr	r3, [pc, #580]	; (8004f88 <Batt_Protection_when_discharge+0x9f8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a8e      	ldr	r2, [pc, #568]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004d46:	6812      	ldr	r2, [r2, #0]
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb ff7c 	bl	8000c48 <__aeabi_fsub>
 8004d50:	4603      	mov	r3, r0
 8004d52:	498c      	ldr	r1, [pc, #560]	; (8004f84 <Batt_Protection_when_discharge+0x9f4>)
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fc fa29 	bl	80011ac <__aeabi_fcmple>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d120      	bne.n	8004da2 <Batt_Protection_when_discharge+0x812>
 8004d60:	4b8a      	ldr	r3, [pc, #552]	; (8004f8c <Batt_Protection_when_discharge+0x9fc>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a86      	ldr	r2, [pc, #536]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb ff6c 	bl	8000c48 <__aeabi_fsub>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4984      	ldr	r1, [pc, #528]	; (8004f84 <Batt_Protection_when_discharge+0x9f4>)
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fc fa19 	bl	80011ac <__aeabi_fcmple>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d110      	bne.n	8004da2 <Batt_Protection_when_discharge+0x812>
 8004d80:	4b83      	ldr	r3, [pc, #524]	; (8004f90 <Batt_Protection_when_discharge+0xa00>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a7e      	ldr	r2, [pc, #504]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fb ff5c 	bl	8000c48 <__aeabi_fsub>
 8004d90:	4603      	mov	r3, r0
 8004d92:	497c      	ldr	r1, [pc, #496]	; (8004f84 <Batt_Protection_when_discharge+0x9f4>)
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fc fa09 	bl	80011ac <__aeabi_fcmple>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8105 	beq.w	8004fac <Batt_Protection_when_discharge+0xa1c>
 8004da2:	4b7c      	ldr	r3, [pc, #496]	; (8004f94 <Batt_Protection_when_discharge+0xa04>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f040 8100 	bne.w	8004fac <Batt_Protection_when_discharge+0xa1c>
		fault_code=4;
 8004dac:	4b7a      	ldr	r3, [pc, #488]	; (8004f98 <Batt_Protection_when_discharge+0xa08>)
 8004dae:	2204      	movs	r2, #4
 8004db0:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004db2:	4b73      	ldr	r3, [pc, #460]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4973      	ldr	r1, [pc, #460]	; (8004f84 <Batt_Protection_when_discharge+0x9f4>)
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fb ff47 	bl	8000c4c <__addsf3>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b6e      	ldr	r3, [pc, #440]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7fc f9f9 	bl	80011c0 <__aeabi_fcmpge>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d029      	beq.n	8004e28 <Batt_Protection_when_discharge+0x898>
 8004dd4:	4b6a      	ldr	r3, [pc, #424]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4970      	ldr	r1, [pc, #448]	; (8004f9c <Batt_Protection_when_discharge+0xa0c>)
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fb ff36 	bl	8000c4c <__addsf3>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	4b65      	ldr	r3, [pc, #404]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7fc f9d4 	bl	8001198 <__aeabi_fcmplt>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <Batt_Protection_when_discharge+0x898>
			if((test_tim2%1000)==0){
 8004df6:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <Batt_Protection_when_discharge+0xa10>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	; (8004fa4 <Batt_Protection_when_discharge+0xa14>)
 8004dfc:	fb83 1302 	smull	r1, r3, r3, r2
 8004e00:	1199      	asrs	r1, r3, #6
 8004e02:	17d3      	asrs	r3, r2, #31
 8004e04:	1acb      	subs	r3, r1, r3
 8004e06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e0a:	fb01 f303 	mul.w	r3, r1, r3
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f040 80b2 	bne.w	8004f7a <Batt_Protection_when_discharge+0x9ea>
				BUZZ_Toggle;
 8004e16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e1a:	4863      	ldr	r0, [pc, #396]	; (8004fa8 <Batt_Protection_when_discharge+0xa18>)
 8004e1c:	f004 f954 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004e20:	4b5f      	ldr	r3, [pc, #380]	; (8004fa0 <Batt_Protection_when_discharge+0xa10>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8004e26:	e0a8      	b.n	8004f7a <Batt_Protection_when_discharge+0x9ea>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8004e28:	4b55      	ldr	r3, [pc, #340]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	495b      	ldr	r1, [pc, #364]	; (8004f9c <Batt_Protection_when_discharge+0xa0c>)
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb ff0c 	bl	8000c4c <__addsf3>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b50      	ldr	r3, [pc, #320]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7fc f9be 	bl	80011c0 <__aeabi_fcmpge>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d029      	beq.n	8004e9e <Batt_Protection_when_discharge+0x90e>
 8004e4a:	4b4d      	ldr	r3, [pc, #308]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb fefa 	bl	8000c4c <__addsf3>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	4b47      	ldr	r3, [pc, #284]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7fc f998 	bl	8001198 <__aeabi_fcmplt>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d017      	beq.n	8004e9e <Batt_Protection_when_discharge+0x90e>
			if((test_tim2%500)==0){
 8004e6e:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <Batt_Protection_when_discharge+0xa10>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <Batt_Protection_when_discharge+0xa14>)
 8004e74:	fb83 1302 	smull	r1, r3, r3, r2
 8004e78:	1159      	asrs	r1, r3, #5
 8004e7a:	17d3      	asrs	r3, r2, #31
 8004e7c:	1acb      	subs	r3, r1, r3
 8004e7e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d176      	bne.n	8004f7a <Batt_Protection_when_discharge+0x9ea>
				BUZZ_Toggle;
 8004e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e90:	4845      	ldr	r0, [pc, #276]	; (8004fa8 <Batt_Protection_when_discharge+0xa18>)
 8004e92:	f004 f919 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004e96:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <Batt_Protection_when_discharge+0xa10>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004e9c:	e06d      	b.n	8004f7a <Batt_Protection_when_discharge+0x9ea>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 8004e9e:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb fed0 	bl	8000c4c <__addsf3>
 8004eac:	4603      	mov	r3, r0
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4b32      	ldr	r3, [pc, #200]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	f7fc f98c 	bl	80011d4 <__aeabi_fcmpgt>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d022      	beq.n	8004f08 <Batt_Protection_when_discharge+0x978>
 8004ec2:	4b2e      	ldr	r3, [pc, #184]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a2e      	ldr	r2, [pc, #184]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	4611      	mov	r1, r2
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7fc f977 	bl	80011c0 <__aeabi_fcmpge>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <Batt_Protection_when_discharge+0x978>
			if((test_tim2%500)==0){
 8004ed8:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <Batt_Protection_when_discharge+0xa10>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	4b31      	ldr	r3, [pc, #196]	; (8004fa4 <Batt_Protection_when_discharge+0xa14>)
 8004ede:	fb83 1302 	smull	r1, r3, r3, r2
 8004ee2:	1159      	asrs	r1, r3, #5
 8004ee4:	17d3      	asrs	r3, r2, #31
 8004ee6:	1acb      	subs	r3, r1, r3
 8004ee8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d141      	bne.n	8004f7a <Batt_Protection_when_discharge+0x9ea>
				BUZZ_Toggle;
 8004ef6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004efa:	482b      	ldr	r0, [pc, #172]	; (8004fa8 <Batt_Protection_when_discharge+0xa18>)
 8004efc:	f004 f8e4 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <Batt_Protection_when_discharge+0xa10>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004f06:	e038      	b.n	8004f7a <Batt_Protection_when_discharge+0x9ea>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <Batt_Protection_when_discharge+0x9ec>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fc f940 	bl	8001198 <__aeabi_fcmplt>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d121      	bne.n	8004f62 <Batt_Protection_when_discharge+0x9d2>
 8004f1e:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <Batt_Protection_when_discharge+0x9f8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	4611      	mov	r1, r2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fc f935 	bl	8001198 <__aeabi_fcmplt>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d116      	bne.n	8004f62 <Batt_Protection_when_discharge+0x9d2>
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <Batt_Protection_when_discharge+0x9fc>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fc f92a 	bl	8001198 <__aeabi_fcmplt>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <Batt_Protection_when_discharge+0x9d2>
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <Batt_Protection_when_discharge+0xa00>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <Batt_Protection_when_discharge+0x9f0>)
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	4611      	mov	r1, r2
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fc f91f 	bl	8001198 <__aeabi_fcmplt>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d100      	bne.n	8004f62 <Batt_Protection_when_discharge+0x9d2>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004f60:	e1a2      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
			Batt_Open_Mode();
 8004f62:	f7fc fc1b 	bl	800179c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <Batt_Protection_when_discharge+0xa04>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f72:	480d      	ldr	r0, [pc, #52]	; (8004fa8 <Batt_Protection_when_discharge+0xa18>)
 8004f74:	f004 f890 	bl	8009098 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004f78:	e196      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
 8004f7a:	e195      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
 8004f7c:	200002b0 	.word	0x200002b0
 8004f80:	20000054 	.word	0x20000054
 8004f84:	41200000 	.word	0x41200000
 8004f88:	200002b4 	.word	0x200002b4
 8004f8c:	200002b8 	.word	0x200002b8
 8004f90:	200002bc 	.word	0x200002bc
 8004f94:	20000311 	.word	0x20000311
 8004f98:	20000300 	.word	0x20000300
 8004f9c:	40a00000 	.word	0x40a00000
 8004fa0:	2000030c 	.word	0x2000030c
 8004fa4:	10624dd3 	.word	0x10624dd3
 8004fa8:	40011000 	.word	0x40011000
	else if(Pack_SOC-SOC_Under_Set<=5 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8004fac:	4b83      	ldr	r3, [pc, #524]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a83      	ldr	r2, [pc, #524]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fe46 	bl	8000c48 <__aeabi_fsub>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4981      	ldr	r1, [pc, #516]	; (80051c4 <Batt_Protection_when_discharge+0xc34>)
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fc f8f3 	bl	80011ac <__aeabi_fcmple>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80d1 	beq.w	8005170 <Batt_Protection_when_discharge+0xbe0>
 8004fce:	4b7e      	ldr	r3, [pc, #504]	; (80051c8 <Batt_Protection_when_discharge+0xc38>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f040 80cc 	bne.w	8005170 <Batt_Protection_when_discharge+0xbe0>
 8004fd8:	4b7c      	ldr	r3, [pc, #496]	; (80051cc <Batt_Protection_when_discharge+0xc3c>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	f040 80c7 	bne.w	8005170 <Batt_Protection_when_discharge+0xbe0>
		fault_code=5;
 8004fe2:	4b7b      	ldr	r3, [pc, #492]	; (80051d0 <Batt_Protection_when_discharge+0xc40>)
 8004fe4:	2205      	movs	r2, #5
 8004fe6:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8004fe8:	4b75      	ldr	r3, [pc, #468]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4975      	ldr	r1, [pc, #468]	; (80051c4 <Batt_Protection_when_discharge+0xc34>)
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fb fe2c 	bl	8000c4c <__addsf3>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4b70      	ldr	r3, [pc, #448]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fc f8de 	bl	80011c0 <__aeabi_fcmpge>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d029      	beq.n	800505e <Batt_Protection_when_discharge+0xace>
 800500a:	4b6d      	ldr	r3, [pc, #436]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4971      	ldr	r1, [pc, #452]	; (80051d4 <Batt_Protection_when_discharge+0xc44>)
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb fe1b 	bl	8000c4c <__addsf3>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	4b68      	ldr	r3, [pc, #416]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f7fc f8b9 	bl	8001198 <__aeabi_fcmplt>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d018      	beq.n	800505e <Batt_Protection_when_discharge+0xace>
			if((test_tim2%1000)==0){
 800502c:	4b6a      	ldr	r3, [pc, #424]	; (80051d8 <Batt_Protection_when_discharge+0xc48>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b6a      	ldr	r3, [pc, #424]	; (80051dc <Batt_Protection_when_discharge+0xc4c>)
 8005032:	fb83 1302 	smull	r1, r3, r3, r2
 8005036:	1199      	asrs	r1, r3, #6
 8005038:	17d3      	asrs	r3, r2, #31
 800503a:	1acb      	subs	r3, r1, r3
 800503c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	f040 8091 	bne.w	800516e <Batt_Protection_when_discharge+0xbde>
				BUZZ_Toggle;
 800504c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005050:	4863      	ldr	r0, [pc, #396]	; (80051e0 <Batt_Protection_when_discharge+0xc50>)
 8005052:	f004 f839 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005056:	4b60      	ldr	r3, [pc, #384]	; (80051d8 <Batt_Protection_when_discharge+0xc48>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 800505c:	e087      	b.n	800516e <Batt_Protection_when_discharge+0xbde>
		else if(Pack_SOC<=SOC_Under_Set+3 && Pack_SOC>SOC_Under_Set+2){
 800505e:	4b58      	ldr	r3, [pc, #352]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	495c      	ldr	r1, [pc, #368]	; (80051d4 <Batt_Protection_when_discharge+0xc44>)
 8005064:	4618      	mov	r0, r3
 8005066:	f7fb fdf1 	bl	8000c4c <__addsf3>
 800506a:	4603      	mov	r3, r0
 800506c:	461a      	mov	r2, r3
 800506e:	4b53      	ldr	r3, [pc, #332]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4619      	mov	r1, r3
 8005074:	4610      	mov	r0, r2
 8005076:	f7fc f8a3 	bl	80011c0 <__aeabi_fcmpge>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d029      	beq.n	80050d4 <Batt_Protection_when_discharge+0xb44>
 8005080:	4b4f      	ldr	r3, [pc, #316]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005088:	4618      	mov	r0, r3
 800508a:	f7fb fddf 	bl	8000c4c <__addsf3>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	4b4a      	ldr	r3, [pc, #296]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7fc f87d 	bl	8001198 <__aeabi_fcmplt>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d017      	beq.n	80050d4 <Batt_Protection_when_discharge+0xb44>
			if((test_tim2%500)==0){
 80050a4:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <Batt_Protection_when_discharge+0xc48>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	4b4c      	ldr	r3, [pc, #304]	; (80051dc <Batt_Protection_when_discharge+0xc4c>)
 80050aa:	fb83 1302 	smull	r1, r3, r3, r2
 80050ae:	1159      	asrs	r1, r3, #5
 80050b0:	17d3      	asrs	r3, r2, #31
 80050b2:	1acb      	subs	r3, r1, r3
 80050b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80050b8:	fb01 f303 	mul.w	r3, r1, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d155      	bne.n	800516e <Batt_Protection_when_discharge+0xbde>
				BUZZ_Toggle;
 80050c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050c6:	4846      	ldr	r0, [pc, #280]	; (80051e0 <Batt_Protection_when_discharge+0xc50>)
 80050c8:	f003 fffe 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80050cc:	4b42      	ldr	r3, [pc, #264]	; (80051d8 <Batt_Protection_when_discharge+0xc48>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80050d2:	e04c      	b.n	800516e <Batt_Protection_when_discharge+0xbde>
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set){
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb fdb5 	bl	8000c4c <__addsf3>
 80050e2:	4603      	mov	r3, r0
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b35      	ldr	r3, [pc, #212]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f7fc f871 	bl	80011d4 <__aeabi_fcmpgt>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d022      	beq.n	800513e <Batt_Protection_when_discharge+0xbae>
 80050f8:	4b30      	ldr	r3, [pc, #192]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f7fc f85c 	bl	80011c0 <__aeabi_fcmpge>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d017      	beq.n	800513e <Batt_Protection_when_discharge+0xbae>
			if((test_tim2%500)==0){
 800510e:	4b32      	ldr	r3, [pc, #200]	; (80051d8 <Batt_Protection_when_discharge+0xc48>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b32      	ldr	r3, [pc, #200]	; (80051dc <Batt_Protection_when_discharge+0xc4c>)
 8005114:	fb83 1302 	smull	r1, r3, r3, r2
 8005118:	1159      	asrs	r1, r3, #5
 800511a:	17d3      	asrs	r3, r2, #31
 800511c:	1acb      	subs	r3, r1, r3
 800511e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d120      	bne.n	800516e <Batt_Protection_when_discharge+0xbde>
				BUZZ_Toggle;
 800512c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005130:	482b      	ldr	r0, [pc, #172]	; (80051e0 <Batt_Protection_when_discharge+0xc50>)
 8005132:	f003 ffc9 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005136:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <Batt_Protection_when_discharge+0xc48>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800513c:	e017      	b.n	800516e <Batt_Protection_when_discharge+0xbde>
		else if(Pack_SOC<SOC_Under_Set){
 800513e:	4b1f      	ldr	r3, [pc, #124]	; (80051bc <Batt_Protection_when_discharge+0xc2c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <Batt_Protection_when_discharge+0xc30>)
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	4611      	mov	r1, r2
 8005148:	4618      	mov	r0, r3
 800514a:	f7fc f825 	bl	8001198 <__aeabi_fcmplt>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d100      	bne.n	8005156 <Batt_Protection_when_discharge+0xbc6>
		if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8005154:	e0a8      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
			Batt_Open_Mode();
 8005156:	f7fc fb21 	bl	800179c <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 800515a:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <Batt_Protection_when_discharge+0xc38>)
 800515c:	2201      	movs	r2, #1
 800515e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005160:	2200      	movs	r2, #0
 8005162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005166:	481e      	ldr	r0, [pc, #120]	; (80051e0 <Batt_Protection_when_discharge+0xc50>)
 8005168:	f003 ff96 	bl	8009098 <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 800516c:	e09c      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
 800516e:	e09b      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
	else if(Persen_Imbalance_Set-persen_imbalance <= 5)
 8005170:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <Batt_Protection_when_discharge+0xc54>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <Batt_Protection_when_discharge+0xc58>)
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb fd64 	bl	8000c48 <__aeabi_fsub>
 8005180:	4603      	mov	r3, r0
 8005182:	4910      	ldr	r1, [pc, #64]	; (80051c4 <Batt_Protection_when_discharge+0xc34>)
 8005184:	4618      	mov	r0, r3
 8005186:	f7fc f811 	bl	80011ac <__aeabi_fcmple>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d02f      	beq.n	80051f0 <Batt_Protection_when_discharge+0xc60>
		fault_code=6;
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <Batt_Protection_when_discharge+0xc40>)
 8005192:	2206      	movs	r2, #6
 8005194:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance >= Persen_Imbalance_Set)
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <Batt_Protection_when_discharge+0xc58>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a12      	ldr	r2, [pc, #72]	; (80051e4 <Batt_Protection_when_discharge+0xc54>)
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	4611      	mov	r1, r2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fc f80d 	bl	80011c0 <__aeabi_fcmpge>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d100      	bne.n	80051ae <Batt_Protection_when_discharge+0xc1e>
}
 80051ac:	e07c      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
			flag_trip_unbalance=ON;
 80051ae:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <Batt_Protection_when_discharge+0xc5c>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 80051b4:	f7fc faf2 	bl	800179c <Batt_Open_Mode>
}
 80051b8:	e076      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
 80051ba:	bf00      	nop
 80051bc:	20000320 	.word	0x20000320
 80051c0:	2000075c 	.word	0x2000075c
 80051c4:	40a00000 	.word	0x40a00000
 80051c8:	20000312 	.word	0x20000312
 80051cc:	200009e4 	.word	0x200009e4
 80051d0:	20000300 	.word	0x20000300
 80051d4:	40400000 	.word	0x40400000
 80051d8:	2000030c 	.word	0x2000030c
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	40011000 	.word	0x40011000
 80051e4:	20000064 	.word	0x20000064
 80051e8:	200002d4 	.word	0x200002d4
 80051ec:	2000031a 	.word	0x2000031a
		if(fault_code!=0)
 80051f0:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <Batt_Protection_when_discharge+0xd28>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <Batt_Protection_when_discharge+0xc70>
			last_fault_code=fault_code;
 80051f8:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <Batt_Protection_when_discharge+0xd28>)
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <Batt_Protection_when_discharge+0xd2c>)
 80051fe:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005200:	4b2d      	ldr	r3, [pc, #180]	; (80052b8 <Batt_Protection_when_discharge+0xd28>)
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005206:	2200      	movs	r2, #0
 8005208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800520c:	482c      	ldr	r0, [pc, #176]	; (80052c0 <Batt_Protection_when_discharge+0xd30>)
 800520e:	f003 ff43 	bl	8009098 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8005212:	4b2c      	ldr	r3, [pc, #176]	; (80052c4 <Batt_Protection_when_discharge+0xd34>)
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 800521a:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <Batt_Protection_when_discharge+0xd38>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb f96e 	bl	8000500 <__aeabi_f2d>
 8005224:	a322      	add	r3, pc, #136	; (adr r3, 80052b0 <Batt_Protection_when_discharge+0xd20>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fb f809 	bl	8000240 <__aeabi_dsub>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	f7fb fcb3 	bl	8000ba0 <__aeabi_d2f>
 800523a:	4603      	mov	r3, r0
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <Batt_Protection_when_discharge+0xd38>)
 800523e:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005240:	4b22      	ldr	r3, [pc, #136]	; (80052cc <Batt_Protection_when_discharge+0xd3c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb f95b 	bl	8000500 <__aeabi_f2d>
 800524a:	a319      	add	r3, pc, #100	; (adr r3, 80052b0 <Batt_Protection_when_discharge+0xd20>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa fff6 	bl	8000240 <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f7fb fca0 	bl	8000ba0 <__aeabi_d2f>
 8005260:	4603      	mov	r3, r0
 8005262:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <Batt_Protection_when_discharge+0xd3c>)
 8005264:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 8005266:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <Batt_Protection_when_discharge+0xd38>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f04f 0100 	mov.w	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f7fb ff92 	bl	8001198 <__aeabi_fcmplt>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <Batt_Protection_when_discharge+0xcf2>
			T_trip_cycle=0;
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <Batt_Protection_when_discharge+0xd38>)
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005282:	4b12      	ldr	r3, [pc, #72]	; (80052cc <Batt_Protection_when_discharge+0xd3c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f7fb ff84 	bl	8001198 <__aeabi_fcmplt>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d100      	bne.n	8005298 <Batt_Protection_when_discharge+0xd08>
}
 8005296:	e007      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
			T_I_Over_trip_cycle=0;
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <Batt_Protection_when_discharge+0xd3c>)
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
}
 80052a0:	e002      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
		if(flag_trip_undervoltage==OFF) {
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <Batt_Protection_when_discharge+0xd18>
		if(flag_trip_overcurrentdischarge==OFF) {
 80052a6:	bf00      	nop
}
 80052a8:	bf00      	nop
 80052aa:	bdb0      	pop	{r4, r5, r7, pc}
 80052ac:	f3af 8000 	nop.w
 80052b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80052b4:	3f50624d 	.word	0x3f50624d
 80052b8:	20000300 	.word	0x20000300
 80052bc:	20000301 	.word	0x20000301
 80052c0:	40011000 	.word	0x40011000
 80052c4:	20000c30 	.word	0x20000c30
 80052c8:	20000c50 	.word	0x20000c50
 80052cc:	20000308 	.word	0x20000308

080052d0 <Batt_Protection_when_charge>:

void Batt_Protection_when_charge(void){
 80052d0:	b5b0      	push	{r4, r5, r7, lr}
 80052d2:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 80052d4:	4b9b      	ldr	r3, [pc, #620]	; (8005544 <Batt_Protection_when_charge+0x274>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a9b      	ldr	r2, [pc, #620]	; (8005548 <Batt_Protection_when_charge+0x278>)
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	4611      	mov	r1, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb ff78 	bl	80011d4 <__aeabi_fcmpgt>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d017      	beq.n	800531a <Batt_Protection_when_charge+0x4a>
		Isc = IBATT;
 80052ea:	4b96      	ldr	r3, [pc, #600]	; (8005544 <Batt_Protection_when_charge+0x274>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a97      	ldr	r2, [pc, #604]	; (800554c <Batt_Protection_when_charge+0x27c>)
 80052f0:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 80052f2:	4b95      	ldr	r3, [pc, #596]	; (8005548 <Batt_Protection_when_charge+0x278>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a96      	ldr	r2, [pc, #600]	; (8005550 <Batt_Protection_when_charge+0x280>)
 80052f8:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 80052fa:	4b96      	ldr	r3, [pc, #600]	; (8005554 <Batt_Protection_when_charge+0x284>)
 80052fc:	220c      	movs	r2, #12
 80052fe:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005300:	f7fc fa4c 	bl	800179c <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 8005304:	4b94      	ldr	r3, [pc, #592]	; (8005558 <Batt_Protection_when_charge+0x288>)
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800530a:	2200      	movs	r2, #0
 800530c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005310:	4892      	ldr	r0, [pc, #584]	; (800555c <Batt_Protection_when_charge+0x28c>)
 8005312:	f003 fec1 	bl	8009098 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 8005316:	f000 bcac 	b.w	8005c72 <Batt_Protection_when_charge+0x9a2>
	else if(SOC_Over_Set-Pack_SOC<=10 && flag_trip_SOCOverCharge==OFF) {
 800531a:	4b91      	ldr	r3, [pc, #580]	; (8005560 <Batt_Protection_when_charge+0x290>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a91      	ldr	r2, [pc, #580]	; (8005564 <Batt_Protection_when_charge+0x294>)
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7fb fc8f 	bl	8000c48 <__aeabi_fsub>
 800532a:	4603      	mov	r3, r0
 800532c:	498e      	ldr	r1, [pc, #568]	; (8005568 <Batt_Protection_when_charge+0x298>)
 800532e:	4618      	mov	r0, r3
 8005330:	f7fb ff3c 	bl	80011ac <__aeabi_fcmple>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01f      	beq.n	800537a <Batt_Protection_when_charge+0xaa>
 800533a:	4b8c      	ldr	r3, [pc, #560]	; (800556c <Batt_Protection_when_charge+0x29c>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11b      	bne.n	800537a <Batt_Protection_when_charge+0xaa>
		fault_code=7;
 8005342:	4b84      	ldr	r3, [pc, #528]	; (8005554 <Batt_Protection_when_charge+0x284>)
 8005344:	2207      	movs	r2, #7
 8005346:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 8005348:	4b86      	ldr	r3, [pc, #536]	; (8005564 <Batt_Protection_when_charge+0x294>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a84      	ldr	r2, [pc, #528]	; (8005560 <Batt_Protection_when_charge+0x290>)
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb ff3e 	bl	80011d4 <__aeabi_fcmpgt>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8489 	beq.w	8005c72 <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 8005360:	f7fc fa1c 	bl	800179c <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 8005364:	4b81      	ldr	r3, [pc, #516]	; (800556c <Batt_Protection_when_charge+0x29c>)
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800536a:	2200      	movs	r2, #0
 800536c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005370:	487a      	ldr	r0, [pc, #488]	; (800555c <Batt_Protection_when_charge+0x28c>)
 8005372:	f003 fe91 	bl	8009098 <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 8005376:	f000 bc7c 	b.w	8005c72 <Batt_Protection_when_charge+0x9a2>
	else if(((Suhu_T1>Temp_Over_Set)||(Suhu_T2>Temp_Over_Set)||(Suhu_T3>Temp_Over_Set)||(Suhu_T4>Temp_Over_Set)) && flag_trip_overtemperature==OFF) {
 800537a:	4b7d      	ldr	r3, [pc, #500]	; (8005570 <Batt_Protection_when_charge+0x2a0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a7d      	ldr	r2, [pc, #500]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	4611      	mov	r1, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f7fb ff25 	bl	80011d4 <__aeabi_fcmpgt>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d121      	bne.n	80053d4 <Batt_Protection_when_charge+0x104>
 8005390:	4b79      	ldr	r3, [pc, #484]	; (8005578 <Batt_Protection_when_charge+0x2a8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a77      	ldr	r2, [pc, #476]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f7fb ff1a 	bl	80011d4 <__aeabi_fcmpgt>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <Batt_Protection_when_charge+0x104>
 80053a6:	4b75      	ldr	r3, [pc, #468]	; (800557c <Batt_Protection_when_charge+0x2ac>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a72      	ldr	r2, [pc, #456]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fb ff0f 	bl	80011d4 <__aeabi_fcmpgt>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10b      	bne.n	80053d4 <Batt_Protection_when_charge+0x104>
 80053bc:	4b70      	ldr	r3, [pc, #448]	; (8005580 <Batt_Protection_when_charge+0x2b0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a6c      	ldr	r2, [pc, #432]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fb ff04 	bl	80011d4 <__aeabi_fcmpgt>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8132 	beq.w	8005638 <Batt_Protection_when_charge+0x368>
 80053d4:	4b6b      	ldr	r3, [pc, #428]	; (8005584 <Batt_Protection_when_charge+0x2b4>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 812d 	bne.w	8005638 <Batt_Protection_when_charge+0x368>
		fault_code=8;
 80053de:	4b5d      	ldr	r3, [pc, #372]	; (8005554 <Batt_Protection_when_charge+0x284>)
 80053e0:	2208      	movs	r2, #8
 80053e2:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 80053e4:	4b62      	ldr	r3, [pc, #392]	; (8005570 <Batt_Protection_when_charge+0x2a0>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a62      	ldr	r2, [pc, #392]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fb fef0 	bl	80011d4 <__aeabi_fcmpgt>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d02a      	beq.n	8005450 <Batt_Protection_when_charge+0x180>
 80053fa:	4b5e      	ldr	r3, [pc, #376]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005402:	4618      	mov	r0, r3
 8005404:	f7fb fc22 	bl	8000c4c <__addsf3>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	4b58      	ldr	r3, [pc, #352]	; (8005570 <Batt_Protection_when_charge+0x2a0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fb fed4 	bl	80011c0 <__aeabi_fcmpge>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d018      	beq.n	8005450 <Batt_Protection_when_charge+0x180>
			if((test_tim2%1000)==0) {
 800541e:	4b5a      	ldr	r3, [pc, #360]	; (8005588 <Batt_Protection_when_charge+0x2b8>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b5a      	ldr	r3, [pc, #360]	; (800558c <Batt_Protection_when_charge+0x2bc>)
 8005424:	fb83 1302 	smull	r1, r3, r3, r2
 8005428:	1199      	asrs	r1, r3, #6
 800542a:	17d3      	asrs	r3, r2, #31
 800542c:	1acb      	subs	r3, r1, r3
 800542e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 80fc 	bne.w	8005636 <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 800543e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005442:	4846      	ldr	r0, [pc, #280]	; (800555c <Batt_Protection_when_charge+0x28c>)
 8005444:	f003 fe40 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005448:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <Batt_Protection_when_charge+0x2b8>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 800544e:	e0f2      	b.n	8005636 <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Temp_Over_Set+1 && Suhu_T1<=Temp_Over_Set+2){
 8005450:	4b48      	ldr	r3, [pc, #288]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005458:	4618      	mov	r0, r3
 800545a:	f7fb fbf7 	bl	8000c4c <__addsf3>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	4b43      	ldr	r3, [pc, #268]	; (8005570 <Batt_Protection_when_charge+0x2a0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f7fb fe95 	bl	8001198 <__aeabi_fcmplt>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02a      	beq.n	80054ca <Batt_Protection_when_charge+0x1fa>
 8005474:	4b3f      	ldr	r3, [pc, #252]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800547c:	4618      	mov	r0, r3
 800547e:	f7fb fbe5 	bl	8000c4c <__addsf3>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	4b3a      	ldr	r3, [pc, #232]	; (8005570 <Batt_Protection_when_charge+0x2a0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fb fe97 	bl	80011c0 <__aeabi_fcmpge>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d018      	beq.n	80054ca <Batt_Protection_when_charge+0x1fa>
			if((test_tim2%500)==0){
 8005498:	4b3b      	ldr	r3, [pc, #236]	; (8005588 <Batt_Protection_when_charge+0x2b8>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b3b      	ldr	r3, [pc, #236]	; (800558c <Batt_Protection_when_charge+0x2bc>)
 800549e:	fb83 1302 	smull	r1, r3, r3, r2
 80054a2:	1159      	asrs	r1, r3, #5
 80054a4:	17d3      	asrs	r3, r2, #31
 80054a6:	1acb      	subs	r3, r1, r3
 80054a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 80bf 	bne.w	8005636 <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 80054b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054bc:	4827      	ldr	r0, [pc, #156]	; (800555c <Batt_Protection_when_charge+0x28c>)
 80054be:	f003 fe03 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80054c2:	4b31      	ldr	r3, [pc, #196]	; (8005588 <Batt_Protection_when_charge+0x2b8>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80054c8:	e0b5      	b.n	8005636 <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Temp_Over_Set+2 && Suhu_T1<=Temp_Over_Set+3){
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb fbba 	bl	8000c4c <__addsf3>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	4b24      	ldr	r3, [pc, #144]	; (8005570 <Batt_Protection_when_charge+0x2a0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7fb fe58 	bl	8001198 <__aeabi_fcmplt>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d052      	beq.n	8005594 <Batt_Protection_when_charge+0x2c4>
 80054ee:	4b21      	ldr	r3, [pc, #132]	; (8005574 <Batt_Protection_when_charge+0x2a4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4927      	ldr	r1, [pc, #156]	; (8005590 <Batt_Protection_when_charge+0x2c0>)
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fb fba9 	bl	8000c4c <__addsf3>
 80054fa:	4603      	mov	r3, r0
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b1c      	ldr	r3, [pc, #112]	; (8005570 <Batt_Protection_when_charge+0x2a0>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f7fb fe5b 	bl	80011c0 <__aeabi_fcmpge>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d041      	beq.n	8005594 <Batt_Protection_when_charge+0x2c4>
			if((test_tim2%500)==0){
 8005510:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <Batt_Protection_when_charge+0x2b8>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <Batt_Protection_when_charge+0x2bc>)
 8005516:	fb83 1302 	smull	r1, r3, r3, r2
 800551a:	1159      	asrs	r1, r3, #5
 800551c:	17d3      	asrs	r3, r2, #31
 800551e:	1acb      	subs	r3, r1, r3
 8005520:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	f040 8083 	bne.w	8005636 <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 8005530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005534:	4809      	ldr	r0, [pc, #36]	; (800555c <Batt_Protection_when_charge+0x28c>)
 8005536:	f003 fdc7 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800553a:	4b13      	ldr	r3, [pc, #76]	; (8005588 <Batt_Protection_when_charge+0x2b8>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005540:	e079      	b.n	8005636 <Batt_Protection_when_charge+0x366>
 8005542:	bf00      	nop
 8005544:	20000284 	.word	0x20000284
 8005548:	20000280 	.word	0x20000280
 800554c:	20000288 	.word	0x20000288
 8005550:	2000028c 	.word	0x2000028c
 8005554:	20000300 	.word	0x20000300
 8005558:	20000318 	.word	0x20000318
 800555c:	40011000 	.word	0x40011000
 8005560:	20000058 	.word	0x20000058
 8005564:	20000320 	.word	0x20000320
 8005568:	41200000 	.word	0x41200000
 800556c:	20000313 	.word	0x20000313
 8005570:	200002b0 	.word	0x200002b0
 8005574:	20000050 	.word	0x20000050
 8005578:	200002b4 	.word	0x200002b4
 800557c:	200002b8 	.word	0x200002b8
 8005580:	200002bc 	.word	0x200002bc
 8005584:	20000310 	.word	0x20000310
 8005588:	2000030c 	.word	0x2000030c
 800558c:	10624dd3 	.word	0x10624dd3
 8005590:	40400000 	.word	0x40400000
		else if(Suhu_T1>Temp_Over_Set+3||Suhu_T2>Temp_Over_Set+3||Suhu_T3>Temp_Over_Set+3||Suhu_T4>Temp_Over_Set+3){
 8005594:	4ba3      	ldr	r3, [pc, #652]	; (8005824 <Batt_Protection_when_charge+0x554>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	49a3      	ldr	r1, [pc, #652]	; (8005828 <Batt_Protection_when_charge+0x558>)
 800559a:	4618      	mov	r0, r3
 800559c:	f7fb fb56 	bl	8000c4c <__addsf3>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	4ba1      	ldr	r3, [pc, #644]	; (800582c <Batt_Protection_when_charge+0x55c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4619      	mov	r1, r3
 80055aa:	4610      	mov	r0, r2
 80055ac:	f7fb fdf4 	bl	8001198 <__aeabi_fcmplt>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d133      	bne.n	800561e <Batt_Protection_when_charge+0x34e>
 80055b6:	4b9b      	ldr	r3, [pc, #620]	; (8005824 <Batt_Protection_when_charge+0x554>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	499b      	ldr	r1, [pc, #620]	; (8005828 <Batt_Protection_when_charge+0x558>)
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fb fb45 	bl	8000c4c <__addsf3>
 80055c2:	4603      	mov	r3, r0
 80055c4:	461a      	mov	r2, r3
 80055c6:	4b9a      	ldr	r3, [pc, #616]	; (8005830 <Batt_Protection_when_charge+0x560>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fb fde3 	bl	8001198 <__aeabi_fcmplt>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d122      	bne.n	800561e <Batt_Protection_when_charge+0x34e>
 80055d8:	4b92      	ldr	r3, [pc, #584]	; (8005824 <Batt_Protection_when_charge+0x554>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4992      	ldr	r1, [pc, #584]	; (8005828 <Batt_Protection_when_charge+0x558>)
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fb fb34 	bl	8000c4c <__addsf3>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	4b92      	ldr	r3, [pc, #584]	; (8005834 <Batt_Protection_when_charge+0x564>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f7fb fdd2 	bl	8001198 <__aeabi_fcmplt>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d111      	bne.n	800561e <Batt_Protection_when_charge+0x34e>
 80055fa:	4b8a      	ldr	r3, [pc, #552]	; (8005824 <Batt_Protection_when_charge+0x554>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	498a      	ldr	r1, [pc, #552]	; (8005828 <Batt_Protection_when_charge+0x558>)
 8005600:	4618      	mov	r0, r3
 8005602:	f7fb fb23 	bl	8000c4c <__addsf3>
 8005606:	4603      	mov	r3, r0
 8005608:	461a      	mov	r2, r3
 800560a:	4b8b      	ldr	r3, [pc, #556]	; (8005838 <Batt_Protection_when_charge+0x568>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fb fdc1 	bl	8001198 <__aeabi_fcmplt>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d100      	bne.n	800561e <Batt_Protection_when_charge+0x34e>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 800561c:	e329      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 800561e:	f7fc f8bd 	bl	800179c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8005622:	4b86      	ldr	r3, [pc, #536]	; (800583c <Batt_Protection_when_charge+0x56c>)
 8005624:	2201      	movs	r2, #1
 8005626:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005628:	2200      	movs	r2, #0
 800562a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800562e:	4884      	ldr	r0, [pc, #528]	; (8005840 <Batt_Protection_when_charge+0x570>)
 8005630:	f003 fd32 	bl	8009098 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set && Suhu_T1<=Temp_Over_Set+1) {
 8005634:	e31d      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
 8005636:	e31c      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8005638:	4b7c      	ldr	r3, [pc, #496]	; (800582c <Batt_Protection_when_charge+0x55c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a81      	ldr	r2, [pc, #516]	; (8005844 <Batt_Protection_when_charge+0x574>)
 800563e:	6812      	ldr	r2, [r2, #0]
 8005640:	4611      	mov	r1, r2
 8005642:	4618      	mov	r0, r3
 8005644:	f7fb fb00 	bl	8000c48 <__aeabi_fsub>
 8005648:	4603      	mov	r3, r0
 800564a:	497f      	ldr	r1, [pc, #508]	; (8005848 <Batt_Protection_when_charge+0x578>)
 800564c:	4618      	mov	r0, r3
 800564e:	f7fb fdad 	bl	80011ac <__aeabi_fcmple>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d130      	bne.n	80056ba <Batt_Protection_when_charge+0x3ea>
 8005658:	4b75      	ldr	r3, [pc, #468]	; (8005830 <Batt_Protection_when_charge+0x560>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a79      	ldr	r2, [pc, #484]	; (8005844 <Batt_Protection_when_charge+0x574>)
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	4611      	mov	r1, r2
 8005662:	4618      	mov	r0, r3
 8005664:	f7fb faf0 	bl	8000c48 <__aeabi_fsub>
 8005668:	4603      	mov	r3, r0
 800566a:	4977      	ldr	r1, [pc, #476]	; (8005848 <Batt_Protection_when_charge+0x578>)
 800566c:	4618      	mov	r0, r3
 800566e:	f7fb fd9d 	bl	80011ac <__aeabi_fcmple>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d120      	bne.n	80056ba <Batt_Protection_when_charge+0x3ea>
 8005678:	4b6e      	ldr	r3, [pc, #440]	; (8005834 <Batt_Protection_when_charge+0x564>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a71      	ldr	r2, [pc, #452]	; (8005844 <Batt_Protection_when_charge+0x574>)
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	4611      	mov	r1, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f7fb fae0 	bl	8000c48 <__aeabi_fsub>
 8005688:	4603      	mov	r3, r0
 800568a:	496f      	ldr	r1, [pc, #444]	; (8005848 <Batt_Protection_when_charge+0x578>)
 800568c:	4618      	mov	r0, r3
 800568e:	f7fb fd8d 	bl	80011ac <__aeabi_fcmple>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d110      	bne.n	80056ba <Batt_Protection_when_charge+0x3ea>
 8005698:	4b67      	ldr	r3, [pc, #412]	; (8005838 <Batt_Protection_when_charge+0x568>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a69      	ldr	r2, [pc, #420]	; (8005844 <Batt_Protection_when_charge+0x574>)
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fb fad0 	bl	8000c48 <__aeabi_fsub>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4967      	ldr	r1, [pc, #412]	; (8005848 <Batt_Protection_when_charge+0x578>)
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fb fd7d 	bl	80011ac <__aeabi_fcmple>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 810d 	beq.w	80058d4 <Batt_Protection_when_charge+0x604>
 80056ba:	4b64      	ldr	r3, [pc, #400]	; (800584c <Batt_Protection_when_charge+0x57c>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 8108 	bne.w	80058d4 <Batt_Protection_when_charge+0x604>
		fault_code=4;
 80056c4:	4b62      	ldr	r3, [pc, #392]	; (8005850 <Batt_Protection_when_charge+0x580>)
 80056c6:	2204      	movs	r2, #4
 80056c8:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 80056ca:	4b5e      	ldr	r3, [pc, #376]	; (8005844 <Batt_Protection_when_charge+0x574>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	495e      	ldr	r1, [pc, #376]	; (8005848 <Batt_Protection_when_charge+0x578>)
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fb fabb 	bl	8000c4c <__addsf3>
 80056d6:	4603      	mov	r3, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	4b54      	ldr	r3, [pc, #336]	; (800582c <Batt_Protection_when_charge+0x55c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f7fb fd6d 	bl	80011c0 <__aeabi_fcmpge>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d029      	beq.n	8005740 <Batt_Protection_when_charge+0x470>
 80056ec:	4b55      	ldr	r3, [pc, #340]	; (8005844 <Batt_Protection_when_charge+0x574>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4958      	ldr	r1, [pc, #352]	; (8005854 <Batt_Protection_when_charge+0x584>)
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fb faaa 	bl	8000c4c <__addsf3>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	4b4b      	ldr	r3, [pc, #300]	; (800582c <Batt_Protection_when_charge+0x55c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7fb fd48 	bl	8001198 <__aeabi_fcmplt>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d018      	beq.n	8005740 <Batt_Protection_when_charge+0x470>
			if((test_tim2%1000)==0){
 800570e:	4b52      	ldr	r3, [pc, #328]	; (8005858 <Batt_Protection_when_charge+0x588>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b52      	ldr	r3, [pc, #328]	; (800585c <Batt_Protection_when_charge+0x58c>)
 8005714:	fb83 1302 	smull	r1, r3, r3, r2
 8005718:	1199      	asrs	r1, r3, #6
 800571a:	17d3      	asrs	r3, r2, #31
 800571c:	1acb      	subs	r3, r1, r3
 800571e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	f040 80d2 	bne.w	80058d2 <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 800572e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005732:	4843      	ldr	r0, [pc, #268]	; (8005840 <Batt_Protection_when_charge+0x570>)
 8005734:	f003 fcc8 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005738:	4b47      	ldr	r3, [pc, #284]	; (8005858 <Batt_Protection_when_charge+0x588>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 800573e:	e0c8      	b.n	80058d2 <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8005740:	4b40      	ldr	r3, [pc, #256]	; (8005844 <Batt_Protection_when_charge+0x574>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4943      	ldr	r1, [pc, #268]	; (8005854 <Batt_Protection_when_charge+0x584>)
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb fa80 	bl	8000c4c <__addsf3>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	4b36      	ldr	r3, [pc, #216]	; (800582c <Batt_Protection_when_charge+0x55c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fb fd32 	bl	80011c0 <__aeabi_fcmpge>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d02a      	beq.n	80057b8 <Batt_Protection_when_charge+0x4e8>
 8005762:	4b38      	ldr	r3, [pc, #224]	; (8005844 <Batt_Protection_when_charge+0x574>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800576a:	4618      	mov	r0, r3
 800576c:	f7fb fa6e 	bl	8000c4c <__addsf3>
 8005770:	4603      	mov	r3, r0
 8005772:	461a      	mov	r2, r3
 8005774:	4b2d      	ldr	r3, [pc, #180]	; (800582c <Batt_Protection_when_charge+0x55c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f7fb fd0c 	bl	8001198 <__aeabi_fcmplt>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d018      	beq.n	80057b8 <Batt_Protection_when_charge+0x4e8>
			if((test_tim2%500)==0){
 8005786:	4b34      	ldr	r3, [pc, #208]	; (8005858 <Batt_Protection_when_charge+0x588>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b34      	ldr	r3, [pc, #208]	; (800585c <Batt_Protection_when_charge+0x58c>)
 800578c:	fb83 1302 	smull	r1, r3, r3, r2
 8005790:	1159      	asrs	r1, r3, #5
 8005792:	17d3      	asrs	r3, r2, #31
 8005794:	1acb      	subs	r3, r1, r3
 8005796:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 8096 	bne.w	80058d2 <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 80057a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80057aa:	4825      	ldr	r0, [pc, #148]	; (8005840 <Batt_Protection_when_charge+0x570>)
 80057ac:	f003 fc8c 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80057b0:	4b29      	ldr	r3, [pc, #164]	; (8005858 <Batt_Protection_when_charge+0x588>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80057b6:	e08c      	b.n	80058d2 <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 80057b8:	4b22      	ldr	r3, [pc, #136]	; (8005844 <Batt_Protection_when_charge+0x574>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb fa43 	bl	8000c4c <__addsf3>
 80057c6:	4603      	mov	r3, r0
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b18      	ldr	r3, [pc, #96]	; (800582c <Batt_Protection_when_charge+0x55c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	4610      	mov	r0, r2
 80057d2:	f7fb fcff 	bl	80011d4 <__aeabi_fcmpgt>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d041      	beq.n	8005860 <Batt_Protection_when_charge+0x590>
 80057dc:	4b13      	ldr	r3, [pc, #76]	; (800582c <Batt_Protection_when_charge+0x55c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a18      	ldr	r2, [pc, #96]	; (8005844 <Batt_Protection_when_charge+0x574>)
 80057e2:	6812      	ldr	r2, [r2, #0]
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fb fcea 	bl	80011c0 <__aeabi_fcmpge>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d036      	beq.n	8005860 <Batt_Protection_when_charge+0x590>
			if((test_tim2%500)==0){
 80057f2:	4b19      	ldr	r3, [pc, #100]	; (8005858 <Batt_Protection_when_charge+0x588>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	4b19      	ldr	r3, [pc, #100]	; (800585c <Batt_Protection_when_charge+0x58c>)
 80057f8:	fb83 1302 	smull	r1, r3, r3, r2
 80057fc:	1159      	asrs	r1, r3, #5
 80057fe:	17d3      	asrs	r3, r2, #31
 8005800:	1acb      	subs	r3, r1, r3
 8005802:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d160      	bne.n	80058d2 <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 8005810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005814:	480a      	ldr	r0, [pc, #40]	; (8005840 <Batt_Protection_when_charge+0x570>)
 8005816:	f003 fc57 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800581a:	4b0f      	ldr	r3, [pc, #60]	; (8005858 <Batt_Protection_when_charge+0x588>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005820:	e057      	b.n	80058d2 <Batt_Protection_when_charge+0x602>
 8005822:	bf00      	nop
 8005824:	20000050 	.word	0x20000050
 8005828:	40400000 	.word	0x40400000
 800582c:	200002b0 	.word	0x200002b0
 8005830:	200002b4 	.word	0x200002b4
 8005834:	200002b8 	.word	0x200002b8
 8005838:	200002bc 	.word	0x200002bc
 800583c:	20000310 	.word	0x20000310
 8005840:	40011000 	.word	0x40011000
 8005844:	20000054 	.word	0x20000054
 8005848:	41200000 	.word	0x41200000
 800584c:	20000311 	.word	0x20000311
 8005850:	20000300 	.word	0x20000300
 8005854:	40a00000 	.word	0x40a00000
 8005858:	2000030c 	.word	0x2000030c
 800585c:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 8005860:	4bb3      	ldr	r3, [pc, #716]	; (8005b30 <Batt_Protection_when_charge+0x860>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4ab3      	ldr	r2, [pc, #716]	; (8005b34 <Batt_Protection_when_charge+0x864>)
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	4611      	mov	r1, r2
 800586a:	4618      	mov	r0, r3
 800586c:	f7fb fc94 	bl	8001198 <__aeabi_fcmplt>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d121      	bne.n	80058ba <Batt_Protection_when_charge+0x5ea>
 8005876:	4bb0      	ldr	r3, [pc, #704]	; (8005b38 <Batt_Protection_when_charge+0x868>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4aae      	ldr	r2, [pc, #696]	; (8005b34 <Batt_Protection_when_charge+0x864>)
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f7fb fc89 	bl	8001198 <__aeabi_fcmplt>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d116      	bne.n	80058ba <Batt_Protection_when_charge+0x5ea>
 800588c:	4bab      	ldr	r3, [pc, #684]	; (8005b3c <Batt_Protection_when_charge+0x86c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4aa8      	ldr	r2, [pc, #672]	; (8005b34 <Batt_Protection_when_charge+0x864>)
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f7fb fc7e 	bl	8001198 <__aeabi_fcmplt>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <Batt_Protection_when_charge+0x5ea>
 80058a2:	4ba7      	ldr	r3, [pc, #668]	; (8005b40 <Batt_Protection_when_charge+0x870>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4aa3      	ldr	r2, [pc, #652]	; (8005b34 <Batt_Protection_when_charge+0x864>)
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	4611      	mov	r1, r2
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fb fc73 	bl	8001198 <__aeabi_fcmplt>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d100      	bne.n	80058ba <Batt_Protection_when_charge+0x5ea>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 80058b8:	e1db      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 80058ba:	f7fb ff6f 	bl	800179c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 80058be:	4ba1      	ldr	r3, [pc, #644]	; (8005b44 <Batt_Protection_when_charge+0x874>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80058c4:	2200      	movs	r2, #0
 80058c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058ca:	489f      	ldr	r0, [pc, #636]	; (8005b48 <Batt_Protection_when_charge+0x878>)
 80058cc:	f003 fbe4 	bl	8009098 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 80058d0:	e1cf      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
 80058d2:	e1ce      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
	else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 80058d4:	4b9d      	ldr	r3, [pc, #628]	; (8005b4c <Batt_Protection_when_charge+0x87c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fa fe0f 	bl	8000500 <__aeabi_f2d>
 80058e2:	4604      	mov	r4, r0
 80058e4:	460d      	mov	r5, r1
 80058e6:	4b9a      	ldr	r3, [pc, #616]	; (8005b50 <Batt_Protection_when_charge+0x880>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fe08 	bl	8000500 <__aeabi_f2d>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4620      	mov	r0, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fa fca2 	bl	8000240 <__aeabi_dsub>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4610      	mov	r0, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f04f 0200 	mov.w	r2, #0
 8005908:	f04f 0300 	mov.w	r3, #0
 800590c:	f7fb f8e0 	bl	8000ad0 <__aeabi_dcmpgt>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 813f 	beq.w	8005b96 <Batt_Protection_when_charge+0x8c6>
 8005918:	4b8e      	ldr	r3, [pc, #568]	; (8005b54 <Batt_Protection_when_charge+0x884>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 813a 	bne.w	8005b96 <Batt_Protection_when_charge+0x8c6>
		fault_code=10;
 8005922:	4b8d      	ldr	r3, [pc, #564]	; (8005b58 <Batt_Protection_when_charge+0x888>)
 8005924:	220a      	movs	r2, #10
 8005926:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 8005928:	4b88      	ldr	r3, [pc, #544]	; (8005b4c <Batt_Protection_when_charge+0x87c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f7fa fde7 	bl	8000500 <__aeabi_f2d>
 8005932:	a37b      	add	r3, pc, #492	; (adr r3, 8005b20 <Batt_Protection_when_charge+0x850>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa ff64 	bl	8000804 <__aeabi_ddiv>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4614      	mov	r4, r2
 8005942:	461d      	mov	r5, r3
 8005944:	4b81      	ldr	r3, [pc, #516]	; (8005b4c <Batt_Protection_when_charge+0x87c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fa fdd9 	bl	8000500 <__aeabi_f2d>
 800594e:	a374      	add	r3, pc, #464	; (adr r3, 8005b20 <Batt_Protection_when_charge+0x850>)
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f7fa ff56 	bl	8000804 <__aeabi_ddiv>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fe26 	bl	80005b0 <__aeabi_dmul>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4610      	mov	r0, r2
 800596a:	4619      	mov	r1, r3
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	4b7a      	ldr	r3, [pc, #488]	; (8005b5c <Batt_Protection_when_charge+0x88c>)
 8005972:	f7fa fc65 	bl	8000240 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	f04f 0000 	mov.w	r0, #0
 800597e:	4978      	ldr	r1, [pc, #480]	; (8005b60 <Batt_Protection_when_charge+0x890>)
 8005980:	f7fa ff40 	bl	8000804 <__aeabi_ddiv>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	f7fb f908 	bl	8000ba0 <__aeabi_d2f>
 8005990:	4603      	mov	r3, r0
 8005992:	4a74      	ldr	r2, [pc, #464]	; (8005b64 <Batt_Protection_when_charge+0x894>)
 8005994:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 8005996:	4b74      	ldr	r3, [pc, #464]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fdb0 	bl	8000500 <__aeabi_f2d>
 80059a0:	a361      	add	r3, pc, #388	; (adr r3, 8005b28 <Batt_Protection_when_charge+0x858>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f7fa fc4d 	bl	8000244 <__adddf3>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4610      	mov	r0, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	f7fb f8f5 	bl	8000ba0 <__aeabi_d2f>
 80059b6:	4603      	mov	r3, r0
 80059b8:	4a6b      	ldr	r2, [pc, #428]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 80059ba:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 80059bc:	4b6a      	ldr	r3, [pc, #424]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a68      	ldr	r2, [pc, #416]	; (8005b64 <Batt_Protection_when_charge+0x894>)
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fb fc04 	bl	80011d4 <__aeabi_fcmpgt>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d012      	beq.n	80059f8 <Batt_Protection_when_charge+0x728>
 80059d2:	4b60      	ldr	r3, [pc, #384]	; (8005b54 <Batt_Protection_when_charge+0x884>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10e      	bne.n	80059f8 <Batt_Protection_when_charge+0x728>
			Batt_Open_Mode();
 80059da:	f7fb fedf 	bl	800179c <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 80059de:	4b61      	ldr	r3, [pc, #388]	; (8005b64 <Batt_Protection_when_charge+0x894>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a61      	ldr	r2, [pc, #388]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 80059e4:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentcharge=ON;
 80059e6:	4b5b      	ldr	r3, [pc, #364]	; (8005b54 <Batt_Protection_when_charge+0x884>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059f2:	4855      	ldr	r0, [pc, #340]	; (8005b48 <Batt_Protection_when_charge+0x878>)
 80059f4:	f003 fb50 	bl	8009098 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 80059f8:	4b56      	ldr	r3, [pc, #344]	; (8005b54 <Batt_Protection_when_charge+0x884>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f040 8137 	bne.w	8005c70 <Batt_Protection_when_charge+0x9a0>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005a02:	4b58      	ldr	r3, [pc, #352]	; (8005b64 <Batt_Protection_when_charge+0x894>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a58      	ldr	r2, [pc, #352]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fb f91b 	bl	8000c48 <__aeabi_fsub>
 8005a12:	4603      	mov	r3, r0
 8005a14:	4955      	ldr	r1, [pc, #340]	; (8005b6c <Batt_Protection_when_charge+0x89c>)
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fb fbdc 	bl	80011d4 <__aeabi_fcmpgt>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d018      	beq.n	8005a54 <Batt_Protection_when_charge+0x784>
				if((test_tim2%1000)==0) {
 8005a22:	4b53      	ldr	r3, [pc, #332]	; (8005b70 <Batt_Protection_when_charge+0x8a0>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b53      	ldr	r3, [pc, #332]	; (8005b74 <Batt_Protection_when_charge+0x8a4>)
 8005a28:	fb83 1302 	smull	r1, r3, r3, r2
 8005a2c:	1199      	asrs	r1, r3, #6
 8005a2e:	17d3      	asrs	r3, r2, #31
 8005a30:	1acb      	subs	r3, r1, r3
 8005a32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a36:	fb01 f303 	mul.w	r3, r1, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f040 8117 	bne.w	8005c70 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a46:	4840      	ldr	r0, [pc, #256]	; (8005b48 <Batt_Protection_when_charge+0x878>)
 8005a48:	f003 fb3e 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005a4c:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <Batt_Protection_when_charge+0x8a0>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005a52:	e10d      	b.n	8005c70 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8005a54:	4b43      	ldr	r3, [pc, #268]	; (8005b64 <Batt_Protection_when_charge+0x894>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a43      	ldr	r2, [pc, #268]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fb f8f2 	bl	8000c48 <__aeabi_fsub>
 8005a64:	4603      	mov	r3, r0
 8005a66:	4944      	ldr	r1, [pc, #272]	; (8005b78 <Batt_Protection_when_charge+0x8a8>)
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fb fbb3 	bl	80011d4 <__aeabi_fcmpgt>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d017      	beq.n	8005aa4 <Batt_Protection_when_charge+0x7d4>
				if((test_tim2%100)==0) {
 8005a74:	4b3e      	ldr	r3, [pc, #248]	; (8005b70 <Batt_Protection_when_charge+0x8a0>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	4b40      	ldr	r3, [pc, #256]	; (8005b7c <Batt_Protection_when_charge+0x8ac>)
 8005a7a:	fb83 1302 	smull	r1, r3, r3, r2
 8005a7e:	1159      	asrs	r1, r3, #5
 8005a80:	17d3      	asrs	r3, r2, #31
 8005a82:	1acb      	subs	r3, r1, r3
 8005a84:	2164      	movs	r1, #100	; 0x64
 8005a86:	fb01 f303 	mul.w	r3, r1, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f040 80ef 	bne.w	8005c70 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a96:	482c      	ldr	r0, [pc, #176]	; (8005b48 <Batt_Protection_when_charge+0x878>)
 8005a98:	f003 fb16 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005a9c:	4b34      	ldr	r3, [pc, #208]	; (8005b70 <Batt_Protection_when_charge+0x8a0>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005aa2:	e0e5      	b.n	8005c70 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 8005aa4:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <Batt_Protection_when_charge+0x894>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a2f      	ldr	r2, [pc, #188]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fb f8ca 	bl	8000c48 <__aeabi_fsub>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	4932      	ldr	r1, [pc, #200]	; (8005b80 <Batt_Protection_when_charge+0x8b0>)
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fb fb8b 	bl	80011d4 <__aeabi_fcmpgt>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d018      	beq.n	8005af6 <Batt_Protection_when_charge+0x826>
				if((test_tim2%10)==0) {
 8005ac4:	4b2a      	ldr	r3, [pc, #168]	; (8005b70 <Batt_Protection_when_charge+0x8a0>)
 8005ac6:	6819      	ldr	r1, [r3, #0]
 8005ac8:	4b2e      	ldr	r3, [pc, #184]	; (8005b84 <Batt_Protection_when_charge+0x8b4>)
 8005aca:	fb83 2301 	smull	r2, r3, r3, r1
 8005ace:	109a      	asrs	r2, r3, #2
 8005ad0:	17cb      	asrs	r3, r1, #31
 8005ad2:	1ad2      	subs	r2, r2, r3
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	005b      	lsls	r3, r3, #1
 8005adc:	1aca      	subs	r2, r1, r3
 8005ade:	2a00      	cmp	r2, #0
 8005ae0:	f040 80c6 	bne.w	8005c70 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ae8:	4817      	ldr	r0, [pc, #92]	; (8005b48 <Batt_Protection_when_charge+0x878>)
 8005aea:	f003 faed 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005aee:	4b20      	ldr	r3, [pc, #128]	; (8005b70 <Batt_Protection_when_charge+0x8a0>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005af4:	e0bc      	b.n	8005c70 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8005af6:	4b1b      	ldr	r3, [pc, #108]	; (8005b64 <Batt_Protection_when_charge+0x894>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a1b      	ldr	r2, [pc, #108]	; (8005b68 <Batt_Protection_when_charge+0x898>)
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	4611      	mov	r1, r2
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fb f8a1 	bl	8000c48 <__aeabi_fsub>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fb fb61 	bl	80011d4 <__aeabi_fcmpgt>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d137      	bne.n	8005b88 <Batt_Protection_when_charge+0x8b8>
		if(flag_trip_overcurrentcharge==OFF) {
 8005b18:	e0aa      	b.n	8005c70 <Batt_Protection_when_charge+0x9a0>
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w
 8005b20:	9999999a 	.word	0x9999999a
 8005b24:	401b9999 	.word	0x401b9999
 8005b28:	47ae147b 	.word	0x47ae147b
 8005b2c:	3f847ae1 	.word	0x3f847ae1
 8005b30:	200002b0 	.word	0x200002b0
 8005b34:	20000054 	.word	0x20000054
 8005b38:	200002b4 	.word	0x200002b4
 8005b3c:	200002b8 	.word	0x200002b8
 8005b40:	200002bc 	.word	0x200002bc
 8005b44:	20000311 	.word	0x20000311
 8005b48:	40011000 	.word	0x40011000
 8005b4c:	20000284 	.word	0x20000284
 8005b50:	2000004c 	.word	0x2000004c
 8005b54:	20000317 	.word	0x20000317
 8005b58:	20000300 	.word	0x20000300
 8005b5c:	3ff00000 	.word	0x3ff00000
 8005b60:	40200000 	.word	0x40200000
 8005b64:	20000304 	.word	0x20000304
 8005b68:	20000308 	.word	0x20000308
 8005b6c:	41700000 	.word	0x41700000
 8005b70:	2000030c 	.word	0x2000030c
 8005b74:	10624dd3 	.word	0x10624dd3
 8005b78:	41200000 	.word	0x41200000
 8005b7c:	51eb851f 	.word	0x51eb851f
 8005b80:	40400000 	.word	0x40400000
 8005b84:	66666667 	.word	0x66666667
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b8e:	483c      	ldr	r0, [pc, #240]	; (8005c80 <Batt_Protection_when_charge+0x9b0>)
 8005b90:	f003 fa82 	bl	8009098 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 8005b94:	e06c      	b.n	8005c70 <Batt_Protection_when_charge+0x9a0>
	else if(VBATT>V_Over_Set) {
 8005b96:	4b3b      	ldr	r3, [pc, #236]	; (8005c84 <Batt_Protection_when_charge+0x9b4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a3b      	ldr	r2, [pc, #236]	; (8005c88 <Batt_Protection_when_charge+0x9b8>)
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fb fb17 	bl	80011d4 <__aeabi_fcmpgt>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <Batt_Protection_when_charge+0x8ee>
		fault_code=11;
 8005bac:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <Batt_Protection_when_charge+0x9bc>)
 8005bae:	220b      	movs	r2, #11
 8005bb0:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=ON;
 8005bb2:	4b37      	ldr	r3, [pc, #220]	; (8005c90 <Batt_Protection_when_charge+0x9c0>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005bb8:	f7fb fdf0 	bl	800179c <Batt_Open_Mode>
}
 8005bbc:	e059      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
		if(fault_code!=0)
 8005bbe:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <Batt_Protection_when_charge+0x9bc>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <Batt_Protection_when_charge+0x8fe>
			last_fault_code=fault_code;
 8005bc6:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <Batt_Protection_when_charge+0x9bc>)
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	4b32      	ldr	r3, [pc, #200]	; (8005c94 <Batt_Protection_when_charge+0x9c4>)
 8005bcc:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <Batt_Protection_when_charge+0x9bc>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bda:	4829      	ldr	r0, [pc, #164]	; (8005c80 <Batt_Protection_when_charge+0x9b0>)
 8005bdc:	f003 fa5c 	bl	8009098 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8005be0:	4b2d      	ldr	r3, [pc, #180]	; (8005c98 <Batt_Protection_when_charge+0x9c8>)
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8005be8:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <Batt_Protection_when_charge+0x9cc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fa fc87 	bl	8000500 <__aeabi_f2d>
 8005bf2:	a321      	add	r3, pc, #132	; (adr r3, 8005c78 <Batt_Protection_when_charge+0x9a8>)
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f7fa fb22 	bl	8000240 <__aeabi_dsub>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4610      	mov	r0, r2
 8005c02:	4619      	mov	r1, r3
 8005c04:	f7fa ffcc 	bl	8000ba0 <__aeabi_d2f>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <Batt_Protection_when_charge+0x9cc>)
 8005c0c:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <Batt_Protection_when_charge+0x9d0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fa fc74 	bl	8000500 <__aeabi_f2d>
 8005c18:	a317      	add	r3, pc, #92	; (adr r3, 8005c78 <Batt_Protection_when_charge+0x9a8>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fb0f 	bl	8000240 <__aeabi_dsub>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4610      	mov	r0, r2
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f7fa ffb9 	bl	8000ba0 <__aeabi_d2f>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <Batt_Protection_when_charge+0x9d0>)
 8005c32:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle<0)
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <Batt_Protection_when_charge+0x9cc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fb faab 	bl	8001198 <__aeabi_fcmplt>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <Batt_Protection_when_charge+0x980>
			T_trip_cycle=0;
 8005c48:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <Batt_Protection_when_charge+0x9cc>)
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005c50:	4b13      	ldr	r3, [pc, #76]	; (8005ca0 <Batt_Protection_when_charge+0x9d0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fb fa9d 	bl	8001198 <__aeabi_fcmplt>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d100      	bne.n	8005c66 <Batt_Protection_when_charge+0x996>
}
 8005c64:	e005      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
			T_I_Over_trip_cycle=0;
 8005c66:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <Batt_Protection_when_charge+0x9d0>)
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
}
 8005c6e:	e000      	b.n	8005c72 <Batt_Protection_when_charge+0x9a2>
		if(flag_trip_overcurrentcharge==OFF) {
 8005c70:	bf00      	nop
}
 8005c72:	bf00      	nop
 8005c74:	bdb0      	pop	{r4, r5, r7, pc}
 8005c76:	bf00      	nop
 8005c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c7c:	3f50624d 	.word	0x3f50624d
 8005c80:	40011000 	.word	0x40011000
 8005c84:	20000280 	.word	0x20000280
 8005c88:	20000060 	.word	0x20000060
 8005c8c:	20000300 	.word	0x20000300
 8005c90:	20000315 	.word	0x20000315
 8005c94:	20000301 	.word	0x20000301
 8005c98:	20000c30 	.word	0x20000c30
 8005c9c:	20000c50 	.word	0x20000c50
 8005ca0:	20000308 	.word	0x20000308
 8005ca4:	00000000 	.word	0x00000000

08005ca8 <Batt_Protection_when_chargedischarge>:

void Batt_Protection_when_chargedischarge(void) {
 8005ca8:	b5b0      	push	{r4, r5, r7, lr}
 8005caa:	af00      	add	r7, sp, #0
	// Short circuit protection
	if(IBATT > (VBATT/0.9)) {
 8005cac:	4b76      	ldr	r3, [pc, #472]	; (8005e88 <Batt_Protection_when_chargedischarge+0x1e0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fa fc25 	bl	8000500 <__aeabi_f2d>
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	460d      	mov	r5, r1
 8005cba:	4b74      	ldr	r3, [pc, #464]	; (8005e8c <Batt_Protection_when_chargedischarge+0x1e4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fa fc1e 	bl	8000500 <__aeabi_f2d>
 8005cc4:	a36c      	add	r3, pc, #432	; (adr r3, 8005e78 <Batt_Protection_when_chargedischarge+0x1d0>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	f7fa fd9b 	bl	8000804 <__aeabi_ddiv>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f7fa fefb 	bl	8000ad0 <__aeabi_dcmpgt>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d016      	beq.n	8005d0e <Batt_Protection_when_chargedischarge+0x66>
		Isc=IBATT;
 8005ce0:	4b69      	ldr	r3, [pc, #420]	; (8005e88 <Batt_Protection_when_chargedischarge+0x1e0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6a      	ldr	r2, [pc, #424]	; (8005e90 <Batt_Protection_when_chargedischarge+0x1e8>)
 8005ce6:	6013      	str	r3, [r2, #0]
		Vsc=VBATT;
 8005ce8:	4b68      	ldr	r3, [pc, #416]	; (8005e8c <Batt_Protection_when_chargedischarge+0x1e4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a69      	ldr	r2, [pc, #420]	; (8005e94 <Batt_Protection_when_chargedischarge+0x1ec>)
 8005cee:	6013      	str	r3, [r2, #0]
		fault_code=12;
 8005cf0:	4b69      	ldr	r3, [pc, #420]	; (8005e98 <Batt_Protection_when_chargedischarge+0x1f0>)
 8005cf2:	220c      	movs	r2, #12
 8005cf4:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005cf6:	f7fb fd51 	bl	800179c <Batt_Open_Mode>
		flag_trip_shortcircuit=ON;
 8005cfa:	4b68      	ldr	r3, [pc, #416]	; (8005e9c <Batt_Protection_when_chargedischarge+0x1f4>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005d00:	2200      	movs	r2, #0
 8005d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d06:	4866      	ldr	r0, [pc, #408]	; (8005ea0 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005d08:	f003 f9c6 	bl	8009098 <HAL_GPIO_WritePin>
 8005d0c:	e0f5      	b.n	8005efa <Batt_Protection_when_chargedischarge+0x252>
	}

	// Under Voltage protection
	else if(VBATT < V_Under_Set && flag_trip_undervoltage == OFF ) { //Indikasi terjadi Undervoltage
 8005d0e:	4b5f      	ldr	r3, [pc, #380]	; (8005e8c <Batt_Protection_when_chargedischarge+0x1e4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a64      	ldr	r2, [pc, #400]	; (8005ea4 <Batt_Protection_when_chargedischarge+0x1fc>)
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	4611      	mov	r1, r2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fb fa3d 	bl	8001198 <__aeabi_fcmplt>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80ea 	beq.w	8005efa <Batt_Protection_when_chargedischarge+0x252>
 8005d26:	4b60      	ldr	r3, [pc, #384]	; (8005ea8 <Batt_Protection_when_chargedischarge+0x200>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f040 80e5 	bne.w	8005efa <Batt_Protection_when_chargedischarge+0x252>
		fault_code=1;
 8005d30:	4b59      	ldr	r3, [pc, #356]	; (8005e98 <Batt_Protection_when_chargedischarge+0x1f0>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8005d36:	4b5d      	ldr	r3, [pc, #372]	; (8005eac <Batt_Protection_when_chargedischarge+0x204>)
 8005d38:	681c      	ldr	r4, [r3, #0]
 8005d3a:	4b54      	ldr	r3, [pc, #336]	; (8005e8c <Batt_Protection_when_chargedischarge+0x1e4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a59      	ldr	r2, [pc, #356]	; (8005ea4 <Batt_Protection_when_chargedischarge+0x1fc>)
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	4611      	mov	r1, r2
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fb f93d 	bl	8000fc4 <__aeabi_fdiv>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005d52:	f7fa ff79 	bl	8000c48 <__aeabi_fsub>
 8005d56:	4603      	mov	r3, r0
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7fb f932 	bl	8000fc4 <__aeabi_fdiv>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461a      	mov	r2, r3
 8005d64:	4b52      	ldr	r3, [pc, #328]	; (8005eb0 <Batt_Protection_when_chargedischarge+0x208>)
 8005d66:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 8005d68:	4b52      	ldr	r3, [pc, #328]	; (8005eb4 <Batt_Protection_when_chargedischarge+0x20c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fa fbc7 	bl	8000500 <__aeabi_f2d>
 8005d72:	a343      	add	r3, pc, #268	; (adr r3, 8005e80 <Batt_Protection_when_chargedischarge+0x1d8>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f7fa fa64 	bl	8000244 <__adddf3>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4610      	mov	r0, r2
 8005d82:	4619      	mov	r1, r3
 8005d84:	f7fa ff0c 	bl	8000ba0 <__aeabi_d2f>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4a4a      	ldr	r2, [pc, #296]	; (8005eb4 <Batt_Protection_when_chargedischarge+0x20c>)
 8005d8c:	6013      	str	r3, [r2, #0]

		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8005d8e:	4b49      	ldr	r3, [pc, #292]	; (8005eb4 <Batt_Protection_when_chargedischarge+0x20c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a47      	ldr	r2, [pc, #284]	; (8005eb0 <Batt_Protection_when_chargedischarge+0x208>)
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fb fa1b 	bl	80011d4 <__aeabi_fcmpgt>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d012      	beq.n	8005dca <Batt_Protection_when_chargedischarge+0x122>
 8005da4:	4b40      	ldr	r3, [pc, #256]	; (8005ea8 <Batt_Protection_when_chargedischarge+0x200>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10e      	bne.n	8005dca <Batt_Protection_when_chargedischarge+0x122>
			Batt_Open_Mode();
 8005dac:	f7fb fcf6 	bl	800179c <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 8005db0:	4b3f      	ldr	r3, [pc, #252]	; (8005eb0 <Batt_Protection_when_chargedischarge+0x208>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a3f      	ldr	r2, [pc, #252]	; (8005eb4 <Batt_Protection_when_chargedischarge+0x20c>)
 8005db6:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 8005db8:	4b3b      	ldr	r3, [pc, #236]	; (8005ea8 <Batt_Protection_when_chargedischarge+0x200>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005dc4:	4836      	ldr	r0, [pc, #216]	; (8005ea0 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005dc6:	f003 f967 	bl	8009098 <HAL_GPIO_WritePin>
		}

		if(flag_trip_undervoltage==OFF) {
 8005dca:	4b37      	ldr	r3, [pc, #220]	; (8005ea8 <Batt_Protection_when_chargedischarge+0x200>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 8093 	bne.w	8005efa <Batt_Protection_when_chargedischarge+0x252>
			if(T_Under_trip-T_trip_cycle>15) {
 8005dd4:	4b36      	ldr	r3, [pc, #216]	; (8005eb0 <Batt_Protection_when_chargedischarge+0x208>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a36      	ldr	r2, [pc, #216]	; (8005eb4 <Batt_Protection_when_chargedischarge+0x20c>)
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fa ff32 	bl	8000c48 <__aeabi_fsub>
 8005de4:	4603      	mov	r3, r0
 8005de6:	4934      	ldr	r1, [pc, #208]	; (8005eb8 <Batt_Protection_when_chargedischarge+0x210>)
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fb f9f3 	bl	80011d4 <__aeabi_fcmpgt>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d017      	beq.n	8005e24 <Batt_Protection_when_chargedischarge+0x17c>
				if((test_tim2%1000)==0) {
 8005df4:	4b31      	ldr	r3, [pc, #196]	; (8005ebc <Batt_Protection_when_chargedischarge+0x214>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <Batt_Protection_when_chargedischarge+0x218>)
 8005dfa:	fb83 1302 	smull	r1, r3, r3, r2
 8005dfe:	1199      	asrs	r1, r3, #6
 8005e00:	17d3      	asrs	r3, r2, #31
 8005e02:	1acb      	subs	r3, r1, r3
 8005e04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d173      	bne.n	8005efa <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 8005e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e16:	4822      	ldr	r0, [pc, #136]	; (8005ea0 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005e18:	f003 f956 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005e1c:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <Batt_Protection_when_chargedischarge+0x214>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e06a      	b.n	8005efa <Batt_Protection_when_chargedischarge+0x252>
				}
			}
			else if(T_Under_trip-T_trip_cycle>10) {
 8005e24:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <Batt_Protection_when_chargedischarge+0x208>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a22      	ldr	r2, [pc, #136]	; (8005eb4 <Batt_Protection_when_chargedischarge+0x20c>)
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fa ff0a 	bl	8000c48 <__aeabi_fsub>
 8005e34:	4603      	mov	r3, r0
 8005e36:	4923      	ldr	r1, [pc, #140]	; (8005ec4 <Batt_Protection_when_chargedischarge+0x21c>)
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fb f9cb 	bl	80011d4 <__aeabi_fcmpgt>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d043      	beq.n	8005ecc <Batt_Protection_when_chargedischarge+0x224>
				if((test_tim2%100)==0) {
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <Batt_Protection_when_chargedischarge+0x214>)
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4b1f      	ldr	r3, [pc, #124]	; (8005ec8 <Batt_Protection_when_chargedischarge+0x220>)
 8005e4a:	fb83 1302 	smull	r1, r3, r3, r2
 8005e4e:	1159      	asrs	r1, r3, #5
 8005e50:	17d3      	asrs	r3, r2, #31
 8005e52:	1acb      	subs	r3, r1, r3
 8005e54:	2164      	movs	r1, #100	; 0x64
 8005e56:	fb01 f303 	mul.w	r3, r1, r3
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d14c      	bne.n	8005efa <Batt_Protection_when_chargedischarge+0x252>
					BUZZ_Toggle;
 8005e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e64:	480e      	ldr	r0, [pc, #56]	; (8005ea0 <Batt_Protection_when_chargedischarge+0x1f8>)
 8005e66:	f003 f92f 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005e6a:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <Batt_Protection_when_chargedischarge+0x214>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	e043      	b.n	8005efa <Batt_Protection_when_chargedischarge+0x252>
 8005e72:	bf00      	nop
 8005e74:	f3af 8000 	nop.w
 8005e78:	cccccccd 	.word	0xcccccccd
 8005e7c:	3feccccc 	.word	0x3feccccc
 8005e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8005e84:	3f50624d 	.word	0x3f50624d
 8005e88:	20000284 	.word	0x20000284
 8005e8c:	20000280 	.word	0x20000280
 8005e90:	20000288 	.word	0x20000288
 8005e94:	2000028c 	.word	0x2000028c
 8005e98:	20000300 	.word	0x20000300
 8005e9c:	20000318 	.word	0x20000318
 8005ea0:	40011000 	.word	0x40011000
 8005ea4:	2000005c 	.word	0x2000005c
 8005ea8:	20000314 	.word	0x20000314
 8005eac:	20000068 	.word	0x20000068
 8005eb0:	20000c30 	.word	0x20000c30
 8005eb4:	20000c50 	.word	0x20000c50
 8005eb8:	41700000 	.word	0x41700000
 8005ebc:	2000030c 	.word	0x2000030c
 8005ec0:	10624dd3 	.word	0x10624dd3
 8005ec4:	41200000 	.word	0x41200000
 8005ec8:	51eb851f 	.word	0x51eb851f
				}
			}
			else if(T_Under_trip-T_trip_cycle>1) {
 8005ecc:	4b78      	ldr	r3, [pc, #480]	; (80060b0 <Batt_Protection_when_chargedischarge+0x408>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a78      	ldr	r2, [pc, #480]	; (80060b4 <Batt_Protection_when_chargedischarge+0x40c>)
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fa feb6 	bl	8000c48 <__aeabi_fsub>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fb f976 	bl	80011d4 <__aeabi_fcmpgt>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <Batt_Protection_when_chargedischarge+0x252>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ef4:	4870      	ldr	r0, [pc, #448]	; (80060b8 <Batt_Protection_when_chargedischarge+0x410>)
 8005ef6:	f003 f8cf 	bl	8009098 <HAL_GPIO_WritePin>
			}
		}
	}

	// Over Current Protection
	if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {  //Indikasi terjadi Over Current
 8005efa:	4b70      	ldr	r3, [pc, #448]	; (80060bc <Batt_Protection_when_chargedischarge+0x414>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a70      	ldr	r2, [pc, #448]	; (80060c0 <Batt_Protection_when_chargedischarge+0x418>)
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fa fe9f 	bl	8000c48 <__aeabi_fsub>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fb f95f 	bl	80011d4 <__aeabi_fcmpgt>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f000 80e7 	beq.w	80060ec <Batt_Protection_when_chargedischarge+0x444>
 8005f1e:	4b69      	ldr	r3, [pc, #420]	; (80060c4 <Batt_Protection_when_chargedischarge+0x41c>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 80e2 	bne.w	80060ec <Batt_Protection_when_chargedischarge+0x444>
		fault_code=2;
 8005f28:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <Batt_Protection_when_chargedischarge+0x420>)
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=TMS_I_Over/((IBATT/I_Over_Set)-1);
 8005f2e:	4b67      	ldr	r3, [pc, #412]	; (80060cc <Batt_Protection_when_chargedischarge+0x424>)
 8005f30:	681c      	ldr	r4, [r3, #0]
 8005f32:	4b62      	ldr	r3, [pc, #392]	; (80060bc <Batt_Protection_when_chargedischarge+0x414>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a62      	ldr	r2, [pc, #392]	; (80060c0 <Batt_Protection_when_chargedischarge+0x418>)
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fb f841 	bl	8000fc4 <__aeabi_fdiv>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fa fe7d 	bl	8000c48 <__aeabi_fsub>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4619      	mov	r1, r3
 8005f52:	4620      	mov	r0, r4
 8005f54:	f7fb f836 	bl	8000fc4 <__aeabi_fdiv>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4b5c      	ldr	r3, [pc, #368]	; (80060d0 <Batt_Protection_when_chargedischarge+0x428>)
 8005f5e:	601a      	str	r2, [r3, #0]
		T_I_Over_trip_cycle+=0.001;
 8005f60:	4b5c      	ldr	r3, [pc, #368]	; (80060d4 <Batt_Protection_when_chargedischarge+0x42c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fa facb 	bl	8000500 <__aeabi_f2d>
 8005f6a:	a34f      	add	r3, pc, #316	; (adr r3, 80060a8 <Batt_Protection_when_chargedischarge+0x400>)
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f7fa f968 	bl	8000244 <__adddf3>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	f7fa fe10 	bl	8000ba0 <__aeabi_d2f>
 8005f80:	4603      	mov	r3, r0
 8005f82:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <Batt_Protection_when_chargedischarge+0x42c>)
 8005f84:	6013      	str	r3, [r2, #0]

		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 8005f86:	4b53      	ldr	r3, [pc, #332]	; (80060d4 <Batt_Protection_when_chargedischarge+0x42c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a51      	ldr	r2, [pc, #324]	; (80060d0 <Batt_Protection_when_chargedischarge+0x428>)
 8005f8c:	6812      	ldr	r2, [r2, #0]
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fb f91f 	bl	80011d4 <__aeabi_fcmpgt>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d012      	beq.n	8005fc2 <Batt_Protection_when_chargedischarge+0x31a>
 8005f9c:	4b49      	ldr	r3, [pc, #292]	; (80060c4 <Batt_Protection_when_chargedischarge+0x41c>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10e      	bne.n	8005fc2 <Batt_Protection_when_chargedischarge+0x31a>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8005fa4:	4b4a      	ldr	r3, [pc, #296]	; (80060d0 <Batt_Protection_when_chargedischarge+0x428>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a4a      	ldr	r2, [pc, #296]	; (80060d4 <Batt_Protection_when_chargedischarge+0x42c>)
 8005faa:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 8005fac:	4b45      	ldr	r3, [pc, #276]	; (80060c4 <Batt_Protection_when_chargedischarge+0x41c>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8005fb2:	f7fb fbf3 	bl	800179c <Batt_Open_Mode>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fbc:	483e      	ldr	r0, [pc, #248]	; (80060b8 <Batt_Protection_when_chargedischarge+0x410>)
 8005fbe:	f003 f86b 	bl	8009098 <HAL_GPIO_WritePin>
		}
		if(flag_trip_overcurrentdischarge==OFF) {
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <Batt_Protection_when_chargedischarge+0x41c>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f040 848b 	bne.w	80068e2 <Batt_Protection_when_chargedischarge+0xc3a>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005fcc:	4b40      	ldr	r3, [pc, #256]	; (80060d0 <Batt_Protection_when_chargedischarge+0x428>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a40      	ldr	r2, [pc, #256]	; (80060d4 <Batt_Protection_when_chargedischarge+0x42c>)
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7fa fe36 	bl	8000c48 <__aeabi_fsub>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	493e      	ldr	r1, [pc, #248]	; (80060d8 <Batt_Protection_when_chargedischarge+0x430>)
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fb f8f7 	bl	80011d4 <__aeabi_fcmpgt>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d019      	beq.n	8006020 <Batt_Protection_when_chargedischarge+0x378>
				if((test_tim2%1000)==0) {
 8005fec:	4b3b      	ldr	r3, [pc, #236]	; (80060dc <Batt_Protection_when_chargedischarge+0x434>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <Batt_Protection_when_chargedischarge+0x438>)
 8005ff2:	fb83 1302 	smull	r1, r3, r3, r2
 8005ff6:	1199      	asrs	r1, r3, #6
 8005ff8:	17d3      	asrs	r3, r2, #31
 8005ffa:	1acb      	subs	r3, r1, r3
 8005ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	f040 846b 	bne.w	80068e2 <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 800600c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006010:	4829      	ldr	r0, [pc, #164]	; (80060b8 <Batt_Protection_when_chargedischarge+0x410>)
 8006012:	f003 f859 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8006016:	4b31      	ldr	r3, [pc, #196]	; (80060dc <Batt_Protection_when_chargedischarge+0x434>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 800601c:	f000 bc61 	b.w	80068e2 <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8006020:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <Batt_Protection_when_chargedischarge+0x428>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <Batt_Protection_when_chargedischarge+0x42c>)
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa fe0c 	bl	8000c48 <__aeabi_fsub>
 8006030:	4603      	mov	r3, r0
 8006032:	492c      	ldr	r1, [pc, #176]	; (80060e4 <Batt_Protection_when_chargedischarge+0x43c>)
 8006034:	4618      	mov	r0, r3
 8006036:	f7fb f8cd 	bl	80011d4 <__aeabi_fcmpgt>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d018      	beq.n	8006072 <Batt_Protection_when_chargedischarge+0x3ca>
				if((test_tim2%100)==0) {
 8006040:	4b26      	ldr	r3, [pc, #152]	; (80060dc <Batt_Protection_when_chargedischarge+0x434>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <Batt_Protection_when_chargedischarge+0x440>)
 8006046:	fb83 1302 	smull	r1, r3, r3, r2
 800604a:	1159      	asrs	r1, r3, #5
 800604c:	17d3      	asrs	r3, r2, #31
 800604e:	1acb      	subs	r3, r1, r3
 8006050:	2164      	movs	r1, #100	; 0x64
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	f040 8442 	bne.w	80068e2 <Batt_Protection_when_chargedischarge+0xc3a>
					BUZZ_Toggle;
 800605e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006062:	4815      	ldr	r0, [pc, #84]	; (80060b8 <Batt_Protection_when_chargedischarge+0x410>)
 8006064:	f003 f830 	bl	80090c8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <Batt_Protection_when_chargedischarge+0x434>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 800606e:	f000 bc38 	b.w	80068e2 <Batt_Protection_when_chargedischarge+0xc3a>
				}
			}
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <Batt_Protection_when_chargedischarge+0x428>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <Batt_Protection_when_chargedischarge+0x42c>)
 8006078:	6812      	ldr	r2, [r2, #0]
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f7fa fde3 	bl	8000c48 <__aeabi_fsub>
 8006082:	4603      	mov	r3, r0
 8006084:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006088:	4618      	mov	r0, r3
 800608a:	f7fb f8a3 	bl	80011d4 <__aeabi_fcmpgt>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <Batt_Protection_when_chargedischarge+0x3f0>
		if(flag_trip_overcurrentdischarge==OFF) {
 8006094:	f000 bc25 	b.w	80068e2 <Batt_Protection_when_chargedischarge+0xc3a>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8006098:	2201      	movs	r2, #1
 800609a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800609e:	4806      	ldr	r0, [pc, #24]	; (80060b8 <Batt_Protection_when_chargedischarge+0x410>)
 80060a0:	f002 fffa 	bl	8009098 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 80060a4:	f000 bc1d 	b.w	80068e2 <Batt_Protection_when_chargedischarge+0xc3a>
 80060a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80060ac:	3f50624d 	.word	0x3f50624d
 80060b0:	20000c30 	.word	0x20000c30
 80060b4:	20000c50 	.word	0x20000c50
 80060b8:	40011000 	.word	0x40011000
 80060bc:	20000284 	.word	0x20000284
 80060c0:	20000048 	.word	0x20000048
 80060c4:	20000316 	.word	0x20000316
 80060c8:	20000300 	.word	0x20000300
 80060cc:	2000006c 	.word	0x2000006c
 80060d0:	20000304 	.word	0x20000304
 80060d4:	20000308 	.word	0x20000308
 80060d8:	41700000 	.word	0x41700000
 80060dc:	2000030c 	.word	0x2000030c
 80060e0:	10624dd3 	.word	0x10624dd3
 80060e4:	41200000 	.word	0x41200000
 80060e8:	51eb851f 	.word	0x51eb851f
			}
		}
	}

	// Over Temperature protection
	else if(((50-Suhu_T1 < 10)||(85-Suhu_T2 < 10)||(50-Suhu_T3 < 10)||(85-Suhu_T4 < 10)) && flag_trip_overtemperature==OFF) {
 80060ec:	4b8e      	ldr	r3, [pc, #568]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	488e      	ldr	r0, [pc, #568]	; (800632c <Batt_Protection_when_chargedischarge+0x684>)
 80060f4:	f7fa fda8 	bl	8000c48 <__aeabi_fsub>
 80060f8:	4603      	mov	r3, r0
 80060fa:	498d      	ldr	r1, [pc, #564]	; (8006330 <Batt_Protection_when_chargedischarge+0x688>)
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fb f84b 	bl	8001198 <__aeabi_fcmplt>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d12a      	bne.n	800615e <Batt_Protection_when_chargedischarge+0x4b6>
 8006108:	4b8a      	ldr	r3, [pc, #552]	; (8006334 <Batt_Protection_when_chargedischarge+0x68c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4619      	mov	r1, r3
 800610e:	488a      	ldr	r0, [pc, #552]	; (8006338 <Batt_Protection_when_chargedischarge+0x690>)
 8006110:	f7fa fd9a 	bl	8000c48 <__aeabi_fsub>
 8006114:	4603      	mov	r3, r0
 8006116:	4986      	ldr	r1, [pc, #536]	; (8006330 <Batt_Protection_when_chargedischarge+0x688>)
 8006118:	4618      	mov	r0, r3
 800611a:	f7fb f83d 	bl	8001198 <__aeabi_fcmplt>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11c      	bne.n	800615e <Batt_Protection_when_chargedischarge+0x4b6>
 8006124:	4b85      	ldr	r3, [pc, #532]	; (800633c <Batt_Protection_when_chargedischarge+0x694>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4619      	mov	r1, r3
 800612a:	4880      	ldr	r0, [pc, #512]	; (800632c <Batt_Protection_when_chargedischarge+0x684>)
 800612c:	f7fa fd8c 	bl	8000c48 <__aeabi_fsub>
 8006130:	4603      	mov	r3, r0
 8006132:	497f      	ldr	r1, [pc, #508]	; (8006330 <Batt_Protection_when_chargedischarge+0x688>)
 8006134:	4618      	mov	r0, r3
 8006136:	f7fb f82f 	bl	8001198 <__aeabi_fcmplt>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10e      	bne.n	800615e <Batt_Protection_when_chargedischarge+0x4b6>
 8006140:	4b7f      	ldr	r3, [pc, #508]	; (8006340 <Batt_Protection_when_chargedischarge+0x698>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4619      	mov	r1, r3
 8006146:	487c      	ldr	r0, [pc, #496]	; (8006338 <Batt_Protection_when_chargedischarge+0x690>)
 8006148:	f7fa fd7e 	bl	8000c48 <__aeabi_fsub>
 800614c:	4603      	mov	r3, r0
 800614e:	4978      	ldr	r1, [pc, #480]	; (8006330 <Batt_Protection_when_chargedischarge+0x688>)
 8006150:	4618      	mov	r0, r3
 8006152:	f7fb f821 	bl	8001198 <__aeabi_fcmplt>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8101 	beq.w	8006360 <Batt_Protection_when_chargedischarge+0x6b8>
 800615e:	4b79      	ldr	r3, [pc, #484]	; (8006344 <Batt_Protection_when_chargedischarge+0x69c>)
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 80fc 	bne.w	8006360 <Batt_Protection_when_chargedischarge+0x6b8>
		fault_code=3;
 8006168:	4b77      	ldr	r3, [pc, #476]	; (8006348 <Batt_Protection_when_chargedischarge+0x6a0>)
 800616a:	2203      	movs	r2, #3
 800616c:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 800616e:	4b77      	ldr	r3, [pc, #476]	; (800634c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	496f      	ldr	r1, [pc, #444]	; (8006330 <Batt_Protection_when_chargedischarge+0x688>)
 8006174:	4618      	mov	r0, r3
 8006176:	f7fa fd67 	bl	8000c48 <__aeabi_fsub>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	4b6a      	ldr	r3, [pc, #424]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7fb f807 	bl	8001198 <__aeabi_fcmplt>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d029      	beq.n	80061e4 <Batt_Protection_when_chargedischarge+0x53c>
 8006190:	4b6e      	ldr	r3, [pc, #440]	; (800634c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	496e      	ldr	r1, [pc, #440]	; (8006350 <Batt_Protection_when_chargedischarge+0x6a8>)
 8006196:	4618      	mov	r0, r3
 8006198:	f7fa fd56 	bl	8000c48 <__aeabi_fsub>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	4b61      	ldr	r3, [pc, #388]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4619      	mov	r1, r3
 80061a6:	4610      	mov	r0, r2
 80061a8:	f7fb f80a 	bl	80011c0 <__aeabi_fcmpge>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d018      	beq.n	80061e4 <Batt_Protection_when_chargedischarge+0x53c>
			if((test_tim2%1000)==0) {
 80061b2:	4b68      	ldr	r3, [pc, #416]	; (8006354 <Batt_Protection_when_chargedischarge+0x6ac>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4b68      	ldr	r3, [pc, #416]	; (8006358 <Batt_Protection_when_chargedischarge+0x6b0>)
 80061b8:	fb83 1302 	smull	r1, r3, r3, r2
 80061bc:	1199      	asrs	r1, r3, #6
 80061be:	17d3      	asrs	r3, r2, #31
 80061c0:	1acb      	subs	r3, r1, r3
 80061c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80061c6:	fb01 f303 	mul.w	r3, r1, r3
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f040 80aa 	bne.w	8006326 <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 80061d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061d6:	4861      	ldr	r0, [pc, #388]	; (800635c <Batt_Protection_when_chargedischarge+0x6b4>)
 80061d8:	f002 ff76 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80061dc:	4b5d      	ldr	r3, [pc, #372]	; (8006354 <Batt_Protection_when_chargedischarge+0x6ac>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 80061e2:	e0a0      	b.n	8006326 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-5 && Suhu_T1<=Temp_Over_Set-2){
 80061e4:	4b59      	ldr	r3, [pc, #356]	; (800634c <Batt_Protection_when_chargedischarge+0x6a4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4959      	ldr	r1, [pc, #356]	; (8006350 <Batt_Protection_when_chargedischarge+0x6a8>)
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fa fd2c 	bl	8000c48 <__aeabi_fsub>
 80061f0:	4603      	mov	r3, r0
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b4c      	ldr	r3, [pc, #304]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f7fa ffcc 	bl	8001198 <__aeabi_fcmplt>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d029      	beq.n	800625a <Batt_Protection_when_chargedischarge+0x5b2>
 8006206:	4b51      	ldr	r3, [pc, #324]	; (800634c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800620e:	4618      	mov	r0, r3
 8006210:	f7fa fd1a 	bl	8000c48 <__aeabi_fsub>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	4b43      	ldr	r3, [pc, #268]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f7fa ffce 	bl	80011c0 <__aeabi_fcmpge>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d017      	beq.n	800625a <Batt_Protection_when_chargedischarge+0x5b2>
			if((test_tim2%500)==0) {
 800622a:	4b4a      	ldr	r3, [pc, #296]	; (8006354 <Batt_Protection_when_chargedischarge+0x6ac>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b4a      	ldr	r3, [pc, #296]	; (8006358 <Batt_Protection_when_chargedischarge+0x6b0>)
 8006230:	fb83 1302 	smull	r1, r3, r3, r2
 8006234:	1159      	asrs	r1, r3, #5
 8006236:	17d3      	asrs	r3, r2, #31
 8006238:	1acb      	subs	r3, r1, r3
 800623a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d16e      	bne.n	8006326 <Batt_Protection_when_chargedischarge+0x67e>
				BUZZ_Toggle;
 8006248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800624c:	4843      	ldr	r0, [pc, #268]	; (800635c <Batt_Protection_when_chargedischarge+0x6b4>)
 800624e:	f002 ff3b 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006252:	4b40      	ldr	r3, [pc, #256]	; (8006354 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006258:	e065      	b.n	8006326 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>Temp_Over_Set-2 && Suhu_T1<=Temp_Over_Set) {
 800625a:	4b3c      	ldr	r3, [pc, #240]	; (800634c <Batt_Protection_when_chargedischarge+0x6a4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006262:	4618      	mov	r0, r3
 8006264:	f7fa fcf0 	bl	8000c48 <__aeabi_fsub>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f7fa ff90 	bl	8001198 <__aeabi_fcmplt>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d022      	beq.n	80062c4 <Batt_Protection_when_chargedischarge+0x61c>
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a32      	ldr	r2, [pc, #200]	; (800634c <Batt_Protection_when_chargedischarge+0x6a4>)
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	4611      	mov	r1, r2
 8006288:	4618      	mov	r0, r3
 800628a:	f7fa ff8f 	bl	80011ac <__aeabi_fcmple>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d017      	beq.n	80062c4 <Batt_Protection_when_chargedischarge+0x61c>
			if((test_tim2%500)==0)
 8006294:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <Batt_Protection_when_chargedischarge+0x6ac>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b2f      	ldr	r3, [pc, #188]	; (8006358 <Batt_Protection_when_chargedischarge+0x6b0>)
 800629a:	fb83 1302 	smull	r1, r3, r3, r2
 800629e:	1159      	asrs	r1, r3, #5
 80062a0:	17d3      	asrs	r3, r2, #31
 80062a2:	1acb      	subs	r3, r1, r3
 80062a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d139      	bne.n	8006326 <Batt_Protection_when_chargedischarge+0x67e>
			{
				BUZZ_Toggle;
 80062b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062b6:	4829      	ldr	r0, [pc, #164]	; (800635c <Batt_Protection_when_chargedischarge+0x6b4>)
 80062b8:	f002 ff06 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <Batt_Protection_when_chargedischarge+0x6ac>)
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0)
 80062c2:	e030      	b.n	8006326 <Batt_Protection_when_chargedischarge+0x67e>
			}
		}
		else if(Suhu_T1>50||Suhu_T2>85||Suhu_T3>50||Suhu_T4>85) {
 80062c4:	4b18      	ldr	r3, [pc, #96]	; (8006328 <Batt_Protection_when_chargedischarge+0x680>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4918      	ldr	r1, [pc, #96]	; (800632c <Batt_Protection_when_chargedischarge+0x684>)
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fa ff82 	bl	80011d4 <__aeabi_fcmpgt>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d11b      	bne.n	800630e <Batt_Protection_when_chargedischarge+0x666>
 80062d6:	4b17      	ldr	r3, [pc, #92]	; (8006334 <Batt_Protection_when_chargedischarge+0x68c>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4917      	ldr	r1, [pc, #92]	; (8006338 <Batt_Protection_when_chargedischarge+0x690>)
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fa ff79 	bl	80011d4 <__aeabi_fcmpgt>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d112      	bne.n	800630e <Batt_Protection_when_chargedischarge+0x666>
 80062e8:	4b14      	ldr	r3, [pc, #80]	; (800633c <Batt_Protection_when_chargedischarge+0x694>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	490f      	ldr	r1, [pc, #60]	; (800632c <Batt_Protection_when_chargedischarge+0x684>)
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fa ff70 	bl	80011d4 <__aeabi_fcmpgt>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <Batt_Protection_when_chargedischarge+0x666>
 80062fa:	4b11      	ldr	r3, [pc, #68]	; (8006340 <Batt_Protection_when_chargedischarge+0x698>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	490e      	ldr	r1, [pc, #56]	; (8006338 <Batt_Protection_when_chargedischarge+0x690>)
 8006300:	4618      	mov	r0, r3
 8006302:	f7fa ff67 	bl	80011d4 <__aeabi_fcmpgt>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d100      	bne.n	800630e <Batt_Protection_when_chargedischarge+0x666>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 800630c:	e2ea      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 800630e:	f7fb fa45 	bl	800179c <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <Batt_Protection_when_chargedischarge+0x69c>)
 8006314:	2201      	movs	r2, #1
 8006316:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006318:	2200      	movs	r2, #0
 800631a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800631e:	480f      	ldr	r0, [pc, #60]	; (800635c <Batt_Protection_when_chargedischarge+0x6b4>)
 8006320:	f002 feba 	bl	8009098 <HAL_GPIO_WritePin>
		if(Suhu_T1>Temp_Over_Set-10 && Suhu_T1<=Temp_Over_Set-5) {
 8006324:	e2de      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
 8006326:	e2dd      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
 8006328:	200002b0 	.word	0x200002b0
 800632c:	42480000 	.word	0x42480000
 8006330:	41200000 	.word	0x41200000
 8006334:	200002b4 	.word	0x200002b4
 8006338:	42aa0000 	.word	0x42aa0000
 800633c:	200002b8 	.word	0x200002b8
 8006340:	200002bc 	.word	0x200002bc
 8006344:	20000310 	.word	0x20000310
 8006348:	20000300 	.word	0x20000300
 800634c:	20000050 	.word	0x20000050
 8006350:	40a00000 	.word	0x40a00000
 8006354:	2000030c 	.word	0x2000030c
 8006358:	10624dd3 	.word	0x10624dd3
 800635c:	40011000 	.word	0x40011000
		}
	}

	// Under Temperature protection
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8006360:	4b96      	ldr	r3, [pc, #600]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a96      	ldr	r2, [pc, #600]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	4611      	mov	r1, r2
 800636a:	4618      	mov	r0, r3
 800636c:	f7fa fc6c 	bl	8000c48 <__aeabi_fsub>
 8006370:	4603      	mov	r3, r0
 8006372:	4994      	ldr	r1, [pc, #592]	; (80065c4 <Batt_Protection_when_chargedischarge+0x91c>)
 8006374:	4618      	mov	r0, r3
 8006376:	f7fa ff19 	bl	80011ac <__aeabi_fcmple>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d130      	bne.n	80063e2 <Batt_Protection_when_chargedischarge+0x73a>
 8006380:	4b91      	ldr	r3, [pc, #580]	; (80065c8 <Batt_Protection_when_chargedischarge+0x920>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a8e      	ldr	r2, [pc, #568]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7fa fc5c 	bl	8000c48 <__aeabi_fsub>
 8006390:	4603      	mov	r3, r0
 8006392:	498c      	ldr	r1, [pc, #560]	; (80065c4 <Batt_Protection_when_chargedischarge+0x91c>)
 8006394:	4618      	mov	r0, r3
 8006396:	f7fa ff09 	bl	80011ac <__aeabi_fcmple>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d120      	bne.n	80063e2 <Batt_Protection_when_chargedischarge+0x73a>
 80063a0:	4b8a      	ldr	r3, [pc, #552]	; (80065cc <Batt_Protection_when_chargedischarge+0x924>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a86      	ldr	r2, [pc, #536]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fa fc4c 	bl	8000c48 <__aeabi_fsub>
 80063b0:	4603      	mov	r3, r0
 80063b2:	4984      	ldr	r1, [pc, #528]	; (80065c4 <Batt_Protection_when_chargedischarge+0x91c>)
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fa fef9 	bl	80011ac <__aeabi_fcmple>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d110      	bne.n	80063e2 <Batt_Protection_when_chargedischarge+0x73a>
 80063c0:	4b83      	ldr	r3, [pc, #524]	; (80065d0 <Batt_Protection_when_chargedischarge+0x928>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a7e      	ldr	r2, [pc, #504]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 80063c6:	6812      	ldr	r2, [r2, #0]
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fa fc3c 	bl	8000c48 <__aeabi_fsub>
 80063d0:	4603      	mov	r3, r0
 80063d2:	497c      	ldr	r1, [pc, #496]	; (80065c4 <Batt_Protection_when_chargedischarge+0x91c>)
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fa fee9 	bl	80011ac <__aeabi_fcmple>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 8105 	beq.w	80065ec <Batt_Protection_when_chargedischarge+0x944>
 80063e2:	4b7c      	ldr	r3, [pc, #496]	; (80065d4 <Batt_Protection_when_chargedischarge+0x92c>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f040 8100 	bne.w	80065ec <Batt_Protection_when_chargedischarge+0x944>
		fault_code=4;
 80063ec:	4b7a      	ldr	r3, [pc, #488]	; (80065d8 <Batt_Protection_when_chargedischarge+0x930>)
 80063ee:	2204      	movs	r2, #4
 80063f0:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80063f2:	4b73      	ldr	r3, [pc, #460]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4973      	ldr	r1, [pc, #460]	; (80065c4 <Batt_Protection_when_chargedischarge+0x91c>)
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fa fc27 	bl	8000c4c <__addsf3>
 80063fe:	4603      	mov	r3, r0
 8006400:	461a      	mov	r2, r3
 8006402:	4b6e      	ldr	r3, [pc, #440]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f7fa fed9 	bl	80011c0 <__aeabi_fcmpge>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d029      	beq.n	8006468 <Batt_Protection_when_chargedischarge+0x7c0>
 8006414:	4b6a      	ldr	r3, [pc, #424]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4970      	ldr	r1, [pc, #448]	; (80065dc <Batt_Protection_when_chargedischarge+0x934>)
 800641a:	4618      	mov	r0, r3
 800641c:	f7fa fc16 	bl	8000c4c <__addsf3>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	4b65      	ldr	r3, [pc, #404]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f7fa feb4 	bl	8001198 <__aeabi_fcmplt>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d018      	beq.n	8006468 <Batt_Protection_when_chargedischarge+0x7c0>
			if((test_tim2%1000)==0) {
 8006436:	4b6a      	ldr	r3, [pc, #424]	; (80065e0 <Batt_Protection_when_chargedischarge+0x938>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b6a      	ldr	r3, [pc, #424]	; (80065e4 <Batt_Protection_when_chargedischarge+0x93c>)
 800643c:	fb83 1302 	smull	r1, r3, r3, r2
 8006440:	1199      	asrs	r1, r3, #6
 8006442:	17d3      	asrs	r3, r2, #31
 8006444:	1acb      	subs	r3, r1, r3
 8006446:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	f040 80b2 	bne.w	80065ba <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 8006456:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800645a:	4863      	ldr	r0, [pc, #396]	; (80065e8 <Batt_Protection_when_chargedischarge+0x940>)
 800645c:	f002 fe34 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006460:	4b5f      	ldr	r3, [pc, #380]	; (80065e0 <Batt_Protection_when_chargedischarge+0x938>)
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8006466:	e0a8      	b.n	80065ba <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 8006468:	4b55      	ldr	r3, [pc, #340]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	495b      	ldr	r1, [pc, #364]	; (80065dc <Batt_Protection_when_chargedischarge+0x934>)
 800646e:	4618      	mov	r0, r3
 8006470:	f7fa fbec 	bl	8000c4c <__addsf3>
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	4b50      	ldr	r3, [pc, #320]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fa fe9e 	bl	80011c0 <__aeabi_fcmpge>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d029      	beq.n	80064de <Batt_Protection_when_chargedischarge+0x836>
 800648a:	4b4d      	ldr	r3, [pc, #308]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006492:	4618      	mov	r0, r3
 8006494:	f7fa fbda 	bl	8000c4c <__addsf3>
 8006498:	4603      	mov	r3, r0
 800649a:	461a      	mov	r2, r3
 800649c:	4b47      	ldr	r3, [pc, #284]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f7fa fe78 	bl	8001198 <__aeabi_fcmplt>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d017      	beq.n	80064de <Batt_Protection_when_chargedischarge+0x836>
			if((test_tim2%500)==0) {
 80064ae:	4b4c      	ldr	r3, [pc, #304]	; (80065e0 <Batt_Protection_when_chargedischarge+0x938>)
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b4c      	ldr	r3, [pc, #304]	; (80065e4 <Batt_Protection_when_chargedischarge+0x93c>)
 80064b4:	fb83 1302 	smull	r1, r3, r3, r2
 80064b8:	1159      	asrs	r1, r3, #5
 80064ba:	17d3      	asrs	r3, r2, #31
 80064bc:	1acb      	subs	r3, r1, r3
 80064be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80064c2:	fb01 f303 	mul.w	r3, r1, r3
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d176      	bne.n	80065ba <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 80064cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064d0:	4845      	ldr	r0, [pc, #276]	; (80065e8 <Batt_Protection_when_chargedischarge+0x940>)
 80064d2:	f002 fdf9 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80064d6:	4b42      	ldr	r3, [pc, #264]	; (80065e0 <Batt_Protection_when_chargedischarge+0x938>)
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 80064dc:	e06d      	b.n	80065ba <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 80064de:	4b38      	ldr	r3, [pc, #224]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fa fbb0 	bl	8000c4c <__addsf3>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	4b32      	ldr	r3, [pc, #200]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7fa fe6c 	bl	80011d4 <__aeabi_fcmpgt>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d022      	beq.n	8006548 <Batt_Protection_when_chargedischarge+0x8a0>
 8006502:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2e      	ldr	r2, [pc, #184]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7fa fe57 	bl	80011c0 <__aeabi_fcmpge>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d017      	beq.n	8006548 <Batt_Protection_when_chargedischarge+0x8a0>
			if((test_tim2%500)==0) {
 8006518:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <Batt_Protection_when_chargedischarge+0x938>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <Batt_Protection_when_chargedischarge+0x93c>)
 800651e:	fb83 1302 	smull	r1, r3, r3, r2
 8006522:	1159      	asrs	r1, r3, #5
 8006524:	17d3      	asrs	r3, r2, #31
 8006526:	1acb      	subs	r3, r1, r3
 8006528:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d141      	bne.n	80065ba <Batt_Protection_when_chargedischarge+0x912>
				BUZZ_Toggle;
 8006536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800653a:	482b      	ldr	r0, [pc, #172]	; (80065e8 <Batt_Protection_when_chargedischarge+0x940>)
 800653c:	f002 fdc4 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006540:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <Batt_Protection_when_chargedischarge+0x938>)
 8006542:	2200      	movs	r2, #0
 8006544:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006546:	e038      	b.n	80065ba <Batt_Protection_when_chargedischarge+0x912>
			}
		}
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 8006548:	4b1c      	ldr	r3, [pc, #112]	; (80065bc <Batt_Protection_when_chargedischarge+0x914>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 800654e:	6812      	ldr	r2, [r2, #0]
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f7fa fe20 	bl	8001198 <__aeabi_fcmplt>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d121      	bne.n	80065a2 <Batt_Protection_when_chargedischarge+0x8fa>
 800655e:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <Batt_Protection_when_chargedischarge+0x920>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a17      	ldr	r2, [pc, #92]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	4611      	mov	r1, r2
 8006568:	4618      	mov	r0, r3
 800656a:	f7fa fe15 	bl	8001198 <__aeabi_fcmplt>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d116      	bne.n	80065a2 <Batt_Protection_when_chargedischarge+0x8fa>
 8006574:	4b15      	ldr	r3, [pc, #84]	; (80065cc <Batt_Protection_when_chargedischarge+0x924>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f7fa fe0a 	bl	8001198 <__aeabi_fcmplt>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <Batt_Protection_when_chargedischarge+0x8fa>
 800658a:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <Batt_Protection_when_chargedischarge+0x928>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a0c      	ldr	r2, [pc, #48]	; (80065c0 <Batt_Protection_when_chargedischarge+0x918>)
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7fa fdff 	bl	8001198 <__aeabi_fcmplt>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d100      	bne.n	80065a2 <Batt_Protection_when_chargedischarge+0x8fa>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80065a0:	e1a0      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 80065a2:	f7fb f8fb 	bl	800179c <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 80065a6:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <Batt_Protection_when_chargedischarge+0x92c>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80065ac:	2200      	movs	r2, #0
 80065ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065b2:	480d      	ldr	r0, [pc, #52]	; (80065e8 <Batt_Protection_when_chargedischarge+0x940>)
 80065b4:	f002 fd70 	bl	8009098 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80065b8:	e194      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
 80065ba:	e193      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
 80065bc:	200002b0 	.word	0x200002b0
 80065c0:	20000054 	.word	0x20000054
 80065c4:	41200000 	.word	0x41200000
 80065c8:	200002b4 	.word	0x200002b4
 80065cc:	200002b8 	.word	0x200002b8
 80065d0:	200002bc 	.word	0x200002bc
 80065d4:	20000311 	.word	0x20000311
 80065d8:	20000300 	.word	0x20000300
 80065dc:	40a00000 	.word	0x40a00000
 80065e0:	2000030c 	.word	0x2000030c
 80065e4:	10624dd3 	.word	0x10624dd3
 80065e8:	40011000 	.word	0x40011000
		}
	}

	// SOC OverDischarge protection
	else if(Pack_SOC-SOC_Under_Set<=10 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 80065ec:	4b83      	ldr	r3, [pc, #524]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a83      	ldr	r2, [pc, #524]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fa fb26 	bl	8000c48 <__aeabi_fsub>
 80065fc:	4603      	mov	r3, r0
 80065fe:	4981      	ldr	r1, [pc, #516]	; (8006804 <Batt_Protection_when_chargedischarge+0xb5c>)
 8006600:	4618      	mov	r0, r3
 8006602:	f7fa fdd3 	bl	80011ac <__aeabi_fcmple>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80d1 	beq.w	80067b0 <Batt_Protection_when_chargedischarge+0xb08>
 800660e:	4b7e      	ldr	r3, [pc, #504]	; (8006808 <Batt_Protection_when_chargedischarge+0xb60>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f040 80cc 	bne.w	80067b0 <Batt_Protection_when_chargedischarge+0xb08>
 8006618:	4b7c      	ldr	r3, [pc, #496]	; (800680c <Batt_Protection_when_chargedischarge+0xb64>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b02      	cmp	r3, #2
 800661e:	f040 80c7 	bne.w	80067b0 <Batt_Protection_when_chargedischarge+0xb08>
		fault_code=5;
 8006622:	4b7b      	ldr	r3, [pc, #492]	; (8006810 <Batt_Protection_when_chargedischarge+0xb68>)
 8006624:	2205      	movs	r2, #5
 8006626:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 8006628:	4b75      	ldr	r3, [pc, #468]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4975      	ldr	r1, [pc, #468]	; (8006804 <Batt_Protection_when_chargedischarge+0xb5c>)
 800662e:	4618      	mov	r0, r3
 8006630:	f7fa fb0c 	bl	8000c4c <__addsf3>
 8006634:	4603      	mov	r3, r0
 8006636:	461a      	mov	r2, r3
 8006638:	4b70      	ldr	r3, [pc, #448]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f7fa fdbe 	bl	80011c0 <__aeabi_fcmpge>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d029      	beq.n	800669e <Batt_Protection_when_chargedischarge+0x9f6>
 800664a:	4b6d      	ldr	r3, [pc, #436]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4971      	ldr	r1, [pc, #452]	; (8006814 <Batt_Protection_when_chargedischarge+0xb6c>)
 8006650:	4618      	mov	r0, r3
 8006652:	f7fa fafb 	bl	8000c4c <__addsf3>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	4b68      	ldr	r3, [pc, #416]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4619      	mov	r1, r3
 8006660:	4610      	mov	r0, r2
 8006662:	f7fa fd99 	bl	8001198 <__aeabi_fcmplt>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d018      	beq.n	800669e <Batt_Protection_when_chargedischarge+0x9f6>
			if((test_tim2%1000)==0) {
 800666c:	4b6a      	ldr	r3, [pc, #424]	; (8006818 <Batt_Protection_when_chargedischarge+0xb70>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	4b6a      	ldr	r3, [pc, #424]	; (800681c <Batt_Protection_when_chargedischarge+0xb74>)
 8006672:	fb83 1302 	smull	r1, r3, r3, r2
 8006676:	1199      	asrs	r1, r3, #6
 8006678:	17d3      	asrs	r3, r2, #31
 800667a:	1acb      	subs	r3, r1, r3
 800667c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 8091 	bne.w	80067ae <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 800668c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006690:	4863      	ldr	r0, [pc, #396]	; (8006820 <Batt_Protection_when_chargedischarge+0xb78>)
 8006692:	f002 fd19 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006696:	4b60      	ldr	r3, [pc, #384]	; (8006818 <Batt_Protection_when_chargedischarge+0xb70>)
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 800669c:	e087      	b.n	80067ae <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<=SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+2) {
 800669e:	4b58      	ldr	r3, [pc, #352]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	495c      	ldr	r1, [pc, #368]	; (8006814 <Batt_Protection_when_chargedischarge+0xb6c>)
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fa fad1 	bl	8000c4c <__addsf3>
 80066aa:	4603      	mov	r3, r0
 80066ac:	461a      	mov	r2, r3
 80066ae:	4b53      	ldr	r3, [pc, #332]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4619      	mov	r1, r3
 80066b4:	4610      	mov	r0, r2
 80066b6:	f7fa fd83 	bl	80011c0 <__aeabi_fcmpge>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d029      	beq.n	8006714 <Batt_Protection_when_chargedischarge+0xa6c>
 80066c0:	4b4f      	ldr	r3, [pc, #316]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fa fabf 	bl	8000c4c <__addsf3>
 80066ce:	4603      	mov	r3, r0
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b4a      	ldr	r3, [pc, #296]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f7fa fd5d 	bl	8001198 <__aeabi_fcmplt>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d017      	beq.n	8006714 <Batt_Protection_when_chargedischarge+0xa6c>
			if((test_tim2%500)==0) {
 80066e4:	4b4c      	ldr	r3, [pc, #304]	; (8006818 <Batt_Protection_when_chargedischarge+0xb70>)
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	4b4c      	ldr	r3, [pc, #304]	; (800681c <Batt_Protection_when_chargedischarge+0xb74>)
 80066ea:	fb83 1302 	smull	r1, r3, r3, r2
 80066ee:	1159      	asrs	r1, r3, #5
 80066f0:	17d3      	asrs	r3, r2, #31
 80066f2:	1acb      	subs	r3, r1, r3
 80066f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d155      	bne.n	80067ae <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 8006702:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006706:	4846      	ldr	r0, [pc, #280]	; (8006820 <Batt_Protection_when_chargedischarge+0xb78>)
 8006708:	f002 fcde 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800670c:	4b42      	ldr	r3, [pc, #264]	; (8006818 <Batt_Protection_when_chargedischarge+0xb70>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 8006712:	e04c      	b.n	80067ae <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set+2 && Pack_SOC>=SOC_Under_Set) {
 8006714:	4b3a      	ldr	r3, [pc, #232]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800671c:	4618      	mov	r0, r3
 800671e:	f7fa fa95 	bl	8000c4c <__addsf3>
 8006722:	4603      	mov	r3, r0
 8006724:	461a      	mov	r2, r3
 8006726:	4b35      	ldr	r3, [pc, #212]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4619      	mov	r1, r3
 800672c:	4610      	mov	r0, r2
 800672e:	f7fa fd51 	bl	80011d4 <__aeabi_fcmpgt>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d022      	beq.n	800677e <Batt_Protection_when_chargedischarge+0xad6>
 8006738:	4b30      	ldr	r3, [pc, #192]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a30      	ldr	r2, [pc, #192]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	4611      	mov	r1, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f7fa fd3c 	bl	80011c0 <__aeabi_fcmpge>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <Batt_Protection_when_chargedischarge+0xad6>
			if((test_tim2%500)==0){
 800674e:	4b32      	ldr	r3, [pc, #200]	; (8006818 <Batt_Protection_when_chargedischarge+0xb70>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b32      	ldr	r3, [pc, #200]	; (800681c <Batt_Protection_when_chargedischarge+0xb74>)
 8006754:	fb83 1302 	smull	r1, r3, r3, r2
 8006758:	1159      	asrs	r1, r3, #5
 800675a:	17d3      	asrs	r3, r2, #31
 800675c:	1acb      	subs	r3, r1, r3
 800675e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006762:	fb01 f303 	mul.w	r3, r1, r3
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d120      	bne.n	80067ae <Batt_Protection_when_chargedischarge+0xb06>
				BUZZ_Toggle;
 800676c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006770:	482b      	ldr	r0, [pc, #172]	; (8006820 <Batt_Protection_when_chargedischarge+0xb78>)
 8006772:	f002 fca9 	bl	80090c8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006776:	4b28      	ldr	r3, [pc, #160]	; (8006818 <Batt_Protection_when_chargedischarge+0xb70>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800677c:	e017      	b.n	80067ae <Batt_Protection_when_chargedischarge+0xb06>
			}
		}
		else if(Pack_SOC<SOC_Under_Set) {
 800677e:	4b1f      	ldr	r3, [pc, #124]	; (80067fc <Batt_Protection_when_chargedischarge+0xb54>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1f      	ldr	r2, [pc, #124]	; (8006800 <Batt_Protection_when_chargedischarge+0xb58>)
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	4611      	mov	r1, r2
 8006788:	4618      	mov	r0, r3
 800678a:	f7fa fd05 	bl	8001198 <__aeabi_fcmplt>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d100      	bne.n	8006796 <Batt_Protection_when_chargedischarge+0xaee>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 8006794:	e0a6      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
			Batt_Open_Mode();
 8006796:	f7fb f801 	bl	800179c <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 800679a:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <Batt_Protection_when_chargedischarge+0xb60>)
 800679c:	2201      	movs	r2, #1
 800679e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80067a0:	2200      	movs	r2, #0
 80067a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067a6:	481e      	ldr	r0, [pc, #120]	; (8006820 <Batt_Protection_when_chargedischarge+0xb78>)
 80067a8:	f002 fc76 	bl	8009098 <HAL_GPIO_WritePin>
		if(Pack_SOC<=SOC_Under_Set+10 && Pack_SOC>SOC_Under_Set+5) {
 80067ac:	e09a      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
 80067ae:	e099      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
		}
	}

	// Imbalance Protection
	else if(Persen_Imbalance_Set-persen_imbalance<10)
 80067b0:	4b1c      	ldr	r3, [pc, #112]	; (8006824 <Batt_Protection_when_chargedischarge+0xb7c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <Batt_Protection_when_chargedischarge+0xb80>)
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fa fa44 	bl	8000c48 <__aeabi_fsub>
 80067c0:	4603      	mov	r3, r0
 80067c2:	4910      	ldr	r1, [pc, #64]	; (8006804 <Batt_Protection_when_chargedischarge+0xb5c>)
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fa fce7 	bl	8001198 <__aeabi_fcmplt>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d02f      	beq.n	8006830 <Batt_Protection_when_chargedischarge+0xb88>
	{
		fault_code=6;
 80067d0:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <Batt_Protection_when_chargedischarge+0xb68>)
 80067d2:	2206      	movs	r2, #6
 80067d4:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance>Persen_Imbalance_Set)
 80067d6:	4b14      	ldr	r3, [pc, #80]	; (8006828 <Batt_Protection_when_chargedischarge+0xb80>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <Batt_Protection_when_chargedischarge+0xb7c>)
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	4611      	mov	r1, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7fa fcf7 	bl	80011d4 <__aeabi_fcmpgt>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d100      	bne.n	80067ee <Batt_Protection_when_chargedischarge+0xb46>
		if(T_trip_cycle < 0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle < 0)
			T_I_Over_trip_cycle=0;
	}
}
 80067ec:	e07a      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
			flag_trip_unbalance=ON;
 80067ee:	4b0f      	ldr	r3, [pc, #60]	; (800682c <Batt_Protection_when_chargedischarge+0xb84>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 80067f4:	f7fa ffd2 	bl	800179c <Batt_Open_Mode>
}
 80067f8:	e074      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
 80067fa:	bf00      	nop
 80067fc:	20000320 	.word	0x20000320
 8006800:	2000075c 	.word	0x2000075c
 8006804:	41200000 	.word	0x41200000
 8006808:	20000312 	.word	0x20000312
 800680c:	200009e4 	.word	0x200009e4
 8006810:	20000300 	.word	0x20000300
 8006814:	40a00000 	.word	0x40a00000
 8006818:	2000030c 	.word	0x2000030c
 800681c:	10624dd3 	.word	0x10624dd3
 8006820:	40011000 	.word	0x40011000
 8006824:	20000064 	.word	0x20000064
 8006828:	200002d4 	.word	0x200002d4
 800682c:	2000031a 	.word	0x2000031a
		if(fault_code!=0)
 8006830:	4b2f      	ldr	r3, [pc, #188]	; (80068f0 <Batt_Protection_when_chargedischarge+0xc48>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d003      	beq.n	8006840 <Batt_Protection_when_chargedischarge+0xb98>
			last_fault_code=fault_code;
 8006838:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <Batt_Protection_when_chargedischarge+0xc48>)
 800683a:	781a      	ldrb	r2, [r3, #0]
 800683c:	4b2d      	ldr	r3, [pc, #180]	; (80068f4 <Batt_Protection_when_chargedischarge+0xc4c>)
 800683e:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8006840:	4b2b      	ldr	r3, [pc, #172]	; (80068f0 <Batt_Protection_when_chargedischarge+0xc48>)
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006846:	2200      	movs	r2, #0
 8006848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800684c:	482a      	ldr	r0, [pc, #168]	; (80068f8 <Batt_Protection_when_chargedischarge+0xc50>)
 800684e:	f002 fc23 	bl	8009098 <HAL_GPIO_WritePin>
		T_Under_trip=0;
 8006852:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <Batt_Protection_when_chargedischarge+0xc54>)
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 800685a:	4b29      	ldr	r3, [pc, #164]	; (8006900 <Batt_Protection_when_chargedischarge+0xc58>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7f9 fe4e 	bl	8000500 <__aeabi_f2d>
 8006864:	a320      	add	r3, pc, #128	; (adr r3, 80068e8 <Batt_Protection_when_chargedischarge+0xc40>)
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f7f9 fce9 	bl	8000240 <__aeabi_dsub>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4610      	mov	r0, r2
 8006874:	4619      	mov	r1, r3
 8006876:	f7fa f993 	bl	8000ba0 <__aeabi_d2f>
 800687a:	4603      	mov	r3, r0
 800687c:	4a20      	ldr	r2, [pc, #128]	; (8006900 <Batt_Protection_when_chargedischarge+0xc58>)
 800687e:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8006880:	4b20      	ldr	r3, [pc, #128]	; (8006904 <Batt_Protection_when_chargedischarge+0xc5c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4618      	mov	r0, r3
 8006886:	f7f9 fe3b 	bl	8000500 <__aeabi_f2d>
 800688a:	a317      	add	r3, pc, #92	; (adr r3, 80068e8 <Batt_Protection_when_chargedischarge+0xc40>)
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f7f9 fcd6 	bl	8000240 <__aeabi_dsub>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	f7fa f980 	bl	8000ba0 <__aeabi_d2f>
 80068a0:	4603      	mov	r3, r0
 80068a2:	4a18      	ldr	r2, [pc, #96]	; (8006904 <Batt_Protection_when_chargedischarge+0xc5c>)
 80068a4:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle < 0)
 80068a6:	4b16      	ldr	r3, [pc, #88]	; (8006900 <Batt_Protection_when_chargedischarge+0xc58>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f04f 0100 	mov.w	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fa fc72 	bl	8001198 <__aeabi_fcmplt>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <Batt_Protection_when_chargedischarge+0xc1a>
			T_trip_cycle=0;
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <Batt_Protection_when_chargedischarge+0xc58>)
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle < 0)
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <Batt_Protection_when_chargedischarge+0xc5c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f04f 0100 	mov.w	r1, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fa fc64 	bl	8001198 <__aeabi_fcmplt>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d100      	bne.n	80068d8 <Batt_Protection_when_chargedischarge+0xc30>
}
 80068d6:	e005      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
			T_I_Over_trip_cycle=0;
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <Batt_Protection_when_chargedischarge+0xc5c>)
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
}
 80068e0:	e000      	b.n	80068e4 <Batt_Protection_when_chargedischarge+0xc3c>
		if(flag_trip_overcurrentdischarge==OFF) {
 80068e2:	bf00      	nop
}
 80068e4:	bf00      	nop
 80068e6:	bdb0      	pop	{r4, r5, r7, pc}
 80068e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80068ec:	3f50624d 	.word	0x3f50624d
 80068f0:	20000300 	.word	0x20000300
 80068f4:	20000301 	.word	0x20000301
 80068f8:	40011000 	.word	0x40011000
 80068fc:	20000c30 	.word	0x20000c30
 8006900:	20000c50 	.word	0x20000c50
 8006904:	20000308 	.word	0x20000308

08006908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
	return 1;
 800690c:	2301      	movs	r3, #1
}
 800690e:	4618      	mov	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr

08006916 <_kill>:

int _kill(int pid, int sig)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006920:	f007 fe86 	bl	800e630 <__errno>
 8006924:	4603      	mov	r3, r0
 8006926:	2216      	movs	r2, #22
 8006928:	601a      	str	r2, [r3, #0]
	return -1;
 800692a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <_exit>:

void _exit (int status)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800693e:	f04f 31ff 	mov.w	r1, #4294967295
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff ffe7 	bl	8006916 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006948:	e7fe      	b.n	8006948 <_exit+0x12>

0800694a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b086      	sub	sp, #24
 800694e:	af00      	add	r7, sp, #0
 8006950:	60f8      	str	r0, [r7, #12]
 8006952:	60b9      	str	r1, [r7, #8]
 8006954:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e00a      	b.n	8006972 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800695c:	f3af 8000 	nop.w
 8006960:	4601      	mov	r1, r0
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	1c5a      	adds	r2, r3, #1
 8006966:	60ba      	str	r2, [r7, #8]
 8006968:	b2ca      	uxtb	r2, r1
 800696a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	3301      	adds	r3, #1
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	dbf0      	blt.n	800695c <_read+0x12>
	}

return len;
 800697a:	687b      	ldr	r3, [r7, #4]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e009      	b.n	80069aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	60ba      	str	r2, [r7, #8]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3301      	adds	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	dbf1      	blt.n	8006996 <_write+0x12>
	}
	return len;
 80069b2:	687b      	ldr	r3, [r7, #4]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_close>:

int _close(int file)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	return -1;
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069e2:	605a      	str	r2, [r3, #4]
	return 0;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <_isatty>:

int _isatty(int file)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	return 1;
 80069f8:	2301      	movs	r3, #1
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr

08006a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <_sbrk+0x5c>)
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <_sbrk+0x60>)
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <_sbrk+0x64>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <_sbrk+0x64>)
 8006a3a:	4a12      	ldr	r2, [pc, #72]	; (8006a84 <_sbrk+0x68>)
 8006a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a3e:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <_sbrk+0x64>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d207      	bcs.n	8006a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a4c:	f007 fdf0 	bl	800e630 <__errno>
 8006a50:	4603      	mov	r3, r0
 8006a52:	220c      	movs	r2, #12
 8006a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	e009      	b.n	8006a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a5c:	4b08      	ldr	r3, [pc, #32]	; (8006a80 <_sbrk+0x64>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a62:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <_sbrk+0x64>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	4a05      	ldr	r2, [pc, #20]	; (8006a80 <_sbrk+0x64>)
 8006a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20018000 	.word	0x20018000
 8006a7c:	00000400 	.word	0x00000400
 8006a80:	20000760 	.word	0x20000760
 8006a84:	20000d20 	.word	0x20000d20

08006a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a8c:	bf00      	nop
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b086      	sub	sp, #24
 8006a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a9a:	f107 0308 	add.w	r3, r7, #8
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	605a      	str	r2, [r3, #4]
 8006aa4:	609a      	str	r2, [r3, #8]
 8006aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006ab0:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006ab6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8006ab8:	4b1c      	ldr	r3, [pc, #112]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006aba:	f240 227f 	movw	r2, #639	; 0x27f
 8006abe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ac0:	4b1a      	ldr	r3, [pc, #104]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006ac6:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006ac8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006acc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ace:	4b17      	ldr	r3, [pc, #92]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ad4:	4b15      	ldr	r3, [pc, #84]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006ada:	4814      	ldr	r0, [pc, #80]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006adc:	f004 fe9a 	bl	800b814 <HAL_TIM_Base_Init>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006ae6:	f7fc fd01 	bl	80034ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006af0:	f107 0308 	add.w	r3, r7, #8
 8006af4:	4619      	mov	r1, r3
 8006af6:	480d      	ldr	r0, [pc, #52]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006af8:	f005 f852 	bl	800bba0 <HAL_TIM_ConfigClockSource>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006b02:	f7fc fcf3 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b06:	2300      	movs	r3, #0
 8006b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006b0e:	463b      	mov	r3, r7
 8006b10:	4619      	mov	r1, r3
 8006b12:	4806      	ldr	r0, [pc, #24]	; (8006b2c <MX_TIM2_Init+0x98>)
 8006b14:	f005 fa6a 	bl	800bfec <HAL_TIMEx_MasterConfigSynchronization>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006b1e:	f7fc fce5 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006b22:	bf00      	nop
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000cc0 	.word	0x20000cc0

08006b30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b36:	f107 0308 	add.w	r3, r7, #8
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	609a      	str	r2, [r3, #8]
 8006b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b44:	463b      	mov	r3, r7
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b4e:	4a1e      	ldr	r2, [pc, #120]	; (8006bc8 <MX_TIM3_Init+0x98>)
 8006b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8006b52:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b54:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8006b58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b5a:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 333;
 8006b60:	4b18      	ldr	r3, [pc, #96]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b62:	f240 124d 	movw	r2, #333	; 0x14d
 8006b66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b68:	4b16      	ldr	r3, [pc, #88]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b6e:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006b74:	4813      	ldr	r0, [pc, #76]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b76:	f004 fe4d 	bl	800b814 <HAL_TIM_Base_Init>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006b80:	f7fc fcb4 	bl	80034ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006b8a:	f107 0308 	add.w	r3, r7, #8
 8006b8e:	4619      	mov	r1, r3
 8006b90:	480c      	ldr	r0, [pc, #48]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006b92:	f005 f805 	bl	800bba0 <HAL_TIM_ConfigClockSource>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8006b9c:	f7fc fca6 	bl	80034ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006ba8:	463b      	mov	r3, r7
 8006baa:	4619      	mov	r1, r3
 8006bac:	4805      	ldr	r0, [pc, #20]	; (8006bc4 <MX_TIM3_Init+0x94>)
 8006bae:	f005 fa1d 	bl	800bfec <HAL_TIMEx_MasterConfigSynchronization>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006bb8:	f7fc fc98 	bl	80034ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006bbc:	bf00      	nop
 8006bbe:	3718      	adds	r7, #24
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000c78 	.word	0x20000c78
 8006bc8:	40000400 	.word	0x40000400

08006bcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bdc:	d114      	bne.n	8006c08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006bde:	4b19      	ldr	r3, [pc, #100]	; (8006c44 <HAL_TIM_Base_MspInit+0x78>)
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	4a18      	ldr	r2, [pc, #96]	; (8006c44 <HAL_TIM_Base_MspInit+0x78>)
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	61d3      	str	r3, [r2, #28]
 8006bea:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <HAL_TIM_Base_MspInit+0x78>)
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	201c      	movs	r0, #28
 8006bfc:	f001 fc39 	bl	8008472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006c00:	201c      	movs	r0, #28
 8006c02:	f001 fc52 	bl	80084aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006c06:	e018      	b.n	8006c3a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a0e      	ldr	r2, [pc, #56]	; (8006c48 <HAL_TIM_Base_MspInit+0x7c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d113      	bne.n	8006c3a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006c12:	4b0c      	ldr	r3, [pc, #48]	; (8006c44 <HAL_TIM_Base_MspInit+0x78>)
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	4a0b      	ldr	r2, [pc, #44]	; (8006c44 <HAL_TIM_Base_MspInit+0x78>)
 8006c18:	f043 0302 	orr.w	r3, r3, #2
 8006c1c:	61d3      	str	r3, [r2, #28]
 8006c1e:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <HAL_TIM_Base_MspInit+0x78>)
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	201d      	movs	r0, #29
 8006c30:	f001 fc1f 	bl	8008472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006c34:	201d      	movs	r0, #29
 8006c36:	f001 fc38 	bl	80084aa <HAL_NVIC_EnableIRQ>
}
 8006c3a:	bf00      	nop
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40021000 	.word	0x40021000
 8006c48:	40000400 	.word	0x40000400

08006c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c4c:	480c      	ldr	r0, [pc, #48]	; (8006c80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006c4e:	490d      	ldr	r1, [pc, #52]	; (8006c84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006c50:	4a0d      	ldr	r2, [pc, #52]	; (8006c88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c54:	e002      	b.n	8006c5c <LoopCopyDataInit>

08006c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c5a:	3304      	adds	r3, #4

08006c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c60:	d3f9      	bcc.n	8006c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c62:	4a0a      	ldr	r2, [pc, #40]	; (8006c8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006c64:	4c0a      	ldr	r4, [pc, #40]	; (8006c90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c68:	e001      	b.n	8006c6e <LoopFillZerobss>

08006c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c6c:	3204      	adds	r2, #4

08006c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c70:	d3fb      	bcc.n	8006c6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006c72:	f7ff ff09 	bl	8006a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c76:	f007 fce1 	bl	800e63c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006c7a:	f7fb ff95 	bl	8002ba8 <main>
  bx lr
 8006c7e:	4770      	bx	lr
  ldr r0, =_sdata
 8006c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c84:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8006c88:	08014264 	.word	0x08014264
  ldr r2, =_sbss
 8006c8c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8006c90:	20000d1c 	.word	0x20000d1c

08006c94 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006c94:	e7fe      	b.n	8006c94 <ADC1_2_IRQHandler>
	...

08006c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c9c:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <HAL_Init+0x28>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a07      	ldr	r2, [pc, #28]	; (8006cc0 <HAL_Init+0x28>)
 8006ca2:	f043 0310 	orr.w	r3, r3, #16
 8006ca6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ca8:	2003      	movs	r0, #3
 8006caa:	f001 fbd7 	bl	800845c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006cae:	200f      	movs	r0, #15
 8006cb0:	f000 f808 	bl	8006cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006cb4:	f7fc ff60 	bl	8003b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40022000 	.word	0x40022000

08006cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ccc:	4b12      	ldr	r3, [pc, #72]	; (8006d18 <HAL_InitTick+0x54>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <HAL_InitTick+0x58>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 fbef 	bl	80084c6 <HAL_SYSTICK_Config>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e00e      	b.n	8006d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b0f      	cmp	r3, #15
 8006cf6:	d80a      	bhi.n	8006d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	f001 fbb7 	bl	8008472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d04:	4a06      	ldr	r2, [pc, #24]	; (8006d20 <HAL_InitTick+0x5c>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e000      	b.n	8006d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000070 	.word	0x20000070
 8006d1c:	20000078 	.word	0x20000078
 8006d20:	20000074 	.word	0x20000074

08006d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <HAL_IncTick+0x1c>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <HAL_IncTick+0x20>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4413      	add	r3, r2
 8006d34:	4a03      	ldr	r2, [pc, #12]	; (8006d44 <HAL_IncTick+0x20>)
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	20000078 	.word	0x20000078
 8006d44:	20000d08 	.word	0x20000d08

08006d48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d4c:	4b02      	ldr	r3, [pc, #8]	; (8006d58 <HAL_GetTick+0x10>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	20000d08 	.word	0x20000d08

08006d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d64:	f7ff fff0 	bl	8006d48 <HAL_GetTick>
 8006d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d005      	beq.n	8006d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <HAL_Delay+0x44>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d82:	bf00      	nop
 8006d84:	f7ff ffe0 	bl	8006d48 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d8f7      	bhi.n	8006d84 <HAL_Delay+0x28>
  {
  }
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000078 	.word	0x20000078

08006da4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e0ce      	b.n	8006f64 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fa ffc4 	bl	8001d70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fb11 	bl	8007410 <ADC_ConversionStop_Disable>
 8006dee:	4603      	mov	r3, r0
 8006df0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 80a9 	bne.w	8006f52 <HAL_ADC_Init+0x1ae>
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 80a5 	bne.w	8006f52 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e10:	f023 0302 	bic.w	r3, r3, #2
 8006e14:	f043 0202 	orr.w	r2, r3, #2
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4951      	ldr	r1, [pc, #324]	; (8006f6c <HAL_ADC_Init+0x1c8>)
 8006e26:	428b      	cmp	r3, r1
 8006e28:	d10a      	bne.n	8006e40 <HAL_ADC_Init+0x9c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e32:	d002      	beq.n	8006e3a <HAL_ADC_Init+0x96>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	e004      	b.n	8006e44 <HAL_ADC_Init+0xa0>
 8006e3a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e3e:	e001      	b.n	8006e44 <HAL_ADC_Init+0xa0>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006e44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7b1b      	ldrb	r3, [r3, #12]
 8006e4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006e4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5c:	d003      	beq.n	8006e66 <HAL_ADC_Init+0xc2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d102      	bne.n	8006e6c <HAL_ADC_Init+0xc8>
 8006e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e6a:	e000      	b.n	8006e6e <HAL_ADC_Init+0xca>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7d1b      	ldrb	r3, [r3, #20]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d119      	bne.n	8006eb0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	7b1b      	ldrb	r3, [r3, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	035a      	lsls	r2, r3, #13
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	e00b      	b.n	8006eb0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9c:	f043 0220 	orr.w	r2, r3, #32
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	f043 0201 	orr.w	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	4b29      	ldr	r3, [pc, #164]	; (8006f70 <HAL_ADC_Init+0x1cc>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	68b9      	ldr	r1, [r7, #8]
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee0:	d003      	beq.n	8006eea <HAL_ADC_Init+0x146>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d104      	bne.n	8006ef4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	051b      	lsls	r3, r3, #20
 8006ef2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	4b19      	ldr	r3, [pc, #100]	; (8006f74 <HAL_ADC_Init+0x1d0>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d10b      	bne.n	8006f30 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	f043 0201 	orr.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006f2e:	e018      	b.n	8006f62 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	f023 0312 	bic.w	r3, r3, #18
 8006f38:	f043 0210 	orr.w	r2, r3, #16
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	f043 0201 	orr.w	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006f50:	e007      	b.n	8006f62 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	f043 0210 	orr.w	r2, r3, #16
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40013c00 	.word	0x40013c00
 8006f70:	ffe1f7fd 	.word	0xffe1f7fd
 8006f74:	ff1f0efe 	.word	0xff1f0efe

08006f78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a64      	ldr	r2, [pc, #400]	; (8007120 <HAL_ADC_Start_DMA+0x1a8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <HAL_ADC_Start_DMA+0x24>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a63      	ldr	r2, [pc, #396]	; (8007124 <HAL_ADC_Start_DMA+0x1ac>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d106      	bne.n	8006faa <HAL_ADC_Start_DMA+0x32>
 8006f9c:	4b60      	ldr	r3, [pc, #384]	; (8007120 <HAL_ADC_Start_DMA+0x1a8>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f040 80b3 	bne.w	8007110 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_ADC_Start_DMA+0x40>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e0ae      	b.n	8007116 <HAL_ADC_Start_DMA+0x19e>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f9cb 	bl	800735c <ADC_Enable>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f040 809a 	bne.w	8007106 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fda:	f023 0301 	bic.w	r3, r3, #1
 8006fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a4e      	ldr	r2, [pc, #312]	; (8007124 <HAL_ADC_Start_DMA+0x1ac>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d105      	bne.n	8006ffc <HAL_ADC_Start_DMA+0x84>
 8006ff0:	4b4b      	ldr	r3, [pc, #300]	; (8007120 <HAL_ADC_Start_DMA+0x1a8>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d115      	bne.n	8007028 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007012:	2b00      	cmp	r3, #0
 8007014:	d026      	beq.n	8007064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800701e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007026:	e01d      	b.n	8007064 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a39      	ldr	r2, [pc, #228]	; (8007120 <HAL_ADC_Start_DMA+0x1a8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_ADC_Start_DMA+0xd0>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a38      	ldr	r2, [pc, #224]	; (8007124 <HAL_ADC_Start_DMA+0x1ac>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d10d      	bne.n	8007064 <HAL_ADC_Start_DMA+0xec>
 8007048:	4b35      	ldr	r3, [pc, #212]	; (8007120 <HAL_ADC_Start_DMA+0x1a8>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800705c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d006      	beq.n	800707e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f023 0206 	bic.w	r2, r3, #6
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	62da      	str	r2, [r3, #44]	; 0x2c
 800707c:	e002      	b.n	8007084 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	4a25      	ldr	r2, [pc, #148]	; (8007128 <HAL_ADC_Start_DMA+0x1b0>)
 8007092:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <HAL_ADC_Start_DMA+0x1b4>)
 800709a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	4a23      	ldr	r2, [pc, #140]	; (8007130 <HAL_ADC_Start_DMA+0x1b8>)
 80070a2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0202 	mvn.w	r2, #2
 80070ac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070bc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a18      	ldr	r0, [r3, #32]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	334c      	adds	r3, #76	; 0x4c
 80070c8:	4619      	mov	r1, r3
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f001 fa7d 	bl	80085cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80070dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80070e0:	d108      	bne.n	80070f4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80070f0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80070f2:	e00f      	b.n	8007114 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007102:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8007104:	e006      	b.n	8007114 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800710e:	e001      	b.n	8007114 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40012400 	.word	0x40012400
 8007124:	40012800 	.word	0x40012800
 8007128:	08007493 	.word	0x08007493
 800712c:	0800750f 	.word	0x0800750f
 8007130:	0800752b 	.word	0x0800752b

08007134 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr

08007158 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr
	...

0800716c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_ADC_ConfigChannel+0x20>
 8007188:	2302      	movs	r3, #2
 800718a:	e0dc      	b.n	8007346 <HAL_ADC_ConfigChannel+0x1da>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b06      	cmp	r3, #6
 800719a:	d81c      	bhi.n	80071d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	3b05      	subs	r3, #5
 80071ae:	221f      	movs	r2, #31
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	43db      	mvns	r3, r3
 80071b6:	4019      	ands	r1, r3
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6818      	ldr	r0, [r3, #0]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	3b05      	subs	r3, #5
 80071c8:	fa00 f203 	lsl.w	r2, r0, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	635a      	str	r2, [r3, #52]	; 0x34
 80071d4:	e03c      	b.n	8007250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	2b0c      	cmp	r3, #12
 80071dc:	d81c      	bhi.n	8007218 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	3b23      	subs	r3, #35	; 0x23
 80071f0:	221f      	movs	r2, #31
 80071f2:	fa02 f303 	lsl.w	r3, r2, r3
 80071f6:	43db      	mvns	r3, r3
 80071f8:	4019      	ands	r1, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	3b23      	subs	r3, #35	; 0x23
 800720a:	fa00 f203 	lsl.w	r2, r0, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	631a      	str	r2, [r3, #48]	; 0x30
 8007216:	e01b      	b.n	8007250 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	3b41      	subs	r3, #65	; 0x41
 800722a:	221f      	movs	r2, #31
 800722c:	fa02 f303 	lsl.w	r3, r2, r3
 8007230:	43db      	mvns	r3, r3
 8007232:	4019      	ands	r1, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	3b41      	subs	r3, #65	; 0x41
 8007244:	fa00 f203 	lsl.w	r2, r0, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b09      	cmp	r3, #9
 8007256:	d91c      	bls.n	8007292 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68d9      	ldr	r1, [r3, #12]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	4413      	add	r3, r2
 8007268:	3b1e      	subs	r3, #30
 800726a:	2207      	movs	r2, #7
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	43db      	mvns	r3, r3
 8007272:	4019      	ands	r1, r3
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	6898      	ldr	r0, [r3, #8]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	4413      	add	r3, r2
 8007282:	3b1e      	subs	r3, #30
 8007284:	fa00 f203 	lsl.w	r2, r0, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	60da      	str	r2, [r3, #12]
 8007290:	e019      	b.n	80072c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6919      	ldr	r1, [r3, #16]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	005b      	lsls	r3, r3, #1
 80072a0:	4413      	add	r3, r2
 80072a2:	2207      	movs	r2, #7
 80072a4:	fa02 f303 	lsl.w	r3, r2, r3
 80072a8:	43db      	mvns	r3, r3
 80072aa:	4019      	ands	r1, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	6898      	ldr	r0, [r3, #8]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	4413      	add	r3, r2
 80072ba:	fa00 f203 	lsl.w	r2, r0, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b10      	cmp	r3, #16
 80072cc:	d003      	beq.n	80072d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80072d2:	2b11      	cmp	r3, #17
 80072d4:	d132      	bne.n	800733c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <HAL_ADC_ConfigChannel+0x1e4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d125      	bne.n	800732c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d126      	bne.n	800733c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689a      	ldr	r2, [r3, #8]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80072fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b10      	cmp	r3, #16
 8007304:	d11a      	bne.n	800733c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007306:	4b13      	ldr	r3, [pc, #76]	; (8007354 <HAL_ADC_ConfigChannel+0x1e8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a13      	ldr	r2, [pc, #76]	; (8007358 <HAL_ADC_ConfigChannel+0x1ec>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	0c9a      	lsrs	r2, r3, #18
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800731c:	e002      	b.n	8007324 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	3b01      	subs	r3, #1
 8007322:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f9      	bne.n	800731e <HAL_ADC_ConfigChannel+0x1b2>
 800732a:	e007      	b.n	800733c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	f043 0220 	orr.w	r2, r3, #32
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr
 8007350:	40012400 	.word	0x40012400
 8007354:	20000070 	.word	0x20000070
 8007358:	431bde83 	.word	0x431bde83

0800735c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b01      	cmp	r3, #1
 8007378:	d040      	beq.n	80073fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0201 	orr.w	r2, r2, #1
 8007388:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800738a:	4b1f      	ldr	r3, [pc, #124]	; (8007408 <ADC_Enable+0xac>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a1f      	ldr	r2, [pc, #124]	; (800740c <ADC_Enable+0xb0>)
 8007390:	fba2 2303 	umull	r2, r3, r2, r3
 8007394:	0c9b      	lsrs	r3, r3, #18
 8007396:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007398:	e002      	b.n	80073a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	3b01      	subs	r3, #1
 800739e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f9      	bne.n	800739a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80073a6:	f7ff fccf 	bl	8006d48 <HAL_GetTick>
 80073aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80073ac:	e01f      	b.n	80073ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80073ae:	f7ff fccb 	bl	8006d48 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d918      	bls.n	80073ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d011      	beq.n	80073ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ce:	f043 0210 	orr.w	r2, r3, #16
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f043 0201 	orr.w	r2, r3, #1
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e007      	b.n	80073fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d1d8      	bne.n	80073ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000070 	.word	0x20000070
 800740c:	431bde83 	.word	0x431bde83

08007410 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b01      	cmp	r3, #1
 8007428:	d12e      	bne.n	8007488 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0201 	bic.w	r2, r2, #1
 8007438:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800743a:	f7ff fc85 	bl	8006d48 <HAL_GetTick>
 800743e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007440:	e01b      	b.n	800747a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007442:	f7ff fc81 	bl	8006d48 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d914      	bls.n	800747a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b01      	cmp	r3, #1
 800745c:	d10d      	bne.n	800747a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007462:	f043 0210 	orr.w	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	f043 0201 	orr.w	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e007      	b.n	800748a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	d0dc      	beq.n	8007442 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b084      	sub	sp, #16
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d127      	bne.n	80074fc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80074c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80074c6:	d115      	bne.n	80074f4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d111      	bne.n	80074f4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f043 0201 	orr.w	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f7ff fe1d 	bl	8007134 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80074fa:	e004      	b.n	8007506 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7ff fe12 	bl	8007146 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007522:	bf00      	nop
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f043 0204 	orr.w	r2, r3, #4
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff fe01 	bl	8007158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007556:	bf00      	nop
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e0ed      	b.n	800774c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fa fcad 	bl	8001edc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0201 	orr.w	r2, r2, #1
 8007590:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007592:	f7ff fbd9 	bl	8006d48 <HAL_GetTick>
 8007596:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007598:	e012      	b.n	80075c0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800759a:	f7ff fbd5 	bl	8006d48 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b0a      	cmp	r3, #10
 80075a6:	d90b      	bls.n	80075c0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2205      	movs	r2, #5
 80075b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0c5      	b.n	800774c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0e5      	beq.n	800759a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0202 	bic.w	r2, r2, #2
 80075dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075de:	f7ff fbb3 	bl	8006d48 <HAL_GetTick>
 80075e2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075e4:	e012      	b.n	800760c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075e6:	f7ff fbaf 	bl	8006d48 <HAL_GetTick>
 80075ea:	4602      	mov	r2, r0
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	2b0a      	cmp	r3, #10
 80075f2:	d90b      	bls.n	800760c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2205      	movs	r2, #5
 8007604:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e09f      	b.n	800774c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e5      	bne.n	80075e6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	7e1b      	ldrb	r3, [r3, #24]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d108      	bne.n	8007634 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	e007      	b.n	8007644 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007642:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	7e5b      	ldrb	r3, [r3, #25]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d108      	bne.n	800765e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	e007      	b.n	800766e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800766c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7e9b      	ldrb	r3, [r3, #26]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d108      	bne.n	8007688 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0220 	orr.w	r2, r2, #32
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e007      	b.n	8007698 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0220 	bic.w	r2, r2, #32
 8007696:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7edb      	ldrb	r3, [r3, #27]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d108      	bne.n	80076b2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0210 	bic.w	r2, r2, #16
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	e007      	b.n	80076c2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0210 	orr.w	r2, r2, #16
 80076c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	7f1b      	ldrb	r3, [r3, #28]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d108      	bne.n	80076dc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0208 	orr.w	r2, r2, #8
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e007      	b.n	80076ec <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0208 	bic.w	r2, r2, #8
 80076ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	7f5b      	ldrb	r3, [r3, #29]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d108      	bne.n	8007706 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0204 	orr.w	r2, r2, #4
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	e007      	b.n	8007716 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0204 	bic.w	r2, r2, #4
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	ea42 0103 	orr.w	r1, r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	1e5a      	subs	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800776a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800776c:	7cfb      	ldrb	r3, [r7, #19]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d003      	beq.n	800777a <HAL_CAN_ConfigFilter+0x26>
 8007772:	7cfb      	ldrb	r3, [r7, #19]
 8007774:	2b02      	cmp	r3, #2
 8007776:	f040 80aa 	bne.w	80078ce <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007780:	f043 0201 	orr.w	r2, r3, #1
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	2201      	movs	r2, #1
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	43db      	mvns	r3, r3
 80077a4:	401a      	ands	r2, r3
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d123      	bne.n	80077fc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	43db      	mvns	r3, r3
 80077be:	401a      	ands	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	3248      	adds	r2, #72	; 0x48
 80077dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077f2:	6979      	ldr	r1, [r7, #20]
 80077f4:	3348      	adds	r3, #72	; 0x48
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	440b      	add	r3, r1
 80077fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d122      	bne.n	800784a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	431a      	orrs	r2, r3
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007824:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	3248      	adds	r2, #72	; 0x48
 800782a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800783e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007840:	6979      	ldr	r1, [r7, #20]
 8007842:	3348      	adds	r3, #72	; 0x48
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	440b      	add	r3, r1
 8007848:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	43db      	mvns	r3, r3
 800785c:	401a      	ands	r2, r3
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007864:	e007      	b.n	8007876 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	431a      	orrs	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d109      	bne.n	8007892 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	43db      	mvns	r3, r3
 8007888:	401a      	ands	r2, r3
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007890:	e007      	b.n	80078a2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	431a      	orrs	r2, r3
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d107      	bne.n	80078ba <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	431a      	orrs	r2, r3
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078c0:	f023 0201 	bic.w	r2, r3, #1
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e006      	b.n	80078dc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
  }
}
 80078dc:	4618      	mov	r0, r3
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr

080078e6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b084      	sub	sp, #16
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d12e      	bne.n	8007958 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2202      	movs	r2, #2
 80078fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0201 	bic.w	r2, r2, #1
 8007910:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007912:	f7ff fa19 	bl	8006d48 <HAL_GetTick>
 8007916:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007918:	e012      	b.n	8007940 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800791a:	f7ff fa15 	bl	8006d48 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b0a      	cmp	r3, #10
 8007926:	d90b      	bls.n	8007940 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2205      	movs	r2, #5
 8007938:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e012      	b.n	8007966 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e5      	bne.n	800791a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	e006      	b.n	8007966 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800796e:	b480      	push	{r7}
 8007970:	b089      	sub	sp, #36	; 0x24
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	607a      	str	r2, [r7, #4]
 800797a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007982:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800798c:	7ffb      	ldrb	r3, [r7, #31]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d003      	beq.n	800799a <HAL_CAN_AddTxMessage+0x2c>
 8007992:	7ffb      	ldrb	r3, [r7, #31]
 8007994:	2b02      	cmp	r3, #2
 8007996:	f040 80b8 	bne.w	8007b0a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d105      	bne.n	80079ba <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 80a0 	beq.w	8007afa <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d907      	bls.n	80079da <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e09e      	b.n	8007b18 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80079da:	2201      	movs	r2, #1
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	409a      	lsls	r2, r3
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10d      	bne.n	8007a08 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	6809      	ldr	r1, [r1, #0]
 80079fa:	431a      	orrs	r2, r3
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	3318      	adds	r3, #24
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	440b      	add	r3, r1
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e00f      	b.n	8007a28 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a12:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a18:	68f9      	ldr	r1, [r7, #12]
 8007a1a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007a1c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	3318      	adds	r3, #24
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	440b      	add	r3, r1
 8007a26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6819      	ldr	r1, [r3, #0]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	691a      	ldr	r2, [r3, #16]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	3318      	adds	r3, #24
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	440b      	add	r3, r1
 8007a38:	3304      	adds	r3, #4
 8007a3a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	7d1b      	ldrb	r3, [r3, #20]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d111      	bne.n	8007a68 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	3318      	adds	r3, #24
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	4413      	add	r3, r2
 8007a50:	3304      	adds	r3, #4
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	6811      	ldr	r1, [r2, #0]
 8007a58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	3318      	adds	r3, #24
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	440b      	add	r3, r1
 8007a64:	3304      	adds	r3, #4
 8007a66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3307      	adds	r3, #7
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	061a      	lsls	r2, r3, #24
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3306      	adds	r3, #6
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3305      	adds	r3, #5
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	021b      	lsls	r3, r3, #8
 8007a82:	4313      	orrs	r3, r2
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	3204      	adds	r2, #4
 8007a88:	7812      	ldrb	r2, [r2, #0]
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	6811      	ldr	r1, [r2, #0]
 8007a90:	ea43 0200 	orr.w	r2, r3, r0
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	440b      	add	r3, r1
 8007a9a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007a9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3303      	adds	r3, #3
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	061a      	lsls	r2, r3, #24
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	3302      	adds	r3, #2
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	041b      	lsls	r3, r3, #16
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	4313      	orrs	r3, r2
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	6811      	ldr	r1, [r2, #0]
 8007ac6:	ea43 0200 	orr.w	r2, r3, r0
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	011b      	lsls	r3, r3, #4
 8007ace:	440b      	add	r3, r1
 8007ad0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007ad4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	3318      	adds	r3, #24
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	4413      	add	r3, r2
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	6811      	ldr	r1, [r2, #0]
 8007ae8:	f043 0201 	orr.w	r2, r3, #1
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	3318      	adds	r3, #24
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	440b      	add	r3, r1
 8007af4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e00e      	b.n	8007b18 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e006      	b.n	8007b18 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
  }
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3724      	adds	r7, #36	; 0x24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bc80      	pop	{r7}
 8007b20:	4770      	bx	lr

08007b22 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b085      	sub	sp, #20
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b32:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d002      	beq.n	8007b40 <HAL_CAN_AbortTxRequest+0x1e>
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d128      	bne.n	8007b92 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b58:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d007      	beq.n	8007b74 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b72:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007b8c:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e006      	b.n	8007ba0 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr

08007baa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bbc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d002      	beq.n	8007bca <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d11d      	bne.n	8007c06 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d002      	beq.n	8007c06 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3301      	adds	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007c06:	68fb      	ldr	r3, [r7, #12]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr

08007c12 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007c12:	b480      	push	{r7}
 8007c14:	b087      	sub	sp, #28
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	607a      	str	r2, [r7, #4]
 8007c1e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c26:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d003      	beq.n	8007c36 <HAL_CAN_GetRxMessage+0x24>
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	f040 80f3 	bne.w	8007e1c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10e      	bne.n	8007c5a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d116      	bne.n	8007c78 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e0e7      	b.n	8007e2a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d107      	bne.n	8007c78 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e0d8      	b.n	8007e2a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	331b      	adds	r3, #27
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	4413      	add	r3, r2
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0204 	and.w	r2, r3, #4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10c      	bne.n	8007cb0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	331b      	adds	r3, #27
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	4413      	add	r3, r2
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	0d5b      	lsrs	r3, r3, #21
 8007ca6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e00b      	b.n	8007cc8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	331b      	adds	r3, #27
 8007cb8:	011b      	lsls	r3, r3, #4
 8007cba:	4413      	add	r3, r2
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	08db      	lsrs	r3, r3, #3
 8007cc0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	331b      	adds	r3, #27
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	4413      	add	r3, r2
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0202 	and.w	r2, r3, #2
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	331b      	adds	r3, #27
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	4413      	add	r3, r2
 8007cea:	3304      	adds	r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 020f 	and.w	r2, r3, #15
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	331b      	adds	r3, #27
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	4413      	add	r3, r2
 8007d02:	3304      	adds	r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	0a1b      	lsrs	r3, r3, #8
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	331b      	adds	r3, #27
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	4413      	add	r3, r2
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	0c1b      	lsrs	r3, r3, #16
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	011b      	lsls	r3, r3, #4
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	0a1a      	lsrs	r2, r3, #8
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	3301      	adds	r3, #1
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	0c1a      	lsrs	r2, r3, #16
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	3302      	adds	r3, #2
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	0e1a      	lsrs	r2, r3, #24
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	3303      	adds	r3, #3
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	0a1a      	lsrs	r2, r3, #8
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	3305      	adds	r3, #5
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	0c1a      	lsrs	r2, r3, #16
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	3306      	adds	r3, #6
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	0e1a      	lsrs	r2, r3, #24
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	3307      	adds	r3, #7
 8007dec:	b2d2      	uxtb	r2, r2
 8007dee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d108      	bne.n	8007e08 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0220 	orr.w	r2, r2, #32
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	e007      	b.n	8007e18 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691a      	ldr	r2, [r3, #16]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f042 0220 	orr.w	r2, r2, #32
 8007e16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e006      	b.n	8007e2a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
  }
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr

08007e34 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e44:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d002      	beq.n	8007e52 <HAL_CAN_ActivateNotification+0x1e>
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d109      	bne.n	8007e66 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6959      	ldr	r1, [r3, #20]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e006      	b.n	8007e74 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
  }
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr

08007e7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b08a      	sub	sp, #40	; 0x28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d07c      	beq.n	8007fbe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d023      	beq.n	8007f16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f983 	bl	80081ec <HAL_CAN_TxMailbox0CompleteCallback>
 8007ee6:	e016      	b.n	8007f16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d004      	beq.n	8007efc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8007efa:	e00c      	b.n	8007f16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f0e:	e002      	b.n	8007f16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f986 	bl	8008222 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d024      	beq.n	8007f6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f962 	bl	80081fe <HAL_CAN_TxMailbox1CompleteCallback>
 8007f3a:	e016      	b.n	8007f6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f4e:	e00c      	b.n	8007f6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f60:	627b      	str	r3, [r7, #36]	; 0x24
 8007f62:	e002      	b.n	8007f6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f965 	bl	8008234 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d024      	beq.n	8007fbe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f941 	bl	8008210 <HAL_CAN_TxMailbox2CompleteCallback>
 8007f8e:	e016      	b.n	8007fbe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	e00c      	b.n	8007fbe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d004      	beq.n	8007fb8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb6:	e002      	b.n	8007fbe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f944 	bl	8008246 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	f003 0308 	and.w	r3, r3, #8
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00c      	beq.n	8007fe2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	f003 0310 	and.w	r3, r3, #16
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2210      	movs	r2, #16
 8007fe0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d006      	beq.n	8008004 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2208      	movs	r2, #8
 8007ffc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f92a 	bl	8008258 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f003 0303 	and.w	r3, r3, #3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d002      	beq.n	8008022 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fa fb27 	bl	8002670 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00c      	beq.n	8008046 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f003 0310 	and.w	r3, r3, #16
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800803c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2210      	movs	r2, #16
 8008044:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d006      	beq.n	8008068 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2208      	movs	r2, #8
 8008060:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f90a 	bl	800827c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b00      	cmp	r3, #0
 8008070:	d009      	beq.n	8008086 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8f2 	bl	800826a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2210      	movs	r2, #16
 80080a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f8f3 	bl	800828e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00b      	beq.n	80080ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d006      	beq.n	80080ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2208      	movs	r2, #8
 80080c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f8eb 	bl	80082a0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d07b      	beq.n	80081cc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d072      	beq.n	80081c4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d008      	beq.n	80080fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008100:	2b00      	cmp	r3, #0
 8008102:	d008      	beq.n	8008116 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	f043 0302 	orr.w	r3, r3, #2
 8008114:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800811c:	2b00      	cmp	r3, #0
 800811e:	d008      	beq.n	8008132 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	f043 0304 	orr.w	r3, r3, #4
 8008130:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008138:	2b00      	cmp	r3, #0
 800813a:	d043      	beq.n	80081c4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008142:	2b00      	cmp	r3, #0
 8008144:	d03e      	beq.n	80081c4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800814c:	2b60      	cmp	r3, #96	; 0x60
 800814e:	d02b      	beq.n	80081a8 <HAL_CAN_IRQHandler+0x32a>
 8008150:	2b60      	cmp	r3, #96	; 0x60
 8008152:	d82e      	bhi.n	80081b2 <HAL_CAN_IRQHandler+0x334>
 8008154:	2b50      	cmp	r3, #80	; 0x50
 8008156:	d022      	beq.n	800819e <HAL_CAN_IRQHandler+0x320>
 8008158:	2b50      	cmp	r3, #80	; 0x50
 800815a:	d82a      	bhi.n	80081b2 <HAL_CAN_IRQHandler+0x334>
 800815c:	2b40      	cmp	r3, #64	; 0x40
 800815e:	d019      	beq.n	8008194 <HAL_CAN_IRQHandler+0x316>
 8008160:	2b40      	cmp	r3, #64	; 0x40
 8008162:	d826      	bhi.n	80081b2 <HAL_CAN_IRQHandler+0x334>
 8008164:	2b30      	cmp	r3, #48	; 0x30
 8008166:	d010      	beq.n	800818a <HAL_CAN_IRQHandler+0x30c>
 8008168:	2b30      	cmp	r3, #48	; 0x30
 800816a:	d822      	bhi.n	80081b2 <HAL_CAN_IRQHandler+0x334>
 800816c:	2b10      	cmp	r3, #16
 800816e:	d002      	beq.n	8008176 <HAL_CAN_IRQHandler+0x2f8>
 8008170:	2b20      	cmp	r3, #32
 8008172:	d005      	beq.n	8008180 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008174:	e01d      	b.n	80081b2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	f043 0308 	orr.w	r3, r3, #8
 800817c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800817e:	e019      	b.n	80081b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	f043 0310 	orr.w	r3, r3, #16
 8008186:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008188:	e014      	b.n	80081b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	f043 0320 	orr.w	r3, r3, #32
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008192:	e00f      	b.n	80081b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800819c:	e00a      	b.n	80081b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80081a6:	e005      	b.n	80081b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80081b0:	e000      	b.n	80081b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80081b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	699a      	ldr	r2, [r3, #24]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80081c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2204      	movs	r2, #4
 80081ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d008      	beq.n	80081e4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f867 	bl	80082b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80081e4:	bf00      	nop
 80081e6:	3728      	adds	r7, #40	; 0x28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bc80      	pop	{r7}
 80081fc:	4770      	bx	lr

080081fe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr

08008222 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr

08008234 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr

08008246 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr

08008258 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	4770      	bx	lr

0800826a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr

0800827c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr

0800828e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bc80      	pop	{r7}
 80082b0:	4770      	bx	lr

080082b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b083      	sub	sp, #12
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr

080082c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f003 0307 	and.w	r3, r3, #7
 80082d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082d4:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <__NVIC_SetPriorityGrouping+0x44>)
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082e0:	4013      	ands	r3, r2
 80082e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80082ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80082f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082f6:	4a04      	ldr	r2, [pc, #16]	; (8008308 <__NVIC_SetPriorityGrouping+0x44>)
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	60d3      	str	r3, [r2, #12]
}
 80082fc:	bf00      	nop
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	e000ed00 	.word	0xe000ed00

0800830c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <__NVIC_GetPriorityGrouping+0x18>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	0a1b      	lsrs	r3, r3, #8
 8008316:	f003 0307 	and.w	r3, r3, #7
}
 800831a:	4618      	mov	r0, r3
 800831c:	46bd      	mov	sp, r7
 800831e:	bc80      	pop	{r7}
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	e000ed00 	.word	0xe000ed00

08008328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	4603      	mov	r3, r0
 8008330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008336:	2b00      	cmp	r3, #0
 8008338:	db0b      	blt.n	8008352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	f003 021f 	and.w	r2, r3, #31
 8008340:	4906      	ldr	r1, [pc, #24]	; (800835c <__NVIC_EnableIRQ+0x34>)
 8008342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	2001      	movs	r0, #1
 800834a:	fa00 f202 	lsl.w	r2, r0, r2
 800834e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr
 800835c:	e000e100 	.word	0xe000e100

08008360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	6039      	str	r1, [r7, #0]
 800836a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800836c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008370:	2b00      	cmp	r3, #0
 8008372:	db0a      	blt.n	800838a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	b2da      	uxtb	r2, r3
 8008378:	490c      	ldr	r1, [pc, #48]	; (80083ac <__NVIC_SetPriority+0x4c>)
 800837a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800837e:	0112      	lsls	r2, r2, #4
 8008380:	b2d2      	uxtb	r2, r2
 8008382:	440b      	add	r3, r1
 8008384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008388:	e00a      	b.n	80083a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	b2da      	uxtb	r2, r3
 800838e:	4908      	ldr	r1, [pc, #32]	; (80083b0 <__NVIC_SetPriority+0x50>)
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	f003 030f 	and.w	r3, r3, #15
 8008396:	3b04      	subs	r3, #4
 8008398:	0112      	lsls	r2, r2, #4
 800839a:	b2d2      	uxtb	r2, r2
 800839c:	440b      	add	r3, r1
 800839e:	761a      	strb	r2, [r3, #24]
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	e000e100 	.word	0xe000e100
 80083b0:	e000ed00 	.word	0xe000ed00

080083b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b089      	sub	sp, #36	; 0x24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f1c3 0307 	rsb	r3, r3, #7
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	bf28      	it	cs
 80083d2:	2304      	movcs	r3, #4
 80083d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	3304      	adds	r3, #4
 80083da:	2b06      	cmp	r3, #6
 80083dc:	d902      	bls.n	80083e4 <NVIC_EncodePriority+0x30>
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	3b03      	subs	r3, #3
 80083e2:	e000      	b.n	80083e6 <NVIC_EncodePriority+0x32>
 80083e4:	2300      	movs	r3, #0
 80083e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083e8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
 80083f2:	43da      	mvns	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	401a      	ands	r2, r3
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	fa01 f303 	lsl.w	r3, r1, r3
 8008406:	43d9      	mvns	r1, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800840c:	4313      	orrs	r3, r2
         );
}
 800840e:	4618      	mov	r0, r3
 8008410:	3724      	adds	r7, #36	; 0x24
 8008412:	46bd      	mov	sp, r7
 8008414:	bc80      	pop	{r7}
 8008416:	4770      	bx	lr

08008418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	3b01      	subs	r3, #1
 8008424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008428:	d301      	bcc.n	800842e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800842a:	2301      	movs	r3, #1
 800842c:	e00f      	b.n	800844e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800842e:	4a0a      	ldr	r2, [pc, #40]	; (8008458 <SysTick_Config+0x40>)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	3b01      	subs	r3, #1
 8008434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008436:	210f      	movs	r1, #15
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	f7ff ff90 	bl	8008360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008440:	4b05      	ldr	r3, [pc, #20]	; (8008458 <SysTick_Config+0x40>)
 8008442:	2200      	movs	r2, #0
 8008444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008446:	4b04      	ldr	r3, [pc, #16]	; (8008458 <SysTick_Config+0x40>)
 8008448:	2207      	movs	r2, #7
 800844a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	e000e010 	.word	0xe000e010

0800845c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff ff2d 	bl	80082c4 <__NVIC_SetPriorityGrouping>
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008472:	b580      	push	{r7, lr}
 8008474:	b086      	sub	sp, #24
 8008476:	af00      	add	r7, sp, #0
 8008478:	4603      	mov	r3, r0
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008484:	f7ff ff42 	bl	800830c <__NVIC_GetPriorityGrouping>
 8008488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	f7ff ff90 	bl	80083b4 <NVIC_EncodePriority>
 8008494:	4602      	mov	r2, r0
 8008496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7ff ff5f 	bl	8008360 <__NVIC_SetPriority>
}
 80084a2:	bf00      	nop
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	4603      	mov	r3, r0
 80084b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7ff ff35 	bl	8008328 <__NVIC_EnableIRQ>
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff ffa2 	bl	8008418 <SysTick_Config>
 80084d4:	4603      	mov	r3, r0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e059      	b.n	80085aa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <HAL_DMA_Init+0xd4>)
 80084fe:	429a      	cmp	r2, r3
 8008500:	d80f      	bhi.n	8008522 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	4b2b      	ldr	r3, [pc, #172]	; (80085b8 <HAL_DMA_Init+0xd8>)
 800850a:	4413      	add	r3, r2
 800850c:	4a2b      	ldr	r2, [pc, #172]	; (80085bc <HAL_DMA_Init+0xdc>)
 800850e:	fba2 2303 	umull	r2, r3, r2, r3
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	009a      	lsls	r2, r3, #2
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a28      	ldr	r2, [pc, #160]	; (80085c0 <HAL_DMA_Init+0xe0>)
 800851e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008520:	e00e      	b.n	8008540 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <HAL_DMA_Init+0xe4>)
 800852a:	4413      	add	r3, r2
 800852c:	4a23      	ldr	r2, [pc, #140]	; (80085bc <HAL_DMA_Init+0xdc>)
 800852e:	fba2 2303 	umull	r2, r3, r2, r3
 8008532:	091b      	lsrs	r3, r3, #4
 8008534:	009a      	lsls	r2, r3, #2
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a22      	ldr	r2, [pc, #136]	; (80085c8 <HAL_DMA_Init+0xe8>)
 800853e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008556:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800855a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800857c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr
 80085b4:	40020407 	.word	0x40020407
 80085b8:	bffdfff8 	.word	0xbffdfff8
 80085bc:	cccccccd 	.word	0xcccccccd
 80085c0:	40020000 	.word	0x40020000
 80085c4:	bffdfbf8 	.word	0xbffdfbf8
 80085c8:	40020400 	.word	0x40020400

080085cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_DMA_Start_IT+0x20>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e04a      	b.n	8008682 <HAL_DMA_Start_IT+0xb6>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d13a      	bne.n	8008674 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2202      	movs	r2, #2
 8008602:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 0201 	bic.w	r2, r2, #1
 800861a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 fb76 	bl	8008d14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d008      	beq.n	8008642 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 020e 	orr.w	r2, r2, #14
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	e00f      	b.n	8008662 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0204 	bic.w	r2, r2, #4
 8008650:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 020a 	orr.w	r2, r2, #10
 8008660:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f042 0201 	orr.w	r2, r2, #1
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	e005      	b.n	8008680 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800867c:	2302      	movs	r3, #2
 800867e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d005      	beq.n	80086ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2204      	movs	r2, #4
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
 80086ac:	e0d6      	b.n	800885c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 020e 	bic.w	r2, r2, #14
 80086bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0201 	bic.w	r2, r2, #1
 80086cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	4b64      	ldr	r3, [pc, #400]	; (8008868 <HAL_DMA_Abort_IT+0x1dc>)
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d958      	bls.n	800878c <HAL_DMA_Abort_IT+0x100>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a63      	ldr	r2, [pc, #396]	; (800886c <HAL_DMA_Abort_IT+0x1e0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d04f      	beq.n	8008784 <HAL_DMA_Abort_IT+0xf8>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a61      	ldr	r2, [pc, #388]	; (8008870 <HAL_DMA_Abort_IT+0x1e4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d048      	beq.n	8008780 <HAL_DMA_Abort_IT+0xf4>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a60      	ldr	r2, [pc, #384]	; (8008874 <HAL_DMA_Abort_IT+0x1e8>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d040      	beq.n	800877a <HAL_DMA_Abort_IT+0xee>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a5e      	ldr	r2, [pc, #376]	; (8008878 <HAL_DMA_Abort_IT+0x1ec>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d038      	beq.n	8008774 <HAL_DMA_Abort_IT+0xe8>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a5d      	ldr	r2, [pc, #372]	; (800887c <HAL_DMA_Abort_IT+0x1f0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d030      	beq.n	800876e <HAL_DMA_Abort_IT+0xe2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a5b      	ldr	r2, [pc, #364]	; (8008880 <HAL_DMA_Abort_IT+0x1f4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d028      	beq.n	8008768 <HAL_DMA_Abort_IT+0xdc>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a53      	ldr	r2, [pc, #332]	; (8008868 <HAL_DMA_Abort_IT+0x1dc>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d020      	beq.n	8008762 <HAL_DMA_Abort_IT+0xd6>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a57      	ldr	r2, [pc, #348]	; (8008884 <HAL_DMA_Abort_IT+0x1f8>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d019      	beq.n	800875e <HAL_DMA_Abort_IT+0xd2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a56      	ldr	r2, [pc, #344]	; (8008888 <HAL_DMA_Abort_IT+0x1fc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d012      	beq.n	800875a <HAL_DMA_Abort_IT+0xce>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a54      	ldr	r2, [pc, #336]	; (800888c <HAL_DMA_Abort_IT+0x200>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00a      	beq.n	8008754 <HAL_DMA_Abort_IT+0xc8>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a53      	ldr	r2, [pc, #332]	; (8008890 <HAL_DMA_Abort_IT+0x204>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d102      	bne.n	800874e <HAL_DMA_Abort_IT+0xc2>
 8008748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800874c:	e01b      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 800874e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008752:	e018      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 8008754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008758:	e015      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 800875a:	2310      	movs	r3, #16
 800875c:	e013      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 800875e:	2301      	movs	r3, #1
 8008760:	e011      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 8008762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008766:	e00e      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 8008768:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800876c:	e00b      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 800876e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008772:	e008      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 8008774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008778:	e005      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 800877a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800877e:	e002      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 8008780:	2310      	movs	r3, #16
 8008782:	e000      	b.n	8008786 <HAL_DMA_Abort_IT+0xfa>
 8008784:	2301      	movs	r3, #1
 8008786:	4a43      	ldr	r2, [pc, #268]	; (8008894 <HAL_DMA_Abort_IT+0x208>)
 8008788:	6053      	str	r3, [r2, #4]
 800878a:	e057      	b.n	800883c <HAL_DMA_Abort_IT+0x1b0>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a36      	ldr	r2, [pc, #216]	; (800886c <HAL_DMA_Abort_IT+0x1e0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d04f      	beq.n	8008836 <HAL_DMA_Abort_IT+0x1aa>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a35      	ldr	r2, [pc, #212]	; (8008870 <HAL_DMA_Abort_IT+0x1e4>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d048      	beq.n	8008832 <HAL_DMA_Abort_IT+0x1a6>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a33      	ldr	r2, [pc, #204]	; (8008874 <HAL_DMA_Abort_IT+0x1e8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d040      	beq.n	800882c <HAL_DMA_Abort_IT+0x1a0>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a32      	ldr	r2, [pc, #200]	; (8008878 <HAL_DMA_Abort_IT+0x1ec>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d038      	beq.n	8008826 <HAL_DMA_Abort_IT+0x19a>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a30      	ldr	r2, [pc, #192]	; (800887c <HAL_DMA_Abort_IT+0x1f0>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d030      	beq.n	8008820 <HAL_DMA_Abort_IT+0x194>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a2f      	ldr	r2, [pc, #188]	; (8008880 <HAL_DMA_Abort_IT+0x1f4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d028      	beq.n	800881a <HAL_DMA_Abort_IT+0x18e>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a26      	ldr	r2, [pc, #152]	; (8008868 <HAL_DMA_Abort_IT+0x1dc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d020      	beq.n	8008814 <HAL_DMA_Abort_IT+0x188>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a2b      	ldr	r2, [pc, #172]	; (8008884 <HAL_DMA_Abort_IT+0x1f8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d019      	beq.n	8008810 <HAL_DMA_Abort_IT+0x184>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a29      	ldr	r2, [pc, #164]	; (8008888 <HAL_DMA_Abort_IT+0x1fc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d012      	beq.n	800880c <HAL_DMA_Abort_IT+0x180>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a28      	ldr	r2, [pc, #160]	; (800888c <HAL_DMA_Abort_IT+0x200>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d00a      	beq.n	8008806 <HAL_DMA_Abort_IT+0x17a>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a26      	ldr	r2, [pc, #152]	; (8008890 <HAL_DMA_Abort_IT+0x204>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d102      	bne.n	8008800 <HAL_DMA_Abort_IT+0x174>
 80087fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087fe:	e01b      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008804:	e018      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800880a:	e015      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 800880c:	2310      	movs	r3, #16
 800880e:	e013      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008810:	2301      	movs	r3, #1
 8008812:	e011      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008818:	e00e      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 800881a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800881e:	e00b      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008824:	e008      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800882a:	e005      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 800882c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008830:	e002      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008832:	2310      	movs	r3, #16
 8008834:	e000      	b.n	8008838 <HAL_DMA_Abort_IT+0x1ac>
 8008836:	2301      	movs	r3, #1
 8008838:	4a17      	ldr	r2, [pc, #92]	; (8008898 <HAL_DMA_Abort_IT+0x20c>)
 800883a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
    } 
  }
  return status;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	40020080 	.word	0x40020080
 800886c:	40020008 	.word	0x40020008
 8008870:	4002001c 	.word	0x4002001c
 8008874:	40020030 	.word	0x40020030
 8008878:	40020044 	.word	0x40020044
 800887c:	40020058 	.word	0x40020058
 8008880:	4002006c 	.word	0x4002006c
 8008884:	40020408 	.word	0x40020408
 8008888:	4002041c 	.word	0x4002041c
 800888c:	40020430 	.word	0x40020430
 8008890:	40020444 	.word	0x40020444
 8008894:	40020400 	.word	0x40020400
 8008898:	40020000 	.word	0x40020000

0800889c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b8:	2204      	movs	r2, #4
 80088ba:	409a      	lsls	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4013      	ands	r3, r2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 80d6 	beq.w	8008a72 <HAL_DMA_IRQHandler+0x1d6>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 80d0 	beq.w	8008a72 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d107      	bne.n	80088f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0204 	bic.w	r2, r2, #4
 80088ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	4b9b      	ldr	r3, [pc, #620]	; (8008b64 <HAL_DMA_IRQHandler+0x2c8>)
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d958      	bls.n	80089ae <HAL_DMA_IRQHandler+0x112>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a99      	ldr	r2, [pc, #612]	; (8008b68 <HAL_DMA_IRQHandler+0x2cc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d04f      	beq.n	80089a6 <HAL_DMA_IRQHandler+0x10a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a98      	ldr	r2, [pc, #608]	; (8008b6c <HAL_DMA_IRQHandler+0x2d0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d048      	beq.n	80089a2 <HAL_DMA_IRQHandler+0x106>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a96      	ldr	r2, [pc, #600]	; (8008b70 <HAL_DMA_IRQHandler+0x2d4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d040      	beq.n	800899c <HAL_DMA_IRQHandler+0x100>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a95      	ldr	r2, [pc, #596]	; (8008b74 <HAL_DMA_IRQHandler+0x2d8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d038      	beq.n	8008996 <HAL_DMA_IRQHandler+0xfa>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a93      	ldr	r2, [pc, #588]	; (8008b78 <HAL_DMA_IRQHandler+0x2dc>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d030      	beq.n	8008990 <HAL_DMA_IRQHandler+0xf4>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a92      	ldr	r2, [pc, #584]	; (8008b7c <HAL_DMA_IRQHandler+0x2e0>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d028      	beq.n	800898a <HAL_DMA_IRQHandler+0xee>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a89      	ldr	r2, [pc, #548]	; (8008b64 <HAL_DMA_IRQHandler+0x2c8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d020      	beq.n	8008984 <HAL_DMA_IRQHandler+0xe8>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a8e      	ldr	r2, [pc, #568]	; (8008b80 <HAL_DMA_IRQHandler+0x2e4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d019      	beq.n	8008980 <HAL_DMA_IRQHandler+0xe4>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a8c      	ldr	r2, [pc, #560]	; (8008b84 <HAL_DMA_IRQHandler+0x2e8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d012      	beq.n	800897c <HAL_DMA_IRQHandler+0xe0>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a8b      	ldr	r2, [pc, #556]	; (8008b88 <HAL_DMA_IRQHandler+0x2ec>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00a      	beq.n	8008976 <HAL_DMA_IRQHandler+0xda>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a89      	ldr	r2, [pc, #548]	; (8008b8c <HAL_DMA_IRQHandler+0x2f0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d102      	bne.n	8008970 <HAL_DMA_IRQHandler+0xd4>
 800896a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800896e:	e01b      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 8008970:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008974:	e018      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 8008976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800897a:	e015      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 800897c:	2340      	movs	r3, #64	; 0x40
 800897e:	e013      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 8008980:	2304      	movs	r3, #4
 8008982:	e011      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 8008984:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008988:	e00e      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 800898a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800898e:	e00b      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 8008990:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008994:	e008      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 8008996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800899a:	e005      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 800899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a0:	e002      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 80089a2:	2340      	movs	r3, #64	; 0x40
 80089a4:	e000      	b.n	80089a8 <HAL_DMA_IRQHandler+0x10c>
 80089a6:	2304      	movs	r3, #4
 80089a8:	4a79      	ldr	r2, [pc, #484]	; (8008b90 <HAL_DMA_IRQHandler+0x2f4>)
 80089aa:	6053      	str	r3, [r2, #4]
 80089ac:	e057      	b.n	8008a5e <HAL_DMA_IRQHandler+0x1c2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a6d      	ldr	r2, [pc, #436]	; (8008b68 <HAL_DMA_IRQHandler+0x2cc>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d04f      	beq.n	8008a58 <HAL_DMA_IRQHandler+0x1bc>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a6b      	ldr	r2, [pc, #428]	; (8008b6c <HAL_DMA_IRQHandler+0x2d0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d048      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x1b8>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a6a      	ldr	r2, [pc, #424]	; (8008b70 <HAL_DMA_IRQHandler+0x2d4>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d040      	beq.n	8008a4e <HAL_DMA_IRQHandler+0x1b2>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a68      	ldr	r2, [pc, #416]	; (8008b74 <HAL_DMA_IRQHandler+0x2d8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d038      	beq.n	8008a48 <HAL_DMA_IRQHandler+0x1ac>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a67      	ldr	r2, [pc, #412]	; (8008b78 <HAL_DMA_IRQHandler+0x2dc>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d030      	beq.n	8008a42 <HAL_DMA_IRQHandler+0x1a6>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a65      	ldr	r2, [pc, #404]	; (8008b7c <HAL_DMA_IRQHandler+0x2e0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d028      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x1a0>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a5d      	ldr	r2, [pc, #372]	; (8008b64 <HAL_DMA_IRQHandler+0x2c8>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d020      	beq.n	8008a36 <HAL_DMA_IRQHandler+0x19a>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a61      	ldr	r2, [pc, #388]	; (8008b80 <HAL_DMA_IRQHandler+0x2e4>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d019      	beq.n	8008a32 <HAL_DMA_IRQHandler+0x196>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a60      	ldr	r2, [pc, #384]	; (8008b84 <HAL_DMA_IRQHandler+0x2e8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d012      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x192>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a5e      	ldr	r2, [pc, #376]	; (8008b88 <HAL_DMA_IRQHandler+0x2ec>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d00a      	beq.n	8008a28 <HAL_DMA_IRQHandler+0x18c>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a5d      	ldr	r2, [pc, #372]	; (8008b8c <HAL_DMA_IRQHandler+0x2f0>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d102      	bne.n	8008a22 <HAL_DMA_IRQHandler+0x186>
 8008a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a20:	e01b      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a26:	e018      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a2c:	e015      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a2e:	2340      	movs	r3, #64	; 0x40
 8008a30:	e013      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a32:	2304      	movs	r3, #4
 8008a34:	e011      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008a3a:	e00e      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a40:	e00b      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a46:	e008      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a4c:	e005      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a52:	e002      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	e000      	b.n	8008a5a <HAL_DMA_IRQHandler+0x1be>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	4a4e      	ldr	r2, [pc, #312]	; (8008b94 <HAL_DMA_IRQHandler+0x2f8>)
 8008a5c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 8136 	beq.w	8008cd4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008a70:	e130      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2202      	movs	r2, #2
 8008a78:	409a      	lsls	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 80f8 	beq.w	8008c74 <HAL_DMA_IRQHandler+0x3d8>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80f2 	beq.w	8008c74 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 020a 	bic.w	r2, r2, #10
 8008aac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	4b29      	ldr	r3, [pc, #164]	; (8008b64 <HAL_DMA_IRQHandler+0x2c8>)
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d973      	bls.n	8008baa <HAL_DMA_IRQHandler+0x30e>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a28      	ldr	r2, [pc, #160]	; (8008b68 <HAL_DMA_IRQHandler+0x2cc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d06a      	beq.n	8008ba2 <HAL_DMA_IRQHandler+0x306>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <HAL_DMA_IRQHandler+0x2d0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d063      	beq.n	8008b9e <HAL_DMA_IRQHandler+0x302>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a25      	ldr	r2, [pc, #148]	; (8008b70 <HAL_DMA_IRQHandler+0x2d4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d05b      	beq.n	8008b98 <HAL_DMA_IRQHandler+0x2fc>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a23      	ldr	r2, [pc, #140]	; (8008b74 <HAL_DMA_IRQHandler+0x2d8>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d038      	beq.n	8008b5c <HAL_DMA_IRQHandler+0x2c0>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a22      	ldr	r2, [pc, #136]	; (8008b78 <HAL_DMA_IRQHandler+0x2dc>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d030      	beq.n	8008b56 <HAL_DMA_IRQHandler+0x2ba>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a20      	ldr	r2, [pc, #128]	; (8008b7c <HAL_DMA_IRQHandler+0x2e0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d028      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x2b4>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a18      	ldr	r2, [pc, #96]	; (8008b64 <HAL_DMA_IRQHandler+0x2c8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d020      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ae>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1c      	ldr	r2, [pc, #112]	; (8008b80 <HAL_DMA_IRQHandler+0x2e4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d019      	beq.n	8008b46 <HAL_DMA_IRQHandler+0x2aa>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a1b      	ldr	r2, [pc, #108]	; (8008b84 <HAL_DMA_IRQHandler+0x2e8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d012      	beq.n	8008b42 <HAL_DMA_IRQHandler+0x2a6>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a19      	ldr	r2, [pc, #100]	; (8008b88 <HAL_DMA_IRQHandler+0x2ec>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00a      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x2a0>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a18      	ldr	r2, [pc, #96]	; (8008b8c <HAL_DMA_IRQHandler+0x2f0>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d102      	bne.n	8008b36 <HAL_DMA_IRQHandler+0x29a>
 8008b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b34:	e036      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b3a:	e033      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b40:	e030      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b42:	2320      	movs	r3, #32
 8008b44:	e02e      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b46:	2302      	movs	r3, #2
 8008b48:	e02c      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b4e:	e029      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b54:	e026      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b5a:	e023      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b60:	e020      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b62:	bf00      	nop
 8008b64:	40020080 	.word	0x40020080
 8008b68:	40020008 	.word	0x40020008
 8008b6c:	4002001c 	.word	0x4002001c
 8008b70:	40020030 	.word	0x40020030
 8008b74:	40020044 	.word	0x40020044
 8008b78:	40020058 	.word	0x40020058
 8008b7c:	4002006c 	.word	0x4002006c
 8008b80:	40020408 	.word	0x40020408
 8008b84:	4002041c 	.word	0x4002041c
 8008b88:	40020430 	.word	0x40020430
 8008b8c:	40020444 	.word	0x40020444
 8008b90:	40020400 	.word	0x40020400
 8008b94:	40020000 	.word	0x40020000
 8008b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b9c:	e002      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008b9e:	2320      	movs	r3, #32
 8008ba0:	e000      	b.n	8008ba4 <HAL_DMA_IRQHandler+0x308>
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	4a4e      	ldr	r2, [pc, #312]	; (8008ce0 <HAL_DMA_IRQHandler+0x444>)
 8008ba6:	6053      	str	r3, [r2, #4]
 8008ba8:	e057      	b.n	8008c5a <HAL_DMA_IRQHandler+0x3be>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a4d      	ldr	r2, [pc, #308]	; (8008ce4 <HAL_DMA_IRQHandler+0x448>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d04f      	beq.n	8008c54 <HAL_DMA_IRQHandler+0x3b8>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a4b      	ldr	r2, [pc, #300]	; (8008ce8 <HAL_DMA_IRQHandler+0x44c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d048      	beq.n	8008c50 <HAL_DMA_IRQHandler+0x3b4>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a4a      	ldr	r2, [pc, #296]	; (8008cec <HAL_DMA_IRQHandler+0x450>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d040      	beq.n	8008c4a <HAL_DMA_IRQHandler+0x3ae>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a48      	ldr	r2, [pc, #288]	; (8008cf0 <HAL_DMA_IRQHandler+0x454>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d038      	beq.n	8008c44 <HAL_DMA_IRQHandler+0x3a8>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a47      	ldr	r2, [pc, #284]	; (8008cf4 <HAL_DMA_IRQHandler+0x458>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d030      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3a2>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a45      	ldr	r2, [pc, #276]	; (8008cf8 <HAL_DMA_IRQHandler+0x45c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d028      	beq.n	8008c38 <HAL_DMA_IRQHandler+0x39c>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a44      	ldr	r2, [pc, #272]	; (8008cfc <HAL_DMA_IRQHandler+0x460>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d020      	beq.n	8008c32 <HAL_DMA_IRQHandler+0x396>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a42      	ldr	r2, [pc, #264]	; (8008d00 <HAL_DMA_IRQHandler+0x464>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d019      	beq.n	8008c2e <HAL_DMA_IRQHandler+0x392>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a41      	ldr	r2, [pc, #260]	; (8008d04 <HAL_DMA_IRQHandler+0x468>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d012      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x38e>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a3f      	ldr	r2, [pc, #252]	; (8008d08 <HAL_DMA_IRQHandler+0x46c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d00a      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x388>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a3e      	ldr	r2, [pc, #248]	; (8008d0c <HAL_DMA_IRQHandler+0x470>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d102      	bne.n	8008c1e <HAL_DMA_IRQHandler+0x382>
 8008c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c1c:	e01b      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c22:	e018      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c28:	e015      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c2a:	2320      	movs	r3, #32
 8008c2c:	e013      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e011      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c36:	e00e      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c3c:	e00b      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c42:	e008      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c48:	e005      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c4e:	e002      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c50:	2320      	movs	r3, #32
 8008c52:	e000      	b.n	8008c56 <HAL_DMA_IRQHandler+0x3ba>
 8008c54:	2302      	movs	r3, #2
 8008c56:	4a2e      	ldr	r2, [pc, #184]	; (8008d10 <HAL_DMA_IRQHandler+0x474>)
 8008c58:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d034      	beq.n	8008cd4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008c72:	e02f      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	2208      	movs	r2, #8
 8008c7a:	409a      	lsls	r2, r3
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d028      	beq.n	8008cd6 <HAL_DMA_IRQHandler+0x43a>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	f003 0308 	and.w	r3, r3, #8
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d023      	beq.n	8008cd6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 020e 	bic.w	r2, r2, #14
 8008c9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8008cac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	4798      	blx	r3
    }
  }
  return;
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
}
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	40020400 	.word	0x40020400
 8008ce4:	40020008 	.word	0x40020008
 8008ce8:	4002001c 	.word	0x4002001c
 8008cec:	40020030 	.word	0x40020030
 8008cf0:	40020044 	.word	0x40020044
 8008cf4:	40020058 	.word	0x40020058
 8008cf8:	4002006c 	.word	0x4002006c
 8008cfc:	40020080 	.word	0x40020080
 8008d00:	40020408 	.word	0x40020408
 8008d04:	4002041c 	.word	0x4002041c
 8008d08:	40020430 	.word	0x40020430
 8008d0c:	40020444 	.word	0x40020444
 8008d10:	40020000 	.word	0x40020000

08008d14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8008d30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d108      	bne.n	8008d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008d52:	e007      	b.n	8008d64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	60da      	str	r2, [r3, #12]
}
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bc80      	pop	{r7}
 8008d6c:	4770      	bx	lr
	...

08008d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b08b      	sub	sp, #44	; 0x2c
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d82:	e179      	b.n	8009078 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008d84:	2201      	movs	r2, #1
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	fa02 f303 	lsl.w	r3, r2, r3
 8008d8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	4013      	ands	r3, r2
 8008d96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008d98:	69ba      	ldr	r2, [r7, #24]
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	f040 8168 	bne.w	8009072 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	4aa0      	ldr	r2, [pc, #640]	; (8009028 <HAL_GPIO_Init+0x2b8>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d05e      	beq.n	8008e6a <HAL_GPIO_Init+0xfa>
 8008dac:	4a9e      	ldr	r2, [pc, #632]	; (8009028 <HAL_GPIO_Init+0x2b8>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d875      	bhi.n	8008e9e <HAL_GPIO_Init+0x12e>
 8008db2:	4a9e      	ldr	r2, [pc, #632]	; (800902c <HAL_GPIO_Init+0x2bc>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d058      	beq.n	8008e6a <HAL_GPIO_Init+0xfa>
 8008db8:	4a9c      	ldr	r2, [pc, #624]	; (800902c <HAL_GPIO_Init+0x2bc>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d86f      	bhi.n	8008e9e <HAL_GPIO_Init+0x12e>
 8008dbe:	4a9c      	ldr	r2, [pc, #624]	; (8009030 <HAL_GPIO_Init+0x2c0>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d052      	beq.n	8008e6a <HAL_GPIO_Init+0xfa>
 8008dc4:	4a9a      	ldr	r2, [pc, #616]	; (8009030 <HAL_GPIO_Init+0x2c0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d869      	bhi.n	8008e9e <HAL_GPIO_Init+0x12e>
 8008dca:	4a9a      	ldr	r2, [pc, #616]	; (8009034 <HAL_GPIO_Init+0x2c4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d04c      	beq.n	8008e6a <HAL_GPIO_Init+0xfa>
 8008dd0:	4a98      	ldr	r2, [pc, #608]	; (8009034 <HAL_GPIO_Init+0x2c4>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d863      	bhi.n	8008e9e <HAL_GPIO_Init+0x12e>
 8008dd6:	4a98      	ldr	r2, [pc, #608]	; (8009038 <HAL_GPIO_Init+0x2c8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d046      	beq.n	8008e6a <HAL_GPIO_Init+0xfa>
 8008ddc:	4a96      	ldr	r2, [pc, #600]	; (8009038 <HAL_GPIO_Init+0x2c8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d85d      	bhi.n	8008e9e <HAL_GPIO_Init+0x12e>
 8008de2:	2b12      	cmp	r3, #18
 8008de4:	d82a      	bhi.n	8008e3c <HAL_GPIO_Init+0xcc>
 8008de6:	2b12      	cmp	r3, #18
 8008de8:	d859      	bhi.n	8008e9e <HAL_GPIO_Init+0x12e>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <HAL_GPIO_Init+0x80>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e6b 	.word	0x08008e6b
 8008df4:	08008e45 	.word	0x08008e45
 8008df8:	08008e57 	.word	0x08008e57
 8008dfc:	08008e99 	.word	0x08008e99
 8008e00:	08008e9f 	.word	0x08008e9f
 8008e04:	08008e9f 	.word	0x08008e9f
 8008e08:	08008e9f 	.word	0x08008e9f
 8008e0c:	08008e9f 	.word	0x08008e9f
 8008e10:	08008e9f 	.word	0x08008e9f
 8008e14:	08008e9f 	.word	0x08008e9f
 8008e18:	08008e9f 	.word	0x08008e9f
 8008e1c:	08008e9f 	.word	0x08008e9f
 8008e20:	08008e9f 	.word	0x08008e9f
 8008e24:	08008e9f 	.word	0x08008e9f
 8008e28:	08008e9f 	.word	0x08008e9f
 8008e2c:	08008e9f 	.word	0x08008e9f
 8008e30:	08008e9f 	.word	0x08008e9f
 8008e34:	08008e4d 	.word	0x08008e4d
 8008e38:	08008e61 	.word	0x08008e61
 8008e3c:	4a7f      	ldr	r2, [pc, #508]	; (800903c <HAL_GPIO_Init+0x2cc>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d013      	beq.n	8008e6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008e42:	e02c      	b.n	8008e9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	623b      	str	r3, [r7, #32]
          break;
 8008e4a:	e029      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	3304      	adds	r3, #4
 8008e52:	623b      	str	r3, [r7, #32]
          break;
 8008e54:	e024      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	68db      	ldr	r3, [r3, #12]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	623b      	str	r3, [r7, #32]
          break;
 8008e5e:	e01f      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	330c      	adds	r3, #12
 8008e66:	623b      	str	r3, [r7, #32]
          break;
 8008e68:	e01a      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d102      	bne.n	8008e78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e72:	2304      	movs	r3, #4
 8008e74:	623b      	str	r3, [r7, #32]
          break;
 8008e76:	e013      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d105      	bne.n	8008e8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e80:	2308      	movs	r3, #8
 8008e82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	611a      	str	r2, [r3, #16]
          break;
 8008e8a:	e009      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	69fa      	ldr	r2, [r7, #28]
 8008e94:	615a      	str	r2, [r3, #20]
          break;
 8008e96:	e003      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	623b      	str	r3, [r7, #32]
          break;
 8008e9c:	e000      	b.n	8008ea0 <HAL_GPIO_Init+0x130>
          break;
 8008e9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2bff      	cmp	r3, #255	; 0xff
 8008ea4:	d801      	bhi.n	8008eaa <HAL_GPIO_Init+0x13a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	e001      	b.n	8008eae <HAL_GPIO_Init+0x13e>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3304      	adds	r3, #4
 8008eae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	2bff      	cmp	r3, #255	; 0xff
 8008eb4:	d802      	bhi.n	8008ebc <HAL_GPIO_Init+0x14c>
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	e002      	b.n	8008ec2 <HAL_GPIO_Init+0x152>
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	3b08      	subs	r3, #8
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	210f      	movs	r1, #15
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	6a39      	ldr	r1, [r7, #32]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8008edc:	431a      	orrs	r2, r3
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 80c1 	beq.w	8009072 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008ef0:	4b53      	ldr	r3, [pc, #332]	; (8009040 <HAL_GPIO_Init+0x2d0>)
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	4a52      	ldr	r2, [pc, #328]	; (8009040 <HAL_GPIO_Init+0x2d0>)
 8008ef6:	f043 0301 	orr.w	r3, r3, #1
 8008efa:	6193      	str	r3, [r2, #24]
 8008efc:	4b50      	ldr	r3, [pc, #320]	; (8009040 <HAL_GPIO_Init+0x2d0>)
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008f08:	4a4e      	ldr	r2, [pc, #312]	; (8009044 <HAL_GPIO_Init+0x2d4>)
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	089b      	lsrs	r3, r3, #2
 8008f0e:	3302      	adds	r3, #2
 8008f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	220f      	movs	r2, #15
 8008f20:	fa02 f303 	lsl.w	r3, r2, r3
 8008f24:	43db      	mvns	r3, r3
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4013      	ands	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a46      	ldr	r2, [pc, #280]	; (8009048 <HAL_GPIO_Init+0x2d8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d01f      	beq.n	8008f74 <HAL_GPIO_Init+0x204>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a45      	ldr	r2, [pc, #276]	; (800904c <HAL_GPIO_Init+0x2dc>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d019      	beq.n	8008f70 <HAL_GPIO_Init+0x200>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a44      	ldr	r2, [pc, #272]	; (8009050 <HAL_GPIO_Init+0x2e0>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d013      	beq.n	8008f6c <HAL_GPIO_Init+0x1fc>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a43      	ldr	r2, [pc, #268]	; (8009054 <HAL_GPIO_Init+0x2e4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00d      	beq.n	8008f68 <HAL_GPIO_Init+0x1f8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a42      	ldr	r2, [pc, #264]	; (8009058 <HAL_GPIO_Init+0x2e8>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d007      	beq.n	8008f64 <HAL_GPIO_Init+0x1f4>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a41      	ldr	r2, [pc, #260]	; (800905c <HAL_GPIO_Init+0x2ec>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d101      	bne.n	8008f60 <HAL_GPIO_Init+0x1f0>
 8008f5c:	2305      	movs	r3, #5
 8008f5e:	e00a      	b.n	8008f76 <HAL_GPIO_Init+0x206>
 8008f60:	2306      	movs	r3, #6
 8008f62:	e008      	b.n	8008f76 <HAL_GPIO_Init+0x206>
 8008f64:	2304      	movs	r3, #4
 8008f66:	e006      	b.n	8008f76 <HAL_GPIO_Init+0x206>
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e004      	b.n	8008f76 <HAL_GPIO_Init+0x206>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e002      	b.n	8008f76 <HAL_GPIO_Init+0x206>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e000      	b.n	8008f76 <HAL_GPIO_Init+0x206>
 8008f74:	2300      	movs	r3, #0
 8008f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f78:	f002 0203 	and.w	r2, r2, #3
 8008f7c:	0092      	lsls	r2, r2, #2
 8008f7e:	4093      	lsls	r3, r2
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008f86:	492f      	ldr	r1, [pc, #188]	; (8009044 <HAL_GPIO_Init+0x2d4>)
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	089b      	lsrs	r3, r3, #2
 8008f8c:	3302      	adds	r3, #2
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d006      	beq.n	8008fae <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008fa0:	4b2f      	ldr	r3, [pc, #188]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	492e      	ldr	r1, [pc, #184]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	600b      	str	r3, [r1, #0]
 8008fac:	e006      	b.n	8008fbc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008fae:	4b2c      	ldr	r3, [pc, #176]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	43db      	mvns	r3, r3
 8008fb6:	492a      	ldr	r1, [pc, #168]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fb8:	4013      	ands	r3, r2
 8008fba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d006      	beq.n	8008fd6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008fc8:	4b25      	ldr	r3, [pc, #148]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4924      	ldr	r1, [pc, #144]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	604b      	str	r3, [r1, #4]
 8008fd4:	e006      	b.n	8008fe4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008fd6:	4b22      	ldr	r3, [pc, #136]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	43db      	mvns	r3, r3
 8008fde:	4920      	ldr	r1, [pc, #128]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d006      	beq.n	8008ffe <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008ff0:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	491a      	ldr	r1, [pc, #104]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	608b      	str	r3, [r1, #8]
 8008ffc:	e006      	b.n	800900c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008ffe:	4b18      	ldr	r3, [pc, #96]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8009000:	689a      	ldr	r2, [r3, #8]
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	43db      	mvns	r3, r3
 8009006:	4916      	ldr	r1, [pc, #88]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 8009008:	4013      	ands	r3, r2
 800900a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d025      	beq.n	8009064 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	4910      	ldr	r1, [pc, #64]	; (8009060 <HAL_GPIO_Init+0x2f0>)
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	4313      	orrs	r3, r2
 8009022:	60cb      	str	r3, [r1, #12]
 8009024:	e025      	b.n	8009072 <HAL_GPIO_Init+0x302>
 8009026:	bf00      	nop
 8009028:	10320000 	.word	0x10320000
 800902c:	10310000 	.word	0x10310000
 8009030:	10220000 	.word	0x10220000
 8009034:	10210000 	.word	0x10210000
 8009038:	10120000 	.word	0x10120000
 800903c:	10110000 	.word	0x10110000
 8009040:	40021000 	.word	0x40021000
 8009044:	40010000 	.word	0x40010000
 8009048:	40010800 	.word	0x40010800
 800904c:	40010c00 	.word	0x40010c00
 8009050:	40011000 	.word	0x40011000
 8009054:	40011400 	.word	0x40011400
 8009058:	40011800 	.word	0x40011800
 800905c:	40011c00 	.word	0x40011c00
 8009060:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009064:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <HAL_GPIO_Init+0x324>)
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	43db      	mvns	r3, r3
 800906c:	4909      	ldr	r1, [pc, #36]	; (8009094 <HAL_GPIO_Init+0x324>)
 800906e:	4013      	ands	r3, r2
 8009070:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	3301      	adds	r3, #1
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	fa22 f303 	lsr.w	r3, r2, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	f47f ae7e 	bne.w	8008d84 <HAL_GPIO_Init+0x14>
  }
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	372c      	adds	r7, #44	; 0x2c
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	40010400 	.word	0x40010400

08009098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	460b      	mov	r3, r1
 80090a2:	807b      	strh	r3, [r7, #2]
 80090a4:	4613      	mov	r3, r2
 80090a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80090a8:	787b      	ldrb	r3, [r7, #1]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80090ae:	887a      	ldrh	r2, [r7, #2]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80090b4:	e003      	b.n	80090be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80090b6:	887b      	ldrh	r3, [r7, #2]
 80090b8:	041a      	lsls	r2, r3, #16
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	611a      	str	r2, [r3, #16]
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bc80      	pop	{r7}
 80090c6:	4770      	bx	lr

080090c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090da:	887a      	ldrh	r2, [r7, #2]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4013      	ands	r3, r2
 80090e0:	041a      	lsls	r2, r3, #16
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	43d9      	mvns	r1, r3
 80090e6:	887b      	ldrh	r3, [r7, #2]
 80090e8:	400b      	ands	r3, r1
 80090ea:	431a      	orrs	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	611a      	str	r2, [r3, #16]
}
 80090f0:	bf00      	nop
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bc80      	pop	{r7}
 80090f8:	4770      	bx	lr
	...

080090fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e12b      	b.n	8009366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f9 fcb8 	bl	8002a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2224      	movs	r2, #36	; 0x24
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 0201 	bic.w	r2, r2, #1
 800913e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800914e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800915e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009160:	f001 fea0 	bl	800aea4 <HAL_RCC_GetPCLK1Freq>
 8009164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	4a81      	ldr	r2, [pc, #516]	; (8009370 <HAL_I2C_Init+0x274>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d807      	bhi.n	8009180 <HAL_I2C_Init+0x84>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4a80      	ldr	r2, [pc, #512]	; (8009374 <HAL_I2C_Init+0x278>)
 8009174:	4293      	cmp	r3, r2
 8009176:	bf94      	ite	ls
 8009178:	2301      	movls	r3, #1
 800917a:	2300      	movhi	r3, #0
 800917c:	b2db      	uxtb	r3, r3
 800917e:	e006      	b.n	800918e <HAL_I2C_Init+0x92>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a7d      	ldr	r2, [pc, #500]	; (8009378 <HAL_I2C_Init+0x27c>)
 8009184:	4293      	cmp	r3, r2
 8009186:	bf94      	ite	ls
 8009188:	2301      	movls	r3, #1
 800918a:	2300      	movhi	r3, #0
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e0e7      	b.n	8009366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	4a78      	ldr	r2, [pc, #480]	; (800937c <HAL_I2C_Init+0x280>)
 800919a:	fba2 2303 	umull	r2, r3, r2, r3
 800919e:	0c9b      	lsrs	r3, r3, #18
 80091a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	4a6a      	ldr	r2, [pc, #424]	; (8009370 <HAL_I2C_Init+0x274>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d802      	bhi.n	80091d0 <HAL_I2C_Init+0xd4>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	3301      	adds	r3, #1
 80091ce:	e009      	b.n	80091e4 <HAL_I2C_Init+0xe8>
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091d6:	fb02 f303 	mul.w	r3, r2, r3
 80091da:	4a69      	ldr	r2, [pc, #420]	; (8009380 <HAL_I2C_Init+0x284>)
 80091dc:	fba2 2303 	umull	r2, r3, r2, r3
 80091e0:	099b      	lsrs	r3, r3, #6
 80091e2:	3301      	adds	r3, #1
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6812      	ldr	r2, [r2, #0]
 80091e8:	430b      	orrs	r3, r1
 80091ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	495c      	ldr	r1, [pc, #368]	; (8009370 <HAL_I2C_Init+0x274>)
 8009200:	428b      	cmp	r3, r1
 8009202:	d819      	bhi.n	8009238 <HAL_I2C_Init+0x13c>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	1e59      	subs	r1, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009212:	1c59      	adds	r1, r3, #1
 8009214:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009218:	400b      	ands	r3, r1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00a      	beq.n	8009234 <HAL_I2C_Init+0x138>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	1e59      	subs	r1, r3, #1
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	fbb1 f3f3 	udiv	r3, r1, r3
 800922c:	3301      	adds	r3, #1
 800922e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009232:	e051      	b.n	80092d8 <HAL_I2C_Init+0x1dc>
 8009234:	2304      	movs	r3, #4
 8009236:	e04f      	b.n	80092d8 <HAL_I2C_Init+0x1dc>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d111      	bne.n	8009264 <HAL_I2C_Init+0x168>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	1e58      	subs	r0, r3, #1
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6859      	ldr	r1, [r3, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	440b      	add	r3, r1
 800924e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009252:	3301      	adds	r3, #1
 8009254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009258:	2b00      	cmp	r3, #0
 800925a:	bf0c      	ite	eq
 800925c:	2301      	moveq	r3, #1
 800925e:	2300      	movne	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	e012      	b.n	800928a <HAL_I2C_Init+0x18e>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	1e58      	subs	r0, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6859      	ldr	r1, [r3, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	440b      	add	r3, r1
 8009272:	0099      	lsls	r1, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	fbb0 f3f3 	udiv	r3, r0, r3
 800927a:	3301      	adds	r3, #1
 800927c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009280:	2b00      	cmp	r3, #0
 8009282:	bf0c      	ite	eq
 8009284:	2301      	moveq	r3, #1
 8009286:	2300      	movne	r3, #0
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <HAL_I2C_Init+0x196>
 800928e:	2301      	movs	r3, #1
 8009290:	e022      	b.n	80092d8 <HAL_I2C_Init+0x1dc>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10e      	bne.n	80092b8 <HAL_I2C_Init+0x1bc>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	1e58      	subs	r0, r3, #1
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6859      	ldr	r1, [r3, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	440b      	add	r3, r1
 80092a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ac:	3301      	adds	r3, #1
 80092ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b6:	e00f      	b.n	80092d8 <HAL_I2C_Init+0x1dc>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	1e58      	subs	r0, r3, #1
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6859      	ldr	r1, [r3, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	440b      	add	r3, r1
 80092c6:	0099      	lsls	r1, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ce:	3301      	adds	r3, #1
 80092d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	6809      	ldr	r1, [r1, #0]
 80092dc:	4313      	orrs	r3, r2
 80092de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	69da      	ldr	r2, [r3, #28]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6911      	ldr	r1, [r2, #16]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	68d2      	ldr	r2, [r2, #12]
 8009312:	4311      	orrs	r1, r2
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	430b      	orrs	r3, r1
 800931a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	695a      	ldr	r2, [r3, #20]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0201 	orr.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	000186a0 	.word	0x000186a0
 8009374:	001e847f 	.word	0x001e847f
 8009378:	003d08ff 	.word	0x003d08ff
 800937c:	431bde83 	.word	0x431bde83
 8009380:	10624dd3 	.word	0x10624dd3

08009384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	461a      	mov	r2, r3
 8009390:	460b      	mov	r3, r1
 8009392:	817b      	strh	r3, [r7, #10]
 8009394:	4613      	mov	r3, r2
 8009396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009398:	f7fd fcd6 	bl	8006d48 <HAL_GetTick>
 800939c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	f040 80e0 	bne.w	800956c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	2319      	movs	r3, #25
 80093b2:	2201      	movs	r2, #1
 80093b4:	4970      	ldr	r1, [pc, #448]	; (8009578 <HAL_I2C_Master_Transmit+0x1f4>)
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 ff72 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80093c2:	2302      	movs	r3, #2
 80093c4:	e0d3      	b.n	800956e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_I2C_Master_Transmit+0x50>
 80093d0:	2302      	movs	r3, #2
 80093d2:	e0cc      	b.n	800956e <HAL_I2C_Master_Transmit+0x1ea>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d007      	beq.n	80093fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0201 	orr.w	r2, r2, #1
 80093f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2221      	movs	r2, #33	; 0x21
 800940e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2210      	movs	r2, #16
 8009416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	893a      	ldrh	r2, [r7, #8]
 800942a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	4a50      	ldr	r2, [pc, #320]	; (800957c <HAL_I2C_Master_Transmit+0x1f8>)
 800943a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800943c:	8979      	ldrh	r1, [r7, #10]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	6a3a      	ldr	r2, [r7, #32]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fd2c 	bl	8009ea0 <I2C_MasterRequestWrite>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d001      	beq.n	8009452 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e08d      	b.n	800956e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009452:	2300      	movs	r3, #0
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	613b      	str	r3, [r7, #16]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009468:	e066      	b.n	8009538 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	6a39      	ldr	r1, [r7, #32]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 ffec 	bl	800a44c <I2C_WaitOnTXEFlagUntilTimeout>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00d      	beq.n	8009496 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	2b04      	cmp	r3, #4
 8009480:	d107      	bne.n	8009492 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e06b      	b.n	800956e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	781a      	ldrb	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	1c5a      	adds	r2, r3, #1
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094be:	3b01      	subs	r3, #1
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	f003 0304 	and.w	r3, r3, #4
 80094d0:	2b04      	cmp	r3, #4
 80094d2:	d11b      	bne.n	800950c <HAL_I2C_Master_Transmit+0x188>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d017      	beq.n	800950c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	781a      	ldrb	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009504:	3b01      	subs	r3, #1
 8009506:	b29a      	uxth	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	6a39      	ldr	r1, [r7, #32]
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 ffdc 	bl	800a4ce <I2C_WaitOnBTFFlagUntilTimeout>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00d      	beq.n	8009538 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	2b04      	cmp	r3, #4
 8009522:	d107      	bne.n	8009534 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e01a      	b.n	800956e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953c:	2b00      	cmp	r3, #0
 800953e:	d194      	bne.n	800946a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2220      	movs	r2, #32
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	e000      	b.n	800956e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800956c:	2302      	movs	r3, #2
  }
}
 800956e:	4618      	mov	r0, r3
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	00100002 	.word	0x00100002
 800957c:	ffff0000 	.word	0xffff0000

08009580 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af02      	add	r7, sp, #8
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	4608      	mov	r0, r1
 800958a:	4611      	mov	r1, r2
 800958c:	461a      	mov	r2, r3
 800958e:	4603      	mov	r3, r0
 8009590:	817b      	strh	r3, [r7, #10]
 8009592:	460b      	mov	r3, r1
 8009594:	813b      	strh	r3, [r7, #8]
 8009596:	4613      	mov	r3, r2
 8009598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800959a:	f7fd fbd5 	bl	8006d48 <HAL_GetTick>
 800959e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	f040 80d9 	bne.w	8009760 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	2319      	movs	r3, #25
 80095b4:	2201      	movs	r2, #1
 80095b6:	496d      	ldr	r1, [pc, #436]	; (800976c <HAL_I2C_Mem_Write+0x1ec>)
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fe71 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80095c4:	2302      	movs	r3, #2
 80095c6:	e0cc      	b.n	8009762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d101      	bne.n	80095d6 <HAL_I2C_Mem_Write+0x56>
 80095d2:	2302      	movs	r3, #2
 80095d4:	e0c5      	b.n	8009762 <HAL_I2C_Mem_Write+0x1e2>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d007      	beq.n	80095fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f042 0201 	orr.w	r2, r2, #1
 80095fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800960a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2221      	movs	r2, #33	; 0x21
 8009610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2240      	movs	r2, #64	; 0x40
 8009618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a3a      	ldr	r2, [r7, #32]
 8009626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800962c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4a4d      	ldr	r2, [pc, #308]	; (8009770 <HAL_I2C_Mem_Write+0x1f0>)
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800963e:	88f8      	ldrh	r0, [r7, #6]
 8009640:	893a      	ldrh	r2, [r7, #8]
 8009642:	8979      	ldrh	r1, [r7, #10]
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	4603      	mov	r3, r0
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 fca8 	bl	8009fa4 <I2C_RequestMemoryWrite>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d052      	beq.n	8009700 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e081      	b.n	8009762 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f000 fef2 	bl	800a44c <I2C_WaitOnTXEFlagUntilTimeout>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00d      	beq.n	800968a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009672:	2b04      	cmp	r3, #4
 8009674:	d107      	bne.n	8009686 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009684:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e06b      	b.n	8009762 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	781a      	ldrb	r2, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b04      	cmp	r3, #4
 80096c6:	d11b      	bne.n	8009700 <HAL_I2C_Mem_Write+0x180>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d017      	beq.n	8009700 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d4:	781a      	ldrb	r2, [r3, #0]
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1aa      	bne.n	800965e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fede 	bl	800a4ce <I2C_WaitOnBTFFlagUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00d      	beq.n	8009734 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	2b04      	cmp	r3, #4
 800971e:	d107      	bne.n	8009730 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800972e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e016      	b.n	8009762 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009760:	2302      	movs	r3, #2
  }
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	00100002 	.word	0x00100002
 8009770:	ffff0000 	.word	0xffff0000

08009774 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08c      	sub	sp, #48	; 0x30
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	4608      	mov	r0, r1
 800977e:	4611      	mov	r1, r2
 8009780:	461a      	mov	r2, r3
 8009782:	4603      	mov	r3, r0
 8009784:	817b      	strh	r3, [r7, #10]
 8009786:	460b      	mov	r3, r1
 8009788:	813b      	strh	r3, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800978e:	2300      	movs	r3, #0
 8009790:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009792:	f7fd fad9 	bl	8006d48 <HAL_GetTick>
 8009796:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b20      	cmp	r3, #32
 80097a2:	f040 8244 	bne.w	8009c2e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	2319      	movs	r3, #25
 80097ac:	2201      	movs	r2, #1
 80097ae:	4982      	ldr	r1, [pc, #520]	; (80099b8 <HAL_I2C_Mem_Read+0x244>)
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 fd75 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80097bc:	2302      	movs	r3, #2
 80097be:	e237      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d101      	bne.n	80097ce <HAL_I2C_Mem_Read+0x5a>
 80097ca:	2302      	movs	r3, #2
 80097cc:	e230      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d007      	beq.n	80097f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2222      	movs	r2, #34	; 0x22
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2240      	movs	r2, #64	; 0x40
 8009810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800981e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982a:	b29a      	uxth	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4a62      	ldr	r2, [pc, #392]	; (80099bc <HAL_I2C_Mem_Read+0x248>)
 8009834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009836:	88f8      	ldrh	r0, [r7, #6]
 8009838:	893a      	ldrh	r2, [r7, #8]
 800983a:	8979      	ldrh	r1, [r7, #10]
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4603      	mov	r3, r0
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 fc42 	bl	800a0d0 <I2C_RequestMemoryRead>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e1ec      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d113      	bne.n	8009886 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800985e:	2300      	movs	r3, #0
 8009860:	61fb      	str	r3, [r7, #28]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	61fb      	str	r3, [r7, #28]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	61fb      	str	r3, [r7, #28]
 8009872:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	e1c0      	b.n	8009c08 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988a:	2b01      	cmp	r3, #1
 800988c:	d11e      	bne.n	80098cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800989c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800989e:	b672      	cpsid	i
}
 80098a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098a2:	2300      	movs	r3, #0
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	61bb      	str	r3, [r7, #24]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	61bb      	str	r3, [r7, #24]
 80098b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80098c8:	b662      	cpsie	i
}
 80098ca:	e035      	b.n	8009938 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d11e      	bne.n	8009912 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098e4:	b672      	cpsid	i
}
 80098e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800990c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800990e:	b662      	cpsie	i
}
 8009910:	e012      	b.n	8009938 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009920:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009922:	2300      	movs	r3, #0
 8009924:	613b      	str	r3, [r7, #16]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	613b      	str	r3, [r7, #16]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009938:	e166      	b.n	8009c08 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800993e:	2b03      	cmp	r3, #3
 8009940:	f200 811f 	bhi.w	8009b82 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009948:	2b01      	cmp	r3, #1
 800994a:	d123      	bne.n	8009994 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800994c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009950:	68f8      	ldr	r0, [r7, #12]
 8009952:	f000 fdfd 	bl	800a550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e167      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	691a      	ldr	r2, [r3, #16]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	b2d2      	uxtb	r2, r2
 800996c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997c:	3b01      	subs	r3, #1
 800997e:	b29a      	uxth	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009988:	b29b      	uxth	r3, r3
 800998a:	3b01      	subs	r3, #1
 800998c:	b29a      	uxth	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009992:	e139      	b.n	8009c08 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009998:	2b02      	cmp	r3, #2
 800999a:	d152      	bne.n	8009a42 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	9300      	str	r3, [sp, #0]
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	2200      	movs	r2, #0
 80099a4:	4906      	ldr	r1, [pc, #24]	; (80099c0 <HAL_I2C_Mem_Read+0x24c>)
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fc7a 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e13c      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
 80099b6:	bf00      	nop
 80099b8:	00100002 	.word	0x00100002
 80099bc:	ffff0000 	.word	0xffff0000
 80099c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80099c4:	b672      	cpsid	i
}
 80099c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691a      	ldr	r2, [r3, #16]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	b2d2      	uxtb	r2, r2
 80099e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	1c5a      	adds	r2, r3, #1
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009a0a:	b662      	cpsie	i
}
 8009a0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a40:	e0e2      	b.n	8009c08 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	2200      	movs	r2, #0
 8009a4a:	497b      	ldr	r1, [pc, #492]	; (8009c38 <HAL_I2C_Mem_Read+0x4c4>)
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fc27 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e0e9      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a6c:	b672      	cpsid	i
}
 8009a6e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	691a      	ldr	r2, [r3, #16]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009aa2:	4b66      	ldr	r3, [pc, #408]	; (8009c3c <HAL_I2C_Mem_Read+0x4c8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	08db      	lsrs	r3, r3, #3
 8009aa8:	4a65      	ldr	r2, [pc, #404]	; (8009c40 <HAL_I2C_Mem_Read+0x4cc>)
 8009aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009aae:	0a1a      	lsrs	r2, r3, #8
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	4413      	add	r3, r2
 8009ab6:	00da      	lsls	r2, r3, #3
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d118      	bne.n	8009afa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2200      	movs	r2, #0
 8009acc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2220      	movs	r2, #32
 8009ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	f043 0220 	orr.w	r2, r3, #32
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009aea:	b662      	cpsie	i
}
 8009aec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e09a      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d1d9      	bne.n	8009abc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	691a      	ldr	r2, [r3, #16]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	b2d2      	uxtb	r2, r2
 8009b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b34:	3b01      	subs	r3, #1
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b4a:	b662      	cpsie	i
}
 8009b4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	b2d2      	uxtb	r2, r2
 8009b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b60:	1c5a      	adds	r2, r3, #1
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b80:	e042      	b.n	8009c08 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 fce2 	bl	800a550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e04c      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691a      	ldr	r2, [r3, #16]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	b2d2      	uxtb	r2, r2
 8009ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	1c5a      	adds	r2, r3, #1
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d118      	bne.n	8009c08 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	3b01      	subs	r3, #1
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f47f ae94 	bne.w	800993a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2220      	movs	r2, #32
 8009c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	e000      	b.n	8009c30 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009c2e:	2302      	movs	r3, #2
  }
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3728      	adds	r7, #40	; 0x28
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	00010004 	.word	0x00010004
 8009c3c:	20000070 	.word	0x20000070
 8009c40:	14f8b589 	.word	0x14f8b589

08009c44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	; 0x28
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	607a      	str	r2, [r7, #4]
 8009c4e:	603b      	str	r3, [r7, #0]
 8009c50:	460b      	mov	r3, r1
 8009c52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009c54:	f7fd f878 	bl	8006d48 <HAL_GetTick>
 8009c58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	f040 8111 	bne.w	8009e8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	2319      	movs	r3, #25
 8009c72:	2201      	movs	r2, #1
 8009c74:	4988      	ldr	r1, [pc, #544]	; (8009e98 <HAL_I2C_IsDeviceReady+0x254>)
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 fb12 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009c82:	2302      	movs	r3, #2
 8009c84:	e104      	b.n	8009e90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d101      	bne.n	8009c94 <HAL_I2C_IsDeviceReady+0x50>
 8009c90:	2302      	movs	r3, #2
 8009c92:	e0fd      	b.n	8009e90 <HAL_I2C_IsDeviceReady+0x24c>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d007      	beq.n	8009cba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f042 0201 	orr.w	r2, r2, #1
 8009cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2224      	movs	r2, #36	; 0x24
 8009cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	4a70      	ldr	r2, [pc, #448]	; (8009e9c <HAL_I2C_IsDeviceReady+0x258>)
 8009cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	9300      	str	r3, [sp, #0]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fad0 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00d      	beq.n	8009d22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d14:	d103      	bne.n	8009d1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e0b6      	b.n	8009e90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d22:	897b      	ldrh	r3, [r7, #10]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009d32:	f7fd f809 	bl	8006d48 <HAL_GetTick>
 8009d36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	f003 0302 	and.w	r3, r3, #2
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	bf0c      	ite	eq
 8009d46:	2301      	moveq	r3, #1
 8009d48:	2300      	movne	r3, #0
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d5c:	bf0c      	ite	eq
 8009d5e:	2301      	moveq	r3, #1
 8009d60:	2300      	movne	r3, #0
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d66:	e025      	b.n	8009db4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d68:	f7fc ffee 	bl	8006d48 <HAL_GetTick>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d302      	bcc.n	8009d7e <HAL_I2C_IsDeviceReady+0x13a>
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d103      	bne.n	8009d86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	22a0      	movs	r2, #160	; 0xa0
 8009d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	bf0c      	ite	eq
 8009d94:	2301      	moveq	r3, #1
 8009d96:	2300      	movne	r3, #0
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009daa:	bf0c      	ite	eq
 8009dac:	2301      	moveq	r3, #1
 8009dae:	2300      	movne	r3, #0
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	2ba0      	cmp	r3, #160	; 0xa0
 8009dbe:	d005      	beq.n	8009dcc <HAL_I2C_IsDeviceReady+0x188>
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <HAL_I2C_IsDeviceReady+0x188>
 8009dc6:	7dbb      	ldrb	r3, [r7, #22]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0cd      	beq.n	8009d68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	f003 0302 	and.w	r3, r3, #2
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d129      	bne.n	8009e36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009df0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009df2:	2300      	movs	r3, #0
 8009df4:	613b      	str	r3, [r7, #16]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	613b      	str	r3, [r7, #16]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	613b      	str	r3, [r7, #16]
 8009e06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	9300      	str	r3, [sp, #0]
 8009e0c:	2319      	movs	r3, #25
 8009e0e:	2201      	movs	r2, #1
 8009e10:	4921      	ldr	r1, [pc, #132]	; (8009e98 <HAL_I2C_IsDeviceReady+0x254>)
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f000 fa44 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e036      	b.n	8009e90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	e02c      	b.n	8009e90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2319      	movs	r3, #25
 8009e56:	2201      	movs	r2, #1
 8009e58:	490f      	ldr	r1, [pc, #60]	; (8009e98 <HAL_I2C_IsDeviceReady+0x254>)
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fa20 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e012      	b.n	8009e90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009e70:	69ba      	ldr	r2, [r7, #24]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	f4ff af32 	bcc.w	8009cde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e000      	b.n	8009e90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009e8e:	2302      	movs	r3, #2
  }
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3720      	adds	r7, #32
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	00100002 	.word	0x00100002
 8009e9c:	ffff0000 	.word	0xffff0000

08009ea0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	607a      	str	r2, [r7, #4]
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	460b      	mov	r3, r1
 8009eae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b08      	cmp	r3, #8
 8009eba:	d006      	beq.n	8009eca <I2C_MasterRequestWrite+0x2a>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d003      	beq.n	8009eca <I2C_MasterRequestWrite+0x2a>
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ec8:	d108      	bne.n	8009edc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed8:	601a      	str	r2, [r3, #0]
 8009eda:	e00b      	b.n	8009ef4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	2b12      	cmp	r3, #18
 8009ee2:	d107      	bne.n	8009ef4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ef2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f9cd 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00d      	beq.n	8009f28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f1a:	d103      	bne.n	8009f24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e035      	b.n	8009f94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f30:	d108      	bne.n	8009f44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f32:	897b      	ldrh	r3, [r7, #10]
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	461a      	mov	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f40:	611a      	str	r2, [r3, #16]
 8009f42:	e01b      	b.n	8009f7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f44:	897b      	ldrh	r3, [r7, #10]
 8009f46:	11db      	asrs	r3, r3, #7
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	f003 0306 	and.w	r3, r3, #6
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	f063 030f 	orn	r3, r3, #15
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	490e      	ldr	r1, [pc, #56]	; (8009f9c <I2C_MasterRequestWrite+0xfc>)
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 f9f3 	bl	800a34e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e010      	b.n	8009f94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f72:	897b      	ldrh	r3, [r7, #10]
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	4907      	ldr	r1, [pc, #28]	; (8009fa0 <I2C_MasterRequestWrite+0x100>)
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 f9e3 	bl	800a34e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	00010008 	.word	0x00010008
 8009fa0:	00010002 	.word	0x00010002

08009fa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b088      	sub	sp, #32
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	4608      	mov	r0, r1
 8009fae:	4611      	mov	r1, r2
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	817b      	strh	r3, [r7, #10]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	813b      	strh	r3, [r7, #8]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	6a3b      	ldr	r3, [r7, #32]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f000 f960 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00d      	beq.n	800a002 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ff4:	d103      	bne.n	8009ffe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e05f      	b.n	800a0c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a002:	897b      	ldrh	r3, [r7, #10]
 800a004:	b2db      	uxtb	r3, r3
 800a006:	461a      	mov	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	6a3a      	ldr	r2, [r7, #32]
 800a016:	492d      	ldr	r1, [pc, #180]	; (800a0cc <I2C_RequestMemoryWrite+0x128>)
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 f998 	bl	800a34e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e04c      	b.n	800a0c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a028:	2300      	movs	r3, #0
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	617b      	str	r3, [r7, #20]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	617b      	str	r3, [r7, #20]
 800a03c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a040:	6a39      	ldr	r1, [r7, #32]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fa02 	bl	800a44c <I2C_WaitOnTXEFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00d      	beq.n	800a06a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	2b04      	cmp	r3, #4
 800a054:	d107      	bne.n	800a066 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e02b      	b.n	800a0c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a06a:	88fb      	ldrh	r3, [r7, #6]
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d105      	bne.n	800a07c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a070:	893b      	ldrh	r3, [r7, #8]
 800a072:	b2da      	uxtb	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	611a      	str	r2, [r3, #16]
 800a07a:	e021      	b.n	800a0c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a07c:	893b      	ldrh	r3, [r7, #8]
 800a07e:	0a1b      	lsrs	r3, r3, #8
 800a080:	b29b      	uxth	r3, r3
 800a082:	b2da      	uxtb	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a08a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08c:	6a39      	ldr	r1, [r7, #32]
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 f9dc 	bl	800a44c <I2C_WaitOnTXEFlagUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00d      	beq.n	800a0b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d107      	bne.n	800a0b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e005      	b.n	800a0c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0b6:	893b      	ldrh	r3, [r7, #8]
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3718      	adds	r7, #24
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	00010002 	.word	0x00010002

0800a0d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	461a      	mov	r2, r3
 800a0de:	4603      	mov	r3, r0
 800a0e0:	817b      	strh	r3, [r7, #10]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	813b      	strh	r3, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a108:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	6a3b      	ldr	r3, [r7, #32]
 800a110:	2200      	movs	r2, #0
 800a112:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 f8c2 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00d      	beq.n	800a13e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a130:	d103      	bne.n	800a13a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a138:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e0aa      	b.n	800a294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a13e:	897b      	ldrh	r3, [r7, #10]
 800a140:	b2db      	uxtb	r3, r3
 800a142:	461a      	mov	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a14c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	6a3a      	ldr	r2, [r7, #32]
 800a152:	4952      	ldr	r1, [pc, #328]	; (800a29c <I2C_RequestMemoryRead+0x1cc>)
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 f8fa 	bl	800a34e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e097      	b.n	800a294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17c:	6a39      	ldr	r1, [r7, #32]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f964 	bl	800a44c <I2C_WaitOnTXEFlagUntilTimeout>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00d      	beq.n	800a1a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d107      	bne.n	800a1a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e076      	b.n	800a294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a1a6:	88fb      	ldrh	r3, [r7, #6]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d105      	bne.n	800a1b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1ac:	893b      	ldrh	r3, [r7, #8]
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	611a      	str	r2, [r3, #16]
 800a1b6:	e021      	b.n	800a1fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a1b8:	893b      	ldrh	r3, [r7, #8]
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1c8:	6a39      	ldr	r1, [r7, #32]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 f93e 	bl	800a44c <I2C_WaitOnTXEFlagUntilTimeout>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00d      	beq.n	800a1f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d107      	bne.n	800a1ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e050      	b.n	800a294 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1f2:	893b      	ldrh	r3, [r7, #8]
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1fe:	6a39      	ldr	r1, [r7, #32]
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f923 	bl	800a44c <I2C_WaitOnTXEFlagUntilTimeout>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00d      	beq.n	800a228 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	2b04      	cmp	r3, #4
 800a212:	d107      	bne.n	800a224 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a222:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e035      	b.n	800a294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a236:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	2200      	movs	r2, #0
 800a240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f000 f82b 	bl	800a2a0 <I2C_WaitOnFlagUntilTimeout>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00d      	beq.n	800a26c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a25e:	d103      	bne.n	800a268 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	e013      	b.n	800a294 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a26c:	897b      	ldrh	r3, [r7, #10]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	f043 0301 	orr.w	r3, r3, #1
 800a274:	b2da      	uxtb	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	6a3a      	ldr	r2, [r7, #32]
 800a280:	4906      	ldr	r1, [pc, #24]	; (800a29c <I2C_RequestMemoryRead+0x1cc>)
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f863 	bl	800a34e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	00010002 	.word	0x00010002

0800a2a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2b0:	e025      	b.n	800a2fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b8:	d021      	beq.n	800a2fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2ba:	f7fc fd45 	bl	8006d48 <HAL_GetTick>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	1ad3      	subs	r3, r2, r3
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d302      	bcc.n	800a2d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d116      	bne.n	800a2fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	f043 0220 	orr.w	r2, r3, #32
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e023      	b.n	800a346 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	0c1b      	lsrs	r3, r3, #16
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b01      	cmp	r3, #1
 800a306:	d10d      	bne.n	800a324 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	43da      	mvns	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4013      	ands	r3, r2
 800a314:	b29b      	uxth	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	bf0c      	ite	eq
 800a31a:	2301      	moveq	r3, #1
 800a31c:	2300      	movne	r3, #0
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	461a      	mov	r2, r3
 800a322:	e00c      	b.n	800a33e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	43da      	mvns	r2, r3
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4013      	ands	r3, r2
 800a330:	b29b      	uxth	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	bf0c      	ite	eq
 800a336:	2301      	moveq	r3, #1
 800a338:	2300      	movne	r3, #0
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	461a      	mov	r2, r3
 800a33e:	79fb      	ldrb	r3, [r7, #7]
 800a340:	429a      	cmp	r2, r3
 800a342:	d0b6      	beq.n	800a2b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
 800a35a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a35c:	e051      	b.n	800a402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a36c:	d123      	bne.n	800a3b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a37c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a386:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2220      	movs	r2, #32
 800a392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	f043 0204 	orr.w	r2, r3, #4
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e046      	b.n	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3bc:	d021      	beq.n	800a402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3be:	f7fc fcc3 	bl	8006d48 <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d302      	bcc.n	800a3d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d116      	bne.n	800a402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ee:	f043 0220 	orr.w	r2, r3, #32
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e020      	b.n	800a444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	0c1b      	lsrs	r3, r3, #16
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d10c      	bne.n	800a426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	43da      	mvns	r2, r3
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	4013      	ands	r3, r2
 800a418:	b29b      	uxth	r3, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bf14      	ite	ne
 800a41e:	2301      	movne	r3, #1
 800a420:	2300      	moveq	r3, #0
 800a422:	b2db      	uxtb	r3, r3
 800a424:	e00b      	b.n	800a43e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	699b      	ldr	r3, [r3, #24]
 800a42c:	43da      	mvns	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4013      	ands	r3, r2
 800a432:	b29b      	uxth	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	bf14      	ite	ne
 800a438:	2301      	movne	r3, #1
 800a43a:	2300      	moveq	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d18d      	bne.n	800a35e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a458:	e02d      	b.n	800a4b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f000 f8ce 	bl	800a5fc <I2C_IsAcknowledgeFailed>
 800a460:	4603      	mov	r3, r0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d001      	beq.n	800a46a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a466:	2301      	movs	r3, #1
 800a468:	e02d      	b.n	800a4c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a470:	d021      	beq.n	800a4b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a472:	f7fc fc69 	bl	8006d48 <HAL_GetTick>
 800a476:	4602      	mov	r2, r0
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d302      	bcc.n	800a488 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d116      	bne.n	800a4b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2220      	movs	r2, #32
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a2:	f043 0220 	orr.w	r2, r3, #32
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e007      	b.n	800a4c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	695b      	ldr	r3, [r3, #20]
 800a4bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c0:	2b80      	cmp	r3, #128	; 0x80
 800a4c2:	d1ca      	bne.n	800a45a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b084      	sub	sp, #16
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4da:	e02d      	b.n	800a538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4dc:	68f8      	ldr	r0, [r7, #12]
 800a4de:	f000 f88d 	bl	800a5fc <I2C_IsAcknowledgeFailed>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e02d      	b.n	800a548 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d021      	beq.n	800a538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f4:	f7fc fc28 	bl	8006d48 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	429a      	cmp	r2, r3
 800a502:	d302      	bcc.n	800a50a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d116      	bne.n	800a538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a524:	f043 0220 	orr.w	r2, r3, #32
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e007      	b.n	800a548 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	695b      	ldr	r3, [r3, #20]
 800a53e:	f003 0304 	and.w	r3, r3, #4
 800a542:	2b04      	cmp	r3, #4
 800a544:	d1ca      	bne.n	800a4dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a55c:	e042      	b.n	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	695b      	ldr	r3, [r3, #20]
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	2b10      	cmp	r3, #16
 800a56a:	d119      	bne.n	800a5a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f06f 0210 	mvn.w	r2, #16
 800a574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2220      	movs	r2, #32
 800a580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e029      	b.n	800a5f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5a0:	f7fc fbd2 	bl	8006d48 <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d302      	bcc.n	800a5b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d116      	bne.n	800a5e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2220      	movs	r2, #32
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	f043 0220 	orr.w	r2, r3, #32
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e007      	b.n	800a5f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ee:	2b40      	cmp	r3, #64	; 0x40
 800a5f0:	d1b5      	bne.n	800a55e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a60e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a612:	d11b      	bne.n	800a64c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a61c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a638:	f043 0204 	orr.w	r2, r3, #4
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	370c      	adds	r7, #12
 800a652:	46bd      	mov	sp, r7
 800a654:	bc80      	pop	{r7}
 800a656:	4770      	bx	lr

0800a658 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e034      	b.n	800a6d4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a672:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f245 5255 	movw	r2, #21845	; 0x5555
 800a67c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	6852      	ldr	r2, [r2, #4]
 800a686:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	6892      	ldr	r2, [r2, #8]
 800a690:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a692:	f7fc fb59 	bl	8006d48 <HAL_GetTick>
 800a696:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a698:	e00f      	b.n	800a6ba <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a69a:	f7fc fb55 	bl	8006d48 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b27      	cmp	r3, #39	; 0x27
 800a6a6:	d908      	bls.n	800a6ba <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e00c      	b.n	800a6d4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f003 0303 	and.w	r3, r3, #3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e8      	bne.n	800a69a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a6d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bc80      	pop	{r7}
 800a6f8:	4770      	bx	lr
	...

0800a6fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e26c      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 8087 	beq.w	800a82a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a71c:	4b92      	ldr	r3, [pc, #584]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f003 030c 	and.w	r3, r3, #12
 800a724:	2b04      	cmp	r3, #4
 800a726:	d00c      	beq.n	800a742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a728:	4b8f      	ldr	r3, [pc, #572]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	f003 030c 	and.w	r3, r3, #12
 800a730:	2b08      	cmp	r3, #8
 800a732:	d112      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
 800a734:	4b8c      	ldr	r3, [pc, #560]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a740:	d10b      	bne.n	800a75a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a742:	4b89      	ldr	r3, [pc, #548]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d06c      	beq.n	800a828 <HAL_RCC_OscConfig+0x12c>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d168      	bne.n	800a828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e246      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a762:	d106      	bne.n	800a772 <HAL_RCC_OscConfig+0x76>
 800a764:	4b80      	ldr	r3, [pc, #512]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a7f      	ldr	r2, [pc, #508]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a76a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	e02e      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10c      	bne.n	800a794 <HAL_RCC_OscConfig+0x98>
 800a77a:	4b7b      	ldr	r3, [pc, #492]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a7a      	ldr	r2, [pc, #488]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	4b78      	ldr	r3, [pc, #480]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a77      	ldr	r2, [pc, #476]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a78c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	e01d      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a79c:	d10c      	bne.n	800a7b8 <HAL_RCC_OscConfig+0xbc>
 800a79e:	4b72      	ldr	r3, [pc, #456]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a71      	ldr	r2, [pc, #452]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a7a8:	6013      	str	r3, [r2, #0]
 800a7aa:	4b6f      	ldr	r3, [pc, #444]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4a6e      	ldr	r2, [pc, #440]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7b4:	6013      	str	r3, [r2, #0]
 800a7b6:	e00b      	b.n	800a7d0 <HAL_RCC_OscConfig+0xd4>
 800a7b8:	4b6b      	ldr	r3, [pc, #428]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a6a      	ldr	r2, [pc, #424]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7c2:	6013      	str	r3, [r2, #0]
 800a7c4:	4b68      	ldr	r3, [pc, #416]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a67      	ldr	r2, [pc, #412]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d013      	beq.n	800a800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7d8:	f7fc fab6 	bl	8006d48 <HAL_GetTick>
 800a7dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7de:	e008      	b.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7e0:	f7fc fab2 	bl	8006d48 <HAL_GetTick>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b64      	cmp	r3, #100	; 0x64
 800a7ec:	d901      	bls.n	800a7f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e1fa      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7f2:	4b5d      	ldr	r3, [pc, #372]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f0      	beq.n	800a7e0 <HAL_RCC_OscConfig+0xe4>
 800a7fe:	e014      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a800:	f7fc faa2 	bl	8006d48 <HAL_GetTick>
 800a804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a806:	e008      	b.n	800a81a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a808:	f7fc fa9e 	bl	8006d48 <HAL_GetTick>
 800a80c:	4602      	mov	r2, r0
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	2b64      	cmp	r3, #100	; 0x64
 800a814:	d901      	bls.n	800a81a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a816:	2303      	movs	r3, #3
 800a818:	e1e6      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a81a:	4b53      	ldr	r3, [pc, #332]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f0      	bne.n	800a808 <HAL_RCC_OscConfig+0x10c>
 800a826:	e000      	b.n	800a82a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0302 	and.w	r3, r3, #2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d063      	beq.n	800a8fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a836:	4b4c      	ldr	r3, [pc, #304]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f003 030c 	and.w	r3, r3, #12
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a842:	4b49      	ldr	r3, [pc, #292]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f003 030c 	and.w	r3, r3, #12
 800a84a:	2b08      	cmp	r3, #8
 800a84c:	d11c      	bne.n	800a888 <HAL_RCC_OscConfig+0x18c>
 800a84e:	4b46      	ldr	r3, [pc, #280]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d116      	bne.n	800a888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a85a:	4b43      	ldr	r3, [pc, #268]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 0302 	and.w	r3, r3, #2
 800a862:	2b00      	cmp	r3, #0
 800a864:	d005      	beq.n	800a872 <HAL_RCC_OscConfig+0x176>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d001      	beq.n	800a872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e1ba      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a872:	4b3d      	ldr	r3, [pc, #244]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	695b      	ldr	r3, [r3, #20]
 800a87e:	00db      	lsls	r3, r3, #3
 800a880:	4939      	ldr	r1, [pc, #228]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a882:	4313      	orrs	r3, r2
 800a884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a886:	e03a      	b.n	800a8fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d020      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a890:	4b36      	ldr	r3, [pc, #216]	; (800a96c <HAL_RCC_OscConfig+0x270>)
 800a892:	2201      	movs	r2, #1
 800a894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a896:	f7fc fa57 	bl	8006d48 <HAL_GetTick>
 800a89a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a89c:	e008      	b.n	800a8b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a89e:	f7fc fa53 	bl	8006d48 <HAL_GetTick>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	1ad3      	subs	r3, r2, r3
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e19b      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8b0:	4b2d      	ldr	r3, [pc, #180]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d0f0      	beq.n	800a89e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8bc:	4b2a      	ldr	r3, [pc, #168]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	695b      	ldr	r3, [r3, #20]
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	4927      	ldr	r1, [pc, #156]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	600b      	str	r3, [r1, #0]
 800a8d0:	e015      	b.n	800a8fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8d2:	4b26      	ldr	r3, [pc, #152]	; (800a96c <HAL_RCC_OscConfig+0x270>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8d8:	f7fc fa36 	bl	8006d48 <HAL_GetTick>
 800a8dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8de:	e008      	b.n	800a8f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8e0:	f7fc fa32 	bl	8006d48 <HAL_GetTick>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	1ad3      	subs	r3, r2, r3
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d901      	bls.n	800a8f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e17a      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8f2:	4b1d      	ldr	r3, [pc, #116]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1f0      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f003 0308 	and.w	r3, r3, #8
 800a906:	2b00      	cmp	r3, #0
 800a908:	d03a      	beq.n	800a980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d019      	beq.n	800a946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a912:	4b17      	ldr	r3, [pc, #92]	; (800a970 <HAL_RCC_OscConfig+0x274>)
 800a914:	2201      	movs	r2, #1
 800a916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a918:	f7fc fa16 	bl	8006d48 <HAL_GetTick>
 800a91c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a91e:	e008      	b.n	800a932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a920:	f7fc fa12 	bl	8006d48 <HAL_GetTick>
 800a924:	4602      	mov	r2, r0
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d901      	bls.n	800a932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e15a      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a932:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <HAL_RCC_OscConfig+0x26c>)
 800a934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d0f0      	beq.n	800a920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a93e:	2001      	movs	r0, #1
 800a940:	f000 fac4 	bl	800aecc <RCC_Delay>
 800a944:	e01c      	b.n	800a980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <HAL_RCC_OscConfig+0x274>)
 800a948:	2200      	movs	r2, #0
 800a94a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a94c:	f7fc f9fc 	bl	8006d48 <HAL_GetTick>
 800a950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a952:	e00f      	b.n	800a974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a954:	f7fc f9f8 	bl	8006d48 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d908      	bls.n	800a974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e140      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
 800a966:	bf00      	nop
 800a968:	40021000 	.word	0x40021000
 800a96c:	42420000 	.word	0x42420000
 800a970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a974:	4b9e      	ldr	r3, [pc, #632]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800a976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a978:	f003 0302 	and.w	r3, r3, #2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e9      	bne.n	800a954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 80a6 	beq.w	800aada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a98e:	2300      	movs	r3, #0
 800a990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a992:	4b97      	ldr	r3, [pc, #604]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10d      	bne.n	800a9ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a99e:	4b94      	ldr	r3, [pc, #592]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	4a93      	ldr	r2, [pc, #588]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800a9a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9a8:	61d3      	str	r3, [r2, #28]
 800a9aa:	4b91      	ldr	r3, [pc, #580]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9b2:	60bb      	str	r3, [r7, #8]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ba:	4b8e      	ldr	r3, [pc, #568]	; (800abf4 <HAL_RCC_OscConfig+0x4f8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d118      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9c6:	4b8b      	ldr	r3, [pc, #556]	; (800abf4 <HAL_RCC_OscConfig+0x4f8>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a8a      	ldr	r2, [pc, #552]	; (800abf4 <HAL_RCC_OscConfig+0x4f8>)
 800a9cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9d2:	f7fc f9b9 	bl	8006d48 <HAL_GetTick>
 800a9d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9d8:	e008      	b.n	800a9ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9da:	f7fc f9b5 	bl	8006d48 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	2b64      	cmp	r3, #100	; 0x64
 800a9e6:	d901      	bls.n	800a9ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	e0fd      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9ec:	4b81      	ldr	r3, [pc, #516]	; (800abf4 <HAL_RCC_OscConfig+0x4f8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d0f0      	beq.n	800a9da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d106      	bne.n	800aa0e <HAL_RCC_OscConfig+0x312>
 800aa00:	4b7b      	ldr	r3, [pc, #492]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	4a7a      	ldr	r2, [pc, #488]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa06:	f043 0301 	orr.w	r3, r3, #1
 800aa0a:	6213      	str	r3, [r2, #32]
 800aa0c:	e02d      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10c      	bne.n	800aa30 <HAL_RCC_OscConfig+0x334>
 800aa16:	4b76      	ldr	r3, [pc, #472]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	4a75      	ldr	r2, [pc, #468]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa1c:	f023 0301 	bic.w	r3, r3, #1
 800aa20:	6213      	str	r3, [r2, #32]
 800aa22:	4b73      	ldr	r3, [pc, #460]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	4a72      	ldr	r2, [pc, #456]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa28:	f023 0304 	bic.w	r3, r3, #4
 800aa2c:	6213      	str	r3, [r2, #32]
 800aa2e:	e01c      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	2b05      	cmp	r3, #5
 800aa36:	d10c      	bne.n	800aa52 <HAL_RCC_OscConfig+0x356>
 800aa38:	4b6d      	ldr	r3, [pc, #436]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	4a6c      	ldr	r2, [pc, #432]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa3e:	f043 0304 	orr.w	r3, r3, #4
 800aa42:	6213      	str	r3, [r2, #32]
 800aa44:	4b6a      	ldr	r3, [pc, #424]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	4a69      	ldr	r2, [pc, #420]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa4a:	f043 0301 	orr.w	r3, r3, #1
 800aa4e:	6213      	str	r3, [r2, #32]
 800aa50:	e00b      	b.n	800aa6a <HAL_RCC_OscConfig+0x36e>
 800aa52:	4b67      	ldr	r3, [pc, #412]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	4a66      	ldr	r2, [pc, #408]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa58:	f023 0301 	bic.w	r3, r3, #1
 800aa5c:	6213      	str	r3, [r2, #32]
 800aa5e:	4b64      	ldr	r3, [pc, #400]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	4a63      	ldr	r2, [pc, #396]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa64:	f023 0304 	bic.w	r3, r3, #4
 800aa68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d015      	beq.n	800aa9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa72:	f7fc f969 	bl	8006d48 <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa78:	e00a      	b.n	800aa90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa7a:	f7fc f965 	bl	8006d48 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d901      	bls.n	800aa90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e0ab      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa90:	4b57      	ldr	r3, [pc, #348]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aa92:	6a1b      	ldr	r3, [r3, #32]
 800aa94:	f003 0302 	and.w	r3, r3, #2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0ee      	beq.n	800aa7a <HAL_RCC_OscConfig+0x37e>
 800aa9c:	e014      	b.n	800aac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa9e:	f7fc f953 	bl	8006d48 <HAL_GetTick>
 800aaa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aaa4:	e00a      	b.n	800aabc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaa6:	f7fc f94f 	bl	8006d48 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d901      	bls.n	800aabc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e095      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aabc:	4b4c      	ldr	r3, [pc, #304]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1ee      	bne.n	800aaa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d105      	bne.n	800aada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aace:	4b48      	ldr	r3, [pc, #288]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	4a47      	ldr	r2, [pc, #284]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f000 8081 	beq.w	800abe6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aae4:	4b42      	ldr	r3, [pc, #264]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f003 030c 	and.w	r3, r3, #12
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d061      	beq.n	800abb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d146      	bne.n	800ab86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaf8:	4b3f      	ldr	r3, [pc, #252]	; (800abf8 <HAL_RCC_OscConfig+0x4fc>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aafe:	f7fc f923 	bl	8006d48 <HAL_GetTick>
 800ab02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab04:	e008      	b.n	800ab18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab06:	f7fc f91f 	bl	8006d48 <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d901      	bls.n	800ab18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e067      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab18:	4b35      	ldr	r3, [pc, #212]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f0      	bne.n	800ab06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2c:	d108      	bne.n	800ab40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab2e:	4b30      	ldr	r3, [pc, #192]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	492d      	ldr	r1, [pc, #180]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab40:	4b2b      	ldr	r3, [pc, #172]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a19      	ldr	r1, [r3, #32]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab50:	430b      	orrs	r3, r1
 800ab52:	4927      	ldr	r1, [pc, #156]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800ab54:	4313      	orrs	r3, r2
 800ab56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab58:	4b27      	ldr	r3, [pc, #156]	; (800abf8 <HAL_RCC_OscConfig+0x4fc>)
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab5e:	f7fc f8f3 	bl	8006d48 <HAL_GetTick>
 800ab62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab64:	e008      	b.n	800ab78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab66:	f7fc f8ef 	bl	8006d48 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	1ad3      	subs	r3, r2, r3
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d901      	bls.n	800ab78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab74:	2303      	movs	r3, #3
 800ab76:	e037      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab78:	4b1d      	ldr	r3, [pc, #116]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d0f0      	beq.n	800ab66 <HAL_RCC_OscConfig+0x46a>
 800ab84:	e02f      	b.n	800abe6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab86:	4b1c      	ldr	r3, [pc, #112]	; (800abf8 <HAL_RCC_OscConfig+0x4fc>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab8c:	f7fc f8dc 	bl	8006d48 <HAL_GetTick>
 800ab90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab92:	e008      	b.n	800aba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab94:	f7fc f8d8 	bl	8006d48 <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e020      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aba6:	4b12      	ldr	r3, [pc, #72]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1f0      	bne.n	800ab94 <HAL_RCC_OscConfig+0x498>
 800abb2:	e018      	b.n	800abe6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	69db      	ldr	r3, [r3, #28]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d101      	bne.n	800abc0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	e013      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800abc0:	4b0b      	ldr	r3, [pc, #44]	; (800abf0 <HAL_RCC_OscConfig+0x4f4>)
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d106      	bne.n	800abe2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abde:	429a      	cmp	r2, r3
 800abe0:	d001      	beq.n	800abe6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e000      	b.n	800abe8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}
 800abf0:	40021000 	.word	0x40021000
 800abf4:	40007000 	.word	0x40007000
 800abf8:	42420060 	.word	0x42420060

0800abfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e0d0      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac10:	4b6a      	ldr	r3, [pc, #424]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0307 	and.w	r3, r3, #7
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d910      	bls.n	800ac40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac1e:	4b67      	ldr	r3, [pc, #412]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f023 0207 	bic.w	r2, r3, #7
 800ac26:	4965      	ldr	r1, [pc, #404]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac2e:	4b63      	ldr	r3, [pc, #396]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 0307 	and.w	r3, r3, #7
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d001      	beq.n	800ac40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e0b8      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 0302 	and.w	r3, r3, #2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d020      	beq.n	800ac8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 0304 	and.w	r3, r3, #4
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d005      	beq.n	800ac64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac58:	4b59      	ldr	r3, [pc, #356]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	4a58      	ldr	r2, [pc, #352]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 0308 	and.w	r3, r3, #8
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d005      	beq.n	800ac7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac70:	4b53      	ldr	r3, [pc, #332]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4a52      	ldr	r2, [pc, #328]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ac7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac7c:	4b50      	ldr	r3, [pc, #320]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	494d      	ldr	r1, [pc, #308]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d040      	beq.n	800ad1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d107      	bne.n	800acb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aca2:	4b47      	ldr	r3, [pc, #284]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d115      	bne.n	800acda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e07f      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d107      	bne.n	800acca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800acba:	4b41      	ldr	r3, [pc, #260]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e073      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acca:	4b3d      	ldr	r3, [pc, #244]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0302 	and.w	r3, r3, #2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e06b      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acda:	4b39      	ldr	r3, [pc, #228]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f023 0203 	bic.w	r2, r3, #3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	685b      	ldr	r3, [r3, #4]
 800ace6:	4936      	ldr	r1, [pc, #216]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ace8:	4313      	orrs	r3, r2
 800acea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800acec:	f7fc f82c 	bl	8006d48 <HAL_GetTick>
 800acf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acf2:	e00a      	b.n	800ad0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acf4:	f7fc f828 	bl	8006d48 <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d901      	bls.n	800ad0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	e053      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad0a:	4b2d      	ldr	r3, [pc, #180]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	f003 020c 	and.w	r2, r3, #12
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d1eb      	bne.n	800acf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad1c:	4b27      	ldr	r3, [pc, #156]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 0307 	and.w	r3, r3, #7
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d210      	bcs.n	800ad4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad2a:	4b24      	ldr	r3, [pc, #144]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f023 0207 	bic.w	r2, r3, #7
 800ad32:	4922      	ldr	r1, [pc, #136]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	4313      	orrs	r3, r2
 800ad38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad3a:	4b20      	ldr	r3, [pc, #128]	; (800adbc <HAL_RCC_ClockConfig+0x1c0>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0307 	and.w	r3, r3, #7
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d001      	beq.n	800ad4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e032      	b.n	800adb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 0304 	and.w	r3, r3, #4
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d008      	beq.n	800ad6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad58:	4b19      	ldr	r3, [pc, #100]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	4916      	ldr	r1, [pc, #88]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 0308 	and.w	r3, r3, #8
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d009      	beq.n	800ad8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad76:	4b12      	ldr	r3, [pc, #72]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	490e      	ldr	r1, [pc, #56]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad86:	4313      	orrs	r3, r2
 800ad88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad8a:	f000 f821 	bl	800add0 <HAL_RCC_GetSysClockFreq>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	4b0b      	ldr	r3, [pc, #44]	; (800adc0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	091b      	lsrs	r3, r3, #4
 800ad96:	f003 030f 	and.w	r3, r3, #15
 800ad9a:	490a      	ldr	r1, [pc, #40]	; (800adc4 <HAL_RCC_ClockConfig+0x1c8>)
 800ad9c:	5ccb      	ldrb	r3, [r1, r3]
 800ad9e:	fa22 f303 	lsr.w	r3, r2, r3
 800ada2:	4a09      	ldr	r2, [pc, #36]	; (800adc8 <HAL_RCC_ClockConfig+0x1cc>)
 800ada4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ada6:	4b09      	ldr	r3, [pc, #36]	; (800adcc <HAL_RCC_ClockConfig+0x1d0>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4618      	mov	r0, r3
 800adac:	f7fb ff8a 	bl	8006cc4 <HAL_InitTick>

  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	40022000 	.word	0x40022000
 800adc0:	40021000 	.word	0x40021000
 800adc4:	0801392c 	.word	0x0801392c
 800adc8:	20000070 	.word	0x20000070
 800adcc:	20000074 	.word	0x20000074

0800add0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800add0:	b490      	push	{r4, r7}
 800add2:	b08a      	sub	sp, #40	; 0x28
 800add4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800add6:	4b2a      	ldr	r3, [pc, #168]	; (800ae80 <HAL_RCC_GetSysClockFreq+0xb0>)
 800add8:	1d3c      	adds	r4, r7, #4
 800adda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800addc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800ade0:	f240 2301 	movw	r3, #513	; 0x201
 800ade4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	61fb      	str	r3, [r7, #28]
 800adea:	2300      	movs	r3, #0
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	2300      	movs	r3, #0
 800adf0:	627b      	str	r3, [r7, #36]	; 0x24
 800adf2:	2300      	movs	r3, #0
 800adf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800adf6:	2300      	movs	r3, #0
 800adf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800adfa:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <HAL_RCC_GetSysClockFreq+0xb4>)
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	f003 030c 	and.w	r3, r3, #12
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d002      	beq.n	800ae10 <HAL_RCC_GetSysClockFreq+0x40>
 800ae0a:	2b08      	cmp	r3, #8
 800ae0c:	d003      	beq.n	800ae16 <HAL_RCC_GetSysClockFreq+0x46>
 800ae0e:	e02d      	b.n	800ae6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ae10:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae12:	623b      	str	r3, [r7, #32]
      break;
 800ae14:	e02d      	b.n	800ae72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	0c9b      	lsrs	r3, r3, #18
 800ae1a:	f003 030f 	and.w	r3, r3, #15
 800ae1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae22:	4413      	add	r3, r2
 800ae24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800ae28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d013      	beq.n	800ae5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae34:	4b13      	ldr	r3, [pc, #76]	; (800ae84 <HAL_RCC_GetSysClockFreq+0xb4>)
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	0c5b      	lsrs	r3, r3, #17
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae42:	4413      	add	r3, r2
 800ae44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ae48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	4a0e      	ldr	r2, [pc, #56]	; (800ae88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae4e:	fb02 f203 	mul.w	r2, r2, r3
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5a:	e004      	b.n	800ae66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4a0b      	ldr	r2, [pc, #44]	; (800ae8c <HAL_RCC_GetSysClockFreq+0xbc>)
 800ae60:	fb02 f303 	mul.w	r3, r2, r3
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	623b      	str	r3, [r7, #32]
      break;
 800ae6a:	e002      	b.n	800ae72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae6c:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae6e:	623b      	str	r3, [r7, #32]
      break;
 800ae70:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae72:	6a3b      	ldr	r3, [r7, #32]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3728      	adds	r7, #40	; 0x28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bc90      	pop	{r4, r7}
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	080131b0 	.word	0x080131b0
 800ae84:	40021000 	.word	0x40021000
 800ae88:	007a1200 	.word	0x007a1200
 800ae8c:	003d0900 	.word	0x003d0900

0800ae90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae90:	b480      	push	{r7}
 800ae92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae94:	4b02      	ldr	r3, [pc, #8]	; (800aea0 <HAL_RCC_GetHCLKFreq+0x10>)
 800ae96:	681b      	ldr	r3, [r3, #0]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bc80      	pop	{r7}
 800ae9e:	4770      	bx	lr
 800aea0:	20000070 	.word	0x20000070

0800aea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aea8:	f7ff fff2 	bl	800ae90 <HAL_RCC_GetHCLKFreq>
 800aeac:	4602      	mov	r2, r0
 800aeae:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	0a1b      	lsrs	r3, r3, #8
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	4903      	ldr	r1, [pc, #12]	; (800aec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aeba:	5ccb      	ldrb	r3, [r1, r3]
 800aebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	40021000 	.word	0x40021000
 800aec8:	0801393c 	.word	0x0801393c

0800aecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <RCC_Delay+0x34>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a0a      	ldr	r2, [pc, #40]	; (800af04 <RCC_Delay+0x38>)
 800aeda:	fba2 2303 	umull	r2, r3, r2, r3
 800aede:	0a5b      	lsrs	r3, r3, #9
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	fb02 f303 	mul.w	r3, r2, r3
 800aee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aee8:	bf00      	nop
  }
  while (Delay --);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	1e5a      	subs	r2, r3, #1
 800aeee:	60fa      	str	r2, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1f9      	bne.n	800aee8 <RCC_Delay+0x1c>
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr
 800af00:	20000070 	.word	0x20000070
 800af04:	10624dd3 	.word	0x10624dd3

0800af08 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d07d      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800af24:	2300      	movs	r3, #0
 800af26:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af28:	4b4f      	ldr	r3, [pc, #316]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10d      	bne.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af34:	4b4c      	ldr	r3, [pc, #304]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af36:	69db      	ldr	r3, [r3, #28]
 800af38:	4a4b      	ldr	r2, [pc, #300]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af3e:	61d3      	str	r3, [r2, #28]
 800af40:	4b49      	ldr	r3, [pc, #292]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af48:	60bb      	str	r3, [r7, #8]
 800af4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af4c:	2301      	movs	r3, #1
 800af4e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af50:	4b46      	ldr	r3, [pc, #280]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d118      	bne.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af5c:	4b43      	ldr	r3, [pc, #268]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a42      	ldr	r2, [pc, #264]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af68:	f7fb feee 	bl	8006d48 <HAL_GetTick>
 800af6c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af6e:	e008      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af70:	f7fb feea 	bl	8006d48 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b64      	cmp	r3, #100	; 0x64
 800af7c:	d901      	bls.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e06d      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af82:	4b3a      	ldr	r3, [pc, #232]	; (800b06c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f0      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800af8e:	4b36      	ldr	r3, [pc, #216]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af90:	6a1b      	ldr	r3, [r3, #32]
 800af92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af96:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d02e      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d027      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afac:	4b2e      	ldr	r3, [pc, #184]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afb4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800afb6:	4b2e      	ldr	r3, [pc, #184]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800afb8:	2201      	movs	r2, #1
 800afba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800afbc:	4b2c      	ldr	r3, [pc, #176]	; (800b070 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800afc2:	4a29      	ldr	r2, [pc, #164]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d014      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afd2:	f7fb feb9 	bl	8006d48 <HAL_GetTick>
 800afd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd8:	e00a      	b.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afda:	f7fb feb5 	bl	8006d48 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe8:	4293      	cmp	r3, r2
 800afea:	d901      	bls.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800afec:	2303      	movs	r3, #3
 800afee:	e036      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aff0:	4b1d      	ldr	r3, [pc, #116]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aff2:	6a1b      	ldr	r3, [r3, #32]
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0ee      	beq.n	800afda <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800affc:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	4917      	ldr	r1, [pc, #92]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b00a:	4313      	orrs	r3, r2
 800b00c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d105      	bne.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b014:	4b14      	ldr	r3, [pc, #80]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	4a13      	ldr	r2, [pc, #76]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b01a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b01e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0302 	and.w	r3, r3, #2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d008      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b02c:	4b0e      	ldr	r3, [pc, #56]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	490b      	ldr	r1, [pc, #44]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f003 0310 	and.w	r3, r3, #16
 800b046:	2b00      	cmp	r3, #0
 800b048:	d008      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b04a:	4b07      	ldr	r3, [pc, #28]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	4904      	ldr	r1, [pc, #16]	; (800b068 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b058:	4313      	orrs	r3, r2
 800b05a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	40021000 	.word	0x40021000
 800b06c:	40007000 	.word	0x40007000
 800b070:	42420440 	.word	0x42420440

0800b074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b082:	2301      	movs	r3, #1
 800b084:	e076      	b.n	800b174 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d108      	bne.n	800b0a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b096:	d009      	beq.n	800b0ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	61da      	str	r2, [r3, #28]
 800b09e:	e005      	b.n	800b0ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d106      	bne.n	800b0cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7f8 fa4c 	bl	8003564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b0f4:	431a      	orrs	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0fe:	431a      	orrs	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	691b      	ldr	r3, [r3, #16]
 800b104:	f003 0302 	and.w	r3, r3, #2
 800b108:	431a      	orrs	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695b      	ldr	r3, [r3, #20]
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b11c:	431a      	orrs	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b126:	431a      	orrs	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a1b      	ldr	r3, [r3, #32]
 800b12c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b130:	ea42 0103 	orr.w	r1, r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b138:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	430a      	orrs	r2, r1
 800b142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	0c1a      	lsrs	r2, r3, #16
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f002 0204 	and.w	r2, r2, #4
 800b152:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	69da      	ldr	r2, [r3, #28]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08c      	sub	sp, #48	; 0x30
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b18a:	2301      	movs	r3, #1
 800b18c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d101      	bne.n	800b1a2 <HAL_SPI_TransmitReceive+0x26>
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e18a      	b.n	800b4b8 <HAL_SPI_TransmitReceive+0x33c>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1aa:	f7fb fdcd 	bl	8006d48 <HAL_GetTick>
 800b1ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b1c0:	887b      	ldrh	r3, [r7, #2]
 800b1c2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b1c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d00f      	beq.n	800b1ec <HAL_SPI_TransmitReceive+0x70>
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1d2:	d107      	bne.n	800b1e4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d103      	bne.n	800b1e4 <HAL_SPI_TransmitReceive+0x68>
 800b1dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	d003      	beq.n	800b1ec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b1ea:	e15b      	b.n	800b4a4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d005      	beq.n	800b1fe <HAL_SPI_TransmitReceive+0x82>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <HAL_SPI_TransmitReceive+0x82>
 800b1f8:	887b      	ldrh	r3, [r7, #2]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d103      	bne.n	800b206 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b1fe:	2301      	movs	r3, #1
 800b200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b204:	e14e      	b.n	800b4a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d003      	beq.n	800b21a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2205      	movs	r2, #5
 800b216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	887a      	ldrh	r2, [r7, #2]
 800b22a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	887a      	ldrh	r2, [r7, #2]
 800b230:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	887a      	ldrh	r2, [r7, #2]
 800b23c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	887a      	ldrh	r2, [r7, #2]
 800b242:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25a:	2b40      	cmp	r3, #64	; 0x40
 800b25c:	d007      	beq.n	800b26e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b26c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b276:	d178      	bne.n	800b36a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <HAL_SPI_TransmitReceive+0x10a>
 800b280:	8b7b      	ldrh	r3, [r7, #26]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d166      	bne.n	800b354 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28a:	881a      	ldrh	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b296:	1c9a      	adds	r2, r3, #2
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2aa:	e053      	b.n	800b354 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	f003 0302 	and.w	r3, r3, #2
 800b2b6:	2b02      	cmp	r3, #2
 800b2b8:	d11b      	bne.n	800b2f2 <HAL_SPI_TransmitReceive+0x176>
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d016      	beq.n	800b2f2 <HAL_SPI_TransmitReceive+0x176>
 800b2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d113      	bne.n	800b2f2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	881a      	ldrh	r2, [r3, #0]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	1c9a      	adds	r2, r3, #2
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	3b01      	subs	r3, #1
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d119      	bne.n	800b334 <HAL_SPI_TransmitReceive+0x1b8>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b304:	b29b      	uxth	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	d014      	beq.n	800b334 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b314:	b292      	uxth	r2, r2
 800b316:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31c:	1c9a      	adds	r2, r3, #2
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b326:	b29b      	uxth	r3, r3
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b330:	2301      	movs	r3, #1
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b334:	f7fb fd08 	bl	8006d48 <HAL_GetTick>
 800b338:	4602      	mov	r2, r0
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b340:	429a      	cmp	r2, r3
 800b342:	d807      	bhi.n	800b354 <HAL_SPI_TransmitReceive+0x1d8>
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b34a:	d003      	beq.n	800b354 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b34c:	2303      	movs	r3, #3
 800b34e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b352:	e0a7      	b.n	800b4a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b358:	b29b      	uxth	r3, r3
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1a6      	bne.n	800b2ac <HAL_SPI_TransmitReceive+0x130>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b362:	b29b      	uxth	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1a1      	bne.n	800b2ac <HAL_SPI_TransmitReceive+0x130>
 800b368:	e07c      	b.n	800b464 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d002      	beq.n	800b378 <HAL_SPI_TransmitReceive+0x1fc>
 800b372:	8b7b      	ldrh	r3, [r7, #26]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d16b      	bne.n	800b450 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	330c      	adds	r3, #12
 800b382:	7812      	ldrb	r2, [r2, #0]
 800b384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b394:	b29b      	uxth	r3, r3
 800b396:	3b01      	subs	r3, #1
 800b398:	b29a      	uxth	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b39e:	e057      	b.n	800b450 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f003 0302 	and.w	r3, r3, #2
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d11c      	bne.n	800b3e8 <HAL_SPI_TransmitReceive+0x26c>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d017      	beq.n	800b3e8 <HAL_SPI_TransmitReceive+0x26c>
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d114      	bne.n	800b3e8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	330c      	adds	r3, #12
 800b3c8:	7812      	ldrb	r2, [r2, #0]
 800b3ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d0:	1c5a      	adds	r2, r3, #1
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d119      	bne.n	800b42a <HAL_SPI_TransmitReceive+0x2ae>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d014      	beq.n	800b42a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	68da      	ldr	r2, [r3, #12]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	3b01      	subs	r3, #1
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b426:	2301      	movs	r3, #1
 800b428:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b42a:	f7fb fc8d 	bl	8006d48 <HAL_GetTick>
 800b42e:	4602      	mov	r2, r0
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b436:	429a      	cmp	r2, r3
 800b438:	d803      	bhi.n	800b442 <HAL_SPI_TransmitReceive+0x2c6>
 800b43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b440:	d102      	bne.n	800b448 <HAL_SPI_TransmitReceive+0x2cc>
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	2b00      	cmp	r3, #0
 800b446:	d103      	bne.n	800b450 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b44e:	e029      	b.n	800b4a4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b454:	b29b      	uxth	r3, r3
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1a2      	bne.n	800b3a0 <HAL_SPI_TransmitReceive+0x224>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b45e:	b29b      	uxth	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d19d      	bne.n	800b3a0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b466:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f000 f9b5 	bl	800b7d8 <SPI_EndRxTxTransaction>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2220      	movs	r2, #32
 800b47e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b480:	e010      	b.n	800b4a4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b48a:	2300      	movs	r3, #0
 800b48c:	617b      	str	r3, [r7, #20]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	617b      	str	r3, [r7, #20]
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	e000      	b.n	800b4a4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b4a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3730      	adds	r7, #48	; 0x30
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	099b      	lsrs	r3, r3, #6
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10f      	bne.n	800b504 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	099b      	lsrs	r3, r3, #6
 800b4f2:	f003 0301 	and.w	r3, r3, #1
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d004      	beq.n	800b504 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	4798      	blx	r3
    return;
 800b502:	e0be      	b.n	800b682 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b504:	69bb      	ldr	r3, [r7, #24]
 800b506:	085b      	lsrs	r3, r3, #1
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <HAL_SPI_IRQHandler+0x66>
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	09db      	lsrs	r3, r3, #7
 800b514:	f003 0301 	and.w	r3, r3, #1
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d004      	beq.n	800b526 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	4798      	blx	r3
    return;
 800b524:	e0ad      	b.n	800b682 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	095b      	lsrs	r3, r3, #5
 800b52a:	f003 0301 	and.w	r3, r3, #1
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <HAL_SPI_IRQHandler+0x80>
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	099b      	lsrs	r3, r3, #6
 800b536:	f003 0301 	and.w	r3, r3, #1
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 80a1 	beq.w	800b682 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	095b      	lsrs	r3, r3, #5
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 809a 	beq.w	800b682 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	099b      	lsrs	r3, r3, #6
 800b552:	f003 0301 	and.w	r3, r3, #1
 800b556:	2b00      	cmp	r3, #0
 800b558:	d023      	beq.n	800b5a2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b03      	cmp	r3, #3
 800b564:	d011      	beq.n	800b58a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56a:	f043 0204 	orr.w	r2, r3, #4
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	617b      	str	r3, [r7, #20]
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	e00b      	b.n	800b5a2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b58a:	2300      	movs	r3, #0
 800b58c:	613b      	str	r3, [r7, #16]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	613b      	str	r3, [r7, #16]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	613b      	str	r3, [r7, #16]
 800b59e:	693b      	ldr	r3, [r7, #16]
        return;
 800b5a0:	e06f      	b.n	800b682 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	095b      	lsrs	r3, r3, #5
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d014      	beq.n	800b5d8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b2:	f043 0201 	orr.w	r2, r3, #1
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60fb      	str	r3, [r7, #12]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5d4:	601a      	str	r2, [r3, #0]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d04f      	beq.n	800b680 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b5ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	f003 0302 	and.w	r3, r3, #2
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d104      	bne.n	800b60c <HAL_SPI_IRQHandler+0x14c>
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d034      	beq.n	800b676 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0203 	bic.w	r2, r2, #3
 800b61a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d011      	beq.n	800b648 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b628:	4a17      	ldr	r2, [pc, #92]	; (800b688 <HAL_SPI_IRQHandler+0x1c8>)
 800b62a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b630:	4618      	mov	r0, r3
 800b632:	f7fd f82b 	bl	800868c <HAL_DMA_Abort_IT>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d005      	beq.n	800b648 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b640:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d016      	beq.n	800b67e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b654:	4a0c      	ldr	r2, [pc, #48]	; (800b688 <HAL_SPI_IRQHandler+0x1c8>)
 800b656:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fd f815 	bl	800868c <HAL_DMA_Abort_IT>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00a      	beq.n	800b67e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b66c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b674:	e003      	b.n	800b67e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f808 	bl	800b68c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b67c:	e000      	b.n	800b680 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800b67e:	bf00      	nop
    return;
 800b680:	bf00      	nop
  }
}
 800b682:	3720      	adds	r7, #32
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	0800b69f 	.word	0x0800b69f

0800b68c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	bc80      	pop	{r7}
 800b69c:	4770      	bx	lr

0800b69e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6aa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7ff ffe7 	bl	800b68c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
	...

0800b6c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b6d8:	f7fb fb36 	bl	8006d48 <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	1a9b      	subs	r3, r3, r2
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b6e8:	f7fb fb2e 	bl	8006d48 <HAL_GetTick>
 800b6ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b6ee:	4b39      	ldr	r3, [pc, #228]	; (800b7d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	015b      	lsls	r3, r3, #5
 800b6f4:	0d1b      	lsrs	r3, r3, #20
 800b6f6:	69fa      	ldr	r2, [r7, #28]
 800b6f8:	fb02 f303 	mul.w	r3, r2, r3
 800b6fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6fe:	e054      	b.n	800b7aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b706:	d050      	beq.n	800b7aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b708:	f7fb fb1e 	bl	8006d48 <HAL_GetTick>
 800b70c:	4602      	mov	r2, r0
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	69fa      	ldr	r2, [r7, #28]
 800b714:	429a      	cmp	r2, r3
 800b716:	d902      	bls.n	800b71e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d13d      	bne.n	800b79a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b72c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b736:	d111      	bne.n	800b75c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b740:	d004      	beq.n	800b74c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b74a:	d107      	bne.n	800b75c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b75a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b764:	d10f      	bne.n	800b786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e017      	b.n	800b7ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d101      	bne.n	800b7a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	3b01      	subs	r3, #1
 800b7a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	bf0c      	ite	eq
 800b7ba:	2301      	moveq	r3, #1
 800b7bc:	2300      	movne	r3, #0
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	79fb      	ldrb	r3, [r7, #7]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d19b      	bne.n	800b700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	20000070 	.word	0x20000070

0800b7d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b086      	sub	sp, #24
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	2180      	movs	r1, #128	; 0x80
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7ff ff6a 	bl	800b6c8 <SPI_WaitFlagStateUntilTimeout>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7fe:	f043 0220 	orr.w	r2, r3, #32
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b806:	2303      	movs	r3, #3
 800b808:	e000      	b.n	800b80c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e041      	b.n	800b8aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d106      	bne.n	800b840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7fb f9c6 	bl	8006bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2202      	movs	r2, #2
 800b844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	3304      	adds	r3, #4
 800b850:	4619      	mov	r1, r3
 800b852:	4610      	mov	r0, r2
 800b854:	f000 fa96 	bl	800bd84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
	...

0800b8b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d001      	beq.n	800b8cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	e04e      	b.n	800b96a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f042 0201 	orr.w	r2, r2, #1
 800b8e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a22      	ldr	r2, [pc, #136]	; (800b974 <HAL_TIM_Base_Start_IT+0xc0>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d022      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x80>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a21      	ldr	r2, [pc, #132]	; (800b978 <HAL_TIM_Base_Start_IT+0xc4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d01d      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x80>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b900:	d018      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x80>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a1d      	ldr	r2, [pc, #116]	; (800b97c <HAL_TIM_Base_Start_IT+0xc8>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d013      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x80>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <HAL_TIM_Base_Start_IT+0xcc>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00e      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x80>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a1a      	ldr	r2, [pc, #104]	; (800b984 <HAL_TIM_Base_Start_IT+0xd0>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d009      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x80>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a18      	ldr	r2, [pc, #96]	; (800b988 <HAL_TIM_Base_Start_IT+0xd4>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d004      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0x80>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a17      	ldr	r2, [pc, #92]	; (800b98c <HAL_TIM_Base_Start_IT+0xd8>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d111      	bne.n	800b958 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2b06      	cmp	r3, #6
 800b944:	d010      	beq.n	800b968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f042 0201 	orr.w	r2, r2, #1
 800b954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b956:	e007      	b.n	800b968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f042 0201 	orr.w	r2, r2, #1
 800b966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	bc80      	pop	{r7}
 800b972:	4770      	bx	lr
 800b974:	40012c00 	.word	0x40012c00
 800b978:	40013400 	.word	0x40013400
 800b97c:	40000400 	.word	0x40000400
 800b980:	40000800 	.word	0x40000800
 800b984:	40000c00 	.word	0x40000c00
 800b988:	40014c00 	.word	0x40014c00
 800b98c:	40001800 	.word	0x40001800

0800b990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	f003 0302 	and.w	r3, r3, #2
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d122      	bne.n	800b9ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	f003 0302 	and.w	r3, r3, #2
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d11b      	bne.n	800b9ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f06f 0202 	mvn.w	r2, #2
 800b9bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	f003 0303 	and.w	r3, r3, #3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f9ba 	bl	800bd4c <HAL_TIM_IC_CaptureCallback>
 800b9d8:	e005      	b.n	800b9e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f9ad 	bl	800bd3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f9bc 	bl	800bd5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	691b      	ldr	r3, [r3, #16]
 800b9f2:	f003 0304 	and.w	r3, r3, #4
 800b9f6:	2b04      	cmp	r3, #4
 800b9f8:	d122      	bne.n	800ba40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b04      	cmp	r3, #4
 800ba06:	d11b      	bne.n	800ba40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f06f 0204 	mvn.w	r2, #4
 800ba10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2202      	movs	r2, #2
 800ba16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f990 	bl	800bd4c <HAL_TIM_IC_CaptureCallback>
 800ba2c:	e005      	b.n	800ba3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f983 	bl	800bd3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f992 	bl	800bd5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	f003 0308 	and.w	r3, r3, #8
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	d122      	bne.n	800ba94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f003 0308 	and.w	r3, r3, #8
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d11b      	bne.n	800ba94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f06f 0208 	mvn.w	r2, #8
 800ba64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2204      	movs	r2, #4
 800ba6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	f003 0303 	and.w	r3, r3, #3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f966 	bl	800bd4c <HAL_TIM_IC_CaptureCallback>
 800ba80:	e005      	b.n	800ba8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f959 	bl	800bd3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 f968 	bl	800bd5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	f003 0310 	and.w	r3, r3, #16
 800ba9e:	2b10      	cmp	r3, #16
 800baa0:	d122      	bne.n	800bae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f003 0310 	and.w	r3, r3, #16
 800baac:	2b10      	cmp	r3, #16
 800baae:	d11b      	bne.n	800bae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f06f 0210 	mvn.w	r2, #16
 800bab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2208      	movs	r2, #8
 800babe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f93c 	bl	800bd4c <HAL_TIM_IC_CaptureCallback>
 800bad4:	e005      	b.n	800bae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f92f 	bl	800bd3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f93e 	bl	800bd5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d10e      	bne.n	800bb14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d107      	bne.n	800bb14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f06f 0201 	mvn.w	r2, #1
 800bb0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f90a 	bl	800bd28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb1e:	2b80      	cmp	r3, #128	; 0x80
 800bb20:	d10e      	bne.n	800bb40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb2c:	2b80      	cmp	r3, #128	; 0x80
 800bb2e:	d107      	bne.n	800bb40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 fad9 	bl	800c0f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4a:	2b40      	cmp	r3, #64	; 0x40
 800bb4c:	d10e      	bne.n	800bb6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb58:	2b40      	cmp	r3, #64	; 0x40
 800bb5a:	d107      	bne.n	800bb6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f902 	bl	800bd70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f003 0320 	and.w	r3, r3, #32
 800bb76:	2b20      	cmp	r3, #32
 800bb78:	d10e      	bne.n	800bb98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	f003 0320 	and.w	r3, r3, #32
 800bb84:	2b20      	cmp	r3, #32
 800bb86:	d107      	bne.n	800bb98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f06f 0220 	mvn.w	r2, #32
 800bb90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 faa4 	bl	800c0e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d101      	bne.n	800bbb8 <HAL_TIM_ConfigClockSource+0x18>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	e0b3      	b.n	800bd20 <HAL_TIM_ConfigClockSource+0x180>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bbd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbf0:	d03e      	beq.n	800bc70 <HAL_TIM_ConfigClockSource+0xd0>
 800bbf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbf6:	f200 8087 	bhi.w	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bbfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbfe:	f000 8085 	beq.w	800bd0c <HAL_TIM_ConfigClockSource+0x16c>
 800bc02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc06:	d87f      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bc08:	2b70      	cmp	r3, #112	; 0x70
 800bc0a:	d01a      	beq.n	800bc42 <HAL_TIM_ConfigClockSource+0xa2>
 800bc0c:	2b70      	cmp	r3, #112	; 0x70
 800bc0e:	d87b      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bc10:	2b60      	cmp	r3, #96	; 0x60
 800bc12:	d050      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x116>
 800bc14:	2b60      	cmp	r3, #96	; 0x60
 800bc16:	d877      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bc18:	2b50      	cmp	r3, #80	; 0x50
 800bc1a:	d03c      	beq.n	800bc96 <HAL_TIM_ConfigClockSource+0xf6>
 800bc1c:	2b50      	cmp	r3, #80	; 0x50
 800bc1e:	d873      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bc20:	2b40      	cmp	r3, #64	; 0x40
 800bc22:	d058      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x136>
 800bc24:	2b40      	cmp	r3, #64	; 0x40
 800bc26:	d86f      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bc28:	2b30      	cmp	r3, #48	; 0x30
 800bc2a:	d064      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x156>
 800bc2c:	2b30      	cmp	r3, #48	; 0x30
 800bc2e:	d86b      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bc30:	2b20      	cmp	r3, #32
 800bc32:	d060      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x156>
 800bc34:	2b20      	cmp	r3, #32
 800bc36:	d867      	bhi.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d05c      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x156>
 800bc3c:	2b10      	cmp	r3, #16
 800bc3e:	d05a      	beq.n	800bcf6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bc40:	e062      	b.n	800bd08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6899      	ldr	r1, [r3, #8]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f000 f9ac 	bl	800bfae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	609a      	str	r2, [r3, #8]
      break;
 800bc6e:	e04e      	b.n	800bd0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6818      	ldr	r0, [r3, #0]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	6899      	ldr	r1, [r3, #8]
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	f000 f995 	bl	800bfae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc92:	609a      	str	r2, [r3, #8]
      break;
 800bc94:	e03b      	b.n	800bd0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6859      	ldr	r1, [r3, #4]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	461a      	mov	r2, r3
 800bca4:	f000 f90c 	bl	800bec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2150      	movs	r1, #80	; 0x50
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f963 	bl	800bf7a <TIM_ITRx_SetConfig>
      break;
 800bcb4:	e02b      	b.n	800bd0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6859      	ldr	r1, [r3, #4]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f000 f92a 	bl	800bf1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2160      	movs	r1, #96	; 0x60
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 f953 	bl	800bf7a <TIM_ITRx_SetConfig>
      break;
 800bcd4:	e01b      	b.n	800bd0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6818      	ldr	r0, [r3, #0]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	6859      	ldr	r1, [r3, #4]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	461a      	mov	r2, r3
 800bce4:	f000 f8ec 	bl	800bec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2140      	movs	r1, #64	; 0x40
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 f943 	bl	800bf7a <TIM_ITRx_SetConfig>
      break;
 800bcf4:	e00b      	b.n	800bd0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4610      	mov	r0, r2
 800bd02:	f000 f93a 	bl	800bf7a <TIM_ITRx_SetConfig>
        break;
 800bd06:	e002      	b.n	800bd0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bd08:	bf00      	nop
 800bd0a:	e000      	b.n	800bd0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bd0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2201      	movs	r2, #1
 800bd12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr

0800bd3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b083      	sub	sp, #12
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd42:	bf00      	nop
 800bd44:	370c      	adds	r7, #12
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bc80      	pop	{r7}
 800bd4a:	4770      	bx	lr

0800bd4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bc80      	pop	{r7}
 800bd5c:	4770      	bx	lr

0800bd5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b083      	sub	sp, #12
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd66:	bf00      	nop
 800bd68:	370c      	adds	r7, #12
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bc80      	pop	{r7}
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bc80      	pop	{r7}
 800bd80:	4770      	bx	lr
	...

0800bd84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b085      	sub	sp, #20
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a3f      	ldr	r2, [pc, #252]	; (800be94 <TIM_Base_SetConfig+0x110>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d013      	beq.n	800bdc4 <TIM_Base_SetConfig+0x40>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a3e      	ldr	r2, [pc, #248]	; (800be98 <TIM_Base_SetConfig+0x114>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d00f      	beq.n	800bdc4 <TIM_Base_SetConfig+0x40>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdaa:	d00b      	beq.n	800bdc4 <TIM_Base_SetConfig+0x40>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a3b      	ldr	r2, [pc, #236]	; (800be9c <TIM_Base_SetConfig+0x118>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d007      	beq.n	800bdc4 <TIM_Base_SetConfig+0x40>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a3a      	ldr	r2, [pc, #232]	; (800bea0 <TIM_Base_SetConfig+0x11c>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d003      	beq.n	800bdc4 <TIM_Base_SetConfig+0x40>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a39      	ldr	r2, [pc, #228]	; (800bea4 <TIM_Base_SetConfig+0x120>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d108      	bne.n	800bdd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a2e      	ldr	r2, [pc, #184]	; (800be94 <TIM_Base_SetConfig+0x110>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d02b      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a2d      	ldr	r2, [pc, #180]	; (800be98 <TIM_Base_SetConfig+0x114>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d027      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdec:	d023      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a2a      	ldr	r2, [pc, #168]	; (800be9c <TIM_Base_SetConfig+0x118>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d01f      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a29      	ldr	r2, [pc, #164]	; (800bea0 <TIM_Base_SetConfig+0x11c>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d01b      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a28      	ldr	r2, [pc, #160]	; (800bea4 <TIM_Base_SetConfig+0x120>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d017      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a27      	ldr	r2, [pc, #156]	; (800bea8 <TIM_Base_SetConfig+0x124>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d013      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a26      	ldr	r2, [pc, #152]	; (800beac <TIM_Base_SetConfig+0x128>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d00f      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4a25      	ldr	r2, [pc, #148]	; (800beb0 <TIM_Base_SetConfig+0x12c>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d00b      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a24      	ldr	r2, [pc, #144]	; (800beb4 <TIM_Base_SetConfig+0x130>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d007      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a23      	ldr	r2, [pc, #140]	; (800beb8 <TIM_Base_SetConfig+0x134>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d003      	beq.n	800be36 <TIM_Base_SetConfig+0xb2>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a22      	ldr	r2, [pc, #136]	; (800bebc <TIM_Base_SetConfig+0x138>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d108      	bne.n	800be48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	4313      	orrs	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	689a      	ldr	r2, [r3, #8]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a09      	ldr	r2, [pc, #36]	; (800be94 <TIM_Base_SetConfig+0x110>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d003      	beq.n	800be7c <TIM_Base_SetConfig+0xf8>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a08      	ldr	r2, [pc, #32]	; (800be98 <TIM_Base_SetConfig+0x114>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d103      	bne.n	800be84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	691a      	ldr	r2, [r3, #16]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2201      	movs	r2, #1
 800be88:	615a      	str	r2, [r3, #20]
}
 800be8a:	bf00      	nop
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	bc80      	pop	{r7}
 800be92:	4770      	bx	lr
 800be94:	40012c00 	.word	0x40012c00
 800be98:	40013400 	.word	0x40013400
 800be9c:	40000400 	.word	0x40000400
 800bea0:	40000800 	.word	0x40000800
 800bea4:	40000c00 	.word	0x40000c00
 800bea8:	40014c00 	.word	0x40014c00
 800beac:	40015000 	.word	0x40015000
 800beb0:	40015400 	.word	0x40015400
 800beb4:	40001800 	.word	0x40001800
 800beb8:	40001c00 	.word	0x40001c00
 800bebc:	40002000 	.word	0x40002000

0800bec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b087      	sub	sp, #28
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6a1b      	ldr	r3, [r3, #32]
 800bed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6a1b      	ldr	r3, [r3, #32]
 800bed6:	f023 0201 	bic.w	r2, r3, #1
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800beea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	011b      	lsls	r3, r3, #4
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	f023 030a 	bic.w	r3, r3, #10
 800befc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	621a      	str	r2, [r3, #32]
}
 800bf12:	bf00      	nop
 800bf14:	371c      	adds	r7, #28
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bc80      	pop	{r7}
 800bf1a:	4770      	bx	lr

0800bf1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6a1b      	ldr	r3, [r3, #32]
 800bf2c:	f023 0210 	bic.w	r2, r3, #16
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf46:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	031b      	lsls	r3, r3, #12
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bf58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	011b      	lsls	r3, r3, #4
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	697a      	ldr	r2, [r7, #20]
 800bf68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	621a      	str	r2, [r3, #32]
}
 800bf70:	bf00      	nop
 800bf72:	371c      	adds	r7, #28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bc80      	pop	{r7}
 800bf78:	4770      	bx	lr

0800bf7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf7a:	b480      	push	{r7}
 800bf7c:	b085      	sub	sp, #20
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	f043 0307 	orr.w	r3, r3, #7
 800bf9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	609a      	str	r2, [r3, #8]
}
 800bfa4:	bf00      	nop
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bc80      	pop	{r7}
 800bfac:	4770      	bx	lr

0800bfae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b087      	sub	sp, #28
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	60f8      	str	r0, [r7, #12]
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	607a      	str	r2, [r7, #4]
 800bfba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	021a      	lsls	r2, r3, #8
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	431a      	orrs	r2, r3
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	609a      	str	r2, [r3, #8]
}
 800bfe2:	bf00      	nop
 800bfe4:	371c      	adds	r7, #28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bc80      	pop	{r7}
 800bfea:	4770      	bx	lr

0800bfec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d101      	bne.n	800c004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c000:	2302      	movs	r3, #2
 800c002:	e05a      	b.n	800c0ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2202      	movs	r2, #2
 800c010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c02a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	4313      	orrs	r3, r2
 800c034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a20      	ldr	r2, [pc, #128]	; (800c0c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d022      	beq.n	800c08e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a1e      	ldr	r2, [pc, #120]	; (800c0c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d01d      	beq.n	800c08e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c05a:	d018      	beq.n	800c08e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4a1a      	ldr	r2, [pc, #104]	; (800c0cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d013      	beq.n	800c08e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a19      	ldr	r2, [pc, #100]	; (800c0d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d00e      	beq.n	800c08e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4a17      	ldr	r2, [pc, #92]	; (800c0d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d009      	beq.n	800c08e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a16      	ldr	r2, [pc, #88]	; (800c0d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d004      	beq.n	800c08e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a14      	ldr	r2, [pc, #80]	; (800c0dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d10c      	bne.n	800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bc80      	pop	{r7}
 800c0c2:	4770      	bx	lr
 800c0c4:	40012c00 	.word	0x40012c00
 800c0c8:	40013400 	.word	0x40013400
 800c0cc:	40000400 	.word	0x40000400
 800c0d0:	40000800 	.word	0x40000800
 800c0d4:	40000c00 	.word	0x40000c00
 800c0d8:	40014c00 	.word	0x40014c00
 800c0dc:	40001800 	.word	0x40001800

0800c0e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bc80      	pop	{r7}
 800c0f0:	4770      	bx	lr

0800c0f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0f2:	b480      	push	{r7}
 800c0f4:	b083      	sub	sp, #12
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0fa:	bf00      	nop
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bc80      	pop	{r7}
 800c102:	4770      	bx	lr

0800c104 <_Z14Adbms6948_InitPK17Adbms6948_CfgType>:
    @return        E_OK: Success  \n
                   E_NOT_OK: Failed \n
 */
/*****************************************************************************/
Adbms6948_ReturnType  Adbms6948_Init(const Adbms6948_CfgType *pkConfig)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  return (Adbms6948_Int_Init(pkConfig));
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 ffd5 	bl	800d0bc <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType>
 800c112:	4603      	mov	r3, r0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <_Z18Adbms6948_TrigCADCP24Adbms6948_TrigCADCInputsh>:
Adbms6948_ReturnType  Adbms6948_TrigCADC
(
    Adbms6948_TrigCADCInputs   *poTrigCADCIp,
  const uint8_t           knChainID
)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  return (Adbms6948_Int_TrigCADC(poTrigCADCIp, knChainID));
 800c128:	78fb      	ldrb	r3, [r7, #3]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f001 fb67 	bl	800d800 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh>
 800c132:	4603      	mov	r3, r0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <_Z19Adbms6948_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>:
Adbms6948_ReturnType  Adbms6948_TrigI1ADC
(
  Adbms6948_TrigI1ADCInputs   *poTrigI1ADCIp,
  const uint8_t           knChainID
)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  return Adbms6948_Int_TrigI1ADC(poTrigI1ADCIp, knChainID);
 800c148:	78fb      	ldrb	r3, [r7, #3]
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f001 fbdd 	bl	800d90c <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>
 800c152:	4603      	mov	r3, r0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <_Z22Adbms6948_ReadCellVolt26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePs21Adbms6948_SnapSelTypeh>:
Adbms6948_ReturnType Adbms6948_ReadCellVolt(Adbms6948_CellMeasDataType eCellMeasData,
                                            Adbms6948_CellGrpSelType   eCellGrpSel,
                                            int16_t                    *pnCellData,
                                            Adbms6948_SnapSelType      eSnapSel,
                                            const uint8_t              knChainID)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	603a      	str	r2, [r7, #0]
 800c164:	461a      	mov	r2, r3
 800c166:	4603      	mov	r3, r0
 800c168:	71fb      	strb	r3, [r7, #7]
 800c16a:	460b      	mov	r3, r1
 800c16c:	71bb      	strb	r3, [r7, #6]
 800c16e:	4613      	mov	r3, r2
 800c170:	717b      	strb	r3, [r7, #5]
    #ifdef ADI_LEGACY_GRP_SUPPORT
      return (Adbms6948_Int_ReadCellVolt(eCellMeasData, eCellGrpSel, pnCellData, eSnapSel, knChainID));
  #else
        return (Adbms6948_Int_ReadAllCellVolt(eCellMeasData, pnCellData, eSnapSel, knChainID));
 800c172:	7c3b      	ldrb	r3, [r7, #16]
 800c174:	797a      	ldrb	r2, [r7, #5]
 800c176:	79f8      	ldrb	r0, [r7, #7]
 800c178:	6839      	ldr	r1, [r7, #0]
 800c17a:	f001 fc3b 	bl	800d9f4 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>
 800c17e:	4603      	mov	r3, r0
    #endif
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <_Z21Adbms6948_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>:
Adbms6948_ReturnType  Adbms6948_ReadCurrent(Adbms6948_CurrentMeasDataType eCurrentMeasData,
                                            Adbms6948_CurrentSelType      eCurrentSel,
                                            int32_t                       *pnCurrentData,
                                            Adbms6948_SnapSelType         eSnapSel,
                                            const uint8_t                 knChainID)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af02      	add	r7, sp, #8
 800c18e:	603a      	str	r2, [r7, #0]
 800c190:	461a      	mov	r2, r3
 800c192:	4603      	mov	r3, r0
 800c194:	71fb      	strb	r3, [r7, #7]
 800c196:	460b      	mov	r3, r1
 800c198:	71bb      	strb	r3, [r7, #6]
 800c19a:	4613      	mov	r3, r2
 800c19c:	717b      	strb	r3, [r7, #5]
  return (Adbms6948_Int_ReadCurrent(eCurrentMeasData, eCurrentSel, pnCurrentData, eSnapSel, knChainID));
 800c19e:	797a      	ldrb	r2, [r7, #5]
 800c1a0:	79b9      	ldrb	r1, [r7, #6]
 800c1a2:	79f8      	ldrb	r0, [r7, #7]
 800c1a4:	7c3b      	ldrb	r3, [r7, #16]
 800c1a6:	9300      	str	r3, [sp, #0]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	f001 fc8e 	bl	800dacc <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>
 800c1b0:	4603      	mov	r3, r0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}

0800c1ba <_Z26adi_pal_ReportRuntimeErrorth>:
__attribute__((weak)) void adi_pal_ReportRuntimeError
(
    uint16  ErrorId,
    uint8  Status
)
{
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	460a      	mov	r2, r1
 800c1c4:	80fb      	strh	r3, [r7, #6]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	717b      	strb	r3, [r7, #5]
#ifdef _ADI_DEBUG_
    printf("Runtime error- ErrID: 0x%04X, Status: 0x%02X", ErrorId, Status);
#endif
}
 800c1ca:	bf00      	nop
 800c1cc:	370c      	adds	r7, #12
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bc80      	pop	{r7}
 800c1d2:	4770      	bx	lr

0800c1d4 <_Z14adi_pal_MemsetPhhm>:
(
    uint8 *  pAddr,
    uint8  nVal,
    uint32  nSize
)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	72fb      	strb	r3, [r7, #11]
    (void) memset(pAddr, nVal, nSize);
 800c1e2:	7afb      	ldrb	r3, [r7, #11]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f002 fa73 	bl	800e6d4 <memset>
}
 800c1ee:	bf00      	nop
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <_Z14adi_pal_MemcpyPhS_m>:
(
    uint8 *  pDstAddr,
    uint8 *  pSrcAddr,
    uint32  nSize
)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	607a      	str	r2, [r7, #4]
    memcpy(pDstAddr, pSrcAddr, nSize);
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	68b9      	ldr	r1, [r7, #8]
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f002 fa56 	bl	800e6b8 <memcpy>
}
 800c20c:	bf00      	nop
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <_Z16adi_pal_SpiWritePhth>:
(
    uint8 *pData,
    uint16 nDataLen,
    uint8  nChainID
)
{
 800c214:	b5b0      	push	{r4, r5, r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	807b      	strh	r3, [r7, #2]
 800c220:	4613      	mov	r3, r2
 800c222:	707b      	strb	r3, [r7, #1]
    uint8_t rx_data[nDataLen];

    Adbms6948_SPI_Lock();
    Adbms6948_SPI_WriteRead(pData, rx_data, nDataLen);
    Adbms6948_SPI_Unlock();
 800c224:	466b      	mov	r3, sp
 800c226:	461d      	mov	r5, r3
    uint8_t rx_data[nDataLen];
 800c228:	887b      	ldrh	r3, [r7, #2]
 800c22a:	1e5c      	subs	r4, r3, #1
 800c22c:	60fc      	str	r4, [r7, #12]
 800c22e:	4623      	mov	r3, r4
 800c230:	3301      	adds	r3, #1
 800c232:	4618      	mov	r0, r3
 800c234:	f04f 0100 	mov.w	r1, #0
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	f04f 0300 	mov.w	r3, #0
 800c240:	00cb      	lsls	r3, r1, #3
 800c242:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c246:	00c2      	lsls	r2, r0, #3
 800c248:	4623      	mov	r3, r4
 800c24a:	3301      	adds	r3, #1
 800c24c:	4618      	mov	r0, r3
 800c24e:	f04f 0100 	mov.w	r1, #0
 800c252:	f04f 0200 	mov.w	r2, #0
 800c256:	f04f 0300 	mov.w	r3, #0
 800c25a:	00cb      	lsls	r3, r1, #3
 800c25c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c260:	00c2      	lsls	r2, r0, #3
 800c262:	4623      	mov	r3, r4
 800c264:	3301      	adds	r3, #1
 800c266:	3307      	adds	r3, #7
 800c268:	08db      	lsrs	r3, r3, #3
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	ebad 0d03 	sub.w	sp, sp, r3
 800c270:	466b      	mov	r3, sp
 800c272:	3300      	adds	r3, #0
 800c274:	60bb      	str	r3, [r7, #8]
    Adbms6948_SPI_Lock();
 800c276:	f7f5 f840 	bl	80012fa <_Z18Adbms6948_SPI_Lockv>
    Adbms6948_SPI_WriteRead(pData, rx_data, nDataLen);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	887a      	ldrh	r2, [r7, #2]
 800c27e:	4619      	mov	r1, r3
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7f5 f847 	bl	8001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>
    Adbms6948_SPI_Unlock();
 800c286:	f7f5 f83e 	bl	8001306 <_Z20Adbms6948_SPI_Unlockv>
 800c28a:	46ad      	mov	sp, r5
        } else {
            printf("0x%02X\n", pData[nIdx]);
        }
    }
#endif
}
 800c28c:	bf00      	nop
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bdb0      	pop	{r4, r5, r7, pc}

0800c294 <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh>:
                                DataCfg[15:0]: Specifies length of all data buffer.
                                DataCfg[31:16]: Specifies number of data buffer.
    @param[in]      knChainId   Daisy chain ID to perform the operation.
 */
__attribute__((weak)) void adi_pal_SpiWriteReads (uint8 pTxBuf[8][PAL_MUL_SPI_BUFF_SIZE], uint8 pRxBuf[8][PAL_MUL_SPI_BUFF_SIZE],  uint32 DataCfg, uint8 knChainId )
{
 800c294:	b5b0      	push	{r4, r5, r7, lr}
 800c296:	b08a      	sub	sp, #40	; 0x28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	70fb      	strb	r3, [r7, #3]
            } else {
                printf("0x%02X\n", pRxBuf[reg_group_cnt][nIdx]);
            }
        }
#endif
    }
 800c2a2:	466b      	mov	r3, sp
 800c2a4:	461d      	mov	r5, r3
    uint8_t reg_group_total = (DataCfg >> 16u);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	0c1b      	lsrs	r3, r3, #16
 800c2aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint16_t nGroupDataLen = (uint16_t)(((uint16_t)DataCfg) - ADBMS6948_CMD_DATA_LEN);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	3b04      	subs	r3, #4
 800c2b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t data_size = (ADBMS6948_CMD_DATA_LEN + nGroupDataLen);
 800c2b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t cmd[data_size];
 800c2bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2be:	1e5c      	subs	r4, r3, #1
 800c2c0:	61fc      	str	r4, [r7, #28]
 800c2c2:	4623      	mov	r3, r4
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f04f 0100 	mov.w	r1, #0
 800c2cc:	f04f 0200 	mov.w	r2, #0
 800c2d0:	f04f 0300 	mov.w	r3, #0
 800c2d4:	00cb      	lsls	r3, r1, #3
 800c2d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c2da:	00c2      	lsls	r2, r0, #3
 800c2dc:	4623      	mov	r3, r4
 800c2de:	3301      	adds	r3, #1
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f04f 0100 	mov.w	r1, #0
 800c2e6:	f04f 0200 	mov.w	r2, #0
 800c2ea:	f04f 0300 	mov.w	r3, #0
 800c2ee:	00cb      	lsls	r3, r1, #3
 800c2f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c2f4:	00c2      	lsls	r2, r0, #3
 800c2f6:	4623      	mov	r3, r4
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	3307      	adds	r3, #7
 800c2fc:	08db      	lsrs	r3, r3, #3
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	ebad 0d03 	sub.w	sp, sp, r3
 800c304:	466b      	mov	r3, sp
 800c306:	3300      	adds	r3, #0
 800c308:	61bb      	str	r3, [r7, #24]
    uint8_t resp[data_size];
 800c30a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c30c:	1e5c      	subs	r4, r3, #1
 800c30e:	617c      	str	r4, [r7, #20]
 800c310:	4623      	mov	r3, r4
 800c312:	3301      	adds	r3, #1
 800c314:	4618      	mov	r0, r3
 800c316:	f04f 0100 	mov.w	r1, #0
 800c31a:	f04f 0200 	mov.w	r2, #0
 800c31e:	f04f 0300 	mov.w	r3, #0
 800c322:	00cb      	lsls	r3, r1, #3
 800c324:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c328:	00c2      	lsls	r2, r0, #3
 800c32a:	4623      	mov	r3, r4
 800c32c:	3301      	adds	r3, #1
 800c32e:	4618      	mov	r0, r3
 800c330:	f04f 0100 	mov.w	r1, #0
 800c334:	f04f 0200 	mov.w	r2, #0
 800c338:	f04f 0300 	mov.w	r3, #0
 800c33c:	00cb      	lsls	r3, r1, #3
 800c33e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c342:	00c2      	lsls	r2, r0, #3
 800c344:	4623      	mov	r3, r4
 800c346:	3301      	adds	r3, #1
 800c348:	3307      	adds	r3, #7
 800c34a:	08db      	lsrs	r3, r3, #3
 800c34c:	00db      	lsls	r3, r3, #3
 800c34e:	ebad 0d03 	sub.w	sp, sp, r3
 800c352:	466b      	mov	r3, sp
 800c354:	3300      	adds	r3, #0
 800c356:	613b      	str	r3, [r7, #16]
    for (reg_group_cnt = 0; reg_group_cnt < reg_group_total ; reg_group_cnt++) {
 800c358:	2300      	movs	r3, #0
 800c35a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c35e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c366:	429a      	cmp	r2, r3
 800c368:	d22b      	bcs.n	800c3c2 <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh+0x12e>
        Adbms6948_SPI_Lock();
 800c36a:	f7f4 ffc6 	bl	80012fa <_Z18Adbms6948_SPI_Lockv>
        memcpy(&cmd[0], &pTxBuf[reg_group_cnt][0], ADBMS6948_CMD_DATA_LEN); /* dst, src, size */
 800c36e:	69b9      	ldr	r1, [r7, #24]
 800c370:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c374:	4613      	mov	r3, r2
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	4413      	add	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	461a      	mov	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	4413      	add	r3, r2
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	600b      	str	r3, [r1, #0]
        Adbms6948_SPI_WriteRead(cmd, resp, data_size);
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	6939      	ldr	r1, [r7, #16]
 800c38a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c38c:	4618      	mov	r0, r3
 800c38e:	f7f4 ffc1 	bl	8001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>
        memcpy(&pRxBuf[reg_group_cnt][ADBMS6948_CMD_DATA_LEN], &resp[ADBMS6948_CMD_DATA_LEN], nGroupDataLen); /* dst, src, size */
 800c392:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	461a      	mov	r2, r3
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	1d18      	adds	r0, r3, #4
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	f002 f983 	bl	800e6b8 <memcpy>
        Adbms6948_SPI_Unlock();
 800c3b2:	f7f4 ffa8 	bl	8001306 <_Z20Adbms6948_SPI_Unlockv>
    for (reg_group_cnt = 0; reg_group_cnt < reg_group_total ; reg_group_cnt++) {
 800c3b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c3c0:	e7cd      	b.n	800c35e <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh+0xca>
 800c3c2:	46ad      	mov	sp, r5
}
 800c3c4:	bf00      	nop
 800c3c6:	3728      	adds	r7, #40	; 0x28
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bdb0      	pop	{r4, r5, r7, pc}

0800c3cc <_Z23adi_pal_SpiWriteReadAllPhS_mh>:
    @param[in]      pRxBuf      Pointer to the receive buffer.
    @param[in]      nDataLen    Length of data to receive.
    @param[in]      nChainID    Daisy chain ID to perform the operation.
 */
__attribute__((weak)) void adi_pal_SpiWriteReadAll(uint8 *pTxBuf, uint8 *pRxBuf, uint32 nDataLen, uint8 nChainID)
{
 800c3cc:	b5b0      	push	{r4, r5, r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
 800c3d8:	70fb      	strb	r3, [r7, #3]

    memcpy(&cmd[0], pTxBuf, ADBMS6948_CMD_DATA_LEN); /* dst, src, size */
    Adbms6948_SPI_WriteRead(cmd, cmd, data_size);
    memcpy(pRxBuf, &cmd[ADBMS6948_CMD_DATA_LEN], nDataLen); /* dst, src, size */

    Adbms6948_SPI_Unlock();
 800c3da:	466b      	mov	r3, sp
 800c3dc:	461d      	mov	r5, r3
    uint16_t data_size = (ADBMS6948_CMD_DATA_LEN + nDataLen);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	83fb      	strh	r3, [r7, #30]
    uint8_t cmd[data_size];
 800c3e6:	8bfb      	ldrh	r3, [r7, #30]
 800c3e8:	1e5c      	subs	r4, r3, #1
 800c3ea:	61bc      	str	r4, [r7, #24]
 800c3ec:	4623      	mov	r3, r4
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f04f 0100 	mov.w	r1, #0
 800c3f6:	f04f 0200 	mov.w	r2, #0
 800c3fa:	f04f 0300 	mov.w	r3, #0
 800c3fe:	00cb      	lsls	r3, r1, #3
 800c400:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c404:	00c2      	lsls	r2, r0, #3
 800c406:	4623      	mov	r3, r4
 800c408:	3301      	adds	r3, #1
 800c40a:	4618      	mov	r0, r3
 800c40c:	f04f 0100 	mov.w	r1, #0
 800c410:	f04f 0200 	mov.w	r2, #0
 800c414:	f04f 0300 	mov.w	r3, #0
 800c418:	00cb      	lsls	r3, r1, #3
 800c41a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c41e:	00c2      	lsls	r2, r0, #3
 800c420:	4623      	mov	r3, r4
 800c422:	3301      	adds	r3, #1
 800c424:	3307      	adds	r3, #7
 800c426:	08db      	lsrs	r3, r3, #3
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	ebad 0d03 	sub.w	sp, sp, r3
 800c42e:	466b      	mov	r3, sp
 800c430:	3300      	adds	r3, #0
 800c432:	617b      	str	r3, [r7, #20]
    Adbms6948_SPI_Lock();
 800c434:	f7f4 ff61 	bl	80012fa <_Z18Adbms6948_SPI_Lockv>
    memcpy(&cmd[0], pTxBuf, ADBMS6948_CMD_DATA_LEN); /* dst, src, size */
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	6812      	ldr	r2, [r2, #0]
 800c43e:	601a      	str	r2, [r3, #0]
    Adbms6948_SPI_WriteRead(cmd, cmd, data_size);
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	6979      	ldr	r1, [r7, #20]
 800c444:	8bfa      	ldrh	r2, [r7, #30]
 800c446:	4618      	mov	r0, r3
 800c448:	f7f4 ff64 	bl	8001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>
    memcpy(pRxBuf, &cmd[ADBMS6948_CMD_DATA_LEN], nDataLen); /* dst, src, size */
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	3304      	adds	r3, #4
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	4619      	mov	r1, r3
 800c454:	68b8      	ldr	r0, [r7, #8]
 800c456:	f002 f92f 	bl	800e6b8 <memcpy>
    Adbms6948_SPI_Unlock();
 800c45a:	f7f4 ff54 	bl	8001306 <_Z20Adbms6948_SPI_Unlockv>
 800c45e:	46ad      	mov	sp, r5
}
 800c460:	bf00      	nop
 800c462:	3720      	adds	r7, #32
 800c464:	46bd      	mov	sp, r7
 800c466:	bdb0      	pop	{r4, r5, r7, pc}

0800c468 <_Z15adi_pal_IsErrorh>:
 */
__attribute__((weak)) boolean adi_pal_IsError
(
    uint8 nChainID
)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	71fb      	strb	r3, [r7, #7]
    boolean bRet = FALSE;
 800c472:	2300      	movs	r3, #0
 800c474:	73fb      	strb	r3, [r7, #15]

    return bRet;
 800c476:	7bfb      	ldrb	r3, [r7, #15]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3714      	adds	r7, #20
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bc80      	pop	{r7}
 800c480:	4770      	bx	lr

0800c482 <_Z18adi_pal_TimerDelaymh>:

    @param[in]      nPeriodInUS     Delay in microseconds.
    @param[in]      nChainID        Daisy chain ID to perform the operation.
 */
__attribute__((weak)) void adi_pal_TimerDelay(uint32 nPeriodInUS, uint8 nChainID)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b082      	sub	sp, #8
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	460b      	mov	r3, r1
 800c48c:	70fb      	strb	r3, [r7, #3]
  Adbms_Delay_us(nPeriodInUS);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f001 febe 	bl	800e210 <_Z14Adbms_Delay_usm>
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <_Z25Adbms6948_Cmn_WakeUpBmsICh>:
                It starts with 0 for the first chain.

    @return          E_OK    : Operation was successful \n
                    E_NOT_OK: Operation failed \n
 */
void Adbms6948_Cmn_WakeUpBmsIC(uint8_t knChainID) {
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	71fb      	strb	r3, [r7, #7]
	uint8_t   nLen = 1u;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	73fb      	strb	r3, [r7, #15]
	uint8_t   nDummyByte = 0xFFu;
 800c4aa:	23ff      	movs	r3, #255	; 0xff
 800c4ac:	73bb      	strb	r3, [r7, #14]

	/* Write a dummy byte. */
	Adbms6948_Cmd_SendDummyBytes(&nDummyByte, nLen, knChainID);
 800c4ae:	79fa      	ldrb	r2, [r7, #7]
 800c4b0:	7bf9      	ldrb	r1, [r7, #15]
 800c4b2:	f107 030e 	add.w	r3, r7, #14
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f001 f8db 	bl	800d672 <_Z28Adbms6948_Cmd_SendDummyBytesPhhh>
	if (TRUE == Adbms6948_aoChainStateInfo[knChainID].bFirstWakeup)
 800c4bc:	79fa      	ldrb	r2, [r7, #7]
 800c4be:	490c      	ldr	r1, [pc, #48]	; (800c4f0 <_Z25Adbms6948_Cmn_WakeUpBmsICh+0x54>)
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d106      	bne.n	800c4de <_Z25Adbms6948_Cmn_WakeUpBmsICh+0x42>
	{
		/* Delay to ensure Wakeup after initialization */
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_TWAKE, knChainID);
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	f44f 7016 	mov.w	r0, #600	; 0x258
 800c4d8:	f7ff ffd3 	bl	800c482 <_Z18adi_pal_TimerDelaymh>
	{
		/* Delay to ensure Wakeup during initialization */
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_TREADY, knChainID);
	}

	return;
 800c4dc:	e005      	b.n	800c4ea <_Z25Adbms6948_Cmn_WakeUpBmsICh+0x4e>
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_TREADY, knChainID);
 800c4de:	79fb      	ldrb	r3, [r7, #7]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	200a      	movs	r0, #10
 800c4e4:	f7ff ffcd 	bl	800c482 <_Z18adi_pal_TimerDelaymh>
	return;
 800c4e8:	bf00      	nop
}
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	20000768 	.word	0x20000768

0800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>:
void Adbms6948_Cmn_ReportRuntimeErr
(
		uint16_t   ErrorId,
		uint8_t   Status
)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	80fb      	strh	r3, [r7, #6]
 800c500:	4613      	mov	r3, r2
 800c502:	717b      	strb	r3, [r7, #5]
	ADI_PAL_REPORT_RUNTIME_ERROR(ErrorId, Status);
 800c504:	797a      	ldrb	r2, [r7, #5]
 800c506:	88fb      	ldrh	r3, [r7, #6]
 800c508:	4611      	mov	r1, r2
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fe55 	bl	800c1ba <_Z26adi_pal_ReportRuntimeErrorth>
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <_Z21Adbms6948_Cmn_IsErrorh>:
 */
boolean Adbms6948_Cmn_IsError
(
		uint8_t  knChainID
)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	71fb      	strb	r3, [r7, #7]
	Adbms6948_ReturnType  nRet;
	nRet = ADI_PAL_ISERROR(knChainID);
 800c522:	79fb      	ldrb	r3, [r7, #7]
 800c524:	4618      	mov	r0, r3
 800c526:	f7ff ff9f 	bl	800c468 <_Z15adi_pal_IsErrorh>
 800c52a:	4603      	mov	r3, r0
 800c52c:	73fb      	strb	r3, [r7, #15]

	return nRet;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <_Z25Adbms6948_Cmn_ValidatePECPhhhh>:
		uint8_t *pDataBuf,
		uint8_t  nLen,
		uint8_t  nDeviceId,
		uint8_t  knChainID
)
{
 800c538:	b590      	push	{r4, r7, lr}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	4608      	mov	r0, r1
 800c542:	4611      	mov	r1, r2
 800c544:	461a      	mov	r2, r3
 800c546:	4603      	mov	r3, r0
 800c548:	70fb      	strb	r3, [r7, #3]
 800c54a:	460b      	mov	r3, r1
 800c54c:	70bb      	strb	r3, [r7, #2]
 800c54e:	4613      	mov	r3, r2
 800c550:	707b      	strb	r3, [r7, #1]
	uint16_t   nDataPec;
	uint16_t   nRcvdPec;
	uint8_t   nCmdCntRcvd;
	boolean  bIsPecValid = TRUE;
 800c552:	2301      	movs	r3, #1
 800c554:	73fb      	strb	r3, [r7, #15]

	nDataPec = Adbms6948_Pec10Calculate(&pDataBuf[0], TRUE, nLen - ADBMS6948_PEC_LEN);
 800c556:	78fb      	ldrb	r3, [r7, #3]
 800c558:	3b02      	subs	r3, #2
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	461a      	mov	r2, r3
 800c55e:	2101      	movs	r1, #1
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f001 fdf7 	bl	800e154 <_Z24Adbms6948_Pec10CalculatePhhh>
 800c566:	4603      	mov	r3, r0
 800c568:	81bb      	strh	r3, [r7, #12]
	nRcvdPec = ((uint16_t)(((uint16_t)pDataBuf[nLen-2u]) << 8) + (uint16_t)pDataBuf[nLen-1u]);
 800c56a:	78fb      	ldrb	r3, [r7, #3]
 800c56c:	3b02      	subs	r3, #2
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	4413      	add	r3, r2
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	b29b      	uxth	r3, r3
 800c576:	021b      	lsls	r3, r3, #8
 800c578:	b29a      	uxth	r2, r3
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	6879      	ldr	r1, [r7, #4]
 800c580:	440b      	add	r3, r1
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	b29b      	uxth	r3, r3
 800c586:	4413      	add	r3, r2
 800c588:	817b      	strh	r3, [r7, #10]
	nCmdCntRcvd = (uint8_t)((nRcvdPec & (uint16_t)0xFC00) >> 10u);
 800c58a:	897b      	ldrh	r3, [r7, #10]
 800c58c:	0a9b      	lsrs	r3, r3, #10
 800c58e:	b29b      	uxth	r3, r3
 800c590:	727b      	strb	r3, [r7, #9]
	nRcvdPec = (uint16_t)(nRcvdPec & (uint16_t)0x03FF);
 800c592:	897b      	ldrh	r3, [r7, #10]
 800c594:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c598:	817b      	strh	r3, [r7, #10]

	/* Set the PEC error to FALSE in the state variable */
	Adbms6948_aoChainStateInfo[knChainID].aLastReadPecEr[nDeviceId] = (boolean)FALSE;
 800c59a:	787a      	ldrb	r2, [r7, #1]
 800c59c:	78b9      	ldrb	r1, [r7, #2]
 800c59e:	4854      	ldr	r0, [pc, #336]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4403      	add	r3, r0
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	701a      	strb	r2, [r3, #0]
	if (nRcvdPec != nDataPec)
 800c5b2:	897a      	ldrh	r2, [r7, #10]
 800c5b4:	89bb      	ldrh	r3, [r7, #12]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d03e      	beq.n	800c638 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x100>
	{
		if (Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDeviceId] == ADBMS6948_DEVICE)
 800c5ba:	787a      	ldrb	r2, [r7, #1]
 800c5bc:	78b9      	ldrb	r1, [r7, #2]
 800c5be:	484c      	ldr	r0, [pc, #304]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4403      	add	r3, r0
 800c5ca:	440b      	add	r3, r1
 800c5cc:	3311      	adds	r3, #17
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d124      	bne.n	800c61e <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0xe6>
		{
			bIsPecValid = FALSE;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
			Adbms6948_aoChainStateInfo[knChainID].nPECError[nDeviceId]++;
 800c5d8:	787a      	ldrb	r2, [r7, #1]
 800c5da:	78b9      	ldrb	r1, [r7, #2]
 800c5dc:	4844      	ldr	r0, [pc, #272]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c5de:	4613      	mov	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	4413      	add	r3, r2
 800c5e4:	440b      	add	r3, r1
 800c5e6:	3302      	adds	r3, #2
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4403      	add	r3, r0
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	1c58      	adds	r0, r3, #1
 800c5f0:	4c3f      	ldr	r4, [pc, #252]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4413      	add	r3, r2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	3302      	adds	r3, #2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	4423      	add	r3, r4
 800c600:	6058      	str	r0, [r3, #4]
			if (TRUE == Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Invalid_PEC.nState)
 800c602:	4b3c      	ldr	r3, [pc, #240]	; (800c6f4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d107      	bne.n	800c61e <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0xe6>
			{
				Adbms6948_Cmn_ReportRuntimeErr(
						Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Invalid_PEC.nErrID,
 800c60e:	4b39      	ldr	r3, [pc, #228]	; (800c6f4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	885b      	ldrh	r3, [r3, #2]
				Adbms6948_Cmn_ReportRuntimeErr(
 800c616:	2101      	movs	r1, #1
 800c618:	4618      	mov	r0, r3
 800c61a:	f7ff ff6b 	bl	800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
						ADBMS6948_RUNTIME_E_STATUS_FAILED);
			}
		}
		/* Set the PEC error to TRUE in the state variable */
		Adbms6948_aoChainStateInfo[knChainID].aLastReadPecEr[nDeviceId] = (boolean)TRUE;
 800c61e:	787a      	ldrb	r2, [r7, #1]
 800c620:	78b9      	ldrb	r1, [r7, #2]
 800c622:	4833      	ldr	r0, [pc, #204]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c624:	4613      	mov	r3, r2
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	4413      	add	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4403      	add	r3, r0
 800c62e:	440b      	add	r3, r1
 800c630:	3301      	adds	r3, #1
 800c632:	2201      	movs	r2, #1
 800c634:	701a      	strb	r2, [r3, #0]
 800c636:	e055      	b.n	800c6e4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1ac>
	}
	else
	{
		if (Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDeviceId] == ADBMS6948_DEVICE)
 800c638:	787a      	ldrb	r2, [r7, #1]
 800c63a:	78b9      	ldrb	r1, [r7, #2]
 800c63c:	482c      	ldr	r0, [pc, #176]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4403      	add	r3, r0
 800c648:	440b      	add	r3, r1
 800c64a:	3311      	adds	r3, #17
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d13c      	bne.n	800c6cc <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x194>
		{
			if (nCmdCntRcvd != Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDeviceId])
 800c652:	787a      	ldrb	r2, [r7, #1]
 800c654:	78b9      	ldrb	r1, [r7, #2]
 800c656:	4826      	ldr	r0, [pc, #152]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c658:	4613      	mov	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4413      	add	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4403      	add	r3, r0
 800c662:	440b      	add	r3, r1
 800c664:	3304      	adds	r3, #4
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	7a7a      	ldrb	r2, [r7, #9]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d02e      	beq.n	800c6cc <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x194>
			{
				bIsPecValid = FALSE;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
				Adbms6948_aoChainStateInfo[knChainID].nCmdCntError[nDeviceId]++;
 800c672:	787a      	ldrb	r2, [r7, #1]
 800c674:	78b9      	ldrb	r1, [r7, #2]
 800c676:	481e      	ldr	r0, [pc, #120]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c678:	4613      	mov	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	440b      	add	r3, r1
 800c680:	3302      	adds	r3, #2
 800c682:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c686:	1c58      	adds	r0, r3, #1
 800c688:	4c19      	ldr	r4, [pc, #100]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c68a:	4613      	mov	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	440b      	add	r3, r1
 800c692:	3302      	adds	r3, #2
 800c694:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
				/* Latch onto the command count set in the device */
				Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDeviceId] = (uint8_t)nCmdCntRcvd;
 800c698:	787a      	ldrb	r2, [r7, #1]
 800c69a:	78b9      	ldrb	r1, [r7, #2]
 800c69c:	4814      	ldr	r0, [pc, #80]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c69e:	4613      	mov	r3, r2
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	4413      	add	r3, r2
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4403      	add	r3, r0
 800c6a8:	440b      	add	r3, r1
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	7a7a      	ldrb	r2, [r7, #9]
 800c6ae:	701a      	strb	r2, [r3, #0]
				if (TRUE == Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_CommandCount.nState)
 800c6b0:	4b10      	ldr	r3, [pc, #64]	; (800c6f4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	791b      	ldrb	r3, [r3, #4]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d107      	bne.n	800c6cc <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x194>
				{
					Adbms6948_Cmn_ReportRuntimeErr(
							Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_CommandCount.nErrID,
 800c6bc:	4b0d      	ldr	r3, [pc, #52]	; (800c6f4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	88db      	ldrh	r3, [r3, #6]
					Adbms6948_Cmn_ReportRuntimeErr(
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7ff ff14 	bl	800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
							ADBMS6948_RUNTIME_E_STATUS_FAILED);
				}
			}
		}
		Adbms6948_aoChainStateInfo[knChainID].aLastReadCCs[nDeviceId] = (uint8_t)nCmdCntRcvd;
 800c6cc:	787a      	ldrb	r2, [r7, #1]
 800c6ce:	78b9      	ldrb	r1, [r7, #2]
 800c6d0:	4807      	ldr	r0, [pc, #28]	; (800c6f0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4403      	add	r3, r0
 800c6dc:	440b      	add	r3, r1
 800c6de:	3303      	adds	r3, #3
 800c6e0:	7a7a      	ldrb	r2, [r7, #9]
 800c6e2:	701a      	strb	r2, [r3, #0]
	}
	return (bIsPecValid);
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd90      	pop	{r4, r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000768 	.word	0x20000768
 800c6f4:	2000077c 	.word	0x2000077c

0800c6f8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>:
Adbms6948_ReturnType  Adbms6948_Cmn_VerifyCmdCnt
(
		boolean   bWithCfgRead,
		uint8_t    knChainID
)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	460a      	mov	r2, r1
 800c702:	71fb      	strb	r3, [r7, #7]
 800c704:	4613      	mov	r3, r2
 800c706:	71bb      	strb	r3, [r7, #6]
	Adbms6948_ReturnType  nRet = E_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	77fb      	strb	r3, [r7, #31]

	if (TRUE == bWithCfgRead)
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d10b      	bne.n	800c72a <_Z26Adbms6948_Cmn_VerifyCmdCnthh+0x32>
	{
		uint8_t  aRdCfgData[ADBMS6948_NUMOF_REGGRP_ONE][ADBMS6948_CMD_DATA_LEN + (ADBMS6948_REG_DATA_LEN_WITH_PEC * ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)];
		uint16_t anCmdList[ADBMS6948_NUMOF_REGGRP_ONE];
		/* Read configuration register group A and verify the PEC and command counter. */
		anCmdList[0u] = ADBMS6948_CMD_RDCFGA;
 800c712:	2302      	movs	r3, #2
 800c714:	81bb      	strh	r3, [r7, #12]
		nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, knChainID);
 800c716:	79bb      	ldrb	r3, [r7, #6]
 800c718:	f107 0110 	add.w	r1, r7, #16
 800c71c:	f107 000c 	add.w	r0, r7, #12
 800c720:	2201      	movs	r2, #1
 800c722:	f000 fab5 	bl	800cc90 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800c726:	4603      	mov	r3, r0
 800c728:	77fb      	strb	r3, [r7, #31]
	}

	return (nRet);
 800c72a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3720      	adds	r7, #32
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <_Z23Adbms6948_Cmn_InitChainh>:

  @return          E_OK    : Operation was successful \n
                    E_NOT_OK: Operation failed \n
 */
Adbms6948_ReturnType  Adbms6948_Cmn_InitChain(uint8_t nChainIndex)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b096      	sub	sp, #88	; 0x58
 800c738:	af02      	add	r7, sp, #8
 800c73a:	4603      	mov	r3, r0
 800c73c:	71fb      	strb	r3, [r7, #7]
	uint8_t   nCfgDataChain[(ADBMS6948_REG_GRP_LEN)*ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN];
	uint8_t   nCfgAData[ADBMS6948_REG_GRP_LEN] = {0};
 800c73e:	2300      	movs	r3, #0
 800c740:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c742:	2300      	movs	r3, #0
 800c744:	863b      	strh	r3, [r7, #48]	; 0x30
	uint8_t   nCfgBData[ADBMS6948_REG_GRP_LEN] = {0};
 800c746:	2300      	movs	r3, #0
 800c748:	627b      	str	r3, [r7, #36]	; 0x24
 800c74a:	2300      	movs	r3, #0
 800c74c:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t   nCfgCData[ADBMS6948_REG_GRP_LEN] = {0};
 800c74e:	2300      	movs	r3, #0
 800c750:	61fb      	str	r3, [r7, #28]
 800c752:	2300      	movs	r3, #0
 800c754:	843b      	strh	r3, [r7, #32]
	uint16_t  nUnderVoltCompVal,nOverVoltCompVal,nTempGpo;
	uint8_t   nTemp;
	uint8_t   nGpio11Sel;
	uint16_t  anCmdList[ADBMS6948_NUMOF_REGGRP_ONE];
	Adbms6948_ReturnType  nRet = E_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t  aRdCfgData[ADBMS6948_NUMOF_REGGRP_ONE][ADBMS6948_CMD_DATA_LEN +
 800c75c:	f107 030c 	add.w	r3, r7, #12
 800c760:	2200      	movs	r2, #0
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	605a      	str	r2, [r3, #4]
 800c766:	609a      	str	r2, [r3, #8]
													(ADBMS6948_REG_DATA_LEN_WITH_PEC *
															ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)] = {0u};

	if (TRUE == Adbms6948_pConfig->Adbms6948_pDaisyChainCfg[nChainIndex].Adbms6948_bEnableInit)
 800c768:	4bc3      	ldr	r3, [pc, #780]	; (800ca78 <_Z23Adbms6948_Cmn_InitChainh+0x344>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6819      	ldr	r1, [r3, #0]
 800c76e:	79fa      	ldrb	r2, [r7, #7]
 800c770:	4613      	mov	r3, r2
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	1a9b      	subs	r3, r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	440b      	add	r3, r1
 800c77a:	785b      	ldrb	r3, [r3, #1]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	f040 819e 	bne.w	800cabe <_Z23Adbms6948_Cmn_InitChainh+0x38a>
	{

		/* Reference ON/OFF */
		nTemp = (uint8_t)Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_bEnableRefOn;
 800c782:	4bbe      	ldr	r3, [pc, #760]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c784:	6819      	ldr	r1, [r3, #0]
 800c786:	79fa      	ldrb	r2, [r7, #7]
 800c788:	4613      	mov	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	1a9b      	subs	r3, r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	440b      	add	r3, r1
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		nCfgAData[0] = (uint8_t)(nTemp << ADBMS6948_CFGAR0_POS_REFON);
 800c798:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c79c:	01db      	lsls	r3, r3, #7
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		/*C and S comparison threshold voltage value */
		nTemp = (uint8_t)Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_eCSThresholdVolt;
 800c7a4:	4bb5      	ldr	r3, [pc, #724]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c7a6:	6819      	ldr	r1, [r3, #0]
 800c7a8:	79fa      	ldrb	r2, [r7, #7]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	00db      	lsls	r3, r3, #3
 800c7ae:	1a9b      	subs	r3, r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	440b      	add	r3, r1
 800c7b4:	7bdb      	ldrb	r3, [r3, #15]
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		nCfgAData[0] = (uint8_t)(nCfgAData[0] |
 800c7ba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
				((uint8_t)(((uint8_t)nTemp ) & (ADBMS6948_CFGAR0_MASK_CTH))));
 800c7be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7c2:	f003 0307 	and.w	r3, r3, #7
 800c7c6:	b2db      	uxtb	r3, r3
		nCfgAData[0] = (uint8_t)(nCfgAData[0] |
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		/*GPIO Pin control selection */
		nTempGpo = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nGPIOPinCtrlValue;
 800c7d0:	4baa      	ldr	r3, [pc, #680]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c7d2:	6819      	ldr	r1, [r3, #0]
 800c7d4:	79fa      	ldrb	r2, [r7, #7]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	1a9b      	subs	r3, r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	440b      	add	r3, r1
 800c7e0:	891b      	ldrh	r3, [r3, #8]
 800c7e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		nCfgAData[3] = (uint8_t)(nTempGpo & ADBMS6948_CFGAR3_MASK_GPO);
 800c7e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		nCfgAData[4] = (uint8_t)(((nTempGpo >> 8u) & ADBMS6948_CFGAR4_MASK_GPO) << ADBMS6948_CFGAR4_POS_GPO);
 800c7f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c7f4:	121b      	asrs	r3, r3, #8
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	f003 0307 	and.w	r3, r3, #7
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

		/*FC bit value */
		nTemp = (uint8_t)Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_eIIRCornerFreq;
 800c802:	4b9e      	ldr	r3, [pc, #632]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c804:	6819      	ldr	r1, [r3, #0]
 800c806:	79fa      	ldrb	r2, [r7, #7]
 800c808:	4613      	mov	r3, r2
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	1a9b      	subs	r3, r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	440b      	add	r3, r1
 800c812:	7b9b      	ldrb	r3, [r3, #14]
 800c814:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		nCfgAData[5] = (uint8_t)(((uint8_t)nTemp) & (ADBMS6948_CFGAR5_MASK_FC));
 800c818:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c81c:	f003 0307 	and.w	r3, r3, #7
 800c820:	b2db      	uxtb	r3, r3
 800c822:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		/* Under Voltage Settings */
		nUnderVoltCompVal = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nUnderVoltThreshold;
 800c826:	4b95      	ldr	r3, [pc, #596]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c828:	6819      	ldr	r1, [r3, #0]
 800c82a:	79fa      	ldrb	r2, [r7, #7]
 800c82c:	4613      	mov	r3, r2
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	1a9b      	subs	r3, r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	440b      	add	r3, r1
 800c836:	899b      	ldrh	r3, [r3, #12]
 800c838:	87fb      	strh	r3, [r7, #62]	; 0x3e
		nCfgBData[0] = (uint8_t)(nCfgBData[0] | ((uint8_t)(nUnderVoltCompVal & (uint8_t)0x0FF)));
 800c83a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c83e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c840:	b2db      	uxtb	r3, r3
 800c842:	4313      	orrs	r3, r2
 800c844:	b2db      	uxtb	r3, r3
 800c846:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		nCfgBData[1] = (uint8_t)(nCfgBData[1] | (uint8_t)((nUnderVoltCompVal & (uint16_t)0xF00u) >> 8u));
 800c84a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c84e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c850:	121b      	asrs	r3, r3, #8
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f003 030f 	and.w	r3, r3, #15
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	4313      	orrs	r3, r2
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		/* Over Voltage Settings */
		nOverVoltCompVal = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nOverVoltThreshold;
 800c862:	4b86      	ldr	r3, [pc, #536]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c864:	6819      	ldr	r1, [r3, #0]
 800c866:	79fa      	ldrb	r2, [r7, #7]
 800c868:	4613      	mov	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	1a9b      	subs	r3, r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	440b      	add	r3, r1
 800c872:	895b      	ldrh	r3, [r3, #10]
 800c874:	87bb      	strh	r3, [r7, #60]	; 0x3c
		nCfgBData[1] = (uint8_t)(nCfgBData[1] | (uint8_t)((uint16_t)(nOverVoltCompVal & 0x000Fu) << 4u));
 800c876:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c87a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	4313      	orrs	r3, r2
 800c882:	b2db      	uxtb	r3, r3
 800c884:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		nCfgBData[2] = (uint8_t)(nCfgBData[2] | (uint8_t)((nOverVoltCompVal & (uint16_t)0x0FF0u) >> 4u));
 800c888:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c88c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c88e:	111b      	asrs	r3, r3, #4
 800c890:	b2db      	uxtb	r3, r3
 800c892:	4313      	orrs	r3, r2
 800c894:	b2db      	uxtb	r3, r3
 800c896:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/* balancing */
		nCfgBData[3] = 0xB2;
 800c89a:	23b2      	movs	r3, #178	; 0xb2
 800c89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* GPIO11 pin selection */
		nGpio11Sel = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_eGpio11CfgType;
 800c8a0:	4b76      	ldr	r3, [pc, #472]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c8a2:	6819      	ldr	r1, [r3, #0]
 800c8a4:	79fa      	ldrb	r2, [r7, #7]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	00db      	lsls	r3, r3, #3
 800c8aa:	1a9b      	subs	r3, r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	440b      	add	r3, r1
 800c8b0:	7c1b      	ldrb	r3, [r3, #16]
 800c8b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		nCfgCData[4] = (uint8_t)((nGpio11Sel & 0x03) << ADBMS6948_CFGCR0_POS_G11_SEL);
 800c8b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c8ba:	019b      	lsls	r3, r3, #6
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	f887 3020 	strb.w	r3, [r7, #32]

		/* Wake up N devices in the daisy chain */
		Adbms6948_aoChainStateInfo[nChainIndex].bFirstWakeup = TRUE;
 800c8c2:	79fa      	ldrb	r2, [r7, #7]
 800c8c4:	496e      	ldr	r1, [pc, #440]	; (800ca80 <_Z23Adbms6948_Cmn_InitChainh+0x34c>)
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4413      	add	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	440b      	add	r3, r1
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	701a      	strb	r2, [r3, #0]

		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800c8d4:	4b69      	ldr	r3, [pc, #420]	; (800ca7c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c8d6:	6819      	ldr	r1, [r3, #0]
 800c8d8:	79fa      	ldrb	r2, [r7, #7]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	1a9b      	subs	r3, r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	440b      	add	r3, r1
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800c8e4:	79fa      	ldrb	r2, [r7, #7]
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800c8e6:	7898      	ldrb	r0, [r3, #2]
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800c8e8:	4965      	ldr	r1, [pc, #404]	; (800ca80 <_Z23Adbms6948_Cmn_InitChainh+0x34c>)
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	4413      	add	r3, r2
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	440b      	add	r3, r1
 800c8f4:	3305      	adds	r3, #5
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	701a      	strb	r2, [r3, #0]

		/*Wakeup*/
		Adbms6948_Cmn_WakeUpBmsIC(nChainIndex);
 800c8fa:	79fb      	ldrb	r3, [r7, #7]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff fdcd 	bl	800c49c <_Z25Adbms6948_Cmn_WakeUpBmsICh>

		/*Software reset the IC, puts it into sleep mode*/
		Adbms6948_Cmd_ExecCmd(ADBMS6948_CMD_SRST, FALSE, nChainIndex);
 800c902:	79fb      	ldrb	r3, [r7, #7]
 800c904:	461a      	mov	r2, r3
 800c906:	2100      	movs	r1, #0
 800c908:	2027      	movs	r0, #39	; 0x27
 800c90a:	f000 fcab 	bl	800d264 <_Z21Adbms6948_Cmd_ExecCmdthh>

		/*Wakeup the IC again*/
		Adbms6948_Cmn_WakeUpBmsIC(nChainIndex);
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	4618      	mov	r0, r3
 800c912:	f7ff fdc3 	bl	800c49c <_Z25Adbms6948_Cmn_WakeUpBmsICh>

		/* Copy the configuration data to local variable */
		Adbms6948_lPrepConfigBuff(ADBMS6948_CMD_RDCFGA,aRdCfgData,nCfgAData,&nCfgDataChain[0u],nChainIndex);
 800c916:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c91a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c91e:	f107 010c 	add.w	r1, r7, #12
 800c922:	79fb      	ldrb	r3, [r7, #7]
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	4603      	mov	r3, r0
 800c928:	2002      	movs	r0, #2
 800c92a:	f000 fb91 	bl	800d050 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>

		/* Clear the command counter. */
		Adbms6948_Cmd_ExecCmd(ADBMS6948_CMD_RSTCC, FALSE, nChainIndex);
 800c92e:	79fb      	ldrb	r3, [r7, #7]
 800c930:	461a      	mov	r2, r3
 800c932:	2100      	movs	r1, #0
 800c934:	202e      	movs	r0, #46	; 0x2e
 800c936:	f000 fc95 	bl	800d264 <_Z21Adbms6948_Cmd_ExecCmdthh>

		/* Write the configuration register to the BMS IC */
		Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRCFGA, &nCfgDataChain[0], nChainIndex);
 800c93a:	79fa      	ldrb	r2, [r7, #7]
 800c93c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c940:	4619      	mov	r1, r3
 800c942:	2001      	movs	r0, #1
 800c944:	f000 fd0c 	bl	800d360 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>

		/* Read the configuration register from the BMS IC and compare with the written values*/
		anCmdList[0u] = ADBMS6948_CMD_RDCFGA;
 800c948:	2302      	movs	r3, #2
 800c94a:	833b      	strh	r3, [r7, #24]
		nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, nChainIndex);
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	f107 010c 	add.w	r1, r7, #12
 800c952:	f107 0018 	add.w	r0, r7, #24
 800c956:	2201      	movs	r2, #1
 800c958:	f000 f99a 	bl	800cc90 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800c95c:	4603      	mov	r3, r0
 800c95e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (nRet != E_OK) return nRet;
 800c962:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c966:	2b00      	cmp	r3, #0
 800c968:	d002      	beq.n	800c970 <_Z23Adbms6948_Cmn_InitChainh+0x23c>
 800c96a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c96e:	e0d6      	b.n	800cb1e <_Z23Adbms6948_Cmn_InitChainh+0x3ea>

		/*Calibration delay*/
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_CALIBRATION, nChainIndex);
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	4619      	mov	r1, r3
 800c974:	4843      	ldr	r0, [pc, #268]	; (800ca84 <_Z23Adbms6948_Cmn_InitChainh+0x350>)
 800c976:	f7ff fd84 	bl	800c482 <_Z18adi_pal_TimerDelaymh>
				nRet = E_NOT_OK;
				break;
			}
		}
#endif
if (E_OK == nRet)
 800c97a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d13a      	bne.n	800c9f8 <_Z23Adbms6948_Cmn_InitChainh+0x2c4>
{
	/* Copy the configuration data to local variable */
	Adbms6948_lPrepConfigBuff(ADBMS6948_CMD_RDCFGB, aRdCfgData, nCfgBData, &nCfgDataChain[0u], nChainIndex);
 800c982:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c986:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c98a:	f107 010c 	add.w	r1, r7, #12
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	9300      	str	r3, [sp, #0]
 800c992:	4603      	mov	r3, r0
 800c994:	2026      	movs	r0, #38	; 0x26
 800c996:	f000 fb5b 	bl	800d050 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>
	/* Write the configuration to the chain */
	Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRCFGB, &nCfgDataChain[0], nChainIndex);
 800c99a:	79fa      	ldrb	r2, [r7, #7]
 800c99c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	2024      	movs	r0, #36	; 0x24
 800c9a4:	f000 fcdc 	bl	800d360 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>
	/* Read the configuration register from the BMS IC and compare with the written values*/
	anCmdList[0u] = ADBMS6948_CMD_RDCFGB;
 800c9a8:	2326      	movs	r3, #38	; 0x26
 800c9aa:	833b      	strh	r3, [r7, #24]
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, nChainIndex);
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	f107 010c 	add.w	r1, r7, #12
 800c9b2:	f107 0018 	add.w	r0, r7, #24
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f000 f96a 	bl	800cc90 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c8:	2b05      	cmp	r3, #5
 800c9ca:	dc15      	bgt.n	800c9f8 <_Z23Adbms6948_Cmn_InitChainh+0x2c4>
	{
		if (aRdCfgData[0][i + ADBMS6948_CMD_DATA_LEN] != nCfgDataChain[i])
 800c9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800c9da:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800c9de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9e0:	440b      	add	r3, r1
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d003      	beq.n	800c9f0 <_Z23Adbms6948_Cmn_InitChainh+0x2bc>
		{
			nRet = E_NOT_OK;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 800c9ee:	e003      	b.n	800c9f8 <_Z23Adbms6948_Cmn_InitChainh+0x2c4>
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800c9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9f6:	e7e6      	b.n	800c9c6 <_Z23Adbms6948_Cmn_InitChainh+0x292>
		}
	}
}

if (E_OK == nRet)
 800c9f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d143      	bne.n	800ca88 <_Z23Adbms6948_Cmn_InitChainh+0x354>
{
	/* Copy the configuration data to local variable */
	Adbms6948_lPrepConfigBuff(ADBMS6948_CMD_RDCFGC,aRdCfgData,nCfgCData,&nCfgDataChain[0u],nChainIndex);
 800ca00:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800ca04:	f107 021c 	add.w	r2, r7, #28
 800ca08:	f107 010c 	add.w	r1, r7, #12
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	4603      	mov	r3, r0
 800ca12:	2082      	movs	r0, #130	; 0x82
 800ca14:	f000 fb1c 	bl	800d050 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>
	/* Write the configuration to the chain */
	Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRCFGC, &nCfgDataChain[0], nChainIndex);
 800ca18:	79fa      	ldrb	r2, [r7, #7]
 800ca1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca1e:	4619      	mov	r1, r3
 800ca20:	2081      	movs	r0, #129	; 0x81
 800ca22:	f000 fc9d 	bl	800d360 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>
	/* Read the configuration register from the BMS IC and compare with the written values*/
	anCmdList[0u] = ADBMS6948_CMD_RDCFGC;
 800ca26:	2382      	movs	r3, #130	; 0x82
 800ca28:	833b      	strh	r3, [r7, #24]
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, nChainIndex);
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
 800ca2c:	f107 010c 	add.w	r1, r7, #12
 800ca30:	f107 0018 	add.w	r0, r7, #24
 800ca34:	2201      	movs	r2, #1
 800ca36:	f000 f92b 	bl	800cc90 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800ca40:	2300      	movs	r3, #0
 800ca42:	647b      	str	r3, [r7, #68]	; 0x44
 800ca44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca46:	2b05      	cmp	r3, #5
 800ca48:	dc1e      	bgt.n	800ca88 <_Z23Adbms6948_Cmn_InitChainh+0x354>
	{
		if (aRdCfgData[0][i + ADBMS6948_CMD_DATA_LEN] != nCfgDataChain[i])
 800ca4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ca52:	4413      	add	r3, r2
 800ca54:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800ca58:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ca5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca5e:	440b      	add	r3, r1
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d003      	beq.n	800ca6e <_Z23Adbms6948_Cmn_InitChainh+0x33a>
		{
			nRet = E_NOT_OK;
 800ca66:	2301      	movs	r3, #1
 800ca68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 800ca6c:	e00c      	b.n	800ca88 <_Z23Adbms6948_Cmn_InitChainh+0x354>
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800ca6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca70:	3301      	adds	r3, #1
 800ca72:	647b      	str	r3, [r7, #68]	; 0x44
 800ca74:	e7e6      	b.n	800ca44 <_Z23Adbms6948_Cmn_InitChainh+0x310>
 800ca76:	bf00      	nop
 800ca78:	2000077c 	.word	0x2000077c
 800ca7c:	20000780 	.word	0x20000780
 800ca80:	20000768 	.word	0x20000768
 800ca84:	00030d40 	.word	0x00030d40
		}
	}
}

if (E_OK == nRet)
 800ca88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d116      	bne.n	800cabe <_Z23Adbms6948_Cmn_InitChainh+0x38a>
{
	if (TRUE == Adbms6948_Cmn_IsError(nChainIndex))
 800ca90:	79fb      	ldrb	r3, [r7, #7]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fd40 	bl	800c518 <_Z21Adbms6948_Cmn_IsErrorh>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	bf0c      	ite	eq
 800ca9e:	2301      	moveq	r3, #1
 800caa0:	2300      	movne	r3, #0
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00a      	beq.n	800cabe <_Z23Adbms6948_Cmn_InitChainh+0x38a>
	{
		nRet = E_NOT_OK;
 800caa8:	2301      	movs	r3, #1
 800caaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		/* Platform error. */
		Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID,
 800caae:	4b1e      	ldr	r3, [pc, #120]	; (800cb28 <_Z23Adbms6948_Cmn_InitChainh+0x3f4>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	895b      	ldrh	r3, [r3, #10]
 800cab6:	2101      	movs	r1, #1
 800cab8:	4618      	mov	r0, r3
 800caba:	f7ff fd1b 	bl	800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
				ADBMS6948_RUNTIME_E_STATUS_FAILED);
	}
}
	}
	if (E_OK == nRet)
 800cabe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d129      	bne.n	800cb1a <_Z23Adbms6948_Cmn_InitChainh+0x3e6>
	{
		/* Update the state information */
		Adbms6948_aoChainStateInfo[nChainIndex].eChainState = ADBMS6948_ST_CHAIN_IDLE;
 800cac6:	79fa      	ldrb	r2, [r7, #7]
 800cac8:	4918      	ldr	r1, [pc, #96]	; (800cb2c <_Z23Adbms6948_Cmn_InitChainh+0x3f8>)
 800caca:	4613      	mov	r3, r2
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	4413      	add	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	440b      	add	r3, r1
 800cad4:	3310      	adds	r3, #16
 800cad6:	2200      	movs	r2, #0
 800cad8:	701a      	strb	r2, [r3, #0]
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800cada:	4b15      	ldr	r3, [pc, #84]	; (800cb30 <_Z23Adbms6948_Cmn_InitChainh+0x3fc>)
 800cadc:	6819      	ldr	r1, [r3, #0]
 800cade:	79fa      	ldrb	r2, [r7, #7]
 800cae0:	4613      	mov	r3, r2
 800cae2:	00db      	lsls	r3, r3, #3
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	440b      	add	r3, r1
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800caea:	79fa      	ldrb	r2, [r7, #7]
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800caec:	7898      	ldrb	r0, [r3, #2]
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800caee:	490f      	ldr	r1, [pc, #60]	; (800cb2c <_Z23Adbms6948_Cmn_InitChainh+0x3f8>)
 800caf0:	4613      	mov	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	440b      	add	r3, r1
 800cafa:	3305      	adds	r3, #5
 800cafc:	4602      	mov	r2, r0
 800cafe:	701a      	strb	r2, [r3, #0]
		Adbms6948_aoChainStateInfo[nChainIndex].bFirstWakeup = FALSE;
 800cb00:	79fa      	ldrb	r2, [r7, #7]
 800cb02:	490a      	ldr	r1, [pc, #40]	; (800cb2c <_Z23Adbms6948_Cmn_InitChainh+0x3f8>)
 800cb04:	4613      	mov	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	440b      	add	r3, r1
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
		Adbms6948_lInitMaxCellGrps(nChainIndex);
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 fa2f 	bl	800cf78 <_ZL26Adbms6948_lInitMaxCellGrpsh>
	}

	return (nRet);
 800cb1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f

}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3750      	adds	r7, #80	; 0x50
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	2000077c 	.word	0x2000077c
 800cb2c:	20000768 	.word	0x20000768
 800cb30:	20000780 	.word	0x20000780

0800cb34 <_Z24Adbms6948_discharge_cellt>:
	return (nRet);

}

Adbms6948_ReturnType Adbms6948_discharge_cell(uint16_t DischargedCell)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08a      	sub	sp, #40	; 0x28
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	80fb      	strh	r3, [r7, #6]

	uint8_t  aRdCfgData[ADBMS6948_NUMOF_REGGRP_ONE][ADBMS6948_CMD_DATA_LEN +
 800cb3e:	f107 0314 	add.w	r3, r7, #20
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	605a      	str	r2, [r3, #4]
 800cb48:	609a      	str	r2, [r3, #8]
													(ADBMS6948_REG_DATA_LEN_WITH_PEC *
															ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)] = {0u};
	uint8_t   nCfgDataChain[(ADBMS6948_REG_GRP_LEN)*ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN];
	//	uint8_t   nCfgBData[ADBMS6948_REG_GRP_LEN] = {0};
	uint16_t  anCmdList[ADBMS6948_NUMOF_REGGRP_ONE];
	Adbms6948_ReturnType  nRet = E_OK;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* balancing */
	nCfgDataChain[0] = ((DischargedCell & 0x0002)? 0xF0:0x00) | ((DischargedCell & 0x0001)? 0x0F:0x00);
 800cb50:	88fb      	ldrh	r3, [r7, #6]
 800cb52:	f003 0302 	and.w	r3, r3, #2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <_Z24Adbms6948_discharge_cellt+0x2c>
 800cb5a:	f06f 020f 	mvn.w	r2, #15
 800cb5e:	e000      	b.n	800cb62 <_Z24Adbms6948_discharge_cellt+0x2e>
 800cb60:	2200      	movs	r2, #0
 800cb62:	88fb      	ldrh	r3, [r7, #6]
 800cb64:	f003 0301 	and.w	r3, r3, #1
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <_Z24Adbms6948_discharge_cellt+0x3c>
 800cb6c:	230f      	movs	r3, #15
 800cb6e:	e000      	b.n	800cb72 <_Z24Adbms6948_discharge_cellt+0x3e>
 800cb70:	2300      	movs	r3, #0
 800cb72:	4313      	orrs	r3, r2
 800cb74:	b25b      	sxtb	r3, r3
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	733b      	strb	r3, [r7, #12]
	nCfgDataChain[1] = ((DischargedCell & 0x0008)? 0xF0:0x00) | ((DischargedCell & 0x0004)? 0x0F:0x00);
 800cb7a:	88fb      	ldrh	r3, [r7, #6]
 800cb7c:	f003 0308 	and.w	r3, r3, #8
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d002      	beq.n	800cb8a <_Z24Adbms6948_discharge_cellt+0x56>
 800cb84:	f06f 020f 	mvn.w	r2, #15
 800cb88:	e000      	b.n	800cb8c <_Z24Adbms6948_discharge_cellt+0x58>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	88fb      	ldrh	r3, [r7, #6]
 800cb8e:	f003 0304 	and.w	r3, r3, #4
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <_Z24Adbms6948_discharge_cellt+0x66>
 800cb96:	230f      	movs	r3, #15
 800cb98:	e000      	b.n	800cb9c <_Z24Adbms6948_discharge_cellt+0x68>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	b25b      	sxtb	r3, r3
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	737b      	strb	r3, [r7, #13]
	nCfgDataChain[2] = ((DischargedCell & 0x0020)? 0xF0:0x00) | ((DischargedCell & 0x0010)? 0x0F:0x00);
 800cba4:	88fb      	ldrh	r3, [r7, #6]
 800cba6:	f003 0320 	and.w	r3, r3, #32
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d002      	beq.n	800cbb4 <_Z24Adbms6948_discharge_cellt+0x80>
 800cbae:	f06f 020f 	mvn.w	r2, #15
 800cbb2:	e000      	b.n	800cbb6 <_Z24Adbms6948_discharge_cellt+0x82>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	88fb      	ldrh	r3, [r7, #6]
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <_Z24Adbms6948_discharge_cellt+0x90>
 800cbc0:	230f      	movs	r3, #15
 800cbc2:	e000      	b.n	800cbc6 <_Z24Adbms6948_discharge_cellt+0x92>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	b25b      	sxtb	r3, r3
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	73bb      	strb	r3, [r7, #14]
	nCfgDataChain[3] = ((DischargedCell & 0x0080)? 0xF0:0x00) | ((DischargedCell & 0x0040)? 0x0F:0x00);
 800cbce:	88fb      	ldrh	r3, [r7, #6]
 800cbd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <_Z24Adbms6948_discharge_cellt+0xaa>
 800cbd8:	f06f 020f 	mvn.w	r2, #15
 800cbdc:	e000      	b.n	800cbe0 <_Z24Adbms6948_discharge_cellt+0xac>
 800cbde:	2200      	movs	r2, #0
 800cbe0:	88fb      	ldrh	r3, [r7, #6]
 800cbe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <_Z24Adbms6948_discharge_cellt+0xba>
 800cbea:	230f      	movs	r3, #15
 800cbec:	e000      	b.n	800cbf0 <_Z24Adbms6948_discharge_cellt+0xbc>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	b25b      	sxtb	r3, r3
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	73fb      	strb	r3, [r7, #15]
	nCfgDataChain[4] = ((DischargedCell & 0x0200)? 0xF0:0x00) | ((DischargedCell & 0x0100)? 0x0F:0x00);
 800cbf8:	88fb      	ldrh	r3, [r7, #6]
 800cbfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d002      	beq.n	800cc08 <_Z24Adbms6948_discharge_cellt+0xd4>
 800cc02:	f06f 020f 	mvn.w	r2, #15
 800cc06:	e000      	b.n	800cc0a <_Z24Adbms6948_discharge_cellt+0xd6>
 800cc08:	2200      	movs	r2, #0
 800cc0a:	88fb      	ldrh	r3, [r7, #6]
 800cc0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d001      	beq.n	800cc18 <_Z24Adbms6948_discharge_cellt+0xe4>
 800cc14:	230f      	movs	r3, #15
 800cc16:	e000      	b.n	800cc1a <_Z24Adbms6948_discharge_cellt+0xe6>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	b25b      	sxtb	r3, r3
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	743b      	strb	r3, [r7, #16]
	nCfgDataChain[5] = 0;
 800cc22:	2300      	movs	r3, #0
 800cc24:	747b      	strb	r3, [r7, #17]

	/* Write the configuration to the chain */
	Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRPWMA, &nCfgDataChain[0], 0);
 800cc26:	f107 030c 	add.w	r3, r7, #12
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	2020      	movs	r0, #32
 800cc30:	f000 fb96 	bl	800d360 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>
	/* Read the configuration register from
	 * the BMS IC and compare with the written values*/
	anCmdList[0u] = ADBMS6948_CMD_RDPWMA;
 800cc34:	2322      	movs	r3, #34	; 0x22
 800cc36:	813b      	strh	r3, [r7, #8]
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, 0);
 800cc38:	f107 0114 	add.w	r1, r7, #20
 800cc3c:	f107 0008 	add.w	r0, r7, #8
 800cc40:	2300      	movs	r3, #0
 800cc42:	2201      	movs	r2, #1
 800cc44:	f000 f824 	bl	800cc90 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800cc4e:	2300      	movs	r3, #0
 800cc50:	623b      	str	r3, [r7, #32]
 800cc52:	6a3b      	ldr	r3, [r7, #32]
 800cc54:	2b05      	cmp	r3, #5
 800cc56:	dc15      	bgt.n	800cc84 <_Z24Adbms6948_discharge_cellt+0x150>
	{
		if (aRdCfgData[0][i + ADBMS6948_CMD_DATA_LEN] != nCfgDataChain[i])
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cc60:	4413      	add	r3, r2
 800cc62:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800cc66:	f107 010c 	add.w	r1, r7, #12
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	440b      	add	r3, r1
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d003      	beq.n	800cc7c <_Z24Adbms6948_discharge_cellt+0x148>
		{
			nRet = E_NOT_OK;
 800cc74:	2301      	movs	r3, #1
 800cc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800cc7a:	e003      	b.n	800cc84 <_Z24Adbms6948_discharge_cellt+0x150>
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	623b      	str	r3, [r7, #32]
 800cc82:	e7e6      	b.n	800cc52 <_Z24Adbms6948_discharge_cellt+0x11e>
		}
	}
	return (nRet);
 800cc84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3728      	adds	r7, #40	; 0x28
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>:
/*****************************************************************************/
Adbms6948_ReturnType  Adbms6948_Cmn_ReadRegGroup(uint16_t       *pnCmdLst,
		uint8_t        pRxBuff[][ADBMS6948_MAX_FRAME_SIZE],
		uint8_t        nCmdLstLen,
		const uint8_t  knChainID)
{
 800cc90:	b590      	push	{r4, r7, lr}
 800cc92:	b09f      	sub	sp, #124	; 0x7c
 800cc94:	af02      	add	r7, sp, #8
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	460b      	mov	r3, r1
 800cca0:	71fb      	strb	r3, [r7, #7]
 800cca2:	4613      	mov	r3, r2
 800cca4:	71bb      	strb	r3, [r7, #6]
	Adbms6948_ReturnType  nRet = E_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t  aRdDataBuff[ADBMS6948_NUMOF_REGGRP_SIX][ADBMS6948_CMD_DATA_LEN + (ADBMS6948_REG_DATA_LEN_WITH_PEC * ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)] = {0u};
 800ccac:	f107 0314 	add.w	r3, r7, #20
 800ccb0:	2248      	movs	r2, #72	; 0x48
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f001 fd0d 	bl	800e6d4 <memset>
	uint32_t nDataCfg;
	uint32_t nDataBufLen;
	uint16_t nDevStartIdx, nDevDataIdx;
	boolean  bValidData;

	nDataBufLen = (uint32_t)((uint32_t)ADBMS6948_CMD_DATA_LEN + (uint32_t)(Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices * (uint32_t)ADBMS6948_REG_DATA_LEN_WITH_PEC));
 800ccba:	79ba      	ldrb	r2, [r7, #6]
 800ccbc:	4953      	ldr	r1, [pc, #332]	; (800ce0c <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x17c>)
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	440b      	add	r3, r1
 800ccc8:	3305      	adds	r3, #5
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	3304      	adds	r3, #4
 800ccd0:	66bb      	str	r3, [r7, #104]	; 0x68
	nDataCfg = (((uint32_t)nCmdLstLen << 16u) | (nDataBufLen));
 800ccd2:	79fb      	ldrb	r3, [r7, #7]
 800ccd4:	041b      	lsls	r3, r3, #16
 800ccd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	667b      	str	r3, [r7, #100]	; 0x64

	/* Read the configuration of the chain */
	Adbms6948_Cmd_ExecuteCmdRD(pnCmdLst, aRdDataBuff, nDataCfg, FALSE, knChainID);
 800ccdc:	f107 0114 	add.w	r1, r7, #20
 800cce0:	79bb      	ldrb	r3, [r7, #6]
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	2300      	movs	r3, #0
 800cce6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f000 fbf5 	bl	800d4d8 <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh>

	for (nGrpIdx = 0u; nGrpIdx < nCmdLstLen; nGrpIdx++) {
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800ccf4:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800ccf8:	79fb      	ldrb	r3, [r7, #7]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d27f      	bcs.n	800cdfe <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x16e>
		for (nDevIdx = 0u;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				nDevIdx < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800cd04:	79ba      	ldrb	r2, [r7, #6]
 800cd06:	4941      	ldr	r1, [pc, #260]	; (800ce0c <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x17c>)
 800cd08:	4613      	mov	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	440b      	add	r3, r1
 800cd12:	3305      	adds	r3, #5
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d269      	bcs.n	800cdf2 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x162>
				nDevIdx++)
		{
			nDevStartIdx = (uint16_t)((uint16_t)ADBMS6948_CMD_DATA_LEN + (nDevIdx * (uint16_t)ADBMS6948_REG_DATA_LEN_WITH_PEC));
 800cd1e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	3304      	adds	r3, #4
 800cd2a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			bValidData = Adbms6948_Cmn_ValidatePEC((uint8_t*)&aRdDataBuff[nGrpIdx][nDevStartIdx],ADBMS6948_REG_DATA_LEN_WITH_PEC, nDevIdx, knChainID);
 800cd2e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800cd32:	f8b7 0062 	ldrh.w	r0, [r7, #98]	; 0x62
 800cd36:	f107 0114 	add.w	r1, r7, #20
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4403      	add	r3, r0
 800cd44:	18c8      	adds	r0, r1, r3
 800cd46:	79bb      	ldrb	r3, [r7, #6]
 800cd48:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800cd4c:	2108      	movs	r1, #8
 800cd4e:	f7ff fbf3 	bl	800c538 <_Z25Adbms6948_Cmn_ValidatePECPhhhh>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIdx])
 800cd58:	79ba      	ldrb	r2, [r7, #6]
 800cd5a:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800cd5e:	482b      	ldr	r0, [pc, #172]	; (800ce0c <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x17c>)
 800cd60:	4613      	mov	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4403      	add	r3, r0
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3311      	adds	r3, #17
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d138      	bne.n	800cde6 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x156>
			{
				if (TRUE == bValidData)
 800cd74:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d12e      	bne.n	800cdda <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x14a>
				{
					for (nRegGrpDataLen = 0u; nRegGrpDataLen < ADBMS6948_REG_GRP_LEN; nRegGrpDataLen++)
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800cd82:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800cd86:	2b05      	cmp	r3, #5
 800cd88:	d82d      	bhi.n	800cde6 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x156>
					{
						nDevDataIdx = nDevStartIdx + nRegGrpDataLen;
 800cd8a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cd94:	4413      	add	r3, r2
 800cd96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
						pRxBuff[nGrpIdx][nDevDataIdx] = aRdDataBuff[nGrpIdx][nDevDataIdx];
 800cd9a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800cd9e:	f8b7 405e 	ldrh.w	r4, [r7, #94]	; 0x5e
 800cda2:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 800cda6:	460b      	mov	r3, r1
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	440b      	add	r3, r1
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	4619      	mov	r1, r3
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	1858      	adds	r0, r3, r1
 800cdb4:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800cdb8:	4613      	mov	r3, r2
 800cdba:	005b      	lsls	r3, r3, #1
 800cdbc:	4413      	add	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cdc4:	4413      	add	r3, r2
 800cdc6:	4423      	add	r3, r4
 800cdc8:	3b5c      	subs	r3, #92	; 0x5c
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	5443      	strb	r3, [r0, r1]
					for (nRegGrpDataLen = 0u; nRegGrpDataLen < ADBMS6948_REG_GRP_LEN; nRegGrpDataLen++)
 800cdce:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800cdd8:	e7d3      	b.n	800cd82 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0xf2>
					}
				}
				else
				{
					nRet |= E_NOT_OK;
 800cdda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cdde:	f043 0301 	orr.w	r3, r3, #1
 800cde2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		for (nDevIdx = 0u;
 800cde6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800cdea:	3301      	adds	r3, #1
 800cdec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800cdf0:	e788      	b.n	800cd04 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x74>
	for (nGrpIdx = 0u; nGrpIdx < nCmdLstLen; nGrpIdx++) {
 800cdf2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800cdfc:	e77a      	b.n	800ccf4 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x64>
				}
			}
		}
	}
	return(nRet);
 800cdfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3774      	adds	r7, #116	; 0x74
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd90      	pop	{r4, r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20000768 	.word	0x20000768

0800ce10 <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh>:
		uint16_t        nCmd,
		uint8_t         *pRxBuf,
		uint8_t         nDataLenBytes,
		const uint8_t   knChainID
)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	6039      	str	r1, [r7, #0]
 800ce18:	4611      	mov	r1, r2
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	80fb      	strh	r3, [r7, #6]
 800ce20:	460b      	mov	r3, r1
 800ce22:	717b      	strb	r3, [r7, #5]
 800ce24:	4613      	mov	r3, r2
 800ce26:	713b      	strb	r3, [r7, #4]
	Adbms6948_ReturnType  nRet = E_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	73fb      	strb	r3, [r7, #15]
	uint8_t  nDevIdx;
	nDevIdx = 0;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	73bb      	strb	r3, [r7, #14]
	boolean  bValidData;

	/* Read all the register groups from ADBMS6948 */
	Adbms6948_Cmd_ExecuteCmdRDAll(pRxBuf, nCmd, nDataLenBytes, FALSE, knChainID);
 800ce30:	797a      	ldrb	r2, [r7, #5]
 800ce32:	88f9      	ldrh	r1, [r7, #6]
 800ce34:	793b      	ldrb	r3, [r7, #4]
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	6838      	ldr	r0, [r7, #0]
 800ce3c:	f000 fc8a 	bl	800d754 <_Z29Adbms6948_Cmd_ExecuteCmdRDAllPhthhh>
	bValidData = Adbms6948_Cmn_ValidatePEC(pRxBuf, nDataLenBytes, nDevIdx, knChainID);
 800ce40:	793b      	ldrb	r3, [r7, #4]
 800ce42:	7bba      	ldrb	r2, [r7, #14]
 800ce44:	7979      	ldrb	r1, [r7, #5]
 800ce46:	6838      	ldr	r0, [r7, #0]
 800ce48:	f7ff fb76 	bl	800c538 <_Z25Adbms6948_Cmn_ValidatePECPhhhh>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	737b      	strb	r3, [r7, #13]
	if (TRUE == bValidData)
 800ce50:	7b7b      	ldrb	r3, [r7, #13]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d102      	bne.n	800ce5c <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh+0x4c>
	{
		nRet = E_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
 800ce5a:	e001      	b.n	800ce60 <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh+0x50>
	}
	else
	{
		nRet = E_NOT_OK;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	73fb      	strb	r3, [r7, #15]
	}

	return(nRet);
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>:
(
		uint16_t       nCommand,
		boolean       bIncrementCmdCount,
		const uint8_t   knChainID
)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	4603      	mov	r3, r0
 800ce72:	80fb      	strh	r3, [r7, #6]
 800ce74:	460b      	mov	r3, r1
 800ce76:	717b      	strb	r3, [r7, #5]
 800ce78:	4613      	mov	r3, r2
 800ce7a:	713b      	strb	r3, [r7, #4]
	Adbms6948_Cmd_ExecCmd(nCommand, bIncrementCmdCount, knChainID);
 800ce7c:	793a      	ldrb	r2, [r7, #4]
 800ce7e:	7979      	ldrb	r1, [r7, #5]
 800ce80:	88fb      	ldrh	r3, [r7, #6]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f000 f9ee 	bl	800d264 <_Z21Adbms6948_Cmd_ExecCmdthh>
}
 800ce88:	bf00      	nop
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType>:
/*****************************************************************************/
boolean  Adbms6948_Cmn_IsInvalidSnapSelType
(
		Adbms6948_SnapSelType      eSnapSel
)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	71fb      	strb	r3, [r7, #7]
	boolean  bRet;

	switch(eSnapSel)
 800ce9a:	79fb      	ldrb	r3, [r7, #7]
 800ce9c:	2b03      	cmp	r3, #3
 800ce9e:	d802      	bhi.n	800cea6 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType+0x16>
	{
	case ADBMS6948_SEND_NONE:
	case ADBMS6948_SEND_SNAP:
	case ADBMS6948_SEND_UNSNAP:
	case ADBMS6948_SEND_BOTH:
		bRet = FALSE;
 800cea0:	2300      	movs	r3, #0
 800cea2:	73fb      	strb	r3, [r7, #15]
		break;
 800cea4:	e002      	b.n	800ceac <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType+0x1c>

	default:
		bRet = TRUE;
 800cea6:	2301      	movs	r3, #1
 800cea8:	73fb      	strb	r3, [r7, #15]
		break;
 800ceaa:	bf00      	nop
	}
	return(bRet);
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3714      	adds	r7, #20
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bc80      	pop	{r7}
 800ceb6:	4770      	bx	lr

0800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>:
    @return        E_OK:     Success \n
                   E_NOT_OK:   Failure \n
 */
Adbms6948_ReturnType Adbms6948_Cmn_UpdateChainStatus(Adbms6948_ChainStateType eReqSt,
		const uint8_t            knChainID)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	4603      	mov	r3, r0
 800cec0:	460a      	mov	r2, r1
 800cec2:	71fb      	strb	r3, [r7, #7]
 800cec4:	4613      	mov	r3, r2
 800cec6:	71bb      	strb	r3, [r7, #6]
	Adbms6948_ReturnType nRet = E_OK;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73fb      	strb	r3, [r7, #15]

	Adbms6948_Cmn_EnterCriticalSection();
 800cecc:	f000 f828 	bl	800cf20 <_Z34Adbms6948_Cmn_EnterCriticalSectionv>
	/* Get the current chain state. */
	if (eReqSt == Adbms6948_aoChainStateInfo[knChainID].eChainState)
 800ced0:	79ba      	ldrb	r2, [r7, #6]
 800ced2:	4912      	ldr	r1, [pc, #72]	; (800cf1c <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x64>)
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	440b      	add	r3, r1
 800cede:	3310      	adds	r3, #16
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	79fa      	ldrb	r2, [r7, #7]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	bf0c      	ite	eq
 800ceea:	2301      	moveq	r3, #1
 800ceec:	2300      	movne	r3, #0
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x42>
	{
		/* It is already in requested state */
		nRet = E_NOT_OK;
 800cef4:	2301      	movs	r3, #1
 800cef6:	73fb      	strb	r3, [r7, #15]
 800cef8:	e009      	b.n	800cf0e <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x56>
	}
	else
	{
		/* Update the chain state to requested state. */
		Adbms6948_aoChainStateInfo[knChainID].eChainState = eReqSt;
 800cefa:	79ba      	ldrb	r2, [r7, #6]
 800cefc:	4907      	ldr	r1, [pc, #28]	; (800cf1c <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x64>)
 800cefe:	4613      	mov	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	440b      	add	r3, r1
 800cf08:	3310      	adds	r3, #16
 800cf0a:	79fa      	ldrb	r2, [r7, #7]
 800cf0c:	701a      	strb	r2, [r3, #0]
	}
	Adbms6948_Cmn_ExitCriticalSection();
 800cf0e:	f000 f80d 	bl	800cf2c <_Z33Adbms6948_Cmn_ExitCriticalSectionv>
	return nRet;
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	20000768 	.word	0x20000768

0800cf20 <_Z34Adbms6948_Cmn_EnterCriticalSectionv>:
    @brief         This function is used to enter a critical section

    @return        None
 */
void Adbms6948_Cmn_EnterCriticalSection(void)
{
 800cf20:	b480      	push	{r7}
 800cf22:	af00      	add	r7, sp, #0
	ADI_PAL_CRITICAL_SECTION_START;
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bc80      	pop	{r7}
 800cf2a:	4770      	bx	lr

0800cf2c <_Z33Adbms6948_Cmn_ExitCriticalSectionv>:
    @brief         This function is used to exit a critical section

    @return        None
 */
void Adbms6948_Cmn_ExitCriticalSection(void)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	af00      	add	r7, sp, #0
	ADI_PAL_CRITICAL_SECTION_STOP;
}
 800cf30:	bf00      	nop
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bc80      	pop	{r7}
 800cf36:	4770      	bx	lr

0800cf38 <_Z20Adbms6948_Cmn_MemsetPhhm>:
    @return        None
 */
void Adbms6948_Cmn_Memset(uint8_t   *pAddr,
		uint8_t   nVal,
		uint32_t  nSize)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	460b      	mov	r3, r1
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	72fb      	strb	r3, [r7, #11]
	ADI_PAL_MEMSET(pAddr,nVal,nSize);
 800cf46:	7afb      	ldrb	r3, [r7, #11]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7ff f941 	bl	800c1d4 <_Z14adi_pal_MemsetPhhm>
}
 800cf52:	bf00      	nop
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <_Z20Adbms6948_Cmn_MemcpyPhS_m>:
    @return        None
 */
void Adbms6948_Cmn_Memcpy(uint8_t   *pDstAddr,
		uint8_t   *pSrcAddr,
		uint32_t  nSize)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b084      	sub	sp, #16
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	60f8      	str	r0, [r7, #12]
 800cf62:	60b9      	str	r1, [r7, #8]
 800cf64:	607a      	str	r2, [r7, #4]
	ADI_PAL_MEMCPY(pDstAddr,pSrcAddr,nSize);
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	68b9      	ldr	r1, [r7, #8]
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7ff f943 	bl	800c1f6 <_Z14adi_pal_MemcpyPhS_m>
}
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}

0800cf78 <_ZL26Adbms6948_lInitMaxCellGrpsh>:
                          operation is to be performed.
              @range: 0 to (ADBMS6948_NO_OF_DAISY_CHAIN-1)
              @resolution: NA
 */
static void Adbms6948_lInitMaxCellGrps(const uint8_t knChainID)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	4603      	mov	r3, r0
 800cf80:	71fb      	strb	r3, [r7, #7]
	uint8_t nRegGrpsToRead, nDevIdx, nMaxCellsPerDev = 0u;
 800cf82:	2300      	movs	r3, #0
 800cf84:	737b      	strb	r3, [r7, #13]

	/* Get the maximum count of cells on a single device */
	for (nDevIdx = 0u; nDevIdx < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices; nDevIdx++)
 800cf86:	2300      	movs	r3, #0
 800cf88:	73bb      	strb	r3, [r7, #14]
 800cf8a:	79fa      	ldrb	r2, [r7, #7]
 800cf8c:	492d      	ldr	r1, [pc, #180]	; (800d044 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xcc>)
 800cf8e:	4613      	mov	r3, r2
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4413      	add	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	440b      	add	r3, r1
 800cf98:	3305      	adds	r3, #5
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	7bba      	ldrb	r2, [r7, #14]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d22c      	bcs.n	800cffc <_ZL26Adbms6948_lInitMaxCellGrpsh+0x84>
	{
		if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIdx])
 800cfa2:	79fa      	ldrb	r2, [r7, #7]
 800cfa4:	7bb9      	ldrb	r1, [r7, #14]
 800cfa6:	4827      	ldr	r0, [pc, #156]	; (800d044 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xcc>)
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4403      	add	r3, r0
 800cfb2:	440b      	add	r3, r1
 800cfb4:	3311      	adds	r3, #17
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d11b      	bne.n	800cff4 <_ZL26Adbms6948_lInitMaxCellGrpsh+0x7c>
		{
			if (nMaxCellsPerDev < Adbms6948_pDaisyChainCfgInput[knChainID].Adbms6948_pNoOfCellsPerDevice[nDevIdx])
 800cfbc:	4b22      	ldr	r3, [pc, #136]	; (800d048 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd0>)
 800cfbe:	6819      	ldr	r1, [r3, #0]
 800cfc0:	79fa      	ldrb	r2, [r7, #7]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	1a9b      	subs	r3, r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	440b      	add	r3, r1
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	7bbb      	ldrb	r3, [r7, #14]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	7b7a      	ldrb	r2, [r7, #13]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d20c      	bcs.n	800cff4 <_ZL26Adbms6948_lInitMaxCellGrpsh+0x7c>
			{
				nMaxCellsPerDev =  Adbms6948_pDaisyChainCfgInput[knChainID].Adbms6948_pNoOfCellsPerDevice[nDevIdx];
 800cfda:	4b1b      	ldr	r3, [pc, #108]	; (800d048 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd0>)
 800cfdc:	6819      	ldr	r1, [r3, #0]
 800cfde:	79fa      	ldrb	r2, [r7, #7]
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	1a9b      	subs	r3, r3, r2
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	440b      	add	r3, r1
 800cfea:	685a      	ldr	r2, [r3, #4]
 800cfec:	7bbb      	ldrb	r3, [r7, #14]
 800cfee:	4413      	add	r3, r2
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	737b      	strb	r3, [r7, #13]
	for (nDevIdx = 0u; nDevIdx < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices; nDevIdx++)
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	3301      	adds	r3, #1
 800cff8:	73bb      	strb	r3, [r7, #14]
 800cffa:	e7c6      	b.n	800cf8a <_ZL26Adbms6948_lInitMaxCellGrpsh+0x12>
			}
		}
	}

	nRegGrpsToRead = (uint8_t)(nMaxCellsPerDev/3u);
 800cffc:	7b7b      	ldrb	r3, [r7, #13]
 800cffe:	4a13      	ldr	r2, [pc, #76]	; (800d04c <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd4>)
 800d000:	fba2 2303 	umull	r2, r3, r2, r3
 800d004:	085b      	lsrs	r3, r3, #1
 800d006:	73fb      	strb	r3, [r7, #15]
	if ((nMaxCellsPerDev % 3u) != 0u)
 800d008:	7b7a      	ldrb	r2, [r7, #13]
 800d00a:	4b10      	ldr	r3, [pc, #64]	; (800d04c <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd4>)
 800d00c:	fba3 1302 	umull	r1, r3, r3, r2
 800d010:	0859      	lsrs	r1, r3, #1
 800d012:	460b      	mov	r3, r1
 800d014:	005b      	lsls	r3, r3, #1
 800d016:	440b      	add	r3, r1
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xae>
	{
		nRegGrpsToRead++;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
 800d022:	3301      	adds	r3, #1
 800d024:	73fb      	strb	r3, [r7, #15]
	}

	/* Update the Chain State Information */
	Adbms6948_aoChainStateInfo[knChainID].nMaxCellRegGrps = nRegGrpsToRead;
 800d026:	79fa      	ldrb	r2, [r7, #7]
 800d028:	4906      	ldr	r1, [pc, #24]	; (800d044 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xcc>)
 800d02a:	4613      	mov	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	440b      	add	r3, r1
 800d034:	3302      	adds	r3, #2
 800d036:	7bfa      	ldrb	r2, [r7, #15]
 800d038:	701a      	strb	r2, [r3, #0]
}
 800d03a:	bf00      	nop
 800d03c:	3714      	adds	r7, #20
 800d03e:	46bd      	mov	sp, r7
 800d040:	bc80      	pop	{r7}
 800d042:	4770      	bx	lr
 800d044:	20000768 	.word	0x20000768
 800d048:	20000780 	.word	0x20000780
 800d04c:	aaaaaaab 	.word	0xaaaaaaab

0800d050 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>:
static void  Adbms6948_lPrepConfigBuff(uint16_t nCmd,
		uint8_t  aRdCfgData[][ADBMS6948_MAX_FRAME_SIZE],
		uint8_t  *pCfgData,
		uint8_t  *pCfgDataChain,
		uint8_t  nChainIndex)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af00      	add	r7, sp, #0
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	603b      	str	r3, [r7, #0]
 800d05c:	4603      	mov	r3, r0
 800d05e:	81fb      	strh	r3, [r7, #14]
	uint8_t nDeviceIndex,nNoOfDevices;

	(void)Adbms6948_Cmn_Memset(pCfgDataChain,0, (
 800d060:	2206      	movs	r2, #6
 800d062:	2100      	movs	r1, #0
 800d064:	6838      	ldr	r0, [r7, #0]
 800d066:	f7ff ff67 	bl	800cf38 <_Z20Adbms6948_Cmn_MemsetPhhm>
			ADBMS6948_REG_GRP_LEN * ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN));

	/* number of devices in chain */
	nNoOfDevices = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800d06a:	4b13      	ldr	r3, [pc, #76]	; (800d0b8 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h+0x68>)
 800d06c:	6819      	ldr	r1, [r3, #0]
 800d06e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d072:	4613      	mov	r3, r2
 800d074:	00db      	lsls	r3, r3, #3
 800d076:	1a9b      	subs	r3, r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	440b      	add	r3, r1
 800d07c:	789b      	ldrb	r3, [r3, #2]
 800d07e:	75bb      	strb	r3, [r7, #22]

	/* For all devices in chain accumulate the configuration data */
	for (nDeviceIndex = 0u; nDeviceIndex < nNoOfDevices ; nDeviceIndex++) {
 800d080:	2300      	movs	r3, #0
 800d082:	75fb      	strb	r3, [r7, #23]
 800d084:	7dfa      	ldrb	r2, [r7, #23]
 800d086:	7dbb      	ldrb	r3, [r7, #22]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d210      	bcs.n	800d0ae <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h+0x5e>
		(void)Adbms6948_Cmn_Memcpy(&pCfgDataChain[nDeviceIndex*ADBMS6948_REG_GRP_LEN],
 800d08c:	7dfa      	ldrb	r2, [r7, #23]
 800d08e:	4613      	mov	r3, r2
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	4413      	add	r3, r2
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	461a      	mov	r2, r3
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	4413      	add	r3, r2
 800d09c:	2206      	movs	r2, #6
 800d09e:	6879      	ldr	r1, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff ff5a 	bl	800cf5a <_Z20Adbms6948_Cmn_MemcpyPhS_m>
	for (nDeviceIndex = 0u; nDeviceIndex < nNoOfDevices ; nDeviceIndex++) {
 800d0a6:	7dfb      	ldrb	r3, [r7, #23]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	75fb      	strb	r3, [r7, #23]
 800d0ac:	e7ea      	b.n	800d084 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h+0x34>
				pCfgData, ADBMS6948_REG_GRP_LEN);
	}
}
 800d0ae:	bf00      	nop
 800d0b0:	3718      	adds	r7, #24
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20000780 	.word	0x20000780

0800d0bc <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType>:
    @return        E_OK: Success  \n
                   E_NOT_OK: Failed \n
 */
/*****************************************************************************/
Adbms6948_ReturnType  Adbms6948_Int_Init(const Adbms6948_CfgType 	*pkConfig)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  Adbms6948_ReturnType  nRet = E_NOT_OK;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	73fb      	strb	r3, [r7, #15]
  uint8_t               nChainIndex;

  if(ADBMS6948_ST_INIT == Adbms6948_eState)
 800d0c8:	4b29      	ldr	r3, [pc, #164]	; (800d170 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb4>)
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d04a      	beq.n	800d166 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
    #if (ADBMS6948_DEVELOPMENT_MODE_EN == TRUE)
    Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID,
    ADBMS6948_INIT_ID, ADBMS6948_E_MODULESTATE);
    #endif
  }
  else if(NULL_PTR == pkConfig)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d047      	beq.n	800d166 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
    #if (ADBMS6948_DEVELOPMENT_MODE_EN == TRUE)
    Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID,
    ADBMS6948_INIT_ID, ADBMS6948_E_PARAM_POINTER);
    #endif
  }
  else if (TRUE == Adbms6948_lIsInvalidConfig(pkConfig))
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f852 	bl	800d180 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	bf0c      	ite	eq
 800d0e2:	2301      	moveq	r3, #1
 800d0e4:	2300      	movne	r3, #0
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d13c      	bne.n	800d166 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
    #endif
  }
  else
  {
		/* No error. Set status to 'E_OK'. */
		nRet = E_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]
		/*Store configuration address. */
		Adbms6948_pConfig = pkConfig;
 800d0f0:	4a20      	ldr	r2, [pc, #128]	; (800d174 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb8>)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6013      	str	r3, [r2, #0]
		Adbms6948_pDaisyChainCfgInput=Adbms6948_pConfig->Adbms6948_pDaisyChainCfg;
 800d0f6:	4b1f      	ldr	r3, [pc, #124]	; (800d174 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb8>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a1e      	ldr	r2, [pc, #120]	; (800d178 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xbc>)
 800d0fe:	6013      	str	r3, [r2, #0]

		/* Initialize all chain for which initialization is enabled. */
		for (nChainIndex = 0u; nChainIndex < (uint8_t)ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d100:	2300      	movs	r3, #0
 800d102:	73bb      	strb	r3, [r7, #14]
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d120      	bne.n	800d14c <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x90>
		{
			/* Clear the state information and initialize the number of devices in the state for the chain */
			(void) Adbms6948_Cmn_Memset((uint8_t*)&Adbms6948_aoChainStateInfo[nChainIndex],
 800d10a:	7bba      	ldrb	r2, [r7, #14]
 800d10c:	4613      	mov	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4413      	add	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4a19      	ldr	r2, [pc, #100]	; (800d17c <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xc0>)
 800d116:	4413      	add	r3, r2
 800d118:	2214      	movs	r2, #20
 800d11a:	2100      	movs	r1, #0
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff ff0b 	bl	800cf38 <_Z20Adbms6948_Cmn_MemsetPhhm>
			                            0, sizeof(Adbms6948_ChainStateInfoType));

			/* Prepare chain of Adbms6948 and non-Adbms6948 devices */
			Adbms6948_lPrepareChain(nChainIndex);
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	4618      	mov	r0, r3
 800d126:	f000 f86f 	bl	800d208 <_ZL23Adbms6948_lPrepareChainh>

			/* Initialization is enabled for the chain.*/
			nRet |= Adbms6948_Cmn_InitChain(nChainIndex);
 800d12a:	7bbb      	ldrb	r3, [r7, #14]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7ff fb01 	bl	800c734 <_Z23Adbms6948_Cmn_InitChainh>
 800d132:	4603      	mov	r3, r0
 800d134:	461a      	mov	r2, r3
 800d136:	7bfb      	ldrb	r3, [r7, #15]
 800d138:	4313      	orrs	r3, r2
 800d13a:	73fb      	strb	r3, [r7, #15]
			if (E_OK != nRet)
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d103      	bne.n	800d14a <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x8e>
		for (nChainIndex = 0u; nChainIndex < (uint8_t)ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d142:	7bbb      	ldrb	r3, [r7, #14]
 800d144:	3301      	adds	r3, #1
 800d146:	73bb      	strb	r3, [r7, #14]
 800d148:	e7dc      	b.n	800d104 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x48>
			{
				/* Chain initialization is failed for the chain. Stop the service. */
				break;
 800d14a:	bf00      	nop
			}

		}

		if (E_OK == nRet)
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d103      	bne.n	800d15a <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x9e>
		{
			/* All the chains initialized successfully. Set module state to initialized. */
			Adbms6948_eState = ADBMS6948_ST_INIT;
 800d152:	4b07      	ldr	r3, [pc, #28]	; (800d170 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb4>)
 800d154:	2201      	movs	r2, #1
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	e005      	b.n	800d166 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
		}
		else
		{
			/* Initialization service failed. */
			Adbms6948_pConfig = NULL_PTR;
 800d15a:	4b06      	ldr	r3, [pc, #24]	; (800d174 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb8>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]
			Adbms6948_pDaisyChainCfgInput = NULL_PTR;
 800d160:	4b05      	ldr	r3, [pc, #20]	; (800d178 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xbc>)
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]
		}
	}
  return (nRet);
 800d166:	7bfb      	ldrb	r3, [r7, #15]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	20000764 	.word	0x20000764
 800d174:	2000077c 	.word	0x2000077c
 800d178:	20000780 	.word	0x20000780
 800d17c:	20000768 	.word	0x20000768

0800d180 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType>:
*/
static boolean  Adbms6948_lIsInvalidConfig
(
    const Adbms6948_CfgType *   pConfig
)
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
    boolean  bRet = FALSE;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]
    uint8_t  nChainIndex,nDeviceIndex,nAdbms6948Devices;

    for (nChainIndex = 0u; nChainIndex < ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d18c:	2300      	movs	r3, #0
 800d18e:	73bb      	strb	r3, [r7, #14]
 800d190:	7bbb      	ldrb	r3, [r7, #14]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d132      	bne.n	800d1fc <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x7c>
    {
    	nAdbms6948Devices = pConfig->Adbms6948_pDaisyChainCfg[nChainIndex].Adbms6948_nNoOfDevices;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6819      	ldr	r1, [r3, #0]
 800d19a:	7bba      	ldrb	r2, [r7, #14]
 800d19c:	4613      	mov	r3, r2
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	1a9b      	subs	r3, r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	440b      	add	r3, r1
 800d1a6:	789b      	ldrb	r3, [r3, #2]
 800d1a8:	733b      	strb	r3, [r7, #12]

        if (nAdbms6948Devices > ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)
 800d1aa:	7b3b      	ldrb	r3, [r7, #12]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d902      	bls.n	800d1b6 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x36>
        {
            bRet = TRUE;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	73fb      	strb	r3, [r7, #15]
 800d1b4:	e01a      	b.n	800d1ec <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x6c>
        }
        else
        {
            for (nDeviceIndex=0u;nDeviceIndex<nAdbms6948Devices;nDeviceIndex++)
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	737b      	strb	r3, [r7, #13]
 800d1ba:	7b7a      	ldrb	r2, [r7, #13]
 800d1bc:	7b3b      	ldrb	r3, [r7, #12]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d214      	bcs.n	800d1ec <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x6c>
            {
                 if (pConfig->Adbms6948_pDaisyChainCfg[nChainIndex].Adbms6948_pNoOfCellsPerDevice[nDeviceIndex] >
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6819      	ldr	r1, [r3, #0]
 800d1c6:	7bba      	ldrb	r2, [r7, #14]
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	1a9b      	subs	r3, r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	685a      	ldr	r2, [r3, #4]
 800d1d4:	7b7b      	ldrb	r3, [r7, #13]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b10      	cmp	r3, #16
 800d1dc:	d902      	bls.n	800d1e4 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x64>
                       ADBMS6948_MAX_NO_OF_CELLS_PER_DEVICE)
                 {
                      bRet = TRUE;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	73fb      	strb	r3, [r7, #15]
                      break;
 800d1e2:	e003      	b.n	800d1ec <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x6c>
            for (nDeviceIndex=0u;nDeviceIndex<nAdbms6948Devices;nDeviceIndex++)
 800d1e4:	7b7b      	ldrb	r3, [r7, #13]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	737b      	strb	r3, [r7, #13]
 800d1ea:	e7e6      	b.n	800d1ba <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x3a>
                 }
            }
        }

        if (TRUE == bRet)
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d003      	beq.n	800d1fa <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x7a>
    for (nChainIndex = 0u; nChainIndex < ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	73bb      	strb	r3, [r7, #14]
 800d1f8:	e7ca      	b.n	800d190 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x10>
        {
                break;
 800d1fa:	bf00      	nop
        }
     }
return bRet;
 800d1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3714      	adds	r7, #20
 800d202:	46bd      	mov	sp, r7
 800d204:	bc80      	pop	{r7}
 800d206:	4770      	bx	lr

0800d208 <_ZL23Adbms6948_lPrepareChainh>:

    @param  [in]   knChainID        Chain Id

    @return    None
*/
static void  Adbms6948_lPrepareChain(const uint8_t knChainID) {
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	4603      	mov	r3, r0
 800d210:	71fb      	strb	r3, [r7, #7]
	uint8_t nNoOfDevices,nDeviceIndex;

	/* Identify the total number of devices in chain */
	nNoOfDevices = Adbms6948_pDaisyChainCfgInput[knChainID].Adbms6948_nNoOfDevices;
 800d212:	4b12      	ldr	r3, [pc, #72]	; (800d25c <_ZL23Adbms6948_lPrepareChainh+0x54>)
 800d214:	6819      	ldr	r1, [r3, #0]
 800d216:	79fa      	ldrb	r2, [r7, #7]
 800d218:	4613      	mov	r3, r2
 800d21a:	00db      	lsls	r3, r3, #3
 800d21c:	1a9b      	subs	r3, r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	440b      	add	r3, r1
 800d222:	789b      	ldrb	r3, [r3, #2]
 800d224:	73bb      	strb	r3, [r7, #14]

	/* Prepare the list of Devices in chain */
	for (nDeviceIndex=0u;nDeviceIndex<nNoOfDevices;nDeviceIndex++) {
 800d226:	2300      	movs	r3, #0
 800d228:	73fb      	strb	r3, [r7, #15]
 800d22a:	7bfa      	ldrb	r2, [r7, #15]
 800d22c:	7bbb      	ldrb	r3, [r7, #14]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d20f      	bcs.n	800d252 <_ZL23Adbms6948_lPrepareChainh+0x4a>
		Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDeviceIndex] = ADBMS6948_DEVICE;
 800d232:	79fa      	ldrb	r2, [r7, #7]
 800d234:	7bf9      	ldrb	r1, [r7, #15]
 800d236:	480a      	ldr	r0, [pc, #40]	; (800d260 <_ZL23Adbms6948_lPrepareChainh+0x58>)
 800d238:	4613      	mov	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4403      	add	r3, r0
 800d242:	440b      	add	r3, r1
 800d244:	3311      	adds	r3, #17
 800d246:	2201      	movs	r2, #1
 800d248:	701a      	strb	r2, [r3, #0]
	for (nDeviceIndex=0u;nDeviceIndex<nNoOfDevices;nDeviceIndex++) {
 800d24a:	7bfb      	ldrb	r3, [r7, #15]
 800d24c:	3301      	adds	r3, #1
 800d24e:	73fb      	strb	r3, [r7, #15]
 800d250:	e7eb      	b.n	800d22a <_ZL23Adbms6948_lPrepareChainh+0x22>
	}
}
 800d252:	bf00      	nop
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	bc80      	pop	{r7}
 800d25a:	4770      	bx	lr
 800d25c:	20000780 	.word	0x20000780
 800d260:	20000768 	.word	0x20000768

0800d264 <_Z21Adbms6948_Cmd_ExecCmdthh>:
(
uint16_t       nCommand,
boolean       bIncrementCmdCount,
const uint8_t   knChainID
)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	4603      	mov	r3, r0
 800d26c:	80fb      	strh	r3, [r7, #6]
 800d26e:	460b      	mov	r3, r1
 800d270:	717b      	strb	r3, [r7, #5]
 800d272:	4613      	mov	r3, r2
 800d274:	713b      	strb	r3, [r7, #4]
    uint16_t   nCmdPec;
    uint8_t   aCmd[ADBMS6948_CMD_DATA_LEN];
    uint8_t   nDevIdx, nNoOfDevInChain;

    aCmd[0] = (uint8_t)((nCommand & 0xFF00u) >> ADBMS6948_SHIFT_BY_8);
 800d276:	88fb      	ldrh	r3, [r7, #6]
 800d278:	0a1b      	lsrs	r3, r3, #8
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	b2db      	uxtb	r3, r3
 800d27e:	733b      	strb	r3, [r7, #12]
    aCmd[1] = (uint8_t)((nCommand & 0x00FFu));
 800d280:	88fb      	ldrh	r3, [r7, #6]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	737b      	strb	r3, [r7, #13]
    /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = (uint16_t)Adbms6948_Pec15Calculate(&aCmd[0], 2u);
 800d286:	f107 030c 	add.w	r3, r7, #12
 800d28a:	2102      	movs	r1, #2
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 ff2d 	bl	800e0ec <_Z24Adbms6948_Pec15CalculatePhh>
 800d292:	4603      	mov	r3, r0
 800d294:	82bb      	strh	r3, [r7, #20]
    /* Append the PEC to the command buffer */
    aCmd[2] = (uint8_t)(nCmdPec >> ADBMS6948_SHIFT_BY_8);
 800d296:	8abb      	ldrh	r3, [r7, #20]
 800d298:	121b      	asrs	r3, r3, #8
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	73bb      	strb	r3, [r7, #14]
    aCmd[3] = (uint8_t)(nCmdPec);
 800d29e:	8abb      	ldrh	r3, [r7, #20]
 800d2a0:	b2db      	uxtb	r3, r3
 800d2a2:	73fb      	strb	r3, [r7, #15]

    if(nCommand == ADBMS6948_CMD_STCOMM)
 800d2a4:	88fb      	ldrh	r3, [r7, #6]
 800d2a6:	f240 7223 	movw	r2, #1827	; 0x723
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d107      	bne.n	800d2be <_Z21Adbms6948_Cmd_ExecCmdthh+0x5a>
    {
      /* Transmit the command buffer on the SPI bus */
      ADI_PAL_SPIWRITE(&aCmd[0], (uint8_t)(ADBMS6948_CMD_DATA_LEN + ADBMS6948_I2C_STCOMM_BYTES), knChainID);
 800d2ae:	793a      	ldrb	r2, [r7, #4]
 800d2b0:	f107 030c 	add.w	r3, r7, #12
 800d2b4:	210d      	movs	r1, #13
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fe ffac 	bl	800c214 <_Z16adi_pal_SpiWritePhth>
 800d2bc:	e006      	b.n	800d2cc <_Z21Adbms6948_Cmd_ExecCmdthh+0x68>
    }
    else
    {
      /* Transmit the command buffer on the SPI bus */
      ADI_PAL_SPIWRITE(&aCmd[0], ADBMS6948_CMD_DATA_LEN, knChainID);
 800d2be:	793a      	ldrb	r2, [r7, #4]
 800d2c0:	f107 030c 	add.w	r3, r7, #12
 800d2c4:	2104      	movs	r1, #4
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7fe ffa4 	bl	800c214 <_Z16adi_pal_SpiWritePhth>
    }

    /* Does the command increment the device command count */
    if (bIncrementCmdCount == TRUE)
 800d2cc:	797b      	ldrb	r3, [r7, #5]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d103      	bne.n	800d2da <_Z21Adbms6948_Cmd_ExecCmdthh+0x76>
    {
        /* Increment the command counter maintained by the driver for all the devices on the daisy
         * chain */
        Adbms6948_lIncCmdCntAllDev(knChainID);
 800d2d2:	793b      	ldrb	r3, [r7, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f000 f9df 	bl	800d698 <_ZL26Adbms6948_lIncCmdCntAllDevh>
    }
    /* Is the command to be sent RSTCC */
    if (nCommand == ADBMS6948_CMD_RSTCC)
 800d2da:	88fb      	ldrh	r3, [r7, #6]
 800d2dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d2de:	d138      	bne.n	800d352 <_Z21Adbms6948_Cmd_ExecCmdthh+0xee>
    {
        /* Clear the command counter value maintained by the driver for all the devices on the
         * chain */
        nNoOfDevInChain = Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800d2e0:	793a      	ldrb	r2, [r7, #4]
 800d2e2:	491e      	ldr	r1, [pc, #120]	; (800d35c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	4413      	add	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	440b      	add	r3, r1
 800d2ee:	3305      	adds	r3, #5
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	74fb      	strb	r3, [r7, #19]
      for (nDevIdx = 0u; nDevIdx < nNoOfDevInChain; nDevIdx++)
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	75fb      	strb	r3, [r7, #23]
 800d2f8:	7dfa      	ldrb	r2, [r7, #23]
 800d2fa:	7cfb      	ldrb	r3, [r7, #19]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d228      	bcs.n	800d352 <_Z21Adbms6948_Cmd_ExecCmdthh+0xee>
        {
      if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIdx])
 800d300:	793a      	ldrb	r2, [r7, #4]
 800d302:	7df9      	ldrb	r1, [r7, #23]
 800d304:	4815      	ldr	r0, [pc, #84]	; (800d35c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d306:	4613      	mov	r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4403      	add	r3, r0
 800d310:	440b      	add	r3, r1
 800d312:	3311      	adds	r3, #17
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2b01      	cmp	r3, #1
 800d318:	d10b      	bne.n	800d332 <_Z21Adbms6948_Cmd_ExecCmdthh+0xce>
      {
        Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIdx] = 0;
 800d31a:	793a      	ldrb	r2, [r7, #4]
 800d31c:	7df9      	ldrb	r1, [r7, #23]
 800d31e:	480f      	ldr	r0, [pc, #60]	; (800d35c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4403      	add	r3, r0
 800d32a:	440b      	add	r3, r1
 800d32c:	3304      	adds	r3, #4
 800d32e:	2200      	movs	r2, #0
 800d330:	701a      	strb	r2, [r3, #0]
      }
      Adbms6948_aoChainStateInfo[knChainID].aLastReadCCs[nDevIdx] = 0;
 800d332:	793a      	ldrb	r2, [r7, #4]
 800d334:	7df9      	ldrb	r1, [r7, #23]
 800d336:	4809      	ldr	r0, [pc, #36]	; (800d35c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4403      	add	r3, r0
 800d342:	440b      	add	r3, r1
 800d344:	3303      	adds	r3, #3
 800d346:	2200      	movs	r2, #0
 800d348:	701a      	strb	r2, [r3, #0]
      for (nDevIdx = 0u; nDevIdx < nNoOfDevInChain; nDevIdx++)
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	3301      	adds	r3, #1
 800d34e:	75fb      	strb	r3, [r7, #23]
 800d350:	e7d2      	b.n	800d2f8 <_Z21Adbms6948_Cmd_ExecCmdthh+0x94>
        }
    }
}
 800d352:	bf00      	nop
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	20000768 	.word	0x20000768

0800d360 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>:
(
    uint16_t       nCommand,
    uint8_t     *pTxBuf,
    const uint8_t    knChainID
)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b08a      	sub	sp, #40	; 0x28
 800d364:	af00      	add	r7, sp, #0
 800d366:	4603      	mov	r3, r0
 800d368:	6039      	str	r1, [r7, #0]
 800d36a:	80fb      	strh	r3, [r7, #6]
 800d36c:	4613      	mov	r3, r2
 800d36e:	717b      	strb	r3, [r7, #5]
    uint8_t  aTxBuf[ADBMS6948_CMD_DATA_LEN +
                             (ADBMS6948_REG_DATA_LEN_WITH_PEC *ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)];
    uint8_t  nDevIndex, nByteIndex, nNoOfDevices;
    uint8_t *   pDevCfgArray;
    uint16_t  nCfgPec, nCmdPec;
    uint8_t  nLen = 0u;
 800d370:	2300      	movs	r3, #0
 800d372:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    aTxBuf[nLen++] = (uint8_t)((uint16_t)(nCommand & (uint16_t)0xFF00U) >> 8U);
 800d376:	88fb      	ldrh	r3, [r7, #6]
 800d378:	0a1b      	lsrs	r3, r3, #8
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d380:	1c59      	adds	r1, r3, #1
 800d382:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d386:	b2d2      	uxtb	r2, r2
 800d388:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d38c:	440b      	add	r3, r1
 800d38e:	f803 2c1c 	strb.w	r2, [r3, #-28]
    aTxBuf[nLen++] = (uint8_t)(nCommand & (uint16_t)0x00FFU);
 800d392:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800d39c:	88fa      	ldrh	r2, [r7, #6]
 800d39e:	b2d2      	uxtb	r2, r2
 800d3a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d3a4:	440b      	add	r3, r1
 800d3a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
    /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = (uint16_t)Adbms6948_Pec15Calculate(&aTxBuf[0], 2u);
 800d3aa:	f107 030c 	add.w	r3, r7, #12
 800d3ae:	2102      	movs	r1, #2
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f000 fe9b 	bl	800e0ec <_Z24Adbms6948_Pec15CalculatePhh>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Append the command PEC to the transmit buffer */
    aTxBuf[nLen++] = (uint8_t)(nCmdPec >> 8U);
 800d3ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3bc:	121a      	asrs	r2, r3, #8
 800d3be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d3c2:	1c59      	adds	r1, r3, #1
 800d3c4:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d3c8:	b2d2      	uxtb	r2, r2
 800d3ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d3ce:	440b      	add	r3, r1
 800d3d0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    aTxBuf[nLen++] = (uint8_t)(nCmdPec);
 800d3d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800d3de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d3e0:	b2d2      	uxtb	r2, r2
 800d3e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d3e6:	440b      	add	r3, r1
 800d3e8:	f803 2c1c 	strb.w	r2, [r3, #-28]

    nNoOfDevices = Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800d3ec:	797a      	ldrb	r2, [r7, #5]
 800d3ee:	4939      	ldr	r1, [pc, #228]	; (800d4d4 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0x174>)
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	440b      	add	r3, r1
 800d3fa:	3305      	adds	r3, #5
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    /* Start from last configuration data to first as first data written goes to last device */
    for (nDevIndex = nNoOfDevices; nDevIndex > 0u ; nDevIndex--)
 800d402:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d40a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d04e      	beq.n	800d4b0 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0x150>
    {
        pDevCfgArray = pTxBuf + ((nDevIndex - 1u) * (ADBMS6948_REG_GRP_LEN));
 800d412:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d416:	4613      	mov	r3, r2
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	4413      	add	r3, r2
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	3b06      	subs	r3, #6
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	4413      	add	r3, r2
 800d424:	61fb      	str	r3, [r7, #28]
        for (nByteIndex = 0u; nByteIndex < ADBMS6948_REG_GRP_LEN; nByteIndex++)
 800d426:	2300      	movs	r3, #0
 800d428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d42c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d430:	2b05      	cmp	r3, #5
 800d432:	d814      	bhi.n	800d45e <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0xfe>
        {
            aTxBuf[nLen++] = *(pDevCfgArray + nByteIndex);
 800d434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d438:	69fa      	ldr	r2, [r7, #28]
 800d43a:	441a      	add	r2, r3
 800d43c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d440:	1c59      	adds	r1, r3, #1
 800d442:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d446:	7812      	ldrb	r2, [r2, #0]
 800d448:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d44c:	440b      	add	r3, r1
 800d44e:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (nByteIndex = 0u; nByteIndex < ADBMS6948_REG_GRP_LEN; nByteIndex++)
 800d452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d456:	3301      	adds	r3, #1
 800d458:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d45c:	e7e6      	b.n	800d42c <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0xcc>
        }
        /* Calculate the 10-bit PEC for the transmit data bytes for all the devices on the chain */
        nCfgPec = (uint16_t)Adbms6948_Pec10Calculate(pDevCfgArray, FALSE, ADBMS6948_REG_GRP_LEN);
 800d45e:	2206      	movs	r2, #6
 800d460:	2100      	movs	r1, #0
 800d462:	69f8      	ldr	r0, [r7, #28]
 800d464:	f000 fe76 	bl	800e154 <_Z24Adbms6948_Pec10CalculatePhhh>
 800d468:	4603      	mov	r3, r0
 800d46a:	837b      	strh	r3, [r7, #26]
        /* Append the data PEC to the transmit buffer */
        aTxBuf[nLen++]  = (uint8_t)((nCfgPec & (uint16_t)0x0300u) >> 8u);
 800d46c:	8b7b      	ldrh	r3, [r7, #26]
 800d46e:	121b      	asrs	r3, r3, #8
 800d470:	b2da      	uxtb	r2, r3
 800d472:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d476:	1c59      	adds	r1, r3, #1
 800d478:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d47c:	f002 0203 	and.w	r2, r2, #3
 800d480:	b2d2      	uxtb	r2, r2
 800d482:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d486:	440b      	add	r3, r1
 800d488:	f803 2c1c 	strb.w	r2, [r3, #-28]
        aTxBuf[nLen++] = (uint8_t)(nCfgPec & (uint16_t)0x00FFu);
 800d48c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800d496:	8b7a      	ldrh	r2, [r7, #26]
 800d498:	b2d2      	uxtb	r2, r2
 800d49a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d49e:	440b      	add	r3, r1
 800d4a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (nDevIndex = nNoOfDevices; nDevIndex > 0u ; nDevIndex--)
 800d4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4ae:	e7ac      	b.n	800d40a <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0xaa>
    }

    /* Transmit the command + data buffer on the SPI bus */
    ADI_PAL_SPIWRITE(aTxBuf, nLen, knChainID);
 800d4b0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d4b4:	b299      	uxth	r1, r3
 800d4b6:	797a      	ldrb	r2, [r7, #5]
 800d4b8:	f107 030c 	add.w	r3, r7, #12
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe fea9 	bl	800c214 <_Z16adi_pal_SpiWritePhth>

    /* Increment the command counter for all the devices in the daisy chain */
    Adbms6948_lIncCmdCntAllDev(knChainID);
 800d4c2:	797b      	ldrb	r3, [r7, #5]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f000 f8e7 	bl	800d698 <_ZL26Adbms6948_lIncCmdCntAllDevh>

    return;
 800d4ca:	bf00      	nop
}
 800d4cc:	3728      	adds	r7, #40	; 0x28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20000768 	.word	0x20000768

0800d4d8 <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh>:
void Adbms6948_Cmd_ExecuteCmdRD(uint16_t      *pnCmdLst,
                                uint8_t       pRxBuf[][ADBMS6948_MAX_FRAME_SIZE],
                                uint32_t      nDataCfg,
                                boolean       bIsPollCmd,
                                const uint8_t knChainID)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b09a      	sub	sp, #104	; 0x68
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	70fb      	strb	r3, [r7, #3]
  uint16_t nCmdPec;
  uint16_t nRegGroups, nGroupDataLen;
  uint16_t nGrpIdx, nGrpDataIdx;
  uint16_t nFrameStartIdx;

  nRegGroups = (uint16_t)(nDataCfg >> 16u);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	0c1b      	lsrs	r3, r3, #16
 800d4ea:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  nGroupDataLen = (uint16_t)(((uint16_t)nDataCfg) - ADBMS6948_CMD_DATA_LEN);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	3b04      	subs	r3, #4
 800d4f4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

  for (nGrpIdx = 0u; nGrpIdx < nRegGroups; nGrpIdx++) {
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d4fe:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d502:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d506:	429a      	cmp	r2, r3
 800d508:	f080 809e 	bcs.w	800d648 <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x170>
    nFrameStartIdx = 0u;
 800d50c:	2300      	movs	r3, #0
 800d50e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    /* Populate the command code */
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)((uint16_t)(pnCmdLst[nGrpIdx] & (uint16_t)0xFF00U) >> 8U);
 800d512:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4413      	add	r3, r2
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	0a1b      	lsrs	r3, r3, #8
 800d520:	b299      	uxth	r1, r3
 800d522:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d526:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d52a:	1c58      	adds	r0, r3, #1
 800d52c:	f8a7 0062 	strh.w	r0, [r7, #98]	; 0x62
 800d530:	4618      	mov	r0, r3
 800d532:	b2c9      	uxtb	r1, r1
 800d534:	4613      	mov	r3, r2
 800d536:	005b      	lsls	r3, r3, #1
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d540:	4413      	add	r3, r2
 800d542:	4403      	add	r3, r0
 800d544:	3b54      	subs	r3, #84	; 0x54
 800d546:	460a      	mov	r2, r1
 800d548:	701a      	strb	r2, [r3, #0]
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)(pnCmdLst[nGrpIdx] & (uint16_t)0x00FFU);
 800d54a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d54e:	005b      	lsls	r3, r3, #1
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	4413      	add	r3, r2
 800d554:	8819      	ldrh	r1, [r3, #0]
 800d556:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d55a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d55e:	1c58      	adds	r0, r3, #1
 800d560:	f8a7 0062 	strh.w	r0, [r7, #98]	; 0x62
 800d564:	4618      	mov	r0, r3
 800d566:	b2c9      	uxtb	r1, r1
 800d568:	4613      	mov	r3, r2
 800d56a:	005b      	lsls	r3, r3, #1
 800d56c:	4413      	add	r3, r2
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d574:	4413      	add	r3, r2
 800d576:	4403      	add	r3, r0
 800d578:	3b54      	subs	r3, #84	; 0x54
 800d57a:	460a      	mov	r2, r1
 800d57c:	701a      	strb	r2, [r3, #0]

      /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = Adbms6948_Pec15Calculate((uint8_t*)&aTxBuf[nGrpIdx][0u], 2u);
 800d57e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d582:	f107 0114 	add.w	r1, r7, #20
 800d586:	4613      	mov	r3, r2
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	4413      	add	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	440b      	add	r3, r1
 800d590:	2102      	movs	r1, #2
 800d592:	4618      	mov	r0, r3
 800d594:	f000 fdaa 	bl	800e0ec <_Z24Adbms6948_Pec15CalculatePhh>
 800d598:	4603      	mov	r3, r0
 800d59a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    /* Append the PEC to the command buffer */
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)(nCmdPec >> 8U);
 800d59e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800d5a2:	1219      	asrs	r1, r3, #8
 800d5a4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d5a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d5ac:	1c58      	adds	r0, r3, #1
 800d5ae:	f8a7 0062 	strh.w	r0, [r7, #98]	; 0x62
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	b2c9      	uxtb	r1, r1
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	4413      	add	r3, r2
 800d5bc:	009b      	lsls	r3, r3, #2
 800d5be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d5c2:	4413      	add	r3, r2
 800d5c4:	4403      	add	r3, r0
 800d5c6:	3b54      	subs	r3, #84	; 0x54
 800d5c8:	460a      	mov	r2, r1
 800d5ca:	701a      	strb	r2, [r3, #0]
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)(nCmdPec);
 800d5cc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d5d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d5d4:	1c59      	adds	r1, r3, #1
 800d5d6:	f8a7 1062 	strh.w	r1, [r7, #98]	; 0x62
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800d5e0:	b2d9      	uxtb	r1, r3
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	005b      	lsls	r3, r3, #1
 800d5e6:	4413      	add	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d5ee:	4413      	add	r3, r2
 800d5f0:	4403      	add	r3, r0
 800d5f2:	3b54      	subs	r3, #84	; 0x54
 800d5f4:	460a      	mov	r2, r1
 800d5f6:	701a      	strb	r2, [r3, #0]

    for (nGrpDataIdx = 0u; nGrpDataIdx < nGroupDataLen; nGrpDataIdx++) {
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d5fe:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d602:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800d606:	429a      	cmp	r2, r3
 800d608:	d218      	bcs.n	800d63c <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x164>
      aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)0xFFu;
 800d60a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d60e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d612:	1c59      	adds	r1, r3, #1
 800d614:	f8a7 1062 	strh.w	r1, [r7, #98]	; 0x62
 800d618:	4619      	mov	r1, r3
 800d61a:	4613      	mov	r3, r2
 800d61c:	005b      	lsls	r3, r3, #1
 800d61e:	4413      	add	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d626:	4413      	add	r3, r2
 800d628:	440b      	add	r3, r1
 800d62a:	3b54      	subs	r3, #84	; 0x54
 800d62c:	22ff      	movs	r2, #255	; 0xff
 800d62e:	701a      	strb	r2, [r3, #0]
    for (nGrpDataIdx = 0u; nGrpDataIdx < nGroupDataLen; nGrpDataIdx++) {
 800d630:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d634:	3301      	adds	r3, #1
 800d636:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d63a:	e7e0      	b.n	800d5fe <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x126>
  for (nGrpIdx = 0u; nGrpIdx < nRegGroups; nGrpIdx++) {
 800d63c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d640:	3301      	adds	r3, #1
 800d642:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d646:	e75a      	b.n	800d4fe <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x26>
    }
  }

  /* Transmit the command buffer on the SPI bus */
  ADI_PAL_SPIWRITEREADS(aTxBuf, pRxBuf, nDataCfg, knChainID);
 800d648:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d64c:	f107 0014 	add.w	r0, r7, #20
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	68b9      	ldr	r1, [r7, #8]
 800d654:	f7fe fe1e 	bl	800c294 <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh>

  /* Does the command increment the device command count */
  if (bIsPollCmd == TRUE) {
 800d658:	78fb      	ldrb	r3, [r7, #3]
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d105      	bne.n	800d66a <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x192>
    /* Increment the command counter maintained by the driver for all the devices in the daisy chain */
    Adbms6948_lIncCmdCntAllDev(knChainID);
 800d65e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d662:	4618      	mov	r0, r3
 800d664:	f000 f818 	bl	800d698 <_ZL26Adbms6948_lIncCmdCntAllDevh>
  }
  return;
 800d668:	bf00      	nop
 800d66a:	bf00      	nop
}
 800d66c:	3768      	adds	r7, #104	; 0x68
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <_Z28Adbms6948_Cmd_SendDummyBytesPhhh>:
    @param  [in]  knChainID  The daisy chain ID to perform the operation.

    @return  None.
*/
void Adbms6948_Cmd_SendDummyBytes(uint8_t *pBuff, uint8_t nLen, const uint8_t knChainID)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b082      	sub	sp, #8
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
 800d67a:	460b      	mov	r3, r1
 800d67c:	70fb      	strb	r3, [r7, #3]
 800d67e:	4613      	mov	r3, r2
 800d680:	70bb      	strb	r3, [r7, #2]
  ADI_PAL_SPIWRITE(pBuff, nLen, knChainID);
 800d682:	78fb      	ldrb	r3, [r7, #3]
 800d684:	b29b      	uxth	r3, r3
 800d686:	78ba      	ldrb	r2, [r7, #2]
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7fe fdc2 	bl	800c214 <_Z16adi_pal_SpiWritePhth>
}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <_ZL26Adbms6948_lIncCmdCntAllDevh>:

    @param [in]  knChainID  The Id of the daisy chain on which the operation is done.

*/
static void  Adbms6948_lIncCmdCntAllDev(const uint8_t knChainID)
{
 800d698:	b490      	push	{r4, r7}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t   nDevIndex;
  /* Loop for all the devices */
  for (nDevIndex = 0u;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	73fb      	strb	r3, [r7, #15]
       nDevIndex < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800d6a6:	79fa      	ldrb	r2, [r7, #7]
 800d6a8:	4929      	ldr	r1, [pc, #164]	; (800d750 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	4413      	add	r3, r2
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	440b      	add	r3, r1
 800d6b4:	3305      	adds	r3, #5
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	7bfa      	ldrb	r2, [r7, #15]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d242      	bcs.n	800d744 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xac>
       nDevIndex++)
  {
    if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIndex])
 800d6be:	79fa      	ldrb	r2, [r7, #7]
 800d6c0:	7bf9      	ldrb	r1, [r7, #15]
 800d6c2:	4823      	ldr	r0, [pc, #140]	; (800d750 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	4403      	add	r3, r0
 800d6ce:	440b      	add	r3, r1
 800d6d0:	3311      	adds	r3, #17
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d131      	bne.n	800d73c <_ZL26Adbms6948_lIncCmdCntAllDevh+0xa4>
    {
      /* Increment the command counter */
      Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] =
                (Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] + 1u);
 800d6d8:	79fa      	ldrb	r2, [r7, #7]
 800d6da:	7bf9      	ldrb	r1, [r7, #15]
 800d6dc:	481c      	ldr	r0, [pc, #112]	; (800d750 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4403      	add	r3, r0
 800d6e8:	440b      	add	r3, r1
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	781b      	ldrb	r3, [r3, #0]
      Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] =
 800d6ee:	79fa      	ldrb	r2, [r7, #7]
 800d6f0:	7bf9      	ldrb	r1, [r7, #15]
                (Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] + 1u);
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	b2dc      	uxtb	r4, r3
      Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] =
 800d6f6:	4816      	ldr	r0, [pc, #88]	; (800d750 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6f8:	4613      	mov	r3, r2
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4413      	add	r3, r2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	4403      	add	r3, r0
 800d702:	440b      	add	r3, r1
 800d704:	3304      	adds	r3, #4
 800d706:	4622      	mov	r2, r4
 800d708:	701a      	strb	r2, [r3, #0]
      if (Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] >
 800d70a:	79fa      	ldrb	r2, [r7, #7]
 800d70c:	7bf9      	ldrb	r1, [r7, #15]
 800d70e:	4810      	ldr	r0, [pc, #64]	; (800d750 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d710:	4613      	mov	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	4403      	add	r3, r0
 800d71a:	440b      	add	r3, r1
 800d71c:	3304      	adds	r3, #4
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	2b3f      	cmp	r3, #63	; 0x3f
 800d722:	d90b      	bls.n	800d73c <_ZL26Adbms6948_lIncCmdCntAllDevh+0xa4>
                ADBMS6948_MAX_COMMAND_COUNT_VAL)
      {
        Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] = 0x1u;
 800d724:	79fa      	ldrb	r2, [r7, #7]
 800d726:	7bf9      	ldrb	r1, [r7, #15]
 800d728:	4809      	ldr	r0, [pc, #36]	; (800d750 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d72a:	4613      	mov	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4403      	add	r3, r0
 800d734:	440b      	add	r3, r1
 800d736:	3304      	adds	r3, #4
 800d738:	2201      	movs	r2, #1
 800d73a:	701a      	strb	r2, [r3, #0]
  for (nDevIndex = 0u;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	3301      	adds	r3, #1
 800d740:	73fb      	strb	r3, [r7, #15]
 800d742:	e7b0      	b.n	800d6a6 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xe>
      }
    }
  }
}
 800d744:	bf00      	nop
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bc90      	pop	{r4, r7}
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	20000768 	.word	0x20000768

0800d754 <_Z29Adbms6948_Cmd_ExecuteCmdRDAllPhthhh>:
    uint16_t            nCmd,
    uint8_t             nRegGrps,
    boolean             bIsPollCmd,
    const uint8_t       knChainID
)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	4608      	mov	r0, r1
 800d75e:	4611      	mov	r1, r2
 800d760:	461a      	mov	r2, r3
 800d762:	4603      	mov	r3, r0
 800d764:	807b      	strh	r3, [r7, #2]
 800d766:	460b      	mov	r3, r1
 800d768:	707b      	strb	r3, [r7, #1]
 800d76a:	4613      	mov	r3, r2
 800d76c:	703b      	strb	r3, [r7, #0]
    uint8_t aTxBuf[ADBMS6948_CMD_DATA_LEN];
  uint16_t  nCmdPec;
    uint16_t  nFrameStartIdx;

    nFrameStartIdx = 0u;
 800d76e:	2300      	movs	r3, #0
 800d770:	81fb      	strh	r3, [r7, #14]

    /* Populate the command code */
    aTxBuf[nFrameStartIdx++] = (uint8_t)((uint16_t)(nCmd & (uint16_t)0xFF00U) >> 8U);
 800d772:	887b      	ldrh	r3, [r7, #2]
 800d774:	0a1b      	lsrs	r3, r3, #8
 800d776:	b29a      	uxth	r2, r3
 800d778:	89fb      	ldrh	r3, [r7, #14]
 800d77a:	1c59      	adds	r1, r3, #1
 800d77c:	81f9      	strh	r1, [r7, #14]
 800d77e:	b2d2      	uxtb	r2, r2
 800d780:	f107 0110 	add.w	r1, r7, #16
 800d784:	440b      	add	r3, r1
 800d786:	f803 2c08 	strb.w	r2, [r3, #-8]
    aTxBuf[nFrameStartIdx++] = (uint8_t)(nCmd & (uint16_t)0x00FFU);
 800d78a:	89fb      	ldrh	r3, [r7, #14]
 800d78c:	1c5a      	adds	r2, r3, #1
 800d78e:	81fa      	strh	r2, [r7, #14]
 800d790:	887a      	ldrh	r2, [r7, #2]
 800d792:	b2d2      	uxtb	r2, r2
 800d794:	f107 0110 	add.w	r1, r7, #16
 800d798:	440b      	add	r3, r1
 800d79a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = Adbms6948_Pec15Calculate((uint8_t*)&aTxBuf[0u], 2u);
 800d79e:	f107 0308 	add.w	r3, r7, #8
 800d7a2:	2102      	movs	r1, #2
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 fca1 	bl	800e0ec <_Z24Adbms6948_Pec15CalculatePhh>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	81bb      	strh	r3, [r7, #12]

    /* Append the PEC to the command buffer */
    aTxBuf[nFrameStartIdx++] = (uint8_t)(nCmdPec >> 8U);
 800d7ae:	89bb      	ldrh	r3, [r7, #12]
 800d7b0:	121a      	asrs	r2, r3, #8
 800d7b2:	89fb      	ldrh	r3, [r7, #14]
 800d7b4:	1c59      	adds	r1, r3, #1
 800d7b6:	81f9      	strh	r1, [r7, #14]
 800d7b8:	b2d2      	uxtb	r2, r2
 800d7ba:	f107 0110 	add.w	r1, r7, #16
 800d7be:	440b      	add	r3, r1
 800d7c0:	f803 2c08 	strb.w	r2, [r3, #-8]
    aTxBuf[nFrameStartIdx++] = (uint8_t)(nCmdPec);
 800d7c4:	89fb      	ldrh	r3, [r7, #14]
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	81fa      	strh	r2, [r7, #14]
 800d7ca:	89ba      	ldrh	r2, [r7, #12]
 800d7cc:	b2d2      	uxtb	r2, r2
 800d7ce:	f107 0110 	add.w	r1, r7, #16
 800d7d2:	440b      	add	r3, r1
 800d7d4:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Transmit the command buffer on the SPI bus */
    ADI_PAL_SPIWRITEREADALL(aTxBuf, pRxBuf, nRegGrps, knChainID);
 800d7d8:	787a      	ldrb	r2, [r7, #1]
 800d7da:	7e3b      	ldrb	r3, [r7, #24]
 800d7dc:	f107 0008 	add.w	r0, r7, #8
 800d7e0:	6879      	ldr	r1, [r7, #4]
 800d7e2:	f7fe fdf3 	bl	800c3cc <_Z23adi_pal_SpiWriteReadAllPhS_mh>

    /* Does the command increment the device command count */
    if (bIsPollCmd == TRUE)
 800d7e6:	783b      	ldrb	r3, [r7, #0]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d104      	bne.n	800d7f6 <_Z29Adbms6948_Cmd_ExecuteCmdRDAllPhthhh+0xa2>
    {
        /* Increment the command counter maintained by the driver for all the devices in the daisy chain */
        Adbms6948_lIncCmdCntAllDev(knChainID);
 800d7ec:	7e3b      	ldrb	r3, [r7, #24]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7ff ff52 	bl	800d698 <_ZL26Adbms6948_lIncCmdCntAllDevh>
    }
return;
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop
}
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
	...

0800d800 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh>:
Adbms6948_ReturnType  Adbms6948_Int_TrigCADC
(
    Adbms6948_TrigCADCInputs 	*poTrigCADCIp,
	const uint8_t  				 knChainID
)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	70fb      	strb	r3, [r7, #3]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800d80c:	2301      	movs	r3, #1
 800d80e:	73fb      	strb	r3, [r7, #15]
	uint16_t  nCmdCode;

	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800d810:	4b3c      	ldr	r3, [pc, #240]	; (800d904 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0x104>)
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d06f      	beq.n	800d8f8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGCADC_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == poTrigCADCIp)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d06c      	beq.n	800d8f8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGCADC_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID)
 800d81e:	78fb      	ldrb	r3, [r7, #3]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d169      	bne.n	800d8f8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGCADC_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800d824:	78fb      	ldrb	r3, [r7, #3]
 800d826:	4619      	mov	r1, r3
 800d828:	2001      	movs	r0, #1
 800d82a:	f7ff fb45 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b01      	cmp	r3, #1
 800d832:	bf0c      	ite	eq
 800d834:	2301      	moveq	r3, #1
 800d836:	2300      	movne	r3, #0
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d15c      	bne.n	800d8f8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		#endif
	}
	else
	{
		/* Prepare the ADCV command based on the user inputs */
		nCmdCode = ADBMS6948_CMD_ADCV;
 800d83e:	f44f 7318 	mov.w	r3, #608	; 0x260
 800d842:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | (uint16_t)poTrigCADCIp->Adbms6948_eOWSel);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	791b      	ldrb	r3, [r3, #4]
 800d848:	b29a      	uxth	r2, r3
 800d84a:	89bb      	ldrh	r3, [r7, #12]
 800d84c:	4313      	orrs	r3, r2
 800d84e:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bRstIIRFltr << ADBMS6948_ADCV_POS_RSTF));
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	78db      	ldrb	r3, [r3, #3]
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	b21a      	sxth	r2, r3
 800d858:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d85c:	4313      	orrs	r3, r2
 800d85e:	b21b      	sxth	r3, r3
 800d860:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bEnSSDP << ADBMS6948_ADCV_POS_SSDP));
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	789b      	ldrb	r3, [r3, #2]
 800d866:	011b      	lsls	r3, r3, #4
 800d868:	b21a      	sxth	r2, r3
 800d86a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d86e:	4313      	orrs	r3, r2
 800d870:	b21b      	sxth	r3, r3
 800d872:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bContMode << ADBMS6948_ADCV_POS_CONT));
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	01db      	lsls	r3, r3, #7
 800d87a:	b21a      	sxth	r2, r3
 800d87c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d880:	4313      	orrs	r3, r2
 800d882:	b21b      	sxth	r3, r3
 800d884:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bEnRedun << ADBMS6948_ADCV_POS_RD));
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	785b      	ldrb	r3, [r3, #1]
 800d88a:	021b      	lsls	r3, r3, #8
 800d88c:	b21a      	sxth	r2, r3
 800d88e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d892:	4313      	orrs	r3, r2
 800d894:	b21b      	sxth	r3, r3
 800d896:	81bb      	strh	r3, [r7, #12]

		/* Send the ADCV command */
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800d898:	78fa      	ldrb	r2, [r7, #3]
 800d89a:	89bb      	ldrh	r3, [r7, #12]
 800d89c:	2101      	movs	r1, #1
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7ff fae3 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
		nRet = Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800d8a4:	78fb      	ldrb	r3, [r7, #3]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	2001      	movs	r0, #1
 800d8aa:	f7fe ff25 	bl	800c6f8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d115      	bne.n	800d8e4 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xe4>
		{
            /* Perform platform error check. */
            if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800d8b8:	78fb      	ldrb	r3, [r7, #3]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fe fe2c 	bl	800c518 <_Z21Adbms6948_Cmn_IsErrorh>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	bf0c      	ite	eq
 800d8c6:	2301      	moveq	r3, #1
 800d8c8:	2300      	movne	r3, #0
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d009      	beq.n	800d8e4 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xe4>
            {
                /* Platform error. */
                nRet = E_NOT_OK;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	73fb      	strb	r3, [r7, #15]
                Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800d8d4:	4b0c      	ldr	r3, [pc, #48]	; (800d908 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0x108>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	895b      	ldrh	r3, [r3, #10]
 800d8dc:	2101      	movs	r1, #1
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fe fe08 	bl	800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
            }
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800d8e4:	78fb      	ldrb	r3, [r7, #3]
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f7ff fae5 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	7bfb      	ldrb	r3, [r7, #15]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	73fb      	strb	r3, [r7, #15]
	}
return(nRet);
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20000764 	.word	0x20000764
 800d908:	2000077c 	.word	0x2000077c

0800d90c <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>:
Adbms6948_ReturnType  Adbms6948_Int_TrigI1ADC
(
    Adbms6948_TrigI1ADCInputs 	*poTrigI1ADCIp,
	const uint8_t  				 knChainID
)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	460b      	mov	r3, r1
 800d916:	70fb      	strb	r3, [r7, #3]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800d918:	2301      	movs	r3, #1
 800d91a:	73fb      	strb	r3, [r7, #15]
	uint16_t  nCmdCode;

	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800d91c:	4b33      	ldr	r3, [pc, #204]	; (800d9ec <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xe0>)
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d05d      	beq.n	800d9e0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGI1ADC_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == poTrigI1ADCIp)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d05a      	beq.n	800d9e0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGI1ADC_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID)
 800d92a:	78fb      	ldrb	r3, [r7, #3]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d157      	bne.n	800d9e0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGI1ADC_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800d930:	78fb      	ldrb	r3, [r7, #3]
 800d932:	4619      	mov	r1, r3
 800d934:	2001      	movs	r0, #1
 800d936:	f7ff fabf 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	bf0c      	ite	eq
 800d940:	2301      	moveq	r3, #1
 800d942:	2300      	movne	r3, #0
 800d944:	b2db      	uxtb	r3, r3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d14a      	bne.n	800d9e0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		#endif
	}
	else
	{
		/* Prepare the ADI1 command based on the user inputs */
		nCmdCode = ADBMS6948_CMD_ADI1;
 800d94a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d94e:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigI1ADCIp->Adbms6948_eOWSel << ADBMS6948_ADI1_POS_OW));
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	789b      	ldrb	r3, [r3, #2]
 800d954:	b29a      	uxth	r2, r3
 800d956:	89bb      	ldrh	r3, [r7, #12]
 800d958:	4313      	orrs	r3, r2
 800d95a:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigI1ADCIp->Adbms6948_bContMode << ADBMS6948_ADI1_POS_CONT));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	01db      	lsls	r3, r3, #7
 800d962:	b21a      	sxth	r2, r3
 800d964:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d968:	4313      	orrs	r3, r2
 800d96a:	b21b      	sxth	r3, r3
 800d96c:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigI1ADCIp->Adbms6948_bEnRedun << ADBMS6948_ADI1_POS_RD));
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	785b      	ldrb	r3, [r3, #1]
 800d972:	021b      	lsls	r3, r3, #8
 800d974:	b21a      	sxth	r2, r3
 800d976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	b21b      	sxth	r3, r3
 800d97e:	81bb      	strh	r3, [r7, #12]

		/* Send the ADI1 command */
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800d980:	78fa      	ldrb	r2, [r7, #3]
 800d982:	89bb      	ldrh	r3, [r7, #12]
 800d984:	2101      	movs	r1, #1
 800d986:	4618      	mov	r0, r3
 800d988:	f7ff fa6f 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
		nRet = Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800d98c:	78fb      	ldrb	r3, [r7, #3]
 800d98e:	4619      	mov	r1, r3
 800d990:	2001      	movs	r0, #1
 800d992:	f7fe feb1 	bl	800c6f8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800d996:	4603      	mov	r3, r0
 800d998:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d115      	bne.n	800d9cc <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xc0>
		{
            /* Perform platform error check. */
            if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800d9a0:	78fb      	ldrb	r3, [r7, #3]
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fe fdb8 	bl	800c518 <_Z21Adbms6948_Cmn_IsErrorh>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	bf0c      	ite	eq
 800d9ae:	2301      	moveq	r3, #1
 800d9b0:	2300      	movne	r3, #0
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d009      	beq.n	800d9cc <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xc0>
            {
                /* Platform error. */
                nRet = E_NOT_OK;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	73fb      	strb	r3, [r7, #15]
                Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800d9bc:	4b0c      	ldr	r3, [pc, #48]	; (800d9f0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xe4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	685b      	ldr	r3, [r3, #4]
 800d9c2:	895b      	ldrh	r3, [r3, #10]
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fe fd94 	bl	800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
            }
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	f7ff fa71 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	461a      	mov	r2, r3
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	73fb      	strb	r3, [r7, #15]
	}
return(nRet);
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3710      	adds	r7, #16
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20000764 	.word	0x20000764
 800d9f0:	2000077c 	.word	0x2000077c

0800d9f4 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>:
/*****************************************************************************/
Adbms6948_ReturnType Adbms6948_Int_ReadAllCellVolt(Adbms6948_CellMeasDataType eCellMeasData,
                                                   int16_t 					          *pnCellData,
                                                   Adbms6948_SnapSelType 			eSnapSel,
                                                   const uint8_t              knChainID)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6039      	str	r1, [r7, #0]
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	461a      	mov	r2, r3
 800da00:	4603      	mov	r3, r0
 800da02:	71fb      	strb	r3, [r7, #7]
 800da04:	460b      	mov	r3, r1
 800da06:	71bb      	strb	r3, [r7, #6]
 800da08:	4613      	mov	r3, r2
 800da0a:	717b      	strb	r3, [r7, #5]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800da0c:	2301      	movs	r3, #1
 800da0e:	73fb      	strb	r3, [r7, #15]

	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800da10:	4b2c      	ldr	r3, [pc, #176]	; (800dac4 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xd0>)
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d050      	beq.n	800daba <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCELLVOLT_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == pnCellData)
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d04d      	beq.n	800daba <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCELLVOLT_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if ((TRUE == Adbms6948_Cmn_IsInvalidSnapSelType(eSnapSel)) || (TRUE == Adbms6948_lIsInvalidCellMeasDataType(eCellMeasData)) || (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID))
 800da1e:	79bb      	ldrb	r3, [r7, #6]
 800da20:	4618      	mov	r0, r3
 800da22:	f7ff fa35 	bl	800ce90 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType>
 800da26:	4603      	mov	r3, r0
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d009      	beq.n	800da40 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x4c>
 800da2c:	79fb      	ldrb	r3, [r7, #7]
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 fb20 	bl	800e074 <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType>
 800da34:	4603      	mov	r3, r0
 800da36:	2b01      	cmp	r3, #1
 800da38:	d002      	beq.n	800da40 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x4c>
 800da3a:	797b      	ldrb	r3, [r7, #5]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x50>
 800da40:	2301      	movs	r3, #1
 800da42:	e000      	b.n	800da46 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x52>
 800da44:	2300      	movs	r3, #0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d137      	bne.n	800daba <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCELLVOLT_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800da4a:	797b      	ldrb	r3, [r7, #5]
 800da4c:	4619      	mov	r1, r3
 800da4e:	2001      	movs	r0, #1
 800da50:	f7ff fa32 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800da54:	4603      	mov	r3, r0
 800da56:	2b01      	cmp	r3, #1
 800da58:	bf0c      	ite	eq
 800da5a:	2301      	moveq	r3, #1
 800da5c:	2300      	movne	r3, #0
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b00      	cmp	r3, #0
 800da62:	d12a      	bne.n	800daba <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		#endif
	}
	else
	{
		/* Read cell voltages */
		nRet = Adbms6948_lReadAllCellVolt(eCellMeasData, pnCellData, eSnapSel, knChainID);
 800da64:	797b      	ldrb	r3, [r7, #5]
 800da66:	79ba      	ldrb	r2, [r7, #6]
 800da68:	79f8      	ldrb	r0, [r7, #7]
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	f000 f8d0 	bl	800dc10 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d115      	bne.n	800daa6 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xb2>
		{
			/* Perform platform error check. */
			if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800da7a:	797b      	ldrb	r3, [r7, #5]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fd4b 	bl	800c518 <_Z21Adbms6948_Cmn_IsErrorh>
 800da82:	4603      	mov	r3, r0
 800da84:	2b01      	cmp	r3, #1
 800da86:	bf0c      	ite	eq
 800da88:	2301      	moveq	r3, #1
 800da8a:	2300      	movne	r3, #0
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d009      	beq.n	800daa6 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xb2>
			{
				/* Platform error. */
				nRet = E_NOT_OK;
 800da92:	2301      	movs	r3, #1
 800da94:	73fb      	strb	r3, [r7, #15]
				Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800da96:	4b0c      	ldr	r3, [pc, #48]	; (800dac8 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xd4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	895b      	ldrh	r3, [r3, #10]
 800da9e:	2101      	movs	r1, #1
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fe fd27 	bl	800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
			}
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800daa6:	797b      	ldrb	r3, [r7, #5]
 800daa8:	4619      	mov	r1, r3
 800daaa:	2000      	movs	r0, #0
 800daac:	f7ff fa04 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800dab0:	4603      	mov	r3, r0
 800dab2:	461a      	mov	r2, r3
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	4313      	orrs	r3, r2
 800dab8:	73fb      	strb	r3, [r7, #15]
	}

	return(nRet);
 800daba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	20000764 	.word	0x20000764
 800dac8:	2000077c 	.word	0x2000077c

0800dacc <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>:
Adbms6948_ReturnType Adbms6948_Int_ReadCurrent(Adbms6948_CurrentMeasDataType  eCurrentMeasData,
                                                Adbms6948_CurrentSelType      eCurrentSel,
                                                int32_t                       *pnCurrentData,
                                                Adbms6948_SnapSelType 			  eSnapSel,
                                                const uint8_t  					      knChainID)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af02      	add	r7, sp, #8
 800dad2:	603a      	str	r2, [r7, #0]
 800dad4:	461a      	mov	r2, r3
 800dad6:	4603      	mov	r3, r0
 800dad8:	71fb      	strb	r3, [r7, #7]
 800dada:	460b      	mov	r3, r1
 800dadc:	71bb      	strb	r3, [r7, #6]
 800dade:	4613      	mov	r3, r2
 800dae0:	717b      	strb	r3, [r7, #5]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800dae2:	2301      	movs	r3, #1
 800dae4:	73fb      	strb	r3, [r7, #15]
	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800dae6:	4b32      	ldr	r3, [pc, #200]	; (800dbb0 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xe4>)
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d05a      	beq.n	800dba4 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCURRENT_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == pnCurrentData)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d057      	beq.n	800dba4 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCURRENT_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if ((TRUE == Adbms6948_Cmn_IsInvalidSnapSelType(eSnapSel)) || (TRUE == Adbms6948_lIsInvalidCurrentMeasDataType(eCurrentMeasData)) || (TRUE == Adbms6948_lIsInvalidCurrentSelType(eCurrentSel)) || (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID))
 800daf4:	797b      	ldrb	r3, [r7, #5]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff f9ca 	bl	800ce90 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d010      	beq.n	800db24 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x58>
 800db02:	79fb      	ldrb	r3, [r7, #7]
 800db04:	4618      	mov	r0, r3
 800db06:	f000 fac9 	bl	800e09c <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d009      	beq.n	800db24 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x58>
 800db10:	79bb      	ldrb	r3, [r7, #6]
 800db12:	4618      	mov	r0, r3
 800db14:	f000 fad6 	bl	800e0c4 <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d002      	beq.n	800db24 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x58>
 800db1e:	7e3b      	ldrb	r3, [r7, #24]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x5c>
 800db24:	2301      	movs	r3, #1
 800db26:	e000      	b.n	800db2a <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x5e>
 800db28:	2300      	movs	r3, #0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d13a      	bne.n	800dba4 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCURRENT_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800db2e:	7e3b      	ldrb	r3, [r7, #24]
 800db30:	4619      	mov	r1, r3
 800db32:	2001      	movs	r0, #1
 800db34:	f7ff f9c0 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	bf0c      	ite	eq
 800db3e:	2301      	moveq	r3, #1
 800db40:	2300      	movne	r3, #0
 800db42:	b2db      	uxtb	r3, r3
 800db44:	2b00      	cmp	r3, #0
 800db46:	d12d      	bne.n	800dba4 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		#endif
	}
	else
	{
		/* Read current */
		nRet = Adbms6948_lReadCurrent(eCurrentMeasData, eCurrentSel, pnCurrentData, eSnapSel, knChainID);
 800db48:	797a      	ldrb	r2, [r7, #5]
 800db4a:	79b9      	ldrb	r1, [r7, #6]
 800db4c:	79f8      	ldrb	r0, [r7, #7]
 800db4e:	7e3b      	ldrb	r3, [r7, #24]
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	4613      	mov	r3, r2
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	f000 f911 	bl	800dd7c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>
 800db5a:	4603      	mov	r3, r0
 800db5c:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800db5e:	7bfb      	ldrb	r3, [r7, #15]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d115      	bne.n	800db90 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xc4>
		{
			/* Perform platform error check. */
			if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800db64:	7e3b      	ldrb	r3, [r7, #24]
 800db66:	4618      	mov	r0, r3
 800db68:	f7fe fcd6 	bl	800c518 <_Z21Adbms6948_Cmn_IsErrorh>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b01      	cmp	r3, #1
 800db70:	bf0c      	ite	eq
 800db72:	2301      	moveq	r3, #1
 800db74:	2300      	movne	r3, #0
 800db76:	b2db      	uxtb	r3, r3
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d009      	beq.n	800db90 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xc4>
			{
				/* Platform error. */
				nRet = E_NOT_OK;
 800db7c:	2301      	movs	r3, #1
 800db7e:	73fb      	strb	r3, [r7, #15]
				Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800db80:	4b0c      	ldr	r3, [pc, #48]	; (800dbb4 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xe8>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	895b      	ldrh	r3, [r3, #10]
 800db88:	2101      	movs	r1, #1
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe fcb2 	bl	800c4f4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
			}
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800db90:	7e3b      	ldrb	r3, [r7, #24]
 800db92:	4619      	mov	r1, r3
 800db94:	2000      	movs	r0, #0
 800db96:	f7ff f98f 	bl	800ceb8 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800db9a:	4603      	mov	r3, r0
 800db9c:	461a      	mov	r2, r3
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	4313      	orrs	r3, r2
 800dba2:	73fb      	strb	r3, [r7, #15]
	}

	return(nRet);
 800dba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	20000764 	.word	0x20000764
 800dbb4:	2000077c 	.word	0x2000077c

0800dbb8 <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth>:
	Adbms6948_CellMeasDataType      eCellMeasData,
	Adbms6948_CellGrpSelType  	    eCellGrpSel,
	uint16_t                        *pnCmd,
	const uint8_t  					 knChainID
)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	603a      	str	r2, [r7, #0]
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	71fb      	strb	r3, [r7, #7]
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	71bb      	strb	r3, [r7, #6]
 800dbca:	4613      	mov	r3, r2
 800dbcc:	717b      	strb	r3, [r7, #5]
	if (ADBMS6948_CELL_GRP_SEL_ALL == eCellGrpSel)
 800dbce:	79bb      	ldrb	r3, [r7, #6]
 800dbd0:	2b06      	cmp	r3, #6
 800dbd2:	d10b      	bne.n	800dbec <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x34>
	{
        /*Use ALL commands for reading all cell voltage groups at once*/
        *pnCmd = Adbms6948_CellDataReadCmds[(uint8_t)eCellMeasData][(uint8_t)(ADBMS6948_MAX_CELLDATA_REGGRPS)];
 800dbd4:	79fa      	ldrb	r2, [r7, #7]
 800dbd6:	490d      	ldr	r1, [pc, #52]	; (800dc0c <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x54>)
 800dbd8:	4613      	mov	r3, r2
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	1a9b      	subs	r3, r3, r2
 800dbde:	005b      	lsls	r3, r3, #1
 800dbe0:	440b      	add	r3, r1
 800dbe2:	330c      	adds	r3, #12
 800dbe4:	881a      	ldrh	r2, [r3, #0]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		*pnCmd = Adbms6948_CellDataReadCmds[(uint8_t)eCellMeasData][(uint8_t)eCellGrpSel];
	}
}
 800dbea:	e00a      	b.n	800dc02 <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x4a>
		*pnCmd = Adbms6948_CellDataReadCmds[(uint8_t)eCellMeasData][(uint8_t)eCellGrpSel];
 800dbec:	79fa      	ldrb	r2, [r7, #7]
 800dbee:	79b9      	ldrb	r1, [r7, #6]
 800dbf0:	4806      	ldr	r0, [pc, #24]	; (800dc0c <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x54>)
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	1a9b      	subs	r3, r3, r2
 800dbf8:	440b      	add	r3, r1
 800dbfa:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	801a      	strh	r2, [r3, #0]
}
 800dc02:	bf00      	nop
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bc80      	pop	{r7}
 800dc0a:	4770      	bx	lr
 800dc0c:	08013944 	.word	0x08013944

0800dc10 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>:
	Adbms6948_CellMeasDataType  	eCellMeasData,
	int16_t 					    *pnCellData,
	Adbms6948_SnapSelType 			eSnapSel,
    const uint8_t                   knChainID
)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b092      	sub	sp, #72	; 0x48
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6039      	str	r1, [r7, #0]
 800dc18:	4611      	mov	r1, r2
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	71fb      	strb	r3, [r7, #7]
 800dc20:	460b      	mov	r3, r1
 800dc22:	71bb      	strb	r3, [r7, #6]
 800dc24:	4613      	mov	r3, r2
 800dc26:	717b      	strb	r3, [r7, #5]
	uint16_t  nCmd;
	uint16_t  nCmdCode, nCellData, nRdBufIdx;
	uint8_t  nDataLenBytesWithPec;
	boolean  bSendSnap, bSendUnsnap;

	nRdBufIdx = 0u;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	bSendSnap = (boolean)((uint8_t)eSnapSel & 0x01u);
 800dc2e:	79bb      	ldrb	r3, [r7, #6]
 800dc30:	f003 0301 	and.w	r3, r3, #1
 800dc34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	bSendUnsnap = (boolean)(((uint8_t)eSnapSel & 0x02u) >> 1u);
 800dc38:	79bb      	ldrb	r3, [r7, #6]
 800dc3a:	085b      	lsrs	r3, r3, #1
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	nDataLenBytesWithPec = Adbms6948_ReadAllCommandBytes[ADBMS6948_READALL_CELLVOLTAGES];
 800dc46:	2322      	movs	r3, #34	; 0x22
 800dc48:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	if(TRUE == bSendSnap)
 800dc4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d109      	bne.n	800dc68 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x58>
	{
		/*Send SNAP command */
		nCmdCode = ADBMS6948_CMD_SNAP;
 800dc54:	232d      	movs	r3, #45	; 0x2d
 800dc56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800dc5a:	797a      	ldrb	r2, [r7, #5]
 800dc5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dc60:	2101      	movs	r1, #1
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff f901 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}
	/* Send Read commands*/
	Adbms6948_lGetCellCmd(eCellMeasData, ADBMS6948_CELL_GRP_SEL_ALL, &nCmd, knChainID);
 800dc68:	797b      	ldrb	r3, [r7, #5]
 800dc6a:	f107 020e 	add.w	r2, r7, #14
 800dc6e:	79f8      	ldrb	r0, [r7, #7]
 800dc70:	2106      	movs	r1, #6
 800dc72:	f7ff ffa1 	bl	800dbb8 <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth>
    
	nRet = Adbms6948_Cmn_ReadAllRegGroups(nCmd, anReadCellDataBuf, nDataLenBytesWithPec, knChainID);
 800dc76:	89f8      	ldrh	r0, [r7, #14]
 800dc78:	797b      	ldrb	r3, [r7, #5]
 800dc7a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800dc7e:	f107 0110 	add.w	r1, r7, #16
 800dc82:	f7ff f8c5 	bl	800ce10 <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh>
 800dc86:	4603      	mov	r3, r0
 800dc88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (E_OK == nRet)
 800dc8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d12e      	bne.n	800dcf2 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xe2>
	{
		for(uint8_t nCellIdx = 0; nCellIdx < ADBMS6948_MAX_NO_OF_CELLS_PER_DEVICE; ++nCellIdx)
 800dc94:	2300      	movs	r3, #0
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc9e:	2b0f      	cmp	r3, #15
 800dca0:	d827      	bhi.n	800dcf2 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xe2>
		{
			/* Populate the user data buffer. */
        	nCellData = (int16_t)(((uint16_t)anReadCellDataBuf[nRdBufIdx + 1u] << 8u) | (uint16_t)anReadCellDataBuf[nRdBufIdx]);
 800dca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dca6:	3301      	adds	r3, #1
 800dca8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dcac:	4413      	add	r3, r2
 800dcae:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	b21a      	sxth	r2, r3
 800dcb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dcba:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dcbe:	440b      	add	r3, r1
 800dcc0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800dcc4:	b21b      	sxth	r3, r3
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	b21b      	sxth	r3, r3
 800dcca:	87bb      	strh	r3, [r7, #60]	; 0x3c
        	pnCellData[nCellIdx] = nCellData;
 800dccc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcd0:	005b      	lsls	r3, r3, #1
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800dcda:	801a      	strh	r2, [r3, #0]
			nRdBufIdx += 2;
 800dcdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dce0:	3302      	adds	r3, #2
 800dce2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		for(uint8_t nCellIdx = 0; nCellIdx < ADBMS6948_MAX_NO_OF_CELLS_PER_DEVICE; ++nCellIdx)
 800dce6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcea:	3301      	adds	r3, #1
 800dcec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf0:	e7d3      	b.n	800dc9a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x8a>
		}
	}
	if ((E_OK == nRet) && (TRUE == bSendUnsnap))
 800dcf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10d      	bne.n	800dd16 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x106>
 800dcfa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	d109      	bne.n	800dd16 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x106>
	{
		nCmdCode = ADBMS6948_CMD_UNSNAP;
 800dd02:	232f      	movs	r3, #47	; 0x2f
 800dd04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800dd08:	797a      	ldrb	r2, [r7, #5]
 800dd0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd0e:	2101      	movs	r1, #1
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff f8aa 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}

	/*Clear the Cell Voltage registers*/
	if (ADBMS6948_CELL_MEAS_DATA == eCellMeasData || ADBMS6948_CELL_MEAS_DATA_AVERAGED == eCellMeasData)
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d002      	beq.n	800dd22 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x112>
 800dd1c:	79fb      	ldrb	r3, [r7, #7]
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d104      	bne.n	800dd2c <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x11c>
	{
		nCmdCode = ADBMS6948_CMD_CLRCELL;
 800dd22:	f240 7311 	movw	r3, #1809	; 0x711
 800dd26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd2a:	e00e      	b.n	800dd4a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x13a>
	}
	else if (ADBMS6948_CELL_MEAS_DATA_REDUNDANT == eCellMeasData)
 800dd2c:	79fb      	ldrb	r3, [r7, #7]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d104      	bne.n	800dd3c <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x12c>
	{
		nCmdCode = ADBMS6948_CMD_CLRSPIN;
 800dd32:	f240 7316 	movw	r3, #1814	; 0x716
 800dd36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd3a:	e006      	b.n	800dd4a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x13a>
	}
	else if (ADBMS6948_CELL_MEAS_DATA_FILTERED == eCellMeasData)
 800dd3c:	79fb      	ldrb	r3, [r7, #7]
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d103      	bne.n	800dd4a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x13a>
	{
		nCmdCode = ADBMS6948_CMD_CLRFC;
 800dd42:	f240 7314 	movw	r3, #1812	; 0x714
 800dd46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}

	Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800dd4a:	797a      	ldrb	r2, [r7, #5]
 800dd4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd50:	2101      	movs	r1, #1
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7ff f889 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>

	/* Verify the command counter if UNSNAP command was sent*/
	nRet |= Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800dd58:	797b      	ldrb	r3, [r7, #5]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	2001      	movs	r0, #1
 800dd5e:	f7fe fccb 	bl	800c6f8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800dd62:	4603      	mov	r3, r0
 800dd64:	461a      	mov	r2, r3
 800dd66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

return(nRet);
 800dd70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3748      	adds	r7, #72	; 0x48
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>:
	Adbms6948_CurrentSelType		eCurrentSel,
	int32_t							*pnCurrentData,
	Adbms6948_SnapSelType			eSnapSel,
	const uint8_t					knChainID
)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b08c      	sub	sp, #48	; 0x30
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	603a      	str	r2, [r7, #0]
 800dd84:	461a      	mov	r2, r3
 800dd86:	4603      	mov	r3, r0
 800dd88:	71fb      	strb	r3, [r7, #7]
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	71bb      	strb	r3, [r7, #6]
 800dd8e:	4613      	mov	r3, r2
 800dd90:	717b      	strb	r3, [r7, #5]
	Adbms6948_ReturnType  nRet;
	uint8_t		anReadCurrentDataBuf[ADBMS6948_MAX_CURRENT_REGGRPS][ADBMS6948_CMD_DATA_LEN + ADBMS6948_REG_DATA_LEN_WITH_PEC];
	uint16_t	anCmdList[ADBMS6948_MAX_CURRENT_REGGRPS];
	uint16_t	nCmdCode, nRdBufIdx, nBufIdx = 0u;
 800dd92:	2300      	movs	r3, #0
 800dd94:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint32_t	nCurrentData;
	uint8_t		nRegGrpIdx, nNumOfCmds = 0u;
 800dd96:	2300      	movs	r3, #0
 800dd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	boolean		bSendSnap, bSendUnsnap;
	uint16_t 	nCmd;

	bSendSnap = (boolean)((uint8_t)eSnapSel & 0x01u);
 800dd9c:	797b      	ldrb	r3, [r7, #5]
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bSendUnsnap = (boolean)(((uint8_t)eSnapSel & 0x02u) >> 1u);
 800dda6:	797b      	ldrb	r3, [r7, #5]
 800dda8:	085b      	lsrs	r3, r3, #1
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	f003 0301 	and.w	r3, r3, #1
 800ddb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(TRUE == bSendSnap)
 800ddb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d108      	bne.n	800ddce <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x52>
	{
		/*Send SNAP command */
		nCmdCode = ADBMS6948_CMD_SNAP;
 800ddbc:	232d      	movs	r3, #45	; 0x2d
 800ddbe:	847b      	strh	r3, [r7, #34]	; 0x22
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800ddc0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ddc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddc6:	2101      	movs	r1, #1
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7ff f84e 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}

	/*Select the read command to send based on type of current data*/
	if (ADBMS6948_CURRENT_MEAS_DATA == eCurrentMeasData)
 800ddce:	79fb      	ldrb	r3, [r7, #7]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d10c      	bne.n	800ddee <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x72>
	{
		anCmdList[nNumOfCmds++] = ADBMS6948_CMD_RDI;
 800ddd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800ddde:	005b      	lsls	r3, r3, #1
 800dde0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dde4:	4413      	add	r3, r2
 800dde6:	2284      	movs	r2, #132	; 0x84
 800dde8:	f823 2c24 	strh.w	r2, [r3, #-36]
 800ddec:	e00e      	b.n	800de0c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x90>
	}
	else if (ADBMS6948_CURRENT_MEAS_DATA_AVERAGED == eCurrentMeasData)
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d10b      	bne.n	800de0c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x90>
	{
		anCmdList[nNumOfCmds++] = ADBMS6948_CMD_RDIAV;
 800ddf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf8:	1c5a      	adds	r2, r3, #1
 800ddfa:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800ddfe:	005b      	lsls	r3, r3, #1
 800de00:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800de04:	4413      	add	r3, r2
 800de06:	22c4      	movs	r2, #196	; 0xc4
 800de08:	f823 2c24 	strh.w	r2, [r3, #-36]
	}

	/* Send Read commands*/
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, anReadCurrentDataBuf, nNumOfCmds, knChainID);
 800de0c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800de10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800de14:	f107 0110 	add.w	r1, r7, #16
 800de18:	f107 000c 	add.w	r0, r7, #12
 800de1c:	f7fe ff38 	bl	800cc90 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800de20:	4603      	mov	r3, r0
 800de22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (E_OK == nRet)
 800de26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f040 80fe 	bne.w	800e02c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2b0>
	{
        nRdBufIdx = (uint16_t)ADBMS6948_CMD_DATA_LEN;
 800de30:	2304      	movs	r3, #4
 800de32:	843b      	strh	r3, [r7, #32]
        nRegGrpIdx = 0u;
 800de34:	2300      	movs	r3, #0
 800de36:	77fb      	strb	r3, [r7, #31]
		/*Populate the user data buffer*/
        /*Populate I1 value if applicable*/
        if (ADBMS6948_CURRENT_I1I2 == eCurrentSel || ADBMS6948_CURRENT_I1 == eCurrentSel)
 800de38:	79bb      	ldrb	r3, [r7, #6]
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	d002      	beq.n	800de44 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xc8>
 800de3e:	79bb      	ldrb	r3, [r7, #6]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d174      	bne.n	800df2e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x1b2>
        {
            /*Current register and Average current register have different
            number of bits*/
            switch (eCurrentMeasData)
 800de44:	79fb      	ldrb	r3, [r7, #7]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d01a      	beq.n	800de80 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x104>
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d135      	bne.n	800deba <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x13e>
            {
                case ADBMS6948_CURRENT_MEAS_DATA_AVERAGED:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 2u]) & 0xFF) << 16u);
 800de4e:	7ffa      	ldrb	r2, [r7, #31]
 800de50:	8c3b      	ldrh	r3, [r7, #32]
 800de52:	1c99      	adds	r1, r3, #2
 800de54:	4613      	mov	r3, r2
 800de56:	005b      	lsls	r3, r3, #1
 800de58:	4413      	add	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800de60:	4413      	add	r3, r2
 800de62:	440b      	add	r3, r1
 800de64:	3b20      	subs	r3, #32
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	041b      	lsls	r3, r3, #16
 800de6a:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00800000))
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de72:	2b00      	cmp	r3, #0
 800de74:	d025      	beq.n	800dec2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x146>
                    {
                        nCurrentData |= 0xFF000000;
 800de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de7c:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800de7e:	e020      	b.n	800dec2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x146>
                case ADBMS6948_CURRENT_MEAS_DATA:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 2u]) & 0x07) << 16u);
 800de80:	7ffa      	ldrb	r2, [r7, #31]
 800de82:	8c3b      	ldrh	r3, [r7, #32]
 800de84:	1c99      	adds	r1, r3, #2
 800de86:	4613      	mov	r3, r2
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	4413      	add	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800de92:	4413      	add	r3, r2
 800de94:	440b      	add	r3, r1
 800de96:	3b20      	subs	r3, #32
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	041b      	lsls	r3, r3, #16
 800de9c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800dea0:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00040000))
 800dea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00c      	beq.n	800dec6 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14a>
                    {
                        nCurrentData |= 0xFFF80000;
 800deac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deae:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 800deb2:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 800deb6:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800deb8:	e005      	b.n	800dec6 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14a>
                default:
                    nRet = E_NOT_OK;
 800deba:	2301      	movs	r3, #1
 800debc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    break;
 800dec0:	e002      	b.n	800dec8 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14c>
                    break;
 800dec2:	bf00      	nop
 800dec4:	e000      	b.n	800dec8 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14c>
                    break;
 800dec6:	bf00      	nop
            }
            nCurrentData |= ((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 1u]) << 8u;
 800dec8:	7ffa      	ldrb	r2, [r7, #31]
 800deca:	8c3b      	ldrh	r3, [r7, #32]
 800decc:	1c59      	adds	r1, r3, #1
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800deda:	4413      	add	r3, r2
 800dedc:	440b      	add	r3, r1
 800dede:	3b20      	subs	r3, #32
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	021b      	lsls	r3, r3, #8
 800dee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dee6:	4313      	orrs	r3, r2
 800dee8:	62bb      	str	r3, [r7, #40]	; 0x28
            nCurrentData |= (uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx];
 800deea:	7ffa      	ldrb	r2, [r7, #31]
 800deec:	8c39      	ldrh	r1, [r7, #32]
 800deee:	4613      	mov	r3, r2
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	4413      	add	r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800defa:	4413      	add	r3, r2
 800defc:	440b      	add	r3, r1
 800defe:	3b20      	subs	r3, #32
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	461a      	mov	r2, r3
 800df04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df06:	4313      	orrs	r3, r2
 800df08:	62bb      	str	r3, [r7, #40]	; 0x28
            pnCurrentData[nBufIdx++] = nCurrentData;
 800df0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df0c:	1c5a      	adds	r2, r3, #1
 800df0e:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	683a      	ldr	r2, [r7, #0]
 800df14:	4413      	add	r3, r2
 800df16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df18:	601a      	str	r2, [r3, #0]

			/*Clear the I1 values in Current and Average Current Register groups*/
			nCmd = ADBMS6948_CMD_CLRCI;
 800df1a:	f44f 63f2 	mov.w	r3, #1936	; 0x790
 800df1e:	83bb      	strh	r3, [r7, #28]
			Adbms6948_Cmn_SendCommandOnly(nCmd, TRUE, knChainID);
 800df20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df24:	8bbb      	ldrh	r3, [r7, #28]
 800df26:	2101      	movs	r1, #1
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fe ff9e 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
        }

        /*Populate I2 value if applicable*/
        if (ADBMS6948_CURRENT_I1I2 == eCurrentSel || ADBMS6948_CURRENT_I2 == eCurrentSel)
 800df2e:	79bb      	ldrb	r3, [r7, #6]
 800df30:	2b02      	cmp	r3, #2
 800df32:	d002      	beq.n	800df3a <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x1be>
 800df34:	79bb      	ldrb	r3, [r7, #6]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d178      	bne.n	800e02c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2b0>
        {
            /*Current register and Average current register have different
            number of bits*/
            switch (eCurrentMeasData)
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d01a      	beq.n	800df76 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x1fa>
 800df40:	2b01      	cmp	r3, #1
 800df42:	d135      	bne.n	800dfb0 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x234>
            {
                case ADBMS6948_CURRENT_MEAS_DATA_AVERAGED:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 5u]) & 0xFF) << 16u);
 800df44:	7ffa      	ldrb	r2, [r7, #31]
 800df46:	8c3b      	ldrh	r3, [r7, #32]
 800df48:	1d59      	adds	r1, r3, #5
 800df4a:	4613      	mov	r3, r2
 800df4c:	005b      	lsls	r3, r3, #1
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df56:	4413      	add	r3, r2
 800df58:	440b      	add	r3, r1
 800df5a:	3b20      	subs	r3, #32
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	041b      	lsls	r3, r3, #16
 800df60:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00800000))
 800df62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d028      	beq.n	800dfbe <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x242>
                    {
                        nCurrentData |= 0xFF000000;
 800df6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df72:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800df74:	e023      	b.n	800dfbe <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x242>
                case ADBMS6948_CURRENT_MEAS_DATA:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 5u]) & 0x07) << 16u);
 800df76:	7ffa      	ldrb	r2, [r7, #31]
 800df78:	8c3b      	ldrh	r3, [r7, #32]
 800df7a:	1d59      	adds	r1, r3, #5
 800df7c:	4613      	mov	r3, r2
 800df7e:	005b      	lsls	r3, r3, #1
 800df80:	4413      	add	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df88:	4413      	add	r3, r2
 800df8a:	440b      	add	r3, r1
 800df8c:	3b20      	subs	r3, #32
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	041b      	lsls	r3, r3, #16
 800df92:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800df96:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00040000))
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00f      	beq.n	800dfc2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x246>
                    {
                        nCurrentData |= 0xFFF80000;
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 800dfa8:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 800dfac:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800dfae:	e008      	b.n	800dfc2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x246>
                default:
                    nRet |= E_NOT_OK;
 800dfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfb4:	f043 0301 	orr.w	r3, r3, #1
 800dfb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dfbc:	e002      	b.n	800dfc4 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x248>
                    break;
 800dfbe:	bf00      	nop
 800dfc0:	e000      	b.n	800dfc4 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x248>
                    break;
 800dfc2:	bf00      	nop
            }
            nCurrentData |= ((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 4u] << 8u);
 800dfc4:	7ffa      	ldrb	r2, [r7, #31]
 800dfc6:	8c3b      	ldrh	r3, [r7, #32]
 800dfc8:	1d19      	adds	r1, r3, #4
 800dfca:	4613      	mov	r3, r2
 800dfcc:	005b      	lsls	r3, r3, #1
 800dfce:	4413      	add	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfd6:	4413      	add	r3, r2
 800dfd8:	440b      	add	r3, r1
 800dfda:	3b20      	subs	r3, #32
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	021b      	lsls	r3, r3, #8
 800dfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	62bb      	str	r3, [r7, #40]	; 0x28
            nCurrentData |= (uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 3u];
 800dfe6:	7ffa      	ldrb	r2, [r7, #31]
 800dfe8:	8c3b      	ldrh	r3, [r7, #32]
 800dfea:	1cd9      	adds	r1, r3, #3
 800dfec:	4613      	mov	r3, r2
 800dfee:	005b      	lsls	r3, r3, #1
 800dff0:	4413      	add	r3, r2
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dff8:	4413      	add	r3, r2
 800dffa:	440b      	add	r3, r1
 800dffc:	3b20      	subs	r3, #32
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	461a      	mov	r2, r3
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	4313      	orrs	r3, r2
 800e006:	62bb      	str	r3, [r7, #40]	; 0x28
            pnCurrentData[nBufIdx++] = nCurrentData;
 800e008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e00a:	1c5a      	adds	r2, r3, #1
 800e00c:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	4413      	add	r3, r2
 800e014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e016:	601a      	str	r2, [r3, #0]

			/*Clear the I2 values in Current and Average Current Register groups*/
			nCmd = ADBMS6948_CMD_CLRSI;
 800e018:	f240 7392 	movw	r3, #1938	; 0x792
 800e01c:	83bb      	strh	r3, [r7, #28]
			Adbms6948_Cmn_SendCommandOnly(nCmd, TRUE, knChainID);
 800e01e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e022:	8bbb      	ldrh	r3, [r7, #28]
 800e024:	2101      	movs	r1, #1
 800e026:	4618      	mov	r0, r3
 800e028:	f7fe ff1f 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
        }
	}
	if ((E_OK == nRet) && (TRUE == bSendUnsnap))
 800e02c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e030:	2b00      	cmp	r3, #0
 800e032:	d10c      	bne.n	800e04e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2d2>
 800e034:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d108      	bne.n	800e04e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2d2>
	{
		nCmdCode = ADBMS6948_CMD_UNSNAP;
 800e03c:	232f      	movs	r3, #47	; 0x2f
 800e03e:	847b      	strh	r3, [r7, #34]	; 0x22
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800e040:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e046:	2101      	movs	r1, #1
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fe ff0e 	bl	800ce6a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}
	/* Verify the command counter as CLRCI or CLRSI or both commands were sent*/
	nRet |= Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800e04e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e052:	4619      	mov	r1, r3
 800e054:	2001      	movs	r0, #1
 800e056:	f7fe fb4f 	bl	800c6f8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800e05a:	4603      	mov	r3, r0
 800e05c:	461a      	mov	r2, r3
 800e05e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e062:	4313      	orrs	r3, r2
 800e064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

return(nRet);
 800e068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3730      	adds	r7, #48	; 0x30
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType>:
/*****************************************************************************/
static boolean  Adbms6948_lIsInvalidCellMeasDataType
(
    Adbms6948_CellMeasDataType      eCellMeasData
)
{
 800e074:	b480      	push	{r7}
 800e076:	b085      	sub	sp, #20
 800e078:	af00      	add	r7, sp, #0
 800e07a:	4603      	mov	r3, r0
 800e07c:	71fb      	strb	r3, [r7, #7]
    boolean  bRet;
    switch(eCellMeasData)
 800e07e:	79fb      	ldrb	r3, [r7, #7]
 800e080:	2b03      	cmp	r3, #3
 800e082:	d802      	bhi.n	800e08a <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType+0x16>
    {
        case ADBMS6948_CELL_MEAS_DATA:
        case ADBMS6948_CELL_MEAS_DATA_REDUNDANT:
        case ADBMS6948_CELL_MEAS_DATA_AVERAGED:
        case ADBMS6948_CELL_MEAS_DATA_FILTERED:
            bRet = FALSE;
 800e084:	2300      	movs	r3, #0
 800e086:	73fb      	strb	r3, [r7, #15]
            break;
 800e088:	e002      	b.n	800e090 <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType+0x1c>
        default:
            bRet = TRUE;
 800e08a:	2301      	movs	r3, #1
 800e08c:	73fb      	strb	r3, [r7, #15]
            break;
 800e08e:	bf00      	nop
    }
    return(bRet);
 800e090:	7bfb      	ldrb	r3, [r7, #15]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	bc80      	pop	{r7}
 800e09a:	4770      	bx	lr

0800e09c <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType>:
/*****************************************************************************/
static boolean  Adbms6948_lIsInvalidCurrentMeasDataType
(
    Adbms6948_CurrentMeasDataType      eCurrentMeasData
)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	71fb      	strb	r3, [r7, #7]
    boolean  bRet;
    switch(eCurrentMeasData)
 800e0a6:	79fb      	ldrb	r3, [r7, #7]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d802      	bhi.n	800e0b2 <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType+0x16>
    {
        case ADBMS6948_CURRENT_MEAS_DATA:
        case ADBMS6948_CURRENT_MEAS_DATA_AVERAGED:
            bRet = FALSE;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	73fb      	strb	r3, [r7, #15]
            break;
 800e0b0:	e002      	b.n	800e0b8 <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType+0x1c>
        default:
            bRet = TRUE;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	73fb      	strb	r3, [r7, #15]
            break;
 800e0b6:	bf00      	nop
    }
    return(bRet);
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bc80      	pop	{r7}
 800e0c2:	4770      	bx	lr

0800e0c4 <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType>:
/*****************************************************************************/
static boolean  Adbms6948_lIsInvalidCurrentSelType
(
    Adbms6948_CurrentSelType      eCurrentSel
)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b085      	sub	sp, #20
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	71fb      	strb	r3, [r7, #7]
    boolean  bRet;
    switch(eCurrentSel)
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d802      	bhi.n	800e0da <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType+0x16>
    {
        case ADBMS6948_CURRENT_I1:
        case ADBMS6948_CURRENT_I2:
        case ADBMS6948_CURRENT_I1I2:
            bRet = FALSE;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	73fb      	strb	r3, [r7, #15]
            break;
 800e0d8:	e002      	b.n	800e0e0 <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType+0x1c>
        default:
            bRet = TRUE;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	73fb      	strb	r3, [r7, #15]
            break;
 800e0de:	bf00      	nop
    }
    return(bRet);
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bc80      	pop	{r7}
 800e0ea:	4770      	bx	lr

0800e0ec <_Z24Adbms6948_Pec15CalculatePhh>:
uint16_t Adbms6948_Pec15Calculate
(
    uint8_t 	*pDataBuf,
    uint8_t   	 nLength
)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	70fb      	strb	r3, [r7, #3]
    uint16_t  nRemainder, nTableAddr;
    uint8_t   nByteIndex;

    nRemainder = 16u;/* initialize the PEC */
 800e0f8:	2310      	movs	r3, #16
 800e0fa:	81fb      	strh	r3, [r7, #14]

    /* loops for each byte in data array */
    for (nByteIndex = 0u; nByteIndex < nLength; nByteIndex++)
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	737b      	strb	r3, [r7, #13]
 800e100:	7b7a      	ldrb	r2, [r7, #13]
 800e102:	78fb      	ldrb	r3, [r7, #3]
 800e104:	429a      	cmp	r2, r3
 800e106:	d21a      	bcs.n	800e13e <_Z24Adbms6948_Pec15CalculatePhh+0x52>
    {
        /* calculate PEC table address */
        nTableAddr = (uint16_t)(((uint16_t)(nRemainder >> 7) ^ (uint8_t)pDataBuf[nByteIndex]) &
 800e108:	89fb      	ldrh	r3, [r7, #14]
 800e10a:	11db      	asrs	r3, r3, #7
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	7b7b      	ldrb	r3, [r7, #13]
 800e110:	6879      	ldr	r1, [r7, #4]
 800e112:	440b      	add	r3, r1
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	b29b      	uxth	r3, r3
 800e118:	4053      	eors	r3, r2
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	817b      	strh	r3, [r7, #10]
                (uint8_t)0xff);
        nRemainder = (uint16_t)((nRemainder << 8) ^ Adbms6948_Crc15Table[nTableAddr]);
 800e120:	89fb      	ldrh	r3, [r7, #14]
 800e122:	021b      	lsls	r3, r3, #8
 800e124:	b21a      	sxth	r2, r3
 800e126:	897b      	ldrh	r3, [r7, #10]
 800e128:	4909      	ldr	r1, [pc, #36]	; (800e150 <_Z24Adbms6948_Pec15CalculatePhh+0x64>)
 800e12a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e12e:	b21b      	sxth	r3, r3
 800e130:	4053      	eors	r3, r2
 800e132:	b21b      	sxth	r3, r3
 800e134:	81fb      	strh	r3, [r7, #14]
    for (nByteIndex = 0u; nByteIndex < nLength; nByteIndex++)
 800e136:	7b7b      	ldrb	r3, [r7, #13]
 800e138:	3301      	adds	r3, #1
 800e13a:	737b      	strb	r3, [r7, #13]
 800e13c:	e7e0      	b.n	800e100 <_Z24Adbms6948_Pec15CalculatePhh+0x14>
    }
    /* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
    return(nRemainder * 2u);
 800e13e:	89fb      	ldrh	r3, [r7, #14]
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	b29b      	uxth	r3, r3
}
 800e144:	4618      	mov	r0, r3
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	bc80      	pop	{r7}
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop
 800e150:	0801397c 	.word	0x0801397c

0800e154 <_Z24Adbms6948_Pec10CalculatePhhh>:
(
uint8_t 	*pDataBuf,
boolean  	 bIsRxCmd,
uint8_t   	 nLength
)
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	460b      	mov	r3, r1
 800e15e:	70fb      	strb	r3, [r7, #3]
 800e160:	4613      	mov	r3, r2
 800e162:	70bb      	strb	r3, [r7, #2]
    uint16_t   nRemainder = 16u;/* PEC_SEED */
 800e164:	2310      	movs	r3, #16
 800e166:	81fb      	strh	r3, [r7, #14]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t   nPolynomial = 0x8Fu;
 800e168:	238f      	movs	r3, #143	; 0x8f
 800e16a:	817b      	strh	r3, [r7, #10]
    uint8_t   nByteIndex, nBitIndex;
    uint16_t   nTableAddr;

    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 800e16c:	2300      	movs	r3, #0
 800e16e:	737b      	strb	r3, [r7, #13]
 800e170:	7b7a      	ldrb	r2, [r7, #13]
 800e172:	78bb      	ldrb	r3, [r7, #2]
 800e174:	429a      	cmp	r2, r3
 800e176:	d218      	bcs.n	800e1aa <_Z24Adbms6948_Pec10CalculatePhhh+0x56>
    {
        /* calculate PEC table address */
        nTableAddr = (uint16_t)(((uint16_t)(nRemainder >> 2) ^ (uint8_t)pDataBuf[nByteIndex]) &
 800e178:	89fb      	ldrh	r3, [r7, #14]
 800e17a:	109b      	asrs	r3, r3, #2
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	7b7b      	ldrb	r3, [r7, #13]
 800e180:	6879      	ldr	r1, [r7, #4]
 800e182:	440b      	add	r3, r1
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	b29b      	uxth	r3, r3
 800e188:	4053      	eors	r3, r2
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	813b      	strh	r3, [r7, #8]
                (uint8_t)0xff);
        nRemainder = (uint16_t)(((uint16_t)(nRemainder << 8)) ^ Adbms6948_Crc10Table[nTableAddr]);
 800e190:	89fb      	ldrh	r3, [r7, #14]
 800e192:	021b      	lsls	r3, r3, #8
 800e194:	b29a      	uxth	r2, r3
 800e196:	893b      	ldrh	r3, [r7, #8]
 800e198:	491c      	ldr	r1, [pc, #112]	; (800e20c <_Z24Adbms6948_Pec10CalculatePhhh+0xb8>)
 800e19a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e19e:	4053      	eors	r3, r2
 800e1a0:	81fb      	strh	r3, [r7, #14]
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 800e1a2:	7b7b      	ldrb	r3, [r7, #13]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	737b      	strb	r3, [r7, #13]
 800e1a8:	e7e2      	b.n	800e170 <_Z24Adbms6948_Pec10CalculatePhhh+0x1c>
    }
    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == TRUE)
 800e1aa:	78fb      	ldrb	r3, [r7, #3]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d10b      	bne.n	800e1c8 <_Z24Adbms6948_Pec10CalculatePhhh+0x74>
    {
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 800e1b0:	78bb      	ldrb	r3, [r7, #2]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	4413      	add	r3, r2
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
 800e1c0:	b29a      	uxth	r2, r3
 800e1c2:	89fb      	ldrh	r3, [r7, #14]
 800e1c4:	4053      	eors	r3, r2
 800e1c6:	81fb      	strh	r3, [r7, #14]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800e1c8:	2306      	movs	r3, #6
 800e1ca:	733b      	strb	r3, [r7, #12]
 800e1cc:	7b3b      	ldrb	r3, [r7, #12]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d013      	beq.n	800e1fa <_Z24Adbms6948_Pec10CalculatePhhh+0xa6>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 800e1d2:	89fb      	ldrh	r3, [r7, #14]
 800e1d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d007      	beq.n	800e1ec <_Z24Adbms6948_Pec10CalculatePhhh+0x98>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800e1dc:	89fb      	ldrh	r3, [r7, #14]
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	81fb      	strh	r3, [r7, #14]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 800e1e2:	89fa      	ldrh	r2, [r7, #14]
 800e1e4:	897b      	ldrh	r3, [r7, #10]
 800e1e6:	4053      	eors	r3, r2
 800e1e8:	81fb      	strh	r3, [r7, #14]
 800e1ea:	e002      	b.n	800e1f2 <_Z24Adbms6948_Pec10CalculatePhhh+0x9e>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800e1ec:	89fb      	ldrh	r3, [r7, #14]
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	81fb      	strh	r3, [r7, #14]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800e1f2:	7b3b      	ldrb	r3, [r7, #12]
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	733b      	strb	r3, [r7, #12]
 800e1f8:	e7e8      	b.n	800e1cc <_Z24Adbms6948_Pec10CalculatePhhh+0x78>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 800e1fa:	89fb      	ldrh	r3, [r7, #14]
 800e1fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e200:	b29b      	uxth	r3, r3
}
 800e202:	4618      	mov	r0, r3
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	bc80      	pop	{r7}
 800e20a:	4770      	bx	lr
 800e20c:	08013b7c 	.word	0x08013b7c

0800e210 <_Z14Adbms_Delay_usm>:
{

}

__attribute__((weak)) void Adbms_Delay_us(uint32_t us)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  if (us > 1000) us /= 1000;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e21e:	d909      	bls.n	800e234 <_Z14Adbms_Delay_usm+0x24>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4a08      	ldr	r2, [pc, #32]	; (800e244 <_Z14Adbms_Delay_usm+0x34>)
 800e224:	fba2 2303 	umull	r2, r3, r2, r3
 800e228:	099b      	lsrs	r3, r3, #6
 800e22a:	607b      	str	r3, [r7, #4]
  else return (void) Adbms_Delay(1);
  Adbms_Delay(us);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7f3 f859 	bl	80012e4 <_Z11Adbms_Delaym>
 800e232:	e003      	b.n	800e23c <_Z14Adbms_Delay_usm+0x2c>
  else return (void) Adbms_Delay(1);
 800e234:	2001      	movs	r0, #1
 800e236:	f7f3 f855 	bl	80012e4 <_Z11Adbms_Delaym>
 800e23a:	bf00      	nop
}
 800e23c:	3708      	adds	r7, #8
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	10624dd3 	.word	0x10624dd3

0800e248 <log>:
 800e248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e24a:	4604      	mov	r4, r0
 800e24c:	460d      	mov	r5, r1
 800e24e:	f000 f837 	bl	800e2c0 <__ieee754_log>
 800e252:	4b17      	ldr	r3, [pc, #92]	; (800e2b0 <log+0x68>)
 800e254:	4606      	mov	r6, r0
 800e256:	f993 3000 	ldrsb.w	r3, [r3]
 800e25a:	460f      	mov	r7, r1
 800e25c:	3301      	adds	r3, #1
 800e25e:	d01a      	beq.n	800e296 <log+0x4e>
 800e260:	4622      	mov	r2, r4
 800e262:	462b      	mov	r3, r5
 800e264:	4620      	mov	r0, r4
 800e266:	4629      	mov	r1, r5
 800e268:	f7f2 fc3c 	bl	8000ae4 <__aeabi_dcmpun>
 800e26c:	b998      	cbnz	r0, 800e296 <log+0x4e>
 800e26e:	2200      	movs	r2, #0
 800e270:	2300      	movs	r3, #0
 800e272:	4620      	mov	r0, r4
 800e274:	4629      	mov	r1, r5
 800e276:	f7f2 fc2b 	bl	8000ad0 <__aeabi_dcmpgt>
 800e27a:	b960      	cbnz	r0, 800e296 <log+0x4e>
 800e27c:	2200      	movs	r2, #0
 800e27e:	2300      	movs	r3, #0
 800e280:	4620      	mov	r0, r4
 800e282:	4629      	mov	r1, r5
 800e284:	f7f2 fbfc 	bl	8000a80 <__aeabi_dcmpeq>
 800e288:	b140      	cbz	r0, 800e29c <log+0x54>
 800e28a:	f000 f9d1 	bl	800e630 <__errno>
 800e28e:	2322      	movs	r3, #34	; 0x22
 800e290:	2600      	movs	r6, #0
 800e292:	4f08      	ldr	r7, [pc, #32]	; (800e2b4 <log+0x6c>)
 800e294:	6003      	str	r3, [r0, #0]
 800e296:	4630      	mov	r0, r6
 800e298:	4639      	mov	r1, r7
 800e29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e29c:	f000 f9c8 	bl	800e630 <__errno>
 800e2a0:	2321      	movs	r3, #33	; 0x21
 800e2a2:	6003      	str	r3, [r0, #0]
 800e2a4:	4804      	ldr	r0, [pc, #16]	; (800e2b8 <log+0x70>)
 800e2a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e2aa:	f000 b9bb 	b.w	800e624 <nan>
 800e2ae:	bf00      	nop
 800e2b0:	20000079 	.word	0x20000079
 800e2b4:	fff00000 	.word	0xfff00000
 800e2b8:	08014258 	.word	0x08014258
 800e2bc:	00000000 	.word	0x00000000

0800e2c0 <__ieee754_log>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	460d      	mov	r5, r1
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	da24      	bge.n	800e31c <__ieee754_log+0x5c>
 800e2d2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e2d6:	4304      	orrs	r4, r0
 800e2d8:	d108      	bne.n	800e2ec <__ieee754_log+0x2c>
 800e2da:	2200      	movs	r2, #0
 800e2dc:	2300      	movs	r3, #0
 800e2de:	2000      	movs	r0, #0
 800e2e0:	49cb      	ldr	r1, [pc, #812]	; (800e610 <__ieee754_log+0x350>)
 800e2e2:	f7f2 fa8f 	bl	8000804 <__aeabi_ddiv>
 800e2e6:	b007      	add	sp, #28
 800e2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ec:	2900      	cmp	r1, #0
 800e2ee:	da04      	bge.n	800e2fa <__ieee754_log+0x3a>
 800e2f0:	f7f1 ffa6 	bl	8000240 <__aeabi_dsub>
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e7f3      	b.n	800e2e2 <__ieee754_log+0x22>
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4bc5      	ldr	r3, [pc, #788]	; (800e614 <__ieee754_log+0x354>)
 800e2fe:	f7f2 f957 	bl	80005b0 <__aeabi_dmul>
 800e302:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	460d      	mov	r5, r1
 800e30c:	49c2      	ldr	r1, [pc, #776]	; (800e618 <__ieee754_log+0x358>)
 800e30e:	428d      	cmp	r5, r1
 800e310:	dd06      	ble.n	800e320 <__ieee754_log+0x60>
 800e312:	4610      	mov	r0, r2
 800e314:	4619      	mov	r1, r3
 800e316:	f7f1 ff95 	bl	8000244 <__adddf3>
 800e31a:	e7e4      	b.n	800e2e6 <__ieee754_log+0x26>
 800e31c:	2600      	movs	r6, #0
 800e31e:	e7f5      	b.n	800e30c <__ieee754_log+0x4c>
 800e320:	152c      	asrs	r4, r5, #20
 800e322:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e326:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800e32a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e32e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800e332:	4426      	add	r6, r4
 800e334:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800e338:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800e33c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800e340:	ea41 0305 	orr.w	r3, r1, r5
 800e344:	4610      	mov	r0, r2
 800e346:	4619      	mov	r1, r3
 800e348:	2200      	movs	r2, #0
 800e34a:	4bb4      	ldr	r3, [pc, #720]	; (800e61c <__ieee754_log+0x35c>)
 800e34c:	f7f1 ff78 	bl	8000240 <__aeabi_dsub>
 800e350:	1cab      	adds	r3, r5, #2
 800e352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e356:	2b02      	cmp	r3, #2
 800e358:	4682      	mov	sl, r0
 800e35a:	468b      	mov	fp, r1
 800e35c:	f04f 0200 	mov.w	r2, #0
 800e360:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800e364:	dc53      	bgt.n	800e40e <__ieee754_log+0x14e>
 800e366:	2300      	movs	r3, #0
 800e368:	f7f2 fb8a 	bl	8000a80 <__aeabi_dcmpeq>
 800e36c:	b1d0      	cbz	r0, 800e3a4 <__ieee754_log+0xe4>
 800e36e:	2c00      	cmp	r4, #0
 800e370:	f000 8122 	beq.w	800e5b8 <__ieee754_log+0x2f8>
 800e374:	4620      	mov	r0, r4
 800e376:	f7f2 f8b1 	bl	80004dc <__aeabi_i2d>
 800e37a:	a391      	add	r3, pc, #580	; (adr r3, 800e5c0 <__ieee754_log+0x300>)
 800e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e380:	4606      	mov	r6, r0
 800e382:	460f      	mov	r7, r1
 800e384:	f7f2 f914 	bl	80005b0 <__aeabi_dmul>
 800e388:	a38f      	add	r3, pc, #572	; (adr r3, 800e5c8 <__ieee754_log+0x308>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	4604      	mov	r4, r0
 800e390:	460d      	mov	r5, r1
 800e392:	4630      	mov	r0, r6
 800e394:	4639      	mov	r1, r7
 800e396:	f7f2 f90b 	bl	80005b0 <__aeabi_dmul>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	4620      	mov	r0, r4
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	e7b8      	b.n	800e316 <__ieee754_log+0x56>
 800e3a4:	a38a      	add	r3, pc, #552	; (adr r3, 800e5d0 <__ieee754_log+0x310>)
 800e3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3aa:	4650      	mov	r0, sl
 800e3ac:	4659      	mov	r1, fp
 800e3ae:	f7f2 f8ff 	bl	80005b0 <__aeabi_dmul>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	4999      	ldr	r1, [pc, #612]	; (800e620 <__ieee754_log+0x360>)
 800e3ba:	f7f1 ff41 	bl	8000240 <__aeabi_dsub>
 800e3be:	4652      	mov	r2, sl
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	460f      	mov	r7, r1
 800e3c4:	465b      	mov	r3, fp
 800e3c6:	4650      	mov	r0, sl
 800e3c8:	4659      	mov	r1, fp
 800e3ca:	f7f2 f8f1 	bl	80005b0 <__aeabi_dmul>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	4639      	mov	r1, r7
 800e3d6:	f7f2 f8eb 	bl	80005b0 <__aeabi_dmul>
 800e3da:	4606      	mov	r6, r0
 800e3dc:	460f      	mov	r7, r1
 800e3de:	b914      	cbnz	r4, 800e3e6 <__ieee754_log+0x126>
 800e3e0:	4632      	mov	r2, r6
 800e3e2:	463b      	mov	r3, r7
 800e3e4:	e0a2      	b.n	800e52c <__ieee754_log+0x26c>
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f7f2 f878 	bl	80004dc <__aeabi_i2d>
 800e3ec:	a374      	add	r3, pc, #464	; (adr r3, 800e5c0 <__ieee754_log+0x300>)
 800e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f2:	4680      	mov	r8, r0
 800e3f4:	4689      	mov	r9, r1
 800e3f6:	f7f2 f8db 	bl	80005b0 <__aeabi_dmul>
 800e3fa:	a373      	add	r3, pc, #460	; (adr r3, 800e5c8 <__ieee754_log+0x308>)
 800e3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e400:	4604      	mov	r4, r0
 800e402:	460d      	mov	r5, r1
 800e404:	4640      	mov	r0, r8
 800e406:	4649      	mov	r1, r9
 800e408:	f7f2 f8d2 	bl	80005b0 <__aeabi_dmul>
 800e40c:	e0a7      	b.n	800e55e <__ieee754_log+0x29e>
 800e40e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e412:	f7f1 ff17 	bl	8000244 <__adddf3>
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	4650      	mov	r0, sl
 800e41c:	4659      	mov	r1, fp
 800e41e:	f7f2 f9f1 	bl	8000804 <__aeabi_ddiv>
 800e422:	e9cd 0100 	strd	r0, r1, [sp]
 800e426:	4620      	mov	r0, r4
 800e428:	f7f2 f858 	bl	80004dc <__aeabi_i2d>
 800e42c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e434:	4610      	mov	r0, r2
 800e436:	4619      	mov	r1, r3
 800e438:	f7f2 f8ba 	bl	80005b0 <__aeabi_dmul>
 800e43c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e440:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e444:	4602      	mov	r2, r0
 800e446:	9305      	str	r3, [sp, #20]
 800e448:	460b      	mov	r3, r1
 800e44a:	4606      	mov	r6, r0
 800e44c:	460f      	mov	r7, r1
 800e44e:	f7f2 f8af 	bl	80005b0 <__aeabi_dmul>
 800e452:	a361      	add	r3, pc, #388	; (adr r3, 800e5d8 <__ieee754_log+0x318>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	4680      	mov	r8, r0
 800e45a:	4689      	mov	r9, r1
 800e45c:	f7f2 f8a8 	bl	80005b0 <__aeabi_dmul>
 800e460:	a35f      	add	r3, pc, #380	; (adr r3, 800e5e0 <__ieee754_log+0x320>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 feed 	bl	8000244 <__adddf3>
 800e46a:	4642      	mov	r2, r8
 800e46c:	464b      	mov	r3, r9
 800e46e:	f7f2 f89f 	bl	80005b0 <__aeabi_dmul>
 800e472:	a35d      	add	r3, pc, #372	; (adr r3, 800e5e8 <__ieee754_log+0x328>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f1 fee4 	bl	8000244 <__adddf3>
 800e47c:	4642      	mov	r2, r8
 800e47e:	464b      	mov	r3, r9
 800e480:	f7f2 f896 	bl	80005b0 <__aeabi_dmul>
 800e484:	a35a      	add	r3, pc, #360	; (adr r3, 800e5f0 <__ieee754_log+0x330>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 fedb 	bl	8000244 <__adddf3>
 800e48e:	4632      	mov	r2, r6
 800e490:	463b      	mov	r3, r7
 800e492:	f7f2 f88d 	bl	80005b0 <__aeabi_dmul>
 800e496:	a358      	add	r3, pc, #352	; (adr r3, 800e5f8 <__ieee754_log+0x338>)
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	4606      	mov	r6, r0
 800e49e:	460f      	mov	r7, r1
 800e4a0:	4640      	mov	r0, r8
 800e4a2:	4649      	mov	r1, r9
 800e4a4:	f7f2 f884 	bl	80005b0 <__aeabi_dmul>
 800e4a8:	a355      	add	r3, pc, #340	; (adr r3, 800e600 <__ieee754_log+0x340>)
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	f7f1 fec9 	bl	8000244 <__adddf3>
 800e4b2:	4642      	mov	r2, r8
 800e4b4:	464b      	mov	r3, r9
 800e4b6:	f7f2 f87b 	bl	80005b0 <__aeabi_dmul>
 800e4ba:	a353      	add	r3, pc, #332	; (adr r3, 800e608 <__ieee754_log+0x348>)
 800e4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c0:	f7f1 fec0 	bl	8000244 <__adddf3>
 800e4c4:	4642      	mov	r2, r8
 800e4c6:	464b      	mov	r3, r9
 800e4c8:	f7f2 f872 	bl	80005b0 <__aeabi_dmul>
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7f1 feb6 	bl	8000244 <__adddf3>
 800e4d8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e4dc:	9b05      	ldr	r3, [sp, #20]
 800e4de:	3551      	adds	r5, #81	; 0x51
 800e4e0:	431d      	orrs	r5, r3
 800e4e2:	2d00      	cmp	r5, #0
 800e4e4:	4680      	mov	r8, r0
 800e4e6:	4689      	mov	r9, r1
 800e4e8:	dd48      	ble.n	800e57c <__ieee754_log+0x2bc>
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	4b4c      	ldr	r3, [pc, #304]	; (800e620 <__ieee754_log+0x360>)
 800e4ee:	4650      	mov	r0, sl
 800e4f0:	4659      	mov	r1, fp
 800e4f2:	f7f2 f85d 	bl	80005b0 <__aeabi_dmul>
 800e4f6:	4652      	mov	r2, sl
 800e4f8:	465b      	mov	r3, fp
 800e4fa:	f7f2 f859 	bl	80005b0 <__aeabi_dmul>
 800e4fe:	4602      	mov	r2, r0
 800e500:	460b      	mov	r3, r1
 800e502:	4606      	mov	r6, r0
 800e504:	460f      	mov	r7, r1
 800e506:	4640      	mov	r0, r8
 800e508:	4649      	mov	r1, r9
 800e50a:	f7f1 fe9b 	bl	8000244 <__adddf3>
 800e50e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e512:	f7f2 f84d 	bl	80005b0 <__aeabi_dmul>
 800e516:	4680      	mov	r8, r0
 800e518:	4689      	mov	r9, r1
 800e51a:	b964      	cbnz	r4, 800e536 <__ieee754_log+0x276>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	4630      	mov	r0, r6
 800e522:	4639      	mov	r1, r7
 800e524:	f7f1 fe8c 	bl	8000240 <__aeabi_dsub>
 800e528:	4602      	mov	r2, r0
 800e52a:	460b      	mov	r3, r1
 800e52c:	4650      	mov	r0, sl
 800e52e:	4659      	mov	r1, fp
 800e530:	f7f1 fe86 	bl	8000240 <__aeabi_dsub>
 800e534:	e6d7      	b.n	800e2e6 <__ieee754_log+0x26>
 800e536:	a322      	add	r3, pc, #136	; (adr r3, 800e5c0 <__ieee754_log+0x300>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e540:	f7f2 f836 	bl	80005b0 <__aeabi_dmul>
 800e544:	a320      	add	r3, pc, #128	; (adr r3, 800e5c8 <__ieee754_log+0x308>)
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	4604      	mov	r4, r0
 800e54c:	460d      	mov	r5, r1
 800e54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e552:	f7f2 f82d 	bl	80005b0 <__aeabi_dmul>
 800e556:	4642      	mov	r2, r8
 800e558:	464b      	mov	r3, r9
 800e55a:	f7f1 fe73 	bl	8000244 <__adddf3>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	4630      	mov	r0, r6
 800e564:	4639      	mov	r1, r7
 800e566:	f7f1 fe6b 	bl	8000240 <__aeabi_dsub>
 800e56a:	4652      	mov	r2, sl
 800e56c:	465b      	mov	r3, fp
 800e56e:	f7f1 fe67 	bl	8000240 <__aeabi_dsub>
 800e572:	4602      	mov	r2, r0
 800e574:	460b      	mov	r3, r1
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	e7d9      	b.n	800e530 <__ieee754_log+0x270>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4650      	mov	r0, sl
 800e582:	4659      	mov	r1, fp
 800e584:	f7f1 fe5c 	bl	8000240 <__aeabi_dsub>
 800e588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e58c:	f7f2 f810 	bl	80005b0 <__aeabi_dmul>
 800e590:	4606      	mov	r6, r0
 800e592:	460f      	mov	r7, r1
 800e594:	2c00      	cmp	r4, #0
 800e596:	f43f af23 	beq.w	800e3e0 <__ieee754_log+0x120>
 800e59a:	a309      	add	r3, pc, #36	; (adr r3, 800e5c0 <__ieee754_log+0x300>)
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5a4:	f7f2 f804 	bl	80005b0 <__aeabi_dmul>
 800e5a8:	a307      	add	r3, pc, #28	; (adr r3, 800e5c8 <__ieee754_log+0x308>)
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	460d      	mov	r5, r1
 800e5b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b6:	e727      	b.n	800e408 <__ieee754_log+0x148>
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	2100      	movs	r1, #0
 800e5bc:	e693      	b.n	800e2e6 <__ieee754_log+0x26>
 800e5be:	bf00      	nop
 800e5c0:	fee00000 	.word	0xfee00000
 800e5c4:	3fe62e42 	.word	0x3fe62e42
 800e5c8:	35793c76 	.word	0x35793c76
 800e5cc:	3dea39ef 	.word	0x3dea39ef
 800e5d0:	55555555 	.word	0x55555555
 800e5d4:	3fd55555 	.word	0x3fd55555
 800e5d8:	df3e5244 	.word	0xdf3e5244
 800e5dc:	3fc2f112 	.word	0x3fc2f112
 800e5e0:	96cb03de 	.word	0x96cb03de
 800e5e4:	3fc74664 	.word	0x3fc74664
 800e5e8:	94229359 	.word	0x94229359
 800e5ec:	3fd24924 	.word	0x3fd24924
 800e5f0:	55555593 	.word	0x55555593
 800e5f4:	3fe55555 	.word	0x3fe55555
 800e5f8:	d078c69f 	.word	0xd078c69f
 800e5fc:	3fc39a09 	.word	0x3fc39a09
 800e600:	1d8e78af 	.word	0x1d8e78af
 800e604:	3fcc71c5 	.word	0x3fcc71c5
 800e608:	9997fa04 	.word	0x9997fa04
 800e60c:	3fd99999 	.word	0x3fd99999
 800e610:	c3500000 	.word	0xc3500000
 800e614:	43500000 	.word	0x43500000
 800e618:	7fefffff 	.word	0x7fefffff
 800e61c:	3ff00000 	.word	0x3ff00000
 800e620:	3fe00000 	.word	0x3fe00000

0800e624 <nan>:
 800e624:	2000      	movs	r0, #0
 800e626:	4901      	ldr	r1, [pc, #4]	; (800e62c <nan+0x8>)
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	7ff80000 	.word	0x7ff80000

0800e630 <__errno>:
 800e630:	4b01      	ldr	r3, [pc, #4]	; (800e638 <__errno+0x8>)
 800e632:	6818      	ldr	r0, [r3, #0]
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	2000007c 	.word	0x2000007c

0800e63c <__libc_init_array>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	2600      	movs	r6, #0
 800e640:	4d0c      	ldr	r5, [pc, #48]	; (800e674 <__libc_init_array+0x38>)
 800e642:	4c0d      	ldr	r4, [pc, #52]	; (800e678 <__libc_init_array+0x3c>)
 800e644:	1b64      	subs	r4, r4, r5
 800e646:	10a4      	asrs	r4, r4, #2
 800e648:	42a6      	cmp	r6, r4
 800e64a:	d109      	bne.n	800e660 <__libc_init_array+0x24>
 800e64c:	f004 fcf6 	bl	801303c <_init>
 800e650:	2600      	movs	r6, #0
 800e652:	4d0a      	ldr	r5, [pc, #40]	; (800e67c <__libc_init_array+0x40>)
 800e654:	4c0a      	ldr	r4, [pc, #40]	; (800e680 <__libc_init_array+0x44>)
 800e656:	1b64      	subs	r4, r4, r5
 800e658:	10a4      	asrs	r4, r4, #2
 800e65a:	42a6      	cmp	r6, r4
 800e65c:	d105      	bne.n	800e66a <__libc_init_array+0x2e>
 800e65e:	bd70      	pop	{r4, r5, r6, pc}
 800e660:	f855 3b04 	ldr.w	r3, [r5], #4
 800e664:	4798      	blx	r3
 800e666:	3601      	adds	r6, #1
 800e668:	e7ee      	b.n	800e648 <__libc_init_array+0xc>
 800e66a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e66e:	4798      	blx	r3
 800e670:	3601      	adds	r6, #1
 800e672:	e7f2      	b.n	800e65a <__libc_init_array+0x1e>
 800e674:	0801425c 	.word	0x0801425c
 800e678:	0801425c 	.word	0x0801425c
 800e67c:	0801425c 	.word	0x0801425c
 800e680:	08014260 	.word	0x08014260

0800e684 <__itoa>:
 800e684:	1e93      	subs	r3, r2, #2
 800e686:	2b22      	cmp	r3, #34	; 0x22
 800e688:	b510      	push	{r4, lr}
 800e68a:	460c      	mov	r4, r1
 800e68c:	d904      	bls.n	800e698 <__itoa+0x14>
 800e68e:	2300      	movs	r3, #0
 800e690:	461c      	mov	r4, r3
 800e692:	700b      	strb	r3, [r1, #0]
 800e694:	4620      	mov	r0, r4
 800e696:	bd10      	pop	{r4, pc}
 800e698:	2a0a      	cmp	r2, #10
 800e69a:	d109      	bne.n	800e6b0 <__itoa+0x2c>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	da07      	bge.n	800e6b0 <__itoa+0x2c>
 800e6a0:	232d      	movs	r3, #45	; 0x2d
 800e6a2:	700b      	strb	r3, [r1, #0]
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	4240      	negs	r0, r0
 800e6a8:	4421      	add	r1, r4
 800e6aa:	f001 fdcb 	bl	8010244 <__utoa>
 800e6ae:	e7f1      	b.n	800e694 <__itoa+0x10>
 800e6b0:	2100      	movs	r1, #0
 800e6b2:	e7f9      	b.n	800e6a8 <__itoa+0x24>

0800e6b4 <itoa>:
 800e6b4:	f7ff bfe6 	b.w	800e684 <__itoa>

0800e6b8 <memcpy>:
 800e6b8:	440a      	add	r2, r1
 800e6ba:	4291      	cmp	r1, r2
 800e6bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6c0:	d100      	bne.n	800e6c4 <memcpy+0xc>
 800e6c2:	4770      	bx	lr
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6ca:	4291      	cmp	r1, r2
 800e6cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6d0:	d1f9      	bne.n	800e6c6 <memcpy+0xe>
 800e6d2:	bd10      	pop	{r4, pc}

0800e6d4 <memset>:
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	4402      	add	r2, r0
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d100      	bne.n	800e6de <memset+0xa>
 800e6dc:	4770      	bx	lr
 800e6de:	f803 1b01 	strb.w	r1, [r3], #1
 800e6e2:	e7f9      	b.n	800e6d8 <memset+0x4>

0800e6e4 <__cvt>:
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ea:	461f      	mov	r7, r3
 800e6ec:	bfbb      	ittet	lt
 800e6ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e6f2:	461f      	movlt	r7, r3
 800e6f4:	2300      	movge	r3, #0
 800e6f6:	232d      	movlt	r3, #45	; 0x2d
 800e6f8:	b088      	sub	sp, #32
 800e6fa:	4614      	mov	r4, r2
 800e6fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e700:	7013      	strb	r3, [r2, #0]
 800e702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e704:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e708:	f023 0820 	bic.w	r8, r3, #32
 800e70c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e710:	d005      	beq.n	800e71e <__cvt+0x3a>
 800e712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e716:	d100      	bne.n	800e71a <__cvt+0x36>
 800e718:	3501      	adds	r5, #1
 800e71a:	2302      	movs	r3, #2
 800e71c:	e000      	b.n	800e720 <__cvt+0x3c>
 800e71e:	2303      	movs	r3, #3
 800e720:	aa07      	add	r2, sp, #28
 800e722:	9204      	str	r2, [sp, #16]
 800e724:	aa06      	add	r2, sp, #24
 800e726:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e72a:	e9cd 3500 	strd	r3, r5, [sp]
 800e72e:	4622      	mov	r2, r4
 800e730:	463b      	mov	r3, r7
 800e732:	f001 ff19 	bl	8010568 <_dtoa_r>
 800e736:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e73a:	4606      	mov	r6, r0
 800e73c:	d102      	bne.n	800e744 <__cvt+0x60>
 800e73e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e740:	07db      	lsls	r3, r3, #31
 800e742:	d522      	bpl.n	800e78a <__cvt+0xa6>
 800e744:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e748:	eb06 0905 	add.w	r9, r6, r5
 800e74c:	d110      	bne.n	800e770 <__cvt+0x8c>
 800e74e:	7833      	ldrb	r3, [r6, #0]
 800e750:	2b30      	cmp	r3, #48	; 0x30
 800e752:	d10a      	bne.n	800e76a <__cvt+0x86>
 800e754:	2200      	movs	r2, #0
 800e756:	2300      	movs	r3, #0
 800e758:	4620      	mov	r0, r4
 800e75a:	4639      	mov	r1, r7
 800e75c:	f7f2 f990 	bl	8000a80 <__aeabi_dcmpeq>
 800e760:	b918      	cbnz	r0, 800e76a <__cvt+0x86>
 800e762:	f1c5 0501 	rsb	r5, r5, #1
 800e766:	f8ca 5000 	str.w	r5, [sl]
 800e76a:	f8da 3000 	ldr.w	r3, [sl]
 800e76e:	4499      	add	r9, r3
 800e770:	2200      	movs	r2, #0
 800e772:	2300      	movs	r3, #0
 800e774:	4620      	mov	r0, r4
 800e776:	4639      	mov	r1, r7
 800e778:	f7f2 f982 	bl	8000a80 <__aeabi_dcmpeq>
 800e77c:	b108      	cbz	r0, 800e782 <__cvt+0x9e>
 800e77e:	f8cd 901c 	str.w	r9, [sp, #28]
 800e782:	2230      	movs	r2, #48	; 0x30
 800e784:	9b07      	ldr	r3, [sp, #28]
 800e786:	454b      	cmp	r3, r9
 800e788:	d307      	bcc.n	800e79a <__cvt+0xb6>
 800e78a:	4630      	mov	r0, r6
 800e78c:	9b07      	ldr	r3, [sp, #28]
 800e78e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e790:	1b9b      	subs	r3, r3, r6
 800e792:	6013      	str	r3, [r2, #0]
 800e794:	b008      	add	sp, #32
 800e796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e79a:	1c59      	adds	r1, r3, #1
 800e79c:	9107      	str	r1, [sp, #28]
 800e79e:	701a      	strb	r2, [r3, #0]
 800e7a0:	e7f0      	b.n	800e784 <__cvt+0xa0>

0800e7a2 <__exponent>:
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7a6:	2900      	cmp	r1, #0
 800e7a8:	f803 2b02 	strb.w	r2, [r3], #2
 800e7ac:	bfb6      	itet	lt
 800e7ae:	222d      	movlt	r2, #45	; 0x2d
 800e7b0:	222b      	movge	r2, #43	; 0x2b
 800e7b2:	4249      	neglt	r1, r1
 800e7b4:	2909      	cmp	r1, #9
 800e7b6:	7042      	strb	r2, [r0, #1]
 800e7b8:	dd2b      	ble.n	800e812 <__exponent+0x70>
 800e7ba:	f10d 0407 	add.w	r4, sp, #7
 800e7be:	46a4      	mov	ip, r4
 800e7c0:	270a      	movs	r7, #10
 800e7c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7c6:	460a      	mov	r2, r1
 800e7c8:	46a6      	mov	lr, r4
 800e7ca:	fb07 1516 	mls	r5, r7, r6, r1
 800e7ce:	2a63      	cmp	r2, #99	; 0x63
 800e7d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e7da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e7de:	dcf0      	bgt.n	800e7c2 <__exponent+0x20>
 800e7e0:	3130      	adds	r1, #48	; 0x30
 800e7e2:	f1ae 0502 	sub.w	r5, lr, #2
 800e7e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e7ea:	4629      	mov	r1, r5
 800e7ec:	1c44      	adds	r4, r0, #1
 800e7ee:	4561      	cmp	r1, ip
 800e7f0:	d30a      	bcc.n	800e808 <__exponent+0x66>
 800e7f2:	f10d 0209 	add.w	r2, sp, #9
 800e7f6:	eba2 020e 	sub.w	r2, r2, lr
 800e7fa:	4565      	cmp	r5, ip
 800e7fc:	bf88      	it	hi
 800e7fe:	2200      	movhi	r2, #0
 800e800:	4413      	add	r3, r2
 800e802:	1a18      	subs	r0, r3, r0
 800e804:	b003      	add	sp, #12
 800e806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e808:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e80c:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e810:	e7ed      	b.n	800e7ee <__exponent+0x4c>
 800e812:	2330      	movs	r3, #48	; 0x30
 800e814:	3130      	adds	r1, #48	; 0x30
 800e816:	7083      	strb	r3, [r0, #2]
 800e818:	70c1      	strb	r1, [r0, #3]
 800e81a:	1d03      	adds	r3, r0, #4
 800e81c:	e7f1      	b.n	800e802 <__exponent+0x60>
	...

0800e820 <_printf_float>:
 800e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	b091      	sub	sp, #68	; 0x44
 800e826:	460c      	mov	r4, r1
 800e828:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e82c:	4616      	mov	r6, r2
 800e82e:	461f      	mov	r7, r3
 800e830:	4605      	mov	r5, r0
 800e832:	f003 f9a5 	bl	8011b80 <_localeconv_r>
 800e836:	6803      	ldr	r3, [r0, #0]
 800e838:	4618      	mov	r0, r3
 800e83a:	9309      	str	r3, [sp, #36]	; 0x24
 800e83c:	f7f1 fcf4 	bl	8000228 <strlen>
 800e840:	2300      	movs	r3, #0
 800e842:	930e      	str	r3, [sp, #56]	; 0x38
 800e844:	f8d8 3000 	ldr.w	r3, [r8]
 800e848:	900a      	str	r0, [sp, #40]	; 0x28
 800e84a:	3307      	adds	r3, #7
 800e84c:	f023 0307 	bic.w	r3, r3, #7
 800e850:	f103 0208 	add.w	r2, r3, #8
 800e854:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e858:	f8d4 b000 	ldr.w	fp, [r4]
 800e85c:	f8c8 2000 	str.w	r2, [r8]
 800e860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e864:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e868:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e86c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e870:	930b      	str	r3, [sp, #44]	; 0x2c
 800e872:	f04f 32ff 	mov.w	r2, #4294967295
 800e876:	4640      	mov	r0, r8
 800e878:	4b9c      	ldr	r3, [pc, #624]	; (800eaec <_printf_float+0x2cc>)
 800e87a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e87c:	f7f2 f932 	bl	8000ae4 <__aeabi_dcmpun>
 800e880:	bb70      	cbnz	r0, 800e8e0 <_printf_float+0xc0>
 800e882:	f04f 32ff 	mov.w	r2, #4294967295
 800e886:	4640      	mov	r0, r8
 800e888:	4b98      	ldr	r3, [pc, #608]	; (800eaec <_printf_float+0x2cc>)
 800e88a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e88c:	f7f2 f90c 	bl	8000aa8 <__aeabi_dcmple>
 800e890:	bb30      	cbnz	r0, 800e8e0 <_printf_float+0xc0>
 800e892:	2200      	movs	r2, #0
 800e894:	2300      	movs	r3, #0
 800e896:	4640      	mov	r0, r8
 800e898:	4651      	mov	r1, sl
 800e89a:	f7f2 f8fb 	bl	8000a94 <__aeabi_dcmplt>
 800e89e:	b110      	cbz	r0, 800e8a6 <_printf_float+0x86>
 800e8a0:	232d      	movs	r3, #45	; 0x2d
 800e8a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8a6:	4b92      	ldr	r3, [pc, #584]	; (800eaf0 <_printf_float+0x2d0>)
 800e8a8:	4892      	ldr	r0, [pc, #584]	; (800eaf4 <_printf_float+0x2d4>)
 800e8aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e8ae:	bf94      	ite	ls
 800e8b0:	4698      	movls	r8, r3
 800e8b2:	4680      	movhi	r8, r0
 800e8b4:	2303      	movs	r3, #3
 800e8b6:	f04f 0a00 	mov.w	sl, #0
 800e8ba:	6123      	str	r3, [r4, #16]
 800e8bc:	f02b 0304 	bic.w	r3, fp, #4
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	4633      	mov	r3, r6
 800e8c4:	4621      	mov	r1, r4
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	9700      	str	r7, [sp, #0]
 800e8ca:	aa0f      	add	r2, sp, #60	; 0x3c
 800e8cc:	f000 f9d4 	bl	800ec78 <_printf_common>
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	f040 8090 	bne.w	800e9f6 <_printf_float+0x1d6>
 800e8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8da:	b011      	add	sp, #68	; 0x44
 800e8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e0:	4642      	mov	r2, r8
 800e8e2:	4653      	mov	r3, sl
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	4651      	mov	r1, sl
 800e8e8:	f7f2 f8fc 	bl	8000ae4 <__aeabi_dcmpun>
 800e8ec:	b148      	cbz	r0, 800e902 <_printf_float+0xe2>
 800e8ee:	f1ba 0f00 	cmp.w	sl, #0
 800e8f2:	bfb8      	it	lt
 800e8f4:	232d      	movlt	r3, #45	; 0x2d
 800e8f6:	4880      	ldr	r0, [pc, #512]	; (800eaf8 <_printf_float+0x2d8>)
 800e8f8:	bfb8      	it	lt
 800e8fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e8fe:	4b7f      	ldr	r3, [pc, #508]	; (800eafc <_printf_float+0x2dc>)
 800e900:	e7d3      	b.n	800e8aa <_printf_float+0x8a>
 800e902:	6863      	ldr	r3, [r4, #4]
 800e904:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e908:	1c5a      	adds	r2, r3, #1
 800e90a:	d142      	bne.n	800e992 <_printf_float+0x172>
 800e90c:	2306      	movs	r3, #6
 800e90e:	6063      	str	r3, [r4, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	9206      	str	r2, [sp, #24]
 800e914:	aa0e      	add	r2, sp, #56	; 0x38
 800e916:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e91a:	aa0d      	add	r2, sp, #52	; 0x34
 800e91c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e920:	9203      	str	r2, [sp, #12]
 800e922:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e926:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e92a:	6023      	str	r3, [r4, #0]
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	4642      	mov	r2, r8
 800e930:	9300      	str	r3, [sp, #0]
 800e932:	4628      	mov	r0, r5
 800e934:	4653      	mov	r3, sl
 800e936:	910b      	str	r1, [sp, #44]	; 0x2c
 800e938:	f7ff fed4 	bl	800e6e4 <__cvt>
 800e93c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e93e:	4680      	mov	r8, r0
 800e940:	2947      	cmp	r1, #71	; 0x47
 800e942:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e944:	d108      	bne.n	800e958 <_printf_float+0x138>
 800e946:	1cc8      	adds	r0, r1, #3
 800e948:	db02      	blt.n	800e950 <_printf_float+0x130>
 800e94a:	6863      	ldr	r3, [r4, #4]
 800e94c:	4299      	cmp	r1, r3
 800e94e:	dd40      	ble.n	800e9d2 <_printf_float+0x1b2>
 800e950:	f1a9 0902 	sub.w	r9, r9, #2
 800e954:	fa5f f989 	uxtb.w	r9, r9
 800e958:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e95c:	d81f      	bhi.n	800e99e <_printf_float+0x17e>
 800e95e:	464a      	mov	r2, r9
 800e960:	3901      	subs	r1, #1
 800e962:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e966:	910d      	str	r1, [sp, #52]	; 0x34
 800e968:	f7ff ff1b 	bl	800e7a2 <__exponent>
 800e96c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e96e:	4682      	mov	sl, r0
 800e970:	1813      	adds	r3, r2, r0
 800e972:	2a01      	cmp	r2, #1
 800e974:	6123      	str	r3, [r4, #16]
 800e976:	dc02      	bgt.n	800e97e <_printf_float+0x15e>
 800e978:	6822      	ldr	r2, [r4, #0]
 800e97a:	07d2      	lsls	r2, r2, #31
 800e97c:	d501      	bpl.n	800e982 <_printf_float+0x162>
 800e97e:	3301      	adds	r3, #1
 800e980:	6123      	str	r3, [r4, #16]
 800e982:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e986:	2b00      	cmp	r3, #0
 800e988:	d09b      	beq.n	800e8c2 <_printf_float+0xa2>
 800e98a:	232d      	movs	r3, #45	; 0x2d
 800e98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e990:	e797      	b.n	800e8c2 <_printf_float+0xa2>
 800e992:	2947      	cmp	r1, #71	; 0x47
 800e994:	d1bc      	bne.n	800e910 <_printf_float+0xf0>
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1ba      	bne.n	800e910 <_printf_float+0xf0>
 800e99a:	2301      	movs	r3, #1
 800e99c:	e7b7      	b.n	800e90e <_printf_float+0xee>
 800e99e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e9a2:	d118      	bne.n	800e9d6 <_printf_float+0x1b6>
 800e9a4:	2900      	cmp	r1, #0
 800e9a6:	6863      	ldr	r3, [r4, #4]
 800e9a8:	dd0b      	ble.n	800e9c2 <_printf_float+0x1a2>
 800e9aa:	6121      	str	r1, [r4, #16]
 800e9ac:	b913      	cbnz	r3, 800e9b4 <_printf_float+0x194>
 800e9ae:	6822      	ldr	r2, [r4, #0]
 800e9b0:	07d0      	lsls	r0, r2, #31
 800e9b2:	d502      	bpl.n	800e9ba <_printf_float+0x19a>
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	440b      	add	r3, r1
 800e9b8:	6123      	str	r3, [r4, #16]
 800e9ba:	f04f 0a00 	mov.w	sl, #0
 800e9be:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9c0:	e7df      	b.n	800e982 <_printf_float+0x162>
 800e9c2:	b913      	cbnz	r3, 800e9ca <_printf_float+0x1aa>
 800e9c4:	6822      	ldr	r2, [r4, #0]
 800e9c6:	07d2      	lsls	r2, r2, #31
 800e9c8:	d501      	bpl.n	800e9ce <_printf_float+0x1ae>
 800e9ca:	3302      	adds	r3, #2
 800e9cc:	e7f4      	b.n	800e9b8 <_printf_float+0x198>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e7f2      	b.n	800e9b8 <_printf_float+0x198>
 800e9d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e9d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9d8:	4299      	cmp	r1, r3
 800e9da:	db05      	blt.n	800e9e8 <_printf_float+0x1c8>
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	6121      	str	r1, [r4, #16]
 800e9e0:	07d8      	lsls	r0, r3, #31
 800e9e2:	d5ea      	bpl.n	800e9ba <_printf_float+0x19a>
 800e9e4:	1c4b      	adds	r3, r1, #1
 800e9e6:	e7e7      	b.n	800e9b8 <_printf_float+0x198>
 800e9e8:	2900      	cmp	r1, #0
 800e9ea:	bfcc      	ite	gt
 800e9ec:	2201      	movgt	r2, #1
 800e9ee:	f1c1 0202 	rsble	r2, r1, #2
 800e9f2:	4413      	add	r3, r2
 800e9f4:	e7e0      	b.n	800e9b8 <_printf_float+0x198>
 800e9f6:	6823      	ldr	r3, [r4, #0]
 800e9f8:	055a      	lsls	r2, r3, #21
 800e9fa:	d407      	bmi.n	800ea0c <_printf_float+0x1ec>
 800e9fc:	6923      	ldr	r3, [r4, #16]
 800e9fe:	4642      	mov	r2, r8
 800ea00:	4631      	mov	r1, r6
 800ea02:	4628      	mov	r0, r5
 800ea04:	47b8      	blx	r7
 800ea06:	3001      	adds	r0, #1
 800ea08:	d12b      	bne.n	800ea62 <_printf_float+0x242>
 800ea0a:	e764      	b.n	800e8d6 <_printf_float+0xb6>
 800ea0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ea10:	f240 80dd 	bls.w	800ebce <_printf_float+0x3ae>
 800ea14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	f7f2 f830 	bl	8000a80 <__aeabi_dcmpeq>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	d033      	beq.n	800ea8c <_printf_float+0x26c>
 800ea24:	2301      	movs	r3, #1
 800ea26:	4631      	mov	r1, r6
 800ea28:	4628      	mov	r0, r5
 800ea2a:	4a35      	ldr	r2, [pc, #212]	; (800eb00 <_printf_float+0x2e0>)
 800ea2c:	47b8      	blx	r7
 800ea2e:	3001      	adds	r0, #1
 800ea30:	f43f af51 	beq.w	800e8d6 <_printf_float+0xb6>
 800ea34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	db02      	blt.n	800ea42 <_printf_float+0x222>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	07d8      	lsls	r0, r3, #31
 800ea40:	d50f      	bpl.n	800ea62 <_printf_float+0x242>
 800ea42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea46:	4631      	mov	r1, r6
 800ea48:	4628      	mov	r0, r5
 800ea4a:	47b8      	blx	r7
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	f43f af42 	beq.w	800e8d6 <_printf_float+0xb6>
 800ea52:	f04f 0800 	mov.w	r8, #0
 800ea56:	f104 091a 	add.w	r9, r4, #26
 800ea5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea5c:	3b01      	subs	r3, #1
 800ea5e:	4543      	cmp	r3, r8
 800ea60:	dc09      	bgt.n	800ea76 <_printf_float+0x256>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	079b      	lsls	r3, r3, #30
 800ea66:	f100 8102 	bmi.w	800ec6e <_printf_float+0x44e>
 800ea6a:	68e0      	ldr	r0, [r4, #12]
 800ea6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea6e:	4298      	cmp	r0, r3
 800ea70:	bfb8      	it	lt
 800ea72:	4618      	movlt	r0, r3
 800ea74:	e731      	b.n	800e8da <_printf_float+0xba>
 800ea76:	2301      	movs	r3, #1
 800ea78:	464a      	mov	r2, r9
 800ea7a:	4631      	mov	r1, r6
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	47b8      	blx	r7
 800ea80:	3001      	adds	r0, #1
 800ea82:	f43f af28 	beq.w	800e8d6 <_printf_float+0xb6>
 800ea86:	f108 0801 	add.w	r8, r8, #1
 800ea8a:	e7e6      	b.n	800ea5a <_printf_float+0x23a>
 800ea8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	dc38      	bgt.n	800eb04 <_printf_float+0x2e4>
 800ea92:	2301      	movs	r3, #1
 800ea94:	4631      	mov	r1, r6
 800ea96:	4628      	mov	r0, r5
 800ea98:	4a19      	ldr	r2, [pc, #100]	; (800eb00 <_printf_float+0x2e0>)
 800ea9a:	47b8      	blx	r7
 800ea9c:	3001      	adds	r0, #1
 800ea9e:	f43f af1a 	beq.w	800e8d6 <_printf_float+0xb6>
 800eaa2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	d102      	bne.n	800eab0 <_printf_float+0x290>
 800eaaa:	6823      	ldr	r3, [r4, #0]
 800eaac:	07d9      	lsls	r1, r3, #31
 800eaae:	d5d8      	bpl.n	800ea62 <_printf_float+0x242>
 800eab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eab4:	4631      	mov	r1, r6
 800eab6:	4628      	mov	r0, r5
 800eab8:	47b8      	blx	r7
 800eaba:	3001      	adds	r0, #1
 800eabc:	f43f af0b 	beq.w	800e8d6 <_printf_float+0xb6>
 800eac0:	f04f 0900 	mov.w	r9, #0
 800eac4:	f104 0a1a 	add.w	sl, r4, #26
 800eac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaca:	425b      	negs	r3, r3
 800eacc:	454b      	cmp	r3, r9
 800eace:	dc01      	bgt.n	800ead4 <_printf_float+0x2b4>
 800ead0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ead2:	e794      	b.n	800e9fe <_printf_float+0x1de>
 800ead4:	2301      	movs	r3, #1
 800ead6:	4652      	mov	r2, sl
 800ead8:	4631      	mov	r1, r6
 800eada:	4628      	mov	r0, r5
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f aef9 	beq.w	800e8d6 <_printf_float+0xb6>
 800eae4:	f109 0901 	add.w	r9, r9, #1
 800eae8:	e7ee      	b.n	800eac8 <_printf_float+0x2a8>
 800eaea:	bf00      	nop
 800eaec:	7fefffff 	.word	0x7fefffff
 800eaf0:	08013e84 	.word	0x08013e84
 800eaf4:	08013e88 	.word	0x08013e88
 800eaf8:	08013e90 	.word	0x08013e90
 800eafc:	08013e8c 	.word	0x08013e8c
 800eb00:	08013e94 	.word	0x08013e94
 800eb04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	bfa8      	it	ge
 800eb0c:	461a      	movge	r2, r3
 800eb0e:	2a00      	cmp	r2, #0
 800eb10:	4691      	mov	r9, r2
 800eb12:	dc37      	bgt.n	800eb84 <_printf_float+0x364>
 800eb14:	f04f 0b00 	mov.w	fp, #0
 800eb18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb1c:	f104 021a 	add.w	r2, r4, #26
 800eb20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800eb24:	ebaa 0309 	sub.w	r3, sl, r9
 800eb28:	455b      	cmp	r3, fp
 800eb2a:	dc33      	bgt.n	800eb94 <_printf_float+0x374>
 800eb2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eb30:	429a      	cmp	r2, r3
 800eb32:	db3b      	blt.n	800ebac <_printf_float+0x38c>
 800eb34:	6823      	ldr	r3, [r4, #0]
 800eb36:	07da      	lsls	r2, r3, #31
 800eb38:	d438      	bmi.n	800ebac <_printf_float+0x38c>
 800eb3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800eb3e:	eba2 030a 	sub.w	r3, r2, sl
 800eb42:	eba2 0901 	sub.w	r9, r2, r1
 800eb46:	4599      	cmp	r9, r3
 800eb48:	bfa8      	it	ge
 800eb4a:	4699      	movge	r9, r3
 800eb4c:	f1b9 0f00 	cmp.w	r9, #0
 800eb50:	dc34      	bgt.n	800ebbc <_printf_float+0x39c>
 800eb52:	f04f 0800 	mov.w	r8, #0
 800eb56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb5a:	f104 0a1a 	add.w	sl, r4, #26
 800eb5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eb62:	1a9b      	subs	r3, r3, r2
 800eb64:	eba3 0309 	sub.w	r3, r3, r9
 800eb68:	4543      	cmp	r3, r8
 800eb6a:	f77f af7a 	ble.w	800ea62 <_printf_float+0x242>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	4652      	mov	r2, sl
 800eb72:	4631      	mov	r1, r6
 800eb74:	4628      	mov	r0, r5
 800eb76:	47b8      	blx	r7
 800eb78:	3001      	adds	r0, #1
 800eb7a:	f43f aeac 	beq.w	800e8d6 <_printf_float+0xb6>
 800eb7e:	f108 0801 	add.w	r8, r8, #1
 800eb82:	e7ec      	b.n	800eb5e <_printf_float+0x33e>
 800eb84:	4613      	mov	r3, r2
 800eb86:	4631      	mov	r1, r6
 800eb88:	4642      	mov	r2, r8
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	47b8      	blx	r7
 800eb8e:	3001      	adds	r0, #1
 800eb90:	d1c0      	bne.n	800eb14 <_printf_float+0x2f4>
 800eb92:	e6a0      	b.n	800e8d6 <_printf_float+0xb6>
 800eb94:	2301      	movs	r3, #1
 800eb96:	4631      	mov	r1, r6
 800eb98:	4628      	mov	r0, r5
 800eb9a:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb9c:	47b8      	blx	r7
 800eb9e:	3001      	adds	r0, #1
 800eba0:	f43f ae99 	beq.w	800e8d6 <_printf_float+0xb6>
 800eba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eba6:	f10b 0b01 	add.w	fp, fp, #1
 800ebaa:	e7b9      	b.n	800eb20 <_printf_float+0x300>
 800ebac:	4631      	mov	r1, r6
 800ebae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	d1bf      	bne.n	800eb3a <_printf_float+0x31a>
 800ebba:	e68c      	b.n	800e8d6 <_printf_float+0xb6>
 800ebbc:	464b      	mov	r3, r9
 800ebbe:	4631      	mov	r1, r6
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	eb08 020a 	add.w	r2, r8, sl
 800ebc6:	47b8      	blx	r7
 800ebc8:	3001      	adds	r0, #1
 800ebca:	d1c2      	bne.n	800eb52 <_printf_float+0x332>
 800ebcc:	e683      	b.n	800e8d6 <_printf_float+0xb6>
 800ebce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebd0:	2a01      	cmp	r2, #1
 800ebd2:	dc01      	bgt.n	800ebd8 <_printf_float+0x3b8>
 800ebd4:	07db      	lsls	r3, r3, #31
 800ebd6:	d537      	bpl.n	800ec48 <_printf_float+0x428>
 800ebd8:	2301      	movs	r3, #1
 800ebda:	4642      	mov	r2, r8
 800ebdc:	4631      	mov	r1, r6
 800ebde:	4628      	mov	r0, r5
 800ebe0:	47b8      	blx	r7
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	f43f ae77 	beq.w	800e8d6 <_printf_float+0xb6>
 800ebe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebec:	4631      	mov	r1, r6
 800ebee:	4628      	mov	r0, r5
 800ebf0:	47b8      	blx	r7
 800ebf2:	3001      	adds	r0, #1
 800ebf4:	f43f ae6f 	beq.w	800e8d6 <_printf_float+0xb6>
 800ebf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f7f1 ff3e 	bl	8000a80 <__aeabi_dcmpeq>
 800ec04:	b9d8      	cbnz	r0, 800ec3e <_printf_float+0x41e>
 800ec06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec08:	f108 0201 	add.w	r2, r8, #1
 800ec0c:	3b01      	subs	r3, #1
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b8      	blx	r7
 800ec14:	3001      	adds	r0, #1
 800ec16:	d10e      	bne.n	800ec36 <_printf_float+0x416>
 800ec18:	e65d      	b.n	800e8d6 <_printf_float+0xb6>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	464a      	mov	r2, r9
 800ec1e:	4631      	mov	r1, r6
 800ec20:	4628      	mov	r0, r5
 800ec22:	47b8      	blx	r7
 800ec24:	3001      	adds	r0, #1
 800ec26:	f43f ae56 	beq.w	800e8d6 <_printf_float+0xb6>
 800ec2a:	f108 0801 	add.w	r8, r8, #1
 800ec2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec30:	3b01      	subs	r3, #1
 800ec32:	4543      	cmp	r3, r8
 800ec34:	dcf1      	bgt.n	800ec1a <_printf_float+0x3fa>
 800ec36:	4653      	mov	r3, sl
 800ec38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec3c:	e6e0      	b.n	800ea00 <_printf_float+0x1e0>
 800ec3e:	f04f 0800 	mov.w	r8, #0
 800ec42:	f104 091a 	add.w	r9, r4, #26
 800ec46:	e7f2      	b.n	800ec2e <_printf_float+0x40e>
 800ec48:	2301      	movs	r3, #1
 800ec4a:	4642      	mov	r2, r8
 800ec4c:	e7df      	b.n	800ec0e <_printf_float+0x3ee>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	464a      	mov	r2, r9
 800ec52:	4631      	mov	r1, r6
 800ec54:	4628      	mov	r0, r5
 800ec56:	47b8      	blx	r7
 800ec58:	3001      	adds	r0, #1
 800ec5a:	f43f ae3c 	beq.w	800e8d6 <_printf_float+0xb6>
 800ec5e:	f108 0801 	add.w	r8, r8, #1
 800ec62:	68e3      	ldr	r3, [r4, #12]
 800ec64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ec66:	1a5b      	subs	r3, r3, r1
 800ec68:	4543      	cmp	r3, r8
 800ec6a:	dcf0      	bgt.n	800ec4e <_printf_float+0x42e>
 800ec6c:	e6fd      	b.n	800ea6a <_printf_float+0x24a>
 800ec6e:	f04f 0800 	mov.w	r8, #0
 800ec72:	f104 0919 	add.w	r9, r4, #25
 800ec76:	e7f4      	b.n	800ec62 <_printf_float+0x442>

0800ec78 <_printf_common>:
 800ec78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec7c:	4616      	mov	r6, r2
 800ec7e:	4699      	mov	r9, r3
 800ec80:	688a      	ldr	r2, [r1, #8]
 800ec82:	690b      	ldr	r3, [r1, #16]
 800ec84:	4607      	mov	r7, r0
 800ec86:	4293      	cmp	r3, r2
 800ec88:	bfb8      	it	lt
 800ec8a:	4613      	movlt	r3, r2
 800ec8c:	6033      	str	r3, [r6, #0]
 800ec8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec92:	460c      	mov	r4, r1
 800ec94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec98:	b10a      	cbz	r2, 800ec9e <_printf_common+0x26>
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	6033      	str	r3, [r6, #0]
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	0699      	lsls	r1, r3, #26
 800eca2:	bf42      	ittt	mi
 800eca4:	6833      	ldrmi	r3, [r6, #0]
 800eca6:	3302      	addmi	r3, #2
 800eca8:	6033      	strmi	r3, [r6, #0]
 800ecaa:	6825      	ldr	r5, [r4, #0]
 800ecac:	f015 0506 	ands.w	r5, r5, #6
 800ecb0:	d106      	bne.n	800ecc0 <_printf_common+0x48>
 800ecb2:	f104 0a19 	add.w	sl, r4, #25
 800ecb6:	68e3      	ldr	r3, [r4, #12]
 800ecb8:	6832      	ldr	r2, [r6, #0]
 800ecba:	1a9b      	subs	r3, r3, r2
 800ecbc:	42ab      	cmp	r3, r5
 800ecbe:	dc28      	bgt.n	800ed12 <_printf_common+0x9a>
 800ecc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecc4:	1e13      	subs	r3, r2, #0
 800ecc6:	6822      	ldr	r2, [r4, #0]
 800ecc8:	bf18      	it	ne
 800ecca:	2301      	movne	r3, #1
 800eccc:	0692      	lsls	r2, r2, #26
 800ecce:	d42d      	bmi.n	800ed2c <_printf_common+0xb4>
 800ecd0:	4649      	mov	r1, r9
 800ecd2:	4638      	mov	r0, r7
 800ecd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecd8:	47c0      	blx	r8
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d020      	beq.n	800ed20 <_printf_common+0xa8>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	68e5      	ldr	r5, [r4, #12]
 800ece2:	f003 0306 	and.w	r3, r3, #6
 800ece6:	2b04      	cmp	r3, #4
 800ece8:	bf18      	it	ne
 800ecea:	2500      	movne	r5, #0
 800ecec:	6832      	ldr	r2, [r6, #0]
 800ecee:	f04f 0600 	mov.w	r6, #0
 800ecf2:	68a3      	ldr	r3, [r4, #8]
 800ecf4:	bf08      	it	eq
 800ecf6:	1aad      	subeq	r5, r5, r2
 800ecf8:	6922      	ldr	r2, [r4, #16]
 800ecfa:	bf08      	it	eq
 800ecfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed00:	4293      	cmp	r3, r2
 800ed02:	bfc4      	itt	gt
 800ed04:	1a9b      	subgt	r3, r3, r2
 800ed06:	18ed      	addgt	r5, r5, r3
 800ed08:	341a      	adds	r4, #26
 800ed0a:	42b5      	cmp	r5, r6
 800ed0c:	d11a      	bne.n	800ed44 <_printf_common+0xcc>
 800ed0e:	2000      	movs	r0, #0
 800ed10:	e008      	b.n	800ed24 <_printf_common+0xac>
 800ed12:	2301      	movs	r3, #1
 800ed14:	4652      	mov	r2, sl
 800ed16:	4649      	mov	r1, r9
 800ed18:	4638      	mov	r0, r7
 800ed1a:	47c0      	blx	r8
 800ed1c:	3001      	adds	r0, #1
 800ed1e:	d103      	bne.n	800ed28 <_printf_common+0xb0>
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed28:	3501      	adds	r5, #1
 800ed2a:	e7c4      	b.n	800ecb6 <_printf_common+0x3e>
 800ed2c:	2030      	movs	r0, #48	; 0x30
 800ed2e:	18e1      	adds	r1, r4, r3
 800ed30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed3a:	4422      	add	r2, r4
 800ed3c:	3302      	adds	r3, #2
 800ed3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed42:	e7c5      	b.n	800ecd0 <_printf_common+0x58>
 800ed44:	2301      	movs	r3, #1
 800ed46:	4622      	mov	r2, r4
 800ed48:	4649      	mov	r1, r9
 800ed4a:	4638      	mov	r0, r7
 800ed4c:	47c0      	blx	r8
 800ed4e:	3001      	adds	r0, #1
 800ed50:	d0e6      	beq.n	800ed20 <_printf_common+0xa8>
 800ed52:	3601      	adds	r6, #1
 800ed54:	e7d9      	b.n	800ed0a <_printf_common+0x92>
	...

0800ed58 <_printf_i>:
 800ed58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	7e27      	ldrb	r7, [r4, #24]
 800ed60:	4691      	mov	r9, r2
 800ed62:	2f78      	cmp	r7, #120	; 0x78
 800ed64:	4680      	mov	r8, r0
 800ed66:	469a      	mov	sl, r3
 800ed68:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed6e:	d807      	bhi.n	800ed80 <_printf_i+0x28>
 800ed70:	2f62      	cmp	r7, #98	; 0x62
 800ed72:	d80a      	bhi.n	800ed8a <_printf_i+0x32>
 800ed74:	2f00      	cmp	r7, #0
 800ed76:	f000 80d9 	beq.w	800ef2c <_printf_i+0x1d4>
 800ed7a:	2f58      	cmp	r7, #88	; 0x58
 800ed7c:	f000 80a4 	beq.w	800eec8 <_printf_i+0x170>
 800ed80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed88:	e03a      	b.n	800ee00 <_printf_i+0xa8>
 800ed8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed8e:	2b15      	cmp	r3, #21
 800ed90:	d8f6      	bhi.n	800ed80 <_printf_i+0x28>
 800ed92:	a001      	add	r0, pc, #4	; (adr r0, 800ed98 <_printf_i+0x40>)
 800ed94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed98:	0800edf1 	.word	0x0800edf1
 800ed9c:	0800ee05 	.word	0x0800ee05
 800eda0:	0800ed81 	.word	0x0800ed81
 800eda4:	0800ed81 	.word	0x0800ed81
 800eda8:	0800ed81 	.word	0x0800ed81
 800edac:	0800ed81 	.word	0x0800ed81
 800edb0:	0800ee05 	.word	0x0800ee05
 800edb4:	0800ed81 	.word	0x0800ed81
 800edb8:	0800ed81 	.word	0x0800ed81
 800edbc:	0800ed81 	.word	0x0800ed81
 800edc0:	0800ed81 	.word	0x0800ed81
 800edc4:	0800ef13 	.word	0x0800ef13
 800edc8:	0800ee35 	.word	0x0800ee35
 800edcc:	0800eef5 	.word	0x0800eef5
 800edd0:	0800ed81 	.word	0x0800ed81
 800edd4:	0800ed81 	.word	0x0800ed81
 800edd8:	0800ef35 	.word	0x0800ef35
 800eddc:	0800ed81 	.word	0x0800ed81
 800ede0:	0800ee35 	.word	0x0800ee35
 800ede4:	0800ed81 	.word	0x0800ed81
 800ede8:	0800ed81 	.word	0x0800ed81
 800edec:	0800eefd 	.word	0x0800eefd
 800edf0:	680b      	ldr	r3, [r1, #0]
 800edf2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800edf6:	1d1a      	adds	r2, r3, #4
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	600a      	str	r2, [r1, #0]
 800edfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee00:	2301      	movs	r3, #1
 800ee02:	e0a4      	b.n	800ef4e <_printf_i+0x1f6>
 800ee04:	6825      	ldr	r5, [r4, #0]
 800ee06:	6808      	ldr	r0, [r1, #0]
 800ee08:	062e      	lsls	r6, r5, #24
 800ee0a:	f100 0304 	add.w	r3, r0, #4
 800ee0e:	d50a      	bpl.n	800ee26 <_printf_i+0xce>
 800ee10:	6805      	ldr	r5, [r0, #0]
 800ee12:	600b      	str	r3, [r1, #0]
 800ee14:	2d00      	cmp	r5, #0
 800ee16:	da03      	bge.n	800ee20 <_printf_i+0xc8>
 800ee18:	232d      	movs	r3, #45	; 0x2d
 800ee1a:	426d      	negs	r5, r5
 800ee1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee20:	230a      	movs	r3, #10
 800ee22:	485e      	ldr	r0, [pc, #376]	; (800ef9c <_printf_i+0x244>)
 800ee24:	e019      	b.n	800ee5a <_printf_i+0x102>
 800ee26:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee2a:	6805      	ldr	r5, [r0, #0]
 800ee2c:	600b      	str	r3, [r1, #0]
 800ee2e:	bf18      	it	ne
 800ee30:	b22d      	sxthne	r5, r5
 800ee32:	e7ef      	b.n	800ee14 <_printf_i+0xbc>
 800ee34:	680b      	ldr	r3, [r1, #0]
 800ee36:	6825      	ldr	r5, [r4, #0]
 800ee38:	1d18      	adds	r0, r3, #4
 800ee3a:	6008      	str	r0, [r1, #0]
 800ee3c:	0628      	lsls	r0, r5, #24
 800ee3e:	d501      	bpl.n	800ee44 <_printf_i+0xec>
 800ee40:	681d      	ldr	r5, [r3, #0]
 800ee42:	e002      	b.n	800ee4a <_printf_i+0xf2>
 800ee44:	0669      	lsls	r1, r5, #25
 800ee46:	d5fb      	bpl.n	800ee40 <_printf_i+0xe8>
 800ee48:	881d      	ldrh	r5, [r3, #0]
 800ee4a:	2f6f      	cmp	r7, #111	; 0x6f
 800ee4c:	bf0c      	ite	eq
 800ee4e:	2308      	moveq	r3, #8
 800ee50:	230a      	movne	r3, #10
 800ee52:	4852      	ldr	r0, [pc, #328]	; (800ef9c <_printf_i+0x244>)
 800ee54:	2100      	movs	r1, #0
 800ee56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee5a:	6866      	ldr	r6, [r4, #4]
 800ee5c:	2e00      	cmp	r6, #0
 800ee5e:	bfa8      	it	ge
 800ee60:	6821      	ldrge	r1, [r4, #0]
 800ee62:	60a6      	str	r6, [r4, #8]
 800ee64:	bfa4      	itt	ge
 800ee66:	f021 0104 	bicge.w	r1, r1, #4
 800ee6a:	6021      	strge	r1, [r4, #0]
 800ee6c:	b90d      	cbnz	r5, 800ee72 <_printf_i+0x11a>
 800ee6e:	2e00      	cmp	r6, #0
 800ee70:	d04d      	beq.n	800ef0e <_printf_i+0x1b6>
 800ee72:	4616      	mov	r6, r2
 800ee74:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee78:	fb03 5711 	mls	r7, r3, r1, r5
 800ee7c:	5dc7      	ldrb	r7, [r0, r7]
 800ee7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee82:	462f      	mov	r7, r5
 800ee84:	42bb      	cmp	r3, r7
 800ee86:	460d      	mov	r5, r1
 800ee88:	d9f4      	bls.n	800ee74 <_printf_i+0x11c>
 800ee8a:	2b08      	cmp	r3, #8
 800ee8c:	d10b      	bne.n	800eea6 <_printf_i+0x14e>
 800ee8e:	6823      	ldr	r3, [r4, #0]
 800ee90:	07df      	lsls	r7, r3, #31
 800ee92:	d508      	bpl.n	800eea6 <_printf_i+0x14e>
 800ee94:	6923      	ldr	r3, [r4, #16]
 800ee96:	6861      	ldr	r1, [r4, #4]
 800ee98:	4299      	cmp	r1, r3
 800ee9a:	bfde      	ittt	le
 800ee9c:	2330      	movle	r3, #48	; 0x30
 800ee9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eea2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eea6:	1b92      	subs	r2, r2, r6
 800eea8:	6122      	str	r2, [r4, #16]
 800eeaa:	464b      	mov	r3, r9
 800eeac:	4621      	mov	r1, r4
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f8cd a000 	str.w	sl, [sp]
 800eeb4:	aa03      	add	r2, sp, #12
 800eeb6:	f7ff fedf 	bl	800ec78 <_printf_common>
 800eeba:	3001      	adds	r0, #1
 800eebc:	d14c      	bne.n	800ef58 <_printf_i+0x200>
 800eebe:	f04f 30ff 	mov.w	r0, #4294967295
 800eec2:	b004      	add	sp, #16
 800eec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec8:	4834      	ldr	r0, [pc, #208]	; (800ef9c <_printf_i+0x244>)
 800eeca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eece:	680e      	ldr	r6, [r1, #0]
 800eed0:	6823      	ldr	r3, [r4, #0]
 800eed2:	f856 5b04 	ldr.w	r5, [r6], #4
 800eed6:	061f      	lsls	r7, r3, #24
 800eed8:	600e      	str	r6, [r1, #0]
 800eeda:	d514      	bpl.n	800ef06 <_printf_i+0x1ae>
 800eedc:	07d9      	lsls	r1, r3, #31
 800eede:	bf44      	itt	mi
 800eee0:	f043 0320 	orrmi.w	r3, r3, #32
 800eee4:	6023      	strmi	r3, [r4, #0]
 800eee6:	b91d      	cbnz	r5, 800eef0 <_printf_i+0x198>
 800eee8:	6823      	ldr	r3, [r4, #0]
 800eeea:	f023 0320 	bic.w	r3, r3, #32
 800eeee:	6023      	str	r3, [r4, #0]
 800eef0:	2310      	movs	r3, #16
 800eef2:	e7af      	b.n	800ee54 <_printf_i+0xfc>
 800eef4:	6823      	ldr	r3, [r4, #0]
 800eef6:	f043 0320 	orr.w	r3, r3, #32
 800eefa:	6023      	str	r3, [r4, #0]
 800eefc:	2378      	movs	r3, #120	; 0x78
 800eefe:	4828      	ldr	r0, [pc, #160]	; (800efa0 <_printf_i+0x248>)
 800ef00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef04:	e7e3      	b.n	800eece <_printf_i+0x176>
 800ef06:	065e      	lsls	r6, r3, #25
 800ef08:	bf48      	it	mi
 800ef0a:	b2ad      	uxthmi	r5, r5
 800ef0c:	e7e6      	b.n	800eedc <_printf_i+0x184>
 800ef0e:	4616      	mov	r6, r2
 800ef10:	e7bb      	b.n	800ee8a <_printf_i+0x132>
 800ef12:	680b      	ldr	r3, [r1, #0]
 800ef14:	6826      	ldr	r6, [r4, #0]
 800ef16:	1d1d      	adds	r5, r3, #4
 800ef18:	6960      	ldr	r0, [r4, #20]
 800ef1a:	600d      	str	r5, [r1, #0]
 800ef1c:	0635      	lsls	r5, r6, #24
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	d501      	bpl.n	800ef26 <_printf_i+0x1ce>
 800ef22:	6018      	str	r0, [r3, #0]
 800ef24:	e002      	b.n	800ef2c <_printf_i+0x1d4>
 800ef26:	0671      	lsls	r1, r6, #25
 800ef28:	d5fb      	bpl.n	800ef22 <_printf_i+0x1ca>
 800ef2a:	8018      	strh	r0, [r3, #0]
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	4616      	mov	r6, r2
 800ef30:	6123      	str	r3, [r4, #16]
 800ef32:	e7ba      	b.n	800eeaa <_printf_i+0x152>
 800ef34:	680b      	ldr	r3, [r1, #0]
 800ef36:	1d1a      	adds	r2, r3, #4
 800ef38:	600a      	str	r2, [r1, #0]
 800ef3a:	681e      	ldr	r6, [r3, #0]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	4630      	mov	r0, r6
 800ef40:	6862      	ldr	r2, [r4, #4]
 800ef42:	f002 fea3 	bl	8011c8c <memchr>
 800ef46:	b108      	cbz	r0, 800ef4c <_printf_i+0x1f4>
 800ef48:	1b80      	subs	r0, r0, r6
 800ef4a:	6060      	str	r0, [r4, #4]
 800ef4c:	6863      	ldr	r3, [r4, #4]
 800ef4e:	6123      	str	r3, [r4, #16]
 800ef50:	2300      	movs	r3, #0
 800ef52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef56:	e7a8      	b.n	800eeaa <_printf_i+0x152>
 800ef58:	4632      	mov	r2, r6
 800ef5a:	4649      	mov	r1, r9
 800ef5c:	4640      	mov	r0, r8
 800ef5e:	6923      	ldr	r3, [r4, #16]
 800ef60:	47d0      	blx	sl
 800ef62:	3001      	adds	r0, #1
 800ef64:	d0ab      	beq.n	800eebe <_printf_i+0x166>
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	079b      	lsls	r3, r3, #30
 800ef6a:	d413      	bmi.n	800ef94 <_printf_i+0x23c>
 800ef6c:	68e0      	ldr	r0, [r4, #12]
 800ef6e:	9b03      	ldr	r3, [sp, #12]
 800ef70:	4298      	cmp	r0, r3
 800ef72:	bfb8      	it	lt
 800ef74:	4618      	movlt	r0, r3
 800ef76:	e7a4      	b.n	800eec2 <_printf_i+0x16a>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	4632      	mov	r2, r6
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	4640      	mov	r0, r8
 800ef80:	47d0      	blx	sl
 800ef82:	3001      	adds	r0, #1
 800ef84:	d09b      	beq.n	800eebe <_printf_i+0x166>
 800ef86:	3501      	adds	r5, #1
 800ef88:	68e3      	ldr	r3, [r4, #12]
 800ef8a:	9903      	ldr	r1, [sp, #12]
 800ef8c:	1a5b      	subs	r3, r3, r1
 800ef8e:	42ab      	cmp	r3, r5
 800ef90:	dcf2      	bgt.n	800ef78 <_printf_i+0x220>
 800ef92:	e7eb      	b.n	800ef6c <_printf_i+0x214>
 800ef94:	2500      	movs	r5, #0
 800ef96:	f104 0619 	add.w	r6, r4, #25
 800ef9a:	e7f5      	b.n	800ef88 <_printf_i+0x230>
 800ef9c:	08013e96 	.word	0x08013e96
 800efa0:	08013ea7 	.word	0x08013ea7

0800efa4 <_scanf_float>:
 800efa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efa8:	b087      	sub	sp, #28
 800efaa:	9303      	str	r3, [sp, #12]
 800efac:	688b      	ldr	r3, [r1, #8]
 800efae:	4617      	mov	r7, r2
 800efb0:	1e5a      	subs	r2, r3, #1
 800efb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800efb6:	bf85      	ittet	hi
 800efb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800efbc:	195b      	addhi	r3, r3, r5
 800efbe:	2300      	movls	r3, #0
 800efc0:	9302      	strhi	r3, [sp, #8]
 800efc2:	bf88      	it	hi
 800efc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800efc8:	468b      	mov	fp, r1
 800efca:	f04f 0500 	mov.w	r5, #0
 800efce:	bf8c      	ite	hi
 800efd0:	608b      	strhi	r3, [r1, #8]
 800efd2:	9302      	strls	r3, [sp, #8]
 800efd4:	680b      	ldr	r3, [r1, #0]
 800efd6:	4680      	mov	r8, r0
 800efd8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800efdc:	f84b 3b1c 	str.w	r3, [fp], #28
 800efe0:	460c      	mov	r4, r1
 800efe2:	465e      	mov	r6, fp
 800efe4:	46aa      	mov	sl, r5
 800efe6:	46a9      	mov	r9, r5
 800efe8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800efec:	9501      	str	r5, [sp, #4]
 800efee:	68a2      	ldr	r2, [r4, #8]
 800eff0:	b152      	cbz	r2, 800f008 <_scanf_float+0x64>
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	2b4e      	cmp	r3, #78	; 0x4e
 800eff8:	d864      	bhi.n	800f0c4 <_scanf_float+0x120>
 800effa:	2b40      	cmp	r3, #64	; 0x40
 800effc:	d83c      	bhi.n	800f078 <_scanf_float+0xd4>
 800effe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f002:	b2c8      	uxtb	r0, r1
 800f004:	280e      	cmp	r0, #14
 800f006:	d93a      	bls.n	800f07e <_scanf_float+0xda>
 800f008:	f1b9 0f00 	cmp.w	r9, #0
 800f00c:	d003      	beq.n	800f016 <_scanf_float+0x72>
 800f00e:	6823      	ldr	r3, [r4, #0]
 800f010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f014:	6023      	str	r3, [r4, #0]
 800f016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f01a:	f1ba 0f01 	cmp.w	sl, #1
 800f01e:	f200 8113 	bhi.w	800f248 <_scanf_float+0x2a4>
 800f022:	455e      	cmp	r6, fp
 800f024:	f200 8105 	bhi.w	800f232 <_scanf_float+0x28e>
 800f028:	2501      	movs	r5, #1
 800f02a:	4628      	mov	r0, r5
 800f02c:	b007      	add	sp, #28
 800f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f036:	2a0d      	cmp	r2, #13
 800f038:	d8e6      	bhi.n	800f008 <_scanf_float+0x64>
 800f03a:	a101      	add	r1, pc, #4	; (adr r1, 800f040 <_scanf_float+0x9c>)
 800f03c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f040:	0800f17f 	.word	0x0800f17f
 800f044:	0800f009 	.word	0x0800f009
 800f048:	0800f009 	.word	0x0800f009
 800f04c:	0800f009 	.word	0x0800f009
 800f050:	0800f1df 	.word	0x0800f1df
 800f054:	0800f1b7 	.word	0x0800f1b7
 800f058:	0800f009 	.word	0x0800f009
 800f05c:	0800f009 	.word	0x0800f009
 800f060:	0800f18d 	.word	0x0800f18d
 800f064:	0800f009 	.word	0x0800f009
 800f068:	0800f009 	.word	0x0800f009
 800f06c:	0800f009 	.word	0x0800f009
 800f070:	0800f009 	.word	0x0800f009
 800f074:	0800f145 	.word	0x0800f145
 800f078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f07c:	e7db      	b.n	800f036 <_scanf_float+0x92>
 800f07e:	290e      	cmp	r1, #14
 800f080:	d8c2      	bhi.n	800f008 <_scanf_float+0x64>
 800f082:	a001      	add	r0, pc, #4	; (adr r0, 800f088 <_scanf_float+0xe4>)
 800f084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f088:	0800f137 	.word	0x0800f137
 800f08c:	0800f009 	.word	0x0800f009
 800f090:	0800f137 	.word	0x0800f137
 800f094:	0800f1cb 	.word	0x0800f1cb
 800f098:	0800f009 	.word	0x0800f009
 800f09c:	0800f0e5 	.word	0x0800f0e5
 800f0a0:	0800f121 	.word	0x0800f121
 800f0a4:	0800f121 	.word	0x0800f121
 800f0a8:	0800f121 	.word	0x0800f121
 800f0ac:	0800f121 	.word	0x0800f121
 800f0b0:	0800f121 	.word	0x0800f121
 800f0b4:	0800f121 	.word	0x0800f121
 800f0b8:	0800f121 	.word	0x0800f121
 800f0bc:	0800f121 	.word	0x0800f121
 800f0c0:	0800f121 	.word	0x0800f121
 800f0c4:	2b6e      	cmp	r3, #110	; 0x6e
 800f0c6:	d809      	bhi.n	800f0dc <_scanf_float+0x138>
 800f0c8:	2b60      	cmp	r3, #96	; 0x60
 800f0ca:	d8b2      	bhi.n	800f032 <_scanf_float+0x8e>
 800f0cc:	2b54      	cmp	r3, #84	; 0x54
 800f0ce:	d077      	beq.n	800f1c0 <_scanf_float+0x21c>
 800f0d0:	2b59      	cmp	r3, #89	; 0x59
 800f0d2:	d199      	bne.n	800f008 <_scanf_float+0x64>
 800f0d4:	2d07      	cmp	r5, #7
 800f0d6:	d197      	bne.n	800f008 <_scanf_float+0x64>
 800f0d8:	2508      	movs	r5, #8
 800f0da:	e029      	b.n	800f130 <_scanf_float+0x18c>
 800f0dc:	2b74      	cmp	r3, #116	; 0x74
 800f0de:	d06f      	beq.n	800f1c0 <_scanf_float+0x21c>
 800f0e0:	2b79      	cmp	r3, #121	; 0x79
 800f0e2:	e7f6      	b.n	800f0d2 <_scanf_float+0x12e>
 800f0e4:	6821      	ldr	r1, [r4, #0]
 800f0e6:	05c8      	lsls	r0, r1, #23
 800f0e8:	d51a      	bpl.n	800f120 <_scanf_float+0x17c>
 800f0ea:	9b02      	ldr	r3, [sp, #8]
 800f0ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f0f0:	6021      	str	r1, [r4, #0]
 800f0f2:	f109 0901 	add.w	r9, r9, #1
 800f0f6:	b11b      	cbz	r3, 800f100 <_scanf_float+0x15c>
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	3201      	adds	r2, #1
 800f0fc:	9302      	str	r3, [sp, #8]
 800f0fe:	60a2      	str	r2, [r4, #8]
 800f100:	68a3      	ldr	r3, [r4, #8]
 800f102:	3b01      	subs	r3, #1
 800f104:	60a3      	str	r3, [r4, #8]
 800f106:	6923      	ldr	r3, [r4, #16]
 800f108:	3301      	adds	r3, #1
 800f10a:	6123      	str	r3, [r4, #16]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3b01      	subs	r3, #1
 800f110:	2b00      	cmp	r3, #0
 800f112:	607b      	str	r3, [r7, #4]
 800f114:	f340 8084 	ble.w	800f220 <_scanf_float+0x27c>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	3301      	adds	r3, #1
 800f11c:	603b      	str	r3, [r7, #0]
 800f11e:	e766      	b.n	800efee <_scanf_float+0x4a>
 800f120:	eb1a 0f05 	cmn.w	sl, r5
 800f124:	f47f af70 	bne.w	800f008 <_scanf_float+0x64>
 800f128:	6822      	ldr	r2, [r4, #0]
 800f12a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f12e:	6022      	str	r2, [r4, #0]
 800f130:	f806 3b01 	strb.w	r3, [r6], #1
 800f134:	e7e4      	b.n	800f100 <_scanf_float+0x15c>
 800f136:	6822      	ldr	r2, [r4, #0]
 800f138:	0610      	lsls	r0, r2, #24
 800f13a:	f57f af65 	bpl.w	800f008 <_scanf_float+0x64>
 800f13e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f142:	e7f4      	b.n	800f12e <_scanf_float+0x18a>
 800f144:	f1ba 0f00 	cmp.w	sl, #0
 800f148:	d10e      	bne.n	800f168 <_scanf_float+0x1c4>
 800f14a:	f1b9 0f00 	cmp.w	r9, #0
 800f14e:	d10e      	bne.n	800f16e <_scanf_float+0x1ca>
 800f150:	6822      	ldr	r2, [r4, #0]
 800f152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f15a:	d108      	bne.n	800f16e <_scanf_float+0x1ca>
 800f15c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f160:	f04f 0a01 	mov.w	sl, #1
 800f164:	6022      	str	r2, [r4, #0]
 800f166:	e7e3      	b.n	800f130 <_scanf_float+0x18c>
 800f168:	f1ba 0f02 	cmp.w	sl, #2
 800f16c:	d055      	beq.n	800f21a <_scanf_float+0x276>
 800f16e:	2d01      	cmp	r5, #1
 800f170:	d002      	beq.n	800f178 <_scanf_float+0x1d4>
 800f172:	2d04      	cmp	r5, #4
 800f174:	f47f af48 	bne.w	800f008 <_scanf_float+0x64>
 800f178:	3501      	adds	r5, #1
 800f17a:	b2ed      	uxtb	r5, r5
 800f17c:	e7d8      	b.n	800f130 <_scanf_float+0x18c>
 800f17e:	f1ba 0f01 	cmp.w	sl, #1
 800f182:	f47f af41 	bne.w	800f008 <_scanf_float+0x64>
 800f186:	f04f 0a02 	mov.w	sl, #2
 800f18a:	e7d1      	b.n	800f130 <_scanf_float+0x18c>
 800f18c:	b97d      	cbnz	r5, 800f1ae <_scanf_float+0x20a>
 800f18e:	f1b9 0f00 	cmp.w	r9, #0
 800f192:	f47f af3c 	bne.w	800f00e <_scanf_float+0x6a>
 800f196:	6822      	ldr	r2, [r4, #0]
 800f198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f19c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f1a0:	f47f af39 	bne.w	800f016 <_scanf_float+0x72>
 800f1a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f1a8:	2501      	movs	r5, #1
 800f1aa:	6022      	str	r2, [r4, #0]
 800f1ac:	e7c0      	b.n	800f130 <_scanf_float+0x18c>
 800f1ae:	2d03      	cmp	r5, #3
 800f1b0:	d0e2      	beq.n	800f178 <_scanf_float+0x1d4>
 800f1b2:	2d05      	cmp	r5, #5
 800f1b4:	e7de      	b.n	800f174 <_scanf_float+0x1d0>
 800f1b6:	2d02      	cmp	r5, #2
 800f1b8:	f47f af26 	bne.w	800f008 <_scanf_float+0x64>
 800f1bc:	2503      	movs	r5, #3
 800f1be:	e7b7      	b.n	800f130 <_scanf_float+0x18c>
 800f1c0:	2d06      	cmp	r5, #6
 800f1c2:	f47f af21 	bne.w	800f008 <_scanf_float+0x64>
 800f1c6:	2507      	movs	r5, #7
 800f1c8:	e7b2      	b.n	800f130 <_scanf_float+0x18c>
 800f1ca:	6822      	ldr	r2, [r4, #0]
 800f1cc:	0591      	lsls	r1, r2, #22
 800f1ce:	f57f af1b 	bpl.w	800f008 <_scanf_float+0x64>
 800f1d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f1d6:	6022      	str	r2, [r4, #0]
 800f1d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f1dc:	e7a8      	b.n	800f130 <_scanf_float+0x18c>
 800f1de:	6822      	ldr	r2, [r4, #0]
 800f1e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f1e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f1e8:	d006      	beq.n	800f1f8 <_scanf_float+0x254>
 800f1ea:	0550      	lsls	r0, r2, #21
 800f1ec:	f57f af0c 	bpl.w	800f008 <_scanf_float+0x64>
 800f1f0:	f1b9 0f00 	cmp.w	r9, #0
 800f1f4:	f43f af0f 	beq.w	800f016 <_scanf_float+0x72>
 800f1f8:	0591      	lsls	r1, r2, #22
 800f1fa:	bf58      	it	pl
 800f1fc:	9901      	ldrpl	r1, [sp, #4]
 800f1fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f202:	bf58      	it	pl
 800f204:	eba9 0101 	subpl.w	r1, r9, r1
 800f208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f20c:	f04f 0900 	mov.w	r9, #0
 800f210:	bf58      	it	pl
 800f212:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f216:	6022      	str	r2, [r4, #0]
 800f218:	e78a      	b.n	800f130 <_scanf_float+0x18c>
 800f21a:	f04f 0a03 	mov.w	sl, #3
 800f21e:	e787      	b.n	800f130 <_scanf_float+0x18c>
 800f220:	4639      	mov	r1, r7
 800f222:	4640      	mov	r0, r8
 800f224:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f228:	4798      	blx	r3
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f43f aedf 	beq.w	800efee <_scanf_float+0x4a>
 800f230:	e6ea      	b.n	800f008 <_scanf_float+0x64>
 800f232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f236:	463a      	mov	r2, r7
 800f238:	4640      	mov	r0, r8
 800f23a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f23e:	4798      	blx	r3
 800f240:	6923      	ldr	r3, [r4, #16]
 800f242:	3b01      	subs	r3, #1
 800f244:	6123      	str	r3, [r4, #16]
 800f246:	e6ec      	b.n	800f022 <_scanf_float+0x7e>
 800f248:	1e6b      	subs	r3, r5, #1
 800f24a:	2b06      	cmp	r3, #6
 800f24c:	d825      	bhi.n	800f29a <_scanf_float+0x2f6>
 800f24e:	2d02      	cmp	r5, #2
 800f250:	d836      	bhi.n	800f2c0 <_scanf_float+0x31c>
 800f252:	455e      	cmp	r6, fp
 800f254:	f67f aee8 	bls.w	800f028 <_scanf_float+0x84>
 800f258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f25c:	463a      	mov	r2, r7
 800f25e:	4640      	mov	r0, r8
 800f260:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f264:	4798      	blx	r3
 800f266:	6923      	ldr	r3, [r4, #16]
 800f268:	3b01      	subs	r3, #1
 800f26a:	6123      	str	r3, [r4, #16]
 800f26c:	e7f1      	b.n	800f252 <_scanf_float+0x2ae>
 800f26e:	9802      	ldr	r0, [sp, #8]
 800f270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f278:	463a      	mov	r2, r7
 800f27a:	9002      	str	r0, [sp, #8]
 800f27c:	4640      	mov	r0, r8
 800f27e:	4798      	blx	r3
 800f280:	6923      	ldr	r3, [r4, #16]
 800f282:	3b01      	subs	r3, #1
 800f284:	6123      	str	r3, [r4, #16]
 800f286:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f28a:	fa5f fa8a 	uxtb.w	sl, sl
 800f28e:	f1ba 0f02 	cmp.w	sl, #2
 800f292:	d1ec      	bne.n	800f26e <_scanf_float+0x2ca>
 800f294:	3d03      	subs	r5, #3
 800f296:	b2ed      	uxtb	r5, r5
 800f298:	1b76      	subs	r6, r6, r5
 800f29a:	6823      	ldr	r3, [r4, #0]
 800f29c:	05da      	lsls	r2, r3, #23
 800f29e:	d52f      	bpl.n	800f300 <_scanf_float+0x35c>
 800f2a0:	055b      	lsls	r3, r3, #21
 800f2a2:	d510      	bpl.n	800f2c6 <_scanf_float+0x322>
 800f2a4:	455e      	cmp	r6, fp
 800f2a6:	f67f aebf 	bls.w	800f028 <_scanf_float+0x84>
 800f2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2ae:	463a      	mov	r2, r7
 800f2b0:	4640      	mov	r0, r8
 800f2b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2b6:	4798      	blx	r3
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	3b01      	subs	r3, #1
 800f2bc:	6123      	str	r3, [r4, #16]
 800f2be:	e7f1      	b.n	800f2a4 <_scanf_float+0x300>
 800f2c0:	46aa      	mov	sl, r5
 800f2c2:	9602      	str	r6, [sp, #8]
 800f2c4:	e7df      	b.n	800f286 <_scanf_float+0x2e2>
 800f2c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f2ca:	6923      	ldr	r3, [r4, #16]
 800f2cc:	2965      	cmp	r1, #101	; 0x65
 800f2ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2d2:	f106 35ff 	add.w	r5, r6, #4294967295
 800f2d6:	6123      	str	r3, [r4, #16]
 800f2d8:	d00c      	beq.n	800f2f4 <_scanf_float+0x350>
 800f2da:	2945      	cmp	r1, #69	; 0x45
 800f2dc:	d00a      	beq.n	800f2f4 <_scanf_float+0x350>
 800f2de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2e2:	463a      	mov	r2, r7
 800f2e4:	4640      	mov	r0, r8
 800f2e6:	4798      	blx	r3
 800f2e8:	6923      	ldr	r3, [r4, #16]
 800f2ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f2ee:	3b01      	subs	r3, #1
 800f2f0:	1eb5      	subs	r5, r6, #2
 800f2f2:	6123      	str	r3, [r4, #16]
 800f2f4:	463a      	mov	r2, r7
 800f2f6:	4640      	mov	r0, r8
 800f2f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2fc:	4798      	blx	r3
 800f2fe:	462e      	mov	r6, r5
 800f300:	6825      	ldr	r5, [r4, #0]
 800f302:	f015 0510 	ands.w	r5, r5, #16
 800f306:	d159      	bne.n	800f3bc <_scanf_float+0x418>
 800f308:	7035      	strb	r5, [r6, #0]
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f314:	d11c      	bne.n	800f350 <_scanf_float+0x3ac>
 800f316:	9b01      	ldr	r3, [sp, #4]
 800f318:	454b      	cmp	r3, r9
 800f31a:	eba3 0209 	sub.w	r2, r3, r9
 800f31e:	d124      	bne.n	800f36a <_scanf_float+0x3c6>
 800f320:	2200      	movs	r2, #0
 800f322:	4659      	mov	r1, fp
 800f324:	4640      	mov	r0, r8
 800f326:	f000 feff 	bl	8010128 <_strtod_r>
 800f32a:	f8d4 c000 	ldr.w	ip, [r4]
 800f32e:	9b03      	ldr	r3, [sp, #12]
 800f330:	f01c 0f02 	tst.w	ip, #2
 800f334:	4606      	mov	r6, r0
 800f336:	460f      	mov	r7, r1
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	d021      	beq.n	800f380 <_scanf_float+0x3dc>
 800f33c:	9903      	ldr	r1, [sp, #12]
 800f33e:	1d1a      	adds	r2, r3, #4
 800f340:	600a      	str	r2, [r1, #0]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	e9c3 6700 	strd	r6, r7, [r3]
 800f348:	68e3      	ldr	r3, [r4, #12]
 800f34a:	3301      	adds	r3, #1
 800f34c:	60e3      	str	r3, [r4, #12]
 800f34e:	e66c      	b.n	800f02a <_scanf_float+0x86>
 800f350:	9b04      	ldr	r3, [sp, #16]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d0e4      	beq.n	800f320 <_scanf_float+0x37c>
 800f356:	9905      	ldr	r1, [sp, #20]
 800f358:	230a      	movs	r3, #10
 800f35a:	462a      	mov	r2, r5
 800f35c:	4640      	mov	r0, r8
 800f35e:	3101      	adds	r1, #1
 800f360:	f000 ff6e 	bl	8010240 <_strtol_r>
 800f364:	9b04      	ldr	r3, [sp, #16]
 800f366:	9e05      	ldr	r6, [sp, #20]
 800f368:	1ac2      	subs	r2, r0, r3
 800f36a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f36e:	429e      	cmp	r6, r3
 800f370:	bf28      	it	cs
 800f372:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f376:	4630      	mov	r0, r6
 800f378:	4911      	ldr	r1, [pc, #68]	; (800f3c0 <_scanf_float+0x41c>)
 800f37a:	f000 f89f 	bl	800f4bc <siprintf>
 800f37e:	e7cf      	b.n	800f320 <_scanf_float+0x37c>
 800f380:	f01c 0f04 	tst.w	ip, #4
 800f384:	f103 0e04 	add.w	lr, r3, #4
 800f388:	d003      	beq.n	800f392 <_scanf_float+0x3ee>
 800f38a:	9903      	ldr	r1, [sp, #12]
 800f38c:	f8c1 e000 	str.w	lr, [r1]
 800f390:	e7d7      	b.n	800f342 <_scanf_float+0x39e>
 800f392:	9a03      	ldr	r2, [sp, #12]
 800f394:	f8c2 e000 	str.w	lr, [r2]
 800f398:	f8d3 8000 	ldr.w	r8, [r3]
 800f39c:	4602      	mov	r2, r0
 800f39e:	460b      	mov	r3, r1
 800f3a0:	f7f1 fba0 	bl	8000ae4 <__aeabi_dcmpun>
 800f3a4:	b128      	cbz	r0, 800f3b2 <_scanf_float+0x40e>
 800f3a6:	4807      	ldr	r0, [pc, #28]	; (800f3c4 <_scanf_float+0x420>)
 800f3a8:	f000 f884 	bl	800f4b4 <nanf>
 800f3ac:	f8c8 0000 	str.w	r0, [r8]
 800f3b0:	e7ca      	b.n	800f348 <_scanf_float+0x3a4>
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	4639      	mov	r1, r7
 800f3b6:	f7f1 fbf3 	bl	8000ba0 <__aeabi_d2f>
 800f3ba:	e7f7      	b.n	800f3ac <_scanf_float+0x408>
 800f3bc:	2500      	movs	r5, #0
 800f3be:	e634      	b.n	800f02a <_scanf_float+0x86>
 800f3c0:	08013eb8 	.word	0x08013eb8
 800f3c4:	08014258 	.word	0x08014258

0800f3c8 <_puts_r>:
 800f3c8:	b570      	push	{r4, r5, r6, lr}
 800f3ca:	460e      	mov	r6, r1
 800f3cc:	4605      	mov	r5, r0
 800f3ce:	b118      	cbz	r0, 800f3d8 <_puts_r+0x10>
 800f3d0:	6983      	ldr	r3, [r0, #24]
 800f3d2:	b90b      	cbnz	r3, 800f3d8 <_puts_r+0x10>
 800f3d4:	f001 ffd0 	bl	8011378 <__sinit>
 800f3d8:	69ab      	ldr	r3, [r5, #24]
 800f3da:	68ac      	ldr	r4, [r5, #8]
 800f3dc:	b913      	cbnz	r3, 800f3e4 <_puts_r+0x1c>
 800f3de:	4628      	mov	r0, r5
 800f3e0:	f001 ffca 	bl	8011378 <__sinit>
 800f3e4:	4b2c      	ldr	r3, [pc, #176]	; (800f498 <_puts_r+0xd0>)
 800f3e6:	429c      	cmp	r4, r3
 800f3e8:	d120      	bne.n	800f42c <_puts_r+0x64>
 800f3ea:	686c      	ldr	r4, [r5, #4]
 800f3ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3ee:	07db      	lsls	r3, r3, #31
 800f3f0:	d405      	bmi.n	800f3fe <_puts_r+0x36>
 800f3f2:	89a3      	ldrh	r3, [r4, #12]
 800f3f4:	0598      	lsls	r0, r3, #22
 800f3f6:	d402      	bmi.n	800f3fe <_puts_r+0x36>
 800f3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3fa:	f002 fbc6 	bl	8011b8a <__retarget_lock_acquire_recursive>
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	0719      	lsls	r1, r3, #28
 800f402:	d51d      	bpl.n	800f440 <_puts_r+0x78>
 800f404:	6923      	ldr	r3, [r4, #16]
 800f406:	b1db      	cbz	r3, 800f440 <_puts_r+0x78>
 800f408:	3e01      	subs	r6, #1
 800f40a:	68a3      	ldr	r3, [r4, #8]
 800f40c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f410:	3b01      	subs	r3, #1
 800f412:	60a3      	str	r3, [r4, #8]
 800f414:	bb39      	cbnz	r1, 800f466 <_puts_r+0x9e>
 800f416:	2b00      	cmp	r3, #0
 800f418:	da38      	bge.n	800f48c <_puts_r+0xc4>
 800f41a:	4622      	mov	r2, r4
 800f41c:	210a      	movs	r1, #10
 800f41e:	4628      	mov	r0, r5
 800f420:	f000 ff52 	bl	80102c8 <__swbuf_r>
 800f424:	3001      	adds	r0, #1
 800f426:	d011      	beq.n	800f44c <_puts_r+0x84>
 800f428:	250a      	movs	r5, #10
 800f42a:	e011      	b.n	800f450 <_puts_r+0x88>
 800f42c:	4b1b      	ldr	r3, [pc, #108]	; (800f49c <_puts_r+0xd4>)
 800f42e:	429c      	cmp	r4, r3
 800f430:	d101      	bne.n	800f436 <_puts_r+0x6e>
 800f432:	68ac      	ldr	r4, [r5, #8]
 800f434:	e7da      	b.n	800f3ec <_puts_r+0x24>
 800f436:	4b1a      	ldr	r3, [pc, #104]	; (800f4a0 <_puts_r+0xd8>)
 800f438:	429c      	cmp	r4, r3
 800f43a:	bf08      	it	eq
 800f43c:	68ec      	ldreq	r4, [r5, #12]
 800f43e:	e7d5      	b.n	800f3ec <_puts_r+0x24>
 800f440:	4621      	mov	r1, r4
 800f442:	4628      	mov	r0, r5
 800f444:	f000 ff92 	bl	801036c <__swsetup_r>
 800f448:	2800      	cmp	r0, #0
 800f44a:	d0dd      	beq.n	800f408 <_puts_r+0x40>
 800f44c:	f04f 35ff 	mov.w	r5, #4294967295
 800f450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f452:	07da      	lsls	r2, r3, #31
 800f454:	d405      	bmi.n	800f462 <_puts_r+0x9a>
 800f456:	89a3      	ldrh	r3, [r4, #12]
 800f458:	059b      	lsls	r3, r3, #22
 800f45a:	d402      	bmi.n	800f462 <_puts_r+0x9a>
 800f45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f45e:	f002 fb95 	bl	8011b8c <__retarget_lock_release_recursive>
 800f462:	4628      	mov	r0, r5
 800f464:	bd70      	pop	{r4, r5, r6, pc}
 800f466:	2b00      	cmp	r3, #0
 800f468:	da04      	bge.n	800f474 <_puts_r+0xac>
 800f46a:	69a2      	ldr	r2, [r4, #24]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	dc06      	bgt.n	800f47e <_puts_r+0xb6>
 800f470:	290a      	cmp	r1, #10
 800f472:	d004      	beq.n	800f47e <_puts_r+0xb6>
 800f474:	6823      	ldr	r3, [r4, #0]
 800f476:	1c5a      	adds	r2, r3, #1
 800f478:	6022      	str	r2, [r4, #0]
 800f47a:	7019      	strb	r1, [r3, #0]
 800f47c:	e7c5      	b.n	800f40a <_puts_r+0x42>
 800f47e:	4622      	mov	r2, r4
 800f480:	4628      	mov	r0, r5
 800f482:	f000 ff21 	bl	80102c8 <__swbuf_r>
 800f486:	3001      	adds	r0, #1
 800f488:	d1bf      	bne.n	800f40a <_puts_r+0x42>
 800f48a:	e7df      	b.n	800f44c <_puts_r+0x84>
 800f48c:	250a      	movs	r5, #10
 800f48e:	6823      	ldr	r3, [r4, #0]
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	6022      	str	r2, [r4, #0]
 800f494:	701d      	strb	r5, [r3, #0]
 800f496:	e7db      	b.n	800f450 <_puts_r+0x88>
 800f498:	08013fec 	.word	0x08013fec
 800f49c:	0801400c 	.word	0x0801400c
 800f4a0:	08013fcc 	.word	0x08013fcc

0800f4a4 <puts>:
 800f4a4:	4b02      	ldr	r3, [pc, #8]	; (800f4b0 <puts+0xc>)
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	6818      	ldr	r0, [r3, #0]
 800f4aa:	f7ff bf8d 	b.w	800f3c8 <_puts_r>
 800f4ae:	bf00      	nop
 800f4b0:	2000007c 	.word	0x2000007c

0800f4b4 <nanf>:
 800f4b4:	4800      	ldr	r0, [pc, #0]	; (800f4b8 <nanf+0x4>)
 800f4b6:	4770      	bx	lr
 800f4b8:	7fc00000 	.word	0x7fc00000

0800f4bc <siprintf>:
 800f4bc:	b40e      	push	{r1, r2, r3}
 800f4be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4c2:	b500      	push	{lr}
 800f4c4:	b09c      	sub	sp, #112	; 0x70
 800f4c6:	ab1d      	add	r3, sp, #116	; 0x74
 800f4c8:	9002      	str	r0, [sp, #8]
 800f4ca:	9006      	str	r0, [sp, #24]
 800f4cc:	9107      	str	r1, [sp, #28]
 800f4ce:	9104      	str	r1, [sp, #16]
 800f4d0:	4808      	ldr	r0, [pc, #32]	; (800f4f4 <siprintf+0x38>)
 800f4d2:	4909      	ldr	r1, [pc, #36]	; (800f4f8 <siprintf+0x3c>)
 800f4d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4d8:	9105      	str	r1, [sp, #20]
 800f4da:	6800      	ldr	r0, [r0, #0]
 800f4dc:	a902      	add	r1, sp, #8
 800f4de:	9301      	str	r3, [sp, #4]
 800f4e0:	f003 f9aa 	bl	8012838 <_svfiprintf_r>
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	9b02      	ldr	r3, [sp, #8]
 800f4e8:	701a      	strb	r2, [r3, #0]
 800f4ea:	b01c      	add	sp, #112	; 0x70
 800f4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4f0:	b003      	add	sp, #12
 800f4f2:	4770      	bx	lr
 800f4f4:	2000007c 	.word	0x2000007c
 800f4f8:	ffff0208 	.word	0xffff0208

0800f4fc <sulp>:
 800f4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f500:	460f      	mov	r7, r1
 800f502:	4690      	mov	r8, r2
 800f504:	f002 ff40 	bl	8012388 <__ulp>
 800f508:	4604      	mov	r4, r0
 800f50a:	460d      	mov	r5, r1
 800f50c:	f1b8 0f00 	cmp.w	r8, #0
 800f510:	d011      	beq.n	800f536 <sulp+0x3a>
 800f512:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800f516:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	dd0b      	ble.n	800f536 <sulp+0x3a>
 800f51e:	2400      	movs	r4, #0
 800f520:	051b      	lsls	r3, r3, #20
 800f522:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f526:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f52a:	4622      	mov	r2, r4
 800f52c:	462b      	mov	r3, r5
 800f52e:	f7f1 f83f 	bl	80005b0 <__aeabi_dmul>
 800f532:	4604      	mov	r4, r0
 800f534:	460d      	mov	r5, r1
 800f536:	4620      	mov	r0, r4
 800f538:	4629      	mov	r1, r5
 800f53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f540 <_strtod_l>:
 800f540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f544:	469b      	mov	fp, r3
 800f546:	2300      	movs	r3, #0
 800f548:	b0a1      	sub	sp, #132	; 0x84
 800f54a:	931c      	str	r3, [sp, #112]	; 0x70
 800f54c:	4ba1      	ldr	r3, [pc, #644]	; (800f7d4 <_strtod_l+0x294>)
 800f54e:	4682      	mov	sl, r0
 800f550:	681f      	ldr	r7, [r3, #0]
 800f552:	460e      	mov	r6, r1
 800f554:	4638      	mov	r0, r7
 800f556:	9217      	str	r2, [sp, #92]	; 0x5c
 800f558:	f7f0 fe66 	bl	8000228 <strlen>
 800f55c:	f04f 0800 	mov.w	r8, #0
 800f560:	4604      	mov	r4, r0
 800f562:	f04f 0900 	mov.w	r9, #0
 800f566:	961b      	str	r6, [sp, #108]	; 0x6c
 800f568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f56a:	781a      	ldrb	r2, [r3, #0]
 800f56c:	2a2b      	cmp	r2, #43	; 0x2b
 800f56e:	d04c      	beq.n	800f60a <_strtod_l+0xca>
 800f570:	d83a      	bhi.n	800f5e8 <_strtod_l+0xa8>
 800f572:	2a0d      	cmp	r2, #13
 800f574:	d833      	bhi.n	800f5de <_strtod_l+0x9e>
 800f576:	2a08      	cmp	r2, #8
 800f578:	d833      	bhi.n	800f5e2 <_strtod_l+0xa2>
 800f57a:	2a00      	cmp	r2, #0
 800f57c:	d03d      	beq.n	800f5fa <_strtod_l+0xba>
 800f57e:	2300      	movs	r3, #0
 800f580:	930c      	str	r3, [sp, #48]	; 0x30
 800f582:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f584:	782b      	ldrb	r3, [r5, #0]
 800f586:	2b30      	cmp	r3, #48	; 0x30
 800f588:	f040 80af 	bne.w	800f6ea <_strtod_l+0x1aa>
 800f58c:	786b      	ldrb	r3, [r5, #1]
 800f58e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f592:	2b58      	cmp	r3, #88	; 0x58
 800f594:	d16c      	bne.n	800f670 <_strtod_l+0x130>
 800f596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f598:	4650      	mov	r0, sl
 800f59a:	9301      	str	r3, [sp, #4]
 800f59c:	ab1c      	add	r3, sp, #112	; 0x70
 800f59e:	9300      	str	r3, [sp, #0]
 800f5a0:	4a8d      	ldr	r2, [pc, #564]	; (800f7d8 <_strtod_l+0x298>)
 800f5a2:	f8cd b008 	str.w	fp, [sp, #8]
 800f5a6:	ab1d      	add	r3, sp, #116	; 0x74
 800f5a8:	a91b      	add	r1, sp, #108	; 0x6c
 800f5aa:	f001 ffeb 	bl	8011584 <__gethex>
 800f5ae:	f010 0607 	ands.w	r6, r0, #7
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	d005      	beq.n	800f5c2 <_strtod_l+0x82>
 800f5b6:	2e06      	cmp	r6, #6
 800f5b8:	d129      	bne.n	800f60e <_strtod_l+0xce>
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	3501      	adds	r5, #1
 800f5be:	951b      	str	r5, [sp, #108]	; 0x6c
 800f5c0:	930c      	str	r3, [sp, #48]	; 0x30
 800f5c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f040 8596 	bne.w	80100f6 <_strtod_l+0xbb6>
 800f5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5cc:	b1d3      	cbz	r3, 800f604 <_strtod_l+0xc4>
 800f5ce:	4642      	mov	r2, r8
 800f5d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	b021      	add	sp, #132	; 0x84
 800f5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5de:	2a20      	cmp	r2, #32
 800f5e0:	d1cd      	bne.n	800f57e <_strtod_l+0x3e>
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	931b      	str	r3, [sp, #108]	; 0x6c
 800f5e6:	e7bf      	b.n	800f568 <_strtod_l+0x28>
 800f5e8:	2a2d      	cmp	r2, #45	; 0x2d
 800f5ea:	d1c8      	bne.n	800f57e <_strtod_l+0x3e>
 800f5ec:	2201      	movs	r2, #1
 800f5ee:	920c      	str	r2, [sp, #48]	; 0x30
 800f5f0:	1c5a      	adds	r2, r3, #1
 800f5f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800f5f4:	785b      	ldrb	r3, [r3, #1]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1c3      	bne.n	800f582 <_strtod_l+0x42>
 800f5fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5fc:	961b      	str	r6, [sp, #108]	; 0x6c
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f040 8577 	bne.w	80100f2 <_strtod_l+0xbb2>
 800f604:	4642      	mov	r2, r8
 800f606:	464b      	mov	r3, r9
 800f608:	e7e4      	b.n	800f5d4 <_strtod_l+0x94>
 800f60a:	2200      	movs	r2, #0
 800f60c:	e7ef      	b.n	800f5ee <_strtod_l+0xae>
 800f60e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f610:	b13a      	cbz	r2, 800f622 <_strtod_l+0xe2>
 800f612:	2135      	movs	r1, #53	; 0x35
 800f614:	a81e      	add	r0, sp, #120	; 0x78
 800f616:	f002 ffbb 	bl	8012590 <__copybits>
 800f61a:	4650      	mov	r0, sl
 800f61c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f61e:	f002 fb83 	bl	8011d28 <_Bfree>
 800f622:	3e01      	subs	r6, #1
 800f624:	2e05      	cmp	r6, #5
 800f626:	d807      	bhi.n	800f638 <_strtod_l+0xf8>
 800f628:	e8df f006 	tbb	[pc, r6]
 800f62c:	1d180b0e 	.word	0x1d180b0e
 800f630:	030e      	.short	0x030e
 800f632:	f04f 0900 	mov.w	r9, #0
 800f636:	46c8      	mov	r8, r9
 800f638:	0721      	lsls	r1, r4, #28
 800f63a:	d5c2      	bpl.n	800f5c2 <_strtod_l+0x82>
 800f63c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f640:	e7bf      	b.n	800f5c2 <_strtod_l+0x82>
 800f642:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800f646:	e7f7      	b.n	800f638 <_strtod_l+0xf8>
 800f648:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f64a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800f64e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f652:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f656:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f65a:	e7ed      	b.n	800f638 <_strtod_l+0xf8>
 800f65c:	f04f 0800 	mov.w	r8, #0
 800f660:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f7dc <_strtod_l+0x29c>
 800f664:	e7e8      	b.n	800f638 <_strtod_l+0xf8>
 800f666:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f66a:	f04f 38ff 	mov.w	r8, #4294967295
 800f66e:	e7e3      	b.n	800f638 <_strtod_l+0xf8>
 800f670:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	921b      	str	r2, [sp, #108]	; 0x6c
 800f676:	785b      	ldrb	r3, [r3, #1]
 800f678:	2b30      	cmp	r3, #48	; 0x30
 800f67a:	d0f9      	beq.n	800f670 <_strtod_l+0x130>
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d0a0      	beq.n	800f5c2 <_strtod_l+0x82>
 800f680:	2301      	movs	r3, #1
 800f682:	9307      	str	r3, [sp, #28]
 800f684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f686:	220a      	movs	r2, #10
 800f688:	9308      	str	r3, [sp, #32]
 800f68a:	2300      	movs	r3, #0
 800f68c:	469b      	mov	fp, r3
 800f68e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f692:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f694:	7805      	ldrb	r5, [r0, #0]
 800f696:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f69a:	b2d9      	uxtb	r1, r3
 800f69c:	2909      	cmp	r1, #9
 800f69e:	d926      	bls.n	800f6ee <_strtod_l+0x1ae>
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4639      	mov	r1, r7
 800f6a4:	f003 fa1b 	bl	8012ade <strncmp>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d032      	beq.n	800f712 <_strtod_l+0x1d2>
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	462b      	mov	r3, r5
 800f6b0:	465c      	mov	r4, fp
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	9004      	str	r0, [sp, #16]
 800f6b6:	2b65      	cmp	r3, #101	; 0x65
 800f6b8:	d001      	beq.n	800f6be <_strtod_l+0x17e>
 800f6ba:	2b45      	cmp	r3, #69	; 0x45
 800f6bc:	d113      	bne.n	800f6e6 <_strtod_l+0x1a6>
 800f6be:	b91c      	cbnz	r4, 800f6c8 <_strtod_l+0x188>
 800f6c0:	9b07      	ldr	r3, [sp, #28]
 800f6c2:	4303      	orrs	r3, r0
 800f6c4:	d099      	beq.n	800f5fa <_strtod_l+0xba>
 800f6c6:	2400      	movs	r4, #0
 800f6c8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f6ca:	1c73      	adds	r3, r6, #1
 800f6cc:	931b      	str	r3, [sp, #108]	; 0x6c
 800f6ce:	7873      	ldrb	r3, [r6, #1]
 800f6d0:	2b2b      	cmp	r3, #43	; 0x2b
 800f6d2:	d078      	beq.n	800f7c6 <_strtod_l+0x286>
 800f6d4:	2b2d      	cmp	r3, #45	; 0x2d
 800f6d6:	d07b      	beq.n	800f7d0 <_strtod_l+0x290>
 800f6d8:	2700      	movs	r7, #0
 800f6da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f6de:	2909      	cmp	r1, #9
 800f6e0:	f240 8082 	bls.w	800f7e8 <_strtod_l+0x2a8>
 800f6e4:	961b      	str	r6, [sp, #108]	; 0x6c
 800f6e6:	2500      	movs	r5, #0
 800f6e8:	e09e      	b.n	800f828 <_strtod_l+0x2e8>
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	e7c9      	b.n	800f682 <_strtod_l+0x142>
 800f6ee:	f1bb 0f08 	cmp.w	fp, #8
 800f6f2:	bfd5      	itete	le
 800f6f4:	9906      	ldrle	r1, [sp, #24]
 800f6f6:	9905      	ldrgt	r1, [sp, #20]
 800f6f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f6fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f700:	f100 0001 	add.w	r0, r0, #1
 800f704:	bfd4      	ite	le
 800f706:	9306      	strle	r3, [sp, #24]
 800f708:	9305      	strgt	r3, [sp, #20]
 800f70a:	f10b 0b01 	add.w	fp, fp, #1
 800f70e:	901b      	str	r0, [sp, #108]	; 0x6c
 800f710:	e7bf      	b.n	800f692 <_strtod_l+0x152>
 800f712:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f714:	191a      	adds	r2, r3, r4
 800f716:	921b      	str	r2, [sp, #108]	; 0x6c
 800f718:	5d1b      	ldrb	r3, [r3, r4]
 800f71a:	f1bb 0f00 	cmp.w	fp, #0
 800f71e:	d036      	beq.n	800f78e <_strtod_l+0x24e>
 800f720:	465c      	mov	r4, fp
 800f722:	9004      	str	r0, [sp, #16]
 800f724:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f728:	2a09      	cmp	r2, #9
 800f72a:	d912      	bls.n	800f752 <_strtod_l+0x212>
 800f72c:	2201      	movs	r2, #1
 800f72e:	e7c2      	b.n	800f6b6 <_strtod_l+0x176>
 800f730:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f732:	3001      	adds	r0, #1
 800f734:	1c5a      	adds	r2, r3, #1
 800f736:	921b      	str	r2, [sp, #108]	; 0x6c
 800f738:	785b      	ldrb	r3, [r3, #1]
 800f73a:	2b30      	cmp	r3, #48	; 0x30
 800f73c:	d0f8      	beq.n	800f730 <_strtod_l+0x1f0>
 800f73e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f742:	2a08      	cmp	r2, #8
 800f744:	f200 84dc 	bhi.w	8010100 <_strtod_l+0xbc0>
 800f748:	9004      	str	r0, [sp, #16]
 800f74a:	2000      	movs	r0, #0
 800f74c:	4604      	mov	r4, r0
 800f74e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f750:	9208      	str	r2, [sp, #32]
 800f752:	3b30      	subs	r3, #48	; 0x30
 800f754:	f100 0201 	add.w	r2, r0, #1
 800f758:	d013      	beq.n	800f782 <_strtod_l+0x242>
 800f75a:	9904      	ldr	r1, [sp, #16]
 800f75c:	1905      	adds	r5, r0, r4
 800f75e:	4411      	add	r1, r2
 800f760:	9104      	str	r1, [sp, #16]
 800f762:	4622      	mov	r2, r4
 800f764:	210a      	movs	r1, #10
 800f766:	42aa      	cmp	r2, r5
 800f768:	d113      	bne.n	800f792 <_strtod_l+0x252>
 800f76a:	1822      	adds	r2, r4, r0
 800f76c:	2a08      	cmp	r2, #8
 800f76e:	f104 0401 	add.w	r4, r4, #1
 800f772:	4404      	add	r4, r0
 800f774:	dc1b      	bgt.n	800f7ae <_strtod_l+0x26e>
 800f776:	220a      	movs	r2, #10
 800f778:	9906      	ldr	r1, [sp, #24]
 800f77a:	fb02 3301 	mla	r3, r2, r1, r3
 800f77e:	9306      	str	r3, [sp, #24]
 800f780:	2200      	movs	r2, #0
 800f782:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f784:	4610      	mov	r0, r2
 800f786:	1c59      	adds	r1, r3, #1
 800f788:	911b      	str	r1, [sp, #108]	; 0x6c
 800f78a:	785b      	ldrb	r3, [r3, #1]
 800f78c:	e7ca      	b.n	800f724 <_strtod_l+0x1e4>
 800f78e:	4658      	mov	r0, fp
 800f790:	e7d3      	b.n	800f73a <_strtod_l+0x1fa>
 800f792:	2a08      	cmp	r2, #8
 800f794:	dc04      	bgt.n	800f7a0 <_strtod_l+0x260>
 800f796:	9f06      	ldr	r7, [sp, #24]
 800f798:	434f      	muls	r7, r1
 800f79a:	9706      	str	r7, [sp, #24]
 800f79c:	3201      	adds	r2, #1
 800f79e:	e7e2      	b.n	800f766 <_strtod_l+0x226>
 800f7a0:	1c57      	adds	r7, r2, #1
 800f7a2:	2f10      	cmp	r7, #16
 800f7a4:	bfde      	ittt	le
 800f7a6:	9f05      	ldrle	r7, [sp, #20]
 800f7a8:	434f      	mulle	r7, r1
 800f7aa:	9705      	strle	r7, [sp, #20]
 800f7ac:	e7f6      	b.n	800f79c <_strtod_l+0x25c>
 800f7ae:	2c10      	cmp	r4, #16
 800f7b0:	bfdf      	itttt	le
 800f7b2:	220a      	movle	r2, #10
 800f7b4:	9905      	ldrle	r1, [sp, #20]
 800f7b6:	fb02 3301 	mlale	r3, r2, r1, r3
 800f7ba:	9305      	strle	r3, [sp, #20]
 800f7bc:	e7e0      	b.n	800f780 <_strtod_l+0x240>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	9304      	str	r3, [sp, #16]
 800f7c4:	e77c      	b.n	800f6c0 <_strtod_l+0x180>
 800f7c6:	2700      	movs	r7, #0
 800f7c8:	1cb3      	adds	r3, r6, #2
 800f7ca:	931b      	str	r3, [sp, #108]	; 0x6c
 800f7cc:	78b3      	ldrb	r3, [r6, #2]
 800f7ce:	e784      	b.n	800f6da <_strtod_l+0x19a>
 800f7d0:	2701      	movs	r7, #1
 800f7d2:	e7f9      	b.n	800f7c8 <_strtod_l+0x288>
 800f7d4:	08014098 	.word	0x08014098
 800f7d8:	08013ec0 	.word	0x08013ec0
 800f7dc:	7ff00000 	.word	0x7ff00000
 800f7e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7e2:	1c59      	adds	r1, r3, #1
 800f7e4:	911b      	str	r1, [sp, #108]	; 0x6c
 800f7e6:	785b      	ldrb	r3, [r3, #1]
 800f7e8:	2b30      	cmp	r3, #48	; 0x30
 800f7ea:	d0f9      	beq.n	800f7e0 <_strtod_l+0x2a0>
 800f7ec:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f7f0:	2908      	cmp	r1, #8
 800f7f2:	f63f af78 	bhi.w	800f6e6 <_strtod_l+0x1a6>
 800f7f6:	f04f 0e0a 	mov.w	lr, #10
 800f7fa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800f7fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f800:	9309      	str	r3, [sp, #36]	; 0x24
 800f802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f804:	1c59      	adds	r1, r3, #1
 800f806:	911b      	str	r1, [sp, #108]	; 0x6c
 800f808:	785b      	ldrb	r3, [r3, #1]
 800f80a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800f80e:	2d09      	cmp	r5, #9
 800f810:	d935      	bls.n	800f87e <_strtod_l+0x33e>
 800f812:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f814:	1b49      	subs	r1, r1, r5
 800f816:	2908      	cmp	r1, #8
 800f818:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f81c:	dc02      	bgt.n	800f824 <_strtod_l+0x2e4>
 800f81e:	4565      	cmp	r5, ip
 800f820:	bfa8      	it	ge
 800f822:	4665      	movge	r5, ip
 800f824:	b107      	cbz	r7, 800f828 <_strtod_l+0x2e8>
 800f826:	426d      	negs	r5, r5
 800f828:	2c00      	cmp	r4, #0
 800f82a:	d14c      	bne.n	800f8c6 <_strtod_l+0x386>
 800f82c:	9907      	ldr	r1, [sp, #28]
 800f82e:	4301      	orrs	r1, r0
 800f830:	f47f aec7 	bne.w	800f5c2 <_strtod_l+0x82>
 800f834:	2a00      	cmp	r2, #0
 800f836:	f47f aee0 	bne.w	800f5fa <_strtod_l+0xba>
 800f83a:	2b69      	cmp	r3, #105	; 0x69
 800f83c:	d026      	beq.n	800f88c <_strtod_l+0x34c>
 800f83e:	dc23      	bgt.n	800f888 <_strtod_l+0x348>
 800f840:	2b49      	cmp	r3, #73	; 0x49
 800f842:	d023      	beq.n	800f88c <_strtod_l+0x34c>
 800f844:	2b4e      	cmp	r3, #78	; 0x4e
 800f846:	f47f aed8 	bne.w	800f5fa <_strtod_l+0xba>
 800f84a:	499c      	ldr	r1, [pc, #624]	; (800fabc <_strtod_l+0x57c>)
 800f84c:	a81b      	add	r0, sp, #108	; 0x6c
 800f84e:	f002 f8e7 	bl	8011a20 <__match>
 800f852:	2800      	cmp	r0, #0
 800f854:	f43f aed1 	beq.w	800f5fa <_strtod_l+0xba>
 800f858:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	2b28      	cmp	r3, #40	; 0x28
 800f85e:	d12c      	bne.n	800f8ba <_strtod_l+0x37a>
 800f860:	4997      	ldr	r1, [pc, #604]	; (800fac0 <_strtod_l+0x580>)
 800f862:	aa1e      	add	r2, sp, #120	; 0x78
 800f864:	a81b      	add	r0, sp, #108	; 0x6c
 800f866:	f002 f8ef 	bl	8011a48 <__hexnan>
 800f86a:	2805      	cmp	r0, #5
 800f86c:	d125      	bne.n	800f8ba <_strtod_l+0x37a>
 800f86e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f870:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800f874:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f878:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f87c:	e6a1      	b.n	800f5c2 <_strtod_l+0x82>
 800f87e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800f882:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800f886:	e7bc      	b.n	800f802 <_strtod_l+0x2c2>
 800f888:	2b6e      	cmp	r3, #110	; 0x6e
 800f88a:	e7dc      	b.n	800f846 <_strtod_l+0x306>
 800f88c:	498d      	ldr	r1, [pc, #564]	; (800fac4 <_strtod_l+0x584>)
 800f88e:	a81b      	add	r0, sp, #108	; 0x6c
 800f890:	f002 f8c6 	bl	8011a20 <__match>
 800f894:	2800      	cmp	r0, #0
 800f896:	f43f aeb0 	beq.w	800f5fa <_strtod_l+0xba>
 800f89a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f89c:	498a      	ldr	r1, [pc, #552]	; (800fac8 <_strtod_l+0x588>)
 800f89e:	3b01      	subs	r3, #1
 800f8a0:	a81b      	add	r0, sp, #108	; 0x6c
 800f8a2:	931b      	str	r3, [sp, #108]	; 0x6c
 800f8a4:	f002 f8bc 	bl	8011a20 <__match>
 800f8a8:	b910      	cbnz	r0, 800f8b0 <_strtod_l+0x370>
 800f8aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	931b      	str	r3, [sp, #108]	; 0x6c
 800f8b0:	f04f 0800 	mov.w	r8, #0
 800f8b4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800fad8 <_strtod_l+0x598>
 800f8b8:	e683      	b.n	800f5c2 <_strtod_l+0x82>
 800f8ba:	4884      	ldr	r0, [pc, #528]	; (800facc <_strtod_l+0x58c>)
 800f8bc:	f7fe feb2 	bl	800e624 <nan>
 800f8c0:	4680      	mov	r8, r0
 800f8c2:	4689      	mov	r9, r1
 800f8c4:	e67d      	b.n	800f5c2 <_strtod_l+0x82>
 800f8c6:	9b04      	ldr	r3, [sp, #16]
 800f8c8:	f1bb 0f00 	cmp.w	fp, #0
 800f8cc:	bf08      	it	eq
 800f8ce:	46a3      	moveq	fp, r4
 800f8d0:	1aeb      	subs	r3, r5, r3
 800f8d2:	2c10      	cmp	r4, #16
 800f8d4:	9806      	ldr	r0, [sp, #24]
 800f8d6:	4626      	mov	r6, r4
 800f8d8:	9307      	str	r3, [sp, #28]
 800f8da:	bfa8      	it	ge
 800f8dc:	2610      	movge	r6, #16
 800f8de:	f7f0 fded 	bl	80004bc <__aeabi_ui2d>
 800f8e2:	2c09      	cmp	r4, #9
 800f8e4:	4680      	mov	r8, r0
 800f8e6:	4689      	mov	r9, r1
 800f8e8:	dd13      	ble.n	800f912 <_strtod_l+0x3d2>
 800f8ea:	4b79      	ldr	r3, [pc, #484]	; (800fad0 <_strtod_l+0x590>)
 800f8ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f8f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f8f4:	f7f0 fe5c 	bl	80005b0 <__aeabi_dmul>
 800f8f8:	4680      	mov	r8, r0
 800f8fa:	9805      	ldr	r0, [sp, #20]
 800f8fc:	4689      	mov	r9, r1
 800f8fe:	f7f0 fddd 	bl	80004bc <__aeabi_ui2d>
 800f902:	4602      	mov	r2, r0
 800f904:	460b      	mov	r3, r1
 800f906:	4640      	mov	r0, r8
 800f908:	4649      	mov	r1, r9
 800f90a:	f7f0 fc9b 	bl	8000244 <__adddf3>
 800f90e:	4680      	mov	r8, r0
 800f910:	4689      	mov	r9, r1
 800f912:	2c0f      	cmp	r4, #15
 800f914:	dc36      	bgt.n	800f984 <_strtod_l+0x444>
 800f916:	9b07      	ldr	r3, [sp, #28]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f43f ae52 	beq.w	800f5c2 <_strtod_l+0x82>
 800f91e:	dd22      	ble.n	800f966 <_strtod_l+0x426>
 800f920:	2b16      	cmp	r3, #22
 800f922:	dc09      	bgt.n	800f938 <_strtod_l+0x3f8>
 800f924:	4c6a      	ldr	r4, [pc, #424]	; (800fad0 <_strtod_l+0x590>)
 800f926:	4642      	mov	r2, r8
 800f928:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800f92c:	464b      	mov	r3, r9
 800f92e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f932:	f7f0 fe3d 	bl	80005b0 <__aeabi_dmul>
 800f936:	e7c3      	b.n	800f8c0 <_strtod_l+0x380>
 800f938:	9a07      	ldr	r2, [sp, #28]
 800f93a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f93e:	4293      	cmp	r3, r2
 800f940:	db20      	blt.n	800f984 <_strtod_l+0x444>
 800f942:	4d63      	ldr	r5, [pc, #396]	; (800fad0 <_strtod_l+0x590>)
 800f944:	f1c4 040f 	rsb	r4, r4, #15
 800f948:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f94c:	4642      	mov	r2, r8
 800f94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f952:	464b      	mov	r3, r9
 800f954:	f7f0 fe2c 	bl	80005b0 <__aeabi_dmul>
 800f958:	9b07      	ldr	r3, [sp, #28]
 800f95a:	1b1c      	subs	r4, r3, r4
 800f95c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f960:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f964:	e7e5      	b.n	800f932 <_strtod_l+0x3f2>
 800f966:	9b07      	ldr	r3, [sp, #28]
 800f968:	3316      	adds	r3, #22
 800f96a:	db0b      	blt.n	800f984 <_strtod_l+0x444>
 800f96c:	9b04      	ldr	r3, [sp, #16]
 800f96e:	4a58      	ldr	r2, [pc, #352]	; (800fad0 <_strtod_l+0x590>)
 800f970:	1b5d      	subs	r5, r3, r5
 800f972:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f976:	4640      	mov	r0, r8
 800f978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f97c:	4649      	mov	r1, r9
 800f97e:	f7f0 ff41 	bl	8000804 <__aeabi_ddiv>
 800f982:	e79d      	b.n	800f8c0 <_strtod_l+0x380>
 800f984:	9b07      	ldr	r3, [sp, #28]
 800f986:	1ba6      	subs	r6, r4, r6
 800f988:	441e      	add	r6, r3
 800f98a:	2e00      	cmp	r6, #0
 800f98c:	dd71      	ble.n	800fa72 <_strtod_l+0x532>
 800f98e:	f016 030f 	ands.w	r3, r6, #15
 800f992:	d00a      	beq.n	800f9aa <_strtod_l+0x46a>
 800f994:	494e      	ldr	r1, [pc, #312]	; (800fad0 <_strtod_l+0x590>)
 800f996:	4642      	mov	r2, r8
 800f998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9a0:	464b      	mov	r3, r9
 800f9a2:	f7f0 fe05 	bl	80005b0 <__aeabi_dmul>
 800f9a6:	4680      	mov	r8, r0
 800f9a8:	4689      	mov	r9, r1
 800f9aa:	f036 060f 	bics.w	r6, r6, #15
 800f9ae:	d050      	beq.n	800fa52 <_strtod_l+0x512>
 800f9b0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800f9b4:	dd27      	ble.n	800fa06 <_strtod_l+0x4c6>
 800f9b6:	f04f 0b00 	mov.w	fp, #0
 800f9ba:	f8cd b010 	str.w	fp, [sp, #16]
 800f9be:	f8cd b020 	str.w	fp, [sp, #32]
 800f9c2:	f8cd b018 	str.w	fp, [sp, #24]
 800f9c6:	2322      	movs	r3, #34	; 0x22
 800f9c8:	f04f 0800 	mov.w	r8, #0
 800f9cc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800fad8 <_strtod_l+0x598>
 800f9d0:	f8ca 3000 	str.w	r3, [sl]
 800f9d4:	9b08      	ldr	r3, [sp, #32]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	f43f adf3 	beq.w	800f5c2 <_strtod_l+0x82>
 800f9dc:	4650      	mov	r0, sl
 800f9de:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f9e0:	f002 f9a2 	bl	8011d28 <_Bfree>
 800f9e4:	4650      	mov	r0, sl
 800f9e6:	9906      	ldr	r1, [sp, #24]
 800f9e8:	f002 f99e 	bl	8011d28 <_Bfree>
 800f9ec:	4650      	mov	r0, sl
 800f9ee:	9904      	ldr	r1, [sp, #16]
 800f9f0:	f002 f99a 	bl	8011d28 <_Bfree>
 800f9f4:	4650      	mov	r0, sl
 800f9f6:	9908      	ldr	r1, [sp, #32]
 800f9f8:	f002 f996 	bl	8011d28 <_Bfree>
 800f9fc:	4659      	mov	r1, fp
 800f9fe:	4650      	mov	r0, sl
 800fa00:	f002 f992 	bl	8011d28 <_Bfree>
 800fa04:	e5dd      	b.n	800f5c2 <_strtod_l+0x82>
 800fa06:	2300      	movs	r3, #0
 800fa08:	4640      	mov	r0, r8
 800fa0a:	4649      	mov	r1, r9
 800fa0c:	461f      	mov	r7, r3
 800fa0e:	1136      	asrs	r6, r6, #4
 800fa10:	2e01      	cmp	r6, #1
 800fa12:	dc21      	bgt.n	800fa58 <_strtod_l+0x518>
 800fa14:	b10b      	cbz	r3, 800fa1a <_strtod_l+0x4da>
 800fa16:	4680      	mov	r8, r0
 800fa18:	4689      	mov	r9, r1
 800fa1a:	4b2e      	ldr	r3, [pc, #184]	; (800fad4 <_strtod_l+0x594>)
 800fa1c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800fa20:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fa24:	4642      	mov	r2, r8
 800fa26:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa2a:	464b      	mov	r3, r9
 800fa2c:	f7f0 fdc0 	bl	80005b0 <__aeabi_dmul>
 800fa30:	4b29      	ldr	r3, [pc, #164]	; (800fad8 <_strtod_l+0x598>)
 800fa32:	460a      	mov	r2, r1
 800fa34:	400b      	ands	r3, r1
 800fa36:	4929      	ldr	r1, [pc, #164]	; (800fadc <_strtod_l+0x59c>)
 800fa38:	4680      	mov	r8, r0
 800fa3a:	428b      	cmp	r3, r1
 800fa3c:	d8bb      	bhi.n	800f9b6 <_strtod_l+0x476>
 800fa3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fa42:	428b      	cmp	r3, r1
 800fa44:	bf86      	itte	hi
 800fa46:	f04f 38ff 	movhi.w	r8, #4294967295
 800fa4a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800fae0 <_strtod_l+0x5a0>
 800fa4e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800fa52:	2300      	movs	r3, #0
 800fa54:	9305      	str	r3, [sp, #20]
 800fa56:	e07e      	b.n	800fb56 <_strtod_l+0x616>
 800fa58:	07f2      	lsls	r2, r6, #31
 800fa5a:	d507      	bpl.n	800fa6c <_strtod_l+0x52c>
 800fa5c:	4b1d      	ldr	r3, [pc, #116]	; (800fad4 <_strtod_l+0x594>)
 800fa5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa66:	f7f0 fda3 	bl	80005b0 <__aeabi_dmul>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	3701      	adds	r7, #1
 800fa6e:	1076      	asrs	r6, r6, #1
 800fa70:	e7ce      	b.n	800fa10 <_strtod_l+0x4d0>
 800fa72:	d0ee      	beq.n	800fa52 <_strtod_l+0x512>
 800fa74:	4276      	negs	r6, r6
 800fa76:	f016 020f 	ands.w	r2, r6, #15
 800fa7a:	d00a      	beq.n	800fa92 <_strtod_l+0x552>
 800fa7c:	4b14      	ldr	r3, [pc, #80]	; (800fad0 <_strtod_l+0x590>)
 800fa7e:	4640      	mov	r0, r8
 800fa80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa84:	4649      	mov	r1, r9
 800fa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8a:	f7f0 febb 	bl	8000804 <__aeabi_ddiv>
 800fa8e:	4680      	mov	r8, r0
 800fa90:	4689      	mov	r9, r1
 800fa92:	1136      	asrs	r6, r6, #4
 800fa94:	d0dd      	beq.n	800fa52 <_strtod_l+0x512>
 800fa96:	2e1f      	cmp	r6, #31
 800fa98:	dd24      	ble.n	800fae4 <_strtod_l+0x5a4>
 800fa9a:	f04f 0b00 	mov.w	fp, #0
 800fa9e:	f8cd b010 	str.w	fp, [sp, #16]
 800faa2:	f8cd b020 	str.w	fp, [sp, #32]
 800faa6:	f8cd b018 	str.w	fp, [sp, #24]
 800faaa:	2322      	movs	r3, #34	; 0x22
 800faac:	f04f 0800 	mov.w	r8, #0
 800fab0:	f04f 0900 	mov.w	r9, #0
 800fab4:	f8ca 3000 	str.w	r3, [sl]
 800fab8:	e78c      	b.n	800f9d4 <_strtod_l+0x494>
 800faba:	bf00      	nop
 800fabc:	08013e91 	.word	0x08013e91
 800fac0:	08013ed4 	.word	0x08013ed4
 800fac4:	08013e89 	.word	0x08013e89
 800fac8:	08013f38 	.word	0x08013f38
 800facc:	08014258 	.word	0x08014258
 800fad0:	08014138 	.word	0x08014138
 800fad4:	08014110 	.word	0x08014110
 800fad8:	7ff00000 	.word	0x7ff00000
 800fadc:	7ca00000 	.word	0x7ca00000
 800fae0:	7fefffff 	.word	0x7fefffff
 800fae4:	f016 0310 	ands.w	r3, r6, #16
 800fae8:	bf18      	it	ne
 800faea:	236a      	movne	r3, #106	; 0x6a
 800faec:	4640      	mov	r0, r8
 800faee:	9305      	str	r3, [sp, #20]
 800faf0:	4649      	mov	r1, r9
 800faf2:	2300      	movs	r3, #0
 800faf4:	4fb2      	ldr	r7, [pc, #712]	; (800fdc0 <_strtod_l+0x880>)
 800faf6:	07f2      	lsls	r2, r6, #31
 800faf8:	d504      	bpl.n	800fb04 <_strtod_l+0x5c4>
 800fafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fafe:	f7f0 fd57 	bl	80005b0 <__aeabi_dmul>
 800fb02:	2301      	movs	r3, #1
 800fb04:	1076      	asrs	r6, r6, #1
 800fb06:	f107 0708 	add.w	r7, r7, #8
 800fb0a:	d1f4      	bne.n	800faf6 <_strtod_l+0x5b6>
 800fb0c:	b10b      	cbz	r3, 800fb12 <_strtod_l+0x5d2>
 800fb0e:	4680      	mov	r8, r0
 800fb10:	4689      	mov	r9, r1
 800fb12:	9b05      	ldr	r3, [sp, #20]
 800fb14:	b1bb      	cbz	r3, 800fb46 <_strtod_l+0x606>
 800fb16:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800fb1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	4649      	mov	r1, r9
 800fb22:	dd10      	ble.n	800fb46 <_strtod_l+0x606>
 800fb24:	2b1f      	cmp	r3, #31
 800fb26:	f340 812b 	ble.w	800fd80 <_strtod_l+0x840>
 800fb2a:	2b34      	cmp	r3, #52	; 0x34
 800fb2c:	bfd8      	it	le
 800fb2e:	f04f 32ff 	movle.w	r2, #4294967295
 800fb32:	f04f 0800 	mov.w	r8, #0
 800fb36:	bfcf      	iteee	gt
 800fb38:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800fb3c:	3b20      	suble	r3, #32
 800fb3e:	fa02 f303 	lslle.w	r3, r2, r3
 800fb42:	ea03 0901 	andle.w	r9, r3, r1
 800fb46:	2200      	movs	r2, #0
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4640      	mov	r0, r8
 800fb4c:	4649      	mov	r1, r9
 800fb4e:	f7f0 ff97 	bl	8000a80 <__aeabi_dcmpeq>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d1a1      	bne.n	800fa9a <_strtod_l+0x55a>
 800fb56:	9b06      	ldr	r3, [sp, #24]
 800fb58:	465a      	mov	r2, fp
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	4650      	mov	r0, sl
 800fb5e:	4623      	mov	r3, r4
 800fb60:	9908      	ldr	r1, [sp, #32]
 800fb62:	f002 f94d 	bl	8011e00 <__s2b>
 800fb66:	9008      	str	r0, [sp, #32]
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	f43f af24 	beq.w	800f9b6 <_strtod_l+0x476>
 800fb6e:	9b04      	ldr	r3, [sp, #16]
 800fb70:	f04f 0b00 	mov.w	fp, #0
 800fb74:	1b5d      	subs	r5, r3, r5
 800fb76:	9b07      	ldr	r3, [sp, #28]
 800fb78:	f8cd b010 	str.w	fp, [sp, #16]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	bfb4      	ite	lt
 800fb80:	462b      	movlt	r3, r5
 800fb82:	2300      	movge	r3, #0
 800fb84:	930e      	str	r3, [sp, #56]	; 0x38
 800fb86:	9b07      	ldr	r3, [sp, #28]
 800fb88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb8c:	9316      	str	r3, [sp, #88]	; 0x58
 800fb8e:	9b08      	ldr	r3, [sp, #32]
 800fb90:	4650      	mov	r0, sl
 800fb92:	6859      	ldr	r1, [r3, #4]
 800fb94:	f002 f888 	bl	8011ca8 <_Balloc>
 800fb98:	9006      	str	r0, [sp, #24]
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	f43f af13 	beq.w	800f9c6 <_strtod_l+0x486>
 800fba0:	9b08      	ldr	r3, [sp, #32]
 800fba2:	300c      	adds	r0, #12
 800fba4:	691a      	ldr	r2, [r3, #16]
 800fba6:	f103 010c 	add.w	r1, r3, #12
 800fbaa:	3202      	adds	r2, #2
 800fbac:	0092      	lsls	r2, r2, #2
 800fbae:	f7fe fd83 	bl	800e6b8 <memcpy>
 800fbb2:	ab1e      	add	r3, sp, #120	; 0x78
 800fbb4:	9301      	str	r3, [sp, #4]
 800fbb6:	ab1d      	add	r3, sp, #116	; 0x74
 800fbb8:	9300      	str	r3, [sp, #0]
 800fbba:	4642      	mov	r2, r8
 800fbbc:	464b      	mov	r3, r9
 800fbbe:	4650      	mov	r0, sl
 800fbc0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800fbc4:	f002 fc5a 	bl	801247c <__d2b>
 800fbc8:	901c      	str	r0, [sp, #112]	; 0x70
 800fbca:	2800      	cmp	r0, #0
 800fbcc:	f43f aefb 	beq.w	800f9c6 <_strtod_l+0x486>
 800fbd0:	2101      	movs	r1, #1
 800fbd2:	4650      	mov	r0, sl
 800fbd4:	f002 f9ac 	bl	8011f30 <__i2b>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	9004      	str	r0, [sp, #16]
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	f43f aef2 	beq.w	800f9c6 <_strtod_l+0x486>
 800fbe2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800fbe4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fbe6:	2d00      	cmp	r5, #0
 800fbe8:	bfab      	itete	ge
 800fbea:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800fbec:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800fbee:	18ee      	addge	r6, r5, r3
 800fbf0:	1b5c      	sublt	r4, r3, r5
 800fbf2:	9b05      	ldr	r3, [sp, #20]
 800fbf4:	bfa8      	it	ge
 800fbf6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800fbf8:	eba5 0503 	sub.w	r5, r5, r3
 800fbfc:	4415      	add	r5, r2
 800fbfe:	4b71      	ldr	r3, [pc, #452]	; (800fdc4 <_strtod_l+0x884>)
 800fc00:	f105 35ff 	add.w	r5, r5, #4294967295
 800fc04:	bfb8      	it	lt
 800fc06:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800fc08:	429d      	cmp	r5, r3
 800fc0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fc0e:	f280 80c9 	bge.w	800fda4 <_strtod_l+0x864>
 800fc12:	1b5b      	subs	r3, r3, r5
 800fc14:	2b1f      	cmp	r3, #31
 800fc16:	f04f 0701 	mov.w	r7, #1
 800fc1a:	eba2 0203 	sub.w	r2, r2, r3
 800fc1e:	f300 80b6 	bgt.w	800fd8e <_strtod_l+0x84e>
 800fc22:	2500      	movs	r5, #0
 800fc24:	fa07 f303 	lsl.w	r3, r7, r3
 800fc28:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc2a:	18b7      	adds	r7, r6, r2
 800fc2c:	9b05      	ldr	r3, [sp, #20]
 800fc2e:	42be      	cmp	r6, r7
 800fc30:	4414      	add	r4, r2
 800fc32:	441c      	add	r4, r3
 800fc34:	4633      	mov	r3, r6
 800fc36:	bfa8      	it	ge
 800fc38:	463b      	movge	r3, r7
 800fc3a:	42a3      	cmp	r3, r4
 800fc3c:	bfa8      	it	ge
 800fc3e:	4623      	movge	r3, r4
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	bfc2      	ittt	gt
 800fc44:	1aff      	subgt	r7, r7, r3
 800fc46:	1ae4      	subgt	r4, r4, r3
 800fc48:	1af6      	subgt	r6, r6, r3
 800fc4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	dd17      	ble.n	800fc80 <_strtod_l+0x740>
 800fc50:	461a      	mov	r2, r3
 800fc52:	4650      	mov	r0, sl
 800fc54:	9904      	ldr	r1, [sp, #16]
 800fc56:	f002 fa25 	bl	80120a4 <__pow5mult>
 800fc5a:	9004      	str	r0, [sp, #16]
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	f43f aeb2 	beq.w	800f9c6 <_strtod_l+0x486>
 800fc62:	4601      	mov	r1, r0
 800fc64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fc66:	4650      	mov	r0, sl
 800fc68:	f002 f978 	bl	8011f5c <__multiply>
 800fc6c:	9009      	str	r0, [sp, #36]	; 0x24
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f43f aea9 	beq.w	800f9c6 <_strtod_l+0x486>
 800fc74:	4650      	mov	r0, sl
 800fc76:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fc78:	f002 f856 	bl	8011d28 <_Bfree>
 800fc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc7e:	931c      	str	r3, [sp, #112]	; 0x70
 800fc80:	2f00      	cmp	r7, #0
 800fc82:	f300 8093 	bgt.w	800fdac <_strtod_l+0x86c>
 800fc86:	9b07      	ldr	r3, [sp, #28]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	dd08      	ble.n	800fc9e <_strtod_l+0x75e>
 800fc8c:	4650      	mov	r0, sl
 800fc8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fc90:	9906      	ldr	r1, [sp, #24]
 800fc92:	f002 fa07 	bl	80120a4 <__pow5mult>
 800fc96:	9006      	str	r0, [sp, #24]
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	f43f ae94 	beq.w	800f9c6 <_strtod_l+0x486>
 800fc9e:	2c00      	cmp	r4, #0
 800fca0:	dd08      	ble.n	800fcb4 <_strtod_l+0x774>
 800fca2:	4622      	mov	r2, r4
 800fca4:	4650      	mov	r0, sl
 800fca6:	9906      	ldr	r1, [sp, #24]
 800fca8:	f002 fa56 	bl	8012158 <__lshift>
 800fcac:	9006      	str	r0, [sp, #24]
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	f43f ae89 	beq.w	800f9c6 <_strtod_l+0x486>
 800fcb4:	2e00      	cmp	r6, #0
 800fcb6:	dd08      	ble.n	800fcca <_strtod_l+0x78a>
 800fcb8:	4632      	mov	r2, r6
 800fcba:	4650      	mov	r0, sl
 800fcbc:	9904      	ldr	r1, [sp, #16]
 800fcbe:	f002 fa4b 	bl	8012158 <__lshift>
 800fcc2:	9004      	str	r0, [sp, #16]
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	f43f ae7e 	beq.w	800f9c6 <_strtod_l+0x486>
 800fcca:	4650      	mov	r0, sl
 800fccc:	9a06      	ldr	r2, [sp, #24]
 800fcce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fcd0:	f002 faca 	bl	8012268 <__mdiff>
 800fcd4:	4683      	mov	fp, r0
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f43f ae75 	beq.w	800f9c6 <_strtod_l+0x486>
 800fcdc:	2400      	movs	r4, #0
 800fcde:	68c3      	ldr	r3, [r0, #12]
 800fce0:	9904      	ldr	r1, [sp, #16]
 800fce2:	60c4      	str	r4, [r0, #12]
 800fce4:	930d      	str	r3, [sp, #52]	; 0x34
 800fce6:	f002 faa3 	bl	8012230 <__mcmp>
 800fcea:	42a0      	cmp	r0, r4
 800fcec:	da70      	bge.n	800fdd0 <_strtod_l+0x890>
 800fcee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcf0:	ea53 0308 	orrs.w	r3, r3, r8
 800fcf4:	f040 8096 	bne.w	800fe24 <_strtod_l+0x8e4>
 800fcf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	f040 8091 	bne.w	800fe24 <_strtod_l+0x8e4>
 800fd02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd06:	0d1b      	lsrs	r3, r3, #20
 800fd08:	051b      	lsls	r3, r3, #20
 800fd0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fd0e:	f240 8089 	bls.w	800fe24 <_strtod_l+0x8e4>
 800fd12:	f8db 3014 	ldr.w	r3, [fp, #20]
 800fd16:	b923      	cbnz	r3, 800fd22 <_strtod_l+0x7e2>
 800fd18:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	f340 8081 	ble.w	800fe24 <_strtod_l+0x8e4>
 800fd22:	4659      	mov	r1, fp
 800fd24:	2201      	movs	r2, #1
 800fd26:	4650      	mov	r0, sl
 800fd28:	f002 fa16 	bl	8012158 <__lshift>
 800fd2c:	9904      	ldr	r1, [sp, #16]
 800fd2e:	4683      	mov	fp, r0
 800fd30:	f002 fa7e 	bl	8012230 <__mcmp>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	dd75      	ble.n	800fe24 <_strtod_l+0x8e4>
 800fd38:	9905      	ldr	r1, [sp, #20]
 800fd3a:	464b      	mov	r3, r9
 800fd3c:	4a22      	ldr	r2, [pc, #136]	; (800fdc8 <_strtod_l+0x888>)
 800fd3e:	2900      	cmp	r1, #0
 800fd40:	f000 8091 	beq.w	800fe66 <_strtod_l+0x926>
 800fd44:	ea02 0109 	and.w	r1, r2, r9
 800fd48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fd4c:	f300 808b 	bgt.w	800fe66 <_strtod_l+0x926>
 800fd50:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fd54:	f77f aea9 	ble.w	800faaa <_strtod_l+0x56a>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	4a1c      	ldr	r2, [pc, #112]	; (800fdcc <_strtod_l+0x88c>)
 800fd5c:	4640      	mov	r0, r8
 800fd5e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800fd62:	4649      	mov	r1, r9
 800fd64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fd68:	f7f0 fc22 	bl	80005b0 <__aeabi_dmul>
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	4303      	orrs	r3, r0
 800fd70:	bf08      	it	eq
 800fd72:	2322      	moveq	r3, #34	; 0x22
 800fd74:	4680      	mov	r8, r0
 800fd76:	4689      	mov	r9, r1
 800fd78:	bf08      	it	eq
 800fd7a:	f8ca 3000 	streq.w	r3, [sl]
 800fd7e:	e62d      	b.n	800f9dc <_strtod_l+0x49c>
 800fd80:	f04f 32ff 	mov.w	r2, #4294967295
 800fd84:	fa02 f303 	lsl.w	r3, r2, r3
 800fd88:	ea03 0808 	and.w	r8, r3, r8
 800fd8c:	e6db      	b.n	800fb46 <_strtod_l+0x606>
 800fd8e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800fd92:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800fd96:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800fd9a:	35e2      	adds	r5, #226	; 0xe2
 800fd9c:	fa07 f505 	lsl.w	r5, r7, r5
 800fda0:	970f      	str	r7, [sp, #60]	; 0x3c
 800fda2:	e742      	b.n	800fc2a <_strtod_l+0x6ea>
 800fda4:	2301      	movs	r3, #1
 800fda6:	2500      	movs	r5, #0
 800fda8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdaa:	e73e      	b.n	800fc2a <_strtod_l+0x6ea>
 800fdac:	463a      	mov	r2, r7
 800fdae:	4650      	mov	r0, sl
 800fdb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fdb2:	f002 f9d1 	bl	8012158 <__lshift>
 800fdb6:	901c      	str	r0, [sp, #112]	; 0x70
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	f47f af64 	bne.w	800fc86 <_strtod_l+0x746>
 800fdbe:	e602      	b.n	800f9c6 <_strtod_l+0x486>
 800fdc0:	08013ee8 	.word	0x08013ee8
 800fdc4:	fffffc02 	.word	0xfffffc02
 800fdc8:	7ff00000 	.word	0x7ff00000
 800fdcc:	39500000 	.word	0x39500000
 800fdd0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fdd4:	d166      	bne.n	800fea4 <_strtod_l+0x964>
 800fdd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fddc:	b35a      	cbz	r2, 800fe36 <_strtod_l+0x8f6>
 800fdde:	4a9c      	ldr	r2, [pc, #624]	; (8010050 <_strtod_l+0xb10>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d12c      	bne.n	800fe3e <_strtod_l+0x8fe>
 800fde4:	9b05      	ldr	r3, [sp, #20]
 800fde6:	4640      	mov	r0, r8
 800fde8:	b303      	cbz	r3, 800fe2c <_strtod_l+0x8ec>
 800fdea:	464b      	mov	r3, r9
 800fdec:	4a99      	ldr	r2, [pc, #612]	; (8010054 <_strtod_l+0xb14>)
 800fdee:	f04f 31ff 	mov.w	r1, #4294967295
 800fdf2:	401a      	ands	r2, r3
 800fdf4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fdf8:	d81b      	bhi.n	800fe32 <_strtod_l+0x8f2>
 800fdfa:	0d12      	lsrs	r2, r2, #20
 800fdfc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fe00:	fa01 f303 	lsl.w	r3, r1, r3
 800fe04:	4298      	cmp	r0, r3
 800fe06:	d11a      	bne.n	800fe3e <_strtod_l+0x8fe>
 800fe08:	4b93      	ldr	r3, [pc, #588]	; (8010058 <_strtod_l+0xb18>)
 800fe0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d102      	bne.n	800fe16 <_strtod_l+0x8d6>
 800fe10:	3001      	adds	r0, #1
 800fe12:	f43f add8 	beq.w	800f9c6 <_strtod_l+0x486>
 800fe16:	f04f 0800 	mov.w	r8, #0
 800fe1a:	4b8e      	ldr	r3, [pc, #568]	; (8010054 <_strtod_l+0xb14>)
 800fe1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe1e:	401a      	ands	r2, r3
 800fe20:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800fe24:	9b05      	ldr	r3, [sp, #20]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d196      	bne.n	800fd58 <_strtod_l+0x818>
 800fe2a:	e5d7      	b.n	800f9dc <_strtod_l+0x49c>
 800fe2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe30:	e7e8      	b.n	800fe04 <_strtod_l+0x8c4>
 800fe32:	460b      	mov	r3, r1
 800fe34:	e7e6      	b.n	800fe04 <_strtod_l+0x8c4>
 800fe36:	ea53 0308 	orrs.w	r3, r3, r8
 800fe3a:	f43f af7d 	beq.w	800fd38 <_strtod_l+0x7f8>
 800fe3e:	b1e5      	cbz	r5, 800fe7a <_strtod_l+0x93a>
 800fe40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe42:	421d      	tst	r5, r3
 800fe44:	d0ee      	beq.n	800fe24 <_strtod_l+0x8e4>
 800fe46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe48:	4640      	mov	r0, r8
 800fe4a:	4649      	mov	r1, r9
 800fe4c:	9a05      	ldr	r2, [sp, #20]
 800fe4e:	b1c3      	cbz	r3, 800fe82 <_strtod_l+0x942>
 800fe50:	f7ff fb54 	bl	800f4fc <sulp>
 800fe54:	4602      	mov	r2, r0
 800fe56:	460b      	mov	r3, r1
 800fe58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe5c:	f7f0 f9f2 	bl	8000244 <__adddf3>
 800fe60:	4680      	mov	r8, r0
 800fe62:	4689      	mov	r9, r1
 800fe64:	e7de      	b.n	800fe24 <_strtod_l+0x8e4>
 800fe66:	4013      	ands	r3, r2
 800fe68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fe6c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fe70:	f04f 38ff 	mov.w	r8, #4294967295
 800fe74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fe78:	e7d4      	b.n	800fe24 <_strtod_l+0x8e4>
 800fe7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe7c:	ea13 0f08 	tst.w	r3, r8
 800fe80:	e7e0      	b.n	800fe44 <_strtod_l+0x904>
 800fe82:	f7ff fb3b 	bl	800f4fc <sulp>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe8e:	f7f0 f9d7 	bl	8000240 <__aeabi_dsub>
 800fe92:	2200      	movs	r2, #0
 800fe94:	2300      	movs	r3, #0
 800fe96:	4680      	mov	r8, r0
 800fe98:	4689      	mov	r9, r1
 800fe9a:	f7f0 fdf1 	bl	8000a80 <__aeabi_dcmpeq>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d0c0      	beq.n	800fe24 <_strtod_l+0x8e4>
 800fea2:	e602      	b.n	800faaa <_strtod_l+0x56a>
 800fea4:	4658      	mov	r0, fp
 800fea6:	9904      	ldr	r1, [sp, #16]
 800fea8:	f002 fb44 	bl	8012534 <__ratio>
 800feac:	2200      	movs	r2, #0
 800feae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800feb2:	4606      	mov	r6, r0
 800feb4:	460f      	mov	r7, r1
 800feb6:	f7f0 fdf7 	bl	8000aa8 <__aeabi_dcmple>
 800feba:	2800      	cmp	r0, #0
 800febc:	d075      	beq.n	800ffaa <_strtod_l+0xa6a>
 800febe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d047      	beq.n	800ff54 <_strtod_l+0xa14>
 800fec4:	2600      	movs	r6, #0
 800fec6:	4f65      	ldr	r7, [pc, #404]	; (801005c <_strtod_l+0xb1c>)
 800fec8:	4d64      	ldr	r5, [pc, #400]	; (801005c <_strtod_l+0xb1c>)
 800feca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fed0:	0d1b      	lsrs	r3, r3, #20
 800fed2:	051b      	lsls	r3, r3, #20
 800fed4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fed8:	4b61      	ldr	r3, [pc, #388]	; (8010060 <_strtod_l+0xb20>)
 800feda:	429a      	cmp	r2, r3
 800fedc:	f040 80c8 	bne.w	8010070 <_strtod_l+0xb30>
 800fee0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fee4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800fee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feea:	4640      	mov	r0, r8
 800feec:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800fef0:	4649      	mov	r1, r9
 800fef2:	f002 fa49 	bl	8012388 <__ulp>
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4630      	mov	r0, r6
 800fefc:	4639      	mov	r1, r7
 800fefe:	f7f0 fb57 	bl	80005b0 <__aeabi_dmul>
 800ff02:	4642      	mov	r2, r8
 800ff04:	464b      	mov	r3, r9
 800ff06:	f7f0 f99d 	bl	8000244 <__adddf3>
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	4951      	ldr	r1, [pc, #324]	; (8010054 <_strtod_l+0xb14>)
 800ff0e:	4a55      	ldr	r2, [pc, #340]	; (8010064 <_strtod_l+0xb24>)
 800ff10:	4019      	ands	r1, r3
 800ff12:	4291      	cmp	r1, r2
 800ff14:	4680      	mov	r8, r0
 800ff16:	d95e      	bls.n	800ffd6 <_strtod_l+0xa96>
 800ff18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d103      	bne.n	800ff2a <_strtod_l+0x9ea>
 800ff22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff24:	3301      	adds	r3, #1
 800ff26:	f43f ad4e 	beq.w	800f9c6 <_strtod_l+0x486>
 800ff2a:	f04f 38ff 	mov.w	r8, #4294967295
 800ff2e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8010058 <_strtod_l+0xb18>
 800ff32:	4650      	mov	r0, sl
 800ff34:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ff36:	f001 fef7 	bl	8011d28 <_Bfree>
 800ff3a:	4650      	mov	r0, sl
 800ff3c:	9906      	ldr	r1, [sp, #24]
 800ff3e:	f001 fef3 	bl	8011d28 <_Bfree>
 800ff42:	4650      	mov	r0, sl
 800ff44:	9904      	ldr	r1, [sp, #16]
 800ff46:	f001 feef 	bl	8011d28 <_Bfree>
 800ff4a:	4659      	mov	r1, fp
 800ff4c:	4650      	mov	r0, sl
 800ff4e:	f001 feeb 	bl	8011d28 <_Bfree>
 800ff52:	e61c      	b.n	800fb8e <_strtod_l+0x64e>
 800ff54:	f1b8 0f00 	cmp.w	r8, #0
 800ff58:	d119      	bne.n	800ff8e <_strtod_l+0xa4e>
 800ff5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff60:	b9e3      	cbnz	r3, 800ff9c <_strtod_l+0xa5c>
 800ff62:	2200      	movs	r2, #0
 800ff64:	4630      	mov	r0, r6
 800ff66:	4639      	mov	r1, r7
 800ff68:	4b3c      	ldr	r3, [pc, #240]	; (801005c <_strtod_l+0xb1c>)
 800ff6a:	f7f0 fd93 	bl	8000a94 <__aeabi_dcmplt>
 800ff6e:	b9c8      	cbnz	r0, 800ffa4 <_strtod_l+0xa64>
 800ff70:	2200      	movs	r2, #0
 800ff72:	4630      	mov	r0, r6
 800ff74:	4639      	mov	r1, r7
 800ff76:	4b3c      	ldr	r3, [pc, #240]	; (8010068 <_strtod_l+0xb28>)
 800ff78:	f7f0 fb1a 	bl	80005b0 <__aeabi_dmul>
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	460d      	mov	r5, r1
 800ff80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ff84:	9418      	str	r4, [sp, #96]	; 0x60
 800ff86:	9319      	str	r3, [sp, #100]	; 0x64
 800ff88:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ff8c:	e79d      	b.n	800feca <_strtod_l+0x98a>
 800ff8e:	f1b8 0f01 	cmp.w	r8, #1
 800ff92:	d103      	bne.n	800ff9c <_strtod_l+0xa5c>
 800ff94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f43f ad87 	beq.w	800faaa <_strtod_l+0x56a>
 800ff9c:	2600      	movs	r6, #0
 800ff9e:	2400      	movs	r4, #0
 800ffa0:	4f32      	ldr	r7, [pc, #200]	; (801006c <_strtod_l+0xb2c>)
 800ffa2:	e791      	b.n	800fec8 <_strtod_l+0x988>
 800ffa4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ffa6:	4d30      	ldr	r5, [pc, #192]	; (8010068 <_strtod_l+0xb28>)
 800ffa8:	e7ea      	b.n	800ff80 <_strtod_l+0xa40>
 800ffaa:	4b2f      	ldr	r3, [pc, #188]	; (8010068 <_strtod_l+0xb28>)
 800ffac:	2200      	movs	r2, #0
 800ffae:	4630      	mov	r0, r6
 800ffb0:	4639      	mov	r1, r7
 800ffb2:	f7f0 fafd 	bl	80005b0 <__aeabi_dmul>
 800ffb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ffb8:	4604      	mov	r4, r0
 800ffba:	460d      	mov	r5, r1
 800ffbc:	b933      	cbnz	r3, 800ffcc <_strtod_l+0xa8c>
 800ffbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffc2:	9010      	str	r0, [sp, #64]	; 0x40
 800ffc4:	9311      	str	r3, [sp, #68]	; 0x44
 800ffc6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ffca:	e77e      	b.n	800feca <_strtod_l+0x98a>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	460b      	mov	r3, r1
 800ffd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ffd4:	e7f7      	b.n	800ffc6 <_strtod_l+0xa86>
 800ffd6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ffda:	9b05      	ldr	r3, [sp, #20]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d1a8      	bne.n	800ff32 <_strtod_l+0x9f2>
 800ffe0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ffe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffe6:	0d1b      	lsrs	r3, r3, #20
 800ffe8:	051b      	lsls	r3, r3, #20
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d1a1      	bne.n	800ff32 <_strtod_l+0x9f2>
 800ffee:	4620      	mov	r0, r4
 800fff0:	4629      	mov	r1, r5
 800fff2:	f7f1 f93f 	bl	8001274 <__aeabi_d2lz>
 800fff6:	f7f0 faad 	bl	8000554 <__aeabi_l2d>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	4620      	mov	r0, r4
 8010000:	4629      	mov	r1, r5
 8010002:	f7f0 f91d 	bl	8000240 <__aeabi_dsub>
 8010006:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801000c:	ea43 0308 	orr.w	r3, r3, r8
 8010010:	4313      	orrs	r3, r2
 8010012:	4604      	mov	r4, r0
 8010014:	460d      	mov	r5, r1
 8010016:	d066      	beq.n	80100e6 <_strtod_l+0xba6>
 8010018:	a309      	add	r3, pc, #36	; (adr r3, 8010040 <_strtod_l+0xb00>)
 801001a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801001e:	f7f0 fd39 	bl	8000a94 <__aeabi_dcmplt>
 8010022:	2800      	cmp	r0, #0
 8010024:	f47f acda 	bne.w	800f9dc <_strtod_l+0x49c>
 8010028:	a307      	add	r3, pc, #28	; (adr r3, 8010048 <_strtod_l+0xb08>)
 801002a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801002e:	4620      	mov	r0, r4
 8010030:	4629      	mov	r1, r5
 8010032:	f7f0 fd4d 	bl	8000ad0 <__aeabi_dcmpgt>
 8010036:	2800      	cmp	r0, #0
 8010038:	f43f af7b 	beq.w	800ff32 <_strtod_l+0x9f2>
 801003c:	e4ce      	b.n	800f9dc <_strtod_l+0x49c>
 801003e:	bf00      	nop
 8010040:	94a03595 	.word	0x94a03595
 8010044:	3fdfffff 	.word	0x3fdfffff
 8010048:	35afe535 	.word	0x35afe535
 801004c:	3fe00000 	.word	0x3fe00000
 8010050:	000fffff 	.word	0x000fffff
 8010054:	7ff00000 	.word	0x7ff00000
 8010058:	7fefffff 	.word	0x7fefffff
 801005c:	3ff00000 	.word	0x3ff00000
 8010060:	7fe00000 	.word	0x7fe00000
 8010064:	7c9fffff 	.word	0x7c9fffff
 8010068:	3fe00000 	.word	0x3fe00000
 801006c:	bff00000 	.word	0xbff00000
 8010070:	9b05      	ldr	r3, [sp, #20]
 8010072:	b313      	cbz	r3, 80100ba <_strtod_l+0xb7a>
 8010074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801007a:	d81e      	bhi.n	80100ba <_strtod_l+0xb7a>
 801007c:	a326      	add	r3, pc, #152	; (adr r3, 8010118 <_strtod_l+0xbd8>)
 801007e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010082:	4620      	mov	r0, r4
 8010084:	4629      	mov	r1, r5
 8010086:	f7f0 fd0f 	bl	8000aa8 <__aeabi_dcmple>
 801008a:	b190      	cbz	r0, 80100b2 <_strtod_l+0xb72>
 801008c:	4629      	mov	r1, r5
 801008e:	4620      	mov	r0, r4
 8010090:	f7f0 fd66 	bl	8000b60 <__aeabi_d2uiz>
 8010094:	2801      	cmp	r0, #1
 8010096:	bf38      	it	cc
 8010098:	2001      	movcc	r0, #1
 801009a:	f7f0 fa0f 	bl	80004bc <__aeabi_ui2d>
 801009e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100a0:	4604      	mov	r4, r0
 80100a2:	460d      	mov	r5, r1
 80100a4:	b9d3      	cbnz	r3, 80100dc <_strtod_l+0xb9c>
 80100a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100aa:	9012      	str	r0, [sp, #72]	; 0x48
 80100ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80100ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80100b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80100b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80100b8:	1a9f      	subs	r7, r3, r2
 80100ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100be:	f002 f963 	bl	8012388 <__ulp>
 80100c2:	4602      	mov	r2, r0
 80100c4:	460b      	mov	r3, r1
 80100c6:	4630      	mov	r0, r6
 80100c8:	4639      	mov	r1, r7
 80100ca:	f7f0 fa71 	bl	80005b0 <__aeabi_dmul>
 80100ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80100d2:	f7f0 f8b7 	bl	8000244 <__adddf3>
 80100d6:	4680      	mov	r8, r0
 80100d8:	4689      	mov	r9, r1
 80100da:	e77e      	b.n	800ffda <_strtod_l+0xa9a>
 80100dc:	4602      	mov	r2, r0
 80100de:	460b      	mov	r3, r1
 80100e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80100e4:	e7e3      	b.n	80100ae <_strtod_l+0xb6e>
 80100e6:	a30e      	add	r3, pc, #56	; (adr r3, 8010120 <_strtod_l+0xbe0>)
 80100e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ec:	f7f0 fcd2 	bl	8000a94 <__aeabi_dcmplt>
 80100f0:	e7a1      	b.n	8010036 <_strtod_l+0xaf6>
 80100f2:	2300      	movs	r3, #0
 80100f4:	930c      	str	r3, [sp, #48]	; 0x30
 80100f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80100f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100fa:	6013      	str	r3, [r2, #0]
 80100fc:	f7ff ba65 	b.w	800f5ca <_strtod_l+0x8a>
 8010100:	2b65      	cmp	r3, #101	; 0x65
 8010102:	f43f ab5c 	beq.w	800f7be <_strtod_l+0x27e>
 8010106:	2b45      	cmp	r3, #69	; 0x45
 8010108:	f43f ab59 	beq.w	800f7be <_strtod_l+0x27e>
 801010c:	2201      	movs	r2, #1
 801010e:	f7ff bb8d 	b.w	800f82c <_strtod_l+0x2ec>
 8010112:	bf00      	nop
 8010114:	f3af 8000 	nop.w
 8010118:	ffc00000 	.word	0xffc00000
 801011c:	41dfffff 	.word	0x41dfffff
 8010120:	94a03595 	.word	0x94a03595
 8010124:	3fcfffff 	.word	0x3fcfffff

08010128 <_strtod_r>:
 8010128:	4b01      	ldr	r3, [pc, #4]	; (8010130 <_strtod_r+0x8>)
 801012a:	f7ff ba09 	b.w	800f540 <_strtod_l>
 801012e:	bf00      	nop
 8010130:	200000e4 	.word	0x200000e4

08010134 <_strtol_l.isra.0>:
 8010134:	2b01      	cmp	r3, #1
 8010136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801013a:	4686      	mov	lr, r0
 801013c:	d001      	beq.n	8010142 <_strtol_l.isra.0+0xe>
 801013e:	2b24      	cmp	r3, #36	; 0x24
 8010140:	d906      	bls.n	8010150 <_strtol_l.isra.0+0x1c>
 8010142:	f7fe fa75 	bl	800e630 <__errno>
 8010146:	2316      	movs	r3, #22
 8010148:	6003      	str	r3, [r0, #0]
 801014a:	2000      	movs	r0, #0
 801014c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010150:	468c      	mov	ip, r1
 8010152:	4e3a      	ldr	r6, [pc, #232]	; (801023c <_strtol_l.isra.0+0x108>)
 8010154:	4660      	mov	r0, ip
 8010156:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801015a:	5da5      	ldrb	r5, [r4, r6]
 801015c:	f015 0508 	ands.w	r5, r5, #8
 8010160:	d1f8      	bne.n	8010154 <_strtol_l.isra.0+0x20>
 8010162:	2c2d      	cmp	r4, #45	; 0x2d
 8010164:	d133      	bne.n	80101ce <_strtol_l.isra.0+0x9a>
 8010166:	f04f 0801 	mov.w	r8, #1
 801016a:	f89c 4000 	ldrb.w	r4, [ip]
 801016e:	f100 0c02 	add.w	ip, r0, #2
 8010172:	2b00      	cmp	r3, #0
 8010174:	d05d      	beq.n	8010232 <_strtol_l.isra.0+0xfe>
 8010176:	2b10      	cmp	r3, #16
 8010178:	d10c      	bne.n	8010194 <_strtol_l.isra.0+0x60>
 801017a:	2c30      	cmp	r4, #48	; 0x30
 801017c:	d10a      	bne.n	8010194 <_strtol_l.isra.0+0x60>
 801017e:	f89c 0000 	ldrb.w	r0, [ip]
 8010182:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010186:	2858      	cmp	r0, #88	; 0x58
 8010188:	d14e      	bne.n	8010228 <_strtol_l.isra.0+0xf4>
 801018a:	2310      	movs	r3, #16
 801018c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010190:	f10c 0c02 	add.w	ip, ip, #2
 8010194:	2500      	movs	r5, #0
 8010196:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 801019a:	3f01      	subs	r7, #1
 801019c:	fbb7 f9f3 	udiv	r9, r7, r3
 80101a0:	4628      	mov	r0, r5
 80101a2:	fb03 7a19 	mls	sl, r3, r9, r7
 80101a6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80101aa:	2e09      	cmp	r6, #9
 80101ac:	d818      	bhi.n	80101e0 <_strtol_l.isra.0+0xac>
 80101ae:	4634      	mov	r4, r6
 80101b0:	42a3      	cmp	r3, r4
 80101b2:	dd24      	ble.n	80101fe <_strtol_l.isra.0+0xca>
 80101b4:	2d00      	cmp	r5, #0
 80101b6:	db1f      	blt.n	80101f8 <_strtol_l.isra.0+0xc4>
 80101b8:	4581      	cmp	r9, r0
 80101ba:	d31d      	bcc.n	80101f8 <_strtol_l.isra.0+0xc4>
 80101bc:	d101      	bne.n	80101c2 <_strtol_l.isra.0+0x8e>
 80101be:	45a2      	cmp	sl, r4
 80101c0:	db1a      	blt.n	80101f8 <_strtol_l.isra.0+0xc4>
 80101c2:	2501      	movs	r5, #1
 80101c4:	fb00 4003 	mla	r0, r0, r3, r4
 80101c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80101cc:	e7eb      	b.n	80101a6 <_strtol_l.isra.0+0x72>
 80101ce:	2c2b      	cmp	r4, #43	; 0x2b
 80101d0:	bf08      	it	eq
 80101d2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80101d6:	46a8      	mov	r8, r5
 80101d8:	bf08      	it	eq
 80101da:	f100 0c02 	addeq.w	ip, r0, #2
 80101de:	e7c8      	b.n	8010172 <_strtol_l.isra.0+0x3e>
 80101e0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80101e4:	2e19      	cmp	r6, #25
 80101e6:	d801      	bhi.n	80101ec <_strtol_l.isra.0+0xb8>
 80101e8:	3c37      	subs	r4, #55	; 0x37
 80101ea:	e7e1      	b.n	80101b0 <_strtol_l.isra.0+0x7c>
 80101ec:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80101f0:	2e19      	cmp	r6, #25
 80101f2:	d804      	bhi.n	80101fe <_strtol_l.isra.0+0xca>
 80101f4:	3c57      	subs	r4, #87	; 0x57
 80101f6:	e7db      	b.n	80101b0 <_strtol_l.isra.0+0x7c>
 80101f8:	f04f 35ff 	mov.w	r5, #4294967295
 80101fc:	e7e4      	b.n	80101c8 <_strtol_l.isra.0+0x94>
 80101fe:	2d00      	cmp	r5, #0
 8010200:	da08      	bge.n	8010214 <_strtol_l.isra.0+0xe0>
 8010202:	2322      	movs	r3, #34	; 0x22
 8010204:	4638      	mov	r0, r7
 8010206:	f8ce 3000 	str.w	r3, [lr]
 801020a:	2a00      	cmp	r2, #0
 801020c:	d09e      	beq.n	801014c <_strtol_l.isra.0+0x18>
 801020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8010212:	e007      	b.n	8010224 <_strtol_l.isra.0+0xf0>
 8010214:	f1b8 0f00 	cmp.w	r8, #0
 8010218:	d000      	beq.n	801021c <_strtol_l.isra.0+0xe8>
 801021a:	4240      	negs	r0, r0
 801021c:	2a00      	cmp	r2, #0
 801021e:	d095      	beq.n	801014c <_strtol_l.isra.0+0x18>
 8010220:	2d00      	cmp	r5, #0
 8010222:	d1f4      	bne.n	801020e <_strtol_l.isra.0+0xda>
 8010224:	6011      	str	r1, [r2, #0]
 8010226:	e791      	b.n	801014c <_strtol_l.isra.0+0x18>
 8010228:	2430      	movs	r4, #48	; 0x30
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1b2      	bne.n	8010194 <_strtol_l.isra.0+0x60>
 801022e:	2308      	movs	r3, #8
 8010230:	e7b0      	b.n	8010194 <_strtol_l.isra.0+0x60>
 8010232:	2c30      	cmp	r4, #48	; 0x30
 8010234:	d0a3      	beq.n	801017e <_strtol_l.isra.0+0x4a>
 8010236:	230a      	movs	r3, #10
 8010238:	e7ac      	b.n	8010194 <_strtol_l.isra.0+0x60>
 801023a:	bf00      	nop
 801023c:	08013d7d 	.word	0x08013d7d

08010240 <_strtol_r>:
 8010240:	f7ff bf78 	b.w	8010134 <_strtol_l.isra.0>

08010244 <__utoa>:
 8010244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010246:	b08b      	sub	sp, #44	; 0x2c
 8010248:	4605      	mov	r5, r0
 801024a:	460b      	mov	r3, r1
 801024c:	466e      	mov	r6, sp
 801024e:	4c1d      	ldr	r4, [pc, #116]	; (80102c4 <__utoa+0x80>)
 8010250:	f104 0c20 	add.w	ip, r4, #32
 8010254:	4637      	mov	r7, r6
 8010256:	6820      	ldr	r0, [r4, #0]
 8010258:	6861      	ldr	r1, [r4, #4]
 801025a:	3408      	adds	r4, #8
 801025c:	c703      	stmia	r7!, {r0, r1}
 801025e:	4564      	cmp	r4, ip
 8010260:	463e      	mov	r6, r7
 8010262:	d1f7      	bne.n	8010254 <__utoa+0x10>
 8010264:	7921      	ldrb	r1, [r4, #4]
 8010266:	6820      	ldr	r0, [r4, #0]
 8010268:	7139      	strb	r1, [r7, #4]
 801026a:	1e91      	subs	r1, r2, #2
 801026c:	2922      	cmp	r1, #34	; 0x22
 801026e:	6038      	str	r0, [r7, #0]
 8010270:	f04f 0100 	mov.w	r1, #0
 8010274:	d904      	bls.n	8010280 <__utoa+0x3c>
 8010276:	7019      	strb	r1, [r3, #0]
 8010278:	460b      	mov	r3, r1
 801027a:	4618      	mov	r0, r3
 801027c:	b00b      	add	sp, #44	; 0x2c
 801027e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010280:	1e58      	subs	r0, r3, #1
 8010282:	4684      	mov	ip, r0
 8010284:	fbb5 f7f2 	udiv	r7, r5, r2
 8010288:	fb02 5617 	mls	r6, r2, r7, r5
 801028c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8010290:	4476      	add	r6, lr
 8010292:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010296:	460c      	mov	r4, r1
 8010298:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801029c:	462e      	mov	r6, r5
 801029e:	42b2      	cmp	r2, r6
 80102a0:	463d      	mov	r5, r7
 80102a2:	f101 0101 	add.w	r1, r1, #1
 80102a6:	d9ed      	bls.n	8010284 <__utoa+0x40>
 80102a8:	2200      	movs	r2, #0
 80102aa:	545a      	strb	r2, [r3, r1]
 80102ac:	1919      	adds	r1, r3, r4
 80102ae:	1aa5      	subs	r5, r4, r2
 80102b0:	42aa      	cmp	r2, r5
 80102b2:	dae2      	bge.n	801027a <__utoa+0x36>
 80102b4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80102b8:	780e      	ldrb	r6, [r1, #0]
 80102ba:	3201      	adds	r2, #1
 80102bc:	7006      	strb	r6, [r0, #0]
 80102be:	f801 5901 	strb.w	r5, [r1], #-1
 80102c2:	e7f4      	b.n	80102ae <__utoa+0x6a>
 80102c4:	08013f10 	.word	0x08013f10

080102c8 <__swbuf_r>:
 80102c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ca:	460e      	mov	r6, r1
 80102cc:	4614      	mov	r4, r2
 80102ce:	4605      	mov	r5, r0
 80102d0:	b118      	cbz	r0, 80102da <__swbuf_r+0x12>
 80102d2:	6983      	ldr	r3, [r0, #24]
 80102d4:	b90b      	cbnz	r3, 80102da <__swbuf_r+0x12>
 80102d6:	f001 f84f 	bl	8011378 <__sinit>
 80102da:	4b21      	ldr	r3, [pc, #132]	; (8010360 <__swbuf_r+0x98>)
 80102dc:	429c      	cmp	r4, r3
 80102de:	d12b      	bne.n	8010338 <__swbuf_r+0x70>
 80102e0:	686c      	ldr	r4, [r5, #4]
 80102e2:	69a3      	ldr	r3, [r4, #24]
 80102e4:	60a3      	str	r3, [r4, #8]
 80102e6:	89a3      	ldrh	r3, [r4, #12]
 80102e8:	071a      	lsls	r2, r3, #28
 80102ea:	d52f      	bpl.n	801034c <__swbuf_r+0x84>
 80102ec:	6923      	ldr	r3, [r4, #16]
 80102ee:	b36b      	cbz	r3, 801034c <__swbuf_r+0x84>
 80102f0:	6923      	ldr	r3, [r4, #16]
 80102f2:	6820      	ldr	r0, [r4, #0]
 80102f4:	b2f6      	uxtb	r6, r6
 80102f6:	1ac0      	subs	r0, r0, r3
 80102f8:	6963      	ldr	r3, [r4, #20]
 80102fa:	4637      	mov	r7, r6
 80102fc:	4283      	cmp	r3, r0
 80102fe:	dc04      	bgt.n	801030a <__swbuf_r+0x42>
 8010300:	4621      	mov	r1, r4
 8010302:	4628      	mov	r0, r5
 8010304:	f000 ffa4 	bl	8011250 <_fflush_r>
 8010308:	bb30      	cbnz	r0, 8010358 <__swbuf_r+0x90>
 801030a:	68a3      	ldr	r3, [r4, #8]
 801030c:	3001      	adds	r0, #1
 801030e:	3b01      	subs	r3, #1
 8010310:	60a3      	str	r3, [r4, #8]
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	1c5a      	adds	r2, r3, #1
 8010316:	6022      	str	r2, [r4, #0]
 8010318:	701e      	strb	r6, [r3, #0]
 801031a:	6963      	ldr	r3, [r4, #20]
 801031c:	4283      	cmp	r3, r0
 801031e:	d004      	beq.n	801032a <__swbuf_r+0x62>
 8010320:	89a3      	ldrh	r3, [r4, #12]
 8010322:	07db      	lsls	r3, r3, #31
 8010324:	d506      	bpl.n	8010334 <__swbuf_r+0x6c>
 8010326:	2e0a      	cmp	r6, #10
 8010328:	d104      	bne.n	8010334 <__swbuf_r+0x6c>
 801032a:	4621      	mov	r1, r4
 801032c:	4628      	mov	r0, r5
 801032e:	f000 ff8f 	bl	8011250 <_fflush_r>
 8010332:	b988      	cbnz	r0, 8010358 <__swbuf_r+0x90>
 8010334:	4638      	mov	r0, r7
 8010336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010338:	4b0a      	ldr	r3, [pc, #40]	; (8010364 <__swbuf_r+0x9c>)
 801033a:	429c      	cmp	r4, r3
 801033c:	d101      	bne.n	8010342 <__swbuf_r+0x7a>
 801033e:	68ac      	ldr	r4, [r5, #8]
 8010340:	e7cf      	b.n	80102e2 <__swbuf_r+0x1a>
 8010342:	4b09      	ldr	r3, [pc, #36]	; (8010368 <__swbuf_r+0xa0>)
 8010344:	429c      	cmp	r4, r3
 8010346:	bf08      	it	eq
 8010348:	68ec      	ldreq	r4, [r5, #12]
 801034a:	e7ca      	b.n	80102e2 <__swbuf_r+0x1a>
 801034c:	4621      	mov	r1, r4
 801034e:	4628      	mov	r0, r5
 8010350:	f000 f80c 	bl	801036c <__swsetup_r>
 8010354:	2800      	cmp	r0, #0
 8010356:	d0cb      	beq.n	80102f0 <__swbuf_r+0x28>
 8010358:	f04f 37ff 	mov.w	r7, #4294967295
 801035c:	e7ea      	b.n	8010334 <__swbuf_r+0x6c>
 801035e:	bf00      	nop
 8010360:	08013fec 	.word	0x08013fec
 8010364:	0801400c 	.word	0x0801400c
 8010368:	08013fcc 	.word	0x08013fcc

0801036c <__swsetup_r>:
 801036c:	4b32      	ldr	r3, [pc, #200]	; (8010438 <__swsetup_r+0xcc>)
 801036e:	b570      	push	{r4, r5, r6, lr}
 8010370:	681d      	ldr	r5, [r3, #0]
 8010372:	4606      	mov	r6, r0
 8010374:	460c      	mov	r4, r1
 8010376:	b125      	cbz	r5, 8010382 <__swsetup_r+0x16>
 8010378:	69ab      	ldr	r3, [r5, #24]
 801037a:	b913      	cbnz	r3, 8010382 <__swsetup_r+0x16>
 801037c:	4628      	mov	r0, r5
 801037e:	f000 fffb 	bl	8011378 <__sinit>
 8010382:	4b2e      	ldr	r3, [pc, #184]	; (801043c <__swsetup_r+0xd0>)
 8010384:	429c      	cmp	r4, r3
 8010386:	d10f      	bne.n	80103a8 <__swsetup_r+0x3c>
 8010388:	686c      	ldr	r4, [r5, #4]
 801038a:	89a3      	ldrh	r3, [r4, #12]
 801038c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010390:	0719      	lsls	r1, r3, #28
 8010392:	d42c      	bmi.n	80103ee <__swsetup_r+0x82>
 8010394:	06dd      	lsls	r5, r3, #27
 8010396:	d411      	bmi.n	80103bc <__swsetup_r+0x50>
 8010398:	2309      	movs	r3, #9
 801039a:	6033      	str	r3, [r6, #0]
 801039c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103a0:	f04f 30ff 	mov.w	r0, #4294967295
 80103a4:	81a3      	strh	r3, [r4, #12]
 80103a6:	e03e      	b.n	8010426 <__swsetup_r+0xba>
 80103a8:	4b25      	ldr	r3, [pc, #148]	; (8010440 <__swsetup_r+0xd4>)
 80103aa:	429c      	cmp	r4, r3
 80103ac:	d101      	bne.n	80103b2 <__swsetup_r+0x46>
 80103ae:	68ac      	ldr	r4, [r5, #8]
 80103b0:	e7eb      	b.n	801038a <__swsetup_r+0x1e>
 80103b2:	4b24      	ldr	r3, [pc, #144]	; (8010444 <__swsetup_r+0xd8>)
 80103b4:	429c      	cmp	r4, r3
 80103b6:	bf08      	it	eq
 80103b8:	68ec      	ldreq	r4, [r5, #12]
 80103ba:	e7e6      	b.n	801038a <__swsetup_r+0x1e>
 80103bc:	0758      	lsls	r0, r3, #29
 80103be:	d512      	bpl.n	80103e6 <__swsetup_r+0x7a>
 80103c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103c2:	b141      	cbz	r1, 80103d6 <__swsetup_r+0x6a>
 80103c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103c8:	4299      	cmp	r1, r3
 80103ca:	d002      	beq.n	80103d2 <__swsetup_r+0x66>
 80103cc:	4630      	mov	r0, r6
 80103ce:	f002 f931 	bl	8012634 <_free_r>
 80103d2:	2300      	movs	r3, #0
 80103d4:	6363      	str	r3, [r4, #52]	; 0x34
 80103d6:	89a3      	ldrh	r3, [r4, #12]
 80103d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80103dc:	81a3      	strh	r3, [r4, #12]
 80103de:	2300      	movs	r3, #0
 80103e0:	6063      	str	r3, [r4, #4]
 80103e2:	6923      	ldr	r3, [r4, #16]
 80103e4:	6023      	str	r3, [r4, #0]
 80103e6:	89a3      	ldrh	r3, [r4, #12]
 80103e8:	f043 0308 	orr.w	r3, r3, #8
 80103ec:	81a3      	strh	r3, [r4, #12]
 80103ee:	6923      	ldr	r3, [r4, #16]
 80103f0:	b94b      	cbnz	r3, 8010406 <__swsetup_r+0x9a>
 80103f2:	89a3      	ldrh	r3, [r4, #12]
 80103f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103fc:	d003      	beq.n	8010406 <__swsetup_r+0x9a>
 80103fe:	4621      	mov	r1, r4
 8010400:	4630      	mov	r0, r6
 8010402:	f001 fbe9 	bl	8011bd8 <__smakebuf_r>
 8010406:	89a0      	ldrh	r0, [r4, #12]
 8010408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801040c:	f010 0301 	ands.w	r3, r0, #1
 8010410:	d00a      	beq.n	8010428 <__swsetup_r+0xbc>
 8010412:	2300      	movs	r3, #0
 8010414:	60a3      	str	r3, [r4, #8]
 8010416:	6963      	ldr	r3, [r4, #20]
 8010418:	425b      	negs	r3, r3
 801041a:	61a3      	str	r3, [r4, #24]
 801041c:	6923      	ldr	r3, [r4, #16]
 801041e:	b943      	cbnz	r3, 8010432 <__swsetup_r+0xc6>
 8010420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010424:	d1ba      	bne.n	801039c <__swsetup_r+0x30>
 8010426:	bd70      	pop	{r4, r5, r6, pc}
 8010428:	0781      	lsls	r1, r0, #30
 801042a:	bf58      	it	pl
 801042c:	6963      	ldrpl	r3, [r4, #20]
 801042e:	60a3      	str	r3, [r4, #8]
 8010430:	e7f4      	b.n	801041c <__swsetup_r+0xb0>
 8010432:	2000      	movs	r0, #0
 8010434:	e7f7      	b.n	8010426 <__swsetup_r+0xba>
 8010436:	bf00      	nop
 8010438:	2000007c 	.word	0x2000007c
 801043c:	08013fec 	.word	0x08013fec
 8010440:	0801400c 	.word	0x0801400c
 8010444:	08013fcc 	.word	0x08013fcc

08010448 <quorem>:
 8010448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801044c:	6903      	ldr	r3, [r0, #16]
 801044e:	690c      	ldr	r4, [r1, #16]
 8010450:	4607      	mov	r7, r0
 8010452:	42a3      	cmp	r3, r4
 8010454:	f2c0 8083 	blt.w	801055e <quorem+0x116>
 8010458:	3c01      	subs	r4, #1
 801045a:	f100 0514 	add.w	r5, r0, #20
 801045e:	f101 0814 	add.w	r8, r1, #20
 8010462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801046c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010470:	3301      	adds	r3, #1
 8010472:	429a      	cmp	r2, r3
 8010474:	fbb2 f6f3 	udiv	r6, r2, r3
 8010478:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801047c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010480:	d332      	bcc.n	80104e8 <quorem+0xa0>
 8010482:	f04f 0e00 	mov.w	lr, #0
 8010486:	4640      	mov	r0, r8
 8010488:	46ac      	mov	ip, r5
 801048a:	46f2      	mov	sl, lr
 801048c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010490:	b293      	uxth	r3, r2
 8010492:	fb06 e303 	mla	r3, r6, r3, lr
 8010496:	0c12      	lsrs	r2, r2, #16
 8010498:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801049c:	fb06 e202 	mla	r2, r6, r2, lr
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	ebaa 0303 	sub.w	r3, sl, r3
 80104a6:	f8dc a000 	ldr.w	sl, [ip]
 80104aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80104ae:	fa1f fa8a 	uxth.w	sl, sl
 80104b2:	4453      	add	r3, sl
 80104b4:	fa1f fa82 	uxth.w	sl, r2
 80104b8:	f8dc 2000 	ldr.w	r2, [ip]
 80104bc:	4581      	cmp	r9, r0
 80104be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80104c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80104d0:	f84c 3b04 	str.w	r3, [ip], #4
 80104d4:	d2da      	bcs.n	801048c <quorem+0x44>
 80104d6:	f855 300b 	ldr.w	r3, [r5, fp]
 80104da:	b92b      	cbnz	r3, 80104e8 <quorem+0xa0>
 80104dc:	9b01      	ldr	r3, [sp, #4]
 80104de:	3b04      	subs	r3, #4
 80104e0:	429d      	cmp	r5, r3
 80104e2:	461a      	mov	r2, r3
 80104e4:	d32f      	bcc.n	8010546 <quorem+0xfe>
 80104e6:	613c      	str	r4, [r7, #16]
 80104e8:	4638      	mov	r0, r7
 80104ea:	f001 fea1 	bl	8012230 <__mcmp>
 80104ee:	2800      	cmp	r0, #0
 80104f0:	db25      	blt.n	801053e <quorem+0xf6>
 80104f2:	4628      	mov	r0, r5
 80104f4:	f04f 0c00 	mov.w	ip, #0
 80104f8:	3601      	adds	r6, #1
 80104fa:	f858 1b04 	ldr.w	r1, [r8], #4
 80104fe:	f8d0 e000 	ldr.w	lr, [r0]
 8010502:	b28b      	uxth	r3, r1
 8010504:	ebac 0303 	sub.w	r3, ip, r3
 8010508:	fa1f f28e 	uxth.w	r2, lr
 801050c:	4413      	add	r3, r2
 801050e:	0c0a      	lsrs	r2, r1, #16
 8010510:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010518:	b29b      	uxth	r3, r3
 801051a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801051e:	45c1      	cmp	r9, r8
 8010520:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010524:	f840 3b04 	str.w	r3, [r0], #4
 8010528:	d2e7      	bcs.n	80104fa <quorem+0xb2>
 801052a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801052e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010532:	b922      	cbnz	r2, 801053e <quorem+0xf6>
 8010534:	3b04      	subs	r3, #4
 8010536:	429d      	cmp	r5, r3
 8010538:	461a      	mov	r2, r3
 801053a:	d30a      	bcc.n	8010552 <quorem+0x10a>
 801053c:	613c      	str	r4, [r7, #16]
 801053e:	4630      	mov	r0, r6
 8010540:	b003      	add	sp, #12
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010546:	6812      	ldr	r2, [r2, #0]
 8010548:	3b04      	subs	r3, #4
 801054a:	2a00      	cmp	r2, #0
 801054c:	d1cb      	bne.n	80104e6 <quorem+0x9e>
 801054e:	3c01      	subs	r4, #1
 8010550:	e7c6      	b.n	80104e0 <quorem+0x98>
 8010552:	6812      	ldr	r2, [r2, #0]
 8010554:	3b04      	subs	r3, #4
 8010556:	2a00      	cmp	r2, #0
 8010558:	d1f0      	bne.n	801053c <quorem+0xf4>
 801055a:	3c01      	subs	r4, #1
 801055c:	e7eb      	b.n	8010536 <quorem+0xee>
 801055e:	2000      	movs	r0, #0
 8010560:	e7ee      	b.n	8010540 <quorem+0xf8>
 8010562:	0000      	movs	r0, r0
 8010564:	0000      	movs	r0, r0
	...

08010568 <_dtoa_r>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	4616      	mov	r6, r2
 801056e:	461f      	mov	r7, r3
 8010570:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010572:	b099      	sub	sp, #100	; 0x64
 8010574:	4605      	mov	r5, r0
 8010576:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801057a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801057e:	b974      	cbnz	r4, 801059e <_dtoa_r+0x36>
 8010580:	2010      	movs	r0, #16
 8010582:	f001 fb69 	bl	8011c58 <malloc>
 8010586:	4602      	mov	r2, r0
 8010588:	6268      	str	r0, [r5, #36]	; 0x24
 801058a:	b920      	cbnz	r0, 8010596 <_dtoa_r+0x2e>
 801058c:	21ea      	movs	r1, #234	; 0xea
 801058e:	4bae      	ldr	r3, [pc, #696]	; (8010848 <_dtoa_r+0x2e0>)
 8010590:	48ae      	ldr	r0, [pc, #696]	; (801084c <_dtoa_r+0x2e4>)
 8010592:	f002 fad5 	bl	8012b40 <__assert_func>
 8010596:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801059a:	6004      	str	r4, [r0, #0]
 801059c:	60c4      	str	r4, [r0, #12]
 801059e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105a0:	6819      	ldr	r1, [r3, #0]
 80105a2:	b151      	cbz	r1, 80105ba <_dtoa_r+0x52>
 80105a4:	685a      	ldr	r2, [r3, #4]
 80105a6:	2301      	movs	r3, #1
 80105a8:	4093      	lsls	r3, r2
 80105aa:	604a      	str	r2, [r1, #4]
 80105ac:	608b      	str	r3, [r1, #8]
 80105ae:	4628      	mov	r0, r5
 80105b0:	f001 fbba 	bl	8011d28 <_Bfree>
 80105b4:	2200      	movs	r2, #0
 80105b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	1e3b      	subs	r3, r7, #0
 80105bc:	bfaf      	iteee	ge
 80105be:	2300      	movge	r3, #0
 80105c0:	2201      	movlt	r2, #1
 80105c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80105c6:	9305      	strlt	r3, [sp, #20]
 80105c8:	bfa8      	it	ge
 80105ca:	f8c8 3000 	strge.w	r3, [r8]
 80105ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80105d2:	4b9f      	ldr	r3, [pc, #636]	; (8010850 <_dtoa_r+0x2e8>)
 80105d4:	bfb8      	it	lt
 80105d6:	f8c8 2000 	strlt.w	r2, [r8]
 80105da:	ea33 0309 	bics.w	r3, r3, r9
 80105de:	d119      	bne.n	8010614 <_dtoa_r+0xac>
 80105e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80105e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105ec:	4333      	orrs	r3, r6
 80105ee:	f000 8580 	beq.w	80110f2 <_dtoa_r+0xb8a>
 80105f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80105f4:	b953      	cbnz	r3, 801060c <_dtoa_r+0xa4>
 80105f6:	4b97      	ldr	r3, [pc, #604]	; (8010854 <_dtoa_r+0x2ec>)
 80105f8:	e022      	b.n	8010640 <_dtoa_r+0xd8>
 80105fa:	4b97      	ldr	r3, [pc, #604]	; (8010858 <_dtoa_r+0x2f0>)
 80105fc:	9308      	str	r3, [sp, #32]
 80105fe:	3308      	adds	r3, #8
 8010600:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	9808      	ldr	r0, [sp, #32]
 8010606:	b019      	add	sp, #100	; 0x64
 8010608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	4b91      	ldr	r3, [pc, #580]	; (8010854 <_dtoa_r+0x2ec>)
 801060e:	9308      	str	r3, [sp, #32]
 8010610:	3303      	adds	r3, #3
 8010612:	e7f5      	b.n	8010600 <_dtoa_r+0x98>
 8010614:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8010618:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801061c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010620:	2200      	movs	r2, #0
 8010622:	2300      	movs	r3, #0
 8010624:	f7f0 fa2c 	bl	8000a80 <__aeabi_dcmpeq>
 8010628:	4680      	mov	r8, r0
 801062a:	b158      	cbz	r0, 8010644 <_dtoa_r+0xdc>
 801062c:	2301      	movs	r3, #1
 801062e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010630:	6013      	str	r3, [r2, #0]
 8010632:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010634:	2b00      	cmp	r3, #0
 8010636:	f000 8559 	beq.w	80110ec <_dtoa_r+0xb84>
 801063a:	4888      	ldr	r0, [pc, #544]	; (801085c <_dtoa_r+0x2f4>)
 801063c:	6018      	str	r0, [r3, #0]
 801063e:	1e43      	subs	r3, r0, #1
 8010640:	9308      	str	r3, [sp, #32]
 8010642:	e7df      	b.n	8010604 <_dtoa_r+0x9c>
 8010644:	ab16      	add	r3, sp, #88	; 0x58
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	ab17      	add	r3, sp, #92	; 0x5c
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	4628      	mov	r0, r5
 801064e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010652:	f001 ff13 	bl	801247c <__d2b>
 8010656:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801065a:	4682      	mov	sl, r0
 801065c:	2c00      	cmp	r4, #0
 801065e:	d07e      	beq.n	801075e <_dtoa_r+0x1f6>
 8010660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010666:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801066a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801066e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8010672:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010676:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801067a:	2200      	movs	r2, #0
 801067c:	4b78      	ldr	r3, [pc, #480]	; (8010860 <_dtoa_r+0x2f8>)
 801067e:	f7ef fddf 	bl	8000240 <__aeabi_dsub>
 8010682:	a36b      	add	r3, pc, #428	; (adr r3, 8010830 <_dtoa_r+0x2c8>)
 8010684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010688:	f7ef ff92 	bl	80005b0 <__aeabi_dmul>
 801068c:	a36a      	add	r3, pc, #424	; (adr r3, 8010838 <_dtoa_r+0x2d0>)
 801068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010692:	f7ef fdd7 	bl	8000244 <__adddf3>
 8010696:	4606      	mov	r6, r0
 8010698:	4620      	mov	r0, r4
 801069a:	460f      	mov	r7, r1
 801069c:	f7ef ff1e 	bl	80004dc <__aeabi_i2d>
 80106a0:	a367      	add	r3, pc, #412	; (adr r3, 8010840 <_dtoa_r+0x2d8>)
 80106a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a6:	f7ef ff83 	bl	80005b0 <__aeabi_dmul>
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	4630      	mov	r0, r6
 80106b0:	4639      	mov	r1, r7
 80106b2:	f7ef fdc7 	bl	8000244 <__adddf3>
 80106b6:	4606      	mov	r6, r0
 80106b8:	460f      	mov	r7, r1
 80106ba:	f7f0 fa29 	bl	8000b10 <__aeabi_d2iz>
 80106be:	2200      	movs	r2, #0
 80106c0:	4681      	mov	r9, r0
 80106c2:	2300      	movs	r3, #0
 80106c4:	4630      	mov	r0, r6
 80106c6:	4639      	mov	r1, r7
 80106c8:	f7f0 f9e4 	bl	8000a94 <__aeabi_dcmplt>
 80106cc:	b148      	cbz	r0, 80106e2 <_dtoa_r+0x17a>
 80106ce:	4648      	mov	r0, r9
 80106d0:	f7ef ff04 	bl	80004dc <__aeabi_i2d>
 80106d4:	4632      	mov	r2, r6
 80106d6:	463b      	mov	r3, r7
 80106d8:	f7f0 f9d2 	bl	8000a80 <__aeabi_dcmpeq>
 80106dc:	b908      	cbnz	r0, 80106e2 <_dtoa_r+0x17a>
 80106de:	f109 39ff 	add.w	r9, r9, #4294967295
 80106e2:	f1b9 0f16 	cmp.w	r9, #22
 80106e6:	d857      	bhi.n	8010798 <_dtoa_r+0x230>
 80106e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106ec:	4b5d      	ldr	r3, [pc, #372]	; (8010864 <_dtoa_r+0x2fc>)
 80106ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80106f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f6:	f7f0 f9cd 	bl	8000a94 <__aeabi_dcmplt>
 80106fa:	2800      	cmp	r0, #0
 80106fc:	d04e      	beq.n	801079c <_dtoa_r+0x234>
 80106fe:	2300      	movs	r3, #0
 8010700:	f109 39ff 	add.w	r9, r9, #4294967295
 8010704:	930f      	str	r3, [sp, #60]	; 0x3c
 8010706:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010708:	1b1c      	subs	r4, r3, r4
 801070a:	1e63      	subs	r3, r4, #1
 801070c:	9309      	str	r3, [sp, #36]	; 0x24
 801070e:	bf49      	itett	mi
 8010710:	f1c4 0301 	rsbmi	r3, r4, #1
 8010714:	2300      	movpl	r3, #0
 8010716:	9306      	strmi	r3, [sp, #24]
 8010718:	2300      	movmi	r3, #0
 801071a:	bf54      	ite	pl
 801071c:	9306      	strpl	r3, [sp, #24]
 801071e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010720:	f1b9 0f00 	cmp.w	r9, #0
 8010724:	db3c      	blt.n	80107a0 <_dtoa_r+0x238>
 8010726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010728:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801072c:	444b      	add	r3, r9
 801072e:	9309      	str	r3, [sp, #36]	; 0x24
 8010730:	2300      	movs	r3, #0
 8010732:	930a      	str	r3, [sp, #40]	; 0x28
 8010734:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010736:	2b09      	cmp	r3, #9
 8010738:	d86c      	bhi.n	8010814 <_dtoa_r+0x2ac>
 801073a:	2b05      	cmp	r3, #5
 801073c:	bfc4      	itt	gt
 801073e:	3b04      	subgt	r3, #4
 8010740:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010744:	bfc8      	it	gt
 8010746:	2400      	movgt	r4, #0
 8010748:	f1a3 0302 	sub.w	r3, r3, #2
 801074c:	bfd8      	it	le
 801074e:	2401      	movle	r4, #1
 8010750:	2b03      	cmp	r3, #3
 8010752:	f200 808b 	bhi.w	801086c <_dtoa_r+0x304>
 8010756:	e8df f003 	tbb	[pc, r3]
 801075a:	4f2d      	.short	0x4f2d
 801075c:	5b4d      	.short	0x5b4d
 801075e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010762:	441c      	add	r4, r3
 8010764:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010768:	2b20      	cmp	r3, #32
 801076a:	bfc3      	ittte	gt
 801076c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010770:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010774:	fa09 f303 	lslgt.w	r3, r9, r3
 8010778:	f1c3 0320 	rsble	r3, r3, #32
 801077c:	bfc6      	itte	gt
 801077e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010782:	4318      	orrgt	r0, r3
 8010784:	fa06 f003 	lslle.w	r0, r6, r3
 8010788:	f7ef fe98 	bl	80004bc <__aeabi_ui2d>
 801078c:	2301      	movs	r3, #1
 801078e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010792:	3c01      	subs	r4, #1
 8010794:	9313      	str	r3, [sp, #76]	; 0x4c
 8010796:	e770      	b.n	801067a <_dtoa_r+0x112>
 8010798:	2301      	movs	r3, #1
 801079a:	e7b3      	b.n	8010704 <_dtoa_r+0x19c>
 801079c:	900f      	str	r0, [sp, #60]	; 0x3c
 801079e:	e7b2      	b.n	8010706 <_dtoa_r+0x19e>
 80107a0:	9b06      	ldr	r3, [sp, #24]
 80107a2:	eba3 0309 	sub.w	r3, r3, r9
 80107a6:	9306      	str	r3, [sp, #24]
 80107a8:	f1c9 0300 	rsb	r3, r9, #0
 80107ac:	930a      	str	r3, [sp, #40]	; 0x28
 80107ae:	2300      	movs	r3, #0
 80107b0:	930e      	str	r3, [sp, #56]	; 0x38
 80107b2:	e7bf      	b.n	8010734 <_dtoa_r+0x1cc>
 80107b4:	2300      	movs	r3, #0
 80107b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80107b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	dc59      	bgt.n	8010872 <_dtoa_r+0x30a>
 80107be:	f04f 0b01 	mov.w	fp, #1
 80107c2:	465b      	mov	r3, fp
 80107c4:	f8cd b008 	str.w	fp, [sp, #8]
 80107c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80107cc:	2200      	movs	r2, #0
 80107ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80107d0:	6042      	str	r2, [r0, #4]
 80107d2:	2204      	movs	r2, #4
 80107d4:	f102 0614 	add.w	r6, r2, #20
 80107d8:	429e      	cmp	r6, r3
 80107da:	6841      	ldr	r1, [r0, #4]
 80107dc:	d94f      	bls.n	801087e <_dtoa_r+0x316>
 80107de:	4628      	mov	r0, r5
 80107e0:	f001 fa62 	bl	8011ca8 <_Balloc>
 80107e4:	9008      	str	r0, [sp, #32]
 80107e6:	2800      	cmp	r0, #0
 80107e8:	d14d      	bne.n	8010886 <_dtoa_r+0x31e>
 80107ea:	4602      	mov	r2, r0
 80107ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80107f0:	4b1d      	ldr	r3, [pc, #116]	; (8010868 <_dtoa_r+0x300>)
 80107f2:	e6cd      	b.n	8010590 <_dtoa_r+0x28>
 80107f4:	2301      	movs	r3, #1
 80107f6:	e7de      	b.n	80107b6 <_dtoa_r+0x24e>
 80107f8:	2300      	movs	r3, #0
 80107fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80107fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107fe:	eb09 0b03 	add.w	fp, r9, r3
 8010802:	f10b 0301 	add.w	r3, fp, #1
 8010806:	2b01      	cmp	r3, #1
 8010808:	9302      	str	r3, [sp, #8]
 801080a:	bfb8      	it	lt
 801080c:	2301      	movlt	r3, #1
 801080e:	e7dd      	b.n	80107cc <_dtoa_r+0x264>
 8010810:	2301      	movs	r3, #1
 8010812:	e7f2      	b.n	80107fa <_dtoa_r+0x292>
 8010814:	2401      	movs	r4, #1
 8010816:	2300      	movs	r3, #0
 8010818:	940b      	str	r4, [sp, #44]	; 0x2c
 801081a:	9322      	str	r3, [sp, #136]	; 0x88
 801081c:	f04f 3bff 	mov.w	fp, #4294967295
 8010820:	2200      	movs	r2, #0
 8010822:	2312      	movs	r3, #18
 8010824:	f8cd b008 	str.w	fp, [sp, #8]
 8010828:	9223      	str	r2, [sp, #140]	; 0x8c
 801082a:	e7cf      	b.n	80107cc <_dtoa_r+0x264>
 801082c:	f3af 8000 	nop.w
 8010830:	636f4361 	.word	0x636f4361
 8010834:	3fd287a7 	.word	0x3fd287a7
 8010838:	8b60c8b3 	.word	0x8b60c8b3
 801083c:	3fc68a28 	.word	0x3fc68a28
 8010840:	509f79fb 	.word	0x509f79fb
 8010844:	3fd34413 	.word	0x3fd34413
 8010848:	08013f42 	.word	0x08013f42
 801084c:	08013f59 	.word	0x08013f59
 8010850:	7ff00000 	.word	0x7ff00000
 8010854:	08013f3e 	.word	0x08013f3e
 8010858:	08013f35 	.word	0x08013f35
 801085c:	08013e95 	.word	0x08013e95
 8010860:	3ff80000 	.word	0x3ff80000
 8010864:	08014138 	.word	0x08014138
 8010868:	08013fb8 	.word	0x08013fb8
 801086c:	2301      	movs	r3, #1
 801086e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010870:	e7d4      	b.n	801081c <_dtoa_r+0x2b4>
 8010872:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8010876:	465b      	mov	r3, fp
 8010878:	f8cd b008 	str.w	fp, [sp, #8]
 801087c:	e7a6      	b.n	80107cc <_dtoa_r+0x264>
 801087e:	3101      	adds	r1, #1
 8010880:	6041      	str	r1, [r0, #4]
 8010882:	0052      	lsls	r2, r2, #1
 8010884:	e7a6      	b.n	80107d4 <_dtoa_r+0x26c>
 8010886:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010888:	9a08      	ldr	r2, [sp, #32]
 801088a:	601a      	str	r2, [r3, #0]
 801088c:	9b02      	ldr	r3, [sp, #8]
 801088e:	2b0e      	cmp	r3, #14
 8010890:	f200 80a8 	bhi.w	80109e4 <_dtoa_r+0x47c>
 8010894:	2c00      	cmp	r4, #0
 8010896:	f000 80a5 	beq.w	80109e4 <_dtoa_r+0x47c>
 801089a:	f1b9 0f00 	cmp.w	r9, #0
 801089e:	dd34      	ble.n	801090a <_dtoa_r+0x3a2>
 80108a0:	4a9a      	ldr	r2, [pc, #616]	; (8010b0c <_dtoa_r+0x5a4>)
 80108a2:	f009 030f 	and.w	r3, r9, #15
 80108a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80108aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80108ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80108b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80108b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80108ba:	d016      	beq.n	80108ea <_dtoa_r+0x382>
 80108bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108c0:	4b93      	ldr	r3, [pc, #588]	; (8010b10 <_dtoa_r+0x5a8>)
 80108c2:	2703      	movs	r7, #3
 80108c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108c8:	f7ef ff9c 	bl	8000804 <__aeabi_ddiv>
 80108cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108d0:	f004 040f 	and.w	r4, r4, #15
 80108d4:	4e8e      	ldr	r6, [pc, #568]	; (8010b10 <_dtoa_r+0x5a8>)
 80108d6:	b954      	cbnz	r4, 80108ee <_dtoa_r+0x386>
 80108d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80108dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108e0:	f7ef ff90 	bl	8000804 <__aeabi_ddiv>
 80108e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108e8:	e029      	b.n	801093e <_dtoa_r+0x3d6>
 80108ea:	2702      	movs	r7, #2
 80108ec:	e7f2      	b.n	80108d4 <_dtoa_r+0x36c>
 80108ee:	07e1      	lsls	r1, r4, #31
 80108f0:	d508      	bpl.n	8010904 <_dtoa_r+0x39c>
 80108f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80108f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80108fa:	f7ef fe59 	bl	80005b0 <__aeabi_dmul>
 80108fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010902:	3701      	adds	r7, #1
 8010904:	1064      	asrs	r4, r4, #1
 8010906:	3608      	adds	r6, #8
 8010908:	e7e5      	b.n	80108d6 <_dtoa_r+0x36e>
 801090a:	f000 80a5 	beq.w	8010a58 <_dtoa_r+0x4f0>
 801090e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010912:	f1c9 0400 	rsb	r4, r9, #0
 8010916:	4b7d      	ldr	r3, [pc, #500]	; (8010b0c <_dtoa_r+0x5a4>)
 8010918:	f004 020f 	and.w	r2, r4, #15
 801091c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010924:	f7ef fe44 	bl	80005b0 <__aeabi_dmul>
 8010928:	2702      	movs	r7, #2
 801092a:	2300      	movs	r3, #0
 801092c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010930:	4e77      	ldr	r6, [pc, #476]	; (8010b10 <_dtoa_r+0x5a8>)
 8010932:	1124      	asrs	r4, r4, #4
 8010934:	2c00      	cmp	r4, #0
 8010936:	f040 8084 	bne.w	8010a42 <_dtoa_r+0x4da>
 801093a:	2b00      	cmp	r3, #0
 801093c:	d1d2      	bne.n	80108e4 <_dtoa_r+0x37c>
 801093e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010940:	2b00      	cmp	r3, #0
 8010942:	f000 808b 	beq.w	8010a5c <_dtoa_r+0x4f4>
 8010946:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801094a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801094e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010952:	2200      	movs	r2, #0
 8010954:	4b6f      	ldr	r3, [pc, #444]	; (8010b14 <_dtoa_r+0x5ac>)
 8010956:	f7f0 f89d 	bl	8000a94 <__aeabi_dcmplt>
 801095a:	2800      	cmp	r0, #0
 801095c:	d07e      	beq.n	8010a5c <_dtoa_r+0x4f4>
 801095e:	9b02      	ldr	r3, [sp, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d07b      	beq.n	8010a5c <_dtoa_r+0x4f4>
 8010964:	f1bb 0f00 	cmp.w	fp, #0
 8010968:	dd38      	ble.n	80109dc <_dtoa_r+0x474>
 801096a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801096e:	2200      	movs	r2, #0
 8010970:	4b69      	ldr	r3, [pc, #420]	; (8010b18 <_dtoa_r+0x5b0>)
 8010972:	f7ef fe1d 	bl	80005b0 <__aeabi_dmul>
 8010976:	465c      	mov	r4, fp
 8010978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801097c:	f109 38ff 	add.w	r8, r9, #4294967295
 8010980:	3701      	adds	r7, #1
 8010982:	4638      	mov	r0, r7
 8010984:	f7ef fdaa 	bl	80004dc <__aeabi_i2d>
 8010988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801098c:	f7ef fe10 	bl	80005b0 <__aeabi_dmul>
 8010990:	2200      	movs	r2, #0
 8010992:	4b62      	ldr	r3, [pc, #392]	; (8010b1c <_dtoa_r+0x5b4>)
 8010994:	f7ef fc56 	bl	8000244 <__adddf3>
 8010998:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801099c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80109a0:	9611      	str	r6, [sp, #68]	; 0x44
 80109a2:	2c00      	cmp	r4, #0
 80109a4:	d15d      	bne.n	8010a62 <_dtoa_r+0x4fa>
 80109a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109aa:	2200      	movs	r2, #0
 80109ac:	4b5c      	ldr	r3, [pc, #368]	; (8010b20 <_dtoa_r+0x5b8>)
 80109ae:	f7ef fc47 	bl	8000240 <__aeabi_dsub>
 80109b2:	4602      	mov	r2, r0
 80109b4:	460b      	mov	r3, r1
 80109b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80109ba:	4633      	mov	r3, r6
 80109bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109be:	f7f0 f887 	bl	8000ad0 <__aeabi_dcmpgt>
 80109c2:	2800      	cmp	r0, #0
 80109c4:	f040 829e 	bne.w	8010f04 <_dtoa_r+0x99c>
 80109c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80109d2:	f7f0 f85f 	bl	8000a94 <__aeabi_dcmplt>
 80109d6:	2800      	cmp	r0, #0
 80109d8:	f040 8292 	bne.w	8010f00 <_dtoa_r+0x998>
 80109dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80109e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80109e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	f2c0 8153 	blt.w	8010c92 <_dtoa_r+0x72a>
 80109ec:	f1b9 0f0e 	cmp.w	r9, #14
 80109f0:	f300 814f 	bgt.w	8010c92 <_dtoa_r+0x72a>
 80109f4:	4b45      	ldr	r3, [pc, #276]	; (8010b0c <_dtoa_r+0x5a4>)
 80109f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80109fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80109fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8010a02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f280 80db 	bge.w	8010bc0 <_dtoa_r+0x658>
 8010a0a:	9b02      	ldr	r3, [sp, #8]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f300 80d7 	bgt.w	8010bc0 <_dtoa_r+0x658>
 8010a12:	f040 8274 	bne.w	8010efe <_dtoa_r+0x996>
 8010a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	4b40      	ldr	r3, [pc, #256]	; (8010b20 <_dtoa_r+0x5b8>)
 8010a1e:	f7ef fdc7 	bl	80005b0 <__aeabi_dmul>
 8010a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a26:	f7f0 f849 	bl	8000abc <__aeabi_dcmpge>
 8010a2a:	9c02      	ldr	r4, [sp, #8]
 8010a2c:	4626      	mov	r6, r4
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	f040 824a 	bne.w	8010ec8 <_dtoa_r+0x960>
 8010a34:	2331      	movs	r3, #49	; 0x31
 8010a36:	9f08      	ldr	r7, [sp, #32]
 8010a38:	f109 0901 	add.w	r9, r9, #1
 8010a3c:	f807 3b01 	strb.w	r3, [r7], #1
 8010a40:	e246      	b.n	8010ed0 <_dtoa_r+0x968>
 8010a42:	07e2      	lsls	r2, r4, #31
 8010a44:	d505      	bpl.n	8010a52 <_dtoa_r+0x4ea>
 8010a46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a4a:	f7ef fdb1 	bl	80005b0 <__aeabi_dmul>
 8010a4e:	2301      	movs	r3, #1
 8010a50:	3701      	adds	r7, #1
 8010a52:	1064      	asrs	r4, r4, #1
 8010a54:	3608      	adds	r6, #8
 8010a56:	e76d      	b.n	8010934 <_dtoa_r+0x3cc>
 8010a58:	2702      	movs	r7, #2
 8010a5a:	e770      	b.n	801093e <_dtoa_r+0x3d6>
 8010a5c:	46c8      	mov	r8, r9
 8010a5e:	9c02      	ldr	r4, [sp, #8]
 8010a60:	e78f      	b.n	8010982 <_dtoa_r+0x41a>
 8010a62:	9908      	ldr	r1, [sp, #32]
 8010a64:	4b29      	ldr	r3, [pc, #164]	; (8010b0c <_dtoa_r+0x5a4>)
 8010a66:	4421      	add	r1, r4
 8010a68:	9112      	str	r1, [sp, #72]	; 0x48
 8010a6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010a74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a78:	2900      	cmp	r1, #0
 8010a7a:	d055      	beq.n	8010b28 <_dtoa_r+0x5c0>
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	4929      	ldr	r1, [pc, #164]	; (8010b24 <_dtoa_r+0x5bc>)
 8010a80:	f7ef fec0 	bl	8000804 <__aeabi_ddiv>
 8010a84:	463b      	mov	r3, r7
 8010a86:	4632      	mov	r2, r6
 8010a88:	f7ef fbda 	bl	8000240 <__aeabi_dsub>
 8010a8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010a90:	9f08      	ldr	r7, [sp, #32]
 8010a92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a96:	f7f0 f83b 	bl	8000b10 <__aeabi_d2iz>
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	f7ef fd1e 	bl	80004dc <__aeabi_i2d>
 8010aa0:	4602      	mov	r2, r0
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010aa8:	f7ef fbca 	bl	8000240 <__aeabi_dsub>
 8010aac:	4602      	mov	r2, r0
 8010aae:	460b      	mov	r3, r1
 8010ab0:	3430      	adds	r4, #48	; 0x30
 8010ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010ab6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010aba:	f807 4b01 	strb.w	r4, [r7], #1
 8010abe:	f7ef ffe9 	bl	8000a94 <__aeabi_dcmplt>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d174      	bne.n	8010bb0 <_dtoa_r+0x648>
 8010ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aca:	2000      	movs	r0, #0
 8010acc:	4911      	ldr	r1, [pc, #68]	; (8010b14 <_dtoa_r+0x5ac>)
 8010ace:	f7ef fbb7 	bl	8000240 <__aeabi_dsub>
 8010ad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ad6:	f7ef ffdd 	bl	8000a94 <__aeabi_dcmplt>
 8010ada:	2800      	cmp	r0, #0
 8010adc:	f040 80b6 	bne.w	8010c4c <_dtoa_r+0x6e4>
 8010ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ae2:	429f      	cmp	r7, r3
 8010ae4:	f43f af7a 	beq.w	80109dc <_dtoa_r+0x474>
 8010ae8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010aec:	2200      	movs	r2, #0
 8010aee:	4b0a      	ldr	r3, [pc, #40]	; (8010b18 <_dtoa_r+0x5b0>)
 8010af0:	f7ef fd5e 	bl	80005b0 <__aeabi_dmul>
 8010af4:	2200      	movs	r2, #0
 8010af6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010afe:	4b06      	ldr	r3, [pc, #24]	; (8010b18 <_dtoa_r+0x5b0>)
 8010b00:	f7ef fd56 	bl	80005b0 <__aeabi_dmul>
 8010b04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b08:	e7c3      	b.n	8010a92 <_dtoa_r+0x52a>
 8010b0a:	bf00      	nop
 8010b0c:	08014138 	.word	0x08014138
 8010b10:	08014110 	.word	0x08014110
 8010b14:	3ff00000 	.word	0x3ff00000
 8010b18:	40240000 	.word	0x40240000
 8010b1c:	401c0000 	.word	0x401c0000
 8010b20:	40140000 	.word	0x40140000
 8010b24:	3fe00000 	.word	0x3fe00000
 8010b28:	4630      	mov	r0, r6
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7ef fd40 	bl	80005b0 <__aeabi_dmul>
 8010b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010b36:	9c08      	ldr	r4, [sp, #32]
 8010b38:	9314      	str	r3, [sp, #80]	; 0x50
 8010b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b3e:	f7ef ffe7 	bl	8000b10 <__aeabi_d2iz>
 8010b42:	9015      	str	r0, [sp, #84]	; 0x54
 8010b44:	f7ef fcca 	bl	80004dc <__aeabi_i2d>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	460b      	mov	r3, r1
 8010b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b50:	f7ef fb76 	bl	8000240 <__aeabi_dsub>
 8010b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b56:	4606      	mov	r6, r0
 8010b58:	3330      	adds	r3, #48	; 0x30
 8010b5a:	f804 3b01 	strb.w	r3, [r4], #1
 8010b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b60:	460f      	mov	r7, r1
 8010b62:	429c      	cmp	r4, r3
 8010b64:	f04f 0200 	mov.w	r2, #0
 8010b68:	d124      	bne.n	8010bb4 <_dtoa_r+0x64c>
 8010b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b6e:	4bb3      	ldr	r3, [pc, #716]	; (8010e3c <_dtoa_r+0x8d4>)
 8010b70:	f7ef fb68 	bl	8000244 <__adddf3>
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	4630      	mov	r0, r6
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	f7ef ffa8 	bl	8000ad0 <__aeabi_dcmpgt>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d162      	bne.n	8010c4a <_dtoa_r+0x6e2>
 8010b84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b88:	2000      	movs	r0, #0
 8010b8a:	49ac      	ldr	r1, [pc, #688]	; (8010e3c <_dtoa_r+0x8d4>)
 8010b8c:	f7ef fb58 	bl	8000240 <__aeabi_dsub>
 8010b90:	4602      	mov	r2, r0
 8010b92:	460b      	mov	r3, r1
 8010b94:	4630      	mov	r0, r6
 8010b96:	4639      	mov	r1, r7
 8010b98:	f7ef ff7c 	bl	8000a94 <__aeabi_dcmplt>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	f43f af1d 	beq.w	80109dc <_dtoa_r+0x474>
 8010ba2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010ba4:	1e7b      	subs	r3, r7, #1
 8010ba6:	9314      	str	r3, [sp, #80]	; 0x50
 8010ba8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010bac:	2b30      	cmp	r3, #48	; 0x30
 8010bae:	d0f8      	beq.n	8010ba2 <_dtoa_r+0x63a>
 8010bb0:	46c1      	mov	r9, r8
 8010bb2:	e03a      	b.n	8010c2a <_dtoa_r+0x6c2>
 8010bb4:	4ba2      	ldr	r3, [pc, #648]	; (8010e40 <_dtoa_r+0x8d8>)
 8010bb6:	f7ef fcfb 	bl	80005b0 <__aeabi_dmul>
 8010bba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bbe:	e7bc      	b.n	8010b3a <_dtoa_r+0x5d2>
 8010bc0:	9f08      	ldr	r7, [sp, #32]
 8010bc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bca:	f7ef fe1b 	bl	8000804 <__aeabi_ddiv>
 8010bce:	f7ef ff9f 	bl	8000b10 <__aeabi_d2iz>
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	f7ef fc82 	bl	80004dc <__aeabi_i2d>
 8010bd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bdc:	f7ef fce8 	bl	80005b0 <__aeabi_dmul>
 8010be0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010be4:	460b      	mov	r3, r1
 8010be6:	4602      	mov	r2, r0
 8010be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bec:	f7ef fb28 	bl	8000240 <__aeabi_dsub>
 8010bf0:	f807 6b01 	strb.w	r6, [r7], #1
 8010bf4:	9e08      	ldr	r6, [sp, #32]
 8010bf6:	9b02      	ldr	r3, [sp, #8]
 8010bf8:	1bbe      	subs	r6, r7, r6
 8010bfa:	42b3      	cmp	r3, r6
 8010bfc:	d13a      	bne.n	8010c74 <_dtoa_r+0x70c>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	460b      	mov	r3, r1
 8010c02:	f7ef fb1f 	bl	8000244 <__adddf3>
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c12:	f7ef ff5d 	bl	8000ad0 <__aeabi_dcmpgt>
 8010c16:	bb58      	cbnz	r0, 8010c70 <_dtoa_r+0x708>
 8010c18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c20:	f7ef ff2e 	bl	8000a80 <__aeabi_dcmpeq>
 8010c24:	b108      	cbz	r0, 8010c2a <_dtoa_r+0x6c2>
 8010c26:	07e1      	lsls	r1, r4, #31
 8010c28:	d422      	bmi.n	8010c70 <_dtoa_r+0x708>
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	4651      	mov	r1, sl
 8010c2e:	f001 f87b 	bl	8011d28 <_Bfree>
 8010c32:	2300      	movs	r3, #0
 8010c34:	703b      	strb	r3, [r7, #0]
 8010c36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010c38:	f109 0001 	add.w	r0, r9, #1
 8010c3c:	6018      	str	r0, [r3, #0]
 8010c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f43f acdf 	beq.w	8010604 <_dtoa_r+0x9c>
 8010c46:	601f      	str	r7, [r3, #0]
 8010c48:	e4dc      	b.n	8010604 <_dtoa_r+0x9c>
 8010c4a:	4627      	mov	r7, r4
 8010c4c:	463b      	mov	r3, r7
 8010c4e:	461f      	mov	r7, r3
 8010c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c54:	2a39      	cmp	r2, #57	; 0x39
 8010c56:	d107      	bne.n	8010c68 <_dtoa_r+0x700>
 8010c58:	9a08      	ldr	r2, [sp, #32]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d1f7      	bne.n	8010c4e <_dtoa_r+0x6e6>
 8010c5e:	2230      	movs	r2, #48	; 0x30
 8010c60:	9908      	ldr	r1, [sp, #32]
 8010c62:	f108 0801 	add.w	r8, r8, #1
 8010c66:	700a      	strb	r2, [r1, #0]
 8010c68:	781a      	ldrb	r2, [r3, #0]
 8010c6a:	3201      	adds	r2, #1
 8010c6c:	701a      	strb	r2, [r3, #0]
 8010c6e:	e79f      	b.n	8010bb0 <_dtoa_r+0x648>
 8010c70:	46c8      	mov	r8, r9
 8010c72:	e7eb      	b.n	8010c4c <_dtoa_r+0x6e4>
 8010c74:	2200      	movs	r2, #0
 8010c76:	4b72      	ldr	r3, [pc, #456]	; (8010e40 <_dtoa_r+0x8d8>)
 8010c78:	f7ef fc9a 	bl	80005b0 <__aeabi_dmul>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	460b      	mov	r3, r1
 8010c80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c84:	2200      	movs	r2, #0
 8010c86:	2300      	movs	r3, #0
 8010c88:	f7ef fefa 	bl	8000a80 <__aeabi_dcmpeq>
 8010c8c:	2800      	cmp	r0, #0
 8010c8e:	d098      	beq.n	8010bc2 <_dtoa_r+0x65a>
 8010c90:	e7cb      	b.n	8010c2a <_dtoa_r+0x6c2>
 8010c92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c94:	2a00      	cmp	r2, #0
 8010c96:	f000 80cd 	beq.w	8010e34 <_dtoa_r+0x8cc>
 8010c9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c9c:	2a01      	cmp	r2, #1
 8010c9e:	f300 80af 	bgt.w	8010e00 <_dtoa_r+0x898>
 8010ca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010ca4:	2a00      	cmp	r2, #0
 8010ca6:	f000 80a7 	beq.w	8010df8 <_dtoa_r+0x890>
 8010caa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010cae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010cb0:	9f06      	ldr	r7, [sp, #24]
 8010cb2:	9a06      	ldr	r2, [sp, #24]
 8010cb4:	2101      	movs	r1, #1
 8010cb6:	441a      	add	r2, r3
 8010cb8:	9206      	str	r2, [sp, #24]
 8010cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	441a      	add	r2, r3
 8010cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8010cc2:	f001 f935 	bl	8011f30 <__i2b>
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	2f00      	cmp	r7, #0
 8010cca:	dd0c      	ble.n	8010ce6 <_dtoa_r+0x77e>
 8010ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	dd09      	ble.n	8010ce6 <_dtoa_r+0x77e>
 8010cd2:	42bb      	cmp	r3, r7
 8010cd4:	bfa8      	it	ge
 8010cd6:	463b      	movge	r3, r7
 8010cd8:	9a06      	ldr	r2, [sp, #24]
 8010cda:	1aff      	subs	r7, r7, r3
 8010cdc:	1ad2      	subs	r2, r2, r3
 8010cde:	9206      	str	r2, [sp, #24]
 8010ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ce8:	b1f3      	cbz	r3, 8010d28 <_dtoa_r+0x7c0>
 8010cea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f000 80a9 	beq.w	8010e44 <_dtoa_r+0x8dc>
 8010cf2:	2c00      	cmp	r4, #0
 8010cf4:	dd10      	ble.n	8010d18 <_dtoa_r+0x7b0>
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4622      	mov	r2, r4
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	f001 f9d2 	bl	80120a4 <__pow5mult>
 8010d00:	4652      	mov	r2, sl
 8010d02:	4601      	mov	r1, r0
 8010d04:	4606      	mov	r6, r0
 8010d06:	4628      	mov	r0, r5
 8010d08:	f001 f928 	bl	8011f5c <__multiply>
 8010d0c:	4680      	mov	r8, r0
 8010d0e:	4651      	mov	r1, sl
 8010d10:	4628      	mov	r0, r5
 8010d12:	f001 f809 	bl	8011d28 <_Bfree>
 8010d16:	46c2      	mov	sl, r8
 8010d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d1a:	1b1a      	subs	r2, r3, r4
 8010d1c:	d004      	beq.n	8010d28 <_dtoa_r+0x7c0>
 8010d1e:	4651      	mov	r1, sl
 8010d20:	4628      	mov	r0, r5
 8010d22:	f001 f9bf 	bl	80120a4 <__pow5mult>
 8010d26:	4682      	mov	sl, r0
 8010d28:	2101      	movs	r1, #1
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f001 f900 	bl	8011f30 <__i2b>
 8010d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d32:	4604      	mov	r4, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f340 8087 	ble.w	8010e48 <_dtoa_r+0x8e0>
 8010d3a:	461a      	mov	r2, r3
 8010d3c:	4601      	mov	r1, r0
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f001 f9b0 	bl	80120a4 <__pow5mult>
 8010d44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d46:	4604      	mov	r4, r0
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	f340 8080 	ble.w	8010e4e <_dtoa_r+0x8e6>
 8010d4e:	f04f 0800 	mov.w	r8, #0
 8010d52:	6923      	ldr	r3, [r4, #16]
 8010d54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d58:	6918      	ldr	r0, [r3, #16]
 8010d5a:	f001 f89b 	bl	8011e94 <__hi0bits>
 8010d5e:	f1c0 0020 	rsb	r0, r0, #32
 8010d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d64:	4418      	add	r0, r3
 8010d66:	f010 001f 	ands.w	r0, r0, #31
 8010d6a:	f000 8092 	beq.w	8010e92 <_dtoa_r+0x92a>
 8010d6e:	f1c0 0320 	rsb	r3, r0, #32
 8010d72:	2b04      	cmp	r3, #4
 8010d74:	f340 808a 	ble.w	8010e8c <_dtoa_r+0x924>
 8010d78:	f1c0 001c 	rsb	r0, r0, #28
 8010d7c:	9b06      	ldr	r3, [sp, #24]
 8010d7e:	4407      	add	r7, r0
 8010d80:	4403      	add	r3, r0
 8010d82:	9306      	str	r3, [sp, #24]
 8010d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d86:	4403      	add	r3, r0
 8010d88:	9309      	str	r3, [sp, #36]	; 0x24
 8010d8a:	9b06      	ldr	r3, [sp, #24]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	dd05      	ble.n	8010d9c <_dtoa_r+0x834>
 8010d90:	4651      	mov	r1, sl
 8010d92:	461a      	mov	r2, r3
 8010d94:	4628      	mov	r0, r5
 8010d96:	f001 f9df 	bl	8012158 <__lshift>
 8010d9a:	4682      	mov	sl, r0
 8010d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	dd05      	ble.n	8010dae <_dtoa_r+0x846>
 8010da2:	4621      	mov	r1, r4
 8010da4:	461a      	mov	r2, r3
 8010da6:	4628      	mov	r0, r5
 8010da8:	f001 f9d6 	bl	8012158 <__lshift>
 8010dac:	4604      	mov	r4, r0
 8010dae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d070      	beq.n	8010e96 <_dtoa_r+0x92e>
 8010db4:	4621      	mov	r1, r4
 8010db6:	4650      	mov	r0, sl
 8010db8:	f001 fa3a 	bl	8012230 <__mcmp>
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	da6a      	bge.n	8010e96 <_dtoa_r+0x92e>
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	4651      	mov	r1, sl
 8010dc4:	220a      	movs	r2, #10
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 ffd0 	bl	8011d6c <__multadd>
 8010dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dce:	4682      	mov	sl, r0
 8010dd0:	f109 39ff 	add.w	r9, r9, #4294967295
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f000 8193 	beq.w	8011100 <_dtoa_r+0xb98>
 8010dda:	4631      	mov	r1, r6
 8010ddc:	2300      	movs	r3, #0
 8010dde:	220a      	movs	r2, #10
 8010de0:	4628      	mov	r0, r5
 8010de2:	f000 ffc3 	bl	8011d6c <__multadd>
 8010de6:	f1bb 0f00 	cmp.w	fp, #0
 8010dea:	4606      	mov	r6, r0
 8010dec:	f300 8093 	bgt.w	8010f16 <_dtoa_r+0x9ae>
 8010df0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010df2:	2b02      	cmp	r3, #2
 8010df4:	dc57      	bgt.n	8010ea6 <_dtoa_r+0x93e>
 8010df6:	e08e      	b.n	8010f16 <_dtoa_r+0x9ae>
 8010df8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010dfa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010dfe:	e756      	b.n	8010cae <_dtoa_r+0x746>
 8010e00:	9b02      	ldr	r3, [sp, #8]
 8010e02:	1e5c      	subs	r4, r3, #1
 8010e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e06:	42a3      	cmp	r3, r4
 8010e08:	bfb7      	itett	lt
 8010e0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010e0c:	1b1c      	subge	r4, r3, r4
 8010e0e:	1ae2      	sublt	r2, r4, r3
 8010e10:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010e12:	bfbe      	ittt	lt
 8010e14:	940a      	strlt	r4, [sp, #40]	; 0x28
 8010e16:	189b      	addlt	r3, r3, r2
 8010e18:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010e1a:	9b02      	ldr	r3, [sp, #8]
 8010e1c:	bfb8      	it	lt
 8010e1e:	2400      	movlt	r4, #0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	bfbb      	ittet	lt
 8010e24:	9b06      	ldrlt	r3, [sp, #24]
 8010e26:	9a02      	ldrlt	r2, [sp, #8]
 8010e28:	9f06      	ldrge	r7, [sp, #24]
 8010e2a:	1a9f      	sublt	r7, r3, r2
 8010e2c:	bfac      	ite	ge
 8010e2e:	9b02      	ldrge	r3, [sp, #8]
 8010e30:	2300      	movlt	r3, #0
 8010e32:	e73e      	b.n	8010cb2 <_dtoa_r+0x74a>
 8010e34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e36:	9f06      	ldr	r7, [sp, #24]
 8010e38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010e3a:	e745      	b.n	8010cc8 <_dtoa_r+0x760>
 8010e3c:	3fe00000 	.word	0x3fe00000
 8010e40:	40240000 	.word	0x40240000
 8010e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e46:	e76a      	b.n	8010d1e <_dtoa_r+0x7b6>
 8010e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	dc19      	bgt.n	8010e82 <_dtoa_r+0x91a>
 8010e4e:	9b04      	ldr	r3, [sp, #16]
 8010e50:	b9bb      	cbnz	r3, 8010e82 <_dtoa_r+0x91a>
 8010e52:	9b05      	ldr	r3, [sp, #20]
 8010e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e58:	b99b      	cbnz	r3, 8010e82 <_dtoa_r+0x91a>
 8010e5a:	9b05      	ldr	r3, [sp, #20]
 8010e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e60:	0d1b      	lsrs	r3, r3, #20
 8010e62:	051b      	lsls	r3, r3, #20
 8010e64:	b183      	cbz	r3, 8010e88 <_dtoa_r+0x920>
 8010e66:	f04f 0801 	mov.w	r8, #1
 8010e6a:	9b06      	ldr	r3, [sp, #24]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	9306      	str	r3, [sp, #24]
 8010e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e72:	3301      	adds	r3, #1
 8010e74:	9309      	str	r3, [sp, #36]	; 0x24
 8010e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f47f af6a 	bne.w	8010d52 <_dtoa_r+0x7ea>
 8010e7e:	2001      	movs	r0, #1
 8010e80:	e76f      	b.n	8010d62 <_dtoa_r+0x7fa>
 8010e82:	f04f 0800 	mov.w	r8, #0
 8010e86:	e7f6      	b.n	8010e76 <_dtoa_r+0x90e>
 8010e88:	4698      	mov	r8, r3
 8010e8a:	e7f4      	b.n	8010e76 <_dtoa_r+0x90e>
 8010e8c:	f43f af7d 	beq.w	8010d8a <_dtoa_r+0x822>
 8010e90:	4618      	mov	r0, r3
 8010e92:	301c      	adds	r0, #28
 8010e94:	e772      	b.n	8010d7c <_dtoa_r+0x814>
 8010e96:	9b02      	ldr	r3, [sp, #8]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	dc36      	bgt.n	8010f0a <_dtoa_r+0x9a2>
 8010e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e9e:	2b02      	cmp	r3, #2
 8010ea0:	dd33      	ble.n	8010f0a <_dtoa_r+0x9a2>
 8010ea2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010ea6:	f1bb 0f00 	cmp.w	fp, #0
 8010eaa:	d10d      	bne.n	8010ec8 <_dtoa_r+0x960>
 8010eac:	4621      	mov	r1, r4
 8010eae:	465b      	mov	r3, fp
 8010eb0:	2205      	movs	r2, #5
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	f000 ff5a 	bl	8011d6c <__multadd>
 8010eb8:	4601      	mov	r1, r0
 8010eba:	4604      	mov	r4, r0
 8010ebc:	4650      	mov	r0, sl
 8010ebe:	f001 f9b7 	bl	8012230 <__mcmp>
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	f73f adb6 	bgt.w	8010a34 <_dtoa_r+0x4cc>
 8010ec8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010eca:	9f08      	ldr	r7, [sp, #32]
 8010ecc:	ea6f 0903 	mvn.w	r9, r3
 8010ed0:	f04f 0800 	mov.w	r8, #0
 8010ed4:	4621      	mov	r1, r4
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f000 ff26 	bl	8011d28 <_Bfree>
 8010edc:	2e00      	cmp	r6, #0
 8010ede:	f43f aea4 	beq.w	8010c2a <_dtoa_r+0x6c2>
 8010ee2:	f1b8 0f00 	cmp.w	r8, #0
 8010ee6:	d005      	beq.n	8010ef4 <_dtoa_r+0x98c>
 8010ee8:	45b0      	cmp	r8, r6
 8010eea:	d003      	beq.n	8010ef4 <_dtoa_r+0x98c>
 8010eec:	4641      	mov	r1, r8
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f000 ff1a 	bl	8011d28 <_Bfree>
 8010ef4:	4631      	mov	r1, r6
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f000 ff16 	bl	8011d28 <_Bfree>
 8010efc:	e695      	b.n	8010c2a <_dtoa_r+0x6c2>
 8010efe:	2400      	movs	r4, #0
 8010f00:	4626      	mov	r6, r4
 8010f02:	e7e1      	b.n	8010ec8 <_dtoa_r+0x960>
 8010f04:	46c1      	mov	r9, r8
 8010f06:	4626      	mov	r6, r4
 8010f08:	e594      	b.n	8010a34 <_dtoa_r+0x4cc>
 8010f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f0c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f000 80fc 	beq.w	801110e <_dtoa_r+0xba6>
 8010f16:	2f00      	cmp	r7, #0
 8010f18:	dd05      	ble.n	8010f26 <_dtoa_r+0x9be>
 8010f1a:	4631      	mov	r1, r6
 8010f1c:	463a      	mov	r2, r7
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f001 f91a 	bl	8012158 <__lshift>
 8010f24:	4606      	mov	r6, r0
 8010f26:	f1b8 0f00 	cmp.w	r8, #0
 8010f2a:	d05c      	beq.n	8010fe6 <_dtoa_r+0xa7e>
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	6871      	ldr	r1, [r6, #4]
 8010f30:	f000 feba 	bl	8011ca8 <_Balloc>
 8010f34:	4607      	mov	r7, r0
 8010f36:	b928      	cbnz	r0, 8010f44 <_dtoa_r+0x9dc>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010f3e:	4b7e      	ldr	r3, [pc, #504]	; (8011138 <_dtoa_r+0xbd0>)
 8010f40:	f7ff bb26 	b.w	8010590 <_dtoa_r+0x28>
 8010f44:	6932      	ldr	r2, [r6, #16]
 8010f46:	f106 010c 	add.w	r1, r6, #12
 8010f4a:	3202      	adds	r2, #2
 8010f4c:	0092      	lsls	r2, r2, #2
 8010f4e:	300c      	adds	r0, #12
 8010f50:	f7fd fbb2 	bl	800e6b8 <memcpy>
 8010f54:	2201      	movs	r2, #1
 8010f56:	4639      	mov	r1, r7
 8010f58:	4628      	mov	r0, r5
 8010f5a:	f001 f8fd 	bl	8012158 <__lshift>
 8010f5e:	46b0      	mov	r8, r6
 8010f60:	4606      	mov	r6, r0
 8010f62:	9b08      	ldr	r3, [sp, #32]
 8010f64:	3301      	adds	r3, #1
 8010f66:	9302      	str	r3, [sp, #8]
 8010f68:	9b08      	ldr	r3, [sp, #32]
 8010f6a:	445b      	add	r3, fp
 8010f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8010f6e:	9b04      	ldr	r3, [sp, #16]
 8010f70:	f003 0301 	and.w	r3, r3, #1
 8010f74:	9309      	str	r3, [sp, #36]	; 0x24
 8010f76:	9b02      	ldr	r3, [sp, #8]
 8010f78:	4621      	mov	r1, r4
 8010f7a:	4650      	mov	r0, sl
 8010f7c:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f80:	f7ff fa62 	bl	8010448 <quorem>
 8010f84:	4603      	mov	r3, r0
 8010f86:	4641      	mov	r1, r8
 8010f88:	3330      	adds	r3, #48	; 0x30
 8010f8a:	9004      	str	r0, [sp, #16]
 8010f8c:	4650      	mov	r0, sl
 8010f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f90:	f001 f94e 	bl	8012230 <__mcmp>
 8010f94:	4632      	mov	r2, r6
 8010f96:	9006      	str	r0, [sp, #24]
 8010f98:	4621      	mov	r1, r4
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	f001 f964 	bl	8012268 <__mdiff>
 8010fa0:	68c2      	ldr	r2, [r0, #12]
 8010fa2:	4607      	mov	r7, r0
 8010fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fa6:	bb02      	cbnz	r2, 8010fea <_dtoa_r+0xa82>
 8010fa8:	4601      	mov	r1, r0
 8010faa:	4650      	mov	r0, sl
 8010fac:	f001 f940 	bl	8012230 <__mcmp>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fb4:	4639      	mov	r1, r7
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010fbc:	f000 feb4 	bl	8011d28 <_Bfree>
 8010fc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010fc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fc4:	9f02      	ldr	r7, [sp, #8]
 8010fc6:	ea43 0102 	orr.w	r1, r3, r2
 8010fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fcc:	430b      	orrs	r3, r1
 8010fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fd0:	d10d      	bne.n	8010fee <_dtoa_r+0xa86>
 8010fd2:	2b39      	cmp	r3, #57	; 0x39
 8010fd4:	d027      	beq.n	8011026 <_dtoa_r+0xabe>
 8010fd6:	9a06      	ldr	r2, [sp, #24]
 8010fd8:	2a00      	cmp	r2, #0
 8010fda:	dd01      	ble.n	8010fe0 <_dtoa_r+0xa78>
 8010fdc:	9b04      	ldr	r3, [sp, #16]
 8010fde:	3331      	adds	r3, #49	; 0x31
 8010fe0:	f88b 3000 	strb.w	r3, [fp]
 8010fe4:	e776      	b.n	8010ed4 <_dtoa_r+0x96c>
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	e7b9      	b.n	8010f5e <_dtoa_r+0x9f6>
 8010fea:	2201      	movs	r2, #1
 8010fec:	e7e2      	b.n	8010fb4 <_dtoa_r+0xa4c>
 8010fee:	9906      	ldr	r1, [sp, #24]
 8010ff0:	2900      	cmp	r1, #0
 8010ff2:	db04      	blt.n	8010ffe <_dtoa_r+0xa96>
 8010ff4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010ff6:	4301      	orrs	r1, r0
 8010ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ffa:	4301      	orrs	r1, r0
 8010ffc:	d120      	bne.n	8011040 <_dtoa_r+0xad8>
 8010ffe:	2a00      	cmp	r2, #0
 8011000:	ddee      	ble.n	8010fe0 <_dtoa_r+0xa78>
 8011002:	4651      	mov	r1, sl
 8011004:	2201      	movs	r2, #1
 8011006:	4628      	mov	r0, r5
 8011008:	9302      	str	r3, [sp, #8]
 801100a:	f001 f8a5 	bl	8012158 <__lshift>
 801100e:	4621      	mov	r1, r4
 8011010:	4682      	mov	sl, r0
 8011012:	f001 f90d 	bl	8012230 <__mcmp>
 8011016:	2800      	cmp	r0, #0
 8011018:	9b02      	ldr	r3, [sp, #8]
 801101a:	dc02      	bgt.n	8011022 <_dtoa_r+0xaba>
 801101c:	d1e0      	bne.n	8010fe0 <_dtoa_r+0xa78>
 801101e:	07da      	lsls	r2, r3, #31
 8011020:	d5de      	bpl.n	8010fe0 <_dtoa_r+0xa78>
 8011022:	2b39      	cmp	r3, #57	; 0x39
 8011024:	d1da      	bne.n	8010fdc <_dtoa_r+0xa74>
 8011026:	2339      	movs	r3, #57	; 0x39
 8011028:	f88b 3000 	strb.w	r3, [fp]
 801102c:	463b      	mov	r3, r7
 801102e:	461f      	mov	r7, r3
 8011030:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8011034:	3b01      	subs	r3, #1
 8011036:	2a39      	cmp	r2, #57	; 0x39
 8011038:	d050      	beq.n	80110dc <_dtoa_r+0xb74>
 801103a:	3201      	adds	r2, #1
 801103c:	701a      	strb	r2, [r3, #0]
 801103e:	e749      	b.n	8010ed4 <_dtoa_r+0x96c>
 8011040:	2a00      	cmp	r2, #0
 8011042:	dd03      	ble.n	801104c <_dtoa_r+0xae4>
 8011044:	2b39      	cmp	r3, #57	; 0x39
 8011046:	d0ee      	beq.n	8011026 <_dtoa_r+0xabe>
 8011048:	3301      	adds	r3, #1
 801104a:	e7c9      	b.n	8010fe0 <_dtoa_r+0xa78>
 801104c:	9a02      	ldr	r2, [sp, #8]
 801104e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011050:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011054:	428a      	cmp	r2, r1
 8011056:	d02a      	beq.n	80110ae <_dtoa_r+0xb46>
 8011058:	4651      	mov	r1, sl
 801105a:	2300      	movs	r3, #0
 801105c:	220a      	movs	r2, #10
 801105e:	4628      	mov	r0, r5
 8011060:	f000 fe84 	bl	8011d6c <__multadd>
 8011064:	45b0      	cmp	r8, r6
 8011066:	4682      	mov	sl, r0
 8011068:	f04f 0300 	mov.w	r3, #0
 801106c:	f04f 020a 	mov.w	r2, #10
 8011070:	4641      	mov	r1, r8
 8011072:	4628      	mov	r0, r5
 8011074:	d107      	bne.n	8011086 <_dtoa_r+0xb1e>
 8011076:	f000 fe79 	bl	8011d6c <__multadd>
 801107a:	4680      	mov	r8, r0
 801107c:	4606      	mov	r6, r0
 801107e:	9b02      	ldr	r3, [sp, #8]
 8011080:	3301      	adds	r3, #1
 8011082:	9302      	str	r3, [sp, #8]
 8011084:	e777      	b.n	8010f76 <_dtoa_r+0xa0e>
 8011086:	f000 fe71 	bl	8011d6c <__multadd>
 801108a:	4631      	mov	r1, r6
 801108c:	4680      	mov	r8, r0
 801108e:	2300      	movs	r3, #0
 8011090:	220a      	movs	r2, #10
 8011092:	4628      	mov	r0, r5
 8011094:	f000 fe6a 	bl	8011d6c <__multadd>
 8011098:	4606      	mov	r6, r0
 801109a:	e7f0      	b.n	801107e <_dtoa_r+0xb16>
 801109c:	f1bb 0f00 	cmp.w	fp, #0
 80110a0:	bfcc      	ite	gt
 80110a2:	465f      	movgt	r7, fp
 80110a4:	2701      	movle	r7, #1
 80110a6:	f04f 0800 	mov.w	r8, #0
 80110aa:	9a08      	ldr	r2, [sp, #32]
 80110ac:	4417      	add	r7, r2
 80110ae:	4651      	mov	r1, sl
 80110b0:	2201      	movs	r2, #1
 80110b2:	4628      	mov	r0, r5
 80110b4:	9302      	str	r3, [sp, #8]
 80110b6:	f001 f84f 	bl	8012158 <__lshift>
 80110ba:	4621      	mov	r1, r4
 80110bc:	4682      	mov	sl, r0
 80110be:	f001 f8b7 	bl	8012230 <__mcmp>
 80110c2:	2800      	cmp	r0, #0
 80110c4:	dcb2      	bgt.n	801102c <_dtoa_r+0xac4>
 80110c6:	d102      	bne.n	80110ce <_dtoa_r+0xb66>
 80110c8:	9b02      	ldr	r3, [sp, #8]
 80110ca:	07db      	lsls	r3, r3, #31
 80110cc:	d4ae      	bmi.n	801102c <_dtoa_r+0xac4>
 80110ce:	463b      	mov	r3, r7
 80110d0:	461f      	mov	r7, r3
 80110d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110d6:	2a30      	cmp	r2, #48	; 0x30
 80110d8:	d0fa      	beq.n	80110d0 <_dtoa_r+0xb68>
 80110da:	e6fb      	b.n	8010ed4 <_dtoa_r+0x96c>
 80110dc:	9a08      	ldr	r2, [sp, #32]
 80110de:	429a      	cmp	r2, r3
 80110e0:	d1a5      	bne.n	801102e <_dtoa_r+0xac6>
 80110e2:	2331      	movs	r3, #49	; 0x31
 80110e4:	f109 0901 	add.w	r9, r9, #1
 80110e8:	7013      	strb	r3, [r2, #0]
 80110ea:	e6f3      	b.n	8010ed4 <_dtoa_r+0x96c>
 80110ec:	4b13      	ldr	r3, [pc, #76]	; (801113c <_dtoa_r+0xbd4>)
 80110ee:	f7ff baa7 	b.w	8010640 <_dtoa_r+0xd8>
 80110f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	f47f aa80 	bne.w	80105fa <_dtoa_r+0x92>
 80110fa:	4b11      	ldr	r3, [pc, #68]	; (8011140 <_dtoa_r+0xbd8>)
 80110fc:	f7ff baa0 	b.w	8010640 <_dtoa_r+0xd8>
 8011100:	f1bb 0f00 	cmp.w	fp, #0
 8011104:	dc03      	bgt.n	801110e <_dtoa_r+0xba6>
 8011106:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011108:	2b02      	cmp	r3, #2
 801110a:	f73f aecc 	bgt.w	8010ea6 <_dtoa_r+0x93e>
 801110e:	9f08      	ldr	r7, [sp, #32]
 8011110:	4621      	mov	r1, r4
 8011112:	4650      	mov	r0, sl
 8011114:	f7ff f998 	bl	8010448 <quorem>
 8011118:	9a08      	ldr	r2, [sp, #32]
 801111a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801111e:	f807 3b01 	strb.w	r3, [r7], #1
 8011122:	1aba      	subs	r2, r7, r2
 8011124:	4593      	cmp	fp, r2
 8011126:	ddb9      	ble.n	801109c <_dtoa_r+0xb34>
 8011128:	4651      	mov	r1, sl
 801112a:	2300      	movs	r3, #0
 801112c:	220a      	movs	r2, #10
 801112e:	4628      	mov	r0, r5
 8011130:	f000 fe1c 	bl	8011d6c <__multadd>
 8011134:	4682      	mov	sl, r0
 8011136:	e7eb      	b.n	8011110 <_dtoa_r+0xba8>
 8011138:	08013fb8 	.word	0x08013fb8
 801113c:	08013e94 	.word	0x08013e94
 8011140:	08013f35 	.word	0x08013f35

08011144 <__sflush_r>:
 8011144:	898a      	ldrh	r2, [r1, #12]
 8011146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801114a:	4605      	mov	r5, r0
 801114c:	0710      	lsls	r0, r2, #28
 801114e:	460c      	mov	r4, r1
 8011150:	d458      	bmi.n	8011204 <__sflush_r+0xc0>
 8011152:	684b      	ldr	r3, [r1, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	dc05      	bgt.n	8011164 <__sflush_r+0x20>
 8011158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801115a:	2b00      	cmp	r3, #0
 801115c:	dc02      	bgt.n	8011164 <__sflush_r+0x20>
 801115e:	2000      	movs	r0, #0
 8011160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011166:	2e00      	cmp	r6, #0
 8011168:	d0f9      	beq.n	801115e <__sflush_r+0x1a>
 801116a:	2300      	movs	r3, #0
 801116c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011170:	682f      	ldr	r7, [r5, #0]
 8011172:	602b      	str	r3, [r5, #0]
 8011174:	d032      	beq.n	80111dc <__sflush_r+0x98>
 8011176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011178:	89a3      	ldrh	r3, [r4, #12]
 801117a:	075a      	lsls	r2, r3, #29
 801117c:	d505      	bpl.n	801118a <__sflush_r+0x46>
 801117e:	6863      	ldr	r3, [r4, #4]
 8011180:	1ac0      	subs	r0, r0, r3
 8011182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011184:	b10b      	cbz	r3, 801118a <__sflush_r+0x46>
 8011186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011188:	1ac0      	subs	r0, r0, r3
 801118a:	2300      	movs	r3, #0
 801118c:	4602      	mov	r2, r0
 801118e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011190:	4628      	mov	r0, r5
 8011192:	6a21      	ldr	r1, [r4, #32]
 8011194:	47b0      	blx	r6
 8011196:	1c43      	adds	r3, r0, #1
 8011198:	89a3      	ldrh	r3, [r4, #12]
 801119a:	d106      	bne.n	80111aa <__sflush_r+0x66>
 801119c:	6829      	ldr	r1, [r5, #0]
 801119e:	291d      	cmp	r1, #29
 80111a0:	d82c      	bhi.n	80111fc <__sflush_r+0xb8>
 80111a2:	4a2a      	ldr	r2, [pc, #168]	; (801124c <__sflush_r+0x108>)
 80111a4:	40ca      	lsrs	r2, r1
 80111a6:	07d6      	lsls	r6, r2, #31
 80111a8:	d528      	bpl.n	80111fc <__sflush_r+0xb8>
 80111aa:	2200      	movs	r2, #0
 80111ac:	6062      	str	r2, [r4, #4]
 80111ae:	6922      	ldr	r2, [r4, #16]
 80111b0:	04d9      	lsls	r1, r3, #19
 80111b2:	6022      	str	r2, [r4, #0]
 80111b4:	d504      	bpl.n	80111c0 <__sflush_r+0x7c>
 80111b6:	1c42      	adds	r2, r0, #1
 80111b8:	d101      	bne.n	80111be <__sflush_r+0x7a>
 80111ba:	682b      	ldr	r3, [r5, #0]
 80111bc:	b903      	cbnz	r3, 80111c0 <__sflush_r+0x7c>
 80111be:	6560      	str	r0, [r4, #84]	; 0x54
 80111c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111c2:	602f      	str	r7, [r5, #0]
 80111c4:	2900      	cmp	r1, #0
 80111c6:	d0ca      	beq.n	801115e <__sflush_r+0x1a>
 80111c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111cc:	4299      	cmp	r1, r3
 80111ce:	d002      	beq.n	80111d6 <__sflush_r+0x92>
 80111d0:	4628      	mov	r0, r5
 80111d2:	f001 fa2f 	bl	8012634 <_free_r>
 80111d6:	2000      	movs	r0, #0
 80111d8:	6360      	str	r0, [r4, #52]	; 0x34
 80111da:	e7c1      	b.n	8011160 <__sflush_r+0x1c>
 80111dc:	6a21      	ldr	r1, [r4, #32]
 80111de:	2301      	movs	r3, #1
 80111e0:	4628      	mov	r0, r5
 80111e2:	47b0      	blx	r6
 80111e4:	1c41      	adds	r1, r0, #1
 80111e6:	d1c7      	bne.n	8011178 <__sflush_r+0x34>
 80111e8:	682b      	ldr	r3, [r5, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d0c4      	beq.n	8011178 <__sflush_r+0x34>
 80111ee:	2b1d      	cmp	r3, #29
 80111f0:	d001      	beq.n	80111f6 <__sflush_r+0xb2>
 80111f2:	2b16      	cmp	r3, #22
 80111f4:	d101      	bne.n	80111fa <__sflush_r+0xb6>
 80111f6:	602f      	str	r7, [r5, #0]
 80111f8:	e7b1      	b.n	801115e <__sflush_r+0x1a>
 80111fa:	89a3      	ldrh	r3, [r4, #12]
 80111fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011200:	81a3      	strh	r3, [r4, #12]
 8011202:	e7ad      	b.n	8011160 <__sflush_r+0x1c>
 8011204:	690f      	ldr	r7, [r1, #16]
 8011206:	2f00      	cmp	r7, #0
 8011208:	d0a9      	beq.n	801115e <__sflush_r+0x1a>
 801120a:	0793      	lsls	r3, r2, #30
 801120c:	bf18      	it	ne
 801120e:	2300      	movne	r3, #0
 8011210:	680e      	ldr	r6, [r1, #0]
 8011212:	bf08      	it	eq
 8011214:	694b      	ldreq	r3, [r1, #20]
 8011216:	eba6 0807 	sub.w	r8, r6, r7
 801121a:	600f      	str	r7, [r1, #0]
 801121c:	608b      	str	r3, [r1, #8]
 801121e:	f1b8 0f00 	cmp.w	r8, #0
 8011222:	dd9c      	ble.n	801115e <__sflush_r+0x1a>
 8011224:	4643      	mov	r3, r8
 8011226:	463a      	mov	r2, r7
 8011228:	4628      	mov	r0, r5
 801122a:	6a21      	ldr	r1, [r4, #32]
 801122c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801122e:	47b0      	blx	r6
 8011230:	2800      	cmp	r0, #0
 8011232:	dc06      	bgt.n	8011242 <__sflush_r+0xfe>
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	f04f 30ff 	mov.w	r0, #4294967295
 801123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801123e:	81a3      	strh	r3, [r4, #12]
 8011240:	e78e      	b.n	8011160 <__sflush_r+0x1c>
 8011242:	4407      	add	r7, r0
 8011244:	eba8 0800 	sub.w	r8, r8, r0
 8011248:	e7e9      	b.n	801121e <__sflush_r+0xda>
 801124a:	bf00      	nop
 801124c:	20400001 	.word	0x20400001

08011250 <_fflush_r>:
 8011250:	b538      	push	{r3, r4, r5, lr}
 8011252:	690b      	ldr	r3, [r1, #16]
 8011254:	4605      	mov	r5, r0
 8011256:	460c      	mov	r4, r1
 8011258:	b913      	cbnz	r3, 8011260 <_fflush_r+0x10>
 801125a:	2500      	movs	r5, #0
 801125c:	4628      	mov	r0, r5
 801125e:	bd38      	pop	{r3, r4, r5, pc}
 8011260:	b118      	cbz	r0, 801126a <_fflush_r+0x1a>
 8011262:	6983      	ldr	r3, [r0, #24]
 8011264:	b90b      	cbnz	r3, 801126a <_fflush_r+0x1a>
 8011266:	f000 f887 	bl	8011378 <__sinit>
 801126a:	4b14      	ldr	r3, [pc, #80]	; (80112bc <_fflush_r+0x6c>)
 801126c:	429c      	cmp	r4, r3
 801126e:	d11b      	bne.n	80112a8 <_fflush_r+0x58>
 8011270:	686c      	ldr	r4, [r5, #4]
 8011272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d0ef      	beq.n	801125a <_fflush_r+0xa>
 801127a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801127c:	07d0      	lsls	r0, r2, #31
 801127e:	d404      	bmi.n	801128a <_fflush_r+0x3a>
 8011280:	0599      	lsls	r1, r3, #22
 8011282:	d402      	bmi.n	801128a <_fflush_r+0x3a>
 8011284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011286:	f000 fc80 	bl	8011b8a <__retarget_lock_acquire_recursive>
 801128a:	4628      	mov	r0, r5
 801128c:	4621      	mov	r1, r4
 801128e:	f7ff ff59 	bl	8011144 <__sflush_r>
 8011292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011294:	4605      	mov	r5, r0
 8011296:	07da      	lsls	r2, r3, #31
 8011298:	d4e0      	bmi.n	801125c <_fflush_r+0xc>
 801129a:	89a3      	ldrh	r3, [r4, #12]
 801129c:	059b      	lsls	r3, r3, #22
 801129e:	d4dd      	bmi.n	801125c <_fflush_r+0xc>
 80112a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112a2:	f000 fc73 	bl	8011b8c <__retarget_lock_release_recursive>
 80112a6:	e7d9      	b.n	801125c <_fflush_r+0xc>
 80112a8:	4b05      	ldr	r3, [pc, #20]	; (80112c0 <_fflush_r+0x70>)
 80112aa:	429c      	cmp	r4, r3
 80112ac:	d101      	bne.n	80112b2 <_fflush_r+0x62>
 80112ae:	68ac      	ldr	r4, [r5, #8]
 80112b0:	e7df      	b.n	8011272 <_fflush_r+0x22>
 80112b2:	4b04      	ldr	r3, [pc, #16]	; (80112c4 <_fflush_r+0x74>)
 80112b4:	429c      	cmp	r4, r3
 80112b6:	bf08      	it	eq
 80112b8:	68ec      	ldreq	r4, [r5, #12]
 80112ba:	e7da      	b.n	8011272 <_fflush_r+0x22>
 80112bc:	08013fec 	.word	0x08013fec
 80112c0:	0801400c 	.word	0x0801400c
 80112c4:	08013fcc 	.word	0x08013fcc

080112c8 <std>:
 80112c8:	2300      	movs	r3, #0
 80112ca:	b510      	push	{r4, lr}
 80112cc:	4604      	mov	r4, r0
 80112ce:	e9c0 3300 	strd	r3, r3, [r0]
 80112d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112d6:	6083      	str	r3, [r0, #8]
 80112d8:	8181      	strh	r1, [r0, #12]
 80112da:	6643      	str	r3, [r0, #100]	; 0x64
 80112dc:	81c2      	strh	r2, [r0, #14]
 80112de:	6183      	str	r3, [r0, #24]
 80112e0:	4619      	mov	r1, r3
 80112e2:	2208      	movs	r2, #8
 80112e4:	305c      	adds	r0, #92	; 0x5c
 80112e6:	f7fd f9f5 	bl	800e6d4 <memset>
 80112ea:	4b05      	ldr	r3, [pc, #20]	; (8011300 <std+0x38>)
 80112ec:	6224      	str	r4, [r4, #32]
 80112ee:	6263      	str	r3, [r4, #36]	; 0x24
 80112f0:	4b04      	ldr	r3, [pc, #16]	; (8011304 <std+0x3c>)
 80112f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80112f4:	4b04      	ldr	r3, [pc, #16]	; (8011308 <std+0x40>)
 80112f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112f8:	4b04      	ldr	r3, [pc, #16]	; (801130c <std+0x44>)
 80112fa:	6323      	str	r3, [r4, #48]	; 0x30
 80112fc:	bd10      	pop	{r4, pc}
 80112fe:	bf00      	nop
 8011300:	08012a59 	.word	0x08012a59
 8011304:	08012a7b 	.word	0x08012a7b
 8011308:	08012ab3 	.word	0x08012ab3
 801130c:	08012ad7 	.word	0x08012ad7

08011310 <_cleanup_r>:
 8011310:	4901      	ldr	r1, [pc, #4]	; (8011318 <_cleanup_r+0x8>)
 8011312:	f000 b8af 	b.w	8011474 <_fwalk_reent>
 8011316:	bf00      	nop
 8011318:	08011251 	.word	0x08011251

0801131c <__sfmoreglue>:
 801131c:	b570      	push	{r4, r5, r6, lr}
 801131e:	2568      	movs	r5, #104	; 0x68
 8011320:	1e4a      	subs	r2, r1, #1
 8011322:	4355      	muls	r5, r2
 8011324:	460e      	mov	r6, r1
 8011326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801132a:	f001 f9cf 	bl	80126cc <_malloc_r>
 801132e:	4604      	mov	r4, r0
 8011330:	b140      	cbz	r0, 8011344 <__sfmoreglue+0x28>
 8011332:	2100      	movs	r1, #0
 8011334:	e9c0 1600 	strd	r1, r6, [r0]
 8011338:	300c      	adds	r0, #12
 801133a:	60a0      	str	r0, [r4, #8]
 801133c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011340:	f7fd f9c8 	bl	800e6d4 <memset>
 8011344:	4620      	mov	r0, r4
 8011346:	bd70      	pop	{r4, r5, r6, pc}

08011348 <__sfp_lock_acquire>:
 8011348:	4801      	ldr	r0, [pc, #4]	; (8011350 <__sfp_lock_acquire+0x8>)
 801134a:	f000 bc1e 	b.w	8011b8a <__retarget_lock_acquire_recursive>
 801134e:	bf00      	nop
 8011350:	20000d14 	.word	0x20000d14

08011354 <__sfp_lock_release>:
 8011354:	4801      	ldr	r0, [pc, #4]	; (801135c <__sfp_lock_release+0x8>)
 8011356:	f000 bc19 	b.w	8011b8c <__retarget_lock_release_recursive>
 801135a:	bf00      	nop
 801135c:	20000d14 	.word	0x20000d14

08011360 <__sinit_lock_acquire>:
 8011360:	4801      	ldr	r0, [pc, #4]	; (8011368 <__sinit_lock_acquire+0x8>)
 8011362:	f000 bc12 	b.w	8011b8a <__retarget_lock_acquire_recursive>
 8011366:	bf00      	nop
 8011368:	20000d0f 	.word	0x20000d0f

0801136c <__sinit_lock_release>:
 801136c:	4801      	ldr	r0, [pc, #4]	; (8011374 <__sinit_lock_release+0x8>)
 801136e:	f000 bc0d 	b.w	8011b8c <__retarget_lock_release_recursive>
 8011372:	bf00      	nop
 8011374:	20000d0f 	.word	0x20000d0f

08011378 <__sinit>:
 8011378:	b510      	push	{r4, lr}
 801137a:	4604      	mov	r4, r0
 801137c:	f7ff fff0 	bl	8011360 <__sinit_lock_acquire>
 8011380:	69a3      	ldr	r3, [r4, #24]
 8011382:	b11b      	cbz	r3, 801138c <__sinit+0x14>
 8011384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011388:	f7ff bff0 	b.w	801136c <__sinit_lock_release>
 801138c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011390:	6523      	str	r3, [r4, #80]	; 0x50
 8011392:	4b13      	ldr	r3, [pc, #76]	; (80113e0 <__sinit+0x68>)
 8011394:	4a13      	ldr	r2, [pc, #76]	; (80113e4 <__sinit+0x6c>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	62a2      	str	r2, [r4, #40]	; 0x28
 801139a:	42a3      	cmp	r3, r4
 801139c:	bf08      	it	eq
 801139e:	2301      	moveq	r3, #1
 80113a0:	4620      	mov	r0, r4
 80113a2:	bf08      	it	eq
 80113a4:	61a3      	streq	r3, [r4, #24]
 80113a6:	f000 f81f 	bl	80113e8 <__sfp>
 80113aa:	6060      	str	r0, [r4, #4]
 80113ac:	4620      	mov	r0, r4
 80113ae:	f000 f81b 	bl	80113e8 <__sfp>
 80113b2:	60a0      	str	r0, [r4, #8]
 80113b4:	4620      	mov	r0, r4
 80113b6:	f000 f817 	bl	80113e8 <__sfp>
 80113ba:	2200      	movs	r2, #0
 80113bc:	2104      	movs	r1, #4
 80113be:	60e0      	str	r0, [r4, #12]
 80113c0:	6860      	ldr	r0, [r4, #4]
 80113c2:	f7ff ff81 	bl	80112c8 <std>
 80113c6:	2201      	movs	r2, #1
 80113c8:	2109      	movs	r1, #9
 80113ca:	68a0      	ldr	r0, [r4, #8]
 80113cc:	f7ff ff7c 	bl	80112c8 <std>
 80113d0:	2202      	movs	r2, #2
 80113d2:	2112      	movs	r1, #18
 80113d4:	68e0      	ldr	r0, [r4, #12]
 80113d6:	f7ff ff77 	bl	80112c8 <std>
 80113da:	2301      	movs	r3, #1
 80113dc:	61a3      	str	r3, [r4, #24]
 80113de:	e7d1      	b.n	8011384 <__sinit+0xc>
 80113e0:	08013e80 	.word	0x08013e80
 80113e4:	08011311 	.word	0x08011311

080113e8 <__sfp>:
 80113e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ea:	4607      	mov	r7, r0
 80113ec:	f7ff ffac 	bl	8011348 <__sfp_lock_acquire>
 80113f0:	4b1e      	ldr	r3, [pc, #120]	; (801146c <__sfp+0x84>)
 80113f2:	681e      	ldr	r6, [r3, #0]
 80113f4:	69b3      	ldr	r3, [r6, #24]
 80113f6:	b913      	cbnz	r3, 80113fe <__sfp+0x16>
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7ff ffbd 	bl	8011378 <__sinit>
 80113fe:	3648      	adds	r6, #72	; 0x48
 8011400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011404:	3b01      	subs	r3, #1
 8011406:	d503      	bpl.n	8011410 <__sfp+0x28>
 8011408:	6833      	ldr	r3, [r6, #0]
 801140a:	b30b      	cbz	r3, 8011450 <__sfp+0x68>
 801140c:	6836      	ldr	r6, [r6, #0]
 801140e:	e7f7      	b.n	8011400 <__sfp+0x18>
 8011410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011414:	b9d5      	cbnz	r5, 801144c <__sfp+0x64>
 8011416:	4b16      	ldr	r3, [pc, #88]	; (8011470 <__sfp+0x88>)
 8011418:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801141c:	60e3      	str	r3, [r4, #12]
 801141e:	6665      	str	r5, [r4, #100]	; 0x64
 8011420:	f000 fbb2 	bl	8011b88 <__retarget_lock_init_recursive>
 8011424:	f7ff ff96 	bl	8011354 <__sfp_lock_release>
 8011428:	2208      	movs	r2, #8
 801142a:	4629      	mov	r1, r5
 801142c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011434:	6025      	str	r5, [r4, #0]
 8011436:	61a5      	str	r5, [r4, #24]
 8011438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801143c:	f7fd f94a 	bl	800e6d4 <memset>
 8011440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011448:	4620      	mov	r0, r4
 801144a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801144c:	3468      	adds	r4, #104	; 0x68
 801144e:	e7d9      	b.n	8011404 <__sfp+0x1c>
 8011450:	2104      	movs	r1, #4
 8011452:	4638      	mov	r0, r7
 8011454:	f7ff ff62 	bl	801131c <__sfmoreglue>
 8011458:	4604      	mov	r4, r0
 801145a:	6030      	str	r0, [r6, #0]
 801145c:	2800      	cmp	r0, #0
 801145e:	d1d5      	bne.n	801140c <__sfp+0x24>
 8011460:	f7ff ff78 	bl	8011354 <__sfp_lock_release>
 8011464:	230c      	movs	r3, #12
 8011466:	603b      	str	r3, [r7, #0]
 8011468:	e7ee      	b.n	8011448 <__sfp+0x60>
 801146a:	bf00      	nop
 801146c:	08013e80 	.word	0x08013e80
 8011470:	ffff0001 	.word	0xffff0001

08011474 <_fwalk_reent>:
 8011474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011478:	4606      	mov	r6, r0
 801147a:	4688      	mov	r8, r1
 801147c:	2700      	movs	r7, #0
 801147e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011486:	f1b9 0901 	subs.w	r9, r9, #1
 801148a:	d505      	bpl.n	8011498 <_fwalk_reent+0x24>
 801148c:	6824      	ldr	r4, [r4, #0]
 801148e:	2c00      	cmp	r4, #0
 8011490:	d1f7      	bne.n	8011482 <_fwalk_reent+0xe>
 8011492:	4638      	mov	r0, r7
 8011494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011498:	89ab      	ldrh	r3, [r5, #12]
 801149a:	2b01      	cmp	r3, #1
 801149c:	d907      	bls.n	80114ae <_fwalk_reent+0x3a>
 801149e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114a2:	3301      	adds	r3, #1
 80114a4:	d003      	beq.n	80114ae <_fwalk_reent+0x3a>
 80114a6:	4629      	mov	r1, r5
 80114a8:	4630      	mov	r0, r6
 80114aa:	47c0      	blx	r8
 80114ac:	4307      	orrs	r7, r0
 80114ae:	3568      	adds	r5, #104	; 0x68
 80114b0:	e7e9      	b.n	8011486 <_fwalk_reent+0x12>

080114b2 <rshift>:
 80114b2:	6903      	ldr	r3, [r0, #16]
 80114b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114b8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80114bc:	f100 0414 	add.w	r4, r0, #20
 80114c0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80114c4:	dd46      	ble.n	8011554 <rshift+0xa2>
 80114c6:	f011 011f 	ands.w	r1, r1, #31
 80114ca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80114ce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80114d2:	d10c      	bne.n	80114ee <rshift+0x3c>
 80114d4:	4629      	mov	r1, r5
 80114d6:	f100 0710 	add.w	r7, r0, #16
 80114da:	42b1      	cmp	r1, r6
 80114dc:	d335      	bcc.n	801154a <rshift+0x98>
 80114de:	1a9b      	subs	r3, r3, r2
 80114e0:	009b      	lsls	r3, r3, #2
 80114e2:	1eea      	subs	r2, r5, #3
 80114e4:	4296      	cmp	r6, r2
 80114e6:	bf38      	it	cc
 80114e8:	2300      	movcc	r3, #0
 80114ea:	4423      	add	r3, r4
 80114ec:	e015      	b.n	801151a <rshift+0x68>
 80114ee:	46a1      	mov	r9, r4
 80114f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80114f4:	f1c1 0820 	rsb	r8, r1, #32
 80114f8:	40cf      	lsrs	r7, r1
 80114fa:	f105 0e04 	add.w	lr, r5, #4
 80114fe:	4576      	cmp	r6, lr
 8011500:	46f4      	mov	ip, lr
 8011502:	d816      	bhi.n	8011532 <rshift+0x80>
 8011504:	1a9b      	subs	r3, r3, r2
 8011506:	009a      	lsls	r2, r3, #2
 8011508:	3a04      	subs	r2, #4
 801150a:	3501      	adds	r5, #1
 801150c:	42ae      	cmp	r6, r5
 801150e:	bf38      	it	cc
 8011510:	2200      	movcc	r2, #0
 8011512:	18a3      	adds	r3, r4, r2
 8011514:	50a7      	str	r7, [r4, r2]
 8011516:	b107      	cbz	r7, 801151a <rshift+0x68>
 8011518:	3304      	adds	r3, #4
 801151a:	42a3      	cmp	r3, r4
 801151c:	eba3 0204 	sub.w	r2, r3, r4
 8011520:	bf08      	it	eq
 8011522:	2300      	moveq	r3, #0
 8011524:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011528:	6102      	str	r2, [r0, #16]
 801152a:	bf08      	it	eq
 801152c:	6143      	streq	r3, [r0, #20]
 801152e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011532:	f8dc c000 	ldr.w	ip, [ip]
 8011536:	fa0c fc08 	lsl.w	ip, ip, r8
 801153a:	ea4c 0707 	orr.w	r7, ip, r7
 801153e:	f849 7b04 	str.w	r7, [r9], #4
 8011542:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011546:	40cf      	lsrs	r7, r1
 8011548:	e7d9      	b.n	80114fe <rshift+0x4c>
 801154a:	f851 cb04 	ldr.w	ip, [r1], #4
 801154e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011552:	e7c2      	b.n	80114da <rshift+0x28>
 8011554:	4623      	mov	r3, r4
 8011556:	e7e0      	b.n	801151a <rshift+0x68>

08011558 <__hexdig_fun>:
 8011558:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801155c:	2b09      	cmp	r3, #9
 801155e:	d802      	bhi.n	8011566 <__hexdig_fun+0xe>
 8011560:	3820      	subs	r0, #32
 8011562:	b2c0      	uxtb	r0, r0
 8011564:	4770      	bx	lr
 8011566:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801156a:	2b05      	cmp	r3, #5
 801156c:	d801      	bhi.n	8011572 <__hexdig_fun+0x1a>
 801156e:	3847      	subs	r0, #71	; 0x47
 8011570:	e7f7      	b.n	8011562 <__hexdig_fun+0xa>
 8011572:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011576:	2b05      	cmp	r3, #5
 8011578:	d801      	bhi.n	801157e <__hexdig_fun+0x26>
 801157a:	3827      	subs	r0, #39	; 0x27
 801157c:	e7f1      	b.n	8011562 <__hexdig_fun+0xa>
 801157e:	2000      	movs	r0, #0
 8011580:	4770      	bx	lr
	...

08011584 <__gethex>:
 8011584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011588:	b08b      	sub	sp, #44	; 0x2c
 801158a:	9306      	str	r3, [sp, #24]
 801158c:	4bb9      	ldr	r3, [pc, #740]	; (8011874 <__gethex+0x2f0>)
 801158e:	9002      	str	r0, [sp, #8]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	468b      	mov	fp, r1
 8011594:	4618      	mov	r0, r3
 8011596:	4690      	mov	r8, r2
 8011598:	9303      	str	r3, [sp, #12]
 801159a:	f7ee fe45 	bl	8000228 <strlen>
 801159e:	4682      	mov	sl, r0
 80115a0:	9b03      	ldr	r3, [sp, #12]
 80115a2:	f8db 2000 	ldr.w	r2, [fp]
 80115a6:	4403      	add	r3, r0
 80115a8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80115ac:	9307      	str	r3, [sp, #28]
 80115ae:	1c93      	adds	r3, r2, #2
 80115b0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80115b4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80115b8:	32fe      	adds	r2, #254	; 0xfe
 80115ba:	18d1      	adds	r1, r2, r3
 80115bc:	461f      	mov	r7, r3
 80115be:	f813 0b01 	ldrb.w	r0, [r3], #1
 80115c2:	9101      	str	r1, [sp, #4]
 80115c4:	2830      	cmp	r0, #48	; 0x30
 80115c6:	d0f8      	beq.n	80115ba <__gethex+0x36>
 80115c8:	f7ff ffc6 	bl	8011558 <__hexdig_fun>
 80115cc:	4604      	mov	r4, r0
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d13a      	bne.n	8011648 <__gethex+0xc4>
 80115d2:	4652      	mov	r2, sl
 80115d4:	4638      	mov	r0, r7
 80115d6:	9903      	ldr	r1, [sp, #12]
 80115d8:	f001 fa81 	bl	8012ade <strncmp>
 80115dc:	4605      	mov	r5, r0
 80115de:	2800      	cmp	r0, #0
 80115e0:	d166      	bne.n	80116b0 <__gethex+0x12c>
 80115e2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80115e6:	eb07 060a 	add.w	r6, r7, sl
 80115ea:	f7ff ffb5 	bl	8011558 <__hexdig_fun>
 80115ee:	2800      	cmp	r0, #0
 80115f0:	d060      	beq.n	80116b4 <__gethex+0x130>
 80115f2:	4633      	mov	r3, r6
 80115f4:	7818      	ldrb	r0, [r3, #0]
 80115f6:	461f      	mov	r7, r3
 80115f8:	2830      	cmp	r0, #48	; 0x30
 80115fa:	f103 0301 	add.w	r3, r3, #1
 80115fe:	d0f9      	beq.n	80115f4 <__gethex+0x70>
 8011600:	f7ff ffaa 	bl	8011558 <__hexdig_fun>
 8011604:	2301      	movs	r3, #1
 8011606:	fab0 f480 	clz	r4, r0
 801160a:	4635      	mov	r5, r6
 801160c:	0964      	lsrs	r4, r4, #5
 801160e:	9301      	str	r3, [sp, #4]
 8011610:	463a      	mov	r2, r7
 8011612:	4616      	mov	r6, r2
 8011614:	7830      	ldrb	r0, [r6, #0]
 8011616:	3201      	adds	r2, #1
 8011618:	f7ff ff9e 	bl	8011558 <__hexdig_fun>
 801161c:	2800      	cmp	r0, #0
 801161e:	d1f8      	bne.n	8011612 <__gethex+0x8e>
 8011620:	4652      	mov	r2, sl
 8011622:	4630      	mov	r0, r6
 8011624:	9903      	ldr	r1, [sp, #12]
 8011626:	f001 fa5a 	bl	8012ade <strncmp>
 801162a:	b980      	cbnz	r0, 801164e <__gethex+0xca>
 801162c:	b94d      	cbnz	r5, 8011642 <__gethex+0xbe>
 801162e:	eb06 050a 	add.w	r5, r6, sl
 8011632:	462a      	mov	r2, r5
 8011634:	4616      	mov	r6, r2
 8011636:	7830      	ldrb	r0, [r6, #0]
 8011638:	3201      	adds	r2, #1
 801163a:	f7ff ff8d 	bl	8011558 <__hexdig_fun>
 801163e:	2800      	cmp	r0, #0
 8011640:	d1f8      	bne.n	8011634 <__gethex+0xb0>
 8011642:	1bad      	subs	r5, r5, r6
 8011644:	00ad      	lsls	r5, r5, #2
 8011646:	e004      	b.n	8011652 <__gethex+0xce>
 8011648:	2400      	movs	r4, #0
 801164a:	4625      	mov	r5, r4
 801164c:	e7e0      	b.n	8011610 <__gethex+0x8c>
 801164e:	2d00      	cmp	r5, #0
 8011650:	d1f7      	bne.n	8011642 <__gethex+0xbe>
 8011652:	7833      	ldrb	r3, [r6, #0]
 8011654:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011658:	2b50      	cmp	r3, #80	; 0x50
 801165a:	d139      	bne.n	80116d0 <__gethex+0x14c>
 801165c:	7873      	ldrb	r3, [r6, #1]
 801165e:	2b2b      	cmp	r3, #43	; 0x2b
 8011660:	d02a      	beq.n	80116b8 <__gethex+0x134>
 8011662:	2b2d      	cmp	r3, #45	; 0x2d
 8011664:	d02c      	beq.n	80116c0 <__gethex+0x13c>
 8011666:	f04f 0900 	mov.w	r9, #0
 801166a:	1c71      	adds	r1, r6, #1
 801166c:	7808      	ldrb	r0, [r1, #0]
 801166e:	f7ff ff73 	bl	8011558 <__hexdig_fun>
 8011672:	1e43      	subs	r3, r0, #1
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b18      	cmp	r3, #24
 8011678:	d82a      	bhi.n	80116d0 <__gethex+0x14c>
 801167a:	f1a0 0210 	sub.w	r2, r0, #16
 801167e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011682:	f7ff ff69 	bl	8011558 <__hexdig_fun>
 8011686:	1e43      	subs	r3, r0, #1
 8011688:	b2db      	uxtb	r3, r3
 801168a:	2b18      	cmp	r3, #24
 801168c:	d91b      	bls.n	80116c6 <__gethex+0x142>
 801168e:	f1b9 0f00 	cmp.w	r9, #0
 8011692:	d000      	beq.n	8011696 <__gethex+0x112>
 8011694:	4252      	negs	r2, r2
 8011696:	4415      	add	r5, r2
 8011698:	f8cb 1000 	str.w	r1, [fp]
 801169c:	b1d4      	cbz	r4, 80116d4 <__gethex+0x150>
 801169e:	9b01      	ldr	r3, [sp, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	bf14      	ite	ne
 80116a4:	2700      	movne	r7, #0
 80116a6:	2706      	moveq	r7, #6
 80116a8:	4638      	mov	r0, r7
 80116aa:	b00b      	add	sp, #44	; 0x2c
 80116ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b0:	463e      	mov	r6, r7
 80116b2:	4625      	mov	r5, r4
 80116b4:	2401      	movs	r4, #1
 80116b6:	e7cc      	b.n	8011652 <__gethex+0xce>
 80116b8:	f04f 0900 	mov.w	r9, #0
 80116bc:	1cb1      	adds	r1, r6, #2
 80116be:	e7d5      	b.n	801166c <__gethex+0xe8>
 80116c0:	f04f 0901 	mov.w	r9, #1
 80116c4:	e7fa      	b.n	80116bc <__gethex+0x138>
 80116c6:	230a      	movs	r3, #10
 80116c8:	fb03 0202 	mla	r2, r3, r2, r0
 80116cc:	3a10      	subs	r2, #16
 80116ce:	e7d6      	b.n	801167e <__gethex+0xfa>
 80116d0:	4631      	mov	r1, r6
 80116d2:	e7e1      	b.n	8011698 <__gethex+0x114>
 80116d4:	4621      	mov	r1, r4
 80116d6:	1bf3      	subs	r3, r6, r7
 80116d8:	3b01      	subs	r3, #1
 80116da:	2b07      	cmp	r3, #7
 80116dc:	dc0a      	bgt.n	80116f4 <__gethex+0x170>
 80116de:	9802      	ldr	r0, [sp, #8]
 80116e0:	f000 fae2 	bl	8011ca8 <_Balloc>
 80116e4:	4604      	mov	r4, r0
 80116e6:	b940      	cbnz	r0, 80116fa <__gethex+0x176>
 80116e8:	4602      	mov	r2, r0
 80116ea:	21de      	movs	r1, #222	; 0xde
 80116ec:	4b62      	ldr	r3, [pc, #392]	; (8011878 <__gethex+0x2f4>)
 80116ee:	4863      	ldr	r0, [pc, #396]	; (801187c <__gethex+0x2f8>)
 80116f0:	f001 fa26 	bl	8012b40 <__assert_func>
 80116f4:	3101      	adds	r1, #1
 80116f6:	105b      	asrs	r3, r3, #1
 80116f8:	e7ef      	b.n	80116da <__gethex+0x156>
 80116fa:	f04f 0b00 	mov.w	fp, #0
 80116fe:	f100 0914 	add.w	r9, r0, #20
 8011702:	f1ca 0301 	rsb	r3, sl, #1
 8011706:	f8cd 9010 	str.w	r9, [sp, #16]
 801170a:	f8cd b004 	str.w	fp, [sp, #4]
 801170e:	9308      	str	r3, [sp, #32]
 8011710:	42b7      	cmp	r7, r6
 8011712:	d33f      	bcc.n	8011794 <__gethex+0x210>
 8011714:	9f04      	ldr	r7, [sp, #16]
 8011716:	9b01      	ldr	r3, [sp, #4]
 8011718:	f847 3b04 	str.w	r3, [r7], #4
 801171c:	eba7 0709 	sub.w	r7, r7, r9
 8011720:	10bf      	asrs	r7, r7, #2
 8011722:	6127      	str	r7, [r4, #16]
 8011724:	4618      	mov	r0, r3
 8011726:	f000 fbb5 	bl	8011e94 <__hi0bits>
 801172a:	017f      	lsls	r7, r7, #5
 801172c:	f8d8 6000 	ldr.w	r6, [r8]
 8011730:	1a3f      	subs	r7, r7, r0
 8011732:	42b7      	cmp	r7, r6
 8011734:	dd62      	ble.n	80117fc <__gethex+0x278>
 8011736:	1bbf      	subs	r7, r7, r6
 8011738:	4639      	mov	r1, r7
 801173a:	4620      	mov	r0, r4
 801173c:	f000 ff4b 	bl	80125d6 <__any_on>
 8011740:	4682      	mov	sl, r0
 8011742:	b1a8      	cbz	r0, 8011770 <__gethex+0x1ec>
 8011744:	f04f 0a01 	mov.w	sl, #1
 8011748:	1e7b      	subs	r3, r7, #1
 801174a:	1159      	asrs	r1, r3, #5
 801174c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011750:	f003 021f 	and.w	r2, r3, #31
 8011754:	fa0a f202 	lsl.w	r2, sl, r2
 8011758:	420a      	tst	r2, r1
 801175a:	d009      	beq.n	8011770 <__gethex+0x1ec>
 801175c:	4553      	cmp	r3, sl
 801175e:	dd05      	ble.n	801176c <__gethex+0x1e8>
 8011760:	4620      	mov	r0, r4
 8011762:	1eb9      	subs	r1, r7, #2
 8011764:	f000 ff37 	bl	80125d6 <__any_on>
 8011768:	2800      	cmp	r0, #0
 801176a:	d144      	bne.n	80117f6 <__gethex+0x272>
 801176c:	f04f 0a02 	mov.w	sl, #2
 8011770:	4639      	mov	r1, r7
 8011772:	4620      	mov	r0, r4
 8011774:	f7ff fe9d 	bl	80114b2 <rshift>
 8011778:	443d      	add	r5, r7
 801177a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801177e:	42ab      	cmp	r3, r5
 8011780:	da4a      	bge.n	8011818 <__gethex+0x294>
 8011782:	4621      	mov	r1, r4
 8011784:	9802      	ldr	r0, [sp, #8]
 8011786:	f000 facf 	bl	8011d28 <_Bfree>
 801178a:	2300      	movs	r3, #0
 801178c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801178e:	27a3      	movs	r7, #163	; 0xa3
 8011790:	6013      	str	r3, [r2, #0]
 8011792:	e789      	b.n	80116a8 <__gethex+0x124>
 8011794:	1e73      	subs	r3, r6, #1
 8011796:	9a07      	ldr	r2, [sp, #28]
 8011798:	9305      	str	r3, [sp, #20]
 801179a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801179e:	4293      	cmp	r3, r2
 80117a0:	d019      	beq.n	80117d6 <__gethex+0x252>
 80117a2:	f1bb 0f20 	cmp.w	fp, #32
 80117a6:	d107      	bne.n	80117b8 <__gethex+0x234>
 80117a8:	9b04      	ldr	r3, [sp, #16]
 80117aa:	9a01      	ldr	r2, [sp, #4]
 80117ac:	f843 2b04 	str.w	r2, [r3], #4
 80117b0:	9304      	str	r3, [sp, #16]
 80117b2:	2300      	movs	r3, #0
 80117b4:	469b      	mov	fp, r3
 80117b6:	9301      	str	r3, [sp, #4]
 80117b8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80117bc:	f7ff fecc 	bl	8011558 <__hexdig_fun>
 80117c0:	9b01      	ldr	r3, [sp, #4]
 80117c2:	f000 000f 	and.w	r0, r0, #15
 80117c6:	fa00 f00b 	lsl.w	r0, r0, fp
 80117ca:	4303      	orrs	r3, r0
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	f10b 0b04 	add.w	fp, fp, #4
 80117d2:	9b05      	ldr	r3, [sp, #20]
 80117d4:	e00d      	b.n	80117f2 <__gethex+0x26e>
 80117d6:	9b05      	ldr	r3, [sp, #20]
 80117d8:	9a08      	ldr	r2, [sp, #32]
 80117da:	4413      	add	r3, r2
 80117dc:	42bb      	cmp	r3, r7
 80117de:	d3e0      	bcc.n	80117a2 <__gethex+0x21e>
 80117e0:	4618      	mov	r0, r3
 80117e2:	4652      	mov	r2, sl
 80117e4:	9903      	ldr	r1, [sp, #12]
 80117e6:	9309      	str	r3, [sp, #36]	; 0x24
 80117e8:	f001 f979 	bl	8012ade <strncmp>
 80117ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ee:	2800      	cmp	r0, #0
 80117f0:	d1d7      	bne.n	80117a2 <__gethex+0x21e>
 80117f2:	461e      	mov	r6, r3
 80117f4:	e78c      	b.n	8011710 <__gethex+0x18c>
 80117f6:	f04f 0a03 	mov.w	sl, #3
 80117fa:	e7b9      	b.n	8011770 <__gethex+0x1ec>
 80117fc:	da09      	bge.n	8011812 <__gethex+0x28e>
 80117fe:	1bf7      	subs	r7, r6, r7
 8011800:	4621      	mov	r1, r4
 8011802:	463a      	mov	r2, r7
 8011804:	9802      	ldr	r0, [sp, #8]
 8011806:	f000 fca7 	bl	8012158 <__lshift>
 801180a:	4604      	mov	r4, r0
 801180c:	1bed      	subs	r5, r5, r7
 801180e:	f100 0914 	add.w	r9, r0, #20
 8011812:	f04f 0a00 	mov.w	sl, #0
 8011816:	e7b0      	b.n	801177a <__gethex+0x1f6>
 8011818:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801181c:	42a8      	cmp	r0, r5
 801181e:	dd71      	ble.n	8011904 <__gethex+0x380>
 8011820:	1b45      	subs	r5, r0, r5
 8011822:	42ae      	cmp	r6, r5
 8011824:	dc34      	bgt.n	8011890 <__gethex+0x30c>
 8011826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801182a:	2b02      	cmp	r3, #2
 801182c:	d028      	beq.n	8011880 <__gethex+0x2fc>
 801182e:	2b03      	cmp	r3, #3
 8011830:	d02a      	beq.n	8011888 <__gethex+0x304>
 8011832:	2b01      	cmp	r3, #1
 8011834:	d115      	bne.n	8011862 <__gethex+0x2de>
 8011836:	42ae      	cmp	r6, r5
 8011838:	d113      	bne.n	8011862 <__gethex+0x2de>
 801183a:	2e01      	cmp	r6, #1
 801183c:	d10b      	bne.n	8011856 <__gethex+0x2d2>
 801183e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011842:	9a06      	ldr	r2, [sp, #24]
 8011844:	2762      	movs	r7, #98	; 0x62
 8011846:	6013      	str	r3, [r2, #0]
 8011848:	2301      	movs	r3, #1
 801184a:	6123      	str	r3, [r4, #16]
 801184c:	f8c9 3000 	str.w	r3, [r9]
 8011850:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011852:	601c      	str	r4, [r3, #0]
 8011854:	e728      	b.n	80116a8 <__gethex+0x124>
 8011856:	4620      	mov	r0, r4
 8011858:	1e71      	subs	r1, r6, #1
 801185a:	f000 febc 	bl	80125d6 <__any_on>
 801185e:	2800      	cmp	r0, #0
 8011860:	d1ed      	bne.n	801183e <__gethex+0x2ba>
 8011862:	4621      	mov	r1, r4
 8011864:	9802      	ldr	r0, [sp, #8]
 8011866:	f000 fa5f 	bl	8011d28 <_Bfree>
 801186a:	2300      	movs	r3, #0
 801186c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801186e:	2750      	movs	r7, #80	; 0x50
 8011870:	6013      	str	r3, [r2, #0]
 8011872:	e719      	b.n	80116a8 <__gethex+0x124>
 8011874:	08014098 	.word	0x08014098
 8011878:	08013fb8 	.word	0x08013fb8
 801187c:	0801402c 	.word	0x0801402c
 8011880:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011882:	2b00      	cmp	r3, #0
 8011884:	d1ed      	bne.n	8011862 <__gethex+0x2de>
 8011886:	e7da      	b.n	801183e <__gethex+0x2ba>
 8011888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1d7      	bne.n	801183e <__gethex+0x2ba>
 801188e:	e7e8      	b.n	8011862 <__gethex+0x2de>
 8011890:	1e6f      	subs	r7, r5, #1
 8011892:	f1ba 0f00 	cmp.w	sl, #0
 8011896:	d132      	bne.n	80118fe <__gethex+0x37a>
 8011898:	b127      	cbz	r7, 80118a4 <__gethex+0x320>
 801189a:	4639      	mov	r1, r7
 801189c:	4620      	mov	r0, r4
 801189e:	f000 fe9a 	bl	80125d6 <__any_on>
 80118a2:	4682      	mov	sl, r0
 80118a4:	2101      	movs	r1, #1
 80118a6:	117b      	asrs	r3, r7, #5
 80118a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80118ac:	f007 071f 	and.w	r7, r7, #31
 80118b0:	fa01 f707 	lsl.w	r7, r1, r7
 80118b4:	421f      	tst	r7, r3
 80118b6:	f04f 0702 	mov.w	r7, #2
 80118ba:	4629      	mov	r1, r5
 80118bc:	4620      	mov	r0, r4
 80118be:	bf18      	it	ne
 80118c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80118c4:	1b76      	subs	r6, r6, r5
 80118c6:	f7ff fdf4 	bl	80114b2 <rshift>
 80118ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80118ce:	f1ba 0f00 	cmp.w	sl, #0
 80118d2:	d048      	beq.n	8011966 <__gethex+0x3e2>
 80118d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d015      	beq.n	8011908 <__gethex+0x384>
 80118dc:	2b03      	cmp	r3, #3
 80118de:	d017      	beq.n	8011910 <__gethex+0x38c>
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d109      	bne.n	80118f8 <__gethex+0x374>
 80118e4:	f01a 0f02 	tst.w	sl, #2
 80118e8:	d006      	beq.n	80118f8 <__gethex+0x374>
 80118ea:	f8d9 0000 	ldr.w	r0, [r9]
 80118ee:	ea4a 0a00 	orr.w	sl, sl, r0
 80118f2:	f01a 0f01 	tst.w	sl, #1
 80118f6:	d10e      	bne.n	8011916 <__gethex+0x392>
 80118f8:	f047 0710 	orr.w	r7, r7, #16
 80118fc:	e033      	b.n	8011966 <__gethex+0x3e2>
 80118fe:	f04f 0a01 	mov.w	sl, #1
 8011902:	e7cf      	b.n	80118a4 <__gethex+0x320>
 8011904:	2701      	movs	r7, #1
 8011906:	e7e2      	b.n	80118ce <__gethex+0x34a>
 8011908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801190a:	f1c3 0301 	rsb	r3, r3, #1
 801190e:	9315      	str	r3, [sp, #84]	; 0x54
 8011910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011912:	2b00      	cmp	r3, #0
 8011914:	d0f0      	beq.n	80118f8 <__gethex+0x374>
 8011916:	f04f 0c00 	mov.w	ip, #0
 801191a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801191e:	f104 0314 	add.w	r3, r4, #20
 8011922:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011926:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801192a:	4618      	mov	r0, r3
 801192c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011930:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011934:	d01c      	beq.n	8011970 <__gethex+0x3ec>
 8011936:	3201      	adds	r2, #1
 8011938:	6002      	str	r2, [r0, #0]
 801193a:	2f02      	cmp	r7, #2
 801193c:	f104 0314 	add.w	r3, r4, #20
 8011940:	d13d      	bne.n	80119be <__gethex+0x43a>
 8011942:	f8d8 2000 	ldr.w	r2, [r8]
 8011946:	3a01      	subs	r2, #1
 8011948:	42b2      	cmp	r2, r6
 801194a:	d10a      	bne.n	8011962 <__gethex+0x3de>
 801194c:	2201      	movs	r2, #1
 801194e:	1171      	asrs	r1, r6, #5
 8011950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011954:	f006 061f 	and.w	r6, r6, #31
 8011958:	fa02 f606 	lsl.w	r6, r2, r6
 801195c:	421e      	tst	r6, r3
 801195e:	bf18      	it	ne
 8011960:	4617      	movne	r7, r2
 8011962:	f047 0720 	orr.w	r7, r7, #32
 8011966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011968:	601c      	str	r4, [r3, #0]
 801196a:	9b06      	ldr	r3, [sp, #24]
 801196c:	601d      	str	r5, [r3, #0]
 801196e:	e69b      	b.n	80116a8 <__gethex+0x124>
 8011970:	4299      	cmp	r1, r3
 8011972:	f843 cc04 	str.w	ip, [r3, #-4]
 8011976:	d8d8      	bhi.n	801192a <__gethex+0x3a6>
 8011978:	68a3      	ldr	r3, [r4, #8]
 801197a:	459b      	cmp	fp, r3
 801197c:	db17      	blt.n	80119ae <__gethex+0x42a>
 801197e:	6861      	ldr	r1, [r4, #4]
 8011980:	9802      	ldr	r0, [sp, #8]
 8011982:	3101      	adds	r1, #1
 8011984:	f000 f990 	bl	8011ca8 <_Balloc>
 8011988:	4681      	mov	r9, r0
 801198a:	b918      	cbnz	r0, 8011994 <__gethex+0x410>
 801198c:	4602      	mov	r2, r0
 801198e:	2184      	movs	r1, #132	; 0x84
 8011990:	4b19      	ldr	r3, [pc, #100]	; (80119f8 <__gethex+0x474>)
 8011992:	e6ac      	b.n	80116ee <__gethex+0x16a>
 8011994:	6922      	ldr	r2, [r4, #16]
 8011996:	f104 010c 	add.w	r1, r4, #12
 801199a:	3202      	adds	r2, #2
 801199c:	0092      	lsls	r2, r2, #2
 801199e:	300c      	adds	r0, #12
 80119a0:	f7fc fe8a 	bl	800e6b8 <memcpy>
 80119a4:	4621      	mov	r1, r4
 80119a6:	9802      	ldr	r0, [sp, #8]
 80119a8:	f000 f9be 	bl	8011d28 <_Bfree>
 80119ac:	464c      	mov	r4, r9
 80119ae:	6923      	ldr	r3, [r4, #16]
 80119b0:	1c5a      	adds	r2, r3, #1
 80119b2:	6122      	str	r2, [r4, #16]
 80119b4:	2201      	movs	r2, #1
 80119b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80119ba:	615a      	str	r2, [r3, #20]
 80119bc:	e7bd      	b.n	801193a <__gethex+0x3b6>
 80119be:	6922      	ldr	r2, [r4, #16]
 80119c0:	455a      	cmp	r2, fp
 80119c2:	dd0b      	ble.n	80119dc <__gethex+0x458>
 80119c4:	2101      	movs	r1, #1
 80119c6:	4620      	mov	r0, r4
 80119c8:	f7ff fd73 	bl	80114b2 <rshift>
 80119cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119d0:	3501      	adds	r5, #1
 80119d2:	42ab      	cmp	r3, r5
 80119d4:	f6ff aed5 	blt.w	8011782 <__gethex+0x1fe>
 80119d8:	2701      	movs	r7, #1
 80119da:	e7c2      	b.n	8011962 <__gethex+0x3de>
 80119dc:	f016 061f 	ands.w	r6, r6, #31
 80119e0:	d0fa      	beq.n	80119d8 <__gethex+0x454>
 80119e2:	449a      	add	sl, r3
 80119e4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80119e8:	f000 fa54 	bl	8011e94 <__hi0bits>
 80119ec:	f1c6 0620 	rsb	r6, r6, #32
 80119f0:	42b0      	cmp	r0, r6
 80119f2:	dbe7      	blt.n	80119c4 <__gethex+0x440>
 80119f4:	e7f0      	b.n	80119d8 <__gethex+0x454>
 80119f6:	bf00      	nop
 80119f8:	08013fb8 	.word	0x08013fb8

080119fc <L_shift>:
 80119fc:	f1c2 0208 	rsb	r2, r2, #8
 8011a00:	0092      	lsls	r2, r2, #2
 8011a02:	b570      	push	{r4, r5, r6, lr}
 8011a04:	f1c2 0620 	rsb	r6, r2, #32
 8011a08:	6843      	ldr	r3, [r0, #4]
 8011a0a:	6804      	ldr	r4, [r0, #0]
 8011a0c:	fa03 f506 	lsl.w	r5, r3, r6
 8011a10:	432c      	orrs	r4, r5
 8011a12:	40d3      	lsrs	r3, r2
 8011a14:	6004      	str	r4, [r0, #0]
 8011a16:	f840 3f04 	str.w	r3, [r0, #4]!
 8011a1a:	4288      	cmp	r0, r1
 8011a1c:	d3f4      	bcc.n	8011a08 <L_shift+0xc>
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}

08011a20 <__match>:
 8011a20:	b530      	push	{r4, r5, lr}
 8011a22:	6803      	ldr	r3, [r0, #0]
 8011a24:	3301      	adds	r3, #1
 8011a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a2a:	b914      	cbnz	r4, 8011a32 <__match+0x12>
 8011a2c:	6003      	str	r3, [r0, #0]
 8011a2e:	2001      	movs	r0, #1
 8011a30:	bd30      	pop	{r4, r5, pc}
 8011a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011a3a:	2d19      	cmp	r5, #25
 8011a3c:	bf98      	it	ls
 8011a3e:	3220      	addls	r2, #32
 8011a40:	42a2      	cmp	r2, r4
 8011a42:	d0f0      	beq.n	8011a26 <__match+0x6>
 8011a44:	2000      	movs	r0, #0
 8011a46:	e7f3      	b.n	8011a30 <__match+0x10>

08011a48 <__hexnan>:
 8011a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4c:	2500      	movs	r5, #0
 8011a4e:	680b      	ldr	r3, [r1, #0]
 8011a50:	4682      	mov	sl, r0
 8011a52:	115e      	asrs	r6, r3, #5
 8011a54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a58:	f013 031f 	ands.w	r3, r3, #31
 8011a5c:	bf18      	it	ne
 8011a5e:	3604      	addne	r6, #4
 8011a60:	1f37      	subs	r7, r6, #4
 8011a62:	4690      	mov	r8, r2
 8011a64:	46b9      	mov	r9, r7
 8011a66:	463c      	mov	r4, r7
 8011a68:	46ab      	mov	fp, r5
 8011a6a:	b087      	sub	sp, #28
 8011a6c:	6801      	ldr	r1, [r0, #0]
 8011a6e:	9301      	str	r3, [sp, #4]
 8011a70:	f846 5c04 	str.w	r5, [r6, #-4]
 8011a74:	9502      	str	r5, [sp, #8]
 8011a76:	784a      	ldrb	r2, [r1, #1]
 8011a78:	1c4b      	adds	r3, r1, #1
 8011a7a:	9303      	str	r3, [sp, #12]
 8011a7c:	b342      	cbz	r2, 8011ad0 <__hexnan+0x88>
 8011a7e:	4610      	mov	r0, r2
 8011a80:	9105      	str	r1, [sp, #20]
 8011a82:	9204      	str	r2, [sp, #16]
 8011a84:	f7ff fd68 	bl	8011558 <__hexdig_fun>
 8011a88:	2800      	cmp	r0, #0
 8011a8a:	d14f      	bne.n	8011b2c <__hexnan+0xe4>
 8011a8c:	9a04      	ldr	r2, [sp, #16]
 8011a8e:	9905      	ldr	r1, [sp, #20]
 8011a90:	2a20      	cmp	r2, #32
 8011a92:	d818      	bhi.n	8011ac6 <__hexnan+0x7e>
 8011a94:	9b02      	ldr	r3, [sp, #8]
 8011a96:	459b      	cmp	fp, r3
 8011a98:	dd13      	ble.n	8011ac2 <__hexnan+0x7a>
 8011a9a:	454c      	cmp	r4, r9
 8011a9c:	d206      	bcs.n	8011aac <__hexnan+0x64>
 8011a9e:	2d07      	cmp	r5, #7
 8011aa0:	dc04      	bgt.n	8011aac <__hexnan+0x64>
 8011aa2:	462a      	mov	r2, r5
 8011aa4:	4649      	mov	r1, r9
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	f7ff ffa8 	bl	80119fc <L_shift>
 8011aac:	4544      	cmp	r4, r8
 8011aae:	d950      	bls.n	8011b52 <__hexnan+0x10a>
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f1a4 0904 	sub.w	r9, r4, #4
 8011ab6:	f844 3c04 	str.w	r3, [r4, #-4]
 8011aba:	461d      	mov	r5, r3
 8011abc:	464c      	mov	r4, r9
 8011abe:	f8cd b008 	str.w	fp, [sp, #8]
 8011ac2:	9903      	ldr	r1, [sp, #12]
 8011ac4:	e7d7      	b.n	8011a76 <__hexnan+0x2e>
 8011ac6:	2a29      	cmp	r2, #41	; 0x29
 8011ac8:	d156      	bne.n	8011b78 <__hexnan+0x130>
 8011aca:	3102      	adds	r1, #2
 8011acc:	f8ca 1000 	str.w	r1, [sl]
 8011ad0:	f1bb 0f00 	cmp.w	fp, #0
 8011ad4:	d050      	beq.n	8011b78 <__hexnan+0x130>
 8011ad6:	454c      	cmp	r4, r9
 8011ad8:	d206      	bcs.n	8011ae8 <__hexnan+0xa0>
 8011ada:	2d07      	cmp	r5, #7
 8011adc:	dc04      	bgt.n	8011ae8 <__hexnan+0xa0>
 8011ade:	462a      	mov	r2, r5
 8011ae0:	4649      	mov	r1, r9
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f7ff ff8a 	bl	80119fc <L_shift>
 8011ae8:	4544      	cmp	r4, r8
 8011aea:	d934      	bls.n	8011b56 <__hexnan+0x10e>
 8011aec:	4623      	mov	r3, r4
 8011aee:	f1a8 0204 	sub.w	r2, r8, #4
 8011af2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011af6:	429f      	cmp	r7, r3
 8011af8:	f842 1f04 	str.w	r1, [r2, #4]!
 8011afc:	d2f9      	bcs.n	8011af2 <__hexnan+0xaa>
 8011afe:	1b3b      	subs	r3, r7, r4
 8011b00:	f023 0303 	bic.w	r3, r3, #3
 8011b04:	3304      	adds	r3, #4
 8011b06:	3401      	adds	r4, #1
 8011b08:	3e03      	subs	r6, #3
 8011b0a:	42b4      	cmp	r4, r6
 8011b0c:	bf88      	it	hi
 8011b0e:	2304      	movhi	r3, #4
 8011b10:	2200      	movs	r2, #0
 8011b12:	4443      	add	r3, r8
 8011b14:	f843 2b04 	str.w	r2, [r3], #4
 8011b18:	429f      	cmp	r7, r3
 8011b1a:	d2fb      	bcs.n	8011b14 <__hexnan+0xcc>
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	b91b      	cbnz	r3, 8011b28 <__hexnan+0xe0>
 8011b20:	4547      	cmp	r7, r8
 8011b22:	d127      	bne.n	8011b74 <__hexnan+0x12c>
 8011b24:	2301      	movs	r3, #1
 8011b26:	603b      	str	r3, [r7, #0]
 8011b28:	2005      	movs	r0, #5
 8011b2a:	e026      	b.n	8011b7a <__hexnan+0x132>
 8011b2c:	3501      	adds	r5, #1
 8011b2e:	2d08      	cmp	r5, #8
 8011b30:	f10b 0b01 	add.w	fp, fp, #1
 8011b34:	dd06      	ble.n	8011b44 <__hexnan+0xfc>
 8011b36:	4544      	cmp	r4, r8
 8011b38:	d9c3      	bls.n	8011ac2 <__hexnan+0x7a>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	2501      	movs	r5, #1
 8011b3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b42:	3c04      	subs	r4, #4
 8011b44:	6822      	ldr	r2, [r4, #0]
 8011b46:	f000 000f 	and.w	r0, r0, #15
 8011b4a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011b4e:	6022      	str	r2, [r4, #0]
 8011b50:	e7b7      	b.n	8011ac2 <__hexnan+0x7a>
 8011b52:	2508      	movs	r5, #8
 8011b54:	e7b5      	b.n	8011ac2 <__hexnan+0x7a>
 8011b56:	9b01      	ldr	r3, [sp, #4]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d0df      	beq.n	8011b1c <__hexnan+0xd4>
 8011b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b60:	f1c3 0320 	rsb	r3, r3, #32
 8011b64:	fa22 f303 	lsr.w	r3, r2, r3
 8011b68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011b6c:	401a      	ands	r2, r3
 8011b6e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011b72:	e7d3      	b.n	8011b1c <__hexnan+0xd4>
 8011b74:	3f04      	subs	r7, #4
 8011b76:	e7d1      	b.n	8011b1c <__hexnan+0xd4>
 8011b78:	2004      	movs	r0, #4
 8011b7a:	b007      	add	sp, #28
 8011b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b80 <_localeconv_r>:
 8011b80:	4800      	ldr	r0, [pc, #0]	; (8011b84 <_localeconv_r+0x4>)
 8011b82:	4770      	bx	lr
 8011b84:	200001d4 	.word	0x200001d4

08011b88 <__retarget_lock_init_recursive>:
 8011b88:	4770      	bx	lr

08011b8a <__retarget_lock_acquire_recursive>:
 8011b8a:	4770      	bx	lr

08011b8c <__retarget_lock_release_recursive>:
 8011b8c:	4770      	bx	lr

08011b8e <__swhatbuf_r>:
 8011b8e:	b570      	push	{r4, r5, r6, lr}
 8011b90:	460e      	mov	r6, r1
 8011b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b96:	4614      	mov	r4, r2
 8011b98:	2900      	cmp	r1, #0
 8011b9a:	461d      	mov	r5, r3
 8011b9c:	b096      	sub	sp, #88	; 0x58
 8011b9e:	da07      	bge.n	8011bb0 <__swhatbuf_r+0x22>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	602b      	str	r3, [r5, #0]
 8011ba4:	89b3      	ldrh	r3, [r6, #12]
 8011ba6:	061a      	lsls	r2, r3, #24
 8011ba8:	d410      	bmi.n	8011bcc <__swhatbuf_r+0x3e>
 8011baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011bae:	e00e      	b.n	8011bce <__swhatbuf_r+0x40>
 8011bb0:	466a      	mov	r2, sp
 8011bb2:	f001 f805 	bl	8012bc0 <_fstat_r>
 8011bb6:	2800      	cmp	r0, #0
 8011bb8:	dbf2      	blt.n	8011ba0 <__swhatbuf_r+0x12>
 8011bba:	9a01      	ldr	r2, [sp, #4]
 8011bbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011bc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011bc4:	425a      	negs	r2, r3
 8011bc6:	415a      	adcs	r2, r3
 8011bc8:	602a      	str	r2, [r5, #0]
 8011bca:	e7ee      	b.n	8011baa <__swhatbuf_r+0x1c>
 8011bcc:	2340      	movs	r3, #64	; 0x40
 8011bce:	2000      	movs	r0, #0
 8011bd0:	6023      	str	r3, [r4, #0]
 8011bd2:	b016      	add	sp, #88	; 0x58
 8011bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011bd8 <__smakebuf_r>:
 8011bd8:	898b      	ldrh	r3, [r1, #12]
 8011bda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bdc:	079d      	lsls	r5, r3, #30
 8011bde:	4606      	mov	r6, r0
 8011be0:	460c      	mov	r4, r1
 8011be2:	d507      	bpl.n	8011bf4 <__smakebuf_r+0x1c>
 8011be4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	6123      	str	r3, [r4, #16]
 8011bec:	2301      	movs	r3, #1
 8011bee:	6163      	str	r3, [r4, #20]
 8011bf0:	b002      	add	sp, #8
 8011bf2:	bd70      	pop	{r4, r5, r6, pc}
 8011bf4:	466a      	mov	r2, sp
 8011bf6:	ab01      	add	r3, sp, #4
 8011bf8:	f7ff ffc9 	bl	8011b8e <__swhatbuf_r>
 8011bfc:	9900      	ldr	r1, [sp, #0]
 8011bfe:	4605      	mov	r5, r0
 8011c00:	4630      	mov	r0, r6
 8011c02:	f000 fd63 	bl	80126cc <_malloc_r>
 8011c06:	b948      	cbnz	r0, 8011c1c <__smakebuf_r+0x44>
 8011c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c0c:	059a      	lsls	r2, r3, #22
 8011c0e:	d4ef      	bmi.n	8011bf0 <__smakebuf_r+0x18>
 8011c10:	f023 0303 	bic.w	r3, r3, #3
 8011c14:	f043 0302 	orr.w	r3, r3, #2
 8011c18:	81a3      	strh	r3, [r4, #12]
 8011c1a:	e7e3      	b.n	8011be4 <__smakebuf_r+0xc>
 8011c1c:	4b0d      	ldr	r3, [pc, #52]	; (8011c54 <__smakebuf_r+0x7c>)
 8011c1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c20:	89a3      	ldrh	r3, [r4, #12]
 8011c22:	6020      	str	r0, [r4, #0]
 8011c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c28:	81a3      	strh	r3, [r4, #12]
 8011c2a:	9b00      	ldr	r3, [sp, #0]
 8011c2c:	6120      	str	r0, [r4, #16]
 8011c2e:	6163      	str	r3, [r4, #20]
 8011c30:	9b01      	ldr	r3, [sp, #4]
 8011c32:	b15b      	cbz	r3, 8011c4c <__smakebuf_r+0x74>
 8011c34:	4630      	mov	r0, r6
 8011c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c3a:	f000 ffd3 	bl	8012be4 <_isatty_r>
 8011c3e:	b128      	cbz	r0, 8011c4c <__smakebuf_r+0x74>
 8011c40:	89a3      	ldrh	r3, [r4, #12]
 8011c42:	f023 0303 	bic.w	r3, r3, #3
 8011c46:	f043 0301 	orr.w	r3, r3, #1
 8011c4a:	81a3      	strh	r3, [r4, #12]
 8011c4c:	89a0      	ldrh	r0, [r4, #12]
 8011c4e:	4305      	orrs	r5, r0
 8011c50:	81a5      	strh	r5, [r4, #12]
 8011c52:	e7cd      	b.n	8011bf0 <__smakebuf_r+0x18>
 8011c54:	08011311 	.word	0x08011311

08011c58 <malloc>:
 8011c58:	4b02      	ldr	r3, [pc, #8]	; (8011c64 <malloc+0xc>)
 8011c5a:	4601      	mov	r1, r0
 8011c5c:	6818      	ldr	r0, [r3, #0]
 8011c5e:	f000 bd35 	b.w	80126cc <_malloc_r>
 8011c62:	bf00      	nop
 8011c64:	2000007c 	.word	0x2000007c

08011c68 <__ascii_mbtowc>:
 8011c68:	b082      	sub	sp, #8
 8011c6a:	b901      	cbnz	r1, 8011c6e <__ascii_mbtowc+0x6>
 8011c6c:	a901      	add	r1, sp, #4
 8011c6e:	b142      	cbz	r2, 8011c82 <__ascii_mbtowc+0x1a>
 8011c70:	b14b      	cbz	r3, 8011c86 <__ascii_mbtowc+0x1e>
 8011c72:	7813      	ldrb	r3, [r2, #0]
 8011c74:	600b      	str	r3, [r1, #0]
 8011c76:	7812      	ldrb	r2, [r2, #0]
 8011c78:	1e10      	subs	r0, r2, #0
 8011c7a:	bf18      	it	ne
 8011c7c:	2001      	movne	r0, #1
 8011c7e:	b002      	add	sp, #8
 8011c80:	4770      	bx	lr
 8011c82:	4610      	mov	r0, r2
 8011c84:	e7fb      	b.n	8011c7e <__ascii_mbtowc+0x16>
 8011c86:	f06f 0001 	mvn.w	r0, #1
 8011c8a:	e7f8      	b.n	8011c7e <__ascii_mbtowc+0x16>

08011c8c <memchr>:
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	b510      	push	{r4, lr}
 8011c90:	b2c9      	uxtb	r1, r1
 8011c92:	4402      	add	r2, r0
 8011c94:	4293      	cmp	r3, r2
 8011c96:	4618      	mov	r0, r3
 8011c98:	d101      	bne.n	8011c9e <memchr+0x12>
 8011c9a:	2000      	movs	r0, #0
 8011c9c:	e003      	b.n	8011ca6 <memchr+0x1a>
 8011c9e:	7804      	ldrb	r4, [r0, #0]
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	428c      	cmp	r4, r1
 8011ca4:	d1f6      	bne.n	8011c94 <memchr+0x8>
 8011ca6:	bd10      	pop	{r4, pc}

08011ca8 <_Balloc>:
 8011ca8:	b570      	push	{r4, r5, r6, lr}
 8011caa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011cac:	4604      	mov	r4, r0
 8011cae:	460d      	mov	r5, r1
 8011cb0:	b976      	cbnz	r6, 8011cd0 <_Balloc+0x28>
 8011cb2:	2010      	movs	r0, #16
 8011cb4:	f7ff ffd0 	bl	8011c58 <malloc>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	6260      	str	r0, [r4, #36]	; 0x24
 8011cbc:	b920      	cbnz	r0, 8011cc8 <_Balloc+0x20>
 8011cbe:	2166      	movs	r1, #102	; 0x66
 8011cc0:	4b17      	ldr	r3, [pc, #92]	; (8011d20 <_Balloc+0x78>)
 8011cc2:	4818      	ldr	r0, [pc, #96]	; (8011d24 <_Balloc+0x7c>)
 8011cc4:	f000 ff3c 	bl	8012b40 <__assert_func>
 8011cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ccc:	6006      	str	r6, [r0, #0]
 8011cce:	60c6      	str	r6, [r0, #12]
 8011cd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011cd2:	68f3      	ldr	r3, [r6, #12]
 8011cd4:	b183      	cbz	r3, 8011cf8 <_Balloc+0x50>
 8011cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cd8:	68db      	ldr	r3, [r3, #12]
 8011cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cde:	b9b8      	cbnz	r0, 8011d10 <_Balloc+0x68>
 8011ce0:	2101      	movs	r1, #1
 8011ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8011ce6:	1d72      	adds	r2, r6, #5
 8011ce8:	4620      	mov	r0, r4
 8011cea:	0092      	lsls	r2, r2, #2
 8011cec:	f000 fc94 	bl	8012618 <_calloc_r>
 8011cf0:	b160      	cbz	r0, 8011d0c <_Balloc+0x64>
 8011cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cf6:	e00e      	b.n	8011d16 <_Balloc+0x6e>
 8011cf8:	2221      	movs	r2, #33	; 0x21
 8011cfa:	2104      	movs	r1, #4
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f000 fc8b 	bl	8012618 <_calloc_r>
 8011d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d04:	60f0      	str	r0, [r6, #12]
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d1e4      	bne.n	8011cd6 <_Balloc+0x2e>
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	bd70      	pop	{r4, r5, r6, pc}
 8011d10:	6802      	ldr	r2, [r0, #0]
 8011d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d16:	2300      	movs	r3, #0
 8011d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011d1c:	e7f7      	b.n	8011d0e <_Balloc+0x66>
 8011d1e:	bf00      	nop
 8011d20:	08013f42 	.word	0x08013f42
 8011d24:	080140ac 	.word	0x080140ac

08011d28 <_Bfree>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d2c:	4605      	mov	r5, r0
 8011d2e:	460c      	mov	r4, r1
 8011d30:	b976      	cbnz	r6, 8011d50 <_Bfree+0x28>
 8011d32:	2010      	movs	r0, #16
 8011d34:	f7ff ff90 	bl	8011c58 <malloc>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	6268      	str	r0, [r5, #36]	; 0x24
 8011d3c:	b920      	cbnz	r0, 8011d48 <_Bfree+0x20>
 8011d3e:	218a      	movs	r1, #138	; 0x8a
 8011d40:	4b08      	ldr	r3, [pc, #32]	; (8011d64 <_Bfree+0x3c>)
 8011d42:	4809      	ldr	r0, [pc, #36]	; (8011d68 <_Bfree+0x40>)
 8011d44:	f000 fefc 	bl	8012b40 <__assert_func>
 8011d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d4c:	6006      	str	r6, [r0, #0]
 8011d4e:	60c6      	str	r6, [r0, #12]
 8011d50:	b13c      	cbz	r4, 8011d62 <_Bfree+0x3a>
 8011d52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d54:	6862      	ldr	r2, [r4, #4]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d5c:	6021      	str	r1, [r4, #0]
 8011d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d62:	bd70      	pop	{r4, r5, r6, pc}
 8011d64:	08013f42 	.word	0x08013f42
 8011d68:	080140ac 	.word	0x080140ac

08011d6c <__multadd>:
 8011d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d70:	4698      	mov	r8, r3
 8011d72:	460c      	mov	r4, r1
 8011d74:	2300      	movs	r3, #0
 8011d76:	690e      	ldr	r6, [r1, #16]
 8011d78:	4607      	mov	r7, r0
 8011d7a:	f101 0014 	add.w	r0, r1, #20
 8011d7e:	6805      	ldr	r5, [r0, #0]
 8011d80:	3301      	adds	r3, #1
 8011d82:	b2a9      	uxth	r1, r5
 8011d84:	fb02 8101 	mla	r1, r2, r1, r8
 8011d88:	0c2d      	lsrs	r5, r5, #16
 8011d8a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011d8e:	fb02 c505 	mla	r5, r2, r5, ip
 8011d92:	b289      	uxth	r1, r1
 8011d94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011d98:	429e      	cmp	r6, r3
 8011d9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011d9e:	f840 1b04 	str.w	r1, [r0], #4
 8011da2:	dcec      	bgt.n	8011d7e <__multadd+0x12>
 8011da4:	f1b8 0f00 	cmp.w	r8, #0
 8011da8:	d022      	beq.n	8011df0 <__multadd+0x84>
 8011daa:	68a3      	ldr	r3, [r4, #8]
 8011dac:	42b3      	cmp	r3, r6
 8011dae:	dc19      	bgt.n	8011de4 <__multadd+0x78>
 8011db0:	6861      	ldr	r1, [r4, #4]
 8011db2:	4638      	mov	r0, r7
 8011db4:	3101      	adds	r1, #1
 8011db6:	f7ff ff77 	bl	8011ca8 <_Balloc>
 8011dba:	4605      	mov	r5, r0
 8011dbc:	b928      	cbnz	r0, 8011dca <__multadd+0x5e>
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	21b5      	movs	r1, #181	; 0xb5
 8011dc2:	4b0d      	ldr	r3, [pc, #52]	; (8011df8 <__multadd+0x8c>)
 8011dc4:	480d      	ldr	r0, [pc, #52]	; (8011dfc <__multadd+0x90>)
 8011dc6:	f000 febb 	bl	8012b40 <__assert_func>
 8011dca:	6922      	ldr	r2, [r4, #16]
 8011dcc:	f104 010c 	add.w	r1, r4, #12
 8011dd0:	3202      	adds	r2, #2
 8011dd2:	0092      	lsls	r2, r2, #2
 8011dd4:	300c      	adds	r0, #12
 8011dd6:	f7fc fc6f 	bl	800e6b8 <memcpy>
 8011dda:	4621      	mov	r1, r4
 8011ddc:	4638      	mov	r0, r7
 8011dde:	f7ff ffa3 	bl	8011d28 <_Bfree>
 8011de2:	462c      	mov	r4, r5
 8011de4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011de8:	3601      	adds	r6, #1
 8011dea:	f8c3 8014 	str.w	r8, [r3, #20]
 8011dee:	6126      	str	r6, [r4, #16]
 8011df0:	4620      	mov	r0, r4
 8011df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df6:	bf00      	nop
 8011df8:	08013fb8 	.word	0x08013fb8
 8011dfc:	080140ac 	.word	0x080140ac

08011e00 <__s2b>:
 8011e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e04:	4615      	mov	r5, r2
 8011e06:	2209      	movs	r2, #9
 8011e08:	461f      	mov	r7, r3
 8011e0a:	3308      	adds	r3, #8
 8011e0c:	460c      	mov	r4, r1
 8011e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e12:	4606      	mov	r6, r0
 8011e14:	2201      	movs	r2, #1
 8011e16:	2100      	movs	r1, #0
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	db09      	blt.n	8011e30 <__s2b+0x30>
 8011e1c:	4630      	mov	r0, r6
 8011e1e:	f7ff ff43 	bl	8011ca8 <_Balloc>
 8011e22:	b940      	cbnz	r0, 8011e36 <__s2b+0x36>
 8011e24:	4602      	mov	r2, r0
 8011e26:	21ce      	movs	r1, #206	; 0xce
 8011e28:	4b18      	ldr	r3, [pc, #96]	; (8011e8c <__s2b+0x8c>)
 8011e2a:	4819      	ldr	r0, [pc, #100]	; (8011e90 <__s2b+0x90>)
 8011e2c:	f000 fe88 	bl	8012b40 <__assert_func>
 8011e30:	0052      	lsls	r2, r2, #1
 8011e32:	3101      	adds	r1, #1
 8011e34:	e7f0      	b.n	8011e18 <__s2b+0x18>
 8011e36:	9b08      	ldr	r3, [sp, #32]
 8011e38:	2d09      	cmp	r5, #9
 8011e3a:	6143      	str	r3, [r0, #20]
 8011e3c:	f04f 0301 	mov.w	r3, #1
 8011e40:	6103      	str	r3, [r0, #16]
 8011e42:	dd16      	ble.n	8011e72 <__s2b+0x72>
 8011e44:	f104 0909 	add.w	r9, r4, #9
 8011e48:	46c8      	mov	r8, r9
 8011e4a:	442c      	add	r4, r5
 8011e4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011e50:	4601      	mov	r1, r0
 8011e52:	220a      	movs	r2, #10
 8011e54:	4630      	mov	r0, r6
 8011e56:	3b30      	subs	r3, #48	; 0x30
 8011e58:	f7ff ff88 	bl	8011d6c <__multadd>
 8011e5c:	45a0      	cmp	r8, r4
 8011e5e:	d1f5      	bne.n	8011e4c <__s2b+0x4c>
 8011e60:	f1a5 0408 	sub.w	r4, r5, #8
 8011e64:	444c      	add	r4, r9
 8011e66:	1b2d      	subs	r5, r5, r4
 8011e68:	1963      	adds	r3, r4, r5
 8011e6a:	42bb      	cmp	r3, r7
 8011e6c:	db04      	blt.n	8011e78 <__s2b+0x78>
 8011e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e72:	2509      	movs	r5, #9
 8011e74:	340a      	adds	r4, #10
 8011e76:	e7f6      	b.n	8011e66 <__s2b+0x66>
 8011e78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e7c:	4601      	mov	r1, r0
 8011e7e:	220a      	movs	r2, #10
 8011e80:	4630      	mov	r0, r6
 8011e82:	3b30      	subs	r3, #48	; 0x30
 8011e84:	f7ff ff72 	bl	8011d6c <__multadd>
 8011e88:	e7ee      	b.n	8011e68 <__s2b+0x68>
 8011e8a:	bf00      	nop
 8011e8c:	08013fb8 	.word	0x08013fb8
 8011e90:	080140ac 	.word	0x080140ac

08011e94 <__hi0bits>:
 8011e94:	0c02      	lsrs	r2, r0, #16
 8011e96:	0412      	lsls	r2, r2, #16
 8011e98:	4603      	mov	r3, r0
 8011e9a:	b9ca      	cbnz	r2, 8011ed0 <__hi0bits+0x3c>
 8011e9c:	0403      	lsls	r3, r0, #16
 8011e9e:	2010      	movs	r0, #16
 8011ea0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011ea4:	bf04      	itt	eq
 8011ea6:	021b      	lsleq	r3, r3, #8
 8011ea8:	3008      	addeq	r0, #8
 8011eaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011eae:	bf04      	itt	eq
 8011eb0:	011b      	lsleq	r3, r3, #4
 8011eb2:	3004      	addeq	r0, #4
 8011eb4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011eb8:	bf04      	itt	eq
 8011eba:	009b      	lsleq	r3, r3, #2
 8011ebc:	3002      	addeq	r0, #2
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	db05      	blt.n	8011ece <__hi0bits+0x3a>
 8011ec2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011ec6:	f100 0001 	add.w	r0, r0, #1
 8011eca:	bf08      	it	eq
 8011ecc:	2020      	moveq	r0, #32
 8011ece:	4770      	bx	lr
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	e7e5      	b.n	8011ea0 <__hi0bits+0xc>

08011ed4 <__lo0bits>:
 8011ed4:	6803      	ldr	r3, [r0, #0]
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	f013 0007 	ands.w	r0, r3, #7
 8011edc:	d00b      	beq.n	8011ef6 <__lo0bits+0x22>
 8011ede:	07d9      	lsls	r1, r3, #31
 8011ee0:	d422      	bmi.n	8011f28 <__lo0bits+0x54>
 8011ee2:	0798      	lsls	r0, r3, #30
 8011ee4:	bf49      	itett	mi
 8011ee6:	085b      	lsrmi	r3, r3, #1
 8011ee8:	089b      	lsrpl	r3, r3, #2
 8011eea:	2001      	movmi	r0, #1
 8011eec:	6013      	strmi	r3, [r2, #0]
 8011eee:	bf5c      	itt	pl
 8011ef0:	2002      	movpl	r0, #2
 8011ef2:	6013      	strpl	r3, [r2, #0]
 8011ef4:	4770      	bx	lr
 8011ef6:	b299      	uxth	r1, r3
 8011ef8:	b909      	cbnz	r1, 8011efe <__lo0bits+0x2a>
 8011efa:	2010      	movs	r0, #16
 8011efc:	0c1b      	lsrs	r3, r3, #16
 8011efe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011f02:	bf04      	itt	eq
 8011f04:	0a1b      	lsreq	r3, r3, #8
 8011f06:	3008      	addeq	r0, #8
 8011f08:	0719      	lsls	r1, r3, #28
 8011f0a:	bf04      	itt	eq
 8011f0c:	091b      	lsreq	r3, r3, #4
 8011f0e:	3004      	addeq	r0, #4
 8011f10:	0799      	lsls	r1, r3, #30
 8011f12:	bf04      	itt	eq
 8011f14:	089b      	lsreq	r3, r3, #2
 8011f16:	3002      	addeq	r0, #2
 8011f18:	07d9      	lsls	r1, r3, #31
 8011f1a:	d403      	bmi.n	8011f24 <__lo0bits+0x50>
 8011f1c:	085b      	lsrs	r3, r3, #1
 8011f1e:	f100 0001 	add.w	r0, r0, #1
 8011f22:	d003      	beq.n	8011f2c <__lo0bits+0x58>
 8011f24:	6013      	str	r3, [r2, #0]
 8011f26:	4770      	bx	lr
 8011f28:	2000      	movs	r0, #0
 8011f2a:	4770      	bx	lr
 8011f2c:	2020      	movs	r0, #32
 8011f2e:	4770      	bx	lr

08011f30 <__i2b>:
 8011f30:	b510      	push	{r4, lr}
 8011f32:	460c      	mov	r4, r1
 8011f34:	2101      	movs	r1, #1
 8011f36:	f7ff feb7 	bl	8011ca8 <_Balloc>
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	b928      	cbnz	r0, 8011f4a <__i2b+0x1a>
 8011f3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011f42:	4b04      	ldr	r3, [pc, #16]	; (8011f54 <__i2b+0x24>)
 8011f44:	4804      	ldr	r0, [pc, #16]	; (8011f58 <__i2b+0x28>)
 8011f46:	f000 fdfb 	bl	8012b40 <__assert_func>
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	6144      	str	r4, [r0, #20]
 8011f4e:	6103      	str	r3, [r0, #16]
 8011f50:	bd10      	pop	{r4, pc}
 8011f52:	bf00      	nop
 8011f54:	08013fb8 	.word	0x08013fb8
 8011f58:	080140ac 	.word	0x080140ac

08011f5c <__multiply>:
 8011f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f60:	4614      	mov	r4, r2
 8011f62:	690a      	ldr	r2, [r1, #16]
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	460d      	mov	r5, r1
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	bfbe      	ittt	lt
 8011f6c:	460b      	movlt	r3, r1
 8011f6e:	4625      	movlt	r5, r4
 8011f70:	461c      	movlt	r4, r3
 8011f72:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011f76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011f7a:	68ab      	ldr	r3, [r5, #8]
 8011f7c:	6869      	ldr	r1, [r5, #4]
 8011f7e:	eb0a 0709 	add.w	r7, sl, r9
 8011f82:	42bb      	cmp	r3, r7
 8011f84:	b085      	sub	sp, #20
 8011f86:	bfb8      	it	lt
 8011f88:	3101      	addlt	r1, #1
 8011f8a:	f7ff fe8d 	bl	8011ca8 <_Balloc>
 8011f8e:	b930      	cbnz	r0, 8011f9e <__multiply+0x42>
 8011f90:	4602      	mov	r2, r0
 8011f92:	f240 115d 	movw	r1, #349	; 0x15d
 8011f96:	4b41      	ldr	r3, [pc, #260]	; (801209c <__multiply+0x140>)
 8011f98:	4841      	ldr	r0, [pc, #260]	; (80120a0 <__multiply+0x144>)
 8011f9a:	f000 fdd1 	bl	8012b40 <__assert_func>
 8011f9e:	f100 0614 	add.w	r6, r0, #20
 8011fa2:	4633      	mov	r3, r6
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011faa:	4543      	cmp	r3, r8
 8011fac:	d31e      	bcc.n	8011fec <__multiply+0x90>
 8011fae:	f105 0c14 	add.w	ip, r5, #20
 8011fb2:	f104 0314 	add.w	r3, r4, #20
 8011fb6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011fba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011fbe:	9202      	str	r2, [sp, #8]
 8011fc0:	ebac 0205 	sub.w	r2, ip, r5
 8011fc4:	3a15      	subs	r2, #21
 8011fc6:	f022 0203 	bic.w	r2, r2, #3
 8011fca:	3204      	adds	r2, #4
 8011fcc:	f105 0115 	add.w	r1, r5, #21
 8011fd0:	458c      	cmp	ip, r1
 8011fd2:	bf38      	it	cc
 8011fd4:	2204      	movcc	r2, #4
 8011fd6:	9201      	str	r2, [sp, #4]
 8011fd8:	9a02      	ldr	r2, [sp, #8]
 8011fda:	9303      	str	r3, [sp, #12]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d808      	bhi.n	8011ff2 <__multiply+0x96>
 8011fe0:	2f00      	cmp	r7, #0
 8011fe2:	dc55      	bgt.n	8012090 <__multiply+0x134>
 8011fe4:	6107      	str	r7, [r0, #16]
 8011fe6:	b005      	add	sp, #20
 8011fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fec:	f843 2b04 	str.w	r2, [r3], #4
 8011ff0:	e7db      	b.n	8011faa <__multiply+0x4e>
 8011ff2:	f8b3 a000 	ldrh.w	sl, [r3]
 8011ff6:	f1ba 0f00 	cmp.w	sl, #0
 8011ffa:	d020      	beq.n	801203e <__multiply+0xe2>
 8011ffc:	46b1      	mov	r9, r6
 8011ffe:	2200      	movs	r2, #0
 8012000:	f105 0e14 	add.w	lr, r5, #20
 8012004:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012008:	f8d9 b000 	ldr.w	fp, [r9]
 801200c:	b2a1      	uxth	r1, r4
 801200e:	fa1f fb8b 	uxth.w	fp, fp
 8012012:	fb0a b101 	mla	r1, sl, r1, fp
 8012016:	4411      	add	r1, r2
 8012018:	f8d9 2000 	ldr.w	r2, [r9]
 801201c:	0c24      	lsrs	r4, r4, #16
 801201e:	0c12      	lsrs	r2, r2, #16
 8012020:	fb0a 2404 	mla	r4, sl, r4, r2
 8012024:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012028:	b289      	uxth	r1, r1
 801202a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801202e:	45f4      	cmp	ip, lr
 8012030:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012034:	f849 1b04 	str.w	r1, [r9], #4
 8012038:	d8e4      	bhi.n	8012004 <__multiply+0xa8>
 801203a:	9901      	ldr	r1, [sp, #4]
 801203c:	5072      	str	r2, [r6, r1]
 801203e:	9a03      	ldr	r2, [sp, #12]
 8012040:	3304      	adds	r3, #4
 8012042:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012046:	f1b9 0f00 	cmp.w	r9, #0
 801204a:	d01f      	beq.n	801208c <__multiply+0x130>
 801204c:	46b6      	mov	lr, r6
 801204e:	f04f 0a00 	mov.w	sl, #0
 8012052:	6834      	ldr	r4, [r6, #0]
 8012054:	f105 0114 	add.w	r1, r5, #20
 8012058:	880a      	ldrh	r2, [r1, #0]
 801205a:	f8be b002 	ldrh.w	fp, [lr, #2]
 801205e:	b2a4      	uxth	r4, r4
 8012060:	fb09 b202 	mla	r2, r9, r2, fp
 8012064:	4492      	add	sl, r2
 8012066:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801206a:	f84e 4b04 	str.w	r4, [lr], #4
 801206e:	f851 4b04 	ldr.w	r4, [r1], #4
 8012072:	f8be 2000 	ldrh.w	r2, [lr]
 8012076:	0c24      	lsrs	r4, r4, #16
 8012078:	fb09 2404 	mla	r4, r9, r4, r2
 801207c:	458c      	cmp	ip, r1
 801207e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012082:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012086:	d8e7      	bhi.n	8012058 <__multiply+0xfc>
 8012088:	9a01      	ldr	r2, [sp, #4]
 801208a:	50b4      	str	r4, [r6, r2]
 801208c:	3604      	adds	r6, #4
 801208e:	e7a3      	b.n	8011fd8 <__multiply+0x7c>
 8012090:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012094:	2b00      	cmp	r3, #0
 8012096:	d1a5      	bne.n	8011fe4 <__multiply+0x88>
 8012098:	3f01      	subs	r7, #1
 801209a:	e7a1      	b.n	8011fe0 <__multiply+0x84>
 801209c:	08013fb8 	.word	0x08013fb8
 80120a0:	080140ac 	.word	0x080140ac

080120a4 <__pow5mult>:
 80120a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120a8:	4615      	mov	r5, r2
 80120aa:	f012 0203 	ands.w	r2, r2, #3
 80120ae:	4606      	mov	r6, r0
 80120b0:	460f      	mov	r7, r1
 80120b2:	d007      	beq.n	80120c4 <__pow5mult+0x20>
 80120b4:	4c25      	ldr	r4, [pc, #148]	; (801214c <__pow5mult+0xa8>)
 80120b6:	3a01      	subs	r2, #1
 80120b8:	2300      	movs	r3, #0
 80120ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120be:	f7ff fe55 	bl	8011d6c <__multadd>
 80120c2:	4607      	mov	r7, r0
 80120c4:	10ad      	asrs	r5, r5, #2
 80120c6:	d03d      	beq.n	8012144 <__pow5mult+0xa0>
 80120c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120ca:	b97c      	cbnz	r4, 80120ec <__pow5mult+0x48>
 80120cc:	2010      	movs	r0, #16
 80120ce:	f7ff fdc3 	bl	8011c58 <malloc>
 80120d2:	4602      	mov	r2, r0
 80120d4:	6270      	str	r0, [r6, #36]	; 0x24
 80120d6:	b928      	cbnz	r0, 80120e4 <__pow5mult+0x40>
 80120d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80120dc:	4b1c      	ldr	r3, [pc, #112]	; (8012150 <__pow5mult+0xac>)
 80120de:	481d      	ldr	r0, [pc, #116]	; (8012154 <__pow5mult+0xb0>)
 80120e0:	f000 fd2e 	bl	8012b40 <__assert_func>
 80120e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80120e8:	6004      	str	r4, [r0, #0]
 80120ea:	60c4      	str	r4, [r0, #12]
 80120ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80120f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80120f4:	b94c      	cbnz	r4, 801210a <__pow5mult+0x66>
 80120f6:	f240 2171 	movw	r1, #625	; 0x271
 80120fa:	4630      	mov	r0, r6
 80120fc:	f7ff ff18 	bl	8011f30 <__i2b>
 8012100:	2300      	movs	r3, #0
 8012102:	4604      	mov	r4, r0
 8012104:	f8c8 0008 	str.w	r0, [r8, #8]
 8012108:	6003      	str	r3, [r0, #0]
 801210a:	f04f 0900 	mov.w	r9, #0
 801210e:	07eb      	lsls	r3, r5, #31
 8012110:	d50a      	bpl.n	8012128 <__pow5mult+0x84>
 8012112:	4639      	mov	r1, r7
 8012114:	4622      	mov	r2, r4
 8012116:	4630      	mov	r0, r6
 8012118:	f7ff ff20 	bl	8011f5c <__multiply>
 801211c:	4680      	mov	r8, r0
 801211e:	4639      	mov	r1, r7
 8012120:	4630      	mov	r0, r6
 8012122:	f7ff fe01 	bl	8011d28 <_Bfree>
 8012126:	4647      	mov	r7, r8
 8012128:	106d      	asrs	r5, r5, #1
 801212a:	d00b      	beq.n	8012144 <__pow5mult+0xa0>
 801212c:	6820      	ldr	r0, [r4, #0]
 801212e:	b938      	cbnz	r0, 8012140 <__pow5mult+0x9c>
 8012130:	4622      	mov	r2, r4
 8012132:	4621      	mov	r1, r4
 8012134:	4630      	mov	r0, r6
 8012136:	f7ff ff11 	bl	8011f5c <__multiply>
 801213a:	6020      	str	r0, [r4, #0]
 801213c:	f8c0 9000 	str.w	r9, [r0]
 8012140:	4604      	mov	r4, r0
 8012142:	e7e4      	b.n	801210e <__pow5mult+0x6a>
 8012144:	4638      	mov	r0, r7
 8012146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801214a:	bf00      	nop
 801214c:	08014200 	.word	0x08014200
 8012150:	08013f42 	.word	0x08013f42
 8012154:	080140ac 	.word	0x080140ac

08012158 <__lshift>:
 8012158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801215c:	460c      	mov	r4, r1
 801215e:	4607      	mov	r7, r0
 8012160:	4691      	mov	r9, r2
 8012162:	6923      	ldr	r3, [r4, #16]
 8012164:	6849      	ldr	r1, [r1, #4]
 8012166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801216a:	68a3      	ldr	r3, [r4, #8]
 801216c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012170:	f108 0601 	add.w	r6, r8, #1
 8012174:	42b3      	cmp	r3, r6
 8012176:	db0b      	blt.n	8012190 <__lshift+0x38>
 8012178:	4638      	mov	r0, r7
 801217a:	f7ff fd95 	bl	8011ca8 <_Balloc>
 801217e:	4605      	mov	r5, r0
 8012180:	b948      	cbnz	r0, 8012196 <__lshift+0x3e>
 8012182:	4602      	mov	r2, r0
 8012184:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012188:	4b27      	ldr	r3, [pc, #156]	; (8012228 <__lshift+0xd0>)
 801218a:	4828      	ldr	r0, [pc, #160]	; (801222c <__lshift+0xd4>)
 801218c:	f000 fcd8 	bl	8012b40 <__assert_func>
 8012190:	3101      	adds	r1, #1
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	e7ee      	b.n	8012174 <__lshift+0x1c>
 8012196:	2300      	movs	r3, #0
 8012198:	f100 0114 	add.w	r1, r0, #20
 801219c:	f100 0210 	add.w	r2, r0, #16
 80121a0:	4618      	mov	r0, r3
 80121a2:	4553      	cmp	r3, sl
 80121a4:	db33      	blt.n	801220e <__lshift+0xb6>
 80121a6:	6920      	ldr	r0, [r4, #16]
 80121a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121ac:	f104 0314 	add.w	r3, r4, #20
 80121b0:	f019 091f 	ands.w	r9, r9, #31
 80121b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80121b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80121bc:	d02b      	beq.n	8012216 <__lshift+0xbe>
 80121be:	468a      	mov	sl, r1
 80121c0:	2200      	movs	r2, #0
 80121c2:	f1c9 0e20 	rsb	lr, r9, #32
 80121c6:	6818      	ldr	r0, [r3, #0]
 80121c8:	fa00 f009 	lsl.w	r0, r0, r9
 80121cc:	4302      	orrs	r2, r0
 80121ce:	f84a 2b04 	str.w	r2, [sl], #4
 80121d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80121d6:	459c      	cmp	ip, r3
 80121d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80121dc:	d8f3      	bhi.n	80121c6 <__lshift+0x6e>
 80121de:	ebac 0304 	sub.w	r3, ip, r4
 80121e2:	3b15      	subs	r3, #21
 80121e4:	f023 0303 	bic.w	r3, r3, #3
 80121e8:	3304      	adds	r3, #4
 80121ea:	f104 0015 	add.w	r0, r4, #21
 80121ee:	4584      	cmp	ip, r0
 80121f0:	bf38      	it	cc
 80121f2:	2304      	movcc	r3, #4
 80121f4:	50ca      	str	r2, [r1, r3]
 80121f6:	b10a      	cbz	r2, 80121fc <__lshift+0xa4>
 80121f8:	f108 0602 	add.w	r6, r8, #2
 80121fc:	3e01      	subs	r6, #1
 80121fe:	4638      	mov	r0, r7
 8012200:	4621      	mov	r1, r4
 8012202:	612e      	str	r6, [r5, #16]
 8012204:	f7ff fd90 	bl	8011d28 <_Bfree>
 8012208:	4628      	mov	r0, r5
 801220a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801220e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012212:	3301      	adds	r3, #1
 8012214:	e7c5      	b.n	80121a2 <__lshift+0x4a>
 8012216:	3904      	subs	r1, #4
 8012218:	f853 2b04 	ldr.w	r2, [r3], #4
 801221c:	459c      	cmp	ip, r3
 801221e:	f841 2f04 	str.w	r2, [r1, #4]!
 8012222:	d8f9      	bhi.n	8012218 <__lshift+0xc0>
 8012224:	e7ea      	b.n	80121fc <__lshift+0xa4>
 8012226:	bf00      	nop
 8012228:	08013fb8 	.word	0x08013fb8
 801222c:	080140ac 	.word	0x080140ac

08012230 <__mcmp>:
 8012230:	4603      	mov	r3, r0
 8012232:	690a      	ldr	r2, [r1, #16]
 8012234:	6900      	ldr	r0, [r0, #16]
 8012236:	b530      	push	{r4, r5, lr}
 8012238:	1a80      	subs	r0, r0, r2
 801223a:	d10d      	bne.n	8012258 <__mcmp+0x28>
 801223c:	3314      	adds	r3, #20
 801223e:	3114      	adds	r1, #20
 8012240:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012244:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012248:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801224c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012250:	4295      	cmp	r5, r2
 8012252:	d002      	beq.n	801225a <__mcmp+0x2a>
 8012254:	d304      	bcc.n	8012260 <__mcmp+0x30>
 8012256:	2001      	movs	r0, #1
 8012258:	bd30      	pop	{r4, r5, pc}
 801225a:	42a3      	cmp	r3, r4
 801225c:	d3f4      	bcc.n	8012248 <__mcmp+0x18>
 801225e:	e7fb      	b.n	8012258 <__mcmp+0x28>
 8012260:	f04f 30ff 	mov.w	r0, #4294967295
 8012264:	e7f8      	b.n	8012258 <__mcmp+0x28>
	...

08012268 <__mdiff>:
 8012268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801226c:	460c      	mov	r4, r1
 801226e:	4606      	mov	r6, r0
 8012270:	4611      	mov	r1, r2
 8012272:	4620      	mov	r0, r4
 8012274:	4692      	mov	sl, r2
 8012276:	f7ff ffdb 	bl	8012230 <__mcmp>
 801227a:	1e05      	subs	r5, r0, #0
 801227c:	d111      	bne.n	80122a2 <__mdiff+0x3a>
 801227e:	4629      	mov	r1, r5
 8012280:	4630      	mov	r0, r6
 8012282:	f7ff fd11 	bl	8011ca8 <_Balloc>
 8012286:	4602      	mov	r2, r0
 8012288:	b928      	cbnz	r0, 8012296 <__mdiff+0x2e>
 801228a:	f240 2132 	movw	r1, #562	; 0x232
 801228e:	4b3c      	ldr	r3, [pc, #240]	; (8012380 <__mdiff+0x118>)
 8012290:	483c      	ldr	r0, [pc, #240]	; (8012384 <__mdiff+0x11c>)
 8012292:	f000 fc55 	bl	8012b40 <__assert_func>
 8012296:	2301      	movs	r3, #1
 8012298:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801229c:	4610      	mov	r0, r2
 801229e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122a2:	bfa4      	itt	ge
 80122a4:	4653      	movge	r3, sl
 80122a6:	46a2      	movge	sl, r4
 80122a8:	4630      	mov	r0, r6
 80122aa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80122ae:	bfa6      	itte	ge
 80122b0:	461c      	movge	r4, r3
 80122b2:	2500      	movge	r5, #0
 80122b4:	2501      	movlt	r5, #1
 80122b6:	f7ff fcf7 	bl	8011ca8 <_Balloc>
 80122ba:	4602      	mov	r2, r0
 80122bc:	b918      	cbnz	r0, 80122c6 <__mdiff+0x5e>
 80122be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80122c2:	4b2f      	ldr	r3, [pc, #188]	; (8012380 <__mdiff+0x118>)
 80122c4:	e7e4      	b.n	8012290 <__mdiff+0x28>
 80122c6:	f100 0814 	add.w	r8, r0, #20
 80122ca:	f8da 7010 	ldr.w	r7, [sl, #16]
 80122ce:	60c5      	str	r5, [r0, #12]
 80122d0:	f04f 0c00 	mov.w	ip, #0
 80122d4:	f10a 0514 	add.w	r5, sl, #20
 80122d8:	f10a 0010 	add.w	r0, sl, #16
 80122dc:	46c2      	mov	sl, r8
 80122de:	6926      	ldr	r6, [r4, #16]
 80122e0:	f104 0914 	add.w	r9, r4, #20
 80122e4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80122e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80122ec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80122f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80122f4:	fa1f f18b 	uxth.w	r1, fp
 80122f8:	4461      	add	r1, ip
 80122fa:	fa1f fc83 	uxth.w	ip, r3
 80122fe:	0c1b      	lsrs	r3, r3, #16
 8012300:	eba1 010c 	sub.w	r1, r1, ip
 8012304:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012308:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801230c:	b289      	uxth	r1, r1
 801230e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8012312:	454e      	cmp	r6, r9
 8012314:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8012318:	f84a 3b04 	str.w	r3, [sl], #4
 801231c:	d8e6      	bhi.n	80122ec <__mdiff+0x84>
 801231e:	1b33      	subs	r3, r6, r4
 8012320:	3b15      	subs	r3, #21
 8012322:	f023 0303 	bic.w	r3, r3, #3
 8012326:	3415      	adds	r4, #21
 8012328:	3304      	adds	r3, #4
 801232a:	42a6      	cmp	r6, r4
 801232c:	bf38      	it	cc
 801232e:	2304      	movcc	r3, #4
 8012330:	441d      	add	r5, r3
 8012332:	4443      	add	r3, r8
 8012334:	461e      	mov	r6, r3
 8012336:	462c      	mov	r4, r5
 8012338:	4574      	cmp	r4, lr
 801233a:	d30e      	bcc.n	801235a <__mdiff+0xf2>
 801233c:	f10e 0103 	add.w	r1, lr, #3
 8012340:	1b49      	subs	r1, r1, r5
 8012342:	f021 0103 	bic.w	r1, r1, #3
 8012346:	3d03      	subs	r5, #3
 8012348:	45ae      	cmp	lr, r5
 801234a:	bf38      	it	cc
 801234c:	2100      	movcc	r1, #0
 801234e:	4419      	add	r1, r3
 8012350:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012354:	b18b      	cbz	r3, 801237a <__mdiff+0x112>
 8012356:	6117      	str	r7, [r2, #16]
 8012358:	e7a0      	b.n	801229c <__mdiff+0x34>
 801235a:	f854 8b04 	ldr.w	r8, [r4], #4
 801235e:	fa1f f188 	uxth.w	r1, r8
 8012362:	4461      	add	r1, ip
 8012364:	1408      	asrs	r0, r1, #16
 8012366:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 801236a:	b289      	uxth	r1, r1
 801236c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012374:	f846 1b04 	str.w	r1, [r6], #4
 8012378:	e7de      	b.n	8012338 <__mdiff+0xd0>
 801237a:	3f01      	subs	r7, #1
 801237c:	e7e8      	b.n	8012350 <__mdiff+0xe8>
 801237e:	bf00      	nop
 8012380:	08013fb8 	.word	0x08013fb8
 8012384:	080140ac 	.word	0x080140ac

08012388 <__ulp>:
 8012388:	4b11      	ldr	r3, [pc, #68]	; (80123d0 <__ulp+0x48>)
 801238a:	400b      	ands	r3, r1
 801238c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012390:	2b00      	cmp	r3, #0
 8012392:	dd02      	ble.n	801239a <__ulp+0x12>
 8012394:	2000      	movs	r0, #0
 8012396:	4619      	mov	r1, r3
 8012398:	4770      	bx	lr
 801239a:	425b      	negs	r3, r3
 801239c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80123a0:	f04f 0000 	mov.w	r0, #0
 80123a4:	f04f 0100 	mov.w	r1, #0
 80123a8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80123ac:	da04      	bge.n	80123b8 <__ulp+0x30>
 80123ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80123b2:	fa43 f102 	asr.w	r1, r3, r2
 80123b6:	4770      	bx	lr
 80123b8:	f1a2 0314 	sub.w	r3, r2, #20
 80123bc:	2b1e      	cmp	r3, #30
 80123be:	bfd6      	itet	le
 80123c0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80123c4:	2301      	movgt	r3, #1
 80123c6:	fa22 f303 	lsrle.w	r3, r2, r3
 80123ca:	4618      	mov	r0, r3
 80123cc:	4770      	bx	lr
 80123ce:	bf00      	nop
 80123d0:	7ff00000 	.word	0x7ff00000

080123d4 <__b2d>:
 80123d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123d8:	6907      	ldr	r7, [r0, #16]
 80123da:	f100 0914 	add.w	r9, r0, #20
 80123de:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80123e2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80123e6:	f1a7 0804 	sub.w	r8, r7, #4
 80123ea:	4630      	mov	r0, r6
 80123ec:	f7ff fd52 	bl	8011e94 <__hi0bits>
 80123f0:	f1c0 0320 	rsb	r3, r0, #32
 80123f4:	280a      	cmp	r0, #10
 80123f6:	600b      	str	r3, [r1, #0]
 80123f8:	491f      	ldr	r1, [pc, #124]	; (8012478 <__b2d+0xa4>)
 80123fa:	dc17      	bgt.n	801242c <__b2d+0x58>
 80123fc:	45c1      	cmp	r9, r8
 80123fe:	bf28      	it	cs
 8012400:	2200      	movcs	r2, #0
 8012402:	f1c0 0c0b 	rsb	ip, r0, #11
 8012406:	fa26 f30c 	lsr.w	r3, r6, ip
 801240a:	bf38      	it	cc
 801240c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8012410:	ea43 0501 	orr.w	r5, r3, r1
 8012414:	f100 0315 	add.w	r3, r0, #21
 8012418:	fa06 f303 	lsl.w	r3, r6, r3
 801241c:	fa22 f20c 	lsr.w	r2, r2, ip
 8012420:	ea43 0402 	orr.w	r4, r3, r2
 8012424:	4620      	mov	r0, r4
 8012426:	4629      	mov	r1, r5
 8012428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801242c:	45c1      	cmp	r9, r8
 801242e:	bf2e      	itee	cs
 8012430:	2200      	movcs	r2, #0
 8012432:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8012436:	f1a7 0808 	subcc.w	r8, r7, #8
 801243a:	f1b0 030b 	subs.w	r3, r0, #11
 801243e:	d016      	beq.n	801246e <__b2d+0x9a>
 8012440:	f1c3 0720 	rsb	r7, r3, #32
 8012444:	fa22 f107 	lsr.w	r1, r2, r7
 8012448:	45c8      	cmp	r8, r9
 801244a:	fa06 f603 	lsl.w	r6, r6, r3
 801244e:	ea46 0601 	orr.w	r6, r6, r1
 8012452:	bf94      	ite	ls
 8012454:	2100      	movls	r1, #0
 8012456:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801245a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801245e:	fa02 f003 	lsl.w	r0, r2, r3
 8012462:	40f9      	lsrs	r1, r7
 8012464:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012468:	ea40 0401 	orr.w	r4, r0, r1
 801246c:	e7da      	b.n	8012424 <__b2d+0x50>
 801246e:	4614      	mov	r4, r2
 8012470:	ea46 0501 	orr.w	r5, r6, r1
 8012474:	e7d6      	b.n	8012424 <__b2d+0x50>
 8012476:	bf00      	nop
 8012478:	3ff00000 	.word	0x3ff00000

0801247c <__d2b>:
 801247c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012480:	2101      	movs	r1, #1
 8012482:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8012486:	4690      	mov	r8, r2
 8012488:	461d      	mov	r5, r3
 801248a:	f7ff fc0d 	bl	8011ca8 <_Balloc>
 801248e:	4604      	mov	r4, r0
 8012490:	b930      	cbnz	r0, 80124a0 <__d2b+0x24>
 8012492:	4602      	mov	r2, r0
 8012494:	f240 310a 	movw	r1, #778	; 0x30a
 8012498:	4b24      	ldr	r3, [pc, #144]	; (801252c <__d2b+0xb0>)
 801249a:	4825      	ldr	r0, [pc, #148]	; (8012530 <__d2b+0xb4>)
 801249c:	f000 fb50 	bl	8012b40 <__assert_func>
 80124a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80124a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80124a8:	bb2d      	cbnz	r5, 80124f6 <__d2b+0x7a>
 80124aa:	9301      	str	r3, [sp, #4]
 80124ac:	f1b8 0300 	subs.w	r3, r8, #0
 80124b0:	d026      	beq.n	8012500 <__d2b+0x84>
 80124b2:	4668      	mov	r0, sp
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	f7ff fd0d 	bl	8011ed4 <__lo0bits>
 80124ba:	9900      	ldr	r1, [sp, #0]
 80124bc:	b1f0      	cbz	r0, 80124fc <__d2b+0x80>
 80124be:	9a01      	ldr	r2, [sp, #4]
 80124c0:	f1c0 0320 	rsb	r3, r0, #32
 80124c4:	fa02 f303 	lsl.w	r3, r2, r3
 80124c8:	430b      	orrs	r3, r1
 80124ca:	40c2      	lsrs	r2, r0
 80124cc:	6163      	str	r3, [r4, #20]
 80124ce:	9201      	str	r2, [sp, #4]
 80124d0:	9b01      	ldr	r3, [sp, #4]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	bf14      	ite	ne
 80124d6:	2102      	movne	r1, #2
 80124d8:	2101      	moveq	r1, #1
 80124da:	61a3      	str	r3, [r4, #24]
 80124dc:	6121      	str	r1, [r4, #16]
 80124de:	b1c5      	cbz	r5, 8012512 <__d2b+0x96>
 80124e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80124e4:	4405      	add	r5, r0
 80124e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80124ea:	603d      	str	r5, [r7, #0]
 80124ec:	6030      	str	r0, [r6, #0]
 80124ee:	4620      	mov	r0, r4
 80124f0:	b002      	add	sp, #8
 80124f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80124fa:	e7d6      	b.n	80124aa <__d2b+0x2e>
 80124fc:	6161      	str	r1, [r4, #20]
 80124fe:	e7e7      	b.n	80124d0 <__d2b+0x54>
 8012500:	a801      	add	r0, sp, #4
 8012502:	f7ff fce7 	bl	8011ed4 <__lo0bits>
 8012506:	2101      	movs	r1, #1
 8012508:	9b01      	ldr	r3, [sp, #4]
 801250a:	6121      	str	r1, [r4, #16]
 801250c:	6163      	str	r3, [r4, #20]
 801250e:	3020      	adds	r0, #32
 8012510:	e7e5      	b.n	80124de <__d2b+0x62>
 8012512:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8012516:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801251a:	6038      	str	r0, [r7, #0]
 801251c:	6918      	ldr	r0, [r3, #16]
 801251e:	f7ff fcb9 	bl	8011e94 <__hi0bits>
 8012522:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8012526:	6031      	str	r1, [r6, #0]
 8012528:	e7e1      	b.n	80124ee <__d2b+0x72>
 801252a:	bf00      	nop
 801252c:	08013fb8 	.word	0x08013fb8
 8012530:	080140ac 	.word	0x080140ac

08012534 <__ratio>:
 8012534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012538:	4688      	mov	r8, r1
 801253a:	4669      	mov	r1, sp
 801253c:	4681      	mov	r9, r0
 801253e:	f7ff ff49 	bl	80123d4 <__b2d>
 8012542:	460f      	mov	r7, r1
 8012544:	4604      	mov	r4, r0
 8012546:	460d      	mov	r5, r1
 8012548:	4640      	mov	r0, r8
 801254a:	a901      	add	r1, sp, #4
 801254c:	f7ff ff42 	bl	80123d4 <__b2d>
 8012550:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012554:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012558:	468b      	mov	fp, r1
 801255a:	eba3 0c02 	sub.w	ip, r3, r2
 801255e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012562:	1a9b      	subs	r3, r3, r2
 8012564:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012568:	2b00      	cmp	r3, #0
 801256a:	bfd5      	itete	le
 801256c:	460a      	movle	r2, r1
 801256e:	462a      	movgt	r2, r5
 8012570:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012574:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012578:	bfd8      	it	le
 801257a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801257e:	465b      	mov	r3, fp
 8012580:	4602      	mov	r2, r0
 8012582:	4639      	mov	r1, r7
 8012584:	4620      	mov	r0, r4
 8012586:	f7ee f93d 	bl	8000804 <__aeabi_ddiv>
 801258a:	b003      	add	sp, #12
 801258c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012590 <__copybits>:
 8012590:	3901      	subs	r1, #1
 8012592:	b570      	push	{r4, r5, r6, lr}
 8012594:	1149      	asrs	r1, r1, #5
 8012596:	6914      	ldr	r4, [r2, #16]
 8012598:	3101      	adds	r1, #1
 801259a:	f102 0314 	add.w	r3, r2, #20
 801259e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80125a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80125a6:	1f05      	subs	r5, r0, #4
 80125a8:	42a3      	cmp	r3, r4
 80125aa:	d30c      	bcc.n	80125c6 <__copybits+0x36>
 80125ac:	1aa3      	subs	r3, r4, r2
 80125ae:	3b11      	subs	r3, #17
 80125b0:	f023 0303 	bic.w	r3, r3, #3
 80125b4:	3211      	adds	r2, #17
 80125b6:	42a2      	cmp	r2, r4
 80125b8:	bf88      	it	hi
 80125ba:	2300      	movhi	r3, #0
 80125bc:	4418      	add	r0, r3
 80125be:	2300      	movs	r3, #0
 80125c0:	4288      	cmp	r0, r1
 80125c2:	d305      	bcc.n	80125d0 <__copybits+0x40>
 80125c4:	bd70      	pop	{r4, r5, r6, pc}
 80125c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80125ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80125ce:	e7eb      	b.n	80125a8 <__copybits+0x18>
 80125d0:	f840 3b04 	str.w	r3, [r0], #4
 80125d4:	e7f4      	b.n	80125c0 <__copybits+0x30>

080125d6 <__any_on>:
 80125d6:	f100 0214 	add.w	r2, r0, #20
 80125da:	6900      	ldr	r0, [r0, #16]
 80125dc:	114b      	asrs	r3, r1, #5
 80125de:	4298      	cmp	r0, r3
 80125e0:	b510      	push	{r4, lr}
 80125e2:	db11      	blt.n	8012608 <__any_on+0x32>
 80125e4:	dd0a      	ble.n	80125fc <__any_on+0x26>
 80125e6:	f011 011f 	ands.w	r1, r1, #31
 80125ea:	d007      	beq.n	80125fc <__any_on+0x26>
 80125ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80125f0:	fa24 f001 	lsr.w	r0, r4, r1
 80125f4:	fa00 f101 	lsl.w	r1, r0, r1
 80125f8:	428c      	cmp	r4, r1
 80125fa:	d10b      	bne.n	8012614 <__any_on+0x3e>
 80125fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012600:	4293      	cmp	r3, r2
 8012602:	d803      	bhi.n	801260c <__any_on+0x36>
 8012604:	2000      	movs	r0, #0
 8012606:	bd10      	pop	{r4, pc}
 8012608:	4603      	mov	r3, r0
 801260a:	e7f7      	b.n	80125fc <__any_on+0x26>
 801260c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012610:	2900      	cmp	r1, #0
 8012612:	d0f5      	beq.n	8012600 <__any_on+0x2a>
 8012614:	2001      	movs	r0, #1
 8012616:	e7f6      	b.n	8012606 <__any_on+0x30>

08012618 <_calloc_r>:
 8012618:	b538      	push	{r3, r4, r5, lr}
 801261a:	fb02 f501 	mul.w	r5, r2, r1
 801261e:	4629      	mov	r1, r5
 8012620:	f000 f854 	bl	80126cc <_malloc_r>
 8012624:	4604      	mov	r4, r0
 8012626:	b118      	cbz	r0, 8012630 <_calloc_r+0x18>
 8012628:	462a      	mov	r2, r5
 801262a:	2100      	movs	r1, #0
 801262c:	f7fc f852 	bl	800e6d4 <memset>
 8012630:	4620      	mov	r0, r4
 8012632:	bd38      	pop	{r3, r4, r5, pc}

08012634 <_free_r>:
 8012634:	b538      	push	{r3, r4, r5, lr}
 8012636:	4605      	mov	r5, r0
 8012638:	2900      	cmp	r1, #0
 801263a:	d043      	beq.n	80126c4 <_free_r+0x90>
 801263c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012640:	1f0c      	subs	r4, r1, #4
 8012642:	2b00      	cmp	r3, #0
 8012644:	bfb8      	it	lt
 8012646:	18e4      	addlt	r4, r4, r3
 8012648:	f000 fb08 	bl	8012c5c <__malloc_lock>
 801264c:	4a1e      	ldr	r2, [pc, #120]	; (80126c8 <_free_r+0x94>)
 801264e:	6813      	ldr	r3, [r2, #0]
 8012650:	4610      	mov	r0, r2
 8012652:	b933      	cbnz	r3, 8012662 <_free_r+0x2e>
 8012654:	6063      	str	r3, [r4, #4]
 8012656:	6014      	str	r4, [r2, #0]
 8012658:	4628      	mov	r0, r5
 801265a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801265e:	f000 bb03 	b.w	8012c68 <__malloc_unlock>
 8012662:	42a3      	cmp	r3, r4
 8012664:	d90a      	bls.n	801267c <_free_r+0x48>
 8012666:	6821      	ldr	r1, [r4, #0]
 8012668:	1862      	adds	r2, r4, r1
 801266a:	4293      	cmp	r3, r2
 801266c:	bf01      	itttt	eq
 801266e:	681a      	ldreq	r2, [r3, #0]
 8012670:	685b      	ldreq	r3, [r3, #4]
 8012672:	1852      	addeq	r2, r2, r1
 8012674:	6022      	streq	r2, [r4, #0]
 8012676:	6063      	str	r3, [r4, #4]
 8012678:	6004      	str	r4, [r0, #0]
 801267a:	e7ed      	b.n	8012658 <_free_r+0x24>
 801267c:	461a      	mov	r2, r3
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	b10b      	cbz	r3, 8012686 <_free_r+0x52>
 8012682:	42a3      	cmp	r3, r4
 8012684:	d9fa      	bls.n	801267c <_free_r+0x48>
 8012686:	6811      	ldr	r1, [r2, #0]
 8012688:	1850      	adds	r0, r2, r1
 801268a:	42a0      	cmp	r0, r4
 801268c:	d10b      	bne.n	80126a6 <_free_r+0x72>
 801268e:	6820      	ldr	r0, [r4, #0]
 8012690:	4401      	add	r1, r0
 8012692:	1850      	adds	r0, r2, r1
 8012694:	4283      	cmp	r3, r0
 8012696:	6011      	str	r1, [r2, #0]
 8012698:	d1de      	bne.n	8012658 <_free_r+0x24>
 801269a:	6818      	ldr	r0, [r3, #0]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	4401      	add	r1, r0
 80126a0:	6011      	str	r1, [r2, #0]
 80126a2:	6053      	str	r3, [r2, #4]
 80126a4:	e7d8      	b.n	8012658 <_free_r+0x24>
 80126a6:	d902      	bls.n	80126ae <_free_r+0x7a>
 80126a8:	230c      	movs	r3, #12
 80126aa:	602b      	str	r3, [r5, #0]
 80126ac:	e7d4      	b.n	8012658 <_free_r+0x24>
 80126ae:	6820      	ldr	r0, [r4, #0]
 80126b0:	1821      	adds	r1, r4, r0
 80126b2:	428b      	cmp	r3, r1
 80126b4:	bf01      	itttt	eq
 80126b6:	6819      	ldreq	r1, [r3, #0]
 80126b8:	685b      	ldreq	r3, [r3, #4]
 80126ba:	1809      	addeq	r1, r1, r0
 80126bc:	6021      	streq	r1, [r4, #0]
 80126be:	6063      	str	r3, [r4, #4]
 80126c0:	6054      	str	r4, [r2, #4]
 80126c2:	e7c9      	b.n	8012658 <_free_r+0x24>
 80126c4:	bd38      	pop	{r3, r4, r5, pc}
 80126c6:	bf00      	nop
 80126c8:	20000784 	.word	0x20000784

080126cc <_malloc_r>:
 80126cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ce:	1ccd      	adds	r5, r1, #3
 80126d0:	f025 0503 	bic.w	r5, r5, #3
 80126d4:	3508      	adds	r5, #8
 80126d6:	2d0c      	cmp	r5, #12
 80126d8:	bf38      	it	cc
 80126da:	250c      	movcc	r5, #12
 80126dc:	2d00      	cmp	r5, #0
 80126de:	4606      	mov	r6, r0
 80126e0:	db01      	blt.n	80126e6 <_malloc_r+0x1a>
 80126e2:	42a9      	cmp	r1, r5
 80126e4:	d903      	bls.n	80126ee <_malloc_r+0x22>
 80126e6:	230c      	movs	r3, #12
 80126e8:	6033      	str	r3, [r6, #0]
 80126ea:	2000      	movs	r0, #0
 80126ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ee:	f000 fab5 	bl	8012c5c <__malloc_lock>
 80126f2:	4921      	ldr	r1, [pc, #132]	; (8012778 <_malloc_r+0xac>)
 80126f4:	680a      	ldr	r2, [r1, #0]
 80126f6:	4614      	mov	r4, r2
 80126f8:	b99c      	cbnz	r4, 8012722 <_malloc_r+0x56>
 80126fa:	4f20      	ldr	r7, [pc, #128]	; (801277c <_malloc_r+0xb0>)
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	b923      	cbnz	r3, 801270a <_malloc_r+0x3e>
 8012700:	4621      	mov	r1, r4
 8012702:	4630      	mov	r0, r6
 8012704:	f000 f998 	bl	8012a38 <_sbrk_r>
 8012708:	6038      	str	r0, [r7, #0]
 801270a:	4629      	mov	r1, r5
 801270c:	4630      	mov	r0, r6
 801270e:	f000 f993 	bl	8012a38 <_sbrk_r>
 8012712:	1c43      	adds	r3, r0, #1
 8012714:	d123      	bne.n	801275e <_malloc_r+0x92>
 8012716:	230c      	movs	r3, #12
 8012718:	4630      	mov	r0, r6
 801271a:	6033      	str	r3, [r6, #0]
 801271c:	f000 faa4 	bl	8012c68 <__malloc_unlock>
 8012720:	e7e3      	b.n	80126ea <_malloc_r+0x1e>
 8012722:	6823      	ldr	r3, [r4, #0]
 8012724:	1b5b      	subs	r3, r3, r5
 8012726:	d417      	bmi.n	8012758 <_malloc_r+0x8c>
 8012728:	2b0b      	cmp	r3, #11
 801272a:	d903      	bls.n	8012734 <_malloc_r+0x68>
 801272c:	6023      	str	r3, [r4, #0]
 801272e:	441c      	add	r4, r3
 8012730:	6025      	str	r5, [r4, #0]
 8012732:	e004      	b.n	801273e <_malloc_r+0x72>
 8012734:	6863      	ldr	r3, [r4, #4]
 8012736:	42a2      	cmp	r2, r4
 8012738:	bf0c      	ite	eq
 801273a:	600b      	streq	r3, [r1, #0]
 801273c:	6053      	strne	r3, [r2, #4]
 801273e:	4630      	mov	r0, r6
 8012740:	f000 fa92 	bl	8012c68 <__malloc_unlock>
 8012744:	f104 000b 	add.w	r0, r4, #11
 8012748:	1d23      	adds	r3, r4, #4
 801274a:	f020 0007 	bic.w	r0, r0, #7
 801274e:	1ac2      	subs	r2, r0, r3
 8012750:	d0cc      	beq.n	80126ec <_malloc_r+0x20>
 8012752:	1a1b      	subs	r3, r3, r0
 8012754:	50a3      	str	r3, [r4, r2]
 8012756:	e7c9      	b.n	80126ec <_malloc_r+0x20>
 8012758:	4622      	mov	r2, r4
 801275a:	6864      	ldr	r4, [r4, #4]
 801275c:	e7cc      	b.n	80126f8 <_malloc_r+0x2c>
 801275e:	1cc4      	adds	r4, r0, #3
 8012760:	f024 0403 	bic.w	r4, r4, #3
 8012764:	42a0      	cmp	r0, r4
 8012766:	d0e3      	beq.n	8012730 <_malloc_r+0x64>
 8012768:	1a21      	subs	r1, r4, r0
 801276a:	4630      	mov	r0, r6
 801276c:	f000 f964 	bl	8012a38 <_sbrk_r>
 8012770:	3001      	adds	r0, #1
 8012772:	d1dd      	bne.n	8012730 <_malloc_r+0x64>
 8012774:	e7cf      	b.n	8012716 <_malloc_r+0x4a>
 8012776:	bf00      	nop
 8012778:	20000784 	.word	0x20000784
 801277c:	20000788 	.word	0x20000788

08012780 <__ssputs_r>:
 8012780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012784:	688e      	ldr	r6, [r1, #8]
 8012786:	4682      	mov	sl, r0
 8012788:	429e      	cmp	r6, r3
 801278a:	460c      	mov	r4, r1
 801278c:	4690      	mov	r8, r2
 801278e:	461f      	mov	r7, r3
 8012790:	d838      	bhi.n	8012804 <__ssputs_r+0x84>
 8012792:	898a      	ldrh	r2, [r1, #12]
 8012794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012798:	d032      	beq.n	8012800 <__ssputs_r+0x80>
 801279a:	6825      	ldr	r5, [r4, #0]
 801279c:	6909      	ldr	r1, [r1, #16]
 801279e:	3301      	adds	r3, #1
 80127a0:	eba5 0901 	sub.w	r9, r5, r1
 80127a4:	6965      	ldr	r5, [r4, #20]
 80127a6:	444b      	add	r3, r9
 80127a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127b0:	106d      	asrs	r5, r5, #1
 80127b2:	429d      	cmp	r5, r3
 80127b4:	bf38      	it	cc
 80127b6:	461d      	movcc	r5, r3
 80127b8:	0553      	lsls	r3, r2, #21
 80127ba:	d531      	bpl.n	8012820 <__ssputs_r+0xa0>
 80127bc:	4629      	mov	r1, r5
 80127be:	f7ff ff85 	bl	80126cc <_malloc_r>
 80127c2:	4606      	mov	r6, r0
 80127c4:	b950      	cbnz	r0, 80127dc <__ssputs_r+0x5c>
 80127c6:	230c      	movs	r3, #12
 80127c8:	f04f 30ff 	mov.w	r0, #4294967295
 80127cc:	f8ca 3000 	str.w	r3, [sl]
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127d6:	81a3      	strh	r3, [r4, #12]
 80127d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127dc:	464a      	mov	r2, r9
 80127de:	6921      	ldr	r1, [r4, #16]
 80127e0:	f7fb ff6a 	bl	800e6b8 <memcpy>
 80127e4:	89a3      	ldrh	r3, [r4, #12]
 80127e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127ee:	81a3      	strh	r3, [r4, #12]
 80127f0:	6126      	str	r6, [r4, #16]
 80127f2:	444e      	add	r6, r9
 80127f4:	6026      	str	r6, [r4, #0]
 80127f6:	463e      	mov	r6, r7
 80127f8:	6165      	str	r5, [r4, #20]
 80127fa:	eba5 0509 	sub.w	r5, r5, r9
 80127fe:	60a5      	str	r5, [r4, #8]
 8012800:	42be      	cmp	r6, r7
 8012802:	d900      	bls.n	8012806 <__ssputs_r+0x86>
 8012804:	463e      	mov	r6, r7
 8012806:	4632      	mov	r2, r6
 8012808:	4641      	mov	r1, r8
 801280a:	6820      	ldr	r0, [r4, #0]
 801280c:	f000 fa0c 	bl	8012c28 <memmove>
 8012810:	68a3      	ldr	r3, [r4, #8]
 8012812:	6822      	ldr	r2, [r4, #0]
 8012814:	1b9b      	subs	r3, r3, r6
 8012816:	4432      	add	r2, r6
 8012818:	2000      	movs	r0, #0
 801281a:	60a3      	str	r3, [r4, #8]
 801281c:	6022      	str	r2, [r4, #0]
 801281e:	e7db      	b.n	80127d8 <__ssputs_r+0x58>
 8012820:	462a      	mov	r2, r5
 8012822:	f000 fa27 	bl	8012c74 <_realloc_r>
 8012826:	4606      	mov	r6, r0
 8012828:	2800      	cmp	r0, #0
 801282a:	d1e1      	bne.n	80127f0 <__ssputs_r+0x70>
 801282c:	4650      	mov	r0, sl
 801282e:	6921      	ldr	r1, [r4, #16]
 8012830:	f7ff ff00 	bl	8012634 <_free_r>
 8012834:	e7c7      	b.n	80127c6 <__ssputs_r+0x46>
	...

08012838 <_svfiprintf_r>:
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	4698      	mov	r8, r3
 801283e:	898b      	ldrh	r3, [r1, #12]
 8012840:	4607      	mov	r7, r0
 8012842:	061b      	lsls	r3, r3, #24
 8012844:	460d      	mov	r5, r1
 8012846:	4614      	mov	r4, r2
 8012848:	b09d      	sub	sp, #116	; 0x74
 801284a:	d50e      	bpl.n	801286a <_svfiprintf_r+0x32>
 801284c:	690b      	ldr	r3, [r1, #16]
 801284e:	b963      	cbnz	r3, 801286a <_svfiprintf_r+0x32>
 8012850:	2140      	movs	r1, #64	; 0x40
 8012852:	f7ff ff3b 	bl	80126cc <_malloc_r>
 8012856:	6028      	str	r0, [r5, #0]
 8012858:	6128      	str	r0, [r5, #16]
 801285a:	b920      	cbnz	r0, 8012866 <_svfiprintf_r+0x2e>
 801285c:	230c      	movs	r3, #12
 801285e:	603b      	str	r3, [r7, #0]
 8012860:	f04f 30ff 	mov.w	r0, #4294967295
 8012864:	e0d1      	b.n	8012a0a <_svfiprintf_r+0x1d2>
 8012866:	2340      	movs	r3, #64	; 0x40
 8012868:	616b      	str	r3, [r5, #20]
 801286a:	2300      	movs	r3, #0
 801286c:	9309      	str	r3, [sp, #36]	; 0x24
 801286e:	2320      	movs	r3, #32
 8012870:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012874:	2330      	movs	r3, #48	; 0x30
 8012876:	f04f 0901 	mov.w	r9, #1
 801287a:	f8cd 800c 	str.w	r8, [sp, #12]
 801287e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012a24 <_svfiprintf_r+0x1ec>
 8012882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012886:	4623      	mov	r3, r4
 8012888:	469a      	mov	sl, r3
 801288a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801288e:	b10a      	cbz	r2, 8012894 <_svfiprintf_r+0x5c>
 8012890:	2a25      	cmp	r2, #37	; 0x25
 8012892:	d1f9      	bne.n	8012888 <_svfiprintf_r+0x50>
 8012894:	ebba 0b04 	subs.w	fp, sl, r4
 8012898:	d00b      	beq.n	80128b2 <_svfiprintf_r+0x7a>
 801289a:	465b      	mov	r3, fp
 801289c:	4622      	mov	r2, r4
 801289e:	4629      	mov	r1, r5
 80128a0:	4638      	mov	r0, r7
 80128a2:	f7ff ff6d 	bl	8012780 <__ssputs_r>
 80128a6:	3001      	adds	r0, #1
 80128a8:	f000 80aa 	beq.w	8012a00 <_svfiprintf_r+0x1c8>
 80128ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128ae:	445a      	add	r2, fp
 80128b0:	9209      	str	r2, [sp, #36]	; 0x24
 80128b2:	f89a 3000 	ldrb.w	r3, [sl]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	f000 80a2 	beq.w	8012a00 <_svfiprintf_r+0x1c8>
 80128bc:	2300      	movs	r3, #0
 80128be:	f04f 32ff 	mov.w	r2, #4294967295
 80128c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128c6:	f10a 0a01 	add.w	sl, sl, #1
 80128ca:	9304      	str	r3, [sp, #16]
 80128cc:	9307      	str	r3, [sp, #28]
 80128ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128d2:	931a      	str	r3, [sp, #104]	; 0x68
 80128d4:	4654      	mov	r4, sl
 80128d6:	2205      	movs	r2, #5
 80128d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128dc:	4851      	ldr	r0, [pc, #324]	; (8012a24 <_svfiprintf_r+0x1ec>)
 80128de:	f7ff f9d5 	bl	8011c8c <memchr>
 80128e2:	9a04      	ldr	r2, [sp, #16]
 80128e4:	b9d8      	cbnz	r0, 801291e <_svfiprintf_r+0xe6>
 80128e6:	06d0      	lsls	r0, r2, #27
 80128e8:	bf44      	itt	mi
 80128ea:	2320      	movmi	r3, #32
 80128ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128f0:	0711      	lsls	r1, r2, #28
 80128f2:	bf44      	itt	mi
 80128f4:	232b      	movmi	r3, #43	; 0x2b
 80128f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128fa:	f89a 3000 	ldrb.w	r3, [sl]
 80128fe:	2b2a      	cmp	r3, #42	; 0x2a
 8012900:	d015      	beq.n	801292e <_svfiprintf_r+0xf6>
 8012902:	4654      	mov	r4, sl
 8012904:	2000      	movs	r0, #0
 8012906:	f04f 0c0a 	mov.w	ip, #10
 801290a:	9a07      	ldr	r2, [sp, #28]
 801290c:	4621      	mov	r1, r4
 801290e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012912:	3b30      	subs	r3, #48	; 0x30
 8012914:	2b09      	cmp	r3, #9
 8012916:	d94e      	bls.n	80129b6 <_svfiprintf_r+0x17e>
 8012918:	b1b0      	cbz	r0, 8012948 <_svfiprintf_r+0x110>
 801291a:	9207      	str	r2, [sp, #28]
 801291c:	e014      	b.n	8012948 <_svfiprintf_r+0x110>
 801291e:	eba0 0308 	sub.w	r3, r0, r8
 8012922:	fa09 f303 	lsl.w	r3, r9, r3
 8012926:	4313      	orrs	r3, r2
 8012928:	46a2      	mov	sl, r4
 801292a:	9304      	str	r3, [sp, #16]
 801292c:	e7d2      	b.n	80128d4 <_svfiprintf_r+0x9c>
 801292e:	9b03      	ldr	r3, [sp, #12]
 8012930:	1d19      	adds	r1, r3, #4
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	9103      	str	r1, [sp, #12]
 8012936:	2b00      	cmp	r3, #0
 8012938:	bfbb      	ittet	lt
 801293a:	425b      	neglt	r3, r3
 801293c:	f042 0202 	orrlt.w	r2, r2, #2
 8012940:	9307      	strge	r3, [sp, #28]
 8012942:	9307      	strlt	r3, [sp, #28]
 8012944:	bfb8      	it	lt
 8012946:	9204      	strlt	r2, [sp, #16]
 8012948:	7823      	ldrb	r3, [r4, #0]
 801294a:	2b2e      	cmp	r3, #46	; 0x2e
 801294c:	d10c      	bne.n	8012968 <_svfiprintf_r+0x130>
 801294e:	7863      	ldrb	r3, [r4, #1]
 8012950:	2b2a      	cmp	r3, #42	; 0x2a
 8012952:	d135      	bne.n	80129c0 <_svfiprintf_r+0x188>
 8012954:	9b03      	ldr	r3, [sp, #12]
 8012956:	3402      	adds	r4, #2
 8012958:	1d1a      	adds	r2, r3, #4
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	9203      	str	r2, [sp, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	bfb8      	it	lt
 8012962:	f04f 33ff 	movlt.w	r3, #4294967295
 8012966:	9305      	str	r3, [sp, #20]
 8012968:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012a34 <_svfiprintf_r+0x1fc>
 801296c:	2203      	movs	r2, #3
 801296e:	4650      	mov	r0, sl
 8012970:	7821      	ldrb	r1, [r4, #0]
 8012972:	f7ff f98b 	bl	8011c8c <memchr>
 8012976:	b140      	cbz	r0, 801298a <_svfiprintf_r+0x152>
 8012978:	2340      	movs	r3, #64	; 0x40
 801297a:	eba0 000a 	sub.w	r0, r0, sl
 801297e:	fa03 f000 	lsl.w	r0, r3, r0
 8012982:	9b04      	ldr	r3, [sp, #16]
 8012984:	3401      	adds	r4, #1
 8012986:	4303      	orrs	r3, r0
 8012988:	9304      	str	r3, [sp, #16]
 801298a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801298e:	2206      	movs	r2, #6
 8012990:	4825      	ldr	r0, [pc, #148]	; (8012a28 <_svfiprintf_r+0x1f0>)
 8012992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012996:	f7ff f979 	bl	8011c8c <memchr>
 801299a:	2800      	cmp	r0, #0
 801299c:	d038      	beq.n	8012a10 <_svfiprintf_r+0x1d8>
 801299e:	4b23      	ldr	r3, [pc, #140]	; (8012a2c <_svfiprintf_r+0x1f4>)
 80129a0:	bb1b      	cbnz	r3, 80129ea <_svfiprintf_r+0x1b2>
 80129a2:	9b03      	ldr	r3, [sp, #12]
 80129a4:	3307      	adds	r3, #7
 80129a6:	f023 0307 	bic.w	r3, r3, #7
 80129aa:	3308      	adds	r3, #8
 80129ac:	9303      	str	r3, [sp, #12]
 80129ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b0:	4433      	add	r3, r6
 80129b2:	9309      	str	r3, [sp, #36]	; 0x24
 80129b4:	e767      	b.n	8012886 <_svfiprintf_r+0x4e>
 80129b6:	460c      	mov	r4, r1
 80129b8:	2001      	movs	r0, #1
 80129ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80129be:	e7a5      	b.n	801290c <_svfiprintf_r+0xd4>
 80129c0:	2300      	movs	r3, #0
 80129c2:	f04f 0c0a 	mov.w	ip, #10
 80129c6:	4619      	mov	r1, r3
 80129c8:	3401      	adds	r4, #1
 80129ca:	9305      	str	r3, [sp, #20]
 80129cc:	4620      	mov	r0, r4
 80129ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129d2:	3a30      	subs	r2, #48	; 0x30
 80129d4:	2a09      	cmp	r2, #9
 80129d6:	d903      	bls.n	80129e0 <_svfiprintf_r+0x1a8>
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d0c5      	beq.n	8012968 <_svfiprintf_r+0x130>
 80129dc:	9105      	str	r1, [sp, #20]
 80129de:	e7c3      	b.n	8012968 <_svfiprintf_r+0x130>
 80129e0:	4604      	mov	r4, r0
 80129e2:	2301      	movs	r3, #1
 80129e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80129e8:	e7f0      	b.n	80129cc <_svfiprintf_r+0x194>
 80129ea:	ab03      	add	r3, sp, #12
 80129ec:	9300      	str	r3, [sp, #0]
 80129ee:	462a      	mov	r2, r5
 80129f0:	4638      	mov	r0, r7
 80129f2:	4b0f      	ldr	r3, [pc, #60]	; (8012a30 <_svfiprintf_r+0x1f8>)
 80129f4:	a904      	add	r1, sp, #16
 80129f6:	f7fb ff13 	bl	800e820 <_printf_float>
 80129fa:	1c42      	adds	r2, r0, #1
 80129fc:	4606      	mov	r6, r0
 80129fe:	d1d6      	bne.n	80129ae <_svfiprintf_r+0x176>
 8012a00:	89ab      	ldrh	r3, [r5, #12]
 8012a02:	065b      	lsls	r3, r3, #25
 8012a04:	f53f af2c 	bmi.w	8012860 <_svfiprintf_r+0x28>
 8012a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a0a:	b01d      	add	sp, #116	; 0x74
 8012a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a10:	ab03      	add	r3, sp, #12
 8012a12:	9300      	str	r3, [sp, #0]
 8012a14:	462a      	mov	r2, r5
 8012a16:	4638      	mov	r0, r7
 8012a18:	4b05      	ldr	r3, [pc, #20]	; (8012a30 <_svfiprintf_r+0x1f8>)
 8012a1a:	a904      	add	r1, sp, #16
 8012a1c:	f7fc f99c 	bl	800ed58 <_printf_i>
 8012a20:	e7eb      	b.n	80129fa <_svfiprintf_r+0x1c2>
 8012a22:	bf00      	nop
 8012a24:	0801420c 	.word	0x0801420c
 8012a28:	08014216 	.word	0x08014216
 8012a2c:	0800e821 	.word	0x0800e821
 8012a30:	08012781 	.word	0x08012781
 8012a34:	08014212 	.word	0x08014212

08012a38 <_sbrk_r>:
 8012a38:	b538      	push	{r3, r4, r5, lr}
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	4d05      	ldr	r5, [pc, #20]	; (8012a54 <_sbrk_r+0x1c>)
 8012a3e:	4604      	mov	r4, r0
 8012a40:	4608      	mov	r0, r1
 8012a42:	602b      	str	r3, [r5, #0]
 8012a44:	f7f3 ffea 	bl	8006a1c <_sbrk>
 8012a48:	1c43      	adds	r3, r0, #1
 8012a4a:	d102      	bne.n	8012a52 <_sbrk_r+0x1a>
 8012a4c:	682b      	ldr	r3, [r5, #0]
 8012a4e:	b103      	cbz	r3, 8012a52 <_sbrk_r+0x1a>
 8012a50:	6023      	str	r3, [r4, #0]
 8012a52:	bd38      	pop	{r3, r4, r5, pc}
 8012a54:	20000d18 	.word	0x20000d18

08012a58 <__sread>:
 8012a58:	b510      	push	{r4, lr}
 8012a5a:	460c      	mov	r4, r1
 8012a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a60:	f000 fa86 	bl	8012f70 <_read_r>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	bfab      	itete	ge
 8012a68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8012a6c:	181b      	addge	r3, r3, r0
 8012a6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a72:	bfac      	ite	ge
 8012a74:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a76:	81a3      	strhlt	r3, [r4, #12]
 8012a78:	bd10      	pop	{r4, pc}

08012a7a <__swrite>:
 8012a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a7e:	461f      	mov	r7, r3
 8012a80:	898b      	ldrh	r3, [r1, #12]
 8012a82:	4605      	mov	r5, r0
 8012a84:	05db      	lsls	r3, r3, #23
 8012a86:	460c      	mov	r4, r1
 8012a88:	4616      	mov	r6, r2
 8012a8a:	d505      	bpl.n	8012a98 <__swrite+0x1e>
 8012a8c:	2302      	movs	r3, #2
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a94:	f000 f8b6 	bl	8012c04 <_lseek_r>
 8012a98:	89a3      	ldrh	r3, [r4, #12]
 8012a9a:	4632      	mov	r2, r6
 8012a9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012aa0:	81a3      	strh	r3, [r4, #12]
 8012aa2:	4628      	mov	r0, r5
 8012aa4:	463b      	mov	r3, r7
 8012aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012aae:	f000 b835 	b.w	8012b1c <_write_r>

08012ab2 <__sseek>:
 8012ab2:	b510      	push	{r4, lr}
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aba:	f000 f8a3 	bl	8012c04 <_lseek_r>
 8012abe:	1c43      	adds	r3, r0, #1
 8012ac0:	89a3      	ldrh	r3, [r4, #12]
 8012ac2:	bf15      	itete	ne
 8012ac4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012ac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012aca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ace:	81a3      	strheq	r3, [r4, #12]
 8012ad0:	bf18      	it	ne
 8012ad2:	81a3      	strhne	r3, [r4, #12]
 8012ad4:	bd10      	pop	{r4, pc}

08012ad6 <__sclose>:
 8012ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ada:	f000 b84f 	b.w	8012b7c <_close_r>

08012ade <strncmp>:
 8012ade:	b510      	push	{r4, lr}
 8012ae0:	b16a      	cbz	r2, 8012afe <strncmp+0x20>
 8012ae2:	3901      	subs	r1, #1
 8012ae4:	1884      	adds	r4, r0, r2
 8012ae6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012aea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d103      	bne.n	8012afa <strncmp+0x1c>
 8012af2:	42a0      	cmp	r0, r4
 8012af4:	d001      	beq.n	8012afa <strncmp+0x1c>
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d1f5      	bne.n	8012ae6 <strncmp+0x8>
 8012afa:	1a98      	subs	r0, r3, r2
 8012afc:	bd10      	pop	{r4, pc}
 8012afe:	4610      	mov	r0, r2
 8012b00:	e7fc      	b.n	8012afc <strncmp+0x1e>

08012b02 <__ascii_wctomb>:
 8012b02:	4603      	mov	r3, r0
 8012b04:	4608      	mov	r0, r1
 8012b06:	b141      	cbz	r1, 8012b1a <__ascii_wctomb+0x18>
 8012b08:	2aff      	cmp	r2, #255	; 0xff
 8012b0a:	d904      	bls.n	8012b16 <__ascii_wctomb+0x14>
 8012b0c:	228a      	movs	r2, #138	; 0x8a
 8012b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	4770      	bx	lr
 8012b16:	2001      	movs	r0, #1
 8012b18:	700a      	strb	r2, [r1, #0]
 8012b1a:	4770      	bx	lr

08012b1c <_write_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4604      	mov	r4, r0
 8012b20:	4608      	mov	r0, r1
 8012b22:	4611      	mov	r1, r2
 8012b24:	2200      	movs	r2, #0
 8012b26:	4d05      	ldr	r5, [pc, #20]	; (8012b3c <_write_r+0x20>)
 8012b28:	602a      	str	r2, [r5, #0]
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	f7f3 ff2a 	bl	8006984 <_write>
 8012b30:	1c43      	adds	r3, r0, #1
 8012b32:	d102      	bne.n	8012b3a <_write_r+0x1e>
 8012b34:	682b      	ldr	r3, [r5, #0]
 8012b36:	b103      	cbz	r3, 8012b3a <_write_r+0x1e>
 8012b38:	6023      	str	r3, [r4, #0]
 8012b3a:	bd38      	pop	{r3, r4, r5, pc}
 8012b3c:	20000d18 	.word	0x20000d18

08012b40 <__assert_func>:
 8012b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b42:	4614      	mov	r4, r2
 8012b44:	461a      	mov	r2, r3
 8012b46:	4b09      	ldr	r3, [pc, #36]	; (8012b6c <__assert_func+0x2c>)
 8012b48:	4605      	mov	r5, r0
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	68d8      	ldr	r0, [r3, #12]
 8012b4e:	b14c      	cbz	r4, 8012b64 <__assert_func+0x24>
 8012b50:	4b07      	ldr	r3, [pc, #28]	; (8012b70 <__assert_func+0x30>)
 8012b52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b56:	9100      	str	r1, [sp, #0]
 8012b58:	462b      	mov	r3, r5
 8012b5a:	4906      	ldr	r1, [pc, #24]	; (8012b74 <__assert_func+0x34>)
 8012b5c:	f000 f81e 	bl	8012b9c <fiprintf>
 8012b60:	f000 fa18 	bl	8012f94 <abort>
 8012b64:	4b04      	ldr	r3, [pc, #16]	; (8012b78 <__assert_func+0x38>)
 8012b66:	461c      	mov	r4, r3
 8012b68:	e7f3      	b.n	8012b52 <__assert_func+0x12>
 8012b6a:	bf00      	nop
 8012b6c:	2000007c 	.word	0x2000007c
 8012b70:	0801421d 	.word	0x0801421d
 8012b74:	0801422a 	.word	0x0801422a
 8012b78:	08014258 	.word	0x08014258

08012b7c <_close_r>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	2300      	movs	r3, #0
 8012b80:	4d05      	ldr	r5, [pc, #20]	; (8012b98 <_close_r+0x1c>)
 8012b82:	4604      	mov	r4, r0
 8012b84:	4608      	mov	r0, r1
 8012b86:	602b      	str	r3, [r5, #0]
 8012b88:	f7f3 ff18 	bl	80069bc <_close>
 8012b8c:	1c43      	adds	r3, r0, #1
 8012b8e:	d102      	bne.n	8012b96 <_close_r+0x1a>
 8012b90:	682b      	ldr	r3, [r5, #0]
 8012b92:	b103      	cbz	r3, 8012b96 <_close_r+0x1a>
 8012b94:	6023      	str	r3, [r4, #0]
 8012b96:	bd38      	pop	{r3, r4, r5, pc}
 8012b98:	20000d18 	.word	0x20000d18

08012b9c <fiprintf>:
 8012b9c:	b40e      	push	{r1, r2, r3}
 8012b9e:	b503      	push	{r0, r1, lr}
 8012ba0:	4601      	mov	r1, r0
 8012ba2:	ab03      	add	r3, sp, #12
 8012ba4:	4805      	ldr	r0, [pc, #20]	; (8012bbc <fiprintf+0x20>)
 8012ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012baa:	6800      	ldr	r0, [r0, #0]
 8012bac:	9301      	str	r3, [sp, #4]
 8012bae:	f000 f8af 	bl	8012d10 <_vfiprintf_r>
 8012bb2:	b002      	add	sp, #8
 8012bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb8:	b003      	add	sp, #12
 8012bba:	4770      	bx	lr
 8012bbc:	2000007c 	.word	0x2000007c

08012bc0 <_fstat_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	4d06      	ldr	r5, [pc, #24]	; (8012be0 <_fstat_r+0x20>)
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	4608      	mov	r0, r1
 8012bca:	4611      	mov	r1, r2
 8012bcc:	602b      	str	r3, [r5, #0]
 8012bce:	f7f3 ff00 	bl	80069d2 <_fstat>
 8012bd2:	1c43      	adds	r3, r0, #1
 8012bd4:	d102      	bne.n	8012bdc <_fstat_r+0x1c>
 8012bd6:	682b      	ldr	r3, [r5, #0]
 8012bd8:	b103      	cbz	r3, 8012bdc <_fstat_r+0x1c>
 8012bda:	6023      	str	r3, [r4, #0]
 8012bdc:	bd38      	pop	{r3, r4, r5, pc}
 8012bde:	bf00      	nop
 8012be0:	20000d18 	.word	0x20000d18

08012be4 <_isatty_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	2300      	movs	r3, #0
 8012be8:	4d05      	ldr	r5, [pc, #20]	; (8012c00 <_isatty_r+0x1c>)
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	602b      	str	r3, [r5, #0]
 8012bf0:	f7f3 fefe 	bl	80069f0 <_isatty>
 8012bf4:	1c43      	adds	r3, r0, #1
 8012bf6:	d102      	bne.n	8012bfe <_isatty_r+0x1a>
 8012bf8:	682b      	ldr	r3, [r5, #0]
 8012bfa:	b103      	cbz	r3, 8012bfe <_isatty_r+0x1a>
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	bd38      	pop	{r3, r4, r5, pc}
 8012c00:	20000d18 	.word	0x20000d18

08012c04 <_lseek_r>:
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4604      	mov	r4, r0
 8012c08:	4608      	mov	r0, r1
 8012c0a:	4611      	mov	r1, r2
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	4d05      	ldr	r5, [pc, #20]	; (8012c24 <_lseek_r+0x20>)
 8012c10:	602a      	str	r2, [r5, #0]
 8012c12:	461a      	mov	r2, r3
 8012c14:	f7f3 fef6 	bl	8006a04 <_lseek>
 8012c18:	1c43      	adds	r3, r0, #1
 8012c1a:	d102      	bne.n	8012c22 <_lseek_r+0x1e>
 8012c1c:	682b      	ldr	r3, [r5, #0]
 8012c1e:	b103      	cbz	r3, 8012c22 <_lseek_r+0x1e>
 8012c20:	6023      	str	r3, [r4, #0]
 8012c22:	bd38      	pop	{r3, r4, r5, pc}
 8012c24:	20000d18 	.word	0x20000d18

08012c28 <memmove>:
 8012c28:	4288      	cmp	r0, r1
 8012c2a:	b510      	push	{r4, lr}
 8012c2c:	eb01 0402 	add.w	r4, r1, r2
 8012c30:	d902      	bls.n	8012c38 <memmove+0x10>
 8012c32:	4284      	cmp	r4, r0
 8012c34:	4623      	mov	r3, r4
 8012c36:	d807      	bhi.n	8012c48 <memmove+0x20>
 8012c38:	1e43      	subs	r3, r0, #1
 8012c3a:	42a1      	cmp	r1, r4
 8012c3c:	d008      	beq.n	8012c50 <memmove+0x28>
 8012c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c46:	e7f8      	b.n	8012c3a <memmove+0x12>
 8012c48:	4601      	mov	r1, r0
 8012c4a:	4402      	add	r2, r0
 8012c4c:	428a      	cmp	r2, r1
 8012c4e:	d100      	bne.n	8012c52 <memmove+0x2a>
 8012c50:	bd10      	pop	{r4, pc}
 8012c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c5a:	e7f7      	b.n	8012c4c <memmove+0x24>

08012c5c <__malloc_lock>:
 8012c5c:	4801      	ldr	r0, [pc, #4]	; (8012c64 <__malloc_lock+0x8>)
 8012c5e:	f7fe bf94 	b.w	8011b8a <__retarget_lock_acquire_recursive>
 8012c62:	bf00      	nop
 8012c64:	20000d10 	.word	0x20000d10

08012c68 <__malloc_unlock>:
 8012c68:	4801      	ldr	r0, [pc, #4]	; (8012c70 <__malloc_unlock+0x8>)
 8012c6a:	f7fe bf8f 	b.w	8011b8c <__retarget_lock_release_recursive>
 8012c6e:	bf00      	nop
 8012c70:	20000d10 	.word	0x20000d10

08012c74 <_realloc_r>:
 8012c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c76:	4607      	mov	r7, r0
 8012c78:	4614      	mov	r4, r2
 8012c7a:	460e      	mov	r6, r1
 8012c7c:	b921      	cbnz	r1, 8012c88 <_realloc_r+0x14>
 8012c7e:	4611      	mov	r1, r2
 8012c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012c84:	f7ff bd22 	b.w	80126cc <_malloc_r>
 8012c88:	b922      	cbnz	r2, 8012c94 <_realloc_r+0x20>
 8012c8a:	f7ff fcd3 	bl	8012634 <_free_r>
 8012c8e:	4625      	mov	r5, r4
 8012c90:	4628      	mov	r0, r5
 8012c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c94:	f000 f985 	bl	8012fa2 <_malloc_usable_size_r>
 8012c98:	42a0      	cmp	r0, r4
 8012c9a:	d20f      	bcs.n	8012cbc <_realloc_r+0x48>
 8012c9c:	4621      	mov	r1, r4
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	f7ff fd14 	bl	80126cc <_malloc_r>
 8012ca4:	4605      	mov	r5, r0
 8012ca6:	2800      	cmp	r0, #0
 8012ca8:	d0f2      	beq.n	8012c90 <_realloc_r+0x1c>
 8012caa:	4631      	mov	r1, r6
 8012cac:	4622      	mov	r2, r4
 8012cae:	f7fb fd03 	bl	800e6b8 <memcpy>
 8012cb2:	4631      	mov	r1, r6
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	f7ff fcbd 	bl	8012634 <_free_r>
 8012cba:	e7e9      	b.n	8012c90 <_realloc_r+0x1c>
 8012cbc:	4635      	mov	r5, r6
 8012cbe:	e7e7      	b.n	8012c90 <_realloc_r+0x1c>

08012cc0 <__sfputc_r>:
 8012cc0:	6893      	ldr	r3, [r2, #8]
 8012cc2:	b410      	push	{r4}
 8012cc4:	3b01      	subs	r3, #1
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	6093      	str	r3, [r2, #8]
 8012cca:	da07      	bge.n	8012cdc <__sfputc_r+0x1c>
 8012ccc:	6994      	ldr	r4, [r2, #24]
 8012cce:	42a3      	cmp	r3, r4
 8012cd0:	db01      	blt.n	8012cd6 <__sfputc_r+0x16>
 8012cd2:	290a      	cmp	r1, #10
 8012cd4:	d102      	bne.n	8012cdc <__sfputc_r+0x1c>
 8012cd6:	bc10      	pop	{r4}
 8012cd8:	f7fd baf6 	b.w	80102c8 <__swbuf_r>
 8012cdc:	6813      	ldr	r3, [r2, #0]
 8012cde:	1c58      	adds	r0, r3, #1
 8012ce0:	6010      	str	r0, [r2, #0]
 8012ce2:	7019      	strb	r1, [r3, #0]
 8012ce4:	4608      	mov	r0, r1
 8012ce6:	bc10      	pop	{r4}
 8012ce8:	4770      	bx	lr

08012cea <__sfputs_r>:
 8012cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cec:	4606      	mov	r6, r0
 8012cee:	460f      	mov	r7, r1
 8012cf0:	4614      	mov	r4, r2
 8012cf2:	18d5      	adds	r5, r2, r3
 8012cf4:	42ac      	cmp	r4, r5
 8012cf6:	d101      	bne.n	8012cfc <__sfputs_r+0x12>
 8012cf8:	2000      	movs	r0, #0
 8012cfa:	e007      	b.n	8012d0c <__sfputs_r+0x22>
 8012cfc:	463a      	mov	r2, r7
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d04:	f7ff ffdc 	bl	8012cc0 <__sfputc_r>
 8012d08:	1c43      	adds	r3, r0, #1
 8012d0a:	d1f3      	bne.n	8012cf4 <__sfputs_r+0xa>
 8012d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012d10 <_vfiprintf_r>:
 8012d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d14:	460d      	mov	r5, r1
 8012d16:	4614      	mov	r4, r2
 8012d18:	4698      	mov	r8, r3
 8012d1a:	4606      	mov	r6, r0
 8012d1c:	b09d      	sub	sp, #116	; 0x74
 8012d1e:	b118      	cbz	r0, 8012d28 <_vfiprintf_r+0x18>
 8012d20:	6983      	ldr	r3, [r0, #24]
 8012d22:	b90b      	cbnz	r3, 8012d28 <_vfiprintf_r+0x18>
 8012d24:	f7fe fb28 	bl	8011378 <__sinit>
 8012d28:	4b89      	ldr	r3, [pc, #548]	; (8012f50 <_vfiprintf_r+0x240>)
 8012d2a:	429d      	cmp	r5, r3
 8012d2c:	d11b      	bne.n	8012d66 <_vfiprintf_r+0x56>
 8012d2e:	6875      	ldr	r5, [r6, #4]
 8012d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d32:	07d9      	lsls	r1, r3, #31
 8012d34:	d405      	bmi.n	8012d42 <_vfiprintf_r+0x32>
 8012d36:	89ab      	ldrh	r3, [r5, #12]
 8012d38:	059a      	lsls	r2, r3, #22
 8012d3a:	d402      	bmi.n	8012d42 <_vfiprintf_r+0x32>
 8012d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d3e:	f7fe ff24 	bl	8011b8a <__retarget_lock_acquire_recursive>
 8012d42:	89ab      	ldrh	r3, [r5, #12]
 8012d44:	071b      	lsls	r3, r3, #28
 8012d46:	d501      	bpl.n	8012d4c <_vfiprintf_r+0x3c>
 8012d48:	692b      	ldr	r3, [r5, #16]
 8012d4a:	b9eb      	cbnz	r3, 8012d88 <_vfiprintf_r+0x78>
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	4630      	mov	r0, r6
 8012d50:	f7fd fb0c 	bl	801036c <__swsetup_r>
 8012d54:	b1c0      	cbz	r0, 8012d88 <_vfiprintf_r+0x78>
 8012d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d58:	07dc      	lsls	r4, r3, #31
 8012d5a:	d50e      	bpl.n	8012d7a <_vfiprintf_r+0x6a>
 8012d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d60:	b01d      	add	sp, #116	; 0x74
 8012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d66:	4b7b      	ldr	r3, [pc, #492]	; (8012f54 <_vfiprintf_r+0x244>)
 8012d68:	429d      	cmp	r5, r3
 8012d6a:	d101      	bne.n	8012d70 <_vfiprintf_r+0x60>
 8012d6c:	68b5      	ldr	r5, [r6, #8]
 8012d6e:	e7df      	b.n	8012d30 <_vfiprintf_r+0x20>
 8012d70:	4b79      	ldr	r3, [pc, #484]	; (8012f58 <_vfiprintf_r+0x248>)
 8012d72:	429d      	cmp	r5, r3
 8012d74:	bf08      	it	eq
 8012d76:	68f5      	ldreq	r5, [r6, #12]
 8012d78:	e7da      	b.n	8012d30 <_vfiprintf_r+0x20>
 8012d7a:	89ab      	ldrh	r3, [r5, #12]
 8012d7c:	0598      	lsls	r0, r3, #22
 8012d7e:	d4ed      	bmi.n	8012d5c <_vfiprintf_r+0x4c>
 8012d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d82:	f7fe ff03 	bl	8011b8c <__retarget_lock_release_recursive>
 8012d86:	e7e9      	b.n	8012d5c <_vfiprintf_r+0x4c>
 8012d88:	2300      	movs	r3, #0
 8012d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d8c:	2320      	movs	r3, #32
 8012d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d92:	2330      	movs	r3, #48	; 0x30
 8012d94:	f04f 0901 	mov.w	r9, #1
 8012d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012f5c <_vfiprintf_r+0x24c>
 8012da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012da4:	4623      	mov	r3, r4
 8012da6:	469a      	mov	sl, r3
 8012da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dac:	b10a      	cbz	r2, 8012db2 <_vfiprintf_r+0xa2>
 8012dae:	2a25      	cmp	r2, #37	; 0x25
 8012db0:	d1f9      	bne.n	8012da6 <_vfiprintf_r+0x96>
 8012db2:	ebba 0b04 	subs.w	fp, sl, r4
 8012db6:	d00b      	beq.n	8012dd0 <_vfiprintf_r+0xc0>
 8012db8:	465b      	mov	r3, fp
 8012dba:	4622      	mov	r2, r4
 8012dbc:	4629      	mov	r1, r5
 8012dbe:	4630      	mov	r0, r6
 8012dc0:	f7ff ff93 	bl	8012cea <__sfputs_r>
 8012dc4:	3001      	adds	r0, #1
 8012dc6:	f000 80aa 	beq.w	8012f1e <_vfiprintf_r+0x20e>
 8012dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dcc:	445a      	add	r2, fp
 8012dce:	9209      	str	r2, [sp, #36]	; 0x24
 8012dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	f000 80a2 	beq.w	8012f1e <_vfiprintf_r+0x20e>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8012de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012de4:	f10a 0a01 	add.w	sl, sl, #1
 8012de8:	9304      	str	r3, [sp, #16]
 8012dea:	9307      	str	r3, [sp, #28]
 8012dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012df0:	931a      	str	r3, [sp, #104]	; 0x68
 8012df2:	4654      	mov	r4, sl
 8012df4:	2205      	movs	r2, #5
 8012df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dfa:	4858      	ldr	r0, [pc, #352]	; (8012f5c <_vfiprintf_r+0x24c>)
 8012dfc:	f7fe ff46 	bl	8011c8c <memchr>
 8012e00:	9a04      	ldr	r2, [sp, #16]
 8012e02:	b9d8      	cbnz	r0, 8012e3c <_vfiprintf_r+0x12c>
 8012e04:	06d1      	lsls	r1, r2, #27
 8012e06:	bf44      	itt	mi
 8012e08:	2320      	movmi	r3, #32
 8012e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e0e:	0713      	lsls	r3, r2, #28
 8012e10:	bf44      	itt	mi
 8012e12:	232b      	movmi	r3, #43	; 0x2b
 8012e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e18:	f89a 3000 	ldrb.w	r3, [sl]
 8012e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8012e1e:	d015      	beq.n	8012e4c <_vfiprintf_r+0x13c>
 8012e20:	4654      	mov	r4, sl
 8012e22:	2000      	movs	r0, #0
 8012e24:	f04f 0c0a 	mov.w	ip, #10
 8012e28:	9a07      	ldr	r2, [sp, #28]
 8012e2a:	4621      	mov	r1, r4
 8012e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e30:	3b30      	subs	r3, #48	; 0x30
 8012e32:	2b09      	cmp	r3, #9
 8012e34:	d94e      	bls.n	8012ed4 <_vfiprintf_r+0x1c4>
 8012e36:	b1b0      	cbz	r0, 8012e66 <_vfiprintf_r+0x156>
 8012e38:	9207      	str	r2, [sp, #28]
 8012e3a:	e014      	b.n	8012e66 <_vfiprintf_r+0x156>
 8012e3c:	eba0 0308 	sub.w	r3, r0, r8
 8012e40:	fa09 f303 	lsl.w	r3, r9, r3
 8012e44:	4313      	orrs	r3, r2
 8012e46:	46a2      	mov	sl, r4
 8012e48:	9304      	str	r3, [sp, #16]
 8012e4a:	e7d2      	b.n	8012df2 <_vfiprintf_r+0xe2>
 8012e4c:	9b03      	ldr	r3, [sp, #12]
 8012e4e:	1d19      	adds	r1, r3, #4
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	9103      	str	r1, [sp, #12]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	bfbb      	ittet	lt
 8012e58:	425b      	neglt	r3, r3
 8012e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8012e5e:	9307      	strge	r3, [sp, #28]
 8012e60:	9307      	strlt	r3, [sp, #28]
 8012e62:	bfb8      	it	lt
 8012e64:	9204      	strlt	r2, [sp, #16]
 8012e66:	7823      	ldrb	r3, [r4, #0]
 8012e68:	2b2e      	cmp	r3, #46	; 0x2e
 8012e6a:	d10c      	bne.n	8012e86 <_vfiprintf_r+0x176>
 8012e6c:	7863      	ldrb	r3, [r4, #1]
 8012e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e70:	d135      	bne.n	8012ede <_vfiprintf_r+0x1ce>
 8012e72:	9b03      	ldr	r3, [sp, #12]
 8012e74:	3402      	adds	r4, #2
 8012e76:	1d1a      	adds	r2, r3, #4
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	9203      	str	r2, [sp, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	bfb8      	it	lt
 8012e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e84:	9305      	str	r3, [sp, #20]
 8012e86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f6c <_vfiprintf_r+0x25c>
 8012e8a:	2203      	movs	r2, #3
 8012e8c:	4650      	mov	r0, sl
 8012e8e:	7821      	ldrb	r1, [r4, #0]
 8012e90:	f7fe fefc 	bl	8011c8c <memchr>
 8012e94:	b140      	cbz	r0, 8012ea8 <_vfiprintf_r+0x198>
 8012e96:	2340      	movs	r3, #64	; 0x40
 8012e98:	eba0 000a 	sub.w	r0, r0, sl
 8012e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8012ea0:	9b04      	ldr	r3, [sp, #16]
 8012ea2:	3401      	adds	r4, #1
 8012ea4:	4303      	orrs	r3, r0
 8012ea6:	9304      	str	r3, [sp, #16]
 8012ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eac:	2206      	movs	r2, #6
 8012eae:	482c      	ldr	r0, [pc, #176]	; (8012f60 <_vfiprintf_r+0x250>)
 8012eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012eb4:	f7fe feea 	bl	8011c8c <memchr>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	d03f      	beq.n	8012f3c <_vfiprintf_r+0x22c>
 8012ebc:	4b29      	ldr	r3, [pc, #164]	; (8012f64 <_vfiprintf_r+0x254>)
 8012ebe:	bb1b      	cbnz	r3, 8012f08 <_vfiprintf_r+0x1f8>
 8012ec0:	9b03      	ldr	r3, [sp, #12]
 8012ec2:	3307      	adds	r3, #7
 8012ec4:	f023 0307 	bic.w	r3, r3, #7
 8012ec8:	3308      	adds	r3, #8
 8012eca:	9303      	str	r3, [sp, #12]
 8012ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ece:	443b      	add	r3, r7
 8012ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ed2:	e767      	b.n	8012da4 <_vfiprintf_r+0x94>
 8012ed4:	460c      	mov	r4, r1
 8012ed6:	2001      	movs	r0, #1
 8012ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012edc:	e7a5      	b.n	8012e2a <_vfiprintf_r+0x11a>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	f04f 0c0a 	mov.w	ip, #10
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	3401      	adds	r4, #1
 8012ee8:	9305      	str	r3, [sp, #20]
 8012eea:	4620      	mov	r0, r4
 8012eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ef0:	3a30      	subs	r2, #48	; 0x30
 8012ef2:	2a09      	cmp	r2, #9
 8012ef4:	d903      	bls.n	8012efe <_vfiprintf_r+0x1ee>
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d0c5      	beq.n	8012e86 <_vfiprintf_r+0x176>
 8012efa:	9105      	str	r1, [sp, #20]
 8012efc:	e7c3      	b.n	8012e86 <_vfiprintf_r+0x176>
 8012efe:	4604      	mov	r4, r0
 8012f00:	2301      	movs	r3, #1
 8012f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f06:	e7f0      	b.n	8012eea <_vfiprintf_r+0x1da>
 8012f08:	ab03      	add	r3, sp, #12
 8012f0a:	9300      	str	r3, [sp, #0]
 8012f0c:	462a      	mov	r2, r5
 8012f0e:	4630      	mov	r0, r6
 8012f10:	4b15      	ldr	r3, [pc, #84]	; (8012f68 <_vfiprintf_r+0x258>)
 8012f12:	a904      	add	r1, sp, #16
 8012f14:	f7fb fc84 	bl	800e820 <_printf_float>
 8012f18:	4607      	mov	r7, r0
 8012f1a:	1c78      	adds	r0, r7, #1
 8012f1c:	d1d6      	bne.n	8012ecc <_vfiprintf_r+0x1bc>
 8012f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f20:	07d9      	lsls	r1, r3, #31
 8012f22:	d405      	bmi.n	8012f30 <_vfiprintf_r+0x220>
 8012f24:	89ab      	ldrh	r3, [r5, #12]
 8012f26:	059a      	lsls	r2, r3, #22
 8012f28:	d402      	bmi.n	8012f30 <_vfiprintf_r+0x220>
 8012f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f2c:	f7fe fe2e 	bl	8011b8c <__retarget_lock_release_recursive>
 8012f30:	89ab      	ldrh	r3, [r5, #12]
 8012f32:	065b      	lsls	r3, r3, #25
 8012f34:	f53f af12 	bmi.w	8012d5c <_vfiprintf_r+0x4c>
 8012f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f3a:	e711      	b.n	8012d60 <_vfiprintf_r+0x50>
 8012f3c:	ab03      	add	r3, sp, #12
 8012f3e:	9300      	str	r3, [sp, #0]
 8012f40:	462a      	mov	r2, r5
 8012f42:	4630      	mov	r0, r6
 8012f44:	4b08      	ldr	r3, [pc, #32]	; (8012f68 <_vfiprintf_r+0x258>)
 8012f46:	a904      	add	r1, sp, #16
 8012f48:	f7fb ff06 	bl	800ed58 <_printf_i>
 8012f4c:	e7e4      	b.n	8012f18 <_vfiprintf_r+0x208>
 8012f4e:	bf00      	nop
 8012f50:	08013fec 	.word	0x08013fec
 8012f54:	0801400c 	.word	0x0801400c
 8012f58:	08013fcc 	.word	0x08013fcc
 8012f5c:	0801420c 	.word	0x0801420c
 8012f60:	08014216 	.word	0x08014216
 8012f64:	0800e821 	.word	0x0800e821
 8012f68:	08012ceb 	.word	0x08012ceb
 8012f6c:	08014212 	.word	0x08014212

08012f70 <_read_r>:
 8012f70:	b538      	push	{r3, r4, r5, lr}
 8012f72:	4604      	mov	r4, r0
 8012f74:	4608      	mov	r0, r1
 8012f76:	4611      	mov	r1, r2
 8012f78:	2200      	movs	r2, #0
 8012f7a:	4d05      	ldr	r5, [pc, #20]	; (8012f90 <_read_r+0x20>)
 8012f7c:	602a      	str	r2, [r5, #0]
 8012f7e:	461a      	mov	r2, r3
 8012f80:	f7f3 fce3 	bl	800694a <_read>
 8012f84:	1c43      	adds	r3, r0, #1
 8012f86:	d102      	bne.n	8012f8e <_read_r+0x1e>
 8012f88:	682b      	ldr	r3, [r5, #0]
 8012f8a:	b103      	cbz	r3, 8012f8e <_read_r+0x1e>
 8012f8c:	6023      	str	r3, [r4, #0]
 8012f8e:	bd38      	pop	{r3, r4, r5, pc}
 8012f90:	20000d18 	.word	0x20000d18

08012f94 <abort>:
 8012f94:	2006      	movs	r0, #6
 8012f96:	b508      	push	{r3, lr}
 8012f98:	f000 f834 	bl	8013004 <raise>
 8012f9c:	2001      	movs	r0, #1
 8012f9e:	f7f3 fcca 	bl	8006936 <_exit>

08012fa2 <_malloc_usable_size_r>:
 8012fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fa6:	1f18      	subs	r0, r3, #4
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	bfbc      	itt	lt
 8012fac:	580b      	ldrlt	r3, [r1, r0]
 8012fae:	18c0      	addlt	r0, r0, r3
 8012fb0:	4770      	bx	lr

08012fb2 <_raise_r>:
 8012fb2:	291f      	cmp	r1, #31
 8012fb4:	b538      	push	{r3, r4, r5, lr}
 8012fb6:	4604      	mov	r4, r0
 8012fb8:	460d      	mov	r5, r1
 8012fba:	d904      	bls.n	8012fc6 <_raise_r+0x14>
 8012fbc:	2316      	movs	r3, #22
 8012fbe:	6003      	str	r3, [r0, #0]
 8012fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fc4:	bd38      	pop	{r3, r4, r5, pc}
 8012fc6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012fc8:	b112      	cbz	r2, 8012fd0 <_raise_r+0x1e>
 8012fca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fce:	b94b      	cbnz	r3, 8012fe4 <_raise_r+0x32>
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f000 f831 	bl	8013038 <_getpid_r>
 8012fd6:	462a      	mov	r2, r5
 8012fd8:	4601      	mov	r1, r0
 8012fda:	4620      	mov	r0, r4
 8012fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fe0:	f000 b818 	b.w	8013014 <_kill_r>
 8012fe4:	2b01      	cmp	r3, #1
 8012fe6:	d00a      	beq.n	8012ffe <_raise_r+0x4c>
 8012fe8:	1c59      	adds	r1, r3, #1
 8012fea:	d103      	bne.n	8012ff4 <_raise_r+0x42>
 8012fec:	2316      	movs	r3, #22
 8012fee:	6003      	str	r3, [r0, #0]
 8012ff0:	2001      	movs	r0, #1
 8012ff2:	e7e7      	b.n	8012fc4 <_raise_r+0x12>
 8012ff4:	2400      	movs	r4, #0
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012ffc:	4798      	blx	r3
 8012ffe:	2000      	movs	r0, #0
 8013000:	e7e0      	b.n	8012fc4 <_raise_r+0x12>
	...

08013004 <raise>:
 8013004:	4b02      	ldr	r3, [pc, #8]	; (8013010 <raise+0xc>)
 8013006:	4601      	mov	r1, r0
 8013008:	6818      	ldr	r0, [r3, #0]
 801300a:	f7ff bfd2 	b.w	8012fb2 <_raise_r>
 801300e:	bf00      	nop
 8013010:	2000007c 	.word	0x2000007c

08013014 <_kill_r>:
 8013014:	b538      	push	{r3, r4, r5, lr}
 8013016:	2300      	movs	r3, #0
 8013018:	4d06      	ldr	r5, [pc, #24]	; (8013034 <_kill_r+0x20>)
 801301a:	4604      	mov	r4, r0
 801301c:	4608      	mov	r0, r1
 801301e:	4611      	mov	r1, r2
 8013020:	602b      	str	r3, [r5, #0]
 8013022:	f7f3 fc78 	bl	8006916 <_kill>
 8013026:	1c43      	adds	r3, r0, #1
 8013028:	d102      	bne.n	8013030 <_kill_r+0x1c>
 801302a:	682b      	ldr	r3, [r5, #0]
 801302c:	b103      	cbz	r3, 8013030 <_kill_r+0x1c>
 801302e:	6023      	str	r3, [r4, #0]
 8013030:	bd38      	pop	{r3, r4, r5, pc}
 8013032:	bf00      	nop
 8013034:	20000d18 	.word	0x20000d18

08013038 <_getpid_r>:
 8013038:	f7f3 bc66 	b.w	8006908 <_getpid>

0801303c <_init>:
 801303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801303e:	bf00      	nop
 8013040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013042:	bc08      	pop	{r3}
 8013044:	469e      	mov	lr, r3
 8013046:	4770      	bx	lr

08013048 <_fini>:
 8013048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801304a:	bf00      	nop
 801304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801304e:	bc08      	pop	{r3}
 8013050:	469e      	mov	lr, r3
 8013052:	4770      	bx	lr
