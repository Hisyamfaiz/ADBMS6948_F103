
ADBMS6948_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e4c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000120c  08013038  08013038  00023038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014244  08014244  00030250  2**0
                  CONTENTS
  4 .ARM          00000000  08014244  08014244  00030250  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014244  08014244  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014244  08014244  00024244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014248  08014248  00024248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0801424c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f0  20000250  0801449c  00030250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  0801449c  00030b40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031804  00000000  00000000  00030279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a31  00000000  00000000  00061a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf0  00000000  00000000  000674b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac0  00000000  00000000  000691a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000243d9  00000000  00000000  0006ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ab9  00000000  00000000  0008f039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9668  00000000  00000000  000b5af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f15a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f20  00000000  00000000  0016f1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000250 	.word	0x20000250
 8000204:	00000000 	.word	0x00000000
 8000208:	0801301c 	.word	0x0801301c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000254 	.word	0x20000254
 8000224:	0801301c 	.word	0x0801301c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4605      	mov	r5, r0
 800127a:	4621      	mov	r1, r4
 800127c:	4628      	mov	r0, r5
 800127e:	2200      	movs	r2, #0
 8001280:	2300      	movs	r3, #0
 8001282:	f7ff fc07 	bl	8000a94 <__aeabi_dcmplt>
 8001286:	b928      	cbnz	r0, 8001294 <__aeabi_d2lz+0x20>
 8001288:	4628      	mov	r0, r5
 800128a:	4621      	mov	r1, r4
 800128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001290:	f000 b80a 	b.w	80012a8 <__aeabi_d2ulz>
 8001294:	4628      	mov	r0, r5
 8001296:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800129a:	f000 f805 	bl	80012a8 <__aeabi_d2ulz>
 800129e:	4240      	negs	r0, r0
 80012a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	bf00      	nop

080012a8 <__aeabi_d2ulz>:
 80012a8:	b5d0      	push	{r4, r6, r7, lr}
 80012aa:	2200      	movs	r2, #0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__aeabi_d2ulz+0x34>)
 80012ae:	4606      	mov	r6, r0
 80012b0:	460f      	mov	r7, r1
 80012b2:	f7ff f97d 	bl	80005b0 <__aeabi_dmul>
 80012b6:	f7ff fc53 	bl	8000b60 <__aeabi_d2uiz>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_ui2d>
 80012c0:	2200      	movs	r2, #0
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <__aeabi_d2ulz+0x38>)
 80012c4:	f7ff f974 	bl	80005b0 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4630      	mov	r0, r6
 80012ce:	4639      	mov	r1, r7
 80012d0:	f7fe ffb6 	bl	8000240 <__aeabi_dsub>
 80012d4:	f7ff fc44 	bl	8000b60 <__aeabi_d2uiz>
 80012d8:	4621      	mov	r1, r4
 80012da:	bdd0      	pop	{r4, r6, r7, pc}
 80012dc:	3df00000 	.word	0x3df00000
 80012e0:	41f00000 	.word	0x41f00000

080012e4 <_Z11Adbms_Delaym>:
extern "C" void Adbms6948_measure_aux_voltage(const uint8_t knChainId, int nRet);
extern "C" void Adbms6948_measure_status_voltage(const uint8_t knChainId, int nRet);
extern "C" void Adbms6948_Discharge_Cell (uint16 Unbalanced_Cell);

void Adbms_Delay(uint32_t ms)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f005 fd25 	bl	8006d3c <HAL_Delay>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_Z18Adbms6948_SPI_Lockv>:
uint32_t Adbms_Timer_GetTick(void)
{
	return HAL_GetTick();
}

void Adbms6948_SPI_Lock(void){}
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <_Z20Adbms6948_SPI_Unlockv>:
void Adbms6948_SPI_Unlock(void){}
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
	...

08001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>:
{

}

void Adbms6948_SPI_WriteRead(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af02      	add	r7, sp, #8
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	4613      	mov	r3, r2
 8001320:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	480e      	ldr	r0, [pc, #56]	; (8001364 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x50>)
 800132a:	f007 fea5 	bl	8009078 <HAL_GPIO_WritePin>
	status = HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Size, 1000);
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	68f9      	ldr	r1, [r7, #12]
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x54>)
 800133c:	f009 ff0e 	bl	800b15c <HAL_SPI_TransmitReceive>
 8001340:	4603      	mov	r3, r0
 8001342:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) {
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x3c>
		printf("SPI transmit ERROR.\r\n");
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <_Z23Adbms6948_SPI_WriteReadPhS_t+0x58>)
 800134c:	f00e f89a 	bl	800f484 <puts>
	}
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <_Z23Adbms6948_SPI_WriteReadPhS_t+0x50>)
 8001358:	f007 fe8e 	bl	8009078 <HAL_GPIO_WritePin>
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40011000 	.word	0x40011000
 8001368:	20000a20 	.word	0x20000a20
 800136c:	08013038 	.word	0x08013038

08001370 <Adbms_Init>:

void Adbms_Init(void *argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	init:
	nRet = Adbms6948_Init(&koConfig);
 8001378:	4809      	ldr	r0, [pc, #36]	; (80013a0 <Adbms_Init+0x30>)
 800137a:	f00a feb3 	bl	800c0e4 <_Z14Adbms6948_InitPK17Adbms6948_CfgType>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <Adbms_Init+0x34>)
 8001384:	601a      	str	r2, [r3, #0]

	if (nRet != E_OK) {
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <Adbms_Init+0x34>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <Adbms_Init+0x28>
		HAL_Delay(1000);
 800138e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001392:	f005 fcd3 	bl	8006d3c <HAL_Delay>
		goto init;
 8001396:	e7ef      	b.n	8001378 <Adbms_Init+0x8>
	}
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000002c 	.word	0x2000002c
 80013a4:	20000348 	.word	0x20000348

080013a8 <Adbms6948_measure_cells>:
		printf("Write Failed\n");
	}
}

void Adbms6948_measure_cells(const uint8_t knChainId, int nRet)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
	Adbms6948_Cmn_SendCommandOnly(0x0028, TRUE, 0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	2028      	movs	r0, #40	; 0x28
 80013ba:	f00b fd46 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	Adbms_Delay(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff ff90 	bl	80012e4 <_Z11Adbms_Delaym>
	Adbms6948_TrigCADCInputs oCADCInputs{
 80013c4:	2300      	movs	r3, #0
 80013c6:	723b      	strb	r3, [r7, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	727b      	strb	r3, [r7, #9]
 80013cc:	2300      	movs	r3, #0
 80013ce:	72bb      	strb	r3, [r7, #10]
 80013d0:	2300      	movs	r3, #0
 80013d2:	72fb      	strb	r3, [r7, #11]
 80013d4:	2300      	movs	r3, #0
 80013d6:	733b      	strb	r3, [r7, #12]
		0,
		1,
		0,
		0,
		ADBMS6948_CELL_OW_NONE};
	if(nRet == 0) {
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <Adbms6948_measure_cells+0x64>

		nRet = Adbms6948_TrigCADC(&oCADCInputs, knChainId);
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00a fe88 	bl	800c0fc <_Z18Adbms6948_TrigCADCP24Adbms6948_TrigCADCInputsh>
 80013ec:	4603      	mov	r3, r0
 80013ee:	603b      	str	r3, [r7, #0]
		Adbms_Delay(1); //1.1ms
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff ff77 	bl	80012e4 <_Z11Adbms_Delaym>

		nRet = Adbms6948_ReadCellVolt(ADBMS6948_CELL_MEAS_DATA,
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <Adbms6948_measure_cells+0xc0>)
 80013fe:	2106      	movs	r1, #6
 8001400:	2000      	movs	r0, #0
 8001402:	f00a fe9b 	bl	800c13c <_Z22Adbms6948_ReadCellVolt26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePs21Adbms6948_SnapSelTypeh>
 8001406:	4603      	mov	r3, r0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	e002      	b.n	8001412 <Adbms6948_measure_cells+0x6a>
				ADBMS6948_SEND_NONE,
				knChainId);
	}

	else {
		printf("Init Failed\n");
 800140c:	4817      	ldr	r0, [pc, #92]	; (800146c <Adbms6948_measure_cells+0xc4>)
 800140e:	f00e f839 	bl	800f484 <puts>
	}
	for(uint8_t J=0; J<10; J++){
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b09      	cmp	r3, #9
 800141a:	d81b      	bhi.n	8001454 <Adbms6948_measure_cells+0xac>
		CellVoltage[J] = (float)(anCellVolt[J] * 0.000150f + 1.5f);
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <Adbms6948_measure_cells+0xc0>)
 8001420:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fcc5 	bl	8000db4 <__aeabi_i2f>
 800142a:	4603      	mov	r3, r0
 800142c:	4910      	ldr	r1, [pc, #64]	; (8001470 <Adbms6948_measure_cells+0xc8>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fd14 	bl	8000e5c <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	7bfc      	ldrb	r4, [r7, #15]
 8001438:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fc05 	bl	8000c4c <__addsf3>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <Adbms6948_measure_cells+0xcc>)
 8001448:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint8_t J=0; J<10; J++){
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	3301      	adds	r3, #1
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	e7e0      	b.n	8001416 <Adbms6948_measure_cells+0x6e>
	}
	Adbms6948_Cmn_SendCommandOnly(0x0029, TRUE, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	2029      	movs	r0, #41	; 0x29
 800145a:	f00b fcf6 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	20000320 	.word	0x20000320
 800146c:	08013080 	.word	0x08013080
 8001470:	391d4952 	.word	0x391d4952
 8001474:	200009e0 	.word	0x200009e0

08001478 <Adbms6948_measure_current>:


void Adbms6948_measure_current(const uint8_t knChainId, int nRet)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af02      	add	r7, sp, #8
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]

	Adbms6948_TrigI1ADCInputs oI1ADCInputs{1, 1, ADBMS6948_CURRENT_OW_NONE};
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <Adbms6948_measure_current+0x98>)
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	4611      	mov	r1, r2
 800148e:	8019      	strh	r1, [r3, #0]
 8001490:	3302      	adds	r3, #2
 8001492:	0c12      	lsrs	r2, r2, #16
 8001494:	701a      	strb	r2, [r3, #0]

	if(nRet == 0) {
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d12e      	bne.n	80014fa <Adbms6948_measure_current+0x82>
		Adbms6948_TrigI1ADC(&oI1ADCInputs, knChainId);
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00a fe39 	bl	800c11c <_Z19Adbms6948_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>
		Adbms_Delay(1); //1.1ms
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff ff1a 	bl	80012e4 <_Z11Adbms_Delaym>
		Adbms6948_ReadCurrent(ADBMS6948_CURRENT_MEAS_DATA,
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2300      	movs	r3, #0
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <Adbms6948_measure_current+0x9c>)
 80014b8:	2100      	movs	r1, #0
 80014ba:	2000      	movs	r0, #0
 80014bc:	f00a fe54 	bl	800c168 <_Z21Adbms6948_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>
				ADBMS6948_CURRENT_I1,
				&nCurrent,
				ADBMS6948_SEND_NONE,
				knChainId);
		Current = (float) (nCurrent)*0.000445f - 0.0326;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <Adbms6948_measure_current+0x9c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc75 	bl	8000db4 <__aeabi_i2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4912      	ldr	r1, [pc, #72]	; (8001518 <Adbms6948_measure_current+0xa0>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fcc4 	bl	8000e5c <__aeabi_fmul>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f812 	bl	8000500 <__aeabi_f2d>
 80014dc:	a30a      	add	r3, pc, #40	; (adr r3, 8001508 <Adbms6948_measure_current+0x90>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7fe fead 	bl	8000240 <__aeabi_dsub>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb57 	bl	8000ba0 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <Adbms6948_measure_current+0xa4>)
 80014f6:	6013      	str	r3, [r2, #0]
	}

	else {
		printf("Init Failed\n");
	}
}
 80014f8:	e002      	b.n	8001500 <Adbms6948_measure_current+0x88>
		printf("Init Failed\n");
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <Adbms6948_measure_current+0xa8>)
 80014fc:	f00d ffc2 	bl	800f484 <puts>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	7bb2fec5 	.word	0x7bb2fec5
 800150c:	3fa0b0f2 	.word	0x3fa0b0f2
 8001510:	0801308c 	.word	0x0801308c
 8001514:	20000340 	.word	0x20000340
 8001518:	39e94ee4 	.word	0x39e94ee4
 800151c:	200009d4 	.word	0x200009d4
 8001520:	08013080 	.word	0x08013080

08001524 <Adbms6948_Discharge_Cell>:
			knChainId);
	PrintStatusVoltage(&anStatVoltage[0]);
}

void Adbms6948_Discharge_Cell (uint16 Unbalanced_Cell)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
	Adbms6948_discharge_cell(Unbalanced_Cell);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	4618      	mov	r0, r3
 8001532:	f00b faef 	bl	800cb14 <_Z24Adbms6948_discharge_cellt>
	Adbms_Delay(20); //20ms
 8001536:	2014      	movs	r0, #20
 8001538:	f7ff fed4 	bl	80012e4 <_Z11Adbms_Delaym>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <Batt_Discharge_Mode>:
extern uint16_t LifeTime;
extern uint8_t BATT_State;

//**************Discharge Operation Mode **********************//
void Batt_Discharge_Mode(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON				||
 8001548:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <Batt_Discharge_Mode+0x84>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d01f      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_overtemperature==ON		||
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <Batt_Discharge_Mode+0x88>)
 8001552:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON				||
 8001554:	2b01      	cmp	r3, #1
 8001556:	d01b      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_undertemperature==ON		||
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <Batt_Discharge_Mode+0x8c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON		||
 800155c:	2b01      	cmp	r3, #1
 800155e:	d017      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_overcurrentdischarge==ON	||
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <Batt_Discharge_Mode+0x90>)
 8001562:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON		||
 8001564:	2b01      	cmp	r3, #1
 8001566:	d013      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_SOCOverDischarge==ON		||
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <Batt_Discharge_Mode+0x94>)
 800156a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON	||
 800156c:	2b01      	cmp	r3, #1
 800156e:	d00f      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_shortcircuit==ON			||
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <Batt_Discharge_Mode+0x98>)
 8001572:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON		||
 8001574:	2b01      	cmp	r3, #1
 8001576:	d00b      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_unbalance==ON				||
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <Batt_Discharge_Mode+0x9c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON			||
 800157c:	2b01      	cmp	r3, #1
 800157e:	d007      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_systemfailure==ON			||
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <Batt_Discharge_Mode+0xa0>)
 8001582:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON				||
 8001584:	2b01      	cmp	r3, #1
 8001586:	d003      	beq.n	8001590 <Batt_Discharge_Mode+0x4c>
			flag_trip_cellundervoltage == ON)
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <Batt_Discharge_Mode+0xa4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_systemfailure==ON			||
 800158c:	2b01      	cmp	r3, #1
 800158e:	d102      	bne.n	8001596 <Batt_Discharge_Mode+0x52>
	{
		Batt_Open_Mode();
 8001590:	f000 f910 	bl	80017b4 <Batt_Open_Mode>
 8001594:	e015      	b.n	80015c2 <Batt_Discharge_Mode+0x7e>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <Batt_Discharge_Mode+0xa8>)
 800159e:	f007 fd6b 	bl	8009078 <HAL_GPIO_WritePin>
		BATT_State=STATE_DISCHARGE;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <Batt_Discharge_Mode+0xac>)
 80015a4:	2202      	movs	r2, #2
 80015a6:	701a      	strb	r2, [r3, #0]

		charge_state=0;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <Batt_Discharge_Mode+0xb0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <Batt_Discharge_Mode+0xb4>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <Batt_Discharge_Mode+0xb8>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <Batt_Discharge_Mode+0xbc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
	}
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000030c 	.word	0x2000030c
 80015cc:	20000308 	.word	0x20000308
 80015d0:	20000309 	.word	0x20000309
 80015d4:	2000030e 	.word	0x2000030e
 80015d8:	2000030a 	.word	0x2000030a
 80015dc:	20000310 	.word	0x20000310
 80015e0:	20000312 	.word	0x20000312
 80015e4:	20000311 	.word	0x20000311
 80015e8:	20000313 	.word	0x20000313
 80015ec:	40010800 	.word	0x40010800
 80015f0:	200009d8 	.word	0x200009d8
 80015f4:	200002c3 	.word	0x200002c3
 80015f8:	200002c4 	.word	0x200002c4
 80015fc:	200002c5 	.word	0x200002c5
 8001600:	20000785 	.word	0x20000785

08001604 <Batt_Charge_Mode>:

//**************Charge Operation Mode **********************//
void Batt_Charge_Mode(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	if(		flag_trip_overvoltage==ON		||
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <Batt_Charge_Mode+0x9c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d01b      	beq.n	8001648 <Batt_Charge_Mode+0x44>
			flag_trip_overtemperature==ON	||
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <Batt_Charge_Mode+0xa0>)
 8001612:	781b      	ldrb	r3, [r3, #0]
	if(		flag_trip_overvoltage==ON		||
 8001614:	2b01      	cmp	r3, #1
 8001616:	d017      	beq.n	8001648 <Batt_Charge_Mode+0x44>
			flag_trip_undertemperature==ON	||
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <Batt_Charge_Mode+0xa4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 800161c:	2b01      	cmp	r3, #1
 800161e:	d013      	beq.n	8001648 <Batt_Charge_Mode+0x44>
			flag_trip_overcurrentcharge==ON	||
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <Batt_Charge_Mode+0xa8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 8001624:	2b01      	cmp	r3, #1
 8001626:	d00f      	beq.n	8001648 <Batt_Charge_Mode+0x44>
			flag_trip_SOCOverCharge==ON		||
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <Batt_Charge_Mode+0xac>)
 800162a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 800162c:	2b01      	cmp	r3, #1
 800162e:	d00b      	beq.n	8001648 <Batt_Charge_Mode+0x44>
			flag_trip_shortcircuit==ON		||
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <Batt_Charge_Mode+0xb0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001634:	2b01      	cmp	r3, #1
 8001636:	d007      	beq.n	8001648 <Batt_Charge_Mode+0x44>
			flag_trip_systemfailure==ON		||
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <Batt_Charge_Mode+0xb4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 800163c:	2b01      	cmp	r3, #1
 800163e:	d003      	beq.n	8001648 <Batt_Charge_Mode+0x44>
			flag_trip_cellovervoltage == ON )
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <Batt_Charge_Mode+0xb8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
			flag_trip_systemfailure==ON		||
 8001644:	2b01      	cmp	r3, #1
 8001646:	d102      	bne.n	800164e <Batt_Charge_Mode+0x4a>
	{
		Batt_Open_Mode();
 8001648:	f000 f8b4 	bl	80017b4 <Batt_Open_Mode>
			EEPROM_WriteData(11, cycle);
			flag_write_cycle = 1;
		}
	}

}
 800164c:	e026      	b.n	800169c <Batt_Charge_Mode+0x98>
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001654:	481a      	ldr	r0, [pc, #104]	; (80016c0 <Batt_Charge_Mode+0xbc>)
 8001656:	f007 fd0f 	bl	8009078 <HAL_GPIO_WritePin>
		BATT_State=STATE_CHARGE;
 800165a:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <Batt_Charge_Mode+0xc0>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <Batt_Charge_Mode+0xc4>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
		discharge_state=0;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <Batt_Charge_Mode+0xc8>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <Batt_Charge_Mode+0xcc>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
		if (flag_write_cycle == 0){
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <Batt_Charge_Mode+0xd0>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d110      	bne.n	800169c <Batt_Charge_Mode+0x98>
			cycle = EEPROM_ReadData(11) + 1;
 800167a:	200b      	movs	r0, #11
 800167c:	f000 fad4 	bl	8001c28 <EEPROM_ReadData>
 8001680:	4603      	mov	r3, r0
 8001682:	3301      	adds	r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <Batt_Charge_Mode+0xd4>)
 8001688:	701a      	strb	r2, [r3, #0]
			EEPROM_WriteData(11, cycle);
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <Batt_Charge_Mode+0xd4>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	200b      	movs	r0, #11
 8001692:	f000 faab 	bl	8001bec <EEPROM_WriteData>
			flag_write_cycle = 1;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <Batt_Charge_Mode+0xd0>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	2000030d 	.word	0x2000030d
 80016a4:	20000308 	.word	0x20000308
 80016a8:	20000309 	.word	0x20000309
 80016ac:	2000030f 	.word	0x2000030f
 80016b0:	2000030b 	.word	0x2000030b
 80016b4:	20000310 	.word	0x20000310
 80016b8:	20000311 	.word	0x20000311
 80016bc:	20000314 	.word	0x20000314
 80016c0:	40010800 	.word	0x40010800
 80016c4:	200009d8 	.word	0x200009d8
 80016c8:	200002c3 	.word	0x200002c3
 80016cc:	200002c4 	.word	0x200002c4
 80016d0:	200002c5 	.word	0x200002c5
 80016d4:	20000785 	.word	0x20000785
 80016d8:	20000784 	.word	0x20000784

080016dc <Batt_Full_CD_Mode>:

//**************Charge-Discharge Operation Mode **********************//
void Batt_Full_CD_Mode(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
	if(flag_trip_undervoltage==ON			||
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <Batt_Full_CD_Mode+0x94>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d027      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overvoltage==ON		||
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <Batt_Full_CD_Mode+0x98>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
	if(flag_trip_undervoltage==ON			||
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d023      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overtemperature==ON	||
 80016f0:	4b21      	ldr	r3, [pc, #132]	; (8001778 <Batt_Full_CD_Mode+0x9c>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overvoltage==ON		||
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d01f      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_undertemperature==ON	||
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <Batt_Full_CD_Mode+0xa0>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature==ON	||
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d01b      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentdischarge==ON||
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <Batt_Full_CD_Mode+0xa4>)
 8001702:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature==ON	||
 8001704:	2b01      	cmp	r3, #1
 8001706:	d017      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_overcurrentcharge==ON	||
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <Batt_Full_CD_Mode+0xa8>)
 800170a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentdischarge==ON||
 800170c:	2b01      	cmp	r3, #1
 800170e:	d013      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverDischarge==ON	||
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <Batt_Full_CD_Mode+0xac>)
 8001712:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge==ON	||
 8001714:	2b01      	cmp	r3, #1
 8001716:	d00f      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_SOCOverCharge==ON		||
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <Batt_Full_CD_Mode+0xb0>)
 800171a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverDischarge==ON	||
 800171c:	2b01      	cmp	r3, #1
 800171e:	d00b      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_shortcircuit==ON		||
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <Batt_Full_CD_Mode+0xb4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge==ON		||
 8001724:	2b01      	cmp	r3, #1
 8001726:	d007      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_unbalance==ON			||
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <Batt_Full_CD_Mode+0xb8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit==ON		||
 800172c:	2b01      	cmp	r3, #1
 800172e:	d003      	beq.n	8001738 <Batt_Full_CD_Mode+0x5c>
			flag_trip_systemfailure==ON		)
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <Batt_Full_CD_Mode+0xbc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
			flag_trip_unbalance==ON			||
 8001734:	2b01      	cmp	r3, #1
 8001736:	d102      	bne.n	800173e <Batt_Full_CD_Mode+0x62>
	{
		Batt_Open_Mode();
 8001738:	f000 f83c 	bl	80017b4 <Batt_Open_Mode>
 800173c:	e015      	b.n	800176a <Batt_Full_CD_Mode+0x8e>
	}
	else
	{
		HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001744:	4815      	ldr	r0, [pc, #84]	; (800179c <Batt_Full_CD_Mode+0xc0>)
 8001746:	f007 fc97 	bl	8009078 <HAL_GPIO_WritePin>
		BATT_State=STATE_FULL_CHARGE_DISCHARGE;
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <Batt_Full_CD_Mode+0xc4>)
 800174c:	2203      	movs	r2, #3
 800174e:	701a      	strb	r2, [r3, #0]
		charge_state=1;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <Batt_Full_CD_Mode+0xc8>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
		discharge_state=1;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <Batt_Full_CD_Mode+0xcc>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		sleep_state=0;
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <Batt_Full_CD_Mode+0xd0>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
		flag_write_cycle = 0;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <Batt_Full_CD_Mode+0xd4>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
	}
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000030c 	.word	0x2000030c
 8001774:	2000030d 	.word	0x2000030d
 8001778:	20000308 	.word	0x20000308
 800177c:	20000309 	.word	0x20000309
 8001780:	2000030e 	.word	0x2000030e
 8001784:	2000030f 	.word	0x2000030f
 8001788:	2000030a 	.word	0x2000030a
 800178c:	2000030b 	.word	0x2000030b
 8001790:	20000310 	.word	0x20000310
 8001794:	20000312 	.word	0x20000312
 8001798:	20000311 	.word	0x20000311
 800179c:	40010800 	.word	0x40010800
 80017a0:	200009d8 	.word	0x200009d8
 80017a4:	200002c3 	.word	0x200002c3
 80017a8:	200002c4 	.word	0x200002c4
 80017ac:	200002c5 	.word	0x200002c5
 80017b0:	20000785 	.word	0x20000785

080017b4 <Batt_Open_Mode>:

//**************Stanby Operation Mode **********************//
void Batt_Open_Mode(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017be:	480c      	ldr	r0, [pc, #48]	; (80017f0 <Batt_Open_Mode+0x3c>)
 80017c0:	f007 fc5a 	bl	8009078 <HAL_GPIO_WritePin>
	BATT_State=STATE_STANDBY;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <Batt_Open_Mode+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
	charge_state=0;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <Batt_Open_Mode+0x44>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
	discharge_state=0;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <Batt_Open_Mode+0x48>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
	sleep_state=1;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <Batt_Open_Mode+0x4c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]

	BUZZ_Write(0);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e2:	4808      	ldr	r0, [pc, #32]	; (8001804 <Batt_Open_Mode+0x50>)
 80017e4:	f007 fc48 	bl	8009078 <HAL_GPIO_WritePin>

	check_SOC_Based_OCV();
 80017e8:	f000 f80e 	bl	8001808 <check_SOC_Based_OCV>
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40010800 	.word	0x40010800
 80017f4:	200009d8 	.word	0x200009d8
 80017f8:	200002c3 	.word	0x200002c3
 80017fc:	200002c4 	.word	0x200002c4
 8001800:	200002c5 	.word	0x200002c5
 8001804:	40011000 	.word	0x40011000

08001808 <check_SOC_Based_OCV>:

//************** SOC Calculation - OCV Based **********************//
void check_SOC_Based_OCV(void)
{
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	af00      	add	r7, sp, #0
	if(VBATT <= 51.3){
 800180c:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe75 	bl	8000500 <__aeabi_f2d>
 8001816:	a354      	add	r3, pc, #336	; (adr r3, 8001968 <check_SOC_Based_OCV+0x160>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7ff f944 	bl	8000aa8 <__aeabi_dcmple>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d025      	beq.n	8001872 <check_SOC_Based_OCV+0x6a>
		Pack_SOC = 24.03846153846*(VBATT/15.0) - 77.18750000000;
 8001826:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe68 	bl	8000500 <__aeabi_f2d>
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <check_SOC_Based_OCV+0x1a4>)
 8001836:	f7fe ffe5 	bl	8000804 <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	a34b      	add	r3, pc, #300	; (adr r3, 8001970 <check_SOC_Based_OCV+0x168>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7fe feb2 	bl	80005b0 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	a348      	add	r3, pc, #288	; (adr r3, 8001978 <check_SOC_Based_OCV+0x170>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7fe fcf1 	bl	8000240 <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f99b 	bl	8000ba0 <__aeabi_d2f>
 800186a:	4603      	mov	r3, r0
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <check_SOC_Based_OCV+0x1a8>)
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e0d4      	b.n	8001a1c <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 51.3 &&  VBATT <= 53.5){
 8001872:	4b4d      	ldr	r3, [pc, #308]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe42 	bl	8000500 <__aeabi_f2d>
 800187c:	a33a      	add	r3, pc, #232	; (adr r3, 8001968 <check_SOC_Based_OCV+0x160>)
 800187e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001882:	f7ff f925 	bl	8000ad0 <__aeabi_dcmpgt>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d02e      	beq.n	80018ea <check_SOC_Based_OCV+0xe2>
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4948      	ldr	r1, [pc, #288]	; (80019b4 <check_SOC_Based_OCV+0x1ac>)
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fc8a 	bl	80011ac <__aeabi_fcmple>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d025      	beq.n	80018ea <check_SOC_Based_OCV+0xe2>
		Pack_SOC = 135.26698598540*(VBATT/15.0) - 458.27213056570;
 800189e:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe2c 	bl	8000500 <__aeabi_f2d>
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <check_SOC_Based_OCV+0x1a4>)
 80018ae:	f7fe ffa9 	bl	8000804 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	a331      	add	r3, pc, #196	; (adr r3, 8001980 <check_SOC_Based_OCV+0x178>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe fe76 	bl	80005b0 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	a32e      	add	r3, pc, #184	; (adr r3, 8001988 <check_SOC_Based_OCV+0x180>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fcb5 	bl	8000240 <__aeabi_dsub>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f7ff f95f 	bl	8000ba0 <__aeabi_d2f>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4a32      	ldr	r2, [pc, #200]	; (80019b0 <check_SOC_Based_OCV+0x1a8>)
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e098      	b.n	8001a1c <check_SOC_Based_OCV+0x214>
	}
	else if(VBATT > 53.5 &&  VBATT <= 54.7){
 80018ea:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4931      	ldr	r1, [pc, #196]	; (80019b4 <check_SOC_Based_OCV+0x1ac>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fc6f 	bl	80011d4 <__aeabi_fcmpgt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d05d      	beq.n	80019b8 <check_SOC_Based_OCV+0x1b0>
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fdfd 	bl	8000500 <__aeabi_f2d>
 8001906:	a322      	add	r3, pc, #136	; (adr r3, 8001990 <check_SOC_Based_OCV+0x188>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7ff f8cc 	bl	8000aa8 <__aeabi_dcmple>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d050      	beq.n	80019b8 <check_SOC_Based_OCV+0x1b0>
		Pack_SOC = 332.88158563421*(VBATT/15.0) - 1161.98331356855;
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <check_SOC_Based_OCV+0x1a0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fdf0 	bl	8000500 <__aeabi_f2d>
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <check_SOC_Based_OCV+0x1a4>)
 8001926:	f7fe ff6d 	bl	8000804 <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	a319      	add	r3, pc, #100	; (adr r3, 8001998 <check_SOC_Based_OCV+0x190>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fe3a 	bl	80005b0 <__aeabi_dmul>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	a316      	add	r3, pc, #88	; (adr r3, 80019a0 <check_SOC_Based_OCV+0x198>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fc79 	bl	8000240 <__aeabi_dsub>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f923 	bl	8000ba0 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <check_SOC_Based_OCV+0x1a8>)
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e05c      	b.n	8001a1c <check_SOC_Based_OCV+0x214>
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	66666666 	.word	0x66666666
 800196c:	4049a666 	.word	0x4049a666
 8001970:	9d89d6ed 	.word	0x9d89d6ed
 8001974:	403809d8 	.word	0x403809d8
 8001978:	00000000 	.word	0x00000000
 800197c:	40534c00 	.word	0x40534c00
 8001980:	26317911 	.word	0x26317911
 8001984:	4060e88b 	.word	0x4060e88b
 8001988:	a5947ec7 	.word	0xa5947ec7
 800198c:	407ca45a 	.word	0x407ca45a
 8001990:	9999999a 	.word	0x9999999a
 8001994:	404b5999 	.word	0x404b5999
 8001998:	f989b8e3 	.word	0xf989b8e3
 800199c:	4074ce1a 	.word	0x4074ce1a
 80019a0:	e9c08a8b 	.word	0xe9c08a8b
 80019a4:	409227ee 	.word	0x409227ee
 80019a8:	2000027c 	.word	0x2000027c
 80019ac:	402e0000 	.word	0x402e0000
 80019b0:	2000031c 	.word	0x2000031c
 80019b4:	42560000 	.word	0x42560000
	}
	else if(VBATT > 54.7){
 80019b8:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <check_SOC_Based_OCV+0x380>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fd9f 	bl	8000500 <__aeabi_f2d>
 80019c2:	a365      	add	r3, pc, #404	; (adr r3, 8001b58 <check_SOC_Based_OCV+0x350>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7ff f882 	bl	8000ad0 <__aeabi_dcmpgt>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d024      	beq.n	8001a1c <check_SOC_Based_OCV+0x214>
		Pack_SOC = 111.42655038475*(VBATT/15.0) - 353.86053305809;
 80019d2:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <check_SOC_Based_OCV+0x380>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd92 	bl	8000500 <__aeabi_f2d>
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <check_SOC_Based_OCV+0x384>)
 80019e2:	f7fe ff0f 	bl	8000804 <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	a35c      	add	r3, pc, #368	; (adr r3, 8001b60 <check_SOC_Based_OCV+0x358>)
 80019f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f4:	f7fe fddc 	bl	80005b0 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	a359      	add	r3, pc, #356	; (adr r3, 8001b68 <check_SOC_Based_OCV+0x360>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fc1b 	bl	8000240 <__aeabi_dsub>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	f7ff f8c5 	bl	8000ba0 <__aeabi_d2f>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a5d      	ldr	r2, [pc, #372]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001a1a:	6013      	str	r3, [r2, #0]
	}

	Pack_SOC=(0.4884934490 * VBATT * VBATT) - (26.2875616013 * VBATT) + 348.6849534722;   //Persamaan Baterai INR 21700
 8001a1c:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <check_SOC_Based_OCV+0x380>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fd6d 	bl	8000500 <__aeabi_f2d>
 8001a26:	a352      	add	r3, pc, #328	; (adr r3, 8001b70 <check_SOC_Based_OCV+0x368>)
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fdc0 	bl	80005b0 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4614      	mov	r4, r2
 8001a36:	461d      	mov	r5, r3
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <check_SOC_Based_OCV+0x380>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fd5f 	bl	8000500 <__aeabi_f2d>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4620      	mov	r0, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	f7fe fdb1 	bl	80005b0 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4614      	mov	r4, r2
 8001a54:	461d      	mov	r5, r3
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <check_SOC_Based_OCV+0x380>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7fe fd50 	bl	8000500 <__aeabi_f2d>
 8001a60:	a345      	add	r3, pc, #276	; (adr r3, 8001b78 <check_SOC_Based_OCV+0x370>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fda3 	bl	80005b0 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4620      	mov	r0, r4
 8001a70:	4629      	mov	r1, r5
 8001a72:	f7fe fbe5 	bl	8000240 <__aeabi_dsub>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	a340      	add	r3, pc, #256	; (adr r3, 8001b80 <check_SOC_Based_OCV+0x378>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fbde 	bl	8000244 <__adddf3>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff f886 	bl	8000ba0 <__aeabi_d2f>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a3e      	ldr	r2, [pc, #248]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001a98:	6013      	str	r3, [r2, #0]
//	Pack_SOC=(147.471026094008*(VBATT/15.0) - 494.687746093127);  // Persamaan Baterai EVE ICR18650/26V

	grad=(100-0)/(batas_atas-batas_bawah);
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <check_SOC_Based_OCV+0x38c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a3e      	ldr	r2, [pc, #248]	; (8001b98 <check_SOC_Based_OCV+0x390>)
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f8cf 	bl	8000c48 <__aeabi_fsub>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4619      	mov	r1, r3
 8001aae:	483b      	ldr	r0, [pc, #236]	; (8001b9c <check_SOC_Based_OCV+0x394>)
 8001ab0:	f7ff fa88 	bl	8000fc4 <__aeabi_fdiv>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <check_SOC_Based_OCV+0x398>)
 8001aba:	601a      	str	r2, [r3, #0]
	constanta=grad*batas_bawah*(-1);
 8001abc:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <check_SOC_Based_OCV+0x398>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a35      	ldr	r2, [pc, #212]	; (8001b98 <check_SOC_Based_OCV+0x390>)
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f9c8 	bl	8000e5c <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ad2:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <check_SOC_Based_OCV+0x39c>)
 8001ad4:	6013      	str	r3, [r2, #0]
	SOC_manipulasi=grad*Pack_SOC+constanta;
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <check_SOC_Based_OCV+0x398>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f9bb 	bl	8000e5c <__aeabi_fmul>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <check_SOC_Based_OCV+0x39c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f7ff f8ab 	bl	8000c4c <__addsf3>
 8001af6:	4603      	mov	r3, r0
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <check_SOC_Based_OCV+0x3a0>)
 8001afc:	601a      	str	r2, [r3, #0]

	if(Pack_SOC>130) Pack_SOC=100;
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	492a      	ldr	r1, [pc, #168]	; (8001bac <check_SOC_Based_OCV+0x3a4>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fb65 	bl	80011d4 <__aeabi_fcmpgt>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <check_SOC_Based_OCV+0x310>
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001b12:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <check_SOC_Based_OCV+0x394>)
 8001b14:	601a      	str	r2, [r3, #0]
	else if(Pack_SOC>100) Pack_SOC=100;
	else if(Pack_SOC<0) Pack_SOC=0;
}
 8001b16:	e01b      	b.n	8001b50 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC>100) Pack_SOC=100;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	491f      	ldr	r1, [pc, #124]	; (8001b9c <check_SOC_Based_OCV+0x394>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fb58 	bl	80011d4 <__aeabi_fcmpgt>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <check_SOC_Based_OCV+0x32a>
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <check_SOC_Based_OCV+0x394>)
 8001b2e:	601a      	str	r2, [r3, #0]
}
 8001b30:	e00e      	b.n	8001b50 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fb2c 	bl	8001198 <__aeabi_fcmplt>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <check_SOC_Based_OCV+0x340>
}
 8001b46:	e003      	b.n	8001b50 <check_SOC_Based_OCV+0x348>
	else if(Pack_SOC<0) Pack_SOC=0;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <check_SOC_Based_OCV+0x388>)
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	bdb0      	pop	{r4, r5, r7, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	9999999a 	.word	0x9999999a
 8001b5c:	404b5999 	.word	0x404b5999
 8001b60:	99fc263d 	.word	0x99fc263d
 8001b64:	405bdb4c 	.word	0x405bdb4c
 8001b68:	be4fd9fa 	.word	0xbe4fd9fa
 8001b6c:	40761dc4 	.word	0x40761dc4
 8001b70:	06f0f9c2 	.word	0x06f0f9c2
 8001b74:	3fdf437a 	.word	0x3fdf437a
 8001b78:	a3192b3c 	.word	0xa3192b3c
 8001b7c:	403a499d 	.word	0x403a499d
 8001b80:	91c5a617 	.word	0x91c5a617
 8001b84:	4075caf5 	.word	0x4075caf5
 8001b88:	2000027c 	.word	0x2000027c
 8001b8c:	402e0000 	.word	0x402e0000
 8001b90:	2000031c 	.word	0x2000031c
 8001b94:	200002e4 	.word	0x200002e4
 8001b98:	200002e8 	.word	0x200002e8
 8001b9c:	42c80000 	.word	0x42c80000
 8001ba0:	200002f0 	.word	0x200002f0
 8001ba4:	200002f4 	.word	0x200002f4
 8001ba8:	200002ec 	.word	0x200002ec
 8001bac:	43020000 	.word	0x43020000

08001bb0 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c2, addr, 3, 100)!=HAL_OK){
 8001bba:	88f9      	ldrh	r1, [r7, #6]
 8001bbc:	2364      	movs	r3, #100	; 0x64
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	4808      	ldr	r0, [pc, #32]	; (8001be4 <EEPROM_isDeviceReady+0x34>)
 8001bc2:	f008 f82f 	bl	8009c24 <HAL_I2C_IsDeviceReady>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001bcc:	2140      	movs	r1, #64	; 0x40
 8001bce:	4806      	ldr	r0, [pc, #24]	; (8001be8 <EEPROM_isDeviceReady+0x38>)
 8001bd0:	f007 fa6a 	bl	80090a8 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001bd4:	2064      	movs	r0, #100	; 0x64
 8001bd6:	f005 f8b1 	bl	8006d3c <HAL_Delay>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001bda:	e7f7      	b.n	8001bcc <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000950 	.word	0x20000950
 8001be8:	40011000 	.word	0x40011000

08001bec <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af04      	add	r7, sp, #16
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	80fb      	strh	r3, [r7, #6]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c2,EEPROM_ADDRESS,addr,64,&data,1,10);
 8001bfc:	88fa      	ldrh	r2, [r7, #6]
 8001bfe:	230a      	movs	r3, #10
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	2301      	movs	r3, #1
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	1d7b      	adds	r3, r7, #5
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2340      	movs	r3, #64	; 0x40
 8001c0c:	21a0      	movs	r1, #160	; 0xa0
 8001c0e:	4805      	ldr	r0, [pc, #20]	; (8001c24 <EEPROM_WriteData+0x38>)
 8001c10:	f007 fca6 	bl	8009560 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f005 f891 	bl	8006d3c <HAL_Delay>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000950 	.word	0x20000950

08001c28 <EEPROM_ReadData>:

uint8_t EEPROM_ReadData(uint16_t addr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af04      	add	r7, sp, #16
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
	uint8_t EEPROM_data;
	HAL_I2C_Mem_Read(&hi2c2,0xA0,addr,64,&EEPROM_data,1,10);
 8001c32:	88fa      	ldrh	r2, [r7, #6]
 8001c34:	230a      	movs	r3, #10
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	f107 030f 	add.w	r3, r7, #15
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	21a0      	movs	r1, #160	; 0xa0
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <EEPROM_ReadData+0x34>)
 8001c48:	f007 fd84 	bl	8009754 <HAL_I2C_Mem_Read>
	HAL_Delay(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f005 f875 	bl	8006d3c <HAL_Delay>
	return EEPROM_data;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000950 	.word	0x20000950

08001c60 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001c72:	4a44      	ldr	r2, [pc, #272]	; (8001d84 <MX_ADC1_Init+0x124>)
 8001c74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c76:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c7e:	4b40      	ldr	r3, [pc, #256]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c84:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c8a:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001c8c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 8001c98:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c9e:	4838      	ldr	r0, [pc, #224]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001ca0:	f005 f870 	bl	8006d84 <HAL_ADC_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001caa:	f001 fcd7 	bl	800365c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cba:	1d3b      	adds	r3, r7, #4
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4830      	ldr	r0, [pc, #192]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001cc0:	f005 fa44 	bl	800714c <HAL_ADC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001cca:	f001 fcc7 	bl	800365c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4829      	ldr	r0, [pc, #164]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001cdc:	f005 fa36 	bl	800714c <HAL_ADC_ConfigChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001ce6:	f001 fcb9 	bl	800365c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cea:	2303      	movs	r3, #3
 8001cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4822      	ldr	r0, [pc, #136]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001cf8:	f005 fa28 	bl	800714c <HAL_ADC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d02:	f001 fcab 	bl	800365c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d06:	2304      	movs	r3, #4
 8001d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	481b      	ldr	r0, [pc, #108]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001d14:	f005 fa1a 	bl	800714c <HAL_ADC_ConfigChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001d1e:	f001 fc9d 	bl	800365c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d22:	2305      	movs	r3, #5
 8001d24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d26:	2305      	movs	r3, #5
 8001d28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4814      	ldr	r0, [pc, #80]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001d30:	f005 fa0c 	bl	800714c <HAL_ADC_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001d3a:	f001 fc8f 	bl	800365c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d3e:	2306      	movs	r3, #6
 8001d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001d42:	2306      	movs	r3, #6
 8001d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001d4c:	f005 f9fe 	bl	800714c <HAL_ADC_ConfigChannel>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001d56:	f001 fc81 	bl	800365c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001d5e:	2307      	movs	r3, #7
 8001d60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	; (8001d80 <MX_ADC1_Init+0x120>)
 8001d68:	f005 f9f0 	bl	800714c <HAL_ADC_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001d72:	f001 fc73 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000788 	.word	0x20000788
 8001d84:	40012400 	.word	0x40012400

08001d88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a33      	ldr	r2, [pc, #204]	; (8001e70 <HAL_ADC_MspInit+0xe8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d15f      	bne.n	8001e68 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001da8:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db2:	6193      	str	r3, [r2, #24]
 8001db4:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	6193      	str	r3, [r2, #24]
 8001de4:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <HAL_ADC_MspInit+0xec>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = LOWCELL_TEMP_Pin|HIGHCELL_TEMP_Pin|MOSFET_TEMP_Pin|CURRENT_SENSE_TEMP_Pin
 8001df0:	237e      	movs	r3, #126	; 0x7e
 8001df2:	61bb      	str	r3, [r7, #24]
                          |CURRENT_SENSOR_Pin|SPARE_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001df4:	2303      	movs	r3, #3
 8001df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	481e      	ldr	r0, [pc, #120]	; (8001e78 <HAL_ADC_MspInit+0xf0>)
 8001e00:	f006 ffa6 	bl	8008d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIDCELL_TEMP_Pin;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIDCELL_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	4619      	mov	r1, r3
 8001e12:	481a      	ldr	r0, [pc, #104]	; (8001e7c <HAL_ADC_MspInit+0xf4>)
 8001e14:	f006 ff9c 	bl	8008d50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e1a:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_ADC_MspInit+0xfc>)
 8001e1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e42:	2220      	movs	r2, #32
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e4c:	480c      	ldr	r0, [pc, #48]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e4e:	f006 fb37 	bl	80084c0 <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001e58:	f001 fc00 	bl	800365c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e60:	621a      	str	r2, [r3, #32]
 8001e62:	4a07      	ldr	r2, [pc, #28]	; (8001e80 <HAL_ADC_MspInit+0xf8>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40012400 	.word	0x40012400
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	200007b8 	.word	0x200007b8
 8001e84:	40020008 	.word	0x40020008

08001e88 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MX_CAN_Init+0x64>)
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <MX_CAN_Init+0x68>)
 8001e90:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <MX_CAN_Init+0x64>)
 8001e94:	2208      	movs	r2, #8
 8001e96:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <MX_CAN_Init+0x64>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MX_CAN_Init+0x64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_CAN_Init+0x64>)
 8001ea6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001eaa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <MX_CAN_Init+0x64>)
 8001eae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eb2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <MX_CAN_Init+0x64>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_CAN_Init+0x64>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <MX_CAN_Init+0x64>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_CAN_Init+0x64>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <MX_CAN_Init+0x64>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_CAN_Init+0x64>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_CAN_Init+0x64>)
 8001eda:	f005 fb30 	bl	800753e <HAL_CAN_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001ee4:	f001 fbba 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000818 	.word	0x20000818
 8001ef0:	40006400 	.word	0x40006400

08001ef4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <HAL_CAN_MspInit+0xc0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d14b      	bne.n	8001fac <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f14:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_CAN_MspInit+0xc4>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <HAL_CAN_MspInit+0xc4>)
 8001f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	61d3      	str	r3, [r2, #28]
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_CAN_MspInit+0xc4>)
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2c:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_CAN_MspInit+0xc4>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <HAL_CAN_MspInit+0xc4>)
 8001f32:	f043 0308 	orr.w	r3, r3, #8
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_CAN_MspInit+0xc4>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4818      	ldr	r0, [pc, #96]	; (8001fbc <HAL_CAN_MspInit+0xc8>)
 8001f5a:	f006 fef9 	bl	8008d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	4812      	ldr	r0, [pc, #72]	; (8001fbc <HAL_CAN_MspInit+0xc8>)
 8001f74:	f006 feec 	bl	8008d50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <HAL_CAN_MspInit+0xcc>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_CAN_MspInit+0xcc>)
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2014      	movs	r0, #20
 8001fa2:	f006 fa56 	bl	8008452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001fa6:	2014      	movs	r0, #20
 8001fa8:	f006 fa6f 	bl	800848a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40006400 	.word	0x40006400
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40010c00 	.word	0x40010c00
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <CANTX_BattParameter>:
  /* USER CODE END CAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void CANTX_BattParameter() {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;

	Batt_voltage.m_uint16_t	= VBATT*100;
 8001fce:	4b84      	ldr	r3, [pc, #528]	; (80021e0 <CANTX_BattParameter+0x218>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4984      	ldr	r1, [pc, #528]	; (80021e4 <CANTX_BattParameter+0x21c>)
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe ff41 	bl	8000e5c <__aeabi_fmul>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff f929 	bl	8001234 <__aeabi_f2uiz>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b80      	ldr	r3, [pc, #512]	; (80021e8 <CANTX_BattParameter+0x220>)
 8001fe8:	801a      	strh	r2, [r3, #0]
	Batt_current.m_uint16_t	= fabs(IBATT)*10;
 8001fea:	4b80      	ldr	r3, [pc, #512]	; (80021ec <CANTX_BattParameter+0x224>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fa84 	bl	8000500 <__aeabi_f2d>
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <CANTX_BattParameter+0x228>)
 8001ffe:	f7fe fad7 	bl	80005b0 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4610      	mov	r0, r2
 8002008:	4619      	mov	r1, r3
 800200a:	f7fe fda9 	bl	8000b60 <__aeabi_d2uiz>
 800200e:	4603      	mov	r3, r0
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b78      	ldr	r3, [pc, #480]	; (80021f4 <CANTX_BattParameter+0x22c>)
 8002014:	801a      	strh	r2, [r3, #0]
	Batt_SOC.m_uint16_t		= (int)Pack_SOC;
 8002016:	4b78      	ldr	r3, [pc, #480]	; (80021f8 <CANTX_BattParameter+0x230>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f8e4 	bl	80011e8 <__aeabi_f2iz>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b75      	ldr	r3, [pc, #468]	; (80021fc <CANTX_BattParameter+0x234>)
 8002026:	801a      	strh	r2, [r3, #0]

	Tmax=Suhu_T1;
 8002028:	4b75      	ldr	r3, [pc, #468]	; (8002200 <CANTX_BattParameter+0x238>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a75      	ldr	r2, [pc, #468]	; (8002204 <CANTX_BattParameter+0x23c>)
 800202e:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T2) Tmax = Suhu_T2;
 8002030:	4b74      	ldr	r3, [pc, #464]	; (8002204 <CANTX_BattParameter+0x23c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a74      	ldr	r2, [pc, #464]	; (8002208 <CANTX_BattParameter+0x240>)
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f8ac 	bl	8001198 <__aeabi_fcmplt>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <CANTX_BattParameter+0x86>
 8002046:	4b70      	ldr	r3, [pc, #448]	; (8002208 <CANTX_BattParameter+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <CANTX_BattParameter+0x23c>)
 800204c:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T3) Tmax = Suhu_T3;
 800204e:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <CANTX_BattParameter+0x23c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a6e      	ldr	r2, [pc, #440]	; (800220c <CANTX_BattParameter+0x244>)
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff f89d 	bl	8001198 <__aeabi_fcmplt>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <CANTX_BattParameter+0xa4>
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <CANTX_BattParameter+0x244>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a66      	ldr	r2, [pc, #408]	; (8002204 <CANTX_BattParameter+0x23c>)
 800206a:	6013      	str	r3, [r2, #0]
	if(Tmax < Suhu_T4) Tmax = Suhu_T4;
 800206c:	4b65      	ldr	r3, [pc, #404]	; (8002204 <CANTX_BattParameter+0x23c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a67      	ldr	r2, [pc, #412]	; (8002210 <CANTX_BattParameter+0x248>)
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f88e 	bl	8001198 <__aeabi_fcmplt>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <CANTX_BattParameter+0xc2>
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <CANTX_BattParameter+0x248>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5f      	ldr	r2, [pc, #380]	; (8002204 <CANTX_BattParameter+0x23c>)
 8002088:	6013      	str	r3, [r2, #0]

	Batt_temp.m_uint16_t		= Tmax+40;
 800208a:	4b5e      	ldr	r3, [pc, #376]	; (8002204 <CANTX_BattParameter+0x23c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4961      	ldr	r1, [pc, #388]	; (8002214 <CANTX_BattParameter+0x24c>)
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fddb 	bl	8000c4c <__addsf3>
 8002096:	4603      	mov	r3, r0
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f8cb 	bl	8001234 <__aeabi_f2uiz>
 800209e:	4603      	mov	r3, r0
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <CANTX_BattParameter+0x250>)
 80020a4:	801a      	strh	r2, [r3, #0]
	Batt_capacity.m_uint16_t	= Pack_Cap*10;
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <CANTX_BattParameter+0x254>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	495d      	ldr	r1, [pc, #372]	; (8002220 <CANTX_BattParameter+0x258>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fed5 	bl	8000e5c <__aeabi_fmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff f8bd 	bl	8001234 <__aeabi_f2uiz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b59      	ldr	r3, [pc, #356]	; (8002224 <CANTX_BattParameter+0x25c>)
 80020c0:	801a      	strh	r2, [r3, #0]
	Batt_SOH.m_uint16_t			= SOH_batt;
 80020c2:	4b59      	ldr	r3, [pc, #356]	; (8002228 <CANTX_BattParameter+0x260>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b58      	ldr	r3, [pc, #352]	; (800222c <CANTX_BattParameter+0x264>)
 80020ca:	801a      	strh	r2, [r3, #0]
	Batt_cycle.m_uint16_t		= cycle;
 80020cc:	4b58      	ldr	r3, [pc, #352]	; (8002230 <CANTX_BattParameter+0x268>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b58      	ldr	r3, [pc, #352]	; (8002234 <CANTX_BattParameter+0x26c>)
 80020d4:	801a      	strh	r2, [r3, #0]
	max_voltage.m_uint16_t 		= 63;
 80020d6:	4b58      	ldr	r3, [pc, #352]	; (8002238 <CANTX_BattParameter+0x270>)
 80020d8:	223f      	movs	r2, #63	; 0x3f
 80020da:	801a      	strh	r2, [r3, #0]

	max_chargevoltage.m_uint16_t = VBATT*1.3;
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <CANTX_BattParameter+0x218>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa0d 	bl	8000500 <__aeabi_f2d>
 80020e6:	a33c      	add	r3, pc, #240	; (adr r3, 80021d8 <CANTX_BattParameter+0x210>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fa60 	bl	80005b0 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f7fe fd32 	bl	8000b60 <__aeabi_d2uiz>
 80020fc:	4603      	mov	r3, r0
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <CANTX_BattParameter+0x274>)
 8002102:	801a      	strh	r2, [r3, #0]
	max_chargecurrent.m_uint16_t = VBATT-20;
 8002104:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <CANTX_BattParameter+0x218>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	494d      	ldr	r1, [pc, #308]	; (8002240 <CANTX_BattParameter+0x278>)
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fd9c 	bl	8000c48 <__aeabi_fsub>
 8002110:	4603      	mov	r3, r0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f88e 	bl	8001234 <__aeabi_f2uiz>
 8002118:	4603      	mov	r3, r0
 800211a:	b29a      	uxth	r2, r3
 800211c:	4b49      	ldr	r3, [pc, #292]	; (8002244 <CANTX_BattParameter+0x27c>)
 800211e:	801a      	strh	r2, [r3, #0]

	// *********************** GENERAL CAN COMMUNICATION ******************************
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 8002120:	4b49      	ldr	r3, [pc, #292]	; (8002248 <CANTX_BattParameter+0x280>)
 8002122:	2204      	movs	r2, #4
 8002124:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B0<<20|UNIQUE_Code);
 8002126:	4b48      	ldr	r3, [pc, #288]	; (8002248 <CANTX_BattParameter+0x280>)
 8002128:	4a48      	ldr	r2, [pc, #288]	; (800224c <CANTX_BattParameter+0x284>)
 800212a:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = Batt_voltage.m_bytes[0];
 800212c:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <CANTX_BattParameter+0x220>)
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <CANTX_BattParameter+0x288>)
 8002132:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_voltage.m_bytes[1];
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <CANTX_BattParameter+0x220>)
 8002136:	785a      	ldrb	r2, [r3, #1]
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <CANTX_BattParameter+0x288>)
 800213a:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_current.m_bytes[0];
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <CANTX_BattParameter+0x22c>)
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	4b43      	ldr	r3, [pc, #268]	; (8002250 <CANTX_BattParameter+0x288>)
 8002142:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_current.m_bytes[1];
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <CANTX_BattParameter+0x22c>)
 8002146:	785a      	ldrb	r2, [r3, #1]
 8002148:	4b41      	ldr	r3, [pc, #260]	; (8002250 <CANTX_BattParameter+0x288>)
 800214a:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_SOC.m_bytes[0];
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <CANTX_BattParameter+0x234>)
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <CANTX_BattParameter+0x288>)
 8002152:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_SOC.m_bytes[1];
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <CANTX_BattParameter+0x234>)
 8002156:	785a      	ldrb	r2, [r3, #1]
 8002158:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <CANTX_BattParameter+0x288>)
 800215a:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = Tmax+40;
 800215c:	4b29      	ldr	r3, [pc, #164]	; (8002204 <CANTX_BattParameter+0x23c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	492c      	ldr	r1, [pc, #176]	; (8002214 <CANTX_BattParameter+0x24c>)
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fd72 	bl	8000c4c <__addsf3>
 8002168:	4603      	mov	r3, r0
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff f862 	bl	8001234 <__aeabi_f2uiz>
 8002170:	4603      	mov	r3, r0
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <CANTX_BattParameter+0x288>)
 8002176:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 1;
 8002178:	4b35      	ldr	r3, [pc, #212]	; (8002250 <CANTX_BattParameter+0x288>)
 800217a:	2201      	movs	r2, #1
 800217c:	71da      	strb	r2, [r3, #7]
	//		Tx_data[6] = Batt_temp.m_bytes[1];
	//		Tx_data[7] = Batt_temp.m_bytes[0];

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 800217e:	4b32      	ldr	r3, [pc, #200]	; (8002248 <CANTX_BattParameter+0x280>)
 8002180:	2208      	movs	r2, #8
 8002182:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002184:	e00f      	b.n	80021a6 <CANTX_BattParameter+0x1de>
		if(delay_mailboxcheck > 1000){
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800218c:	dd08      	ble.n	80021a0 <CANTX_BattParameter+0x1d8>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 800218e:	4b31      	ldr	r3, [pc, #196]	; (8002254 <CANTX_BattParameter+0x28c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	4830      	ldr	r0, [pc, #192]	; (8002258 <CANTX_BattParameter+0x290>)
 8002196:	f005 fcb4 	bl	8007b02 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
			break;
 800219e:	e008      	b.n	80021b2 <CANTX_BattParameter+0x1ea>
		}
		delay_mailboxcheck++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80021a6:	482c      	ldr	r0, [pc, #176]	; (8002258 <CANTX_BattParameter+0x290>)
 80021a8:	f005 fcef 	bl	8007b8a <HAL_CAN_GetTxMailboxesFreeLevel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0e9      	beq.n	8002186 <CANTX_BattParameter+0x1be>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 80021b2:	4b28      	ldr	r3, [pc, #160]	; (8002254 <CANTX_BattParameter+0x28c>)
 80021b4:	4a26      	ldr	r2, [pc, #152]	; (8002250 <CANTX_BattParameter+0x288>)
 80021b6:	4924      	ldr	r1, [pc, #144]	; (8002248 <CANTX_BattParameter+0x280>)
 80021b8:	4827      	ldr	r0, [pc, #156]	; (8002258 <CANTX_BattParameter+0x290>)
 80021ba:	f005 fbc8 	bl	800794e <HAL_CAN_AddTxMessage>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <CANTX_BattParameter+0x20a>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 80021c4:	4b23      	ldr	r3, [pc, #140]	; (8002254 <CANTX_BattParameter+0x28c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4823      	ldr	r0, [pc, #140]	; (8002258 <CANTX_BattParameter+0x290>)
 80021cc:	f005 fc99 	bl	8007b02 <HAL_CAN_AbortTxRequest>
		return;
 80021d0:	bf00      	nop
//		Error_Handler();
	}

}
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	cccccccd 	.word	0xcccccccd
 80021dc:	3ff4cccc 	.word	0x3ff4cccc
 80021e0:	2000027c 	.word	0x2000027c
 80021e4:	42c80000 	.word	0x42c80000
 80021e8:	200008f8 	.word	0x200008f8
 80021ec:	20000280 	.word	0x20000280
 80021f0:	40240000 	.word	0x40240000
 80021f4:	20000854 	.word	0x20000854
 80021f8:	2000031c 	.word	0x2000031c
 80021fc:	2000085c 	.word	0x2000085c
 8002200:	200002a8 	.word	0x200002a8
 8002204:	200008a4 	.word	0x200008a4
 8002208:	200002ac 	.word	0x200002ac
 800220c:	200002b0 	.word	0x200002b0
 8002210:	200002b4 	.word	0x200002b4
 8002214:	42200000 	.word	0x42200000
 8002218:	200008a0 	.word	0x200008a0
 800221c:	0801390c 	.word	0x0801390c
 8002220:	41200000 	.word	0x41200000
 8002224:	200008f0 	.word	0x200008f0
 8002228:	20000034 	.word	0x20000034
 800222c:	20000804 	.word	0x20000804
 8002230:	20000784 	.word	0x20000784
 8002234:	2000084c 	.word	0x2000084c
 8002238:	200008cc 	.word	0x200008cc
 800223c:	200008ec 	.word	0x200008ec
 8002240:	41a00000 	.word	0x41a00000
 8002244:	20000808 	.word	0x20000808
 8002248:	200008d4 	.word	0x200008d4
 800224c:	0b000a22 	.word	0x0b000a22
 8002250:	20000810 	.word	0x20000810
 8002254:	200008c4 	.word	0x200008c4
 8002258:	20000818 	.word	0x20000818

0800225c <CANTX_BattProtection>:

void CANTX_BattProtection() {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 8002262:	4b8c      	ldr	r3, [pc, #560]	; (8002494 <CANTX_BattProtection+0x238>)
 8002264:	2204      	movs	r2, #4
 8002266:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0B1<<20|UNIQUE_Code);
 8002268:	4b8a      	ldr	r3, [pc, #552]	; (8002494 <CANTX_BattProtection+0x238>)
 800226a:	4a8b      	ldr	r2, [pc, #556]	; (8002498 <CANTX_BattProtection+0x23c>)
 800226c:	605a      	str	r2, [r3, #4]
	//CAN Data #2
	Tx_data[0] = Batt_capacity.m_bytes[0];
 800226e:	4b8b      	ldr	r3, [pc, #556]	; (800249c <CANTX_BattProtection+0x240>)
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002274:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = Batt_capacity.m_bytes[1];
 8002276:	4b89      	ldr	r3, [pc, #548]	; (800249c <CANTX_BattProtection+0x240>)
 8002278:	785a      	ldrb	r2, [r3, #1]
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <CANTX_BattProtection+0x244>)
 800227c:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = Batt_SOH.m_bytes[0];
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <CANTX_BattProtection+0x248>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b87      	ldr	r3, [pc, #540]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002284:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Batt_SOH.m_bytes[1];
 8002286:	4b87      	ldr	r3, [pc, #540]	; (80024a4 <CANTX_BattProtection+0x248>)
 8002288:	785a      	ldrb	r2, [r3, #1]
 800228a:	4b85      	ldr	r3, [pc, #532]	; (80024a0 <CANTX_BattProtection+0x244>)
 800228c:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Batt_cycle.m_bytes[0];
 800228e:	4b86      	ldr	r3, [pc, #536]	; (80024a8 <CANTX_BattProtection+0x24c>)
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b83      	ldr	r3, [pc, #524]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002294:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = Batt_cycle.m_bytes[1];
 8002296:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <CANTX_BattProtection+0x24c>)
 8002298:	785a      	ldrb	r2, [r3, #1]
 800229a:	4b81      	ldr	r3, [pc, #516]	; (80024a0 <CANTX_BattProtection+0x244>)
 800229c:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = flag_trip_overcurrentdischarge&0x01;
 800229e:	4b83      	ldr	r3, [pc, #524]	; (80024ac <CANTX_BattProtection+0x250>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b7d      	ldr	r3, [pc, #500]	; (80024a0 <CANTX_BattProtection+0x244>)
 80022aa:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overcurrentcharge&0x01)<<1;
 80022ac:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <CANTX_BattProtection+0x244>)
 80022ae:	799b      	ldrb	r3, [r3, #6]
 80022b0:	b25a      	sxtb	r2, r3
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <CANTX_BattProtection+0x254>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	b25b      	sxtb	r3, r3
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	b25b      	sxtb	r3, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <CANTX_BattProtection+0x244>)
 80022c8:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_shortcircuit&0x01)<<2;
 80022ca:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <CANTX_BattProtection+0x244>)
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	b25a      	sxtb	r2, r3
 80022d0:	4b78      	ldr	r3, [pc, #480]	; (80024b4 <CANTX_BattProtection+0x258>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b6e      	ldr	r3, [pc, #440]	; (80024a0 <CANTX_BattProtection+0x244>)
 80022e6:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<3;
 80022e8:	4b6d      	ldr	r3, [pc, #436]	; (80024a0 <CANTX_BattProtection+0x244>)
 80022ea:	799b      	ldrb	r3, [r3, #6]
 80022ec:	b25a      	sxtb	r2, r3
 80022ee:	4b72      	ldr	r3, [pc, #456]	; (80024b8 <CANTX_BattProtection+0x25c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b67      	ldr	r3, [pc, #412]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002304:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<4;
 8002306:	4b66      	ldr	r3, [pc, #408]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002308:	799b      	ldrb	r3, [r3, #6]
 800230a:	b25a      	sxtb	r2, r3
 800230c:	4b6b      	ldr	r3, [pc, #428]	; (80024bc <CANTX_BattProtection+0x260>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	b25b      	sxtb	r3, r3
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	b25b      	sxtb	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b25b      	sxtb	r3, r3
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b5f      	ldr	r3, [pc, #380]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002322:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_overtemperature&0x01)<<5;
 8002324:	4b5e      	ldr	r3, [pc, #376]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002326:	799b      	ldrb	r3, [r3, #6]
 8002328:	b25a      	sxtb	r2, r3
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <CANTX_BattProtection+0x25c>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	b25b      	sxtb	r3, r3
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	b25b      	sxtb	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b25b      	sxtb	r3, r3
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4b58      	ldr	r3, [pc, #352]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002340:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |= (flag_trip_undertemperature&0x01)<<6;
 8002342:	4b57      	ldr	r3, [pc, #348]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002344:	799b      	ldrb	r3, [r3, #6]
 8002346:	b25a      	sxtb	r2, r3
 8002348:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <CANTX_BattProtection+0x260>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	b25b      	sxtb	r3, r3
 8002350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002354:	b25b      	sxtb	r3, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	b25b      	sxtb	r3, r3
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <CANTX_BattProtection+0x244>)
 800235e:	719a      	strb	r2, [r3, #6]
	Tx_data[6] |=  (flag_trip_undervoltage&0x01)<<7;
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002362:	799b      	ldrb	r3, [r3, #6]
 8002364:	b25a      	sxtb	r2, r3
 8002366:	4b56      	ldr	r3, [pc, #344]	; (80024c0 <CANTX_BattProtection+0x264>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	01db      	lsls	r3, r3, #7
 800236c:	b25b      	sxtb	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b25b      	sxtb	r3, r3
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002376:	719a      	strb	r2, [r3, #6]

	Tx_data[7] = (flag_trip_overvoltage&0x01);
 8002378:	4b52      	ldr	r3, [pc, #328]	; (80024c4 <CANTX_BattProtection+0x268>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b47      	ldr	r3, [pc, #284]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002384:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_SOCOverDischarge&0x01)<<1;
 8002386:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002388:	79db      	ldrb	r3, [r3, #7]
 800238a:	b25a      	sxtb	r2, r3
 800238c:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <CANTX_BattProtection+0x26c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	b25b      	sxtb	r3, r3
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	b25b      	sxtb	r3, r3
 800239a:	4313      	orrs	r3, r2
 800239c:	b25b      	sxtb	r3, r3
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <CANTX_BattProtection+0x244>)
 80023a2:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_unbalance&0x01)<<2;
 80023a4:	4b3e      	ldr	r3, [pc, #248]	; (80024a0 <CANTX_BattProtection+0x244>)
 80023a6:	79db      	ldrb	r3, [r3, #7]
 80023a8:	b25a      	sxtb	r2, r3
 80023aa:	4b48      	ldr	r3, [pc, #288]	; (80024cc <CANTX_BattProtection+0x270>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	b25b      	sxtb	r3, r3
 80023b8:	4313      	orrs	r3, r2
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <CANTX_BattProtection+0x244>)
 80023c0:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (flag_trip_systemfailure&0x01)<<3;
 80023c2:	4b37      	ldr	r3, [pc, #220]	; (80024a0 <CANTX_BattProtection+0x244>)
 80023c4:	79db      	ldrb	r3, [r3, #7]
 80023c6:	b25a      	sxtb	r2, r3
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <CANTX_BattProtection+0x274>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b30      	ldr	r3, [pc, #192]	; (80024a0 <CANTX_BattProtection+0x244>)
 80023de:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (charge_state&0x01)<<4;
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <CANTX_BattProtection+0x244>)
 80023e2:	79db      	ldrb	r3, [r3, #7]
 80023e4:	b25a      	sxtb	r2, r3
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <CANTX_BattProtection+0x278>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	b25b      	sxtb	r3, r3
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	b25b      	sxtb	r3, r3
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b25b      	sxtb	r3, r3
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <CANTX_BattProtection+0x244>)
 80023fc:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (discharge_state&0x01)<<5;
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002400:	79db      	ldrb	r3, [r3, #7]
 8002402:	b25a      	sxtb	r2, r3
 8002404:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <CANTX_BattProtection+0x27c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	015b      	lsls	r3, r3, #5
 800240a:	b25b      	sxtb	r3, r3
 800240c:	f003 0320 	and.w	r3, r3, #32
 8002410:	b25b      	sxtb	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	b25b      	sxtb	r3, r3
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <CANTX_BattProtection+0x244>)
 800241a:	71da      	strb	r2, [r3, #7]
	Tx_data[7] |= (sleep_state&0x01)<<6;
 800241c:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <CANTX_BattProtection+0x244>)
 800241e:	79db      	ldrb	r3, [r3, #7]
 8002420:	b25a      	sxtb	r2, r3
 8002422:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <CANTX_BattProtection+0x280>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	019b      	lsls	r3, r3, #6
 8002428:	b25b      	sxtb	r3, r3
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	b25b      	sxtb	r3, r3
 8002430:	4313      	orrs	r3, r2
 8002432:	b25b      	sxtb	r3, r3
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002438:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <CANTX_BattProtection+0x238>)
 800243c:	2208      	movs	r2, #8
 800243e:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002440:	e00f      	b.n	8002462 <CANTX_BattProtection+0x206>
		if(delay_mailboxcheck > 1000){
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002448:	dd08      	ble.n	800245c <CANTX_BattProtection+0x200>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 800244a:	4b25      	ldr	r3, [pc, #148]	; (80024e0 <CANTX_BattProtection+0x284>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4824      	ldr	r0, [pc, #144]	; (80024e4 <CANTX_BattProtection+0x288>)
 8002452:	f005 fb56 	bl	8007b02 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
			break;
 800245a:	e008      	b.n	800246e <CANTX_BattProtection+0x212>
		}
		delay_mailboxcheck++;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3301      	adds	r3, #1
 8002460:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002462:	4820      	ldr	r0, [pc, #128]	; (80024e4 <CANTX_BattProtection+0x288>)
 8002464:	f005 fb91 	bl	8007b8a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0e9      	beq.n	8002442 <CANTX_BattProtection+0x1e6>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <CANTX_BattProtection+0x284>)
 8002470:	4a0b      	ldr	r2, [pc, #44]	; (80024a0 <CANTX_BattProtection+0x244>)
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <CANTX_BattProtection+0x238>)
 8002474:	481b      	ldr	r0, [pc, #108]	; (80024e4 <CANTX_BattProtection+0x288>)
 8002476:	f005 fa6a 	bl	800794e <HAL_CAN_AddTxMessage>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <CANTX_BattProtection+0x232>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <CANTX_BattProtection+0x284>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4817      	ldr	r0, [pc, #92]	; (80024e4 <CANTX_BattProtection+0x288>)
 8002488:	f005 fb3b 	bl	8007b02 <HAL_CAN_AbortTxRequest>
		return;
 800248c:	bf00      	nop
//		Error_Handler();
	}
}
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	200008d4 	.word	0x200008d4
 8002498:	0b100a22 	.word	0x0b100a22
 800249c:	200008f0 	.word	0x200008f0
 80024a0:	20000810 	.word	0x20000810
 80024a4:	20000804 	.word	0x20000804
 80024a8:	2000084c 	.word	0x2000084c
 80024ac:	2000030e 	.word	0x2000030e
 80024b0:	2000030f 	.word	0x2000030f
 80024b4:	20000310 	.word	0x20000310
 80024b8:	20000308 	.word	0x20000308
 80024bc:	20000309 	.word	0x20000309
 80024c0:	2000030c 	.word	0x2000030c
 80024c4:	2000030d 	.word	0x2000030d
 80024c8:	2000030a 	.word	0x2000030a
 80024cc:	20000312 	.word	0x20000312
 80024d0:	20000311 	.word	0x20000311
 80024d4:	200002c3 	.word	0x200002c3
 80024d8:	200002c4 	.word	0x200002c4
 80024dc:	200002c5 	.word	0x200002c5
 80024e0:	200008c4 	.word	0x200008c4
 80024e4:	20000818 	.word	0x20000818

080024e8 <CANTX_ReportToCharger>:

void CANTX_ReportToCharger() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
	// *********************** CHARGING CAN COMMUNICATION ******************************
	int delay_mailboxcheck;
	// CAN ID transmit #1
	Tx_Header.IDE = CAN_ID_EXT;
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <CANTX_ReportToCharger+0xc8>)
 80024f0:	2204      	movs	r2, #4
 80024f2:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E0<<20|UNIQUE_Code);
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <CANTX_ReportToCharger+0xc8>)
 80024f6:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <CANTX_ReportToCharger+0xcc>)
 80024f8:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = max_chargevoltage.m_bytes[0];
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <CANTX_ReportToCharger+0xd0>)
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 8002500:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = max_chargevoltage.m_bytes[1];
 8002502:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <CANTX_ReportToCharger+0xd0>)
 8002504:	785a      	ldrb	r2, [r3, #1]
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 8002508:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = max_chargecurrent.m_bytes[0];
 800250a:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <CANTX_ReportToCharger+0xd8>)
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 8002510:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = max_chargecurrent.m_bytes[1];
 8002512:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <CANTX_ReportToCharger+0xd8>)
 8002514:	785a      	ldrb	r2, [r3, #1]
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 8002518:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = charge_state;
 800251a:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <CANTX_ReportToCharger+0xdc>)
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	4b27      	ldr	r3, [pc, #156]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 8002520:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = 0;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 8002524:	2200      	movs	r2, #0
 8002526:	715a      	strb	r2, [r3, #5]

	if(BMS_mode == 0) handshake_recognition = 0x55;
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <CANTX_ReportToCharger+0xe0>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <CANTX_ReportToCharger+0x50>
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <CANTX_ReportToCharger+0xe4>)
 8002532:	2255      	movs	r2, #85	; 0x55
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	e006      	b.n	8002546 <CANTX_ReportToCharger+0x5e>
	else if(BMS_mode == 2) handshake_recognition = 0xAA;
 8002538:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <CANTX_ReportToCharger+0xe0>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d102      	bne.n	8002546 <CANTX_ReportToCharger+0x5e>
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <CANTX_ReportToCharger+0xe4>)
 8002542:	22aa      	movs	r2, #170	; 0xaa
 8002544:	801a      	strh	r2, [r3, #0]

	Tx_data[6] = handshake_recognition;
 8002546:	4b21      	ldr	r3, [pc, #132]	; (80025cc <CANTX_ReportToCharger+0xe4>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 800254e:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 8002552:	2200      	movs	r2, #0
 8002554:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #1
	Tx_Header.DLC = 8;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <CANTX_ReportToCharger+0xc8>)
 8002558:	2208      	movs	r2, #8
 800255a:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800255c:	e00f      	b.n	800257e <CANTX_ReportToCharger+0x96>
		if(delay_mailboxcheck > 1000){
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002564:	dd08      	ble.n	8002578 <CANTX_ReportToCharger+0x90>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002566:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <CANTX_ReportToCharger+0xe8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4819      	ldr	r0, [pc, #100]	; (80025d4 <CANTX_ReportToCharger+0xec>)
 800256e:	f005 fac8 	bl	8007b02 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
			break;
 8002576:	e008      	b.n	800258a <CANTX_ReportToCharger+0xa2>
		}
		delay_mailboxcheck++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3301      	adds	r3, #1
 800257c:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800257e:	4815      	ldr	r0, [pc, #84]	; (80025d4 <CANTX_ReportToCharger+0xec>)
 8002580:	f005 fb03 	bl	8007b8a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0e9      	beq.n	800255e <CANTX_ReportToCharger+0x76>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <CANTX_ReportToCharger+0xe8>)
 800258c:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <CANTX_ReportToCharger+0xd4>)
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <CANTX_ReportToCharger+0xc8>)
 8002590:	4810      	ldr	r0, [pc, #64]	; (80025d4 <CANTX_ReportToCharger+0xec>)
 8002592:	f005 f9dc 	bl	800794e <HAL_CAN_AddTxMessage>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <CANTX_ReportToCharger+0xc2>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <CANTX_ReportToCharger+0xe8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	480c      	ldr	r0, [pc, #48]	; (80025d4 <CANTX_ReportToCharger+0xec>)
 80025a4:	f005 faad 	bl	8007b02 <HAL_CAN_AbortTxRequest>
		return;
 80025a8:	bf00      	nop
//		Error_Handler();
	}
}
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200008d4 	.word	0x200008d4
 80025b4:	0e000a22 	.word	0x0e000a22
 80025b8:	200008ec 	.word	0x200008ec
 80025bc:	20000810 	.word	0x20000810
 80025c0:	20000808 	.word	0x20000808
 80025c4:	200002c3 	.word	0x200002c3
 80025c8:	200002c2 	.word	0x200002c2
 80025cc:	200007fc 	.word	0x200007fc
 80025d0:	200008c4 	.word	0x200008c4
 80025d4:	20000818 	.word	0x20000818

080025d8 <CANTX_BattId>:

void CANTX_BattId() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
	int delay_mailboxcheck;
	// CAN ID transmit #2
	Tx_Header.IDE = CAN_ID_EXT;
 80025de:	4b25      	ldr	r3, [pc, #148]	; (8002674 <CANTX_BattId+0x9c>)
 80025e0:	2204      	movs	r2, #4
 80025e2:	609a      	str	r2, [r3, #8]
	Tx_Header.ExtId = (0x0E1<<20|UNIQUE_Code);
 80025e4:	4b23      	ldr	r3, [pc, #140]	; (8002674 <CANTX_BattId+0x9c>)
 80025e6:	4a24      	ldr	r2, [pc, #144]	; (8002678 <CANTX_BattId+0xa0>)
 80025e8:	605a      	str	r2, [r3, #4]
	//CAN Data #1
	Tx_data[0] = 0;
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <CANTX_BattId+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = 0;
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <CANTX_BattId+0xa4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = 0x21;
 80025f6:	4b21      	ldr	r3, [pc, #132]	; (800267c <CANTX_BattId+0xa4>)
 80025f8:	2221      	movs	r2, #33	; 0x21
 80025fa:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = 0x04;
 80025fc:	4b1f      	ldr	r3, [pc, #124]	; (800267c <CANTX_BattId+0xa4>)
 80025fe:	2204      	movs	r2, #4
 8002600:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = UNIQUE_Code >> 16;
 8002602:	4b1e      	ldr	r3, [pc, #120]	; (800267c <CANTX_BattId+0xa4>)
 8002604:	2200      	movs	r2, #0
 8002606:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = UNIQUE_Code >> 8;
 8002608:	4b1c      	ldr	r3, [pc, #112]	; (800267c <CANTX_BattId+0xa4>)
 800260a:	220a      	movs	r2, #10
 800260c:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = UNIQUE_Code;
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <CANTX_BattId+0xa4>)
 8002610:	2222      	movs	r2, #34	; 0x22
 8002612:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <CANTX_BattId+0xa4>)
 8002616:	2200      	movs	r2, #0
 8002618:	71da      	strb	r2, [r3, #7]

	//CAN Tx message #2
	Tx_Header.DLC = 8;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <CANTX_BattId+0x9c>)
 800261c:	2208      	movs	r2, #8
 800261e:	611a      	str	r2, [r3, #16]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002620:	e00f      	b.n	8002642 <CANTX_BattId+0x6a>
		if(delay_mailboxcheck > 1000){
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002628:	dd08      	ble.n	800263c <CANTX_BattId+0x64>
			HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <CANTX_BattId+0xa8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4619      	mov	r1, r3
 8002630:	4814      	ldr	r0, [pc, #80]	; (8002684 <CANTX_BattId+0xac>)
 8002632:	f005 fa66 	bl	8007b02 <HAL_CAN_AbortTxRequest>
			delay_mailboxcheck = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
			break;
 800263a:	e008      	b.n	800264e <CANTX_BattId+0x76>
		}
		delay_mailboxcheck++;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3301      	adds	r3, #1
 8002640:	607b      	str	r3, [r7, #4]
	while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8002642:	4810      	ldr	r0, [pc, #64]	; (8002684 <CANTX_BattId+0xac>)
 8002644:	f005 faa1 	bl	8007b8a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0e9      	beq.n	8002622 <CANTX_BattId+0x4a>
	}

	if(HAL_CAN_AddTxMessage(&hcan, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) {
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <CANTX_BattId+0xa8>)
 8002650:	4a0a      	ldr	r2, [pc, #40]	; (800267c <CANTX_BattId+0xa4>)
 8002652:	4908      	ldr	r1, [pc, #32]	; (8002674 <CANTX_BattId+0x9c>)
 8002654:	480b      	ldr	r0, [pc, #44]	; (8002684 <CANTX_BattId+0xac>)
 8002656:	f005 f97a 	bl	800794e <HAL_CAN_AddTxMessage>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <CANTX_BattId+0x96>
		HAL_CAN_AbortTxRequest(&hcan, TxMailbox);
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <CANTX_BattId+0xa8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	4807      	ldr	r0, [pc, #28]	; (8002684 <CANTX_BattId+0xac>)
 8002668:	f005 fa4b 	bl	8007b02 <HAL_CAN_AbortTxRequest>
		return;
 800266c:	bf00      	nop
//		Error_Handler();
	}
}
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	200008d4 	.word	0x200008d4
 8002678:	0e100a22 	.word	0x0e100a22
 800267c:	20000810 	.word	0x20000810
 8002680:	200008c4 	.word	0x200008c4
 8002684:	20000818 	.word	0x20000818

08002688 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_Header, Rx_data) == HAL_OK) {
 8002690:	4b60      	ldr	r3, [pc, #384]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8002692:	4a61      	ldr	r2, [pc, #388]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8002694:	2100      	movs	r1, #0
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f005 faab 	bl	8007bf2 <HAL_CAN_GetRxMessage>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 80b3 	bne.w	800280a <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
		if(Rx_Header.ExtId == 0x1B2){
 80026a4:	4b5c      	ldr	r3, [pc, #368]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 7fd9 	cmp.w	r3, #434	; 0x1b2
 80026ac:	d134      	bne.n	8002718 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			flag_start_shutdown=Rx_data[0]&0x01;
 80026ae:	4b59      	ldr	r3, [pc, #356]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b58      	ldr	r3, [pc, #352]	; (800281c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80026ba:	701a      	strb	r2, [r3, #0]
			BMS_mode=(Rx_data[0]>>1)&0x03;
 80026bc:	4b55      	ldr	r3, [pc, #340]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b55      	ldr	r3, [pc, #340]	; (8002820 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80026cc:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=(Rx_data[0]>>3)&&0x01;
 80026ce:	4b51      	ldr	r3, [pc, #324]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80026e4:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=(Rx_data[0]>>4)&&0x01;
 80026e6:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf14      	ite	ne
 80026f2:	2301      	movne	r3, #1
 80026f4:	2300      	moveq	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b4b      	ldr	r3, [pc, #300]	; (8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80026fc:	701a      	strb	r2, [r3, #0]

			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 80026fe:	f004 fb13 	bl	8006d28 <HAL_GetTick>
 8002702:	4603      	mov	r3, r0
 8002704:	461a      	mov	r2, r3
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8002708:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 800270a:	f004 fb0d 	bl	8006d28 <HAL_GetTick>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e06d      	b.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(((Rx_Header.ExtId & 0xFFF00000) == 0x0E300000) && (flag_get_UNIQUECODE < 3) ) {
 8002718:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	0d1b      	lsrs	r3, r3, #20
 800271e:	051b      	lsls	r3, r3, #20
 8002720:	f1b3 6f63 	cmp.w	r3, #238026752	; 0xe300000
 8002724:	d11c      	bne.n	8002760 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
 8002726:	4b43      	ldr	r3, [pc, #268]	; (8002834 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d818      	bhi.n	8002760 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>
			flag_start_shutdown = 1;
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
			BMS_mode = 0;
 8002734:	4b3a      	ldr	r3, [pc, #232]	; (8002820 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8002736:	2200      	movs	r2, #0
 8002738:	701a      	strb	r2, [r3, #0]
			flag_get_UNIQUECODE++;
 800273a:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8002744:	701a      	strb	r2, [r3, #0]
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 8002746:	f004 faef 	bl	8006d28 <HAL_GetTick>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	4b37      	ldr	r3, [pc, #220]	; (800282c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8002750:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 8002752:	f004 fae9 	bl	8006d28 <HAL_GetTick>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	e049      	b.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.ExtId == (0x0E3<<20|UNIQUE_Code)){
 8002760:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a34      	ldr	r2, [pc, #208]	; (8002838 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d121      	bne.n	80027ae <HAL_CAN_RxFifo0MsgPendingCallback+0x126>
			if(Rx_data[5] == 0x55){
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800276c:	795b      	ldrb	r3, [r3, #5]
 800276e:	2b55      	cmp	r3, #85	; 0x55
 8002770:	d106      	bne.n	8002780 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
				BMS_mode = 0;
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
				charge_state = 0;
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e009      	b.n	8002794 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			}
			else if(Rx_data[5] == 0xAA){
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8002782:	795b      	ldrb	r3, [r3, #5]
 8002784:	2baa      	cmp	r3, #170	; 0xaa
 8002786:	d105      	bne.n	8002794 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
				BMS_mode = 2;
 8002788:	4b25      	ldr	r3, [pc, #148]	; (8002820 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800278a:	2202      	movs	r2, #2
 800278c:	701a      	strb	r2, [r3, #0]
				charge_state = 1;
 800278e:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8002790:	2201      	movs	r2, #1
 8002792:	701a      	strb	r2, [r3, #0]
			}
			Active_time_last=HAL_GetTick();	//counter kapan terakhir menerima data
 8002794:	f004 fac8 	bl	8006d28 <HAL_GetTick>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800279e:	601a      	str	r2, [r3, #0]
			Shutdown_time_last = HAL_GetTick();
 80027a0:	f004 fac2 	bl	8006d28 <HAL_GetTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e022      	b.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
		}

		else if(Rx_Header.RTR == 2){
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d11e      	bne.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			if(Rx_Header.StdId == 0x0B4) dataRTR = 4;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2bb4      	cmp	r3, #180	; 0xb4
 80027bc:	d103      	bne.n	80027c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027c0:	2204      	movs	r2, #4
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e016      	b.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B5) dataRTR = 5;
 80027c6:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2bb5      	cmp	r3, #181	; 0xb5
 80027cc:	d103      	bne.n	80027d6 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
 80027ce:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027d0:	2205      	movs	r2, #5
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e00e      	b.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B6) dataRTR = 6;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2bb6      	cmp	r3, #182	; 0xb6
 80027dc:	d103      	bne.n	80027e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
 80027de:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027e0:	2206      	movs	r2, #6
 80027e2:	701a      	strb	r2, [r3, #0]
 80027e4:	e006      	b.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
			else if(Rx_Header.StdId == 0x0B7) dataRTR = 7;
 80027e6:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2bb7      	cmp	r3, #183	; 0xb7
 80027ec:	d102      	bne.n	80027f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	701a      	strb	r2, [r3, #0]
		}

		Rx_Header.ExtId = 0;
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	605a      	str	r2, [r3, #4]
		Rx_Header.StdId = 0;
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8002800:	2208      	movs	r2, #8
 8002802:	2100      	movs	r1, #0
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8002806:	f00b ff55 	bl	800e6b4 <memset>
	}
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000840 	.word	0x20000840
 8002818:	200008a8 	.word	0x200008a8
 800281c:	200002c0 	.word	0x200002c0
 8002820:	200002c2 	.word	0x200002c2
 8002824:	20000316 	.word	0x20000316
 8002828:	20000315 	.word	0x20000315
 800282c:	200002d4 	.word	0x200002d4
 8002830:	200002dc 	.word	0x200002dc
 8002834:	200002e0 	.word	0x200002e0
 8002838:	0e300a22 	.word	0x0e300a22
 800283c:	200002c3 	.word	0x200002c3
 8002840:	20000344 	.word	0x20000344

08002844 <BMS_CAN_Config>:


void BMS_CAN_Config()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08a      	sub	sp, #40	; 0x28
 8002848:	af00      	add	r7, sp, #0
	/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002852:	2301      	movs	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800286a:	2301      	movs	r3, #1
 800286c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800286e:	230e      	movs	r3, #14
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) Error_Handler();
 8002872:	463b      	mov	r3, r7
 8002874:	4619      	mov	r1, r3
 8002876:	4810      	ldr	r0, [pc, #64]	; (80028b8 <BMS_CAN_Config+0x74>)
 8002878:	f004 ff5c 	bl	8007734 <HAL_CAN_ConfigFilter>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <BMS_CAN_Config+0x42>
 8002882:	f000 feeb 	bl	800365c <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan) != HAL_OK) Error_Handler();
 8002886:	480c      	ldr	r0, [pc, #48]	; (80028b8 <BMS_CAN_Config+0x74>)
 8002888:	f005 f81d 	bl	80078c6 <HAL_CAN_Start>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <BMS_CAN_Config+0x52>
 8002892:	f000 fee3 	bl	800365c <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002896:	2102      	movs	r1, #2
 8002898:	4807      	ldr	r0, [pc, #28]	; (80028b8 <BMS_CAN_Config+0x74>)
 800289a:	f005 fabb 	bl	8007e14 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <BMS_CAN_Config+0x78>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <BMS_CAN_Config+0x78>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 80028aa:	4b04      	ldr	r3, [pc, #16]	; (80028bc <BMS_CAN_Config+0x78>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	3728      	adds	r7, #40	; 0x28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000818 	.word	0x20000818
 80028bc:	200008d4 	.word	0x200008d4

080028c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_DMA_Init+0x38>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <MX_DMA_Init+0x38>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6153      	str	r3, [r2, #20]
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_DMA_Init+0x38>)
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	200b      	movs	r0, #11
 80028e4:	f005 fdb5 	bl	8008452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028e8:	200b      	movs	r0, #11
 80028ea:	f005 fdce 	bl	800848a <HAL_NVIC_EnableIRQ>

}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000

080028fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002910:	4b36      	ldr	r3, [pc, #216]	; (80029ec <MX_GPIO_Init+0xf0>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a35      	ldr	r2, [pc, #212]	; (80029ec <MX_GPIO_Init+0xf0>)
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b33      	ldr	r3, [pc, #204]	; (80029ec <MX_GPIO_Init+0xf0>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002928:	4b30      	ldr	r3, [pc, #192]	; (80029ec <MX_GPIO_Init+0xf0>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a2f      	ldr	r2, [pc, #188]	; (80029ec <MX_GPIO_Init+0xf0>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <MX_GPIO_Init+0xf0>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4b2a      	ldr	r3, [pc, #168]	; (80029ec <MX_GPIO_Init+0xf0>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a29      	ldr	r2, [pc, #164]	; (80029ec <MX_GPIO_Init+0xf0>)
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b27      	ldr	r3, [pc, #156]	; (80029ec <MX_GPIO_Init+0xf0>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|BMS_SHUTDOWN_Pin|EEPROM_WP_Pin|LED_Pin
 8002958:	2200      	movs	r2, #0
 800295a:	f243 0162 	movw	r1, #12386	; 0x3062
 800295e:	4824      	ldr	r0, [pc, #144]	; (80029f0 <MX_GPIO_Init+0xf4>)
 8002960:	f006 fb8a 	bl	8009078 <HAL_GPIO_WritePin>
                          |SPI1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8002964:	2200      	movs	r2, #0
 8002966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800296a:	4822      	ldr	r0, [pc, #136]	; (80029f4 <MX_GPIO_Init+0xf8>)
 800296c:	f006 fb84 	bl	8009078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|BMS_SHUTDOWN_Pin;
 8002970:	f242 0302 	movw	r3, #8194	; 0x2002
 8002974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002976:	2301      	movs	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297e:	2302      	movs	r3, #2
 8002980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002982:	f107 0310 	add.w	r3, r7, #16
 8002986:	4619      	mov	r1, r3
 8002988:	4819      	ldr	r0, [pc, #100]	; (80029f0 <MX_GPIO_Init+0xf4>)
 800298a:	f006 f9e1 	bl	8008d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = EEPROM_WP_Pin|LED_Pin|SPI1_CS_Pin;
 800298e:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8002992:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	2301      	movs	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2302      	movs	r3, #2
 800299e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4619      	mov	r1, r3
 80029a6:	4812      	ldr	r0, [pc, #72]	; (80029f0 <MX_GPIO_Init+0xf4>)
 80029a8:	f006 f9d2 	bl	8008d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GATE_MOS_Pin;
 80029ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b2:	2301      	movs	r3, #1
 80029b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029b6:	2302      	movs	r3, #2
 80029b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2302      	movs	r3, #2
 80029bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GATE_MOS_GPIO_Port, &GPIO_InitStruct);
 80029be:	f107 0310 	add.w	r3, r7, #16
 80029c2:	4619      	mov	r1, r3
 80029c4:	480b      	ldr	r0, [pc, #44]	; (80029f4 <MX_GPIO_Init+0xf8>)
 80029c6:	f006 f9c3 	bl	8008d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	4619      	mov	r1, r3
 80029de:	4805      	ldr	r0, [pc, #20]	; (80029f4 <MX_GPIO_Init+0xf8>)
 80029e0:	f006 f9b6 	bl	8008d50 <HAL_GPIO_Init>

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40021000 	.word	0x40021000
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40010800 	.word	0x40010800

080029f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <MX_I2C1_Init+0x50>)
 80029fe:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <MX_I2C1_Init+0x54>)
 8002a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a04:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <MX_I2C1_Init+0x58>)
 8002a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a22:	4b09      	ldr	r3, [pc, #36]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a28:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <MX_I2C1_Init+0x50>)
 8002a36:	f006 fb51 	bl	80090dc <HAL_I2C_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a40:	f000 fe0c 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	200008fc 	.word	0x200008fc
 8002a4c:	40005400 	.word	0x40005400
 8002a50:	00061a80 	.word	0x00061a80

08002a54 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <MX_I2C2_Init+0x54>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a60:	4a12      	ldr	r2, [pc, #72]	; (8002aac <MX_I2C2_Init+0x58>)
 8002a62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a76:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a90:	4804      	ldr	r0, [pc, #16]	; (8002aa4 <MX_I2C2_Init+0x50>)
 8002a92:	f006 fb23 	bl	80090dc <HAL_I2C_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002a9c:	f000 fdde 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000950 	.word	0x20000950
 8002aa8:	40005800 	.word	0x40005800
 8002aac:	000186a0 	.word	0x000186a0

08002ab0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b08a      	sub	sp, #40	; 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <HAL_I2C_MspInit+0xc8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d124      	bne.n	8002b1a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a29      	ldr	r2, [pc, #164]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6193      	str	r3, [r2, #24]
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8002ae8:	23c0      	movs	r3, #192	; 0xc0
 8002aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aec:	2312      	movs	r3, #18
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af4:	f107 0318 	add.w	r3, r7, #24
 8002af8:	4619      	mov	r1, r3
 8002afa:	4821      	ldr	r0, [pc, #132]	; (8002b80 <HAL_I2C_MspInit+0xd0>)
 8002afc:	f006 f928 	bl	8008d50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0a:	61d3      	str	r3, [r2, #28]
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002b18:	e029      	b.n	8002b6e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_I2C_MspInit+0xd4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d124      	bne.n	8002b6e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b2a:	f043 0308 	orr.w	r3, r3, #8
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EEPROM_SCL_Pin|EEPROM_SDA_Pin;
 8002b3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b42:	2312      	movs	r3, #18
 8002b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 0318 	add.w	r3, r7, #24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	480b      	ldr	r0, [pc, #44]	; (8002b80 <HAL_I2C_MspInit+0xd0>)
 8002b52:	f006 f8fd 	bl	8008d50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a08      	ldr	r2, [pc, #32]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b60:	61d3      	str	r3, [r2, #28]
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_I2C_MspInit+0xcc>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40005400 	.word	0x40005400
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40010c00 	.word	0x40010c00
 8002b84:	40005800 	.word	0x40005800

08002b88 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <MX_IWDG_Init+0x2c>)
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <MX_IWDG_Init+0x30>)
 8002b90:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <MX_IWDG_Init+0x2c>)
 8002b94:	2206      	movs	r2, #6
 8002b96:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <MX_IWDG_Init+0x2c>)
 8002b9a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002b9e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002ba0:	4804      	ldr	r0, [pc, #16]	; (8002bb4 <MX_IWDG_Init+0x2c>)
 8002ba2:	f007 fd49 	bl	800a638 <HAL_IWDG_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002bac:	f000 fd56 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002bb0:	bf00      	nop
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	200009a4 	.word	0x200009a4
 8002bb8:	40003000 	.word	0x40003000
 8002bbc:	00000000 	.word	0x00000000

08002bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bc4:	f004 f858 	bl	8006c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bc8:	f000 f884 	bl	8002cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bcc:	f7ff fe96 	bl	80028fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002bd0:	f7ff fe76 	bl	80028c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002bd4:	f7ff f844 	bl	8001c60 <MX_ADC1_Init>
  MX_CAN_Init();
 8002bd8:	f7ff f956 	bl	8001e88 <MX_CAN_Init>
  MX_I2C1_Init();
 8002bdc:	f7ff ff0c 	bl	80029f8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002be0:	f003 ff48 	bl	8006a74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002be4:	f003 ff94 	bl	8006b10 <MX_TIM3_Init>
  MX_I2C2_Init();
 8002be8:	f7ff ff34 	bl	8002a54 <MX_I2C2_Init>
  MX_IWDG_Init();
 8002bec:	f7ff ffcc 	bl	8002b88 <MX_IWDG_Init>
  MX_SPI1_Init();
 8002bf0:	f000 fd3a 	bl	8003668 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  BMS_Init();
 8002bf4:	f000 f8ca 	bl	8002d8c <BMS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read voltage per-cell and total voltage
	  Adbms6948_measure_cells(knChainId, nRet);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <main+0xe8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f7fe fbd1 	bl	80013a8 <Adbms6948_measure_cells>
	  pack_voltage = Calculate_Pack_Voltage (CellVoltage);
 8002c06:	4829      	ldr	r0, [pc, #164]	; (8002cac <main+0xec>)
 8002c08:	f000 fb22 	bl	8003250 <Calculate_Pack_Voltage>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <main+0xf0>)
 8002c10:	6013      	str	r3, [r2, #0]

	  //Onder & Over voltage per-cell protection
	  isCell_UnderVoltage(CellVoltage);
 8002c12:	4826      	ldr	r0, [pc, #152]	; (8002cac <main+0xec>)
 8002c14:	f000 fbf2 	bl	80033fc <isCell_UnderVoltage>
	  isCell_OverVoltage(CellVoltage);
 8002c18:	4824      	ldr	r0, [pc, #144]	; (8002cac <main+0xec>)
 8002c1a:	f000 fc27 	bl	800346c <isCell_OverVoltage>

	  //Read Current
	  Adbms6948_measure_current(knChainId, nRet);
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <main+0xe8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f7fe fc26 	bl	8001478 <Adbms6948_measure_current>

	  //comparing cell voltage to get
	  unbalance_cell = get_balance_status(CellVoltage);
 8002c2c:	481f      	ldr	r0, [pc, #124]	; (8002cac <main+0xec>)
 8002c2e:	f000 fb33 	bl	8003298 <get_balance_status>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b1f      	ldr	r3, [pc, #124]	; (8002cb4 <main+0xf4>)
 8002c38:	801a      	strh	r2, [r3, #0]

	  // Balancing Process (arus charging 0.1 tidak perlu di balancing)
	  if(BMS_mode == 2 && IBATT < -0.1 && (VBATT > VBATT_BALANCE_START)) {
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <main+0xf8>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d11b      	bne.n	8002c7a <main+0xba>
 8002c42:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <main+0xfc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc5a 	bl	8000500 <__aeabi_f2d>
 8002c4c:	a314      	add	r3, pc, #80	; (adr r3, 8002ca0 <main+0xe0>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	f7fd ff1f 	bl	8000a94 <__aeabi_dcmplt>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00e      	beq.n	8002c7a <main+0xba>
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <main+0x100>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4918      	ldr	r1, [pc, #96]	; (8002cc4 <main+0x104>)
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fab6 	bl	80011d4 <__aeabi_fcmpgt>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <main+0xba>
		  Adbms6948_Discharge_Cell(balance_status);
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <main+0x108>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fc56 	bl	8001524 <Adbms6948_Discharge_Cell>
 8002c78:	e002      	b.n	8002c80 <main+0xc0>
	  }
	  else {
		  Adbms6948_Discharge_Cell(0);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7fe fc52 	bl	8001524 <Adbms6948_Discharge_Cell>
	  }

	  LED_Toggle;
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	4812      	ldr	r0, [pc, #72]	; (8002ccc <main+0x10c>)
 8002c84:	f006 fa10 	bl	80090a8 <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f004 f857 	bl	8006d3c <HAL_Delay>

	  BMS_ScreenMode_RUN();
 8002c8e:	f000 f911 	bl	8002eb4 <BMS_ScreenMode_RUN>
	  HAL_IWDG_Refresh(&hiwdg);
 8002c92:	480f      	ldr	r0, [pc, #60]	; (8002cd0 <main+0x110>)
 8002c94:	f007 fd12 	bl	800a6bc <HAL_IWDG_Refresh>
	  Adbms6948_measure_cells(knChainId, nRet);
 8002c98:	e7ae      	b.n	8002bf8 <main+0x38>
 8002c9a:	bf00      	nop
 8002c9c:	f3af 8000 	nop.w
 8002ca0:	9999999a 	.word	0x9999999a
 8002ca4:	bfb99999 	.word	0xbfb99999
 8002ca8:	20000348 	.word	0x20000348
 8002cac:	200009e0 	.word	0x200009e0
 8002cb0:	200009dc 	.word	0x200009dc
 8002cb4:	200002c8 	.word	0x200002c8
 8002cb8:	200002c2 	.word	0x200002c2
 8002cbc:	20000280 	.word	0x20000280
 8002cc0:	2000027c 	.word	0x2000027c
 8002cc4:	42040000 	.word	0x42040000
 8002cc8:	200002c6 	.word	0x200002c6
 8002ccc:	40011000 	.word	0x40011000
 8002cd0:	200009a4 	.word	0x200009a4

08002cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b096      	sub	sp, #88	; 0x58
 8002cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cde:	2228      	movs	r2, #40	; 0x28
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f00b fce6 	bl	800e6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002d08:	230a      	movs	r3, #10
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d10:	2310      	movs	r3, #16
 8002d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d14:	2301      	movs	r3, #1
 8002d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002d20:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002d24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f007 fcd6 	bl	800a6dc <HAL_RCC_OscConfig>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d36:	f000 fc91 	bl	800365c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d3a:	230f      	movs	r3, #15
 8002d3c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f007 ff40 	bl	800abdc <HAL_RCC_ClockConfig>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002d62:	f000 fc7b 	bl	800365c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002d66:	2302      	movs	r3, #2
 8002d68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	4618      	mov	r0, r3
 8002d74:	f008 f8b8 	bl	800aee8 <HAL_RCCEx_PeriphCLKConfig>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002d7e:	f000 fc6d 	bl	800365c <Error_Handler>
  }
}
 8002d82:	bf00      	nop
 8002d84:	3758      	adds	r7, #88	; 0x58
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <BMS_Init>:

/* USER CODE BEGIN 4 */
void BMS_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
	itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 8002d92:	2210      	movs	r2, #16
 8002d94:	493a      	ldr	r1, [pc, #232]	; (8002e80 <BMS_Init+0xf4>)
 8002d96:	f640 2022 	movw	r0, #2594	; 0xa22
 8002d9a:	f00b fc7b 	bl	800e694 <itoa>
	int ii=0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002da2:	e01a      	b.n	8002dda <BMS_Init+0x4e>
		UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8002da4:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <BMS_Init+0xf4>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	70fb      	strb	r3, [r7, #3]
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	3301      	adds	r3, #1
 8002db2:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <BMS_Init+0xf8>)
 8002db4:	4413      	add	r3, r2
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d102      	bne.n	8002dc6 <BMS_Init+0x3a>
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	3b20      	subs	r3, #32
 8002dc4:	e000      	b.n	8002dc8 <BMS_Init+0x3c>
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	b2d9      	uxtb	r1, r3
 8002dca:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <BMS_Init+0xfc>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	701a      	strb	r2, [r3, #0]
		ii++;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
	while(ii<6){
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	dde1      	ble.n	8002da4 <BMS_Init+0x18>
	}
	//beep startup indicator
	StartUp_Buzzer();
 8002de0:	f000 fbc8 	bl	8003574 <StartUp_Buzzer>
	//ADBMS6948 initialization
	Adbms_Init(NULL);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fe fac3 	bl	8001370 <Adbms_Init>

	SSD1306_Init();
 8002dea:	f000 fcd5 	bl	8003798 <SSD1306_Init>
	HAL_Delay(500);
 8002dee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002df2:	f003 ffa3 	bl	8006d3c <HAL_Delay>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 fdba 	bl	8003970 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8002dfc:	f000 fd8a 	bl	8003914 <SSD1306_UpdateScreen>

	SSD1306_GotoXY (30,10);
 8002e00:	210a      	movs	r1, #10
 8002e02:	201e      	movs	r0, #30
 8002e04:	f000 fe2a 	bl	8003a5c <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I BMS", &Font_7x10, 1);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4920      	ldr	r1, [pc, #128]	; (8002e8c <BMS_Init+0x100>)
 8002e0c:	4820      	ldr	r0, [pc, #128]	; (8002e90 <BMS_Init+0x104>)
 8002e0e:	f000 febb 	bl	8003b88 <SSD1306_Puts>
	SSD1306_GotoXY (40, 30);
 8002e12:	211e      	movs	r1, #30
 8002e14:	2028      	movs	r0, #40	; 0x28
 8002e16:	f000 fe21 	bl	8003a5c <SSD1306_GotoXY>
	SSD1306_Puts ("10S13P", &Font_7x10, 1);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	491b      	ldr	r1, [pc, #108]	; (8002e8c <BMS_Init+0x100>)
 8002e1e:	481d      	ldr	r0, [pc, #116]	; (8002e94 <BMS_Init+0x108>)
 8002e20:	f000 feb2 	bl	8003b88 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002e24:	f000 fd76 	bl	8003914 <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f000 fda1 	bl	8003970 <SSD1306_Fill>
	HAL_Delay(10);
 8002e2e:	200a      	movs	r0, #10
 8002e30:	f003 ff84 	bl	8006d3c <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adc_value, 7);
 8002e34:	2207      	movs	r2, #7
 8002e36:	4918      	ldr	r1, [pc, #96]	; (8002e98 <BMS_Init+0x10c>)
 8002e38:	4818      	ldr	r0, [pc, #96]	; (8002e9c <BMS_Init+0x110>)
 8002e3a:	f004 f88d 	bl	8006f58 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8002e3e:	4818      	ldr	r0, [pc, #96]	; (8002ea0 <BMS_Init+0x114>)
 8002e40:	f008 fd28 	bl	800b894 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002e44:	4817      	ldr	r0, [pc, #92]	; (8002ea4 <BMS_Init+0x118>)
 8002e46:	f008 fd25 	bl	800b894 <HAL_TIM_Base_Start_IT>

	BATT_State=STATE_STANDBY;
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <BMS_Init+0x11c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
	Batt_Open_Mode();
 8002e50:	f7fe fcb0 	bl	80017b4 <Batt_Open_Mode>
	BATT_Start_Up = 1;
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <BMS_Init+0x120>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
	flag_start_shutdown = 0;
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <BMS_Init+0x124>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f003 ff6b 	bl	8006d3c <HAL_Delay>
	EEPROM_isDeviceReady(0xA0);
 8002e66:	20a0      	movs	r0, #160	; 0xa0
 8002e68:	f7fe fea2 	bl	8001bb0 <EEPROM_isDeviceReady>
	BMS_CAN_Config();
 8002e6c:	f7ff fcea 	bl	8002844 <BMS_CAN_Config>
	HAL_Delay(10);
 8002e70:	200a      	movs	r0, #10
 8002e72:	f003 ff63 	bl	8006d3c <HAL_Delay>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200009cc 	.word	0x200009cc
 8002e84:	08013d60 	.word	0x08013d60
 8002e88:	200009c4 	.word	0x200009c4
 8002e8c:	20000038 	.word	0x20000038
 8002e90:	080130b8 	.word	0x080130b8
 8002e94:	080130c4 	.word	0x080130c4
 8002e98:	2000026c 	.word	0x2000026c
 8002e9c:	20000788 	.word	0x20000788
 8002ea0:	20000ae4 	.word	0x20000ae4
 8002ea4:	20000a9c 	.word	0x20000a9c
 8002ea8:	200009d8 	.word	0x200009d8
 8002eac:	20000345 	.word	0x20000345
 8002eb0:	200002c0 	.word	0x200002c0

08002eb4 <BMS_ScreenMode_RUN>:

void BMS_ScreenMode_RUN(void)
{
 8002eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af06      	add	r7, sp, #24
	if(flag_start_shutdown == 0)
 8002ebc:	4ba6      	ldr	r3, [pc, #664]	; (8003158 <BMS_ScreenMode_RUN+0x2a4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d146      	bne.n	8002f52 <BMS_ScreenMode_RUN+0x9e>
	{
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f000 fd53 	bl	8003970 <SSD1306_Fill>
		sprintf(buff_lcd,"RUNNING");
 8002eca:	49a4      	ldr	r1, [pc, #656]	; (800315c <BMS_ScreenMode_RUN+0x2a8>)
 8002ecc:	48a4      	ldr	r0, [pc, #656]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002ece:	f00c fae5 	bl	800f49c <siprintf>
		SSD1306_GotoXY(40,18);
 8002ed2:	2112      	movs	r1, #18
 8002ed4:	2028      	movs	r0, #40	; 0x28
 8002ed6:	f000 fdc1 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8002eda:	2201      	movs	r2, #1
 8002edc:	49a1      	ldr	r1, [pc, #644]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 8002ede:	48a0      	ldr	r0, [pc, #640]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002ee0:	f000 fe52 	bl	8003b88 <SSD1306_Puts>

		sprintf(buff_lcd,"SLEEP_STATE");
 8002ee4:	49a0      	ldr	r1, [pc, #640]	; (8003168 <BMS_ScreenMode_RUN+0x2b4>)
 8002ee6:	489e      	ldr	r0, [pc, #632]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002ee8:	f00c fad8 	bl	800f49c <siprintf>
		SSD1306_GotoXY(25,38);
 8002eec:	2126      	movs	r1, #38	; 0x26
 8002eee:	2019      	movs	r0, #25
 8002ef0:	f000 fdb4 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	499b      	ldr	r1, [pc, #620]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 8002ef8:	4899      	ldr	r0, [pc, #612]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002efa:	f000 fe45 	bl	8003b88 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8002efe:	f000 fd09 	bl	8003914 <SSD1306_UpdateScreen>

		Batt_Open_Mode();
 8002f02:	f7fe fc57 	bl	80017b4 <Batt_Open_Mode>
		Reset_FlagProtection();
 8002f06:	f000 fae9 	bl	80034dc <Reset_FlagProtection>

		if(last_flag_start_shutdown==1) Shutdown_time_last = HAL_GetTick();
 8002f0a:	4b98      	ldr	r3, [pc, #608]	; (800316c <BMS_ScreenMode_RUN+0x2b8>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <BMS_ScreenMode_RUN+0x6a>
 8002f12:	f003 ff09 	bl	8006d28 <HAL_GetTick>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b95      	ldr	r3, [pc, #596]	; (8003170 <BMS_ScreenMode_RUN+0x2bc>)
 8002f1c:	601a      	str	r2, [r3, #0]

		// Automatic sleep after 30s without receive CAN
		Shutdown_time=HAL_GetTick();
 8002f1e:	f003 ff03 	bl	8006d28 <HAL_GetTick>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b93      	ldr	r3, [pc, #588]	; (8003174 <BMS_ScreenMode_RUN+0x2c0>)
 8002f28:	601a      	str	r2, [r3, #0]
		if(Shutdown_time-Shutdown_time_last>Shutdown_tick){
 8002f2a:	4b92      	ldr	r3, [pc, #584]	; (8003174 <BMS_ScreenMode_RUN+0x2c0>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b90      	ldr	r3, [pc, #576]	; (8003170 <BMS_ScreenMode_RUN+0x2bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	1ad2      	subs	r2, r2, r3
 8002f34:	4b90      	ldr	r3, [pc, #576]	; (8003178 <BMS_ScreenMode_RUN+0x2c4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	dd06      	ble.n	8002f4a <BMS_ScreenMode_RUN+0x96>
			ShutDown_Buzzer();
 8002f3c:	f000 fb54 	bl	80035e8 <ShutDown_Buzzer>
			HAL_GPIO_WritePin(BMS_SHUTDOWN_GPIO_Port, BMS_SHUTDOWN_Pin, 1);
 8002f40:	2201      	movs	r2, #1
 8002f42:	2102      	movs	r1, #2
 8002f44:	488d      	ldr	r0, [pc, #564]	; (800317c <BMS_ScreenMode_RUN+0x2c8>)
 8002f46:	f006 f897 	bl	8009078 <HAL_GPIO_WritePin>
		}
		last_flag_start_shutdown = 0;
 8002f4a:	4b88      	ldr	r3, [pc, #544]	; (800316c <BMS_ScreenMode_RUN+0x2b8>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e16a      	b.n	8003228 <BMS_ScreenMode_RUN+0x374>
	}

	else {
		SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f000 fd0c 	bl	8003970 <SSD1306_Fill>
		if(BATT_State==STATE_CHARGE)
 8002f58:	4b89      	ldr	r3, [pc, #548]	; (8003180 <BMS_ScreenMode_RUN+0x2cc>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <BMS_ScreenMode_RUN+0xb8>
			sprintf(buff_lcd,"RUN (C) - %05s", UPPER_UNIQUE_Code);
 8002f60:	4a88      	ldr	r2, [pc, #544]	; (8003184 <BMS_ScreenMode_RUN+0x2d0>)
 8002f62:	4989      	ldr	r1, [pc, #548]	; (8003188 <BMS_ScreenMode_RUN+0x2d4>)
 8002f64:	487e      	ldr	r0, [pc, #504]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002f66:	f00c fa99 	bl	800f49c <siprintf>
 8002f6a:	e01c      	b.n	8002fa6 <BMS_ScreenMode_RUN+0xf2>

		else if(BATT_State==STATE_DISCHARGE)
 8002f6c:	4b84      	ldr	r3, [pc, #528]	; (8003180 <BMS_ScreenMode_RUN+0x2cc>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d105      	bne.n	8002f80 <BMS_ScreenMode_RUN+0xcc>
			sprintf(buff_lcd,"RUN (D) - %05s", UPPER_UNIQUE_Code);
 8002f74:	4a83      	ldr	r2, [pc, #524]	; (8003184 <BMS_ScreenMode_RUN+0x2d0>)
 8002f76:	4985      	ldr	r1, [pc, #532]	; (800318c <BMS_ScreenMode_RUN+0x2d8>)
 8002f78:	4879      	ldr	r0, [pc, #484]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002f7a:	f00c fa8f 	bl	800f49c <siprintf>
 8002f7e:	e012      	b.n	8002fa6 <BMS_ScreenMode_RUN+0xf2>

		else if(BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8002f80:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <BMS_ScreenMode_RUN+0x2cc>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d105      	bne.n	8002f94 <BMS_ScreenMode_RUN+0xe0>
			sprintf(buff_lcd,"RUN (C/D) - %05s", UPPER_UNIQUE_Code);
 8002f88:	4a7e      	ldr	r2, [pc, #504]	; (8003184 <BMS_ScreenMode_RUN+0x2d0>)
 8002f8a:	4981      	ldr	r1, [pc, #516]	; (8003190 <BMS_ScreenMode_RUN+0x2dc>)
 8002f8c:	4874      	ldr	r0, [pc, #464]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002f8e:	f00c fa85 	bl	800f49c <siprintf>
 8002f92:	e008      	b.n	8002fa6 <BMS_ScreenMode_RUN+0xf2>

		else if(BATT_State==STATE_STANDBY)
 8002f94:	4b7a      	ldr	r3, [pc, #488]	; (8003180 <BMS_ScreenMode_RUN+0x2cc>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <BMS_ScreenMode_RUN+0xf2>
			sprintf(buff_lcd,"RUN (Open) - %05s", UPPER_UNIQUE_Code);
 8002f9c:	4a79      	ldr	r2, [pc, #484]	; (8003184 <BMS_ScreenMode_RUN+0x2d0>)
 8002f9e:	497d      	ldr	r1, [pc, #500]	; (8003194 <BMS_ScreenMode_RUN+0x2e0>)
 8002fa0:	486f      	ldr	r0, [pc, #444]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002fa2:	f00c fa7b 	bl	800f49c <siprintf>

		SSD1306_GotoXY(0,0);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f000 fd57 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8002fae:	2201      	movs	r2, #1
 8002fb0:	496c      	ldr	r1, [pc, #432]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 8002fb2:	486b      	ldr	r0, [pc, #428]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002fb4:	f000 fde8 	bl	8003b88 <SSD1306_Puts>

		sprintf(buff_lcd,"V=%6.2f I=%6.2f",VBATT, IBATT);
 8002fb8:	4b77      	ldr	r3, [pc, #476]	; (8003198 <BMS_ScreenMode_RUN+0x2e4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd fa9f 	bl	8000500 <__aeabi_f2d>
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	460d      	mov	r5, r1
 8002fc6:	4b75      	ldr	r3, [pc, #468]	; (800319c <BMS_ScreenMode_RUN+0x2e8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fa98 	bl	8000500 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd8:	4622      	mov	r2, r4
 8002fda:	462b      	mov	r3, r5
 8002fdc:	4970      	ldr	r1, [pc, #448]	; (80031a0 <BMS_ScreenMode_RUN+0x2ec>)
 8002fde:	4860      	ldr	r0, [pc, #384]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002fe0:	f00c fa5c 	bl	800f49c <siprintf>
		SSD1306_GotoXY(0,10);
 8002fe4:	210a      	movs	r1, #10
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f000 fd38 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8002fec:	2201      	movs	r2, #1
 8002fee:	495d      	ldr	r1, [pc, #372]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 8002ff0:	485b      	ldr	r0, [pc, #364]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8002ff2:	f000 fdc9 	bl	8003b88 <SSD1306_Puts>
		sprintf(buff_lcd,"T=%3.0f|%3.0f|%3.0f|%3.0f", Suhu_T1, Suhu_T2, Suhu_T3, Suhu_T4);
 8002ff6:	4b6b      	ldr	r3, [pc, #428]	; (80031a4 <BMS_ScreenMode_RUN+0x2f0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd fa80 	bl	8000500 <__aeabi_f2d>
 8003000:	4682      	mov	sl, r0
 8003002:	468b      	mov	fp, r1
 8003004:	4b68      	ldr	r3, [pc, #416]	; (80031a8 <BMS_ScreenMode_RUN+0x2f4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa79 	bl	8000500 <__aeabi_f2d>
 800300e:	4604      	mov	r4, r0
 8003010:	460d      	mov	r5, r1
 8003012:	4b66      	ldr	r3, [pc, #408]	; (80031ac <BMS_ScreenMode_RUN+0x2f8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa72 	bl	8000500 <__aeabi_f2d>
 800301c:	4680      	mov	r8, r0
 800301e:	4689      	mov	r9, r1
 8003020:	4b63      	ldr	r3, [pc, #396]	; (80031b0 <BMS_ScreenMode_RUN+0x2fc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd fa6b 	bl	8000500 <__aeabi_f2d>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003032:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003036:	e9cd 4500 	strd	r4, r5, [sp]
 800303a:	4652      	mov	r2, sl
 800303c:	465b      	mov	r3, fp
 800303e:	495d      	ldr	r1, [pc, #372]	; (80031b4 <BMS_ScreenMode_RUN+0x300>)
 8003040:	4847      	ldr	r0, [pc, #284]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8003042:	f00c fa2b 	bl	800f49c <siprintf>
		SSD1306_GotoXY(0,20);
 8003046:	2114      	movs	r1, #20
 8003048:	2000      	movs	r0, #0
 800304a:	f000 fd07 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 800304e:	2201      	movs	r2, #1
 8003050:	4944      	ldr	r1, [pc, #272]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 8003052:	4843      	ldr	r0, [pc, #268]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8003054:	f000 fd98 	bl	8003b88 <SSD1306_Puts>
		sprintf(buff_lcd,"C=%5.1f%%--%5.1f%%",Pack_SOC,SOC_manipulasi);
 8003058:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <BMS_ScreenMode_RUN+0x304>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa4f 	bl	8000500 <__aeabi_f2d>
 8003062:	4604      	mov	r4, r0
 8003064:	460d      	mov	r5, r1
 8003066:	4b55      	ldr	r3, [pc, #340]	; (80031bc <BMS_ScreenMode_RUN+0x308>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fa48 	bl	8000500 <__aeabi_f2d>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	e9cd 2300 	strd	r2, r3, [sp]
 8003078:	4622      	mov	r2, r4
 800307a:	462b      	mov	r3, r5
 800307c:	4950      	ldr	r1, [pc, #320]	; (80031c0 <BMS_ScreenMode_RUN+0x30c>)
 800307e:	4838      	ldr	r0, [pc, #224]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8003080:	f00c fa0c 	bl	800f49c <siprintf>
		SSD1306_GotoXY(0,30);
 8003084:	211e      	movs	r1, #30
 8003086:	2000      	movs	r0, #0
 8003088:	f000 fce8 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 800308c:	2201      	movs	r2, #1
 800308e:	4935      	ldr	r1, [pc, #212]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 8003090:	4833      	ldr	r0, [pc, #204]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8003092:	f000 fd79 	bl	8003b88 <SSD1306_Puts>
		sprintf(buff_lcd,"B=%5d|%4.2f|%4.2f",unbalance_cell, persen_imbalance, OFFSET_SENSOR_ARUS);
 8003096:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <BMS_ScreenMode_RUN+0x310>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	461e      	mov	r6, r3
 800309c:	4b4a      	ldr	r3, [pc, #296]	; (80031c8 <BMS_ScreenMode_RUN+0x314>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fa2d 	bl	8000500 <__aeabi_f2d>
 80030a6:	4604      	mov	r4, r0
 80030a8:	460d      	mov	r5, r1
 80030aa:	4b48      	ldr	r3, [pc, #288]	; (80031cc <BMS_ScreenMode_RUN+0x318>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa26 	bl	8000500 <__aeabi_f2d>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030bc:	e9cd 4500 	strd	r4, r5, [sp]
 80030c0:	4632      	mov	r2, r6
 80030c2:	4943      	ldr	r1, [pc, #268]	; (80031d0 <BMS_ScreenMode_RUN+0x31c>)
 80030c4:	4826      	ldr	r0, [pc, #152]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 80030c6:	f00c f9e9 	bl	800f49c <siprintf>
		SSD1306_GotoXY(0,40);
 80030ca:	2128      	movs	r1, #40	; 0x28
 80030cc:	2000      	movs	r0, #0
 80030ce:	f000 fcc5 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 80030d2:	2201      	movs	r2, #1
 80030d4:	4923      	ldr	r1, [pc, #140]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 80030d6:	4822      	ldr	r0, [pc, #136]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 80030d8:	f000 fd56 	bl	8003b88 <SSD1306_Puts>
		sprintf(buff_lcd,"%d-%d--%4.2f| %5.0f",fault_code,last_fault_code,Isc, AH_Consumption);
 80030dc:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <BMS_ScreenMode_RUN+0x320>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	461e      	mov	r6, r3
 80030e2:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <BMS_ScreenMode_RUN+0x324>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4698      	mov	r8, r3
 80030e8:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <BMS_ScreenMode_RUN+0x328>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa07 	bl	8000500 <__aeabi_f2d>
 80030f2:	4604      	mov	r4, r0
 80030f4:	460d      	mov	r5, r1
 80030f6:	4b3a      	ldr	r3, [pc, #232]	; (80031e0 <BMS_ScreenMode_RUN+0x32c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fd fa00 	bl	8000500 <__aeabi_f2d>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003108:	e9cd 4500 	strd	r4, r5, [sp]
 800310c:	4643      	mov	r3, r8
 800310e:	4632      	mov	r2, r6
 8003110:	4934      	ldr	r1, [pc, #208]	; (80031e4 <BMS_ScreenMode_RUN+0x330>)
 8003112:	4813      	ldr	r0, [pc, #76]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8003114:	f00c f9c2 	bl	800f49c <siprintf>
		SSD1306_GotoXY(0,50);
 8003118:	2132      	movs	r1, #50	; 0x32
 800311a:	2000      	movs	r0, #0
 800311c:	f000 fc9e 	bl	8003a5c <SSD1306_GotoXY>
		SSD1306_Puts(buff_lcd, &Font_7x10, SSD1306_COLOR_WHITE);
 8003120:	2201      	movs	r2, #1
 8003122:	4910      	ldr	r1, [pc, #64]	; (8003164 <BMS_ScreenMode_RUN+0x2b0>)
 8003124:	480e      	ldr	r0, [pc, #56]	; (8003160 <BMS_ScreenMode_RUN+0x2ac>)
 8003126:	f000 fd2f 	bl	8003b88 <SSD1306_Puts>

		SSD1306_UpdateScreen();
 800312a:	f000 fbf3 	bl	8003914 <SSD1306_UpdateScreen>

		if(BMS_mode==0) Batt_Open_Mode();
 800312e:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <BMS_ScreenMode_RUN+0x334>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <BMS_ScreenMode_RUN+0x288>
 8003136:	f7fe fb3d 	bl	80017b4 <Batt_Open_Mode>
 800313a:	e05d      	b.n	80031f8 <BMS_ScreenMode_RUN+0x344>
		else if(BMS_mode==1) Batt_Discharge_Mode();
 800313c:	4b2a      	ldr	r3, [pc, #168]	; (80031e8 <BMS_ScreenMode_RUN+0x334>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <BMS_ScreenMode_RUN+0x296>
 8003144:	f7fe f9fe 	bl	8001544 <Batt_Discharge_Mode>
 8003148:	e056      	b.n	80031f8 <BMS_ScreenMode_RUN+0x344>
		else if(BMS_mode==2) Batt_Charge_Mode();
 800314a:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <BMS_ScreenMode_RUN+0x334>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d14c      	bne.n	80031ec <BMS_ScreenMode_RUN+0x338>
 8003152:	f7fe fa57 	bl	8001604 <Batt_Charge_Mode>
 8003156:	e04f      	b.n	80031f8 <BMS_ScreenMode_RUN+0x344>
 8003158:	200002c0 	.word	0x200002c0
 800315c:	080130cc 	.word	0x080130cc
 8003160:	200009b0 	.word	0x200009b0
 8003164:	20000038 	.word	0x20000038
 8003168:	080130d4 	.word	0x080130d4
 800316c:	200002c1 	.word	0x200002c1
 8003170:	200002dc 	.word	0x200002dc
 8003174:	200002d8 	.word	0x200002d8
 8003178:	20000044 	.word	0x20000044
 800317c:	40011000 	.word	0x40011000
 8003180:	200009d8 	.word	0x200009d8
 8003184:	200009c4 	.word	0x200009c4
 8003188:	080130e0 	.word	0x080130e0
 800318c:	080130f0 	.word	0x080130f0
 8003190:	08013100 	.word	0x08013100
 8003194:	08013114 	.word	0x08013114
 8003198:	2000027c 	.word	0x2000027c
 800319c:	20000280 	.word	0x20000280
 80031a0:	08013128 	.word	0x08013128
 80031a4:	200002a8 	.word	0x200002a8
 80031a8:	200002ac 	.word	0x200002ac
 80031ac:	200002b0 	.word	0x200002b0
 80031b0:	200002b4 	.word	0x200002b4
 80031b4:	08013138 	.word	0x08013138
 80031b8:	2000031c 	.word	0x2000031c
 80031bc:	200002ec 	.word	0x200002ec
 80031c0:	08013154 	.word	0x08013154
 80031c4:	200002c8 	.word	0x200002c8
 80031c8:	200002cc 	.word	0x200002cc
 80031cc:	2000028c 	.word	0x2000028c
 80031d0:	08013168 	.word	0x08013168
 80031d4:	200002f8 	.word	0x200002f8
 80031d8:	200002f9 	.word	0x200002f9
 80031dc:	20000284 	.word	0x20000284
 80031e0:	20000a78 	.word	0x20000a78
 80031e4:	0801317c 	.word	0x0801317c
 80031e8:	200002c2 	.word	0x200002c2
		else if(BMS_mode==3) Batt_Full_CD_Mode();
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <BMS_ScreenMode_RUN+0x384>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d101      	bne.n	80031f8 <BMS_ScreenMode_RUN+0x344>
 80031f4:	f7fe fa72 	bl	80016dc <Batt_Full_CD_Mode>

	//  Automatically sleep after 30s without receive CAN
		Sleep_time=HAL_GetTick();
 80031f8:	f003 fd96 	bl	8006d28 <HAL_GetTick>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <BMS_ScreenMode_RUN+0x388>)
 8003202:	601a      	str	r2, [r3, #0]
		if(Sleep_time-Active_time_last>Sleep_tick)
 8003204:	4b0d      	ldr	r3, [pc, #52]	; (800323c <BMS_ScreenMode_RUN+0x388>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <BMS_ScreenMode_RUN+0x38c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	1ad2      	subs	r2, r2, r3
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <BMS_ScreenMode_RUN+0x390>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	dd05      	ble.n	8003222 <BMS_ScreenMode_RUN+0x36e>
		{
			BMS_mode=0;
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <BMS_ScreenMode_RUN+0x384>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
			flag_start_shutdown=0;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <BMS_ScreenMode_RUN+0x394>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
		}
		last_flag_start_shutdown = 1;
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <BMS_ScreenMode_RUN+0x398>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
	}
	HAL_Delay(1);
 8003228:	2001      	movs	r0, #1
 800322a:	f003 fd87 	bl	8006d3c <HAL_Delay>
}
 800322e:	bf00      	nop
 8003230:	3704      	adds	r7, #4
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003238:	200002c2 	.word	0x200002c2
 800323c:	200002d0 	.word	0x200002d0
 8003240:	200002d4 	.word	0x200002d4
 8003244:	20000040 	.word	0x20000040
 8003248:	200002c0 	.word	0x200002c0
 800324c:	200002c1 	.word	0x200002c1

08003250 <Calculate_Pack_Voltage>:

float Calculate_Pack_Voltage (float Cell_Voltage_10data[10])
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	float sum_voltage;
	float buffer_voltage;
	for(uint8_t ij=0; ij<10; ij++){
 8003258:	2300      	movs	r3, #0
 800325a:	74fb      	strb	r3, [r7, #19]
 800325c:	e00d      	b.n	800327a <Calculate_Pack_Voltage+0x2a>
		buffer_voltage += Cell_Voltage_10data[ij];
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7fd fcee 	bl	8000c4c <__addsf3>
 8003270:	4603      	mov	r3, r0
 8003272:	617b      	str	r3, [r7, #20]
	for(uint8_t ij=0; ij<10; ij++){
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	3301      	adds	r3, #1
 8003278:	74fb      	strb	r3, [r7, #19]
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b09      	cmp	r3, #9
 800327e:	d9ee      	bls.n	800325e <Calculate_Pack_Voltage+0xe>
	}
	sum_voltage = buffer_voltage;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	60fb      	str	r3, [r7, #12]
	buffer_voltage = 0;
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

	return sum_voltage;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	0000      	movs	r0, r0
	...

08003298 <get_balance_status>:


uint16_t get_balance_status(float Cell_Voltage_10data[10])
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b092      	sub	sp, #72	; 0x48
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
	uint16_t balance_status;
	float Cell_Voltage_Lowest = 4.2;
 80032a0:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <get_balance_status+0x150>)
 80032a2:	643b      	str	r3, [r7, #64]	; 0x40
	float delta_vbatt[10];
	balance_status=0x0000;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t temp_dat;
	float buffer_imbalance;

	for(int ik=0;ik<10;ik++) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80032ae:	e014      	b.n	80032da <get_balance_status+0x42>
		if(Cell_Voltage_10data[ik] < Cell_Voltage_Lowest)
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80032be:	f7fd ff89 	bl	80011d4 <__aeabi_fcmpgt>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <get_balance_status+0x3c>
			Cell_Voltage_Lowest = Cell_Voltage_10data[ik];
 80032c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40
	for(int ik=0;ik<10;ik++) {
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d6:	3301      	adds	r3, #1
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b09      	cmp	r3, #9
 80032de:	dde7      	ble.n	80032b0 <get_balance_status+0x18>
	}

	for(int ik=0;ik<10;ik++) {
 80032e0:	2300      	movs	r3, #0
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
 80032e4:	e050      	b.n	8003388 <get_balance_status+0xf0>
		delta_vbatt[ik] = Cell_Voltage_10data[ik] - Cell_Voltage_Lowest;
 80032e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	4413      	add	r3, r2
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd fca8 	bl	8000c48 <__aeabi_fsub>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003304:	440b      	add	r3, r1
 8003306:	f843 2c40 	str.w	r2, [r3, #-64]

		buffer_imbalance+=delta_vbatt[ik];
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003312:	4413      	add	r3, r2
 8003314:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003318:	4619      	mov	r1, r3
 800331a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800331c:	f7fd fc96 	bl	8000c4c <__addsf3>
 8003320:	4603      	mov	r3, r0
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c

		if(delta_vbatt[ik]> 0.025 && Cell_Voltage_10data[ik] > VCELL_BALANCE_PERMITTED) {
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800332c:	4413      	add	r3, r2
 800332e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd f8e4 	bl	8000500 <__aeabi_f2d>
 8003338:	a327      	add	r3, pc, #156	; (adr r3, 80033d8 <get_balance_status+0x140>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f7fd fbc7 	bl	8000ad0 <__aeabi_dcmpgt>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d01c      	beq.n	8003382 <get_balance_status+0xea>
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd f8d4 	bl	8000500 <__aeabi_f2d>
 8003358:	a321      	add	r3, pc, #132	; (adr r3, 80033e0 <get_balance_status+0x148>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd fbb7 	bl	8000ad0 <__aeabi_dcmpgt>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00c      	beq.n	8003382 <get_balance_status+0xea>
			temp_dat = 0x01;
 8003368:	2301      	movs	r3, #1
 800336a:	867b      	strh	r3, [r7, #50]	; 0x32
			temp_dat = temp_dat << ik;
 800336c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	867b      	strh	r3, [r7, #50]	; 0x32
			balance_status= balance_status+temp_dat;
 8003376:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800337a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800337c:	4413      	add	r3, r2
 800337e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	for(int ik=0;ik<10;ik++) {
 8003382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003384:	3301      	adds	r3, #1
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
 8003388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338a:	2b09      	cmp	r3, #9
 800338c:	ddab      	ble.n	80032e6 <get_balance_status+0x4e>
		}
	}
	persen_imbalance=buffer_imbalance*100/9.0/1.2;
 800338e:	4917      	ldr	r1, [pc, #92]	; (80033ec <get_balance_status+0x154>)
 8003390:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003392:	f7fd fd63 	bl	8000e5c <__aeabi_fmul>
 8003396:	4603      	mov	r3, r0
 8003398:	4618      	mov	r0, r3
 800339a:	f7fd f8b1 	bl	8000500 <__aeabi_f2d>
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <get_balance_status+0x158>)
 80033a4:	f7fd fa2e 	bl	8000804 <__aeabi_ddiv>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <get_balance_status+0x15c>)
 80033b6:	f7fd fa25 	bl	8000804 <__aeabi_ddiv>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f7fd fbed 	bl	8000ba0 <__aeabi_d2f>
 80033c6:	4603      	mov	r3, r0
 80033c8:	4a0b      	ldr	r2, [pc, #44]	; (80033f8 <get_balance_status+0x160>)
 80033ca:	6013      	str	r3, [r2, #0]
	return(balance_status);
 80033cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3748      	adds	r7, #72	; 0x48
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	9999999a 	.word	0x9999999a
 80033dc:	3f999999 	.word	0x3f999999
 80033e0:	66666666 	.word	0x66666666
 80033e4:	400a6666 	.word	0x400a6666
 80033e8:	40866666 	.word	0x40866666
 80033ec:	42c80000 	.word	0x42c80000
 80033f0:	40220000 	.word	0x40220000
 80033f4:	3ff33333 	.word	0x3ff33333
 80033f8:	200002cc 	.word	0x200002cc

080033fc <isCell_UnderVoltage>:

void isCell_UnderVoltage(float Cell_Voltage_10data[10]){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	for(uint8_t kl=0; kl<10; kl++){
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e01d      	b.n	8003446 <isCell_UnderVoltage+0x4a>
		if (CellVoltage[kl] < Cell_UnderVoltage_Threshold) {
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	4a12      	ldr	r2, [pc, #72]	; (8003458 <isCell_UnderVoltage+0x5c>)
 800340e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <isCell_UnderVoltage+0x60>)
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd febe 	bl	8001198 <__aeabi_fcmplt>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <isCell_UnderVoltage+0x3e>
			fault_code = 15;
 8003422:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <isCell_UnderVoltage+0x64>)
 8003424:	220f      	movs	r2, #15
 8003426:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8003428:	f7fe f9c4 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_cellundervoltage = ON;
 800342c:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <isCell_UnderVoltage+0x68>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
			Cell_UnderVoltage = YES;
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <isCell_UnderVoltage+0x6c>)
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e002      	b.n	8003440 <isCell_UnderVoltage+0x44>
		}
		else Cell_UnderVoltage = NO;
 800343a:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <isCell_UnderVoltage+0x6c>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
	for(uint8_t kl=0; kl<10; kl++){
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	3301      	adds	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b09      	cmp	r3, #9
 800344a:	d9de      	bls.n	800340a <isCell_UnderVoltage+0xe>
	}
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200009e0 	.word	0x200009e0
 800345c:	402ccccd 	.word	0x402ccccd
 8003460:	200002f8 	.word	0x200002f8
 8003464:	20000313 	.word	0x20000313
 8003468:	20000318 	.word	0x20000318

0800346c <isCell_OverVoltage>:

void isCell_OverVoltage(float Cell_Voltage_10data[10]){
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
	for(uint8_t kl=0; kl<10; kl++){
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e01d      	b.n	80034b6 <isCell_OverVoltage+0x4a>
		if (CellVoltage[kl] > Cell_OverVoltage_Threshold) {
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	4a12      	ldr	r2, [pc, #72]	; (80034c8 <isCell_OverVoltage+0x5c>)
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	4a12      	ldr	r2, [pc, #72]	; (80034cc <isCell_OverVoltage+0x60>)
 8003484:	4611      	mov	r1, r2
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fea4 	bl	80011d4 <__aeabi_fcmpgt>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00b      	beq.n	80034aa <isCell_OverVoltage+0x3e>
			fault_code = 16;
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <isCell_OverVoltage+0x64>)
 8003494:	2210      	movs	r2, #16
 8003496:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8003498:	f7fe f98c 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_cellovervoltage = ON;
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <isCell_OverVoltage+0x68>)
 800349e:	2201      	movs	r2, #1
 80034a0:	701a      	strb	r2, [r3, #0]
			Cell_OverVoltage = YES;
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <isCell_OverVoltage+0x6c>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e002      	b.n	80034b0 <isCell_OverVoltage+0x44>
		}
		else Cell_OverVoltage = NO;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <isCell_OverVoltage+0x6c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
	for(uint8_t kl=0; kl<10; kl++){
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	3301      	adds	r3, #1
 80034b4:	73fb      	strb	r3, [r7, #15]
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d9de      	bls.n	800347a <isCell_OverVoltage+0xe>
	}
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	200009e0 	.word	0x200009e0
 80034cc:	40866666 	.word	0x40866666
 80034d0:	200002f8 	.word	0x200002f8
 80034d4:	20000314 	.word	0x20000314
 80034d8:	20000317 	.word	0x20000317

080034dc <Reset_FlagProtection>:

void Reset_FlagProtection(void){
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
	flag_trip_overtemperature=OFF;
 80034e0:	4b16      	ldr	r3, [pc, #88]	; (800353c <Reset_FlagProtection+0x60>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature=OFF;
 80034e6:	4b16      	ldr	r3, [pc, #88]	; (8003540 <Reset_FlagProtection+0x64>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverDischarge=OFF;
 80034ec:	4b15      	ldr	r3, [pc, #84]	; (8003544 <Reset_FlagProtection+0x68>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge=OFF;			//di tiada kan..!
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <Reset_FlagProtection+0x6c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
	flag_trip_undervoltage=OFF;
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <Reset_FlagProtection+0x70>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
	flag_trip_overvoltage=OFF;
 80034fe:	4b14      	ldr	r3, [pc, #80]	; (8003550 <Reset_FlagProtection+0x74>)
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentdischarge=OFF;
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <Reset_FlagProtection+0x78>)
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge=OFF;
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <Reset_FlagProtection+0x7c>)
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit=OFF;
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <Reset_FlagProtection+0x80>)
 8003512:	2200      	movs	r2, #0
 8003514:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure=OFF;
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <Reset_FlagProtection+0x84>)
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
	flag_trip_unbalance=OFF;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <Reset_FlagProtection+0x88>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
	flag_get_UNIQUECODE=OFF;
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <Reset_FlagProtection+0x8c>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
	flag_trip_cellovervoltage = OFF;
 8003528:	4b10      	ldr	r3, [pc, #64]	; (800356c <Reset_FlagProtection+0x90>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
	flag_trip_cellundervoltage = OFF;
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <Reset_FlagProtection+0x94>)
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	20000308 	.word	0x20000308
 8003540:	20000309 	.word	0x20000309
 8003544:	2000030a 	.word	0x2000030a
 8003548:	2000030b 	.word	0x2000030b
 800354c:	2000030c 	.word	0x2000030c
 8003550:	2000030d 	.word	0x2000030d
 8003554:	2000030e 	.word	0x2000030e
 8003558:	2000030f 	.word	0x2000030f
 800355c:	20000310 	.word	0x20000310
 8003560:	20000311 	.word	0x20000311
 8003564:	20000312 	.word	0x20000312
 8003568:	200002e0 	.word	0x200002e0
 800356c:	20000314 	.word	0x20000314
 8003570:	20000313 	.word	0x20000313

08003574 <StartUp_Buzzer>:

void StartUp_Buzzer(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
	BUZZ_Write(1); HAL_Delay(500);
 8003578:	2201      	movs	r2, #1
 800357a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800357e:	4819      	ldr	r0, [pc, #100]	; (80035e4 <StartUp_Buzzer+0x70>)
 8003580:	f005 fd7a 	bl	8009078 <HAL_GPIO_WritePin>
 8003584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003588:	f003 fbd8 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(500);
 800358c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003590:	4814      	ldr	r0, [pc, #80]	; (80035e4 <StartUp_Buzzer+0x70>)
 8003592:	f005 fd89 	bl	80090a8 <HAL_GPIO_TogglePin>
 8003596:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800359a:	f003 fbcf 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 800359e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035a2:	4810      	ldr	r0, [pc, #64]	; (80035e4 <StartUp_Buzzer+0x70>)
 80035a4:	f005 fd80 	bl	80090a8 <HAL_GPIO_TogglePin>
 80035a8:	2064      	movs	r0, #100	; 0x64
 80035aa:	f003 fbc7 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 80035ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035b2:	480c      	ldr	r0, [pc, #48]	; (80035e4 <StartUp_Buzzer+0x70>)
 80035b4:	f005 fd78 	bl	80090a8 <HAL_GPIO_TogglePin>
 80035b8:	2064      	movs	r0, #100	; 0x64
 80035ba:	f003 fbbf 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 80035be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035c2:	4808      	ldr	r0, [pc, #32]	; (80035e4 <StartUp_Buzzer+0x70>)
 80035c4:	f005 fd70 	bl	80090a8 <HAL_GPIO_TogglePin>
 80035c8:	2064      	movs	r0, #100	; 0x64
 80035ca:	f003 fbb7 	bl	8006d3c <HAL_Delay>
	BUZZ_Write(0); HAL_Delay(100);
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035d4:	4803      	ldr	r0, [pc, #12]	; (80035e4 <StartUp_Buzzer+0x70>)
 80035d6:	f005 fd4f 	bl	8009078 <HAL_GPIO_WritePin>
 80035da:	2064      	movs	r0, #100	; 0x64
 80035dc:	f003 fbae 	bl	8006d3c <HAL_Delay>
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40011000 	.word	0x40011000

080035e8 <ShutDown_Buzzer>:

void ShutDown_Buzzer(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
	BUZZ_Write(1); HAL_Delay(100);
 80035ec:	2201      	movs	r2, #1
 80035ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035f2:	4819      	ldr	r0, [pc, #100]	; (8003658 <ShutDown_Buzzer+0x70>)
 80035f4:	f005 fd40 	bl	8009078 <HAL_GPIO_WritePin>
 80035f8:	2064      	movs	r0, #100	; 0x64
 80035fa:	f003 fb9f 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 80035fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003602:	4815      	ldr	r0, [pc, #84]	; (8003658 <ShutDown_Buzzer+0x70>)
 8003604:	f005 fd50 	bl	80090a8 <HAL_GPIO_TogglePin>
 8003608:	2064      	movs	r0, #100	; 0x64
 800360a:	f003 fb97 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 800360e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003612:	4811      	ldr	r0, [pc, #68]	; (8003658 <ShutDown_Buzzer+0x70>)
 8003614:	f005 fd48 	bl	80090a8 <HAL_GPIO_TogglePin>
 8003618:	2064      	movs	r0, #100	; 0x64
 800361a:	f003 fb8f 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(100);
 800361e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <ShutDown_Buzzer+0x70>)
 8003624:	f005 fd40 	bl	80090a8 <HAL_GPIO_TogglePin>
 8003628:	2064      	movs	r0, #100	; 0x64
 800362a:	f003 fb87 	bl	8006d3c <HAL_Delay>
	BUZZ_Toggle; HAL_Delay(750);
 800362e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003632:	4809      	ldr	r0, [pc, #36]	; (8003658 <ShutDown_Buzzer+0x70>)
 8003634:	f005 fd38 	bl	80090a8 <HAL_GPIO_TogglePin>
 8003638:	f240 20ee 	movw	r0, #750	; 0x2ee
 800363c:	f003 fb7e 	bl	8006d3c <HAL_Delay>
	BUZZ_Write(0); HAL_Delay(100);
 8003640:	2200      	movs	r2, #0
 8003642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003646:	4804      	ldr	r0, [pc, #16]	; (8003658 <ShutDown_Buzzer+0x70>)
 8003648:	f005 fd16 	bl	8009078 <HAL_GPIO_WritePin>
 800364c:	2064      	movs	r0, #100	; 0x64
 800364e:	f003 fb75 	bl	8006d3c <HAL_Delay>
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40011000 	.word	0x40011000

0800365c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003660:	b672      	cpsid	i
}
 8003662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003664:	e7fe      	b.n	8003664 <Error_Handler+0x8>
	...

08003668 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <MX_SPI1_Init+0x64>)
 800366e:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <MX_SPI1_Init+0x68>)
 8003670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <MX_SPI1_Init+0x64>)
 8003674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800367a:	4b14      	ldr	r3, [pc, #80]	; (80036cc <MX_SPI1_Init+0x64>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <MX_SPI1_Init+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003686:	4b11      	ldr	r3, [pc, #68]	; (80036cc <MX_SPI1_Init+0x64>)
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <MX_SPI1_Init+0x64>)
 800368e:	2200      	movs	r2, #0
 8003690:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <MX_SPI1_Init+0x64>)
 8003694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003698:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <MX_SPI1_Init+0x64>)
 800369c:	2220      	movs	r2, #32
 800369e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <MX_SPI1_Init+0x64>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80036a6:	4b09      	ldr	r3, [pc, #36]	; (80036cc <MX_SPI1_Init+0x64>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <MX_SPI1_Init+0x64>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <MX_SPI1_Init+0x64>)
 80036b4:	220a      	movs	r2, #10
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036b8:	4804      	ldr	r0, [pc, #16]	; (80036cc <MX_SPI1_Init+0x64>)
 80036ba:	f007 fccb 	bl	800b054 <HAL_SPI_Init>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80036c4:	f7ff ffca 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20000a20 	.word	0x20000a20
 80036d0:	40013000 	.word	0x40013000

080036d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a26      	ldr	r2, [pc, #152]	; (8003788 <HAL_SPI_MspInit+0xb4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d145      	bne.n	8003780 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_SPI_MspInit+0xb8>)
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	4a24      	ldr	r2, [pc, #144]	; (800378c <HAL_SPI_MspInit+0xb8>)
 80036fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036fe:	6193      	str	r3, [r2, #24]
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_SPI_MspInit+0xb8>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_SPI_MspInit+0xb8>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	4a1e      	ldr	r2, [pc, #120]	; (800378c <HAL_SPI_MspInit+0xb8>)
 8003712:	f043 0308 	orr.w	r3, r3, #8
 8003716:	6193      	str	r3, [r2, #24]
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <HAL_SPI_MspInit+0xb8>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003724:	2328      	movs	r3, #40	; 0x28
 8003726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800372c:	2303      	movs	r3, #3
 800372e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4619      	mov	r1, r3
 8003736:	4816      	ldr	r0, [pc, #88]	; (8003790 <HAL_SPI_MspInit+0xbc>)
 8003738:	f005 fb0a 	bl	8008d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800373c:	2310      	movs	r3, #16
 800373e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003740:	2300      	movs	r3, #0
 8003742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	4619      	mov	r1, r3
 800374e:	4810      	ldr	r0, [pc, #64]	; (8003790 <HAL_SPI_MspInit+0xbc>)
 8003750:	f005 fafe 	bl	8008d50 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <HAL_SPI_MspInit+0xc0>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <HAL_SPI_MspInit+0xc0>)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2023      	movs	r0, #35	; 0x23
 8003776:	f004 fe6c 	bl	8008452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800377a:	2023      	movs	r0, #35	; 0x23
 800377c:	f004 fe85 	bl	800848a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003780:	bf00      	nop
 8003782:	3728      	adds	r7, #40	; 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40013000 	.word	0x40013000
 800378c:	40021000 	.word	0x40021000
 8003790:	40010c00 	.word	0x40010c00
 8003794:	40010000 	.word	0x40010000

08003798 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800379e:	f000 fa19 	bl	8003bd4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80037a2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80037a6:	2201      	movs	r2, #1
 80037a8:	2178      	movs	r1, #120	; 0x78
 80037aa:	4858      	ldr	r0, [pc, #352]	; (800390c <SSD1306_Init+0x174>)
 80037ac:	f006 fa3a 	bl	8009c24 <HAL_I2C_IsDeviceReady>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e0a4      	b.n	8003904 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 25000;
 80037ba:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80037be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037c0:	e002      	b.n	80037c8 <SSD1306_Init+0x30>
		p--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f9      	bne.n	80037c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80037ce:	22ae      	movs	r2, #174	; 0xae
 80037d0:	2100      	movs	r1, #0
 80037d2:	2078      	movs	r0, #120	; 0x78
 80037d4:	f000 fa6a 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80037d8:	2220      	movs	r2, #32
 80037da:	2100      	movs	r1, #0
 80037dc:	2078      	movs	r0, #120	; 0x78
 80037de:	f000 fa65 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80037e2:	2210      	movs	r2, #16
 80037e4:	2100      	movs	r1, #0
 80037e6:	2078      	movs	r0, #120	; 0x78
 80037e8:	f000 fa60 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80037ec:	22b0      	movs	r2, #176	; 0xb0
 80037ee:	2100      	movs	r1, #0
 80037f0:	2078      	movs	r0, #120	; 0x78
 80037f2:	f000 fa5b 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80037f6:	22c8      	movs	r2, #200	; 0xc8
 80037f8:	2100      	movs	r1, #0
 80037fa:	2078      	movs	r0, #120	; 0x78
 80037fc:	f000 fa56 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	2078      	movs	r0, #120	; 0x78
 8003806:	f000 fa51 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800380a:	2210      	movs	r2, #16
 800380c:	2100      	movs	r1, #0
 800380e:	2078      	movs	r0, #120	; 0x78
 8003810:	f000 fa4c 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003814:	2240      	movs	r2, #64	; 0x40
 8003816:	2100      	movs	r1, #0
 8003818:	2078      	movs	r0, #120	; 0x78
 800381a:	f000 fa47 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800381e:	2281      	movs	r2, #129	; 0x81
 8003820:	2100      	movs	r1, #0
 8003822:	2078      	movs	r0, #120	; 0x78
 8003824:	f000 fa42 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003828:	22ff      	movs	r2, #255	; 0xff
 800382a:	2100      	movs	r1, #0
 800382c:	2078      	movs	r0, #120	; 0x78
 800382e:	f000 fa3d 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003832:	22a1      	movs	r2, #161	; 0xa1
 8003834:	2100      	movs	r1, #0
 8003836:	2078      	movs	r0, #120	; 0x78
 8003838:	f000 fa38 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800383c:	22a6      	movs	r2, #166	; 0xa6
 800383e:	2100      	movs	r1, #0
 8003840:	2078      	movs	r0, #120	; 0x78
 8003842:	f000 fa33 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003846:	22a8      	movs	r2, #168	; 0xa8
 8003848:	2100      	movs	r1, #0
 800384a:	2078      	movs	r0, #120	; 0x78
 800384c:	f000 fa2e 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003850:	223f      	movs	r2, #63	; 0x3f
 8003852:	2100      	movs	r1, #0
 8003854:	2078      	movs	r0, #120	; 0x78
 8003856:	f000 fa29 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800385a:	22a4      	movs	r2, #164	; 0xa4
 800385c:	2100      	movs	r1, #0
 800385e:	2078      	movs	r0, #120	; 0x78
 8003860:	f000 fa24 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003864:	22d3      	movs	r2, #211	; 0xd3
 8003866:	2100      	movs	r1, #0
 8003868:	2078      	movs	r0, #120	; 0x78
 800386a:	f000 fa1f 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	2078      	movs	r0, #120	; 0x78
 8003874:	f000 fa1a 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003878:	22d5      	movs	r2, #213	; 0xd5
 800387a:	2100      	movs	r1, #0
 800387c:	2078      	movs	r0, #120	; 0x78
 800387e:	f000 fa15 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003882:	22f0      	movs	r2, #240	; 0xf0
 8003884:	2100      	movs	r1, #0
 8003886:	2078      	movs	r0, #120	; 0x78
 8003888:	f000 fa10 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800388c:	22d9      	movs	r2, #217	; 0xd9
 800388e:	2100      	movs	r1, #0
 8003890:	2078      	movs	r0, #120	; 0x78
 8003892:	f000 fa0b 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003896:	2222      	movs	r2, #34	; 0x22
 8003898:	2100      	movs	r1, #0
 800389a:	2078      	movs	r0, #120	; 0x78
 800389c:	f000 fa06 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80038a0:	22da      	movs	r2, #218	; 0xda
 80038a2:	2100      	movs	r1, #0
 80038a4:	2078      	movs	r0, #120	; 0x78
 80038a6:	f000 fa01 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80038aa:	2212      	movs	r2, #18
 80038ac:	2100      	movs	r1, #0
 80038ae:	2078      	movs	r0, #120	; 0x78
 80038b0:	f000 f9fc 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80038b4:	22db      	movs	r2, #219	; 0xdb
 80038b6:	2100      	movs	r1, #0
 80038b8:	2078      	movs	r0, #120	; 0x78
 80038ba:	f000 f9f7 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80038be:	2220      	movs	r2, #32
 80038c0:	2100      	movs	r1, #0
 80038c2:	2078      	movs	r0, #120	; 0x78
 80038c4:	f000 f9f2 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80038c8:	228d      	movs	r2, #141	; 0x8d
 80038ca:	2100      	movs	r1, #0
 80038cc:	2078      	movs	r0, #120	; 0x78
 80038ce:	f000 f9ed 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80038d2:	2214      	movs	r2, #20
 80038d4:	2100      	movs	r1, #0
 80038d6:	2078      	movs	r0, #120	; 0x78
 80038d8:	f000 f9e8 	bl	8003cac <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80038dc:	22af      	movs	r2, #175	; 0xaf
 80038de:	2100      	movs	r1, #0
 80038e0:	2078      	movs	r0, #120	; 0x78
 80038e2:	f000 f9e3 	bl	8003cac <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80038e6:	2000      	movs	r0, #0
 80038e8:	f000 f842 	bl	8003970 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80038ec:	f000 f812 	bl	8003914 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <SSD1306_Init+0x178>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <SSD1306_Init+0x178>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <SSD1306_Init+0x178>)
 80038fe:	2201      	movs	r2, #1
 8003900:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003902:	2301      	movs	r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	200008fc 	.word	0x200008fc
 8003910:	2000074c 	.word	0x2000074c

08003914 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800391a:	2300      	movs	r3, #0
 800391c:	71fb      	strb	r3, [r7, #7]
 800391e:	e01d      	b.n	800395c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	3b50      	subs	r3, #80	; 0x50
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	2100      	movs	r1, #0
 800392a:	2078      	movs	r0, #120	; 0x78
 800392c:	f000 f9be 	bl	8003cac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003930:	2200      	movs	r2, #0
 8003932:	2100      	movs	r1, #0
 8003934:	2078      	movs	r0, #120	; 0x78
 8003936:	f000 f9b9 	bl	8003cac <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800393a:	2210      	movs	r2, #16
 800393c:	2100      	movs	r1, #0
 800393e:	2078      	movs	r0, #120	; 0x78
 8003940:	f000 f9b4 	bl	8003cac <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	01db      	lsls	r3, r3, #7
 8003948:	4a08      	ldr	r2, [pc, #32]	; (800396c <SSD1306_UpdateScreen+0x58>)
 800394a:	441a      	add	r2, r3
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	2140      	movs	r1, #64	; 0x40
 8003950:	2078      	movs	r0, #120	; 0x78
 8003952:	f000 f953 	bl	8003bfc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	3301      	adds	r3, #1
 800395a:	71fb      	strb	r3, [r7, #7]
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b07      	cmp	r3, #7
 8003960:	d9de      	bls.n	8003920 <SSD1306_UpdateScreen+0xc>
	}
}
 8003962:	bf00      	nop
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000034c 	.word	0x2000034c

08003970 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <SSD1306_Fill+0x14>
 8003980:	2300      	movs	r3, #0
 8003982:	e001      	b.n	8003988 <SSD1306_Fill+0x18>
 8003984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398c:	4619      	mov	r1, r3
 800398e:	4803      	ldr	r0, [pc, #12]	; (800399c <SSD1306_Fill+0x2c>)
 8003990:	f00a fe90 	bl	800e6b4 <memset>
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000034c 	.word	0x2000034c

080039a0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	80fb      	strh	r3, [r7, #6]
 80039aa:	460b      	mov	r3, r1
 80039ac:	80bb      	strh	r3, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	70fb      	strb	r3, [r7, #3]
	if (
 80039b2:	88fb      	ldrh	r3, [r7, #6]
 80039b4:	2b7f      	cmp	r3, #127	; 0x7f
 80039b6:	d848      	bhi.n	8003a4a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80039b8:	88bb      	ldrh	r3, [r7, #4]
 80039ba:	2b3f      	cmp	r3, #63	; 0x3f
 80039bc:	d845      	bhi.n	8003a4a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80039be:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <SSD1306_DrawPixel+0xb4>)
 80039c0:	791b      	ldrb	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d006      	beq.n	80039d4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d11a      	bne.n	8003a10 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80039da:	88fa      	ldrh	r2, [r7, #6]
 80039dc:	88bb      	ldrh	r3, [r7, #4]
 80039de:	08db      	lsrs	r3, r3, #3
 80039e0:	b298      	uxth	r0, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	01db      	lsls	r3, r3, #7
 80039e6:	4413      	add	r3, r2
 80039e8:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <SSD1306_DrawPixel+0xb8>)
 80039ea:	5cd3      	ldrb	r3, [r2, r3]
 80039ec:	b25a      	sxtb	r2, r3
 80039ee:	88bb      	ldrh	r3, [r7, #4]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b259      	sxtb	r1, r3
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	4603      	mov	r3, r0
 8003a04:	01db      	lsls	r3, r3, #7
 8003a06:	4413      	add	r3, r2
 8003a08:	b2c9      	uxtb	r1, r1
 8003a0a:	4a13      	ldr	r2, [pc, #76]	; (8003a58 <SSD1306_DrawPixel+0xb8>)
 8003a0c:	54d1      	strb	r1, [r2, r3]
 8003a0e:	e01d      	b.n	8003a4c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	88bb      	ldrh	r3, [r7, #4]
 8003a14:	08db      	lsrs	r3, r3, #3
 8003a16:	b298      	uxth	r0, r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	01db      	lsls	r3, r3, #7
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <SSD1306_DrawPixel+0xb8>)
 8003a20:	5cd3      	ldrb	r3, [r2, r3]
 8003a22:	b25a      	sxtb	r2, r3
 8003a24:	88bb      	ldrh	r3, [r7, #4]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	4013      	ands	r3, r2
 8003a38:	b259      	sxtb	r1, r3
 8003a3a:	88fa      	ldrh	r2, [r7, #6]
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	01db      	lsls	r3, r3, #7
 8003a40:	4413      	add	r3, r2
 8003a42:	b2c9      	uxtb	r1, r1
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <SSD1306_DrawPixel+0xb8>)
 8003a46:	54d1      	strb	r1, [r2, r3]
 8003a48:	e000      	b.n	8003a4c <SSD1306_DrawPixel+0xac>
		return;
 8003a4a:	bf00      	nop
	}
}
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	2000074c 	.word	0x2000074c
 8003a58:	2000034c 	.word	0x2000034c

08003a5c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	460a      	mov	r2, r1
 8003a66:	80fb      	strh	r3, [r7, #6]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003a6c:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <SSD1306_GotoXY+0x28>)
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003a72:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <SSD1306_GotoXY+0x28>)
 8003a74:	88bb      	ldrh	r3, [r7, #4]
 8003a76:	8053      	strh	r3, [r2, #2]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000074c 	.word	0x2000074c

08003a88 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	71fb      	strb	r3, [r7, #7]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003a98:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	4413      	add	r3, r2
	if (
 8003aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8003aa6:	dc07      	bgt.n	8003ab8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003aa8:	4b36      	ldr	r3, [pc, #216]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003aaa:	885b      	ldrh	r3, [r3, #2]
 8003aac:	461a      	mov	r2, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ab4:	2b3f      	cmp	r3, #63	; 0x3f
 8003ab6:	dd01      	ble.n	8003abc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e05e      	b.n	8003b7a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e04b      	b.n	8003b5a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	3b20      	subs	r3, #32
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	7849      	ldrb	r1, [r1, #1]
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	440b      	add	r3, r1
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e030      	b.n	8003b48 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003af8:	881a      	ldrh	r2, [r3, #0]
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	b298      	uxth	r0, r3
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003b04:	885a      	ldrh	r2, [r3, #2]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	79ba      	ldrb	r2, [r7, #6]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f7ff ff45 	bl	80039a0 <SSD1306_DrawPixel>
 8003b16:	e014      	b.n	8003b42 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	b298      	uxth	r0, r3
 8003b24:	4b17      	ldr	r3, [pc, #92]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003b26:	885a      	ldrh	r2, [r3, #2]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	79bb      	ldrb	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f7ff ff2f 	bl	80039a0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	3301      	adds	r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d3c8      	bcc.n	8003ae6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d3ad      	bcc.n	8003ac2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003b66:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <SSD1306_Putc+0xfc>)
 8003b76:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003b78:	79fb      	ldrb	r3, [r7, #7]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	2000074c 	.word	0x2000074c

08003b88 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003b96:	e012      	b.n	8003bbe <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	79fa      	ldrb	r2, [r7, #7]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ff71 	bl	8003a88 <SSD1306_Putc>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d002      	beq.n	8003bb8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	e008      	b.n	8003bca <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e8      	bne.n	8003b98 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 8003bda:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <ssd1306_I2C_Init+0x24>)
 8003bdc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bde:	e002      	b.n	8003be6 <ssd1306_I2C_Init+0x12>
		p--;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f9      	bne.n	8003be0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003bec:	bf00      	nop
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	00055730 	.word	0x00055730

08003bfc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003bfc:	b5b0      	push	{r4, r5, r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	603a      	str	r2, [r7, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	71bb      	strb	r3, [r7, #6]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	80bb      	strh	r3, [r7, #4]
 8003c12:	466b      	mov	r3, sp
 8003c14:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8003c16:	88bb      	ldrh	r3, [r7, #4]
 8003c18:	1c5c      	adds	r4, r3, #1
 8003c1a:	1e63      	subs	r3, r4, #1
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	4623      	mov	r3, r4
 8003c20:	4618      	mov	r0, r3
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	00cb      	lsls	r3, r1, #3
 8003c30:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003c34:	00c2      	lsls	r2, r0, #3
 8003c36:	4623      	mov	r3, r4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f04f 0100 	mov.w	r1, #0
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	f04f 0300 	mov.w	r3, #0
 8003c46:	00cb      	lsls	r3, r1, #3
 8003c48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003c4c:	00c2      	lsls	r2, r0, #3
 8003c4e:	4623      	mov	r3, r4
 8003c50:	3307      	adds	r3, #7
 8003c52:	08db      	lsrs	r3, r3, #3
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	ebad 0d03 	sub.w	sp, sp, r3
 8003c5a:	ab02      	add	r3, sp, #8
 8003c5c:	3300      	adds	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	79ba      	ldrb	r2, [r7, #6]
 8003c64:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
 8003c6a:	e00a      	b.n	8003c82 <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	441a      	add	r2, r3
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	7811      	ldrb	r1, [r2, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	75fb      	strb	r3, [r7, #23]
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	88ba      	ldrh	r2, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d2ef      	bcs.n	8003c6c <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	b299      	uxth	r1, r3
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	88bb      	ldrh	r3, [r7, #4]
 8003c94:	200a      	movs	r0, #10
 8003c96:	9000      	str	r0, [sp, #0]
 8003c98:	4803      	ldr	r0, [pc, #12]	; (8003ca8 <ssd1306_I2C_WriteMulti+0xac>)
 8003c9a:	f005 fb63 	bl	8009364 <HAL_I2C_Master_Transmit>
 8003c9e:	46ad      	mov	sp, r5
}
 8003ca0:	bf00      	nop
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca8:	200008fc 	.word	0x200008fc

08003cac <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	71bb      	strb	r3, [r7, #6]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003cbe:	79bb      	ldrb	r3, [r7, #6]
 8003cc0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003cc2:	797b      	ldrb	r3, [r7, #5]
 8003cc4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	b299      	uxth	r1, r3
 8003cca:	f107 020c 	add.w	r2, r7, #12
 8003cce:	230a      	movs	r3, #10
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	4803      	ldr	r0, [pc, #12]	; (8003ce4 <ssd1306_I2C_Write+0x38>)
 8003cd6:	f005 fb45 	bl	8009364 <HAL_I2C_Master_Transmit>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	200008fc 	.word	0x200008fc

08003ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <HAL_MspInit+0x5c>)
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_MspInit+0x5c>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6193      	str	r3, [r2, #24]
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_MspInit+0x5c>)
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_MspInit+0x5c>)
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <HAL_MspInit+0x5c>)
 8003d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d10:	61d3      	str	r3, [r2, #28]
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_MspInit+0x5c>)
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_MspInit+0x60>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_MspInit+0x60>)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40010000 	.word	0x40010000

08003d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003d50:	e7fe      	b.n	8003d50 <NMI_Handler+0x4>

08003d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d56:	e7fe      	b.n	8003d56 <HardFault_Handler+0x4>

08003d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d5c:	e7fe      	b.n	8003d5c <MemManage_Handler+0x4>

08003d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d62:	e7fe      	b.n	8003d62 <BusFault_Handler+0x4>

08003d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d68:	e7fe      	b.n	8003d68 <UsageFault_Handler+0x4>

08003d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d76:	b480      	push	{r7}
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr

08003d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d82:	b480      	push	{r7}
 8003d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d86:	bf00      	nop
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bc80      	pop	{r7}
 8003d8c:	4770      	bx	lr

08003d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d92:	f002 ffb7 	bl	8006d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003da0:	4802      	ldr	r0, [pc, #8]	; (8003dac <DMA1_Channel1_IRQHandler+0x10>)
 8003da2:	f004 fd6b 	bl	800887c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003da6:	bf00      	nop
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	200007b8 	.word	0x200007b8

08003db0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003db6:	f004 f852 	bl	8007e5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000818 	.word	0x20000818
 8003dc4:	00000000 	.word	0x00000000

08003dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003dc8:	b5b0      	push	{r4, r5, r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003dcc:	48be      	ldr	r0, [pc, #760]	; (80040c8 <TIM2_IRQHandler+0x300>)
 8003dce:	f007 fdcf 	bl	800b970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	hitung_suhu++;
 8003dd2:	4bbe      	ldr	r3, [pc, #760]	; (80040cc <TIM2_IRQHandler+0x304>)
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	4bbc      	ldr	r3, [pc, #752]	; (80040cc <TIM2_IRQHandler+0x304>)
 8003ddc:	801a      	strh	r2, [r3, #0]

	VBATT = pack_voltage;
 8003dde:	4bbc      	ldr	r3, [pc, #752]	; (80040d0 <TIM2_IRQHandler+0x308>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4abc      	ldr	r2, [pc, #752]	; (80040d4 <TIM2_IRQHandler+0x30c>)
 8003de4:	6013      	str	r3, [r2, #0]
	IBATT = Current;
 8003de6:	4bbc      	ldr	r3, [pc, #752]	; (80040d8 <TIM2_IRQHandler+0x310>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4abc      	ldr	r2, [pc, #752]	; (80040dc <TIM2_IRQHandler+0x314>)
 8003dec:	6013      	str	r3, [r2, #0]

	if(hitung_suhu >= interval_hitungsuhu) {
 8003dee:	4bb7      	ldr	r3, [pc, #732]	; (80040cc <TIM2_IRQHandler+0x304>)
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	2bc7      	cmp	r3, #199	; 0xc7
 8003df4:	f240 81c1 	bls.w	800417a <TIM2_IRQHandler+0x3b2>

		Res_T1  = adc_value[0]*10000/(3900-adc_value[0]); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8003df8:	4bb9      	ldr	r3, [pc, #740]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e02:	fb03 f202 	mul.w	r2, r3, r2
 8003e06:	4bb6      	ldr	r3, [pc, #728]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003e0e:	330c      	adds	r3, #12
 8003e10:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc ffcd 	bl	8000db4 <__aeabi_i2f>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4ab1      	ldr	r2, [pc, #708]	; (80040e4 <TIM2_IRQHandler+0x31c>)
 8003e1e:	6013      	str	r3, [r2, #0]
		Suhu_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003e20:	4bb0      	ldr	r3, [pc, #704]	; (80040e4 <TIM2_IRQHandler+0x31c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fb6b 	bl	8000500 <__aeabi_f2d>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	f00a f9f9 	bl	800e228 <log>
 8003e36:	a3a0      	add	r3, pc, #640	; (adr r3, 80040b8 <TIM2_IRQHandler+0x2f0>)
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f7fc fbb8 	bl	80005b0 <__aeabi_dmul>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	a39d      	add	r3, pc, #628	; (adr r3, 80040c0 <TIM2_IRQHandler+0x2f8>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc f9f9 	bl	8000244 <__adddf3>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7fc fea1 	bl	8000ba0 <__aeabi_d2f>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4aa1      	ldr	r2, [pc, #644]	; (80040e8 <TIM2_IRQHandler+0x320>)
 8003e62:	6013      	str	r3, [r2, #0]

		Res_T2  = adc_value[1]*10000/(3900-adc_value[1]);
 8003e64:	4b9e      	ldr	r3, [pc, #632]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003e66:	885b      	ldrh	r3, [r3, #2]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8003e6e:	fb03 f202 	mul.w	r2, r3, r2
 8003e72:	4b9b      	ldr	r3, [pc, #620]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003e74:	885b      	ldrh	r3, [r3, #2]
 8003e76:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fc ff97 	bl	8000db4 <__aeabi_i2f>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4a98      	ldr	r2, [pc, #608]	; (80040ec <TIM2_IRQHandler+0x324>)
 8003e8a:	6013      	str	r3, [r2, #0]
		Suhu_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003e8c:	4b97      	ldr	r3, [pc, #604]	; (80040ec <TIM2_IRQHandler+0x324>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fc fb35 	bl	8000500 <__aeabi_f2d>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f00a f9c3 	bl	800e228 <log>
 8003ea2:	a385      	add	r3, pc, #532	; (adr r3, 80040b8 <TIM2_IRQHandler+0x2f0>)
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f7fc fb82 	bl	80005b0 <__aeabi_dmul>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	a382      	add	r3, pc, #520	; (adr r3, 80040c0 <TIM2_IRQHandler+0x2f8>)
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f7fc f9c3 	bl	8000244 <__adddf3>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fc fe6b 	bl	8000ba0 <__aeabi_d2f>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4a88      	ldr	r2, [pc, #544]	; (80040f0 <TIM2_IRQHandler+0x328>)
 8003ece:	6013      	str	r3, [r2, #0]

		Res_T3  = adc_value[5]*10000/(3900-adc_value[5]);
 8003ed0:	4b83      	ldr	r3, [pc, #524]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003ed2:	895b      	ldrh	r3, [r3, #10]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f242 7310 	movw	r3, #10000	; 0x2710
 8003eda:	fb03 f202 	mul.w	r2, r3, r2
 8003ede:	4b80      	ldr	r3, [pc, #512]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003ee0:	895b      	ldrh	r3, [r3, #10]
 8003ee2:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc ff61 	bl	8000db4 <__aeabi_i2f>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4a7f      	ldr	r2, [pc, #508]	; (80040f4 <TIM2_IRQHandler+0x32c>)
 8003ef6:	6013      	str	r3, [r2, #0]
		Suhu_T3 = -24.05*log(Res_T3) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003ef8:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <TIM2_IRQHandler+0x32c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fc faff 	bl	8000500 <__aeabi_f2d>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f00a f98d 	bl	800e228 <log>
 8003f0e:	a36a      	add	r3, pc, #424	; (adr r3, 80040b8 <TIM2_IRQHandler+0x2f0>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fb4c 	bl	80005b0 <__aeabi_dmul>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	a367      	add	r3, pc, #412	; (adr r3, 80040c0 <TIM2_IRQHandler+0x2f8>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f7fc f98d 	bl	8000244 <__adddf3>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7fc fe35 	bl	8000ba0 <__aeabi_d2f>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a6f      	ldr	r2, [pc, #444]	; (80040f8 <TIM2_IRQHandler+0x330>)
 8003f3a:	6013      	str	r3, [r2, #0]

		Res_T4  = adc_value[6]*10000/(3900-adc_value[6]);
 8003f3c:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003f3e:	899b      	ldrh	r3, [r3, #12]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f242 7310 	movw	r3, #10000	; 0x2710
 8003f46:	fb03 f202 	mul.w	r2, r3, r2
 8003f4a:	4b65      	ldr	r3, [pc, #404]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003f4c:	899b      	ldrh	r3, [r3, #12]
 8003f4e:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003f52:	330c      	adds	r3, #12
 8003f54:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc ff2b 	bl	8000db4 <__aeabi_i2f>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4a66      	ldr	r2, [pc, #408]	; (80040fc <TIM2_IRQHandler+0x334>)
 8003f62:	6013      	str	r3, [r2, #0]
		Suhu_T4 = -24.05*log(Res_T4) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003f64:	4b65      	ldr	r3, [pc, #404]	; (80040fc <TIM2_IRQHandler+0x334>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fc fac9 	bl	8000500 <__aeabi_f2d>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	f00a f957 	bl	800e228 <log>
 8003f7a:	a34f      	add	r3, pc, #316	; (adr r3, 80040b8 <TIM2_IRQHandler+0x2f0>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f7fc fb16 	bl	80005b0 <__aeabi_dmul>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	a34c      	add	r3, pc, #304	; (adr r3, 80040c0 <TIM2_IRQHandler+0x2f8>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc f957 	bl	8000244 <__adddf3>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f7fc fdff 	bl	8000ba0 <__aeabi_d2f>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a56      	ldr	r2, [pc, #344]	; (8004100 <TIM2_IRQHandler+0x338>)
 8003fa6:	6013      	str	r3, [r2, #0]

		Res_T5 = adc_value[2]*10000/(3900-adc_value[2]);
 8003fa8:	4b4d      	ldr	r3, [pc, #308]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003faa:	889b      	ldrh	r3, [r3, #4]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f242 7310 	movw	r3, #10000	; 0x2710
 8003fb2:	fb03 f202 	mul.w	r2, r3, r2
 8003fb6:	4b4a      	ldr	r3, [pc, #296]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8003fb8:	889b      	ldrh	r3, [r3, #4]
 8003fba:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003fbe:	330c      	adds	r3, #12
 8003fc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fef5 	bl	8000db4 <__aeabi_i2f>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4a4d      	ldr	r2, [pc, #308]	; (8004104 <TIM2_IRQHandler+0x33c>)
 8003fce:	6013      	str	r3, [r2, #0]
		MOS_Temp = -24.05*log(Res_T5) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <TIM2_IRQHandler+0x33c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fa93 	bl	8000500 <__aeabi_f2d>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f00a f921 	bl	800e228 <log>
 8003fe6:	a334      	add	r3, pc, #208	; (adr r3, 80040b8 <TIM2_IRQHandler+0x2f0>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f7fc fae0 	bl	80005b0 <__aeabi_dmul>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	a331      	add	r3, pc, #196	; (adr r3, 80040c0 <TIM2_IRQHandler+0x2f8>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc f921 	bl	8000244 <__adddf3>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	f7fc fdc9 	bl	8000ba0 <__aeabi_d2f>
 800400e:	4603      	mov	r3, r0
 8004010:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <TIM2_IRQHandler+0x340>)
 8004012:	6013      	str	r3, [r2, #0]

		Res_T6 = adc_value[3]*10000/(3900-adc_value[3]);
 8004014:	4b32      	ldr	r3, [pc, #200]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8004016:	88db      	ldrh	r3, [r3, #6]
 8004018:	461a      	mov	r2, r3
 800401a:	f242 7310 	movw	r3, #10000	; 0x2710
 800401e:	fb03 f202 	mul.w	r2, r3, r2
 8004022:	4b2f      	ldr	r3, [pc, #188]	; (80040e0 <TIM2_IRQHandler+0x318>)
 8004024:	88db      	ldrh	r3, [r3, #6]
 8004026:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 800402a:	330c      	adds	r3, #12
 800402c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc febf 	bl	8000db4 <__aeabi_i2f>
 8004036:	4603      	mov	r3, r0
 8004038:	4a34      	ldr	r2, [pc, #208]	; (800410c <TIM2_IRQHandler+0x344>)
 800403a:	6013      	str	r3, [r2, #0]
		CurrentSensor_Temp = -24.05*log(Res_T6) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800403c:	4b33      	ldr	r3, [pc, #204]	; (800410c <TIM2_IRQHandler+0x344>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7fc fa5d 	bl	8000500 <__aeabi_f2d>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f00a f8eb 	bl	800e228 <log>
 8004052:	a319      	add	r3, pc, #100	; (adr r3, 80040b8 <TIM2_IRQHandler+0x2f0>)
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f7fc faaa 	bl	80005b0 <__aeabi_dmul>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	a316      	add	r3, pc, #88	; (adr r3, 80040c0 <TIM2_IRQHandler+0x2f8>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc f8eb 	bl	8000244 <__adddf3>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	f7fc fd93 	bl	8000ba0 <__aeabi_d2f>
 800407a:	4603      	mov	r3, r0
 800407c:	4a24      	ldr	r2, [pc, #144]	; (8004110 <TIM2_IRQHandler+0x348>)
 800407e:	6013      	str	r3, [r2, #0]

		if(Suhu_T1>=130) Suhu_T1 = 130;
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <TIM2_IRQHandler+0x320>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4923      	ldr	r1, [pc, #140]	; (8004114 <TIM2_IRQHandler+0x34c>)
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd f89a 	bl	80011c0 <__aeabi_fcmpge>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <TIM2_IRQHandler+0x2d0>
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <TIM2_IRQHandler+0x320>)
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <TIM2_IRQHandler+0x34c>)
 8004096:	601a      	str	r2, [r3, #0]
		if(Suhu_T2>=130) Suhu_T2 = 130;
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <TIM2_IRQHandler+0x328>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	491d      	ldr	r1, [pc, #116]	; (8004114 <TIM2_IRQHandler+0x34c>)
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd f88e 	bl	80011c0 <__aeabi_fcmpge>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <TIM2_IRQHandler+0x2e8>
 80040aa:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <TIM2_IRQHandler+0x328>)
 80040ac:	4a19      	ldr	r2, [pc, #100]	; (8004114 <TIM2_IRQHandler+0x34c>)
 80040ae:	601a      	str	r2, [r3, #0]
		if(Suhu_T3>=130) Suhu_T3 = 130;
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <TIM2_IRQHandler+0x330>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	e030      	b.n	8004118 <TIM2_IRQHandler+0x350>
 80040b6:	bf00      	nop
 80040b8:	cccccccd 	.word	0xcccccccd
 80040bc:	c0380ccc 	.word	0xc0380ccc
 80040c0:	b851eb85 	.word	0xb851eb85
 80040c4:	406ecd1e 	.word	0x406ecd1e
 80040c8:	20000ae4 	.word	0x20000ae4
 80040cc:	20000a94 	.word	0x20000a94
 80040d0:	200009dc 	.word	0x200009dc
 80040d4:	2000027c 	.word	0x2000027c
 80040d8:	200009d4 	.word	0x200009d4
 80040dc:	20000280 	.word	0x20000280
 80040e0:	2000026c 	.word	0x2000026c
 80040e4:	20000290 	.word	0x20000290
 80040e8:	200002a8 	.word	0x200002a8
 80040ec:	20000294 	.word	0x20000294
 80040f0:	200002ac 	.word	0x200002ac
 80040f4:	20000298 	.word	0x20000298
 80040f8:	200002b0 	.word	0x200002b0
 80040fc:	2000029c 	.word	0x2000029c
 8004100:	200002b4 	.word	0x200002b4
 8004104:	200002a0 	.word	0x200002a0
 8004108:	200002b8 	.word	0x200002b8
 800410c:	200002a4 	.word	0x200002a4
 8004110:	200002bc 	.word	0x200002bc
 8004114:	43020000 	.word	0x43020000
 8004118:	491e      	ldr	r1, [pc, #120]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd f850 	bl	80011c0 <__aeabi_fcmpge>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <TIM2_IRQHandler+0x364>
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <TIM2_IRQHandler+0x3d0>)
 8004128:	4a1a      	ldr	r2, [pc, #104]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 800412a:	601a      	str	r2, [r3, #0]
		if(Suhu_T4>=130) Suhu_T4 = 130;
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <TIM2_IRQHandler+0x3d4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4918      	ldr	r1, [pc, #96]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd f844 	bl	80011c0 <__aeabi_fcmpge>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <TIM2_IRQHandler+0x37c>
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <TIM2_IRQHandler+0x3d4>)
 8004140:	4a14      	ldr	r2, [pc, #80]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 8004142:	601a      	str	r2, [r3, #0]
		if(MOS_Temp>=130) MOS_Temp = 130;
 8004144:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <TIM2_IRQHandler+0x3d8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4912      	ldr	r1, [pc, #72]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd f838 	bl	80011c0 <__aeabi_fcmpge>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <TIM2_IRQHandler+0x394>
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <TIM2_IRQHandler+0x3d8>)
 8004158:	4a0e      	ldr	r2, [pc, #56]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 800415a:	601a      	str	r2, [r3, #0]
		if(CurrentSensor_Temp>=130) CurrentSensor_Temp = 130;
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <TIM2_IRQHandler+0x3dc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	490c      	ldr	r1, [pc, #48]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 8004162:	4618      	mov	r0, r3
 8004164:	f7fd f82c 	bl	80011c0 <__aeabi_fcmpge>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <TIM2_IRQHandler+0x3ac>
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <TIM2_IRQHandler+0x3dc>)
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <TIM2_IRQHandler+0x3cc>)
 8004172:	601a      	str	r2, [r3, #0]

		hitung_suhu=0;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <TIM2_IRQHandler+0x3e0>)
 8004176:	2200      	movs	r2, #0
 8004178:	801a      	strh	r2, [r3, #0]
	}

	if(BATT_Start_Up==1)
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <TIM2_IRQHandler+0x3e4>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	f040 80d6 	bne.w	8004330 <TIM2_IRQHandler+0x568>
	{
		if(BATT_State == STATE_DISCHARGE){
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <TIM2_IRQHandler+0x3e8>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b02      	cmp	r3, #2
 800418a:	d113      	bne.n	80041b4 <TIM2_IRQHandler+0x3ec>
			Batt_Protection_when_discharge();
 800418c:	f000 fa2c 	bl	80045e8 <Batt_Protection_when_discharge>
 8004190:	e016      	b.n	80041c0 <TIM2_IRQHandler+0x3f8>
 8004192:	bf00      	nop
 8004194:	43020000 	.word	0x43020000
 8004198:	200002b0 	.word	0x200002b0
 800419c:	200002b4 	.word	0x200002b4
 80041a0:	200002b8 	.word	0x200002b8
 80041a4:	200002bc 	.word	0x200002bc
 80041a8:	20000a94 	.word	0x20000a94
 80041ac:	20000345 	.word	0x20000345
 80041b0:	200009d8 	.word	0x200009d8
		}
		else if(BATT_State == STATE_CHARGE){
 80041b4:	4ba2      	ldr	r3, [pc, #648]	; (8004440 <TIM2_IRQHandler+0x678>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <TIM2_IRQHandler+0x3f8>
			Batt_Protection_when_charge();
 80041bc:	f001 f84c 	bl	8005258 <Batt_Protection_when_charge>
		}
		if(BATT_State == STATE_FULL_CHARGE_DISCHARGE){
 80041c0:	4b9f      	ldr	r3, [pc, #636]	; (8004440 <TIM2_IRQHandler+0x678>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d101      	bne.n	80041cc <TIM2_IRQHandler+0x404>
			Batt_Protection_when_chargedischarge();
 80041c8:	f001 fd32 	bl	8005c30 <Batt_Protection_when_chargedischarge>
		}

		//********************* Clearing protection status *****************************////
		// ---> Clearing UnderVoltage
		if(((Clear_Trip_undervoltage==1)||(VBATT>30))&&flag_trip_undervoltage==ON){
 80041cc:	4b9d      	ldr	r3, [pc, #628]	; (8004444 <TIM2_IRQHandler+0x67c>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d008      	beq.n	80041e6 <TIM2_IRQHandler+0x41e>
 80041d4:	4b9c      	ldr	r3, [pc, #624]	; (8004448 <TIM2_IRQHandler+0x680>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	499c      	ldr	r1, [pc, #624]	; (800444c <TIM2_IRQHandler+0x684>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fc fffa 	bl	80011d4 <__aeabi_fcmpgt>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d009      	beq.n	80041fa <TIM2_IRQHandler+0x432>
 80041e6:	4b9a      	ldr	r3, [pc, #616]	; (8004450 <TIM2_IRQHandler+0x688>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d105      	bne.n	80041fa <TIM2_IRQHandler+0x432>
			flag_trip_undervoltage=OFF;
 80041ee:	4b98      	ldr	r3, [pc, #608]	; (8004450 <TIM2_IRQHandler+0x688>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
			Clear_Trip_undervoltage=0;
 80041f4:	4b93      	ldr	r3, [pc, #588]	; (8004444 <TIM2_IRQHandler+0x67c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCurrent Discharge
		if(flag_trip_overcurrentdischarge==ON && Clear_Trip_overcurrentdischarge==1){
 80041fa:	4b96      	ldr	r3, [pc, #600]	; (8004454 <TIM2_IRQHandler+0x68c>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d109      	bne.n	8004216 <TIM2_IRQHandler+0x44e>
 8004202:	4b95      	ldr	r3, [pc, #596]	; (8004458 <TIM2_IRQHandler+0x690>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <TIM2_IRQHandler+0x44e>
			flag_trip_overcurrentdischarge=OFF;
 800420a:	4b92      	ldr	r3, [pc, #584]	; (8004454 <TIM2_IRQHandler+0x68c>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
			Clear_Trip_overcurrentdischarge=0;
 8004210:	4b91      	ldr	r3, [pc, #580]	; (8004458 <TIM2_IRQHandler+0x690>)
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverTemperature
		if(flag_trip_overtemperature==ON && (Suhu_T1<45)&&(Suhu_T2<45)&&(Suhu_T3<45)&&(Suhu_T4<45)){
 8004216:	4b91      	ldr	r3, [pc, #580]	; (800445c <TIM2_IRQHandler+0x694>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d126      	bne.n	800426c <TIM2_IRQHandler+0x4a4>
 800421e:	4b90      	ldr	r3, [pc, #576]	; (8004460 <TIM2_IRQHandler+0x698>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4990      	ldr	r1, [pc, #576]	; (8004464 <TIM2_IRQHandler+0x69c>)
 8004224:	4618      	mov	r0, r3
 8004226:	f7fc ffb7 	bl	8001198 <__aeabi_fcmplt>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01d      	beq.n	800426c <TIM2_IRQHandler+0x4a4>
 8004230:	4b8d      	ldr	r3, [pc, #564]	; (8004468 <TIM2_IRQHandler+0x6a0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	498b      	ldr	r1, [pc, #556]	; (8004464 <TIM2_IRQHandler+0x69c>)
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc ffae 	bl	8001198 <__aeabi_fcmplt>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d014      	beq.n	800426c <TIM2_IRQHandler+0x4a4>
 8004242:	4b8a      	ldr	r3, [pc, #552]	; (800446c <TIM2_IRQHandler+0x6a4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4987      	ldr	r1, [pc, #540]	; (8004464 <TIM2_IRQHandler+0x69c>)
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc ffa5 	bl	8001198 <__aeabi_fcmplt>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <TIM2_IRQHandler+0x4a4>
 8004254:	4b86      	ldr	r3, [pc, #536]	; (8004470 <TIM2_IRQHandler+0x6a8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4982      	ldr	r1, [pc, #520]	; (8004464 <TIM2_IRQHandler+0x69c>)
 800425a:	4618      	mov	r0, r3
 800425c:	f7fc ff9c 	bl	8001198 <__aeabi_fcmplt>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <TIM2_IRQHandler+0x4a4>
			flag_trip_overtemperature=OFF;
 8004266:	4b7d      	ldr	r3, [pc, #500]	; (800445c <TIM2_IRQHandler+0x694>)
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing UnderTemperature
		if(flag_trip_undertemperature==ON && (Suhu_T1>20)&&(Suhu_T2>20)&&(Suhu_T3>20)&&(Suhu_T4>20)){
 800426c:	4b81      	ldr	r3, [pc, #516]	; (8004474 <TIM2_IRQHandler+0x6ac>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d126      	bne.n	80042c2 <TIM2_IRQHandler+0x4fa>
 8004274:	4b7a      	ldr	r3, [pc, #488]	; (8004460 <TIM2_IRQHandler+0x698>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	497f      	ldr	r1, [pc, #508]	; (8004478 <TIM2_IRQHandler+0x6b0>)
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc ffaa 	bl	80011d4 <__aeabi_fcmpgt>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01d      	beq.n	80042c2 <TIM2_IRQHandler+0x4fa>
 8004286:	4b78      	ldr	r3, [pc, #480]	; (8004468 <TIM2_IRQHandler+0x6a0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	497b      	ldr	r1, [pc, #492]	; (8004478 <TIM2_IRQHandler+0x6b0>)
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc ffa1 	bl	80011d4 <__aeabi_fcmpgt>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d014      	beq.n	80042c2 <TIM2_IRQHandler+0x4fa>
 8004298:	4b74      	ldr	r3, [pc, #464]	; (800446c <TIM2_IRQHandler+0x6a4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4976      	ldr	r1, [pc, #472]	; (8004478 <TIM2_IRQHandler+0x6b0>)
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fc ff98 	bl	80011d4 <__aeabi_fcmpgt>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00b      	beq.n	80042c2 <TIM2_IRQHandler+0x4fa>
 80042aa:	4b71      	ldr	r3, [pc, #452]	; (8004470 <TIM2_IRQHandler+0x6a8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4972      	ldr	r1, [pc, #456]	; (8004478 <TIM2_IRQHandler+0x6b0>)
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fc ff8f 	bl	80011d4 <__aeabi_fcmpgt>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <TIM2_IRQHandler+0x4fa>
			flag_trip_undertemperature=OFF;
 80042bc:	4b6d      	ldr	r3, [pc, #436]	; (8004474 <TIM2_IRQHandler+0x6ac>)
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverDischarge
		if(flag_trip_SOCOverDischarge==ON && Pack_SOC>0){
 80042c2:	4b6e      	ldr	r3, [pc, #440]	; (800447c <TIM2_IRQHandler+0x6b4>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d10c      	bne.n	80042e4 <TIM2_IRQHandler+0x51c>
 80042ca:	4b6d      	ldr	r3, [pc, #436]	; (8004480 <TIM2_IRQHandler+0x6b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f04f 0100 	mov.w	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fc ff7e 	bl	80011d4 <__aeabi_fcmpgt>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <TIM2_IRQHandler+0x51c>
			flag_trip_SOCOverDischarge=OFF;
 80042de:	4b67      	ldr	r3, [pc, #412]	; (800447c <TIM2_IRQHandler+0x6b4>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing OverCharge
		if(flag_trip_SOCOverCharge==ON && Pack_SOC<100){
 80042e4:	4b67      	ldr	r3, [pc, #412]	; (8004484 <TIM2_IRQHandler+0x6bc>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10b      	bne.n	8004304 <TIM2_IRQHandler+0x53c>
 80042ec:	4b64      	ldr	r3, [pc, #400]	; (8004480 <TIM2_IRQHandler+0x6b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4965      	ldr	r1, [pc, #404]	; (8004488 <TIM2_IRQHandler+0x6c0>)
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc ff50 	bl	8001198 <__aeabi_fcmplt>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <TIM2_IRQHandler+0x53c>
			flag_trip_SOCOverCharge=OFF;
 80042fe:	4b61      	ldr	r3, [pc, #388]	; (8004484 <TIM2_IRQHandler+0x6bc>)
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing Cell Over Voltage
		if(flag_trip_cellovervoltage==ON && Cell_OverVoltage == NO){
 8004304:	4b61      	ldr	r3, [pc, #388]	; (800448c <TIM2_IRQHandler+0x6c4>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d106      	bne.n	800431a <TIM2_IRQHandler+0x552>
 800430c:	4b60      	ldr	r3, [pc, #384]	; (8004490 <TIM2_IRQHandler+0x6c8>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <TIM2_IRQHandler+0x552>
			flag_trip_cellovervoltage = OFF;
 8004314:	4b5d      	ldr	r3, [pc, #372]	; (800448c <TIM2_IRQHandler+0x6c4>)
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
		}
		// ---> Clearing Cell Under Voltage
		if(flag_trip_cellundervoltage==ON && Cell_UnderVoltage == NO){
 800431a:	4b5e      	ldr	r3, [pc, #376]	; (8004494 <TIM2_IRQHandler+0x6cc>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d106      	bne.n	8004330 <TIM2_IRQHandler+0x568>
 8004322:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <TIM2_IRQHandler+0x6d0>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d102      	bne.n	8004330 <TIM2_IRQHandler+0x568>
			flag_trip_cellundervoltage = OFF;
 800432a:	4b5a      	ldr	r3, [pc, #360]	; (8004494 <TIM2_IRQHandler+0x6cc>)
 800432c:	2200      	movs	r2, #0
 800432e:	701a      	strb	r2, [r3, #0]
		}

	}
	i++;
 8004330:	4b5a      	ldr	r3, [pc, #360]	; (800449c <TIM2_IRQHandler+0x6d4>)
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	3301      	adds	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	4b58      	ldr	r3, [pc, #352]	; (800449c <TIM2_IRQHandler+0x6d4>)
 800433a:	801a      	strh	r2, [r3, #0]
	i=i%maxdata;
 800433c:	4b57      	ldr	r3, [pc, #348]	; (800449c <TIM2_IRQHandler+0x6d4>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	4a57      	ldr	r2, [pc, #348]	; (80044a0 <TIM2_IRQHandler+0x6d8>)
 8004342:	fba2 1203 	umull	r1, r2, r2, r3
 8004346:	0992      	lsrs	r2, r2, #6
 8004348:	21c8      	movs	r1, #200	; 0xc8
 800434a:	fb01 f202 	mul.w	r2, r1, r2
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	b29a      	uxth	r2, r3
 8004352:	4b52      	ldr	r3, [pc, #328]	; (800449c <TIM2_IRQHandler+0x6d4>)
 8004354:	801a      	strh	r2, [r3, #0]

	//////////// Bagian Hitung SOC /////// SOC akan dihitung berdasarkan state baterai (Jika charge maupun discharge)
	if(BATT_State==STATE_CHARGE||BATT_State==STATE_DISCHARGE||BATT_State==STATE_FULL_CHARGE_DISCHARGE)
 8004356:	4b3a      	ldr	r3, [pc, #232]	; (8004440 <TIM2_IRQHandler+0x678>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d008      	beq.n	8004370 <TIM2_IRQHandler+0x5a8>
 800435e:	4b38      	ldr	r3, [pc, #224]	; (8004440 <TIM2_IRQHandler+0x678>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d004      	beq.n	8004370 <TIM2_IRQHandler+0x5a8>
 8004366:	4b36      	ldr	r3, [pc, #216]	; (8004440 <TIM2_IRQHandler+0x678>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b03      	cmp	r3, #3
 800436c:	f040 80de 	bne.w	800452c <TIM2_IRQHandler+0x764>
	{

		time_soc++;
 8004370:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <TIM2_IRQHandler+0x6dc>)
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	3301      	adds	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	4b4a      	ldr	r3, [pc, #296]	; (80044a4 <TIM2_IRQHandler+0x6dc>)
 800437a:	801a      	strh	r2, [r3, #0]
		sum_current+=IBATT;
 800437c:	4b4a      	ldr	r3, [pc, #296]	; (80044a8 <TIM2_IRQHandler+0x6e0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a4a      	ldr	r2, [pc, #296]	; (80044ac <TIM2_IRQHandler+0x6e4>)
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	4611      	mov	r1, r2
 8004386:	4618      	mov	r0, r3
 8004388:	f7fc fc60 	bl	8000c4c <__addsf3>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <TIM2_IRQHandler+0x6e0>)
 8004392:	601a      	str	r2, [r3, #0]
		if(time_soc>99)
 8004394:	4b43      	ldr	r3, [pc, #268]	; (80044a4 <TIM2_IRQHandler+0x6dc>)
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	2b63      	cmp	r3, #99	; 0x63
 800439a:	f240 80c7 	bls.w	800452c <TIM2_IRQHandler+0x764>
		{
			AH_Consumption += (-1*sum_current)/100*(1.0/3600.0);
 800439e:	4b44      	ldr	r3, [pc, #272]	; (80044b0 <TIM2_IRQHandler+0x6e8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc f8ac 	bl	8000500 <__aeabi_f2d>
 80043a8:	4604      	mov	r4, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	4b3e      	ldr	r3, [pc, #248]	; (80044a8 <TIM2_IRQHandler+0x6e0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80043b4:	4934      	ldr	r1, [pc, #208]	; (8004488 <TIM2_IRQHandler+0x6c0>)
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc fe04 	bl	8000fc4 <__aeabi_fdiv>
 80043bc:	4603      	mov	r3, r0
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc f89e 	bl	8000500 <__aeabi_f2d>
 80043c4:	a31c      	add	r3, pc, #112	; (adr r3, 8004438 <TIM2_IRQHandler+0x670>)
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f7fc f8f1 	bl	80005b0 <__aeabi_dmul>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fb ff35 	bl	8000244 <__adddf3>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	f7fc fbdd 	bl	8000ba0 <__aeabi_d2f>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a31      	ldr	r2, [pc, #196]	; (80044b0 <TIM2_IRQHandler+0x6e8>)
 80043ea:	6013      	str	r3, [r2, #0]
			SOC_Flow = (AH_Consumption/Pack_Cap)*100;
 80043ec:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <TIM2_IRQHandler+0x6e8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <TIM2_IRQHandler+0x6ec>)
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fde5 	bl	8000fc4 <__aeabi_fdiv>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4922      	ldr	r1, [pc, #136]	; (8004488 <TIM2_IRQHandler+0x6c0>)
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc fd2c 	bl	8000e5c <__aeabi_fmul>
 8004404:	4603      	mov	r3, r0
 8004406:	461a      	mov	r2, r3
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <TIM2_IRQHandler+0x6f0>)
 800440a:	601a      	str	r2, [r3, #0]
			Pack_SOC = Pack_SOC+SOC_Flow;
 800440c:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <TIM2_IRQHandler+0x6b8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a29      	ldr	r2, [pc, #164]	; (80044b8 <TIM2_IRQHandler+0x6f0>)
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc fc18 	bl	8000c4c <__addsf3>
 800441c:	4603      	mov	r3, r0
 800441e:	461a      	mov	r2, r3
 8004420:	4b17      	ldr	r3, [pc, #92]	; (8004480 <TIM2_IRQHandler+0x6b8>)
 8004422:	601a      	str	r2, [r3, #0]
			time_soc = 0;
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <TIM2_IRQHandler+0x6dc>)
 8004426:	2200      	movs	r2, #0
 8004428:	801a      	strh	r2, [r3, #0]
			sum_current = 0;
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <TIM2_IRQHandler+0x6e0>)
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e043      	b.n	80044bc <TIM2_IRQHandler+0x6f4>
 8004434:	f3af 8000 	nop.w
 8004438:	789abcdf 	.word	0x789abcdf
 800443c:	3f323456 	.word	0x3f323456
 8004440:	200009d8 	.word	0x200009d8
 8004444:	20000315 	.word	0x20000315
 8004448:	2000027c 	.word	0x2000027c
 800444c:	41f00000 	.word	0x41f00000
 8004450:	2000030c 	.word	0x2000030c
 8004454:	2000030e 	.word	0x2000030e
 8004458:	20000316 	.word	0x20000316
 800445c:	20000308 	.word	0x20000308
 8004460:	200002a8 	.word	0x200002a8
 8004464:	42340000 	.word	0x42340000
 8004468:	200002ac 	.word	0x200002ac
 800446c:	200002b0 	.word	0x200002b0
 8004470:	200002b4 	.word	0x200002b4
 8004474:	20000309 	.word	0x20000309
 8004478:	41a00000 	.word	0x41a00000
 800447c:	2000030a 	.word	0x2000030a
 8004480:	2000031c 	.word	0x2000031c
 8004484:	2000030b 	.word	0x2000030b
 8004488:	42c80000 	.word	0x42c80000
 800448c:	20000314 	.word	0x20000314
 8004490:	20000317 	.word	0x20000317
 8004494:	20000313 	.word	0x20000313
 8004498:	20000318 	.word	0x20000318
 800449c:	20000a84 	.word	0x20000a84
 80044a0:	51eb851f 	.word	0x51eb851f
 80044a4:	20000a82 	.word	0x20000a82
 80044a8:	20000a98 	.word	0x20000a98
 80044ac:	20000280 	.word	0x20000280
 80044b0:	20000a78 	.word	0x20000a78
 80044b4:	42580000 	.word	0x42580000
 80044b8:	20000a90 	.word	0x20000a90

			grad=(100-0)/(batas_atas-batas_bawah);
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <TIM2_IRQHandler+0x768>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <TIM2_IRQHandler+0x76c>)
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fc fbbe 	bl	8000c48 <__aeabi_fsub>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4619      	mov	r1, r3
 80044d0:	4819      	ldr	r0, [pc, #100]	; (8004538 <TIM2_IRQHandler+0x770>)
 80044d2:	f7fc fd77 	bl	8000fc4 <__aeabi_fdiv>
 80044d6:	4603      	mov	r3, r0
 80044d8:	461a      	mov	r2, r3
 80044da:	4b18      	ldr	r3, [pc, #96]	; (800453c <TIM2_IRQHandler+0x774>)
 80044dc:	601a      	str	r2, [r3, #0]
			constanta=grad*batas_bawah*(-1);
 80044de:	4b17      	ldr	r3, [pc, #92]	; (800453c <TIM2_IRQHandler+0x774>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a14      	ldr	r2, [pc, #80]	; (8004534 <TIM2_IRQHandler+0x76c>)
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	4611      	mov	r1, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fc fcb7 	bl	8000e5c <__aeabi_fmul>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80044f4:	4a12      	ldr	r2, [pc, #72]	; (8004540 <TIM2_IRQHandler+0x778>)
 80044f6:	6013      	str	r3, [r2, #0]
			SOC_manipulasi=grad*Pack_SOC+constanta;
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <TIM2_IRQHandler+0x774>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a11      	ldr	r2, [pc, #68]	; (8004544 <TIM2_IRQHandler+0x77c>)
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc fcaa 	bl	8000e5c <__aeabi_fmul>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	4b0c      	ldr	r3, [pc, #48]	; (8004540 <TIM2_IRQHandler+0x778>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f7fc fb9a 	bl	8000c4c <__addsf3>
 8004518:	4603      	mov	r3, r0
 800451a:	461a      	mov	r2, r3
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <TIM2_IRQHandler+0x780>)
 800451e:	601a      	str	r2, [r3, #0]

			test_timer++;
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <TIM2_IRQHandler+0x784>)
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	4b08      	ldr	r3, [pc, #32]	; (800454c <TIM2_IRQHandler+0x784>)
 800452a:	801a      	strh	r2, [r3, #0]
		}
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 800452c:	bf00      	nop
 800452e:	bdb0      	pop	{r4, r5, r7, pc}
 8004530:	200002e4 	.word	0x200002e4
 8004534:	200002e8 	.word	0x200002e8
 8004538:	42c80000 	.word	0x42c80000
 800453c:	200002f0 	.word	0x200002f0
 8004540:	200002f4 	.word	0x200002f4
 8004544:	2000031c 	.word	0x2000031c
 8004548:	200002ec 	.word	0x200002ec
 800454c:	20000a80 	.word	0x20000a80

08004550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004554:	481a      	ldr	r0, [pc, #104]	; (80045c0 <TIM3_IRQHandler+0x70>)
 8004556:	f007 fa0b 	bl	800b970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if(flag_start_shutdown==1){
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <TIM3_IRQHandler+0x74>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d12b      	bne.n	80045ba <TIM3_IRQHandler+0x6a>
		if(Tick_33ms == 1) CANTX_BattParameter();
 8004562:	4b19      	ldr	r3, [pc, #100]	; (80045c8 <TIM3_IRQHandler+0x78>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d102      	bne.n	8004570 <TIM3_IRQHandler+0x20>
 800456a:	f7fd fd2d 	bl	8001fc8 <CANTX_BattParameter>
 800456e:	e00f      	b.n	8004590 <TIM3_IRQHandler+0x40>
		else if(Tick_33ms == 2) CANTX_BattProtection();
 8004570:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <TIM3_IRQHandler+0x78>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d102      	bne.n	800457e <TIM3_IRQHandler+0x2e>
 8004578:	f7fd fe70 	bl	800225c <CANTX_BattProtection>
 800457c:	e008      	b.n	8004590 <TIM3_IRQHandler+0x40>
		else if(Tick_33ms == 3) {
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <TIM3_IRQHandler+0x78>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d104      	bne.n	8004590 <TIM3_IRQHandler+0x40>
			CANTX_ReportToCharger();
 8004586:	f7fd ffaf 	bl	80024e8 <CANTX_ReportToCharger>
			Tick_33ms = 0;
 800458a:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <TIM3_IRQHandler+0x78>)
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
		}
		if(Tick_BattId > 30) {
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <TIM3_IRQHandler+0x7c>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b1e      	cmp	r3, #30
 8004596:	d904      	bls.n	80045a2 <TIM3_IRQHandler+0x52>
			CANTX_BattId();
 8004598:	f7fe f81e 	bl	80025d8 <CANTX_BattId>
			Tick_BattId = 0;
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <TIM3_IRQHandler+0x7c>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
		}
		Tick_33ms++;
 80045a2:	4b09      	ldr	r3, [pc, #36]	; (80045c8 <TIM3_IRQHandler+0x78>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <TIM3_IRQHandler+0x78>)
 80045ac:	701a      	strb	r2, [r3, #0]
		Tick_BattId++;
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <TIM3_IRQHandler+0x7c>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	3301      	adds	r3, #1
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <TIM3_IRQHandler+0x7c>)
 80045b8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000a9c 	.word	0x20000a9c
 80045c4:	200002c0 	.word	0x200002c0
 80045c8:	20000a8d 	.word	0x20000a8d
 80045cc:	20000a8c 	.word	0x20000a8c

080045d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80045d4:	4802      	ldr	r0, [pc, #8]	; (80045e0 <SPI1_IRQHandler+0x10>)
 80045d6:	f006 ff63 	bl	800b4a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000a20 	.word	0x20000a20
 80045e4:	00000000 	.word	0x00000000

080045e8 <Batt_Protection_when_discharge>:

/* USER CODE BEGIN 1 */
void Batt_Protection_when_discharge(void) {
 80045e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80045ec:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT/0.5)) {
 80045ee:	4baa      	ldr	r3, [pc, #680]	; (8004898 <Batt_Protection_when_discharge+0x2b0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fb ff84 	bl	8000500 <__aeabi_f2d>
 80045f8:	4604      	mov	r4, r0
 80045fa:	460d      	mov	r5, r1
 80045fc:	4ba7      	ldr	r3, [pc, #668]	; (800489c <Batt_Protection_when_discharge+0x2b4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ff7d 	bl	8000500 <__aeabi_f2d>
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	4ba5      	ldr	r3, [pc, #660]	; (80048a0 <Batt_Protection_when_discharge+0x2b8>)
 800460c:	f7fc f8fa 	bl	8000804 <__aeabi_ddiv>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4620      	mov	r0, r4
 8004616:	4629      	mov	r1, r5
 8004618:	f7fc fa5a 	bl	8000ad0 <__aeabi_dcmpgt>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d017      	beq.n	8004652 <Batt_Protection_when_discharge+0x6a>
		Isc = IBATT;
 8004622:	4b9d      	ldr	r3, [pc, #628]	; (8004898 <Batt_Protection_when_discharge+0x2b0>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a9f      	ldr	r2, [pc, #636]	; (80048a4 <Batt_Protection_when_discharge+0x2bc>)
 8004628:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 800462a:	4b9c      	ldr	r3, [pc, #624]	; (800489c <Batt_Protection_when_discharge+0x2b4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a9e      	ldr	r2, [pc, #632]	; (80048a8 <Batt_Protection_when_discharge+0x2c0>)
 8004630:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8004632:	4b9e      	ldr	r3, [pc, #632]	; (80048ac <Batt_Protection_when_discharge+0x2c4>)
 8004634:	220c      	movs	r2, #12
 8004636:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8004638:	f7fd f8bc 	bl	80017b4 <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 800463c:	4b9c      	ldr	r3, [pc, #624]	; (80048b0 <Batt_Protection_when_discharge+0x2c8>)
 800463e:	2201      	movs	r2, #1
 8004640:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004642:	2200      	movs	r2, #0
 8004644:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004648:	489a      	ldr	r0, [pc, #616]	; (80048b4 <Batt_Protection_when_discharge+0x2cc>)
 800464a:	f004 fd15 	bl	8009078 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 800464e:	f000 bded 	b.w	800522c <Batt_Protection_when_discharge+0xc44>
	else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 8004652:	4b92      	ldr	r3, [pc, #584]	; (800489c <Batt_Protection_when_discharge+0x2b4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a98      	ldr	r2, [pc, #608]	; (80048b8 <Batt_Protection_when_discharge+0x2d0>)
 8004658:	6812      	ldr	r2, [r2, #0]
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f7fc fd9b 	bl	8001198 <__aeabi_fcmplt>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d054      	beq.n	8004712 <Batt_Protection_when_discharge+0x12a>
 8004668:	4b94      	ldr	r3, [pc, #592]	; (80048bc <Batt_Protection_when_discharge+0x2d4>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d150      	bne.n	8004712 <Batt_Protection_when_discharge+0x12a>
		fault_code=1;
 8004670:	4b8e      	ldr	r3, [pc, #568]	; (80048ac <Batt_Protection_when_discharge+0x2c4>)
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
		T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <Batt_Protection_when_discharge+0x2d8>)
 8004678:	681c      	ldr	r4, [r3, #0]
 800467a:	4b88      	ldr	r3, [pc, #544]	; (800489c <Batt_Protection_when_discharge+0x2b4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a8e      	ldr	r2, [pc, #568]	; (80048b8 <Batt_Protection_when_discharge+0x2d0>)
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f7fc fc9d 	bl	8000fc4 <__aeabi_fdiv>
 800468a:	4603      	mov	r3, r0
 800468c:	4619      	mov	r1, r3
 800468e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004692:	f7fc fad9 	bl	8000c48 <__aeabi_fsub>
 8004696:	4603      	mov	r3, r0
 8004698:	4619      	mov	r1, r3
 800469a:	4620      	mov	r0, r4
 800469c:	f7fc fc92 	bl	8000fc4 <__aeabi_fdiv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b87      	ldr	r3, [pc, #540]	; (80048c4 <Batt_Protection_when_discharge+0x2dc>)
 80046a6:	601a      	str	r2, [r3, #0]
		T_trip_cycle+=0.001;
 80046a8:	4b87      	ldr	r3, [pc, #540]	; (80048c8 <Batt_Protection_when_discharge+0x2e0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb ff27 	bl	8000500 <__aeabi_f2d>
 80046b2:	a373      	add	r3, pc, #460	; (adr r3, 8004880 <Batt_Protection_when_discharge+0x298>)
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f7fb fdc4 	bl	8000244 <__adddf3>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	f7fc fa6c 	bl	8000ba0 <__aeabi_d2f>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4a7f      	ldr	r2, [pc, #508]	; (80048c8 <Batt_Protection_when_discharge+0x2e0>)
 80046cc:	6013      	str	r3, [r2, #0]
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 80046ce:	4b7e      	ldr	r3, [pc, #504]	; (80048c8 <Batt_Protection_when_discharge+0x2e0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7c      	ldr	r2, [pc, #496]	; (80048c4 <Batt_Protection_when_discharge+0x2dc>)
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fc fd7b 	bl	80011d4 <__aeabi_fcmpgt>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 85a0 	beq.w	8005226 <Batt_Protection_when_discharge+0xc3e>
 80046e6:	4b75      	ldr	r3, [pc, #468]	; (80048bc <Batt_Protection_when_discharge+0x2d4>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 859b 	bne.w	8005226 <Batt_Protection_when_discharge+0xc3e>
			Batt_Open_Mode();
 80046f0:	f7fd f860 	bl	80017b4 <Batt_Open_Mode>
			T_trip_cycle=T_Under_trip;
 80046f4:	4b73      	ldr	r3, [pc, #460]	; (80048c4 <Batt_Protection_when_discharge+0x2dc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a73      	ldr	r2, [pc, #460]	; (80048c8 <Batt_Protection_when_discharge+0x2e0>)
 80046fa:	6013      	str	r3, [r2, #0]
			flag_trip_undervoltage=ON;
 80046fc:	4b6f      	ldr	r3, [pc, #444]	; (80048bc <Batt_Protection_when_discharge+0x2d4>)
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8004702:	2200      	movs	r2, #0
 8004704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004708:	4870      	ldr	r0, [pc, #448]	; (80048cc <Batt_Protection_when_discharge+0x2e4>)
 800470a:	f004 fcb5 	bl	8009078 <HAL_GPIO_WritePin>
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 800470e:	f000 bd8a 	b.w	8005226 <Batt_Protection_when_discharge+0xc3e>
	else if((IBATT-I_Over_Set)>0 && flag_trip_overcurrentdischarge==OFF) {   //Indikasi terjadi Over Current
 8004712:	4b61      	ldr	r3, [pc, #388]	; (8004898 <Batt_Protection_when_discharge+0x2b0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6e      	ldr	r2, [pc, #440]	; (80048d0 <Batt_Protection_when_discharge+0x2e8>)
 8004718:	6812      	ldr	r2, [r2, #0]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f7fc fa93 	bl	8000c48 <__aeabi_fsub>
 8004722:	4603      	mov	r3, r0
 8004724:	f04f 0100 	mov.w	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc fd53 	bl	80011d4 <__aeabi_fcmpgt>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 814b 	beq.w	80049cc <Batt_Protection_when_discharge+0x3e4>
 8004736:	4b67      	ldr	r3, [pc, #412]	; (80048d4 <Batt_Protection_when_discharge+0x2ec>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f040 8146 	bne.w	80049cc <Batt_Protection_when_discharge+0x3e4>
		fault_code=2;
 8004740:	4b5a      	ldr	r3, [pc, #360]	; (80048ac <Batt_Protection_when_discharge+0x2c4>)
 8004742:	2202      	movs	r2, #2
 8004744:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=I_Over_Set/(((IBATT/6.9)*(IBATT/6.9))-1);
 8004746:	4b62      	ldr	r3, [pc, #392]	; (80048d0 <Batt_Protection_when_discharge+0x2e8>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7fb fed8 	bl	8000500 <__aeabi_f2d>
 8004750:	4604      	mov	r4, r0
 8004752:	460d      	mov	r5, r1
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <Batt_Protection_when_discharge+0x2b0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fb fed1 	bl	8000500 <__aeabi_f2d>
 800475e:	a34a      	add	r3, pc, #296	; (adr r3, 8004888 <Batt_Protection_when_discharge+0x2a0>)
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f7fc f84e 	bl	8000804 <__aeabi_ddiv>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4690      	mov	r8, r2
 800476e:	4699      	mov	r9, r3
 8004770:	4b49      	ldr	r3, [pc, #292]	; (8004898 <Batt_Protection_when_discharge+0x2b0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fec3 	bl	8000500 <__aeabi_f2d>
 800477a:	a343      	add	r3, pc, #268	; (adr r3, 8004888 <Batt_Protection_when_discharge+0x2a0>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	f7fc f840 	bl	8000804 <__aeabi_ddiv>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4640      	mov	r0, r8
 800478a:	4649      	mov	r1, r9
 800478c:	f7fb ff10 	bl	80005b0 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	4b4e      	ldr	r3, [pc, #312]	; (80048d8 <Batt_Protection_when_discharge+0x2f0>)
 800479e:	f7fb fd4f 	bl	8000240 <__aeabi_dsub>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4620      	mov	r0, r4
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fc f82b 	bl	8000804 <__aeabi_ddiv>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	f7fc f9f3 	bl	8000ba0 <__aeabi_d2f>
 80047ba:	4603      	mov	r3, r0
 80047bc:	4a47      	ldr	r2, [pc, #284]	; (80048dc <Batt_Protection_when_discharge+0x2f4>)
 80047be:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 80047c0:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <Batt_Protection_when_discharge+0x2f8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fb fe9b 	bl	8000500 <__aeabi_f2d>
 80047ca:	a331      	add	r3, pc, #196	; (adr r3, 8004890 <Batt_Protection_when_discharge+0x2a8>)
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f7fb fd38 	bl	8000244 <__adddf3>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	f7fc f9e0 	bl	8000ba0 <__aeabi_d2f>
 80047e0:	4603      	mov	r3, r0
 80047e2:	4a3f      	ldr	r2, [pc, #252]	; (80048e0 <Batt_Protection_when_discharge+0x2f8>)
 80047e4:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentdischarge==OFF) {
 80047e6:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <Batt_Protection_when_discharge+0x2f8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a3c      	ldr	r2, [pc, #240]	; (80048dc <Batt_Protection_when_discharge+0x2f4>)
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fc fcef 	bl	80011d4 <__aeabi_fcmpgt>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d012      	beq.n	8004822 <Batt_Protection_when_discharge+0x23a>
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <Batt_Protection_when_discharge+0x2ec>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10e      	bne.n	8004822 <Batt_Protection_when_discharge+0x23a>
			Batt_Open_Mode();
 8004804:	f7fc ffd6 	bl	80017b4 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8004808:	4b34      	ldr	r3, [pc, #208]	; (80048dc <Batt_Protection_when_discharge+0x2f4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a34      	ldr	r2, [pc, #208]	; (80048e0 <Batt_Protection_when_discharge+0x2f8>)
 800480e:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentdischarge=ON;
 8004810:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <Batt_Protection_when_discharge+0x2ec>)
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004816:	2200      	movs	r2, #0
 8004818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800481c:	4825      	ldr	r0, [pc, #148]	; (80048b4 <Batt_Protection_when_discharge+0x2cc>)
 800481e:	f004 fc2b 	bl	8009078 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 8004822:	4b2c      	ldr	r3, [pc, #176]	; (80048d4 <Batt_Protection_when_discharge+0x2ec>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 84ff 	bne.w	800522a <Batt_Protection_when_discharge+0xc42>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 800482c:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <Batt_Protection_when_discharge+0x2f4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2b      	ldr	r2, [pc, #172]	; (80048e0 <Batt_Protection_when_discharge+0x2f8>)
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f7fc fa06 	bl	8000c48 <__aeabi_fsub>
 800483c:	4603      	mov	r3, r0
 800483e:	4929      	ldr	r1, [pc, #164]	; (80048e4 <Batt_Protection_when_discharge+0x2fc>)
 8004840:	4618      	mov	r0, r3
 8004842:	f7fc fcc7 	bl	80011d4 <__aeabi_fcmpgt>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d051      	beq.n	80048f0 <Batt_Protection_when_discharge+0x308>
				if((test_tim2%1000)==0) {
 800484c:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <Batt_Protection_when_discharge+0x300>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b26      	ldr	r3, [pc, #152]	; (80048ec <Batt_Protection_when_discharge+0x304>)
 8004852:	fb83 1302 	smull	r1, r3, r3, r2
 8004856:	1199      	asrs	r1, r3, #6
 8004858:	17d3      	asrs	r3, r2, #31
 800485a:	1acb      	subs	r3, r1, r3
 800485c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004860:	fb01 f303 	mul.w	r3, r1, r3
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 84df 	bne.w	800522a <Batt_Protection_when_discharge+0xc42>
					BUZZ_Toggle;
 800486c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004870:	4810      	ldr	r0, [pc, #64]	; (80048b4 <Batt_Protection_when_discharge+0x2cc>)
 8004872:	f004 fc19 	bl	80090a8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004876:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <Batt_Protection_when_discharge+0x300>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 800487c:	f000 bcd5 	b.w	800522a <Batt_Protection_when_discharge+0xc42>
 8004880:	d2f1a9fc 	.word	0xd2f1a9fc
 8004884:	3f50624d 	.word	0x3f50624d
 8004888:	9999999a 	.word	0x9999999a
 800488c:	401b9999 	.word	0x401b9999
 8004890:	47ae147b 	.word	0x47ae147b
 8004894:	3f847ae1 	.word	0x3f847ae1
 8004898:	20000280 	.word	0x20000280
 800489c:	2000027c 	.word	0x2000027c
 80048a0:	3fe00000 	.word	0x3fe00000
 80048a4:	20000284 	.word	0x20000284
 80048a8:	20000288 	.word	0x20000288
 80048ac:	200002f8 	.word	0x200002f8
 80048b0:	20000310 	.word	0x20000310
 80048b4:	40011000 	.word	0x40011000
 80048b8:	20000060 	.word	0x20000060
 80048bc:	2000030c 	.word	0x2000030c
 80048c0:	2000006c 	.word	0x2000006c
 80048c4:	20000a7c 	.word	0x20000a7c
 80048c8:	20000a88 	.word	0x20000a88
 80048cc:	40010800 	.word	0x40010800
 80048d0:	20000048 	.word	0x20000048
 80048d4:	2000030e 	.word	0x2000030e
 80048d8:	3ff00000 	.word	0x3ff00000
 80048dc:	200002fc 	.word	0x200002fc
 80048e0:	20000300 	.word	0x20000300
 80048e4:	41700000 	.word	0x41700000
 80048e8:	20000304 	.word	0x20000304
 80048ec:	10624dd3 	.word	0x10624dd3
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10){
 80048f0:	4ba8      	ldr	r3, [pc, #672]	; (8004b94 <Batt_Protection_when_discharge+0x5ac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4aa8      	ldr	r2, [pc, #672]	; (8004b98 <Batt_Protection_when_discharge+0x5b0>)
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fc f9a4 	bl	8000c48 <__aeabi_fsub>
 8004900:	4603      	mov	r3, r0
 8004902:	49a6      	ldr	r1, [pc, #664]	; (8004b9c <Batt_Protection_when_discharge+0x5b4>)
 8004904:	4618      	mov	r0, r3
 8004906:	f7fc fc65 	bl	80011d4 <__aeabi_fcmpgt>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <Batt_Protection_when_discharge+0x35a>
				if((test_tim2%100)==0){
 8004910:	4ba3      	ldr	r3, [pc, #652]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4ba3      	ldr	r3, [pc, #652]	; (8004ba4 <Batt_Protection_when_discharge+0x5bc>)
 8004916:	fb83 1302 	smull	r1, r3, r3, r2
 800491a:	1159      	asrs	r1, r3, #5
 800491c:	17d3      	asrs	r3, r2, #31
 800491e:	1acb      	subs	r3, r1, r3
 8004920:	2164      	movs	r1, #100	; 0x64
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	f040 847e 	bne.w	800522a <Batt_Protection_when_discharge+0xc42>
					BUZZ_Toggle;
 800492e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004932:	489d      	ldr	r0, [pc, #628]	; (8004ba8 <Batt_Protection_when_discharge+0x5c0>)
 8004934:	f004 fbb8 	bl	80090a8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8004938:	4b99      	ldr	r3, [pc, #612]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 800493e:	f000 bc74 	b.w	800522a <Batt_Protection_when_discharge+0xc42>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3){
 8004942:	4b94      	ldr	r3, [pc, #592]	; (8004b94 <Batt_Protection_when_discharge+0x5ac>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a94      	ldr	r2, [pc, #592]	; (8004b98 <Batt_Protection_when_discharge+0x5b0>)
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f7fc f97b 	bl	8000c48 <__aeabi_fsub>
 8004952:	4603      	mov	r3, r0
 8004954:	4995      	ldr	r1, [pc, #596]	; (8004bac <Batt_Protection_when_discharge+0x5c4>)
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc fc3c 	bl	80011d4 <__aeabi_fcmpgt>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d019      	beq.n	8004996 <Batt_Protection_when_discharge+0x3ae>
				if((test_tim2%10)==0){
 8004962:	4b8f      	ldr	r3, [pc, #572]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	4b92      	ldr	r3, [pc, #584]	; (8004bb0 <Batt_Protection_when_discharge+0x5c8>)
 8004968:	fb83 2301 	smull	r2, r3, r3, r1
 800496c:	109a      	asrs	r2, r3, #2
 800496e:	17cb      	asrs	r3, r1, #31
 8004970:	1ad2      	subs	r2, r2, r3
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	1aca      	subs	r2, r1, r3
 800497c:	2a00      	cmp	r2, #0
 800497e:	f040 8454 	bne.w	800522a <Batt_Protection_when_discharge+0xc42>
					BUZZ_Toggle;
 8004982:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004986:	4888      	ldr	r0, [pc, #544]	; (8004ba8 <Batt_Protection_when_discharge+0x5c0>)
 8004988:	f004 fb8e 	bl	80090a8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 800498c:	4b84      	ldr	r3, [pc, #528]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentdischarge==OFF) {
 8004992:	f000 bc4a 	b.w	800522a <Batt_Protection_when_discharge+0xc42>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1){
 8004996:	4b7f      	ldr	r3, [pc, #508]	; (8004b94 <Batt_Protection_when_discharge+0x5ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7f      	ldr	r2, [pc, #508]	; (8004b98 <Batt_Protection_when_discharge+0x5b0>)
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc f951 	bl	8000c48 <__aeabi_fsub>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fc fc11 	bl	80011d4 <__aeabi_fcmpgt>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <Batt_Protection_when_discharge+0x3d4>
		if(flag_trip_overcurrentdischarge==OFF) {
 80049b8:	f000 bc37 	b.w	800522a <Batt_Protection_when_discharge+0xc42>
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80049bc:	2201      	movs	r2, #1
 80049be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049c2:	4879      	ldr	r0, [pc, #484]	; (8004ba8 <Batt_Protection_when_discharge+0x5c0>)
 80049c4:	f004 fb58 	bl	8009078 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentdischarge==OFF) {
 80049c8:	f000 bc2f 	b.w	800522a <Batt_Protection_when_discharge+0xc42>
	else if(((Suhu_T1>Disc_OverTemp)||(Suhu_T2>Disc_OverTemp)||(Suhu_T3>Disc_OverTemp)||(Suhu_T4>Disc_OverTemp)) && flag_trip_overtemperature==OFF) {
 80049cc:	4b79      	ldr	r3, [pc, #484]	; (8004bb4 <Batt_Protection_when_discharge+0x5cc>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a79      	ldr	r2, [pc, #484]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc fbfc 	bl	80011d4 <__aeabi_fcmpgt>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d121      	bne.n	8004a26 <Batt_Protection_when_discharge+0x43e>
 80049e2:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <Batt_Protection_when_discharge+0x5d4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a74      	ldr	r2, [pc, #464]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	4611      	mov	r1, r2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fc fbf1 	bl	80011d4 <__aeabi_fcmpgt>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d116      	bne.n	8004a26 <Batt_Protection_when_discharge+0x43e>
 80049f8:	4b71      	ldr	r3, [pc, #452]	; (8004bc0 <Batt_Protection_when_discharge+0x5d8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a6e      	ldr	r2, [pc, #440]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	4611      	mov	r1, r2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fc fbe6 	bl	80011d4 <__aeabi_fcmpgt>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10b      	bne.n	8004a26 <Batt_Protection_when_discharge+0x43e>
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	; (8004bc4 <Batt_Protection_when_discharge+0x5dc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a69      	ldr	r2, [pc, #420]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fc fbdb 	bl	80011d4 <__aeabi_fcmpgt>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8129 	beq.w	8004c78 <Batt_Protection_when_discharge+0x690>
 8004a26:	4b68      	ldr	r3, [pc, #416]	; (8004bc8 <Batt_Protection_when_discharge+0x5e0>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 8124 	bne.w	8004c78 <Batt_Protection_when_discharge+0x690>
		fault_code=3;
 8004a30:	4b66      	ldr	r3, [pc, #408]	; (8004bcc <Batt_Protection_when_discharge+0x5e4>)
 8004a32:	2203      	movs	r2, #3
 8004a34:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Disc_OverTemp && Suhu_T1<=Disc_OverTemp+1) {
 8004a36:	4b5f      	ldr	r3, [pc, #380]	; (8004bb4 <Batt_Protection_when_discharge+0x5cc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a5f      	ldr	r2, [pc, #380]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc fbc7 	bl	80011d4 <__aeabi_fcmpgt>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d02a      	beq.n	8004aa2 <Batt_Protection_when_discharge+0x4ba>
 8004a4c:	4b5a      	ldr	r3, [pc, #360]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fc f8f9 	bl	8000c4c <__addsf3>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4b55      	ldr	r3, [pc, #340]	; (8004bb4 <Batt_Protection_when_discharge+0x5cc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fc fbab 	bl	80011c0 <__aeabi_fcmpge>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d018      	beq.n	8004aa2 <Batt_Protection_when_discharge+0x4ba>
			if((test_tim2%1000)==0) {
 8004a70:	4b4b      	ldr	r3, [pc, #300]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <Batt_Protection_when_discharge+0x5e8>)
 8004a76:	fb83 1302 	smull	r1, r3, r3, r2
 8004a7a:	1199      	asrs	r1, r3, #6
 8004a7c:	17d3      	asrs	r3, r2, #31
 8004a7e:	1acb      	subs	r3, r1, r3
 8004a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 80f3 	bne.w	8004c76 <Batt_Protection_when_discharge+0x68e>
				BUZZ_Toggle;
 8004a90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a94:	4844      	ldr	r0, [pc, #272]	; (8004ba8 <Batt_Protection_when_discharge+0x5c0>)
 8004a96:	f004 fb07 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004a9a:	4b41      	ldr	r3, [pc, #260]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8004aa0:	e0e9      	b.n	8004c76 <Batt_Protection_when_discharge+0x68e>
		else if(Suhu_T1>Disc_OverTemp+1 && Suhu_T1<=Disc_OverTemp+2){
 8004aa2:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fc f8ce 	bl	8000c4c <__addsf3>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	4b3f      	ldr	r3, [pc, #252]	; (8004bb4 <Batt_Protection_when_discharge+0x5cc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fc fb6c 	bl	8001198 <__aeabi_fcmplt>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d02a      	beq.n	8004b1c <Batt_Protection_when_discharge+0x534>
 8004ac6:	4b3c      	ldr	r3, [pc, #240]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fc f8bc 	bl	8000c4c <__addsf3>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <Batt_Protection_when_discharge+0x5cc>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f7fc fb6e 	bl	80011c0 <__aeabi_fcmpge>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <Batt_Protection_when_discharge+0x534>
			if((test_tim2%500)==0){
 8004aea:	4b2d      	ldr	r3, [pc, #180]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	4b38      	ldr	r3, [pc, #224]	; (8004bd0 <Batt_Protection_when_discharge+0x5e8>)
 8004af0:	fb83 1302 	smull	r1, r3, r3, r2
 8004af4:	1159      	asrs	r1, r3, #5
 8004af6:	17d3      	asrs	r3, r2, #31
 8004af8:	1acb      	subs	r3, r1, r3
 8004afa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 80b6 	bne.w	8004c76 <Batt_Protection_when_discharge+0x68e>
				BUZZ_Toggle;
 8004b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b0e:	4826      	ldr	r0, [pc, #152]	; (8004ba8 <Batt_Protection_when_discharge+0x5c0>)
 8004b10:	f004 faca 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004b14:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004b1a:	e0ac      	b.n	8004c76 <Batt_Protection_when_discharge+0x68e>
		else if(Suhu_T1>Disc_OverTemp+2 && Suhu_T1<=Disc_OverTemp+3){
 8004b1c:	4b26      	ldr	r3, [pc, #152]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc f891 	bl	8000c4c <__addsf3>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <Batt_Protection_when_discharge+0x5cc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4619      	mov	r1, r3
 8004b34:	4610      	mov	r0, r2
 8004b36:	f7fc fb2f 	bl	8001198 <__aeabi_fcmplt>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d049      	beq.n	8004bd4 <Batt_Protection_when_discharge+0x5ec>
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <Batt_Protection_when_discharge+0x5d0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4919      	ldr	r1, [pc, #100]	; (8004bac <Batt_Protection_when_discharge+0x5c4>)
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fc f880 	bl	8000c4c <__addsf3>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <Batt_Protection_when_discharge+0x5cc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f7fc fb32 	bl	80011c0 <__aeabi_fcmpge>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d038      	beq.n	8004bd4 <Batt_Protection_when_discharge+0x5ec>
			if((test_tim2%500)==0){
 8004b62:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <Batt_Protection_when_discharge+0x5e8>)
 8004b68:	fb83 1302 	smull	r1, r3, r3, r2
 8004b6c:	1159      	asrs	r1, r3, #5
 8004b6e:	17d3      	asrs	r3, r2, #31
 8004b70:	1acb      	subs	r3, r1, r3
 8004b72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d17a      	bne.n	8004c76 <Batt_Protection_when_discharge+0x68e>
				BUZZ_Toggle;
 8004b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b84:	4808      	ldr	r0, [pc, #32]	; (8004ba8 <Batt_Protection_when_discharge+0x5c0>)
 8004b86:	f004 fa8f 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <Batt_Protection_when_discharge+0x5b8>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004b90:	e071      	b.n	8004c76 <Batt_Protection_when_discharge+0x68e>
 8004b92:	bf00      	nop
 8004b94:	200002fc 	.word	0x200002fc
 8004b98:	20000300 	.word	0x20000300
 8004b9c:	41200000 	.word	0x41200000
 8004ba0:	20000304 	.word	0x20000304
 8004ba4:	51eb851f 	.word	0x51eb851f
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	40400000 	.word	0x40400000
 8004bb0:	66666667 	.word	0x66666667
 8004bb4:	200002a8 	.word	0x200002a8
 8004bb8:	20000050 	.word	0x20000050
 8004bbc:	200002ac 	.word	0x200002ac
 8004bc0:	200002b0 	.word	0x200002b0
 8004bc4:	200002b4 	.word	0x200002b4
 8004bc8:	20000308 	.word	0x20000308
 8004bcc:	200002f8 	.word	0x200002f8
 8004bd0:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1>Disc_OverTemp+3||Suhu_T2>Disc_OverTemp+3||Suhu_T3>Disc_OverTemp+3||Suhu_T4>Disc_OverTemp+3){
 8004bd4:	4ba3      	ldr	r3, [pc, #652]	; (8004e64 <Batt_Protection_when_discharge+0x87c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	49a3      	ldr	r1, [pc, #652]	; (8004e68 <Batt_Protection_when_discharge+0x880>)
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fc f836 	bl	8000c4c <__addsf3>
 8004be0:	4603      	mov	r3, r0
 8004be2:	461a      	mov	r2, r3
 8004be4:	4ba1      	ldr	r3, [pc, #644]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f7fc fad4 	bl	8001198 <__aeabi_fcmplt>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d133      	bne.n	8004c5e <Batt_Protection_when_discharge+0x676>
 8004bf6:	4b9b      	ldr	r3, [pc, #620]	; (8004e64 <Batt_Protection_when_discharge+0x87c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	499b      	ldr	r1, [pc, #620]	; (8004e68 <Batt_Protection_when_discharge+0x880>)
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fc f825 	bl	8000c4c <__addsf3>
 8004c02:	4603      	mov	r3, r0
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b9a      	ldr	r3, [pc, #616]	; (8004e70 <Batt_Protection_when_discharge+0x888>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f7fc fac3 	bl	8001198 <__aeabi_fcmplt>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d122      	bne.n	8004c5e <Batt_Protection_when_discharge+0x676>
 8004c18:	4b92      	ldr	r3, [pc, #584]	; (8004e64 <Batt_Protection_when_discharge+0x87c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4992      	ldr	r1, [pc, #584]	; (8004e68 <Batt_Protection_when_discharge+0x880>)
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc f814 	bl	8000c4c <__addsf3>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b92      	ldr	r3, [pc, #584]	; (8004e74 <Batt_Protection_when_discharge+0x88c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fc fab2 	bl	8001198 <__aeabi_fcmplt>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d111      	bne.n	8004c5e <Batt_Protection_when_discharge+0x676>
 8004c3a:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <Batt_Protection_when_discharge+0x87c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	498a      	ldr	r1, [pc, #552]	; (8004e68 <Batt_Protection_when_discharge+0x880>)
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fc f803 	bl	8000c4c <__addsf3>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4b8b      	ldr	r3, [pc, #556]	; (8004e78 <Batt_Protection_when_discharge+0x890>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fc faa1 	bl	8001198 <__aeabi_fcmplt>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d100      	bne.n	8004c5e <Batt_Protection_when_discharge+0x676>
		if(Suhu_T1>Disc_OverTemp && Suhu_T1<=Disc_OverTemp+1) {
 8004c5c:	e2e6      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
			Batt_Open_Mode();
 8004c5e:	f7fc fda9 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 8004c62:	4b86      	ldr	r3, [pc, #536]	; (8004e7c <Batt_Protection_when_discharge+0x894>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c6e:	4884      	ldr	r0, [pc, #528]	; (8004e80 <Batt_Protection_when_discharge+0x898>)
 8004c70:	f004 fa02 	bl	8009078 <HAL_GPIO_WritePin>
		if(Suhu_T1>Disc_OverTemp && Suhu_T1<=Disc_OverTemp+1) {
 8004c74:	e2da      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
 8004c76:	e2d9      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8004c78:	4b7c      	ldr	r3, [pc, #496]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a81      	ldr	r2, [pc, #516]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb ffe0 	bl	8000c48 <__aeabi_fsub>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	497f      	ldr	r1, [pc, #508]	; (8004e88 <Batt_Protection_when_discharge+0x8a0>)
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fc fa8d 	bl	80011ac <__aeabi_fcmple>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d130      	bne.n	8004cfa <Batt_Protection_when_discharge+0x712>
 8004c98:	4b75      	ldr	r3, [pc, #468]	; (8004e70 <Batt_Protection_when_discharge+0x888>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a79      	ldr	r2, [pc, #484]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fb ffd0 	bl	8000c48 <__aeabi_fsub>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4977      	ldr	r1, [pc, #476]	; (8004e88 <Batt_Protection_when_discharge+0x8a0>)
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fc fa7d 	bl	80011ac <__aeabi_fcmple>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d120      	bne.n	8004cfa <Batt_Protection_when_discharge+0x712>
 8004cb8:	4b6e      	ldr	r3, [pc, #440]	; (8004e74 <Batt_Protection_when_discharge+0x88c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a71      	ldr	r2, [pc, #452]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb ffc0 	bl	8000c48 <__aeabi_fsub>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	496f      	ldr	r1, [pc, #444]	; (8004e88 <Batt_Protection_when_discharge+0x8a0>)
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fc fa6d 	bl	80011ac <__aeabi_fcmple>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <Batt_Protection_when_discharge+0x712>
 8004cd8:	4b67      	ldr	r3, [pc, #412]	; (8004e78 <Batt_Protection_when_discharge+0x890>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a69      	ldr	r2, [pc, #420]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004cde:	6812      	ldr	r2, [r2, #0]
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb ffb0 	bl	8000c48 <__aeabi_fsub>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4967      	ldr	r1, [pc, #412]	; (8004e88 <Batt_Protection_when_discharge+0x8a0>)
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fc fa5d 	bl	80011ac <__aeabi_fcmple>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 810d 	beq.w	8004f14 <Batt_Protection_when_discharge+0x92c>
 8004cfa:	4b64      	ldr	r3, [pc, #400]	; (8004e8c <Batt_Protection_when_discharge+0x8a4>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f040 8108 	bne.w	8004f14 <Batt_Protection_when_discharge+0x92c>
		fault_code=4;
 8004d04:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <Batt_Protection_when_discharge+0x8a8>)
 8004d06:	2204      	movs	r2, #4
 8004d08:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004d0a:	4b5e      	ldr	r3, [pc, #376]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	495e      	ldr	r1, [pc, #376]	; (8004e88 <Batt_Protection_when_discharge+0x8a0>)
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb ff9b 	bl	8000c4c <__addsf3>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4b54      	ldr	r3, [pc, #336]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fc fa4d 	bl	80011c0 <__aeabi_fcmpge>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d029      	beq.n	8004d80 <Batt_Protection_when_discharge+0x798>
 8004d2c:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4958      	ldr	r1, [pc, #352]	; (8004e94 <Batt_Protection_when_discharge+0x8ac>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fb ff8a 	bl	8000c4c <__addsf3>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	4b4b      	ldr	r3, [pc, #300]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fc fa28 	bl	8001198 <__aeabi_fcmplt>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <Batt_Protection_when_discharge+0x798>
			if((test_tim2%1000)==0){
 8004d4e:	4b52      	ldr	r3, [pc, #328]	; (8004e98 <Batt_Protection_when_discharge+0x8b0>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b52      	ldr	r3, [pc, #328]	; (8004e9c <Batt_Protection_when_discharge+0x8b4>)
 8004d54:	fb83 1302 	smull	r1, r3, r3, r2
 8004d58:	1199      	asrs	r1, r3, #6
 8004d5a:	17d3      	asrs	r3, r2, #31
 8004d5c:	1acb      	subs	r3, r1, r3
 8004d5e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f040 80d2 	bne.w	8004f12 <Batt_Protection_when_discharge+0x92a>
				BUZZ_Toggle;
 8004d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d72:	4843      	ldr	r0, [pc, #268]	; (8004e80 <Batt_Protection_when_discharge+0x898>)
 8004d74:	f004 f998 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004d78:	4b47      	ldr	r3, [pc, #284]	; (8004e98 <Batt_Protection_when_discharge+0x8b0>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8004d7e:	e0c8      	b.n	8004f12 <Batt_Protection_when_discharge+0x92a>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 8004d80:	4b40      	ldr	r3, [pc, #256]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4943      	ldr	r1, [pc, #268]	; (8004e94 <Batt_Protection_when_discharge+0x8ac>)
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fb ff60 	bl	8000c4c <__addsf3>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fc fa12 	bl	80011c0 <__aeabi_fcmpge>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d02a      	beq.n	8004df8 <Batt_Protection_when_discharge+0x810>
 8004da2:	4b38      	ldr	r3, [pc, #224]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb ff4e 	bl	8000c4c <__addsf3>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f7fc f9ec 	bl	8001198 <__aeabi_fcmplt>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d018      	beq.n	8004df8 <Batt_Protection_when_discharge+0x810>
			if((test_tim2%500)==0){
 8004dc6:	4b34      	ldr	r3, [pc, #208]	; (8004e98 <Batt_Protection_when_discharge+0x8b0>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <Batt_Protection_when_discharge+0x8b4>)
 8004dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8004dd0:	1159      	asrs	r1, r3, #5
 8004dd2:	17d3      	asrs	r3, r2, #31
 8004dd4:	1acb      	subs	r3, r1, r3
 8004dd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f040 8096 	bne.w	8004f12 <Batt_Protection_when_discharge+0x92a>
				BUZZ_Toggle;
 8004de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004dea:	4825      	ldr	r0, [pc, #148]	; (8004e80 <Batt_Protection_when_discharge+0x898>)
 8004dec:	f004 f95c 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004df0:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <Batt_Protection_when_discharge+0x8b0>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004df6:	e08c      	b.n	8004f12 <Batt_Protection_when_discharge+0x92a>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 8004df8:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb ff23 	bl	8000c4c <__addsf3>
 8004e06:	4603      	mov	r3, r0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f7fc f9df 	bl	80011d4 <__aeabi_fcmpgt>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d041      	beq.n	8004ea0 <Batt_Protection_when_discharge+0x8b8>
 8004e1c:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <Batt_Protection_when_discharge+0x884>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <Batt_Protection_when_discharge+0x89c>)
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc f9ca 	bl	80011c0 <__aeabi_fcmpge>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d036      	beq.n	8004ea0 <Batt_Protection_when_discharge+0x8b8>
			if((test_tim2%500)==0){
 8004e32:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <Batt_Protection_when_discharge+0x8b0>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <Batt_Protection_when_discharge+0x8b4>)
 8004e38:	fb83 1302 	smull	r1, r3, r3, r2
 8004e3c:	1159      	asrs	r1, r3, #5
 8004e3e:	17d3      	asrs	r3, r2, #31
 8004e40:	1acb      	subs	r3, r1, r3
 8004e42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d160      	bne.n	8004f12 <Batt_Protection_when_discharge+0x92a>
				BUZZ_Toggle;
 8004e50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e54:	480a      	ldr	r0, [pc, #40]	; (8004e80 <Batt_Protection_when_discharge+0x898>)
 8004e56:	f004 f927 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <Batt_Protection_when_discharge+0x8b0>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8004e60:	e057      	b.n	8004f12 <Batt_Protection_when_discharge+0x92a>
 8004e62:	bf00      	nop
 8004e64:	20000050 	.word	0x20000050
 8004e68:	40400000 	.word	0x40400000
 8004e6c:	200002a8 	.word	0x200002a8
 8004e70:	200002ac 	.word	0x200002ac
 8004e74:	200002b0 	.word	0x200002b0
 8004e78:	200002b4 	.word	0x200002b4
 8004e7c:	20000308 	.word	0x20000308
 8004e80:	40011000 	.word	0x40011000
 8004e84:	20000058 	.word	0x20000058
 8004e88:	41200000 	.word	0x41200000
 8004e8c:	20000309 	.word	0x20000309
 8004e90:	200002f8 	.word	0x200002f8
 8004e94:	40a00000 	.word	0x40a00000
 8004e98:	20000304 	.word	0x20000304
 8004e9c:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 8004ea0:	4ba1      	ldr	r3, [pc, #644]	; (8005128 <Batt_Protection_when_discharge+0xb40>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4aa1      	ldr	r2, [pc, #644]	; (800512c <Batt_Protection_when_discharge+0xb44>)
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fc f974 	bl	8001198 <__aeabi_fcmplt>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d121      	bne.n	8004efa <Batt_Protection_when_discharge+0x912>
 8004eb6:	4b9e      	ldr	r3, [pc, #632]	; (8005130 <Batt_Protection_when_discharge+0xb48>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a9c      	ldr	r2, [pc, #624]	; (800512c <Batt_Protection_when_discharge+0xb44>)
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fc f969 	bl	8001198 <__aeabi_fcmplt>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d116      	bne.n	8004efa <Batt_Protection_when_discharge+0x912>
 8004ecc:	4b99      	ldr	r3, [pc, #612]	; (8005134 <Batt_Protection_when_discharge+0xb4c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a96      	ldr	r2, [pc, #600]	; (800512c <Batt_Protection_when_discharge+0xb44>)
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc f95e 	bl	8001198 <__aeabi_fcmplt>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <Batt_Protection_when_discharge+0x912>
 8004ee2:	4b95      	ldr	r3, [pc, #596]	; (8005138 <Batt_Protection_when_discharge+0xb50>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a91      	ldr	r2, [pc, #580]	; (800512c <Batt_Protection_when_discharge+0xb44>)
 8004ee8:	6812      	ldr	r2, [r2, #0]
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fc f953 	bl	8001198 <__aeabi_fcmplt>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d100      	bne.n	8004efa <Batt_Protection_when_discharge+0x912>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004ef8:	e198      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
			Batt_Open_Mode();
 8004efa:	f7fc fc5b 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8004efe:	4b8f      	ldr	r3, [pc, #572]	; (800513c <Batt_Protection_when_discharge+0xb54>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8004f04:	2200      	movs	r2, #0
 8004f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f0a:	488d      	ldr	r0, [pc, #564]	; (8005140 <Batt_Protection_when_discharge+0xb58>)
 8004f0c:	f004 f8b4 	bl	8009078 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8004f10:	e18c      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
 8004f12:	e18b      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
	else if(Pack_SOC <= SOC_Under_Set+5 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 8004f14:	4b8b      	ldr	r3, [pc, #556]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	498b      	ldr	r1, [pc, #556]	; (8005148 <Batt_Protection_when_discharge+0xb60>)
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fb fe96 	bl	8000c4c <__addsf3>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b89      	ldr	r3, [pc, #548]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fc f948 	bl	80011c0 <__aeabi_fcmpge>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80d1 	beq.w	80050da <Batt_Protection_when_discharge+0xaf2>
 8004f38:	4b85      	ldr	r3, [pc, #532]	; (8005150 <Batt_Protection_when_discharge+0xb68>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f040 80cc 	bne.w	80050da <Batt_Protection_when_discharge+0xaf2>
 8004f42:	4b84      	ldr	r3, [pc, #528]	; (8005154 <Batt_Protection_when_discharge+0xb6c>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	f040 80c7 	bne.w	80050da <Batt_Protection_when_discharge+0xaf2>
		fault_code=5;
 8004f4c:	4b82      	ldr	r3, [pc, #520]	; (8005158 <Batt_Protection_when_discharge+0xb70>)
 8004f4e:	2205      	movs	r2, #5
 8004f50:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8004f52:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	497c      	ldr	r1, [pc, #496]	; (8005148 <Batt_Protection_when_discharge+0xb60>)
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fe77 	bl	8000c4c <__addsf3>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b7a      	ldr	r3, [pc, #488]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7fc f929 	bl	80011c0 <__aeabi_fcmpge>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d029      	beq.n	8004fc8 <Batt_Protection_when_discharge+0x9e0>
 8004f74:	4b73      	ldr	r3, [pc, #460]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4978      	ldr	r1, [pc, #480]	; (800515c <Batt_Protection_when_discharge+0xb74>)
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fb fe66 	bl	8000c4c <__addsf3>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b71      	ldr	r3, [pc, #452]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fc f904 	bl	8001198 <__aeabi_fcmplt>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d018      	beq.n	8004fc8 <Batt_Protection_when_discharge+0x9e0>
			if((test_tim2%1000)==0){
 8004f96:	4b72      	ldr	r3, [pc, #456]	; (8005160 <Batt_Protection_when_discharge+0xb78>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b72      	ldr	r3, [pc, #456]	; (8005164 <Batt_Protection_when_discharge+0xb7c>)
 8004f9c:	fb83 1302 	smull	r1, r3, r3, r2
 8004fa0:	1199      	asrs	r1, r3, #6
 8004fa2:	17d3      	asrs	r3, r2, #31
 8004fa4:	1acb      	subs	r3, r1, r3
 8004fa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8091 	bne.w	80050d8 <Batt_Protection_when_discharge+0xaf0>
				BUZZ_Toggle;
 8004fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fba:	4861      	ldr	r0, [pc, #388]	; (8005140 <Batt_Protection_when_discharge+0xb58>)
 8004fbc:	f004 f874 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8004fc0:	4b67      	ldr	r3, [pc, #412]	; (8005160 <Batt_Protection_when_discharge+0xb78>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8004fc6:	e087      	b.n	80050d8 <Batt_Protection_when_discharge+0xaf0>
		else if(Pack_SOC <= SOC_Under_Set+3 && Pack_SOC>SOC_Under_Set+2){
 8004fc8:	4b5e      	ldr	r3, [pc, #376]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4963      	ldr	r1, [pc, #396]	; (800515c <Batt_Protection_when_discharge+0xb74>)
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fb fe3c 	bl	8000c4c <__addsf3>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b5c      	ldr	r3, [pc, #368]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fc f8ee 	bl	80011c0 <__aeabi_fcmpge>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d029      	beq.n	800503e <Batt_Protection_when_discharge+0xa56>
 8004fea:	4b56      	ldr	r3, [pc, #344]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fb fe2a 	bl	8000c4c <__addsf3>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b53      	ldr	r3, [pc, #332]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7fc f8c8 	bl	8001198 <__aeabi_fcmplt>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d017      	beq.n	800503e <Batt_Protection_when_discharge+0xa56>
			if((test_tim2%500)==0){
 800500e:	4b54      	ldr	r3, [pc, #336]	; (8005160 <Batt_Protection_when_discharge+0xb78>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b54      	ldr	r3, [pc, #336]	; (8005164 <Batt_Protection_when_discharge+0xb7c>)
 8005014:	fb83 1302 	smull	r1, r3, r3, r2
 8005018:	1159      	asrs	r1, r3, #5
 800501a:	17d3      	asrs	r3, r2, #31
 800501c:	1acb      	subs	r3, r1, r3
 800501e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005022:	fb01 f303 	mul.w	r3, r1, r3
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d155      	bne.n	80050d8 <Batt_Protection_when_discharge+0xaf0>
				BUZZ_Toggle;
 800502c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005030:	4843      	ldr	r0, [pc, #268]	; (8005140 <Batt_Protection_when_discharge+0xb58>)
 8005032:	f004 f839 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005036:	4b4a      	ldr	r3, [pc, #296]	; (8005160 <Batt_Protection_when_discharge+0xb78>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800503c:	e04c      	b.n	80050d8 <Batt_Protection_when_discharge+0xaf0>
		else if(Pack_SOC <= SOC_Under_Set+2 && Pack_SOC>SOC_Under_Set){
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005046:	4618      	mov	r0, r3
 8005048:	f7fb fe00 	bl	8000c4c <__addsf3>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	4b3e      	ldr	r3, [pc, #248]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7fc f8b2 	bl	80011c0 <__aeabi_fcmpge>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d022      	beq.n	80050a8 <Batt_Protection_when_discharge+0xac0>
 8005062:	4b3a      	ldr	r3, [pc, #232]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a37      	ldr	r2, [pc, #220]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	4611      	mov	r1, r2
 800506c:	4618      	mov	r0, r3
 800506e:	f7fc f8b1 	bl	80011d4 <__aeabi_fcmpgt>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d017      	beq.n	80050a8 <Batt_Protection_when_discharge+0xac0>
			if((test_tim2%500)==0){
 8005078:	4b39      	ldr	r3, [pc, #228]	; (8005160 <Batt_Protection_when_discharge+0xb78>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b39      	ldr	r3, [pc, #228]	; (8005164 <Batt_Protection_when_discharge+0xb7c>)
 800507e:	fb83 1302 	smull	r1, r3, r3, r2
 8005082:	1159      	asrs	r1, r3, #5
 8005084:	17d3      	asrs	r3, r2, #31
 8005086:	1acb      	subs	r3, r1, r3
 8005088:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d120      	bne.n	80050d8 <Batt_Protection_when_discharge+0xaf0>
				BUZZ_Toggle;
 8005096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800509a:	4829      	ldr	r0, [pc, #164]	; (8005140 <Batt_Protection_when_discharge+0xb58>)
 800509c:	f004 f804 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80050a0:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <Batt_Protection_when_discharge+0xb78>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80050a6:	e017      	b.n	80050d8 <Batt_Protection_when_discharge+0xaf0>
		else if(Pack_SOC <= SOC_Under_Set){
 80050a8:	4b28      	ldr	r3, [pc, #160]	; (800514c <Batt_Protection_when_discharge+0xb64>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <Batt_Protection_when_discharge+0xb5c>)
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fc f87a 	bl	80011ac <__aeabi_fcmple>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d100      	bne.n	80050c0 <Batt_Protection_when_discharge+0xad8>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 80050be:	e0b5      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
			Batt_Open_Mode();
 80050c0:	f7fc fb78 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <Batt_Protection_when_discharge+0xb68>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80050ca:	2200      	movs	r2, #0
 80050cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050d0:	481b      	ldr	r0, [pc, #108]	; (8005140 <Batt_Protection_when_discharge+0xb58>)
 80050d2:	f003 ffd1 	bl	8009078 <HAL_GPIO_WritePin>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 80050d6:	e0a9      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
 80050d8:	e0a8      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
	else if(persen_imbalance >= Persen_Imbalance_Set + 5)
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <Batt_Protection_when_discharge+0xb80>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	491a      	ldr	r1, [pc, #104]	; (8005148 <Batt_Protection_when_discharge+0xb60>)
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fb fdb3 	bl	8000c4c <__addsf3>
 80050e6:	4603      	mov	r3, r0
 80050e8:	461a      	mov	r2, r3
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <Batt_Protection_when_discharge+0xb84>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f7fc f85b 	bl	80011ac <__aeabi_fcmple>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d03b      	beq.n	8005174 <Batt_Protection_when_discharge+0xb8c>
		fault_code=6;
 80050fc:	4b16      	ldr	r3, [pc, #88]	; (8005158 <Batt_Protection_when_discharge+0xb70>)
 80050fe:	2206      	movs	r2, #6
 8005100:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance >= Persen_Imbalance_Set)
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <Batt_Protection_when_discharge+0xb84>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <Batt_Protection_when_discharge+0xb80>)
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f7fc f857 	bl	80011c0 <__aeabi_fcmpge>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d100      	bne.n	800511a <Batt_Protection_when_discharge+0xb32>
}
 8005118:	e088      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
			flag_trip_unbalance=ON;
 800511a:	4b15      	ldr	r3, [pc, #84]	; (8005170 <Batt_Protection_when_discharge+0xb88>)
 800511c:	2201      	movs	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 8005120:	f7fc fb48 	bl	80017b4 <Batt_Open_Mode>
}
 8005124:	e082      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
 8005126:	bf00      	nop
 8005128:	200002a8 	.word	0x200002a8
 800512c:	20000058 	.word	0x20000058
 8005130:	200002ac 	.word	0x200002ac
 8005134:	200002b0 	.word	0x200002b0
 8005138:	200002b4 	.word	0x200002b4
 800513c:	20000309 	.word	0x20000309
 8005140:	40011000 	.word	0x40011000
 8005144:	20000754 	.word	0x20000754
 8005148:	40a00000 	.word	0x40a00000
 800514c:	2000031c 	.word	0x2000031c
 8005150:	2000030a 	.word	0x2000030a
 8005154:	200009d8 	.word	0x200009d8
 8005158:	200002f8 	.word	0x200002f8
 800515c:	40400000 	.word	0x40400000
 8005160:	20000304 	.word	0x20000304
 8005164:	10624dd3 	.word	0x10624dd3
 8005168:	20000068 	.word	0x20000068
 800516c:	200002cc 	.word	0x200002cc
 8005170:	20000312 	.word	0x20000312
		if(fault_code!=0){
 8005174:	4b32      	ldr	r3, [pc, #200]	; (8005240 <Batt_Protection_when_discharge+0xc58>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <Batt_Protection_when_discharge+0xb9c>
			last_fault_code=fault_code;
 800517c:	4b30      	ldr	r3, [pc, #192]	; (8005240 <Batt_Protection_when_discharge+0xc58>)
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	4b30      	ldr	r3, [pc, #192]	; (8005244 <Batt_Protection_when_discharge+0xc5c>)
 8005182:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005184:	4b2e      	ldr	r3, [pc, #184]	; (8005240 <Batt_Protection_when_discharge+0xc58>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
		T_Under_trip=0;
 800518a:	4b2f      	ldr	r3, [pc, #188]	; (8005248 <Batt_Protection_when_discharge+0xc60>)
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8005192:	4b2e      	ldr	r3, [pc, #184]	; (800524c <Batt_Protection_when_discharge+0xc64>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f7fb f9b2 	bl	8000500 <__aeabi_f2d>
 800519c:	a326      	add	r3, pc, #152	; (adr r3, 8005238 <Batt_Protection_when_discharge+0xc50>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb f84d 	bl	8000240 <__aeabi_dsub>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7fb fcf7 	bl	8000ba0 <__aeabi_d2f>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4a25      	ldr	r2, [pc, #148]	; (800524c <Batt_Protection_when_discharge+0xc64>)
 80051b6:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <Batt_Protection_when_discharge+0xc68>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fb f99f 	bl	8000500 <__aeabi_f2d>
 80051c2:	a31d      	add	r3, pc, #116	; (adr r3, 8005238 <Batt_Protection_when_discharge+0xc50>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f83a 	bl	8000240 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4610      	mov	r0, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	f7fb fce4 	bl	8000ba0 <__aeabi_d2f>
 80051d8:	4603      	mov	r3, r0
 80051da:	4a1d      	ldr	r2, [pc, #116]	; (8005250 <Batt_Protection_when_discharge+0xc68>)
 80051dc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80051de:	2200      	movs	r2, #0
 80051e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80051e4:	481b      	ldr	r0, [pc, #108]	; (8005254 <Batt_Protection_when_discharge+0xc6c>)
 80051e6:	f003 ff47 	bl	8009078 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
 80051ea:	4b18      	ldr	r3, [pc, #96]	; (800524c <Batt_Protection_when_discharge+0xc64>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f04f 0100 	mov.w	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fb ffd0 	bl	8001198 <__aeabi_fcmplt>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <Batt_Protection_when_discharge+0xc1e>
			T_trip_cycle=0;
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <Batt_Protection_when_discharge+0xc64>)
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005206:	4b12      	ldr	r3, [pc, #72]	; (8005250 <Batt_Protection_when_discharge+0xc68>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f04f 0100 	mov.w	r1, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f7fb ffc2 	bl	8001198 <__aeabi_fcmplt>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d100      	bne.n	800521c <Batt_Protection_when_discharge+0xc34>
}
 800521a:	e007      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
			T_I_Over_trip_cycle=0;
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <Batt_Protection_when_discharge+0xc68>)
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	e002      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
		if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8005226:	bf00      	nop
 8005228:	e000      	b.n	800522c <Batt_Protection_when_discharge+0xc44>
		if(flag_trip_overcurrentdischarge==OFF) {
 800522a:	bf00      	nop
}
 800522c:	bf00      	nop
 800522e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005232:	bf00      	nop
 8005234:	f3af 8000 	nop.w
 8005238:	d2f1a9fc 	.word	0xd2f1a9fc
 800523c:	3f50624d 	.word	0x3f50624d
 8005240:	200002f8 	.word	0x200002f8
 8005244:	200002f9 	.word	0x200002f9
 8005248:	20000a7c 	.word	0x20000a7c
 800524c:	20000a88 	.word	0x20000a88
 8005250:	20000300 	.word	0x20000300
 8005254:	40011000 	.word	0x40011000

08005258 <Batt_Protection_when_charge>:

void Batt_Protection_when_charge(void){
 8005258:	b5b0      	push	{r4, r5, r7, lr}
 800525a:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 800525c:	4b9b      	ldr	r3, [pc, #620]	; (80054cc <Batt_Protection_when_charge+0x274>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a9b      	ldr	r2, [pc, #620]	; (80054d0 <Batt_Protection_when_charge+0x278>)
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb ffb4 	bl	80011d4 <__aeabi_fcmpgt>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d017      	beq.n	80052a2 <Batt_Protection_when_charge+0x4a>
		Isc = IBATT;
 8005272:	4b96      	ldr	r3, [pc, #600]	; (80054cc <Batt_Protection_when_charge+0x274>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a97      	ldr	r2, [pc, #604]	; (80054d4 <Batt_Protection_when_charge+0x27c>)
 8005278:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 800527a:	4b95      	ldr	r3, [pc, #596]	; (80054d0 <Batt_Protection_when_charge+0x278>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a96      	ldr	r2, [pc, #600]	; (80054d8 <Batt_Protection_when_charge+0x280>)
 8005280:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8005282:	4b96      	ldr	r3, [pc, #600]	; (80054dc <Batt_Protection_when_charge+0x284>)
 8005284:	220c      	movs	r2, #12
 8005286:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005288:	f7fc fa94 	bl	80017b4 <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 800528c:	4b94      	ldr	r3, [pc, #592]	; (80054e0 <Batt_Protection_when_charge+0x288>)
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005292:	2200      	movs	r2, #0
 8005294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005298:	4892      	ldr	r0, [pc, #584]	; (80054e4 <Batt_Protection_when_charge+0x28c>)
 800529a:	f003 feed 	bl	8009078 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 800529e:	f000 bcac 	b.w	8005bfa <Batt_Protection_when_charge+0x9a2>
	else if(Pack_SOC >= SOC_Over_Set-10 && flag_trip_SOCOverCharge==OFF) {
 80052a2:	4b91      	ldr	r3, [pc, #580]	; (80054e8 <Batt_Protection_when_charge+0x290>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4991      	ldr	r1, [pc, #580]	; (80054ec <Batt_Protection_when_charge+0x294>)
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fb fccd 	bl	8000c48 <__aeabi_fsub>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b8f      	ldr	r3, [pc, #572]	; (80054f0 <Batt_Protection_when_charge+0x298>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fb ff77 	bl	80011ac <__aeabi_fcmple>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01f      	beq.n	8005304 <Batt_Protection_when_charge+0xac>
 80052c4:	4b8b      	ldr	r3, [pc, #556]	; (80054f4 <Batt_Protection_when_charge+0x29c>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d11b      	bne.n	8005304 <Batt_Protection_when_charge+0xac>
		fault_code=7;
 80052cc:	4b83      	ldr	r3, [pc, #524]	; (80054dc <Batt_Protection_when_charge+0x284>)
 80052ce:	2207      	movs	r2, #7
 80052d0:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 80052d2:	4b87      	ldr	r3, [pc, #540]	; (80054f0 <Batt_Protection_when_charge+0x298>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a84      	ldr	r2, [pc, #528]	; (80054e8 <Batt_Protection_when_charge+0x290>)
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb ff79 	bl	80011d4 <__aeabi_fcmpgt>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 8488 	beq.w	8005bfa <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 80052ea:	f7fc fa63 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 80052ee:	4b81      	ldr	r3, [pc, #516]	; (80054f4 <Batt_Protection_when_charge+0x29c>)
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80052f4:	2200      	movs	r2, #0
 80052f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052fa:	487a      	ldr	r0, [pc, #488]	; (80054e4 <Batt_Protection_when_charge+0x28c>)
 80052fc:	f003 febc 	bl	8009078 <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 8005300:	f000 bc7b 	b.w	8005bfa <Batt_Protection_when_charge+0x9a2>
	else if(((Suhu_T1>Chg_OverTemp)||(Suhu_T2>Chg_OverTemp)||(Suhu_T3>Chg_OverTemp)||(Suhu_T4>Chg_OverTemp)) && flag_trip_overtemperature==OFF) {
 8005304:	4b7c      	ldr	r3, [pc, #496]	; (80054f8 <Batt_Protection_when_charge+0x2a0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a7c      	ldr	r2, [pc, #496]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb ff60 	bl	80011d4 <__aeabi_fcmpgt>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d121      	bne.n	800535e <Batt_Protection_when_charge+0x106>
 800531a:	4b79      	ldr	r3, [pc, #484]	; (8005500 <Batt_Protection_when_charge+0x2a8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a77      	ldr	r2, [pc, #476]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 8005320:	6812      	ldr	r2, [r2, #0]
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7fb ff55 	bl	80011d4 <__aeabi_fcmpgt>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d116      	bne.n	800535e <Batt_Protection_when_charge+0x106>
 8005330:	4b74      	ldr	r3, [pc, #464]	; (8005504 <Batt_Protection_when_charge+0x2ac>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a71      	ldr	r2, [pc, #452]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f7fb ff4a 	bl	80011d4 <__aeabi_fcmpgt>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10b      	bne.n	800535e <Batt_Protection_when_charge+0x106>
 8005346:	4b70      	ldr	r3, [pc, #448]	; (8005508 <Batt_Protection_when_charge+0x2b0>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a6c      	ldr	r2, [pc, #432]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	4611      	mov	r1, r2
 8005350:	4618      	mov	r0, r3
 8005352:	f7fb ff3f 	bl	80011d4 <__aeabi_fcmpgt>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8131 	beq.w	80055c0 <Batt_Protection_when_charge+0x368>
 800535e:	4b6b      	ldr	r3, [pc, #428]	; (800550c <Batt_Protection_when_charge+0x2b4>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 812c 	bne.w	80055c0 <Batt_Protection_when_charge+0x368>
		fault_code=3;
 8005368:	4b5c      	ldr	r3, [pc, #368]	; (80054dc <Batt_Protection_when_charge+0x284>)
 800536a:	2203      	movs	r2, #3
 800536c:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 800536e:	4b62      	ldr	r3, [pc, #392]	; (80054f8 <Batt_Protection_when_charge+0x2a0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a62      	ldr	r2, [pc, #392]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	4611      	mov	r1, r2
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb ff2b 	bl	80011d4 <__aeabi_fcmpgt>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02a      	beq.n	80053da <Batt_Protection_when_charge+0x182>
 8005384:	4b5d      	ldr	r3, [pc, #372]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800538c:	4618      	mov	r0, r3
 800538e:	f7fb fc5d 	bl	8000c4c <__addsf3>
 8005392:	4603      	mov	r3, r0
 8005394:	461a      	mov	r2, r3
 8005396:	4b58      	ldr	r3, [pc, #352]	; (80054f8 <Batt_Protection_when_charge+0x2a0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7fb ff0f 	bl	80011c0 <__aeabi_fcmpge>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d018      	beq.n	80053da <Batt_Protection_when_charge+0x182>
			if((test_tim2%1000)==0) {
 80053a8:	4b59      	ldr	r3, [pc, #356]	; (8005510 <Batt_Protection_when_charge+0x2b8>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <Batt_Protection_when_charge+0x2bc>)
 80053ae:	fb83 1302 	smull	r1, r3, r3, r2
 80053b2:	1199      	asrs	r1, r3, #6
 80053b4:	17d3      	asrs	r3, r2, #31
 80053b6:	1acb      	subs	r3, r1, r3
 80053b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f040 80fb 	bne.w	80055be <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 80053c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053cc:	4845      	ldr	r0, [pc, #276]	; (80054e4 <Batt_Protection_when_charge+0x28c>)
 80053ce:	f003 fe6b 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80053d2:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <Batt_Protection_when_charge+0x2b8>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 80053d8:	e0f1      	b.n	80055be <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Chg_OverTemp+1 && Suhu_T1<=Chg_OverTemp+2){
 80053da:	4b48      	ldr	r3, [pc, #288]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb fc32 	bl	8000c4c <__addsf3>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	4b42      	ldr	r3, [pc, #264]	; (80054f8 <Batt_Protection_when_charge+0x2a0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7fb fed0 	bl	8001198 <__aeabi_fcmplt>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d02a      	beq.n	8005454 <Batt_Protection_when_charge+0x1fc>
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005406:	4618      	mov	r0, r3
 8005408:	f7fb fc20 	bl	8000c4c <__addsf3>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	4b39      	ldr	r3, [pc, #228]	; (80054f8 <Batt_Protection_when_charge+0x2a0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	4610      	mov	r0, r2
 8005418:	f7fb fed2 	bl	80011c0 <__aeabi_fcmpge>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d018      	beq.n	8005454 <Batt_Protection_when_charge+0x1fc>
			if((test_tim2%500)==0){
 8005422:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <Batt_Protection_when_charge+0x2b8>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <Batt_Protection_when_charge+0x2bc>)
 8005428:	fb83 1302 	smull	r1, r3, r3, r2
 800542c:	1159      	asrs	r1, r3, #5
 800542e:	17d3      	asrs	r3, r2, #31
 8005430:	1acb      	subs	r3, r1, r3
 8005432:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 80be 	bne.w	80055be <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 8005442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005446:	4827      	ldr	r0, [pc, #156]	; (80054e4 <Batt_Protection_when_charge+0x28c>)
 8005448:	f003 fe2e 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800544c:	4b30      	ldr	r3, [pc, #192]	; (8005510 <Batt_Protection_when_charge+0x2b8>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8005452:	e0b4      	b.n	80055be <Batt_Protection_when_charge+0x366>
		else if(Suhu_T1>Chg_OverTemp+2 && Suhu_T1<=Chg_OverTemp+3){
 8005454:	4b29      	ldr	r3, [pc, #164]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800545c:	4618      	mov	r0, r3
 800545e:	f7fb fbf5 	bl	8000c4c <__addsf3>
 8005462:	4603      	mov	r3, r0
 8005464:	461a      	mov	r2, r3
 8005466:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <Batt_Protection_when_charge+0x2a0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fb fe93 	bl	8001198 <__aeabi_fcmplt>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d051      	beq.n	800551c <Batt_Protection_when_charge+0x2c4>
 8005478:	4b20      	ldr	r3, [pc, #128]	; (80054fc <Batt_Protection_when_charge+0x2a4>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4926      	ldr	r1, [pc, #152]	; (8005518 <Batt_Protection_when_charge+0x2c0>)
 800547e:	4618      	mov	r0, r3
 8005480:	f7fb fbe4 	bl	8000c4c <__addsf3>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <Batt_Protection_when_charge+0x2a0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f7fb fe96 	bl	80011c0 <__aeabi_fcmpge>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d040      	beq.n	800551c <Batt_Protection_when_charge+0x2c4>
			if((test_tim2%500)==0){
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <Batt_Protection_when_charge+0x2b8>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <Batt_Protection_when_charge+0x2bc>)
 80054a0:	fb83 1302 	smull	r1, r3, r3, r2
 80054a4:	1159      	asrs	r1, r3, #5
 80054a6:	17d3      	asrs	r3, r2, #31
 80054a8:	1acb      	subs	r3, r1, r3
 80054aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f040 8082 	bne.w	80055be <Batt_Protection_when_charge+0x366>
				BUZZ_Toggle;
 80054ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054be:	4809      	ldr	r0, [pc, #36]	; (80054e4 <Batt_Protection_when_charge+0x28c>)
 80054c0:	f003 fdf2 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80054c4:	4b12      	ldr	r3, [pc, #72]	; (8005510 <Batt_Protection_when_charge+0x2b8>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80054ca:	e078      	b.n	80055be <Batt_Protection_when_charge+0x366>
 80054cc:	20000280 	.word	0x20000280
 80054d0:	2000027c 	.word	0x2000027c
 80054d4:	20000284 	.word	0x20000284
 80054d8:	20000288 	.word	0x20000288
 80054dc:	200002f8 	.word	0x200002f8
 80054e0:	20000310 	.word	0x20000310
 80054e4:	40011000 	.word	0x40011000
 80054e8:	2000005c 	.word	0x2000005c
 80054ec:	41200000 	.word	0x41200000
 80054f0:	2000031c 	.word	0x2000031c
 80054f4:	2000030b 	.word	0x2000030b
 80054f8:	200002a8 	.word	0x200002a8
 80054fc:	20000054 	.word	0x20000054
 8005500:	200002ac 	.word	0x200002ac
 8005504:	200002b0 	.word	0x200002b0
 8005508:	200002b4 	.word	0x200002b4
 800550c:	20000308 	.word	0x20000308
 8005510:	20000304 	.word	0x20000304
 8005514:	10624dd3 	.word	0x10624dd3
 8005518:	40400000 	.word	0x40400000
		else if(Suhu_T1>Chg_OverTemp+3||Suhu_T2>Chg_OverTemp+3||Suhu_T3>Chg_OverTemp+3||Suhu_T4>Chg_OverTemp+3){
 800551c:	4ba3      	ldr	r3, [pc, #652]	; (80057ac <Batt_Protection_when_charge+0x554>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	49a3      	ldr	r1, [pc, #652]	; (80057b0 <Batt_Protection_when_charge+0x558>)
 8005522:	4618      	mov	r0, r3
 8005524:	f7fb fb92 	bl	8000c4c <__addsf3>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	4ba1      	ldr	r3, [pc, #644]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	4610      	mov	r0, r2
 8005534:	f7fb fe30 	bl	8001198 <__aeabi_fcmplt>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d133      	bne.n	80055a6 <Batt_Protection_when_charge+0x34e>
 800553e:	4b9b      	ldr	r3, [pc, #620]	; (80057ac <Batt_Protection_when_charge+0x554>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	499b      	ldr	r1, [pc, #620]	; (80057b0 <Batt_Protection_when_charge+0x558>)
 8005544:	4618      	mov	r0, r3
 8005546:	f7fb fb81 	bl	8000c4c <__addsf3>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	4b9a      	ldr	r3, [pc, #616]	; (80057b8 <Batt_Protection_when_charge+0x560>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f7fb fe1f 	bl	8001198 <__aeabi_fcmplt>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d122      	bne.n	80055a6 <Batt_Protection_when_charge+0x34e>
 8005560:	4b92      	ldr	r3, [pc, #584]	; (80057ac <Batt_Protection_when_charge+0x554>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4992      	ldr	r1, [pc, #584]	; (80057b0 <Batt_Protection_when_charge+0x558>)
 8005566:	4618      	mov	r0, r3
 8005568:	f7fb fb70 	bl	8000c4c <__addsf3>
 800556c:	4603      	mov	r3, r0
 800556e:	461a      	mov	r2, r3
 8005570:	4b92      	ldr	r3, [pc, #584]	; (80057bc <Batt_Protection_when_charge+0x564>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fb fe0e 	bl	8001198 <__aeabi_fcmplt>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d111      	bne.n	80055a6 <Batt_Protection_when_charge+0x34e>
 8005582:	4b8a      	ldr	r3, [pc, #552]	; (80057ac <Batt_Protection_when_charge+0x554>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	498a      	ldr	r1, [pc, #552]	; (80057b0 <Batt_Protection_when_charge+0x558>)
 8005588:	4618      	mov	r0, r3
 800558a:	f7fb fb5f 	bl	8000c4c <__addsf3>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	4b8b      	ldr	r3, [pc, #556]	; (80057c0 <Batt_Protection_when_charge+0x568>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7fb fdfd 	bl	8001198 <__aeabi_fcmplt>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d100      	bne.n	80055a6 <Batt_Protection_when_charge+0x34e>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 80055a4:	e329      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 80055a6:	f7fc f905 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 80055aa:	4b86      	ldr	r3, [pc, #536]	; (80057c4 <Batt_Protection_when_charge+0x56c>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80055b0:	2200      	movs	r2, #0
 80055b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80055b6:	4884      	ldr	r0, [pc, #528]	; (80057c8 <Batt_Protection_when_charge+0x570>)
 80055b8:	f003 fd5e 	bl	8009078 <HAL_GPIO_WritePin>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 80055bc:	e31d      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
 80055be:	e31c      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 80055c0:	4b7c      	ldr	r3, [pc, #496]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a81      	ldr	r2, [pc, #516]	; (80057cc <Batt_Protection_when_charge+0x574>)
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	4611      	mov	r1, r2
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fb fb3c 	bl	8000c48 <__aeabi_fsub>
 80055d0:	4603      	mov	r3, r0
 80055d2:	497f      	ldr	r1, [pc, #508]	; (80057d0 <Batt_Protection_when_charge+0x578>)
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fb fde9 	bl	80011ac <__aeabi_fcmple>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d130      	bne.n	8005642 <Batt_Protection_when_charge+0x3ea>
 80055e0:	4b75      	ldr	r3, [pc, #468]	; (80057b8 <Batt_Protection_when_charge+0x560>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a79      	ldr	r2, [pc, #484]	; (80057cc <Batt_Protection_when_charge+0x574>)
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fb fb2c 	bl	8000c48 <__aeabi_fsub>
 80055f0:	4603      	mov	r3, r0
 80055f2:	4977      	ldr	r1, [pc, #476]	; (80057d0 <Batt_Protection_when_charge+0x578>)
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb fdd9 	bl	80011ac <__aeabi_fcmple>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d120      	bne.n	8005642 <Batt_Protection_when_charge+0x3ea>
 8005600:	4b6e      	ldr	r3, [pc, #440]	; (80057bc <Batt_Protection_when_charge+0x564>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a71      	ldr	r2, [pc, #452]	; (80057cc <Batt_Protection_when_charge+0x574>)
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f7fb fb1c 	bl	8000c48 <__aeabi_fsub>
 8005610:	4603      	mov	r3, r0
 8005612:	496f      	ldr	r1, [pc, #444]	; (80057d0 <Batt_Protection_when_charge+0x578>)
 8005614:	4618      	mov	r0, r3
 8005616:	f7fb fdc9 	bl	80011ac <__aeabi_fcmple>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d110      	bne.n	8005642 <Batt_Protection_when_charge+0x3ea>
 8005620:	4b67      	ldr	r3, [pc, #412]	; (80057c0 <Batt_Protection_when_charge+0x568>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a69      	ldr	r2, [pc, #420]	; (80057cc <Batt_Protection_when_charge+0x574>)
 8005626:	6812      	ldr	r2, [r2, #0]
 8005628:	4611      	mov	r1, r2
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fb0c 	bl	8000c48 <__aeabi_fsub>
 8005630:	4603      	mov	r3, r0
 8005632:	4967      	ldr	r1, [pc, #412]	; (80057d0 <Batt_Protection_when_charge+0x578>)
 8005634:	4618      	mov	r0, r3
 8005636:	f7fb fdb9 	bl	80011ac <__aeabi_fcmple>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 810d 	beq.w	800585c <Batt_Protection_when_charge+0x604>
 8005642:	4b64      	ldr	r3, [pc, #400]	; (80057d4 <Batt_Protection_when_charge+0x57c>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f040 8108 	bne.w	800585c <Batt_Protection_when_charge+0x604>
		fault_code=4;
 800564c:	4b62      	ldr	r3, [pc, #392]	; (80057d8 <Batt_Protection_when_charge+0x580>)
 800564e:	2204      	movs	r2, #4
 8005650:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005652:	4b5e      	ldr	r3, [pc, #376]	; (80057cc <Batt_Protection_when_charge+0x574>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	495e      	ldr	r1, [pc, #376]	; (80057d0 <Batt_Protection_when_charge+0x578>)
 8005658:	4618      	mov	r0, r3
 800565a:	f7fb faf7 	bl	8000c4c <__addsf3>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	4b54      	ldr	r3, [pc, #336]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f7fb fda9 	bl	80011c0 <__aeabi_fcmpge>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d029      	beq.n	80056c8 <Batt_Protection_when_charge+0x470>
 8005674:	4b55      	ldr	r3, [pc, #340]	; (80057cc <Batt_Protection_when_charge+0x574>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4958      	ldr	r1, [pc, #352]	; (80057dc <Batt_Protection_when_charge+0x584>)
 800567a:	4618      	mov	r0, r3
 800567c:	f7fb fae6 	bl	8000c4c <__addsf3>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	4b4b      	ldr	r3, [pc, #300]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7fb fd84 	bl	8001198 <__aeabi_fcmplt>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d018      	beq.n	80056c8 <Batt_Protection_when_charge+0x470>
			if((test_tim2%1000)==0){
 8005696:	4b52      	ldr	r3, [pc, #328]	; (80057e0 <Batt_Protection_when_charge+0x588>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b52      	ldr	r3, [pc, #328]	; (80057e4 <Batt_Protection_when_charge+0x58c>)
 800569c:	fb83 1302 	smull	r1, r3, r3, r2
 80056a0:	1199      	asrs	r1, r3, #6
 80056a2:	17d3      	asrs	r3, r2, #31
 80056a4:	1acb      	subs	r3, r1, r3
 80056a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f040 80d2 	bne.w	800585a <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 80056b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056ba:	4843      	ldr	r0, [pc, #268]	; (80057c8 <Batt_Protection_when_charge+0x570>)
 80056bc:	f003 fcf4 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80056c0:	4b47      	ldr	r3, [pc, #284]	; (80057e0 <Batt_Protection_when_charge+0x588>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 80056c6:	e0c8      	b.n	800585a <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2){
 80056c8:	4b40      	ldr	r3, [pc, #256]	; (80057cc <Batt_Protection_when_charge+0x574>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4943      	ldr	r1, [pc, #268]	; (80057dc <Batt_Protection_when_charge+0x584>)
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fb fabc 	bl	8000c4c <__addsf3>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f7fb fd6e 	bl	80011c0 <__aeabi_fcmpge>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02a      	beq.n	8005740 <Batt_Protection_when_charge+0x4e8>
 80056ea:	4b38      	ldr	r3, [pc, #224]	; (80057cc <Batt_Protection_when_charge+0x574>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fb faaa 	bl	8000c4c <__addsf3>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	4b2d      	ldr	r3, [pc, #180]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7fb fd48 	bl	8001198 <__aeabi_fcmplt>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d018      	beq.n	8005740 <Batt_Protection_when_charge+0x4e8>
			if((test_tim2%500)==0){
 800570e:	4b34      	ldr	r3, [pc, #208]	; (80057e0 <Batt_Protection_when_charge+0x588>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b34      	ldr	r3, [pc, #208]	; (80057e4 <Batt_Protection_when_charge+0x58c>)
 8005714:	fb83 1302 	smull	r1, r3, r3, r2
 8005718:	1159      	asrs	r1, r3, #5
 800571a:	17d3      	asrs	r3, r2, #31
 800571c:	1acb      	subs	r3, r1, r3
 800571e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	f040 8096 	bne.w	800585a <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 800572e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005732:	4825      	ldr	r0, [pc, #148]	; (80057c8 <Batt_Protection_when_charge+0x570>)
 8005734:	f003 fcb8 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8005738:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <Batt_Protection_when_charge+0x588>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 800573e:	e08c      	b.n	800585a <Batt_Protection_when_charge+0x602>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set){
 8005740:	4b22      	ldr	r3, [pc, #136]	; (80057cc <Batt_Protection_when_charge+0x574>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005748:	4618      	mov	r0, r3
 800574a:	f7fb fa7f 	bl	8000c4c <__addsf3>
 800574e:	4603      	mov	r3, r0
 8005750:	461a      	mov	r2, r3
 8005752:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fb fd3b 	bl	80011d4 <__aeabi_fcmpgt>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d041      	beq.n	80057e8 <Batt_Protection_when_charge+0x590>
 8005764:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <Batt_Protection_when_charge+0x55c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a18      	ldr	r2, [pc, #96]	; (80057cc <Batt_Protection_when_charge+0x574>)
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f7fb fd26 	bl	80011c0 <__aeabi_fcmpge>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d036      	beq.n	80057e8 <Batt_Protection_when_charge+0x590>
			if((test_tim2%500)==0){
 800577a:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <Batt_Protection_when_charge+0x588>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <Batt_Protection_when_charge+0x58c>)
 8005780:	fb83 1302 	smull	r1, r3, r3, r2
 8005784:	1159      	asrs	r1, r3, #5
 8005786:	17d3      	asrs	r3, r2, #31
 8005788:	1acb      	subs	r3, r1, r3
 800578a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800578e:	fb01 f303 	mul.w	r3, r1, r3
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d160      	bne.n	800585a <Batt_Protection_when_charge+0x602>
				BUZZ_Toggle;
 8005798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800579c:	480a      	ldr	r0, [pc, #40]	; (80057c8 <Batt_Protection_when_charge+0x570>)
 800579e:	f003 fc83 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80057a2:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <Batt_Protection_when_charge+0x588>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80057a8:	e057      	b.n	800585a <Batt_Protection_when_charge+0x602>
 80057aa:	bf00      	nop
 80057ac:	20000054 	.word	0x20000054
 80057b0:	40400000 	.word	0x40400000
 80057b4:	200002a8 	.word	0x200002a8
 80057b8:	200002ac 	.word	0x200002ac
 80057bc:	200002b0 	.word	0x200002b0
 80057c0:	200002b4 	.word	0x200002b4
 80057c4:	20000308 	.word	0x20000308
 80057c8:	40011000 	.word	0x40011000
 80057cc:	20000058 	.word	0x20000058
 80057d0:	41200000 	.word	0x41200000
 80057d4:	20000309 	.word	0x20000309
 80057d8:	200002f8 	.word	0x200002f8
 80057dc:	40a00000 	.word	0x40a00000
 80057e0:	20000304 	.word	0x20000304
 80057e4:	10624dd3 	.word	0x10624dd3
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set){
 80057e8:	4bb3      	ldr	r3, [pc, #716]	; (8005ab8 <Batt_Protection_when_charge+0x860>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4ab3      	ldr	r2, [pc, #716]	; (8005abc <Batt_Protection_when_charge+0x864>)
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fb fcd0 	bl	8001198 <__aeabi_fcmplt>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d121      	bne.n	8005842 <Batt_Protection_when_charge+0x5ea>
 80057fe:	4bb0      	ldr	r3, [pc, #704]	; (8005ac0 <Batt_Protection_when_charge+0x868>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4aae      	ldr	r2, [pc, #696]	; (8005abc <Batt_Protection_when_charge+0x864>)
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	4611      	mov	r1, r2
 8005808:	4618      	mov	r0, r3
 800580a:	f7fb fcc5 	bl	8001198 <__aeabi_fcmplt>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d116      	bne.n	8005842 <Batt_Protection_when_charge+0x5ea>
 8005814:	4bab      	ldr	r3, [pc, #684]	; (8005ac4 <Batt_Protection_when_charge+0x86c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4aa8      	ldr	r2, [pc, #672]	; (8005abc <Batt_Protection_when_charge+0x864>)
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f7fb fcba 	bl	8001198 <__aeabi_fcmplt>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <Batt_Protection_when_charge+0x5ea>
 800582a:	4ba7      	ldr	r3, [pc, #668]	; (8005ac8 <Batt_Protection_when_charge+0x870>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4aa3      	ldr	r2, [pc, #652]	; (8005abc <Batt_Protection_when_charge+0x864>)
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f7fb fcaf 	bl	8001198 <__aeabi_fcmplt>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d100      	bne.n	8005842 <Batt_Protection_when_charge+0x5ea>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005840:	e1db      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
			Batt_Open_Mode();
 8005842:	f7fb ffb7 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 8005846:	4ba1      	ldr	r3, [pc, #644]	; (8005acc <Batt_Protection_when_charge+0x874>)
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800584c:	2200      	movs	r2, #0
 800584e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005852:	489f      	ldr	r0, [pc, #636]	; (8005ad0 <Batt_Protection_when_charge+0x878>)
 8005854:	f003 fc10 	bl	8009078 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5){
 8005858:	e1cf      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
 800585a:	e1ce      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
	else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 800585c:	4b9d      	ldr	r3, [pc, #628]	; (8005ad4 <Batt_Protection_when_charge+0x87c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005864:	4618      	mov	r0, r3
 8005866:	f7fa fe4b 	bl	8000500 <__aeabi_f2d>
 800586a:	4604      	mov	r4, r0
 800586c:	460d      	mov	r5, r1
 800586e:	4b9a      	ldr	r3, [pc, #616]	; (8005ad8 <Batt_Protection_when_charge+0x880>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fa fe44 	bl	8000500 <__aeabi_f2d>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f7fa fcde 	bl	8000240 <__aeabi_dsub>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f7fb f91c 	bl	8000ad0 <__aeabi_dcmpgt>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 813f 	beq.w	8005b1e <Batt_Protection_when_charge+0x8c6>
 80058a0:	4b8e      	ldr	r3, [pc, #568]	; (8005adc <Batt_Protection_when_charge+0x884>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f040 813a 	bne.w	8005b1e <Batt_Protection_when_charge+0x8c6>
		fault_code=10;
 80058aa:	4b8d      	ldr	r3, [pc, #564]	; (8005ae0 <Batt_Protection_when_charge+0x888>)
 80058ac:	220a      	movs	r2, #10
 80058ae:	701a      	strb	r2, [r3, #0]
		T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 80058b0:	4b88      	ldr	r3, [pc, #544]	; (8005ad4 <Batt_Protection_when_charge+0x87c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fa fe23 	bl	8000500 <__aeabi_f2d>
 80058ba:	a37b      	add	r3, pc, #492	; (adr r3, 8005aa8 <Batt_Protection_when_charge+0x850>)
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f7fa ffa0 	bl	8000804 <__aeabi_ddiv>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4614      	mov	r4, r2
 80058ca:	461d      	mov	r5, r3
 80058cc:	4b81      	ldr	r3, [pc, #516]	; (8005ad4 <Batt_Protection_when_charge+0x87c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fa fe15 	bl	8000500 <__aeabi_f2d>
 80058d6:	a374      	add	r3, pc, #464	; (adr r3, 8005aa8 <Batt_Protection_when_charge+0x850>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f7fa ff92 	bl	8000804 <__aeabi_ddiv>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fe62 	bl	80005b0 <__aeabi_dmul>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	4b7a      	ldr	r3, [pc, #488]	; (8005ae4 <Batt_Protection_when_charge+0x88c>)
 80058fa:	f7fa fca1 	bl	8000240 <__aeabi_dsub>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	f04f 0000 	mov.w	r0, #0
 8005906:	4978      	ldr	r1, [pc, #480]	; (8005ae8 <Batt_Protection_when_charge+0x890>)
 8005908:	f7fa ff7c 	bl	8000804 <__aeabi_ddiv>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	f7fb f944 	bl	8000ba0 <__aeabi_d2f>
 8005918:	4603      	mov	r3, r0
 800591a:	4a74      	ldr	r2, [pc, #464]	; (8005aec <Batt_Protection_when_charge+0x894>)
 800591c:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle+=0.01;
 800591e:	4b74      	ldr	r3, [pc, #464]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f7fa fdec 	bl	8000500 <__aeabi_f2d>
 8005928:	a361      	add	r3, pc, #388	; (adr r3, 8005ab0 <Batt_Protection_when_charge+0x858>)
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f7fa fc89 	bl	8000244 <__adddf3>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	f7fb f931 	bl	8000ba0 <__aeabi_d2f>
 800593e:	4603      	mov	r3, r0
 8005940:	4a6b      	ldr	r2, [pc, #428]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 8005942:	6013      	str	r3, [r2, #0]
		if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 8005944:	4b6a      	ldr	r3, [pc, #424]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a68      	ldr	r2, [pc, #416]	; (8005aec <Batt_Protection_when_charge+0x894>)
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	4611      	mov	r1, r2
 800594e:	4618      	mov	r0, r3
 8005950:	f7fb fc40 	bl	80011d4 <__aeabi_fcmpgt>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d012      	beq.n	8005980 <Batt_Protection_when_charge+0x728>
 800595a:	4b60      	ldr	r3, [pc, #384]	; (8005adc <Batt_Protection_when_charge+0x884>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10e      	bne.n	8005980 <Batt_Protection_when_charge+0x728>
			Batt_Open_Mode();
 8005962:	f7fb ff27 	bl	80017b4 <Batt_Open_Mode>
			T_I_Over_trip_cycle=T_I_Over_trip;
 8005966:	4b61      	ldr	r3, [pc, #388]	; (8005aec <Batt_Protection_when_charge+0x894>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a61      	ldr	r2, [pc, #388]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 800596c:	6013      	str	r3, [r2, #0]
			flag_trip_overcurrentcharge=ON;
 800596e:	4b5b      	ldr	r3, [pc, #364]	; (8005adc <Batt_Protection_when_charge+0x884>)
 8005970:	2201      	movs	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005974:	2200      	movs	r2, #0
 8005976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800597a:	4855      	ldr	r0, [pc, #340]	; (8005ad0 <Batt_Protection_when_charge+0x878>)
 800597c:	f003 fb7c 	bl	8009078 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 8005980:	4b56      	ldr	r3, [pc, #344]	; (8005adc <Batt_Protection_when_charge+0x884>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 8137 	bne.w	8005bf8 <Batt_Protection_when_charge+0x9a0>
			if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 800598a:	4b58      	ldr	r3, [pc, #352]	; (8005aec <Batt_Protection_when_charge+0x894>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb f957 	bl	8000c48 <__aeabi_fsub>
 800599a:	4603      	mov	r3, r0
 800599c:	4955      	ldr	r1, [pc, #340]	; (8005af4 <Batt_Protection_when_charge+0x89c>)
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fb fc18 	bl	80011d4 <__aeabi_fcmpgt>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d018      	beq.n	80059dc <Batt_Protection_when_charge+0x784>
				if((test_tim2%1000)==0) {
 80059aa:	4b53      	ldr	r3, [pc, #332]	; (8005af8 <Batt_Protection_when_charge+0x8a0>)
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b53      	ldr	r3, [pc, #332]	; (8005afc <Batt_Protection_when_charge+0x8a4>)
 80059b0:	fb83 1302 	smull	r1, r3, r3, r2
 80059b4:	1199      	asrs	r1, r3, #6
 80059b6:	17d3      	asrs	r3, r2, #31
 80059b8:	1acb      	subs	r3, r1, r3
 80059ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059be:	fb01 f303 	mul.w	r3, r1, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 8117 	bne.w	8005bf8 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 80059ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059ce:	4840      	ldr	r0, [pc, #256]	; (8005ad0 <Batt_Protection_when_charge+0x878>)
 80059d0:	f003 fb6a 	bl	80090a8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 80059d4:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <Batt_Protection_when_charge+0x8a0>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 80059da:	e10d      	b.n	8005bf8 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 80059dc:	4b43      	ldr	r3, [pc, #268]	; (8005aec <Batt_Protection_when_charge+0x894>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a43      	ldr	r2, [pc, #268]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	4611      	mov	r1, r2
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fb f92e 	bl	8000c48 <__aeabi_fsub>
 80059ec:	4603      	mov	r3, r0
 80059ee:	4944      	ldr	r1, [pc, #272]	; (8005b00 <Batt_Protection_when_charge+0x8a8>)
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fb fbef 	bl	80011d4 <__aeabi_fcmpgt>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d017      	beq.n	8005a2c <Batt_Protection_when_charge+0x7d4>
				if((test_tim2%100)==0) {
 80059fc:	4b3e      	ldr	r3, [pc, #248]	; (8005af8 <Batt_Protection_when_charge+0x8a0>)
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <Batt_Protection_when_charge+0x8ac>)
 8005a02:	fb83 1302 	smull	r1, r3, r3, r2
 8005a06:	1159      	asrs	r1, r3, #5
 8005a08:	17d3      	asrs	r3, r2, #31
 8005a0a:	1acb      	subs	r3, r1, r3
 8005a0c:	2164      	movs	r1, #100	; 0x64
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 80ef 	bne.w	8005bf8 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a1e:	482c      	ldr	r0, [pc, #176]	; (8005ad0 <Batt_Protection_when_charge+0x878>)
 8005a20:	f003 fb42 	bl	80090a8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005a24:	4b34      	ldr	r3, [pc, #208]	; (8005af8 <Batt_Protection_when_charge+0x8a0>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005a2a:	e0e5      	b.n	8005bf8 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <Batt_Protection_when_charge+0x894>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2f      	ldr	r2, [pc, #188]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	4611      	mov	r1, r2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fb f906 	bl	8000c48 <__aeabi_fsub>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4932      	ldr	r1, [pc, #200]	; (8005b08 <Batt_Protection_when_charge+0x8b0>)
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fb fbc7 	bl	80011d4 <__aeabi_fcmpgt>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d018      	beq.n	8005a7e <Batt_Protection_when_charge+0x826>
				if((test_tim2%10)==0) {
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <Batt_Protection_when_charge+0x8a0>)
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	4b2e      	ldr	r3, [pc, #184]	; (8005b0c <Batt_Protection_when_charge+0x8b4>)
 8005a52:	fb83 2301 	smull	r2, r3, r3, r1
 8005a56:	109a      	asrs	r2, r3, #2
 8005a58:	17cb      	asrs	r3, r1, #31
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	1aca      	subs	r2, r1, r3
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	f040 80c6 	bne.w	8005bf8 <Batt_Protection_when_charge+0x9a0>
					BUZZ_Toggle;
 8005a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a70:	4817      	ldr	r0, [pc, #92]	; (8005ad0 <Batt_Protection_when_charge+0x878>)
 8005a72:	f003 fb19 	bl	80090a8 <HAL_GPIO_TogglePin>
					test_tim2=0;
 8005a76:	4b20      	ldr	r3, [pc, #128]	; (8005af8 <Batt_Protection_when_charge+0x8a0>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
		if(flag_trip_overcurrentcharge==OFF) {
 8005a7c:	e0bc      	b.n	8005bf8 <Batt_Protection_when_charge+0x9a0>
			else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8005a7e:	4b1b      	ldr	r3, [pc, #108]	; (8005aec <Batt_Protection_when_charge+0x894>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1b      	ldr	r2, [pc, #108]	; (8005af0 <Batt_Protection_when_charge+0x898>)
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fb f8dd 	bl	8000c48 <__aeabi_fsub>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fb fb9d 	bl	80011d4 <__aeabi_fcmpgt>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d137      	bne.n	8005b10 <Batt_Protection_when_charge+0x8b8>
		if(flag_trip_overcurrentcharge==OFF) {
 8005aa0:	e0aa      	b.n	8005bf8 <Batt_Protection_when_charge+0x9a0>
 8005aa2:	bf00      	nop
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	9999999a 	.word	0x9999999a
 8005aac:	401b9999 	.word	0x401b9999
 8005ab0:	47ae147b 	.word	0x47ae147b
 8005ab4:	3f847ae1 	.word	0x3f847ae1
 8005ab8:	200002a8 	.word	0x200002a8
 8005abc:	20000058 	.word	0x20000058
 8005ac0:	200002ac 	.word	0x200002ac
 8005ac4:	200002b0 	.word	0x200002b0
 8005ac8:	200002b4 	.word	0x200002b4
 8005acc:	20000309 	.word	0x20000309
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	20000280 	.word	0x20000280
 8005ad8:	2000004c 	.word	0x2000004c
 8005adc:	2000030f 	.word	0x2000030f
 8005ae0:	200002f8 	.word	0x200002f8
 8005ae4:	3ff00000 	.word	0x3ff00000
 8005ae8:	40200000 	.word	0x40200000
 8005aec:	200002fc 	.word	0x200002fc
 8005af0:	20000300 	.word	0x20000300
 8005af4:	41700000 	.word	0x41700000
 8005af8:	20000304 	.word	0x20000304
 8005afc:	10624dd3 	.word	0x10624dd3
 8005b00:	41200000 	.word	0x41200000
 8005b04:	51eb851f 	.word	0x51eb851f
 8005b08:	40400000 	.word	0x40400000
 8005b0c:	66666667 	.word	0x66666667
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8005b10:	2201      	movs	r2, #1
 8005b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b16:	483c      	ldr	r0, [pc, #240]	; (8005c08 <Batt_Protection_when_charge+0x9b0>)
 8005b18:	f003 faae 	bl	8009078 <HAL_GPIO_WritePin>
		if(flag_trip_overcurrentcharge==OFF) {
 8005b1c:	e06c      	b.n	8005bf8 <Batt_Protection_when_charge+0x9a0>
	else if(VBATT>V_Over_Set) {
 8005b1e:	4b3b      	ldr	r3, [pc, #236]	; (8005c0c <Batt_Protection_when_charge+0x9b4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3b      	ldr	r2, [pc, #236]	; (8005c10 <Batt_Protection_when_charge+0x9b8>)
 8005b24:	6812      	ldr	r2, [r2, #0]
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fb fb53 	bl	80011d4 <__aeabi_fcmpgt>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <Batt_Protection_when_charge+0x8ee>
		fault_code=11;
 8005b34:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <Batt_Protection_when_charge+0x9bc>)
 8005b36:	220b      	movs	r2, #11
 8005b38:	701a      	strb	r2, [r3, #0]
		flag_trip_overvoltage=ON;
 8005b3a:	4b37      	ldr	r3, [pc, #220]	; (8005c18 <Batt_Protection_when_charge+0x9c0>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005b40:	f7fb fe38 	bl	80017b4 <Batt_Open_Mode>
}
 8005b44:	e059      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
		if(fault_code!=0){
 8005b46:	4b33      	ldr	r3, [pc, #204]	; (8005c14 <Batt_Protection_when_charge+0x9bc>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <Batt_Protection_when_charge+0x8fe>
			last_fault_code=fault_code;
 8005b4e:	4b31      	ldr	r3, [pc, #196]	; (8005c14 <Batt_Protection_when_charge+0x9bc>)
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	4b32      	ldr	r3, [pc, #200]	; (8005c1c <Batt_Protection_when_charge+0x9c4>)
 8005b54:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 8005b56:	4b2f      	ldr	r3, [pc, #188]	; (8005c14 <Batt_Protection_when_charge+0x9bc>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
		T_Under_trip=0;
 8005b5c:	4b30      	ldr	r3, [pc, #192]	; (8005c20 <Batt_Protection_when_charge+0x9c8>)
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 8005b64:	4b2f      	ldr	r3, [pc, #188]	; (8005c24 <Batt_Protection_when_charge+0x9cc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fa fcc9 	bl	8000500 <__aeabi_f2d>
 8005b6e:	a324      	add	r3, pc, #144	; (adr r3, 8005c00 <Batt_Protection_when_charge+0x9a8>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa fb64 	bl	8000240 <__aeabi_dsub>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	f7fb f80e 	bl	8000ba0 <__aeabi_d2f>
 8005b84:	4603      	mov	r3, r0
 8005b86:	4a27      	ldr	r2, [pc, #156]	; (8005c24 <Batt_Protection_when_charge+0x9cc>)
 8005b88:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8005b8a:	4b27      	ldr	r3, [pc, #156]	; (8005c28 <Batt_Protection_when_charge+0x9d0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fa fcb6 	bl	8000500 <__aeabi_f2d>
 8005b94:	a31a      	add	r3, pc, #104	; (adr r3, 8005c00 <Batt_Protection_when_charge+0x9a8>)
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f7fa fb51 	bl	8000240 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	f7fa fffb 	bl	8000ba0 <__aeabi_d2f>
 8005baa:	4603      	mov	r3, r0
 8005bac:	4a1e      	ldr	r2, [pc, #120]	; (8005c28 <Batt_Protection_when_charge+0x9d0>)
 8005bae:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005bb6:	4814      	ldr	r0, [pc, #80]	; (8005c08 <Batt_Protection_when_charge+0x9b0>)
 8005bb8:	f003 fa5e 	bl	8009078 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
 8005bbc:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <Batt_Protection_when_charge+0x9cc>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f04f 0100 	mov.w	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fb fae7 	bl	8001198 <__aeabi_fcmplt>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <Batt_Protection_when_charge+0x980>
			T_trip_cycle=0;
 8005bd0:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <Batt_Protection_when_charge+0x9cc>)
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <Batt_Protection_when_charge+0x9d0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f04f 0100 	mov.w	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fb fad9 	bl	8001198 <__aeabi_fcmplt>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d100      	bne.n	8005bee <Batt_Protection_when_charge+0x996>
}
 8005bec:	e005      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
			T_I_Over_trip_cycle=0;
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <Batt_Protection_when_charge+0x9d0>)
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
}
 8005bf6:	e000      	b.n	8005bfa <Batt_Protection_when_charge+0x9a2>
		if(flag_trip_overcurrentcharge==OFF) {
 8005bf8:	bf00      	nop
}
 8005bfa:	bf00      	nop
 8005bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c04:	3f50624d 	.word	0x3f50624d
 8005c08:	40011000 	.word	0x40011000
 8005c0c:	2000027c 	.word	0x2000027c
 8005c10:	20000064 	.word	0x20000064
 8005c14:	200002f8 	.word	0x200002f8
 8005c18:	2000030d 	.word	0x2000030d
 8005c1c:	200002f9 	.word	0x200002f9
 8005c20:	20000a7c 	.word	0x20000a7c
 8005c24:	20000a88 	.word	0x20000a88
 8005c28:	20000300 	.word	0x20000300
 8005c2c:	00000000 	.word	0x00000000

08005c30 <Batt_Protection_when_chargedischarge>:


void Batt_Protection_when_chargedischarge(void) {
 8005c30:	b5b0      	push	{r4, r5, r7, lr}
 8005c32:	af00      	add	r7, sp, #0
	//***************** Short Circuit Protection ***********************************//
	if(IBATT > (VBATT)) {
 8005c34:	4b5c      	ldr	r3, [pc, #368]	; (8005da8 <Batt_Protection_when_chargedischarge+0x178>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a5c      	ldr	r2, [pc, #368]	; (8005dac <Batt_Protection_when_chargedischarge+0x17c>)
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fb fac8 	bl	80011d4 <__aeabi_fcmpgt>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <Batt_Protection_when_chargedischarge+0x4a>
		Isc = IBATT;
 8005c4a:	4b57      	ldr	r3, [pc, #348]	; (8005da8 <Batt_Protection_when_chargedischarge+0x178>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a58      	ldr	r2, [pc, #352]	; (8005db0 <Batt_Protection_when_chargedischarge+0x180>)
 8005c50:	6013      	str	r3, [r2, #0]
		Vsc = VBATT;
 8005c52:	4b56      	ldr	r3, [pc, #344]	; (8005dac <Batt_Protection_when_chargedischarge+0x17c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a57      	ldr	r2, [pc, #348]	; (8005db4 <Batt_Protection_when_chargedischarge+0x184>)
 8005c58:	6013      	str	r3, [r2, #0]
		fault_code = 12;
 8005c5a:	4b57      	ldr	r3, [pc, #348]	; (8005db8 <Batt_Protection_when_chargedischarge+0x188>)
 8005c5c:	220c      	movs	r2, #12
 8005c5e:	701a      	strb	r2, [r3, #0]
		Batt_Open_Mode();
 8005c60:	f7fb fda8 	bl	80017b4 <Batt_Open_Mode>
		flag_trip_shortcircuit = ON;
 8005c64:	4b55      	ldr	r3, [pc, #340]	; (8005dbc <Batt_Protection_when_chargedischarge+0x18c>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c70:	4853      	ldr	r0, [pc, #332]	; (8005dc0 <Batt_Protection_when_chargedischarge+0x190>)
 8005c72:	f003 fa01 	bl	8009078 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
			T_trip_cycle=0;
		if(T_I_Over_trip_cycle<0)
			T_I_Over_trip_cycle=0;
	}
}
 8005c76:	f000 be25 	b.w	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
	else if(Pack_SOC >= SOC_Over_Set-10 && flag_trip_SOCOverCharge==OFF) {
 8005c7a:	4b52      	ldr	r3, [pc, #328]	; (8005dc4 <Batt_Protection_when_chargedischarge+0x194>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4952      	ldr	r1, [pc, #328]	; (8005dc8 <Batt_Protection_when_chargedischarge+0x198>)
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fa ffe1 	bl	8000c48 <__aeabi_fsub>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4b50      	ldr	r3, [pc, #320]	; (8005dcc <Batt_Protection_when_chargedischarge+0x19c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fb fa8b 	bl	80011ac <__aeabi_fcmple>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01f      	beq.n	8005cdc <Batt_Protection_when_chargedischarge+0xac>
 8005c9c:	4b4c      	ldr	r3, [pc, #304]	; (8005dd0 <Batt_Protection_when_chargedischarge+0x1a0>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11b      	bne.n	8005cdc <Batt_Protection_when_chargedischarge+0xac>
		fault_code=7;
 8005ca4:	4b44      	ldr	r3, [pc, #272]	; (8005db8 <Batt_Protection_when_chargedischarge+0x188>)
 8005ca6:	2207      	movs	r2, #7
 8005ca8:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC>SOC_Over_Set){
 8005caa:	4b48      	ldr	r3, [pc, #288]	; (8005dcc <Batt_Protection_when_chargedischarge+0x19c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a45      	ldr	r2, [pc, #276]	; (8005dc4 <Batt_Protection_when_chargedischarge+0x194>)
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fb fa8d 	bl	80011d4 <__aeabi_fcmpgt>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8601 	beq.w	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 8005cc2:	f7fb fd77 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_SOCOverCharge=ON;
 8005cc6:	4b42      	ldr	r3, [pc, #264]	; (8005dd0 <Batt_Protection_when_chargedischarge+0x1a0>)
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cd2:	483b      	ldr	r0, [pc, #236]	; (8005dc0 <Batt_Protection_when_chargedischarge+0x190>)
 8005cd4:	f003 f9d0 	bl	8009078 <HAL_GPIO_WritePin>
		if(Pack_SOC>SOC_Over_Set){
 8005cd8:	f000 bdf4 	b.w	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
		else if(VBATT<V_Under_Set && flag_trip_undervoltage==OFF ) {   //Indikasi terjadi Undervoltage
 8005cdc:	4b33      	ldr	r3, [pc, #204]	; (8005dac <Batt_Protection_when_chargedischarge+0x17c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a3c      	ldr	r2, [pc, #240]	; (8005dd4 <Batt_Protection_when_chargedischarge+0x1a4>)
 8005ce2:	6812      	ldr	r2, [r2, #0]
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fb fa56 	bl	8001198 <__aeabi_fcmplt>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d07c      	beq.n	8005dec <Batt_Protection_when_chargedischarge+0x1bc>
 8005cf2:	4b39      	ldr	r3, [pc, #228]	; (8005dd8 <Batt_Protection_when_chargedischarge+0x1a8>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d178      	bne.n	8005dec <Batt_Protection_when_chargedischarge+0x1bc>
			fault_code=1;
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <Batt_Protection_when_chargedischarge+0x188>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
			T_Under_trip=TMS/(1-(VBATT/V_Under_Set));
 8005d00:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <Batt_Protection_when_chargedischarge+0x1ac>)
 8005d02:	681c      	ldr	r4, [r3, #0]
 8005d04:	4b29      	ldr	r3, [pc, #164]	; (8005dac <Batt_Protection_when_chargedischarge+0x17c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a32      	ldr	r2, [pc, #200]	; (8005dd4 <Batt_Protection_when_chargedischarge+0x1a4>)
 8005d0a:	6812      	ldr	r2, [r2, #0]
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fb f958 	bl	8000fc4 <__aeabi_fdiv>
 8005d14:	4603      	mov	r3, r0
 8005d16:	4619      	mov	r1, r3
 8005d18:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005d1c:	f7fa ff94 	bl	8000c48 <__aeabi_fsub>
 8005d20:	4603      	mov	r3, r0
 8005d22:	4619      	mov	r1, r3
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7fb f94d 	bl	8000fc4 <__aeabi_fdiv>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4b2c      	ldr	r3, [pc, #176]	; (8005de0 <Batt_Protection_when_chargedischarge+0x1b0>)
 8005d30:	601a      	str	r2, [r3, #0]
			T_trip_cycle+=0.001;
 8005d32:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <Batt_Protection_when_chargedischarge+0x1b4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fa fbe2 	bl	8000500 <__aeabi_f2d>
 8005d3c:	a318      	add	r3, pc, #96	; (adr r3, 8005da0 <Batt_Protection_when_chargedischarge+0x170>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fa7f 	bl	8000244 <__adddf3>
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f7fa ff27 	bl	8000ba0 <__aeabi_d2f>
 8005d52:	4603      	mov	r3, r0
 8005d54:	4a23      	ldr	r2, [pc, #140]	; (8005de4 <Batt_Protection_when_chargedischarge+0x1b4>)
 8005d56:	6013      	str	r3, [r2, #0]
			if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8005d58:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <Batt_Protection_when_chargedischarge+0x1b4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <Batt_Protection_when_chargedischarge+0x1b0>)
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	4611      	mov	r1, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fb fa36 	bl	80011d4 <__aeabi_fcmpgt>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 85a7 	beq.w	80068be <Batt_Protection_when_chargedischarge+0xc8e>
 8005d70:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <Batt_Protection_when_chargedischarge+0x1a8>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f040 85a2 	bne.w	80068be <Batt_Protection_when_chargedischarge+0xc8e>
				Batt_Open_Mode();
 8005d7a:	f7fb fd1b 	bl	80017b4 <Batt_Open_Mode>
				T_trip_cycle=T_Under_trip;
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <Batt_Protection_when_chargedischarge+0x1b0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <Batt_Protection_when_chargedischarge+0x1b4>)
 8005d84:	6013      	str	r3, [r2, #0]
				flag_trip_undervoltage=ON;
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <Batt_Protection_when_chargedischarge+0x1a8>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GATE_MOS_GPIO_Port, GATE_MOS_Pin, GPIO_PIN_RESET);
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d92:	4815      	ldr	r0, [pc, #84]	; (8005de8 <Batt_Protection_when_chargedischarge+0x1b8>)
 8005d94:	f003 f970 	bl	8009078 <HAL_GPIO_WritePin>
			if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 8005d98:	f000 bd91 	b.w	80068be <Batt_Protection_when_chargedischarge+0xc8e>
 8005d9c:	f3af 8000 	nop.w
 8005da0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005da4:	3f50624d 	.word	0x3f50624d
 8005da8:	20000280 	.word	0x20000280
 8005dac:	2000027c 	.word	0x2000027c
 8005db0:	20000284 	.word	0x20000284
 8005db4:	20000288 	.word	0x20000288
 8005db8:	200002f8 	.word	0x200002f8
 8005dbc:	20000310 	.word	0x20000310
 8005dc0:	40011000 	.word	0x40011000
 8005dc4:	2000005c 	.word	0x2000005c
 8005dc8:	41200000 	.word	0x41200000
 8005dcc:	2000031c 	.word	0x2000031c
 8005dd0:	2000030b 	.word	0x2000030b
 8005dd4:	20000060 	.word	0x20000060
 8005dd8:	2000030c 	.word	0x2000030c
 8005ddc:	2000006c 	.word	0x2000006c
 8005de0:	20000a7c 	.word	0x20000a7c
 8005de4:	20000a88 	.word	0x20000a88
 8005de8:	40010800 	.word	0x40010800
		else if((fabs(IBATT)-I_Over_Set_Charge)>0 && flag_trip_overcurrentcharge==OFF) {  //Indikasi terjadi Over Current
 8005dec:	4b9c      	ldr	r3, [pc, #624]	; (8006060 <Batt_Protection_when_chargedischarge+0x430>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa fb83 	bl	8000500 <__aeabi_f2d>
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	460d      	mov	r5, r1
 8005dfe:	4b99      	ldr	r3, [pc, #612]	; (8006064 <Batt_Protection_when_chargedischarge+0x434>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fa fb7c 	bl	8000500 <__aeabi_f2d>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	f7fa fa16 	bl	8000240 <__aeabi_dsub>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 0200 	mov.w	r2, #0
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	f7fa fe54 	bl	8000ad0 <__aeabi_dcmpgt>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 8138 	beq.w	80060a0 <Batt_Protection_when_chargedischarge+0x470>
 8005e30:	4b8d      	ldr	r3, [pc, #564]	; (8006068 <Batt_Protection_when_chargedischarge+0x438>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f040 8133 	bne.w	80060a0 <Batt_Protection_when_chargedischarge+0x470>
			fault_code=10;
 8005e3a:	4b8c      	ldr	r3, [pc, #560]	; (800606c <Batt_Protection_when_chargedischarge+0x43c>)
 8005e3c:	220a      	movs	r2, #10
 8005e3e:	701a      	strb	r2, [r3, #0]
			T_I_Over_trip=8/(((IBATT/6.9)*(IBATT/6.9))-1);
 8005e40:	4b87      	ldr	r3, [pc, #540]	; (8006060 <Batt_Protection_when_chargedischarge+0x430>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa fb5b 	bl	8000500 <__aeabi_f2d>
 8005e4a:	a381      	add	r3, pc, #516	; (adr r3, 8006050 <Batt_Protection_when_chargedischarge+0x420>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa fcd8 	bl	8000804 <__aeabi_ddiv>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4614      	mov	r4, r2
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	4b80      	ldr	r3, [pc, #512]	; (8006060 <Batt_Protection_when_chargedischarge+0x430>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fa fb4d 	bl	8000500 <__aeabi_f2d>
 8005e66:	a37a      	add	r3, pc, #488	; (adr r3, 8006050 <Batt_Protection_when_chargedischarge+0x420>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f7fa fcca 	bl	8000804 <__aeabi_ddiv>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	f7fa fb9a 	bl	80005b0 <__aeabi_dmul>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4610      	mov	r0, r2
 8005e82:	4619      	mov	r1, r3
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	4b79      	ldr	r3, [pc, #484]	; (8006070 <Batt_Protection_when_chargedischarge+0x440>)
 8005e8a:	f7fa f9d9 	bl	8000240 <__aeabi_dsub>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	4977      	ldr	r1, [pc, #476]	; (8006074 <Batt_Protection_when_chargedischarge+0x444>)
 8005e98:	f7fa fcb4 	bl	8000804 <__aeabi_ddiv>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	f7fa fe7c 	bl	8000ba0 <__aeabi_d2f>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	4a73      	ldr	r2, [pc, #460]	; (8006078 <Batt_Protection_when_chargedischarge+0x448>)
 8005eac:	6013      	str	r3, [r2, #0]
			T_I_Over_trip_cycle+=0.01;
 8005eae:	4b73      	ldr	r3, [pc, #460]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fa fb24 	bl	8000500 <__aeabi_f2d>
 8005eb8:	a367      	add	r3, pc, #412	; (adr r3, 8006058 <Batt_Protection_when_chargedischarge+0x428>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa f9c1 	bl	8000244 <__adddf3>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	f7fa fe69 	bl	8000ba0 <__aeabi_d2f>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4a6a      	ldr	r2, [pc, #424]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 8005ed2:	6013      	str	r3, [r2, #0]
			if(T_I_Over_trip_cycle>T_I_Over_trip && flag_trip_overcurrentcharge==OFF) {
 8005ed4:	4b69      	ldr	r3, [pc, #420]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a67      	ldr	r2, [pc, #412]	; (8006078 <Batt_Protection_when_chargedischarge+0x448>)
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fb f978 	bl	80011d4 <__aeabi_fcmpgt>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d012      	beq.n	8005f10 <Batt_Protection_when_chargedischarge+0x2e0>
 8005eea:	4b5f      	ldr	r3, [pc, #380]	; (8006068 <Batt_Protection_when_chargedischarge+0x438>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10e      	bne.n	8005f10 <Batt_Protection_when_chargedischarge+0x2e0>
				Batt_Open_Mode();
 8005ef2:	f7fb fc5f 	bl	80017b4 <Batt_Open_Mode>
				T_I_Over_trip_cycle=T_I_Over_trip;
 8005ef6:	4b60      	ldr	r3, [pc, #384]	; (8006078 <Batt_Protection_when_chargedischarge+0x448>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a60      	ldr	r2, [pc, #384]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 8005efc:	6013      	str	r3, [r2, #0]
				flag_trip_overcurrentcharge=ON;
 8005efe:	4b5a      	ldr	r3, [pc, #360]	; (8006068 <Batt_Protection_when_chargedischarge+0x438>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8005f04:	2200      	movs	r2, #0
 8005f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f0a:	485d      	ldr	r0, [pc, #372]	; (8006080 <Batt_Protection_when_chargedischarge+0x450>)
 8005f0c:	f003 f8b4 	bl	8009078 <HAL_GPIO_WritePin>
			if(flag_trip_overcurrentcharge==OFF) {
 8005f10:	4b55      	ldr	r3, [pc, #340]	; (8006068 <Batt_Protection_when_chargedischarge+0x438>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 84d4 	bne.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
				if(T_I_Over_trip-T_I_Over_trip_cycle>15) {
 8005f1a:	4b57      	ldr	r3, [pc, #348]	; (8006078 <Batt_Protection_when_chargedischarge+0x448>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a57      	ldr	r2, [pc, #348]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	4611      	mov	r1, r2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fa fe8f 	bl	8000c48 <__aeabi_fsub>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4955      	ldr	r1, [pc, #340]	; (8006084 <Batt_Protection_when_chargedischarge+0x454>)
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fb f950 	bl	80011d4 <__aeabi_fcmpgt>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d019      	beq.n	8005f6e <Batt_Protection_when_chargedischarge+0x33e>
					if((test_tim2%1000)==0) {
 8005f3a:	4b53      	ldr	r3, [pc, #332]	; (8006088 <Batt_Protection_when_chargedischarge+0x458>)
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	4b53      	ldr	r3, [pc, #332]	; (800608c <Batt_Protection_when_chargedischarge+0x45c>)
 8005f40:	fb83 1302 	smull	r1, r3, r3, r2
 8005f44:	1199      	asrs	r1, r3, #6
 8005f46:	17d3      	asrs	r3, r2, #31
 8005f48:	1acb      	subs	r3, r1, r3
 8005f4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f040 84b4 	bne.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
						BUZZ_Toggle;
 8005f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f5e:	4848      	ldr	r0, [pc, #288]	; (8006080 <Batt_Protection_when_chargedischarge+0x450>)
 8005f60:	f003 f8a2 	bl	80090a8 <HAL_GPIO_TogglePin>
						test_tim2=0;
 8005f64:	4b48      	ldr	r3, [pc, #288]	; (8006088 <Batt_Protection_when_chargedischarge+0x458>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
			if(flag_trip_overcurrentcharge==OFF) {
 8005f6a:	f000 bcaa 	b.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
				else if(T_I_Over_trip-T_I_Over_trip_cycle>10) {
 8005f6e:	4b42      	ldr	r3, [pc, #264]	; (8006078 <Batt_Protection_when_chargedischarge+0x448>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a42      	ldr	r2, [pc, #264]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fa fe65 	bl	8000c48 <__aeabi_fsub>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4943      	ldr	r1, [pc, #268]	; (8006090 <Batt_Protection_when_chargedischarge+0x460>)
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fb f926 	bl	80011d4 <__aeabi_fcmpgt>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d018      	beq.n	8005fc0 <Batt_Protection_when_chargedischarge+0x390>
					if((test_tim2%100)==0) {
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <Batt_Protection_when_chargedischarge+0x458>)
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	4b40      	ldr	r3, [pc, #256]	; (8006094 <Batt_Protection_when_chargedischarge+0x464>)
 8005f94:	fb83 1302 	smull	r1, r3, r3, r2
 8005f98:	1159      	asrs	r1, r3, #5
 8005f9a:	17d3      	asrs	r3, r2, #31
 8005f9c:	1acb      	subs	r3, r1, r3
 8005f9e:	2164      	movs	r1, #100	; 0x64
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 848b 	bne.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
						BUZZ_Toggle;
 8005fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fb0:	4833      	ldr	r0, [pc, #204]	; (8006080 <Batt_Protection_when_chargedischarge+0x450>)
 8005fb2:	f003 f879 	bl	80090a8 <HAL_GPIO_TogglePin>
						test_tim2=0;
 8005fb6:	4b34      	ldr	r3, [pc, #208]	; (8006088 <Batt_Protection_when_chargedischarge+0x458>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
			if(flag_trip_overcurrentcharge==OFF) {
 8005fbc:	f000 bc81 	b.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
				else if(T_I_Over_trip-T_I_Over_trip_cycle>3) {
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <Batt_Protection_when_chargedischarge+0x448>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2d      	ldr	r2, [pc, #180]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fa fe3c 	bl	8000c48 <__aeabi_fsub>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	4931      	ldr	r1, [pc, #196]	; (8006098 <Batt_Protection_when_chargedischarge+0x468>)
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fb f8fd 	bl	80011d4 <__aeabi_fcmpgt>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d019      	beq.n	8006014 <Batt_Protection_when_chargedischarge+0x3e4>
					if((test_tim2%10)==0) {
 8005fe0:	4b29      	ldr	r3, [pc, #164]	; (8006088 <Batt_Protection_when_chargedischarge+0x458>)
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	; (800609c <Batt_Protection_when_chargedischarge+0x46c>)
 8005fe6:	fb83 2301 	smull	r2, r3, r3, r1
 8005fea:	109a      	asrs	r2, r3, #2
 8005fec:	17cb      	asrs	r3, r1, #31
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	1aca      	subs	r2, r1, r3
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	f040 8461 	bne.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
						BUZZ_Toggle;
 8006000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006004:	481e      	ldr	r0, [pc, #120]	; (8006080 <Batt_Protection_when_chargedischarge+0x450>)
 8006006:	f003 f84f 	bl	80090a8 <HAL_GPIO_TogglePin>
						test_tim2=0;
 800600a:	4b1f      	ldr	r3, [pc, #124]	; (8006088 <Batt_Protection_when_chargedischarge+0x458>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
			if(flag_trip_overcurrentcharge==OFF) {
 8006010:	f000 bc57 	b.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
				else if(T_I_Over_trip-T_I_Over_trip_cycle>1) {
 8006014:	4b18      	ldr	r3, [pc, #96]	; (8006078 <Batt_Protection_when_chargedischarge+0x448>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a18      	ldr	r2, [pc, #96]	; (800607c <Batt_Protection_when_chargedischarge+0x44c>)
 800601a:	6812      	ldr	r2, [r2, #0]
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f7fa fe12 	bl	8000c48 <__aeabi_fsub>
 8006024:	4603      	mov	r3, r0
 8006026:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800602a:	4618      	mov	r0, r3
 800602c:	f7fb f8d2 	bl	80011d4 <__aeabi_fcmpgt>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <Batt_Protection_when_chargedischarge+0x40a>
			if(flag_trip_overcurrentcharge==OFF) {
 8006036:	f000 bc44 	b.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
					HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800603a:	2201      	movs	r2, #1
 800603c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006040:	480f      	ldr	r0, [pc, #60]	; (8006080 <Batt_Protection_when_chargedischarge+0x450>)
 8006042:	f003 f819 	bl	8009078 <HAL_GPIO_WritePin>
			if(flag_trip_overcurrentcharge==OFF) {
 8006046:	f000 bc3c 	b.w	80068c2 <Batt_Protection_when_chargedischarge+0xc92>
 800604a:	bf00      	nop
 800604c:	f3af 8000 	nop.w
 8006050:	9999999a 	.word	0x9999999a
 8006054:	401b9999 	.word	0x401b9999
 8006058:	47ae147b 	.word	0x47ae147b
 800605c:	3f847ae1 	.word	0x3f847ae1
 8006060:	20000280 	.word	0x20000280
 8006064:	2000004c 	.word	0x2000004c
 8006068:	2000030f 	.word	0x2000030f
 800606c:	200002f8 	.word	0x200002f8
 8006070:	3ff00000 	.word	0x3ff00000
 8006074:	40200000 	.word	0x40200000
 8006078:	200002fc 	.word	0x200002fc
 800607c:	20000300 	.word	0x20000300
 8006080:	40011000 	.word	0x40011000
 8006084:	41700000 	.word	0x41700000
 8006088:	20000304 	.word	0x20000304
 800608c:	10624dd3 	.word	0x10624dd3
 8006090:	41200000 	.word	0x41200000
 8006094:	51eb851f 	.word	0x51eb851f
 8006098:	40400000 	.word	0x40400000
 800609c:	66666667 	.word	0x66666667
	else if(((Suhu_T1>Chg_OverTemp)||(Suhu_T2>Chg_OverTemp)||(Suhu_T3>Chg_OverTemp)||(Suhu_T4>Chg_OverTemp)) && flag_trip_overtemperature==OFF) {
 80060a0:	4b9a      	ldr	r3, [pc, #616]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a9a      	ldr	r2, [pc, #616]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	4611      	mov	r1, r2
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fb f892 	bl	80011d4 <__aeabi_fcmpgt>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d121      	bne.n	80060fa <Batt_Protection_when_chargedischarge+0x4ca>
 80060b6:	4b97      	ldr	r3, [pc, #604]	; (8006314 <Batt_Protection_when_chargedischarge+0x6e4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a95      	ldr	r2, [pc, #596]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	4611      	mov	r1, r2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fb f887 	bl	80011d4 <__aeabi_fcmpgt>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d116      	bne.n	80060fa <Batt_Protection_when_chargedischarge+0x4ca>
 80060cc:	4b92      	ldr	r3, [pc, #584]	; (8006318 <Batt_Protection_when_chargedischarge+0x6e8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a8f      	ldr	r2, [pc, #572]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	4611      	mov	r1, r2
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fb f87c 	bl	80011d4 <__aeabi_fcmpgt>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <Batt_Protection_when_chargedischarge+0x4ca>
 80060e2:	4b8e      	ldr	r3, [pc, #568]	; (800631c <Batt_Protection_when_chargedischarge+0x6ec>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a8a      	ldr	r2, [pc, #552]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 80060e8:	6812      	ldr	r2, [r2, #0]
 80060ea:	4611      	mov	r1, r2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fb f871 	bl	80011d4 <__aeabi_fcmpgt>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 811f 	beq.w	8006338 <Batt_Protection_when_chargedischarge+0x708>
 80060fa:	4b89      	ldr	r3, [pc, #548]	; (8006320 <Batt_Protection_when_chargedischarge+0x6f0>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f040 811a 	bne.w	8006338 <Batt_Protection_when_chargedischarge+0x708>
		fault_code=3;
 8006104:	4b87      	ldr	r3, [pc, #540]	; (8006324 <Batt_Protection_when_chargedischarge+0x6f4>)
 8006106:	2203      	movs	r2, #3
 8006108:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 800610a:	4b80      	ldr	r3, [pc, #512]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a80      	ldr	r2, [pc, #512]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006110:	6812      	ldr	r2, [r2, #0]
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f7fb f85d 	bl	80011d4 <__aeabi_fcmpgt>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d02a      	beq.n	8006176 <Batt_Protection_when_chargedischarge+0x546>
 8006120:	4b7b      	ldr	r3, [pc, #492]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006128:	4618      	mov	r0, r3
 800612a:	f7fa fd8f 	bl	8000c4c <__addsf3>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	4b76      	ldr	r3, [pc, #472]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7fb f841 	bl	80011c0 <__aeabi_fcmpge>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d018      	beq.n	8006176 <Batt_Protection_when_chargedischarge+0x546>
			if((test_tim2%1000)==0) {
 8006144:	4b78      	ldr	r3, [pc, #480]	; (8006328 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b78      	ldr	r3, [pc, #480]	; (800632c <Batt_Protection_when_chargedischarge+0x6fc>)
 800614a:	fb83 1302 	smull	r1, r3, r3, r2
 800614e:	1199      	asrs	r1, r3, #6
 8006150:	17d3      	asrs	r3, r2, #31
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 80d2 	bne.w	8006308 <Batt_Protection_when_chargedischarge+0x6d8>
				BUZZ_Toggle;
 8006164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006168:	4871      	ldr	r0, [pc, #452]	; (8006330 <Batt_Protection_when_chargedischarge+0x700>)
 800616a:	f002 ff9d 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800616e:	4b6e      	ldr	r3, [pc, #440]	; (8006328 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 8006174:	e0c8      	b.n	8006308 <Batt_Protection_when_chargedischarge+0x6d8>
		else if(Suhu_T1>Chg_OverTemp+1 && Suhu_T1<=Chg_OverTemp+2){
 8006176:	4b66      	ldr	r3, [pc, #408]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800617e:	4618      	mov	r0, r3
 8006180:	f7fa fd64 	bl	8000c4c <__addsf3>
 8006184:	4603      	mov	r3, r0
 8006186:	461a      	mov	r2, r3
 8006188:	4b60      	ldr	r3, [pc, #384]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fb f802 	bl	8001198 <__aeabi_fcmplt>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d02a      	beq.n	80061f0 <Batt_Protection_when_chargedischarge+0x5c0>
 800619a:	4b5d      	ldr	r3, [pc, #372]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa fd52 	bl	8000c4c <__addsf3>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	4b57      	ldr	r3, [pc, #348]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fb f804 	bl	80011c0 <__aeabi_fcmpge>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d018      	beq.n	80061f0 <Batt_Protection_when_chargedischarge+0x5c0>
			if((test_tim2%500)==0){
 80061be:	4b5a      	ldr	r3, [pc, #360]	; (8006328 <Batt_Protection_when_chargedischarge+0x6f8>)
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b5a      	ldr	r3, [pc, #360]	; (800632c <Batt_Protection_when_chargedischarge+0x6fc>)
 80061c4:	fb83 1302 	smull	r1, r3, r3, r2
 80061c8:	1159      	asrs	r1, r3, #5
 80061ca:	17d3      	asrs	r3, r2, #31
 80061cc:	1acb      	subs	r3, r1, r3
 80061ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 8095 	bne.w	8006308 <Batt_Protection_when_chargedischarge+0x6d8>
				BUZZ_Toggle;
 80061de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061e2:	4853      	ldr	r0, [pc, #332]	; (8006330 <Batt_Protection_when_chargedischarge+0x700>)
 80061e4:	f002 ff60 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80061e8:	4b4f      	ldr	r3, [pc, #316]	; (8006328 <Batt_Protection_when_chargedischarge+0x6f8>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80061ee:	e08b      	b.n	8006308 <Batt_Protection_when_chargedischarge+0x6d8>
		else if(Suhu_T1>Chg_OverTemp+2 && Suhu_T1<=Chg_OverTemp+3){
 80061f0:	4b47      	ldr	r3, [pc, #284]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fa fd27 	bl	8000c4c <__addsf3>
 80061fe:	4603      	mov	r3, r0
 8006200:	461a      	mov	r2, r3
 8006202:	4b42      	ldr	r3, [pc, #264]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7fa ffc5 	bl	8001198 <__aeabi_fcmplt>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d028      	beq.n	8006266 <Batt_Protection_when_chargedischarge+0x636>
 8006214:	4b3e      	ldr	r3, [pc, #248]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4946      	ldr	r1, [pc, #280]	; (8006334 <Batt_Protection_when_chargedischarge+0x704>)
 800621a:	4618      	mov	r0, r3
 800621c:	f7fa fd16 	bl	8000c4c <__addsf3>
 8006220:	4603      	mov	r3, r0
 8006222:	461a      	mov	r2, r3
 8006224:	4b39      	ldr	r3, [pc, #228]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f7fa ffc8 	bl	80011c0 <__aeabi_fcmpge>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d017      	beq.n	8006266 <Batt_Protection_when_chargedischarge+0x636>
			if((test_tim2%500)==0){
 8006236:	4b3c      	ldr	r3, [pc, #240]	; (8006328 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4b3c      	ldr	r3, [pc, #240]	; (800632c <Batt_Protection_when_chargedischarge+0x6fc>)
 800623c:	fb83 1302 	smull	r1, r3, r3, r2
 8006240:	1159      	asrs	r1, r3, #5
 8006242:	17d3      	asrs	r3, r2, #31
 8006244:	1acb      	subs	r3, r1, r3
 8006246:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800624a:	fb01 f303 	mul.w	r3, r1, r3
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d159      	bne.n	8006308 <Batt_Protection_when_chargedischarge+0x6d8>
				BUZZ_Toggle;
 8006254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006258:	4835      	ldr	r0, [pc, #212]	; (8006330 <Batt_Protection_when_chargedischarge+0x700>)
 800625a:	f002 ff25 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 800625e:	4b32      	ldr	r3, [pc, #200]	; (8006328 <Batt_Protection_when_chargedischarge+0x6f8>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006264:	e050      	b.n	8006308 <Batt_Protection_when_chargedischarge+0x6d8>
		else if(Suhu_T1>Chg_OverTemp+3||Suhu_T2>Chg_OverTemp+3||Suhu_T3>Chg_OverTemp+3||Suhu_T4>Chg_OverTemp+3){
 8006266:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4932      	ldr	r1, [pc, #200]	; (8006334 <Batt_Protection_when_chargedischarge+0x704>)
 800626c:	4618      	mov	r0, r3
 800626e:	f7fa fced 	bl	8000c4c <__addsf3>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	4b25      	ldr	r3, [pc, #148]	; (800630c <Batt_Protection_when_chargedischarge+0x6dc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f7fa ff8b 	bl	8001198 <__aeabi_fcmplt>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d133      	bne.n	80062f0 <Batt_Protection_when_chargedischarge+0x6c0>
 8006288:	4b21      	ldr	r3, [pc, #132]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4929      	ldr	r1, [pc, #164]	; (8006334 <Batt_Protection_when_chargedischarge+0x704>)
 800628e:	4618      	mov	r0, r3
 8006290:	f7fa fcdc 	bl	8000c4c <__addsf3>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	4b1e      	ldr	r3, [pc, #120]	; (8006314 <Batt_Protection_when_chargedischarge+0x6e4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fa ff7a 	bl	8001198 <__aeabi_fcmplt>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d122      	bne.n	80062f0 <Batt_Protection_when_chargedischarge+0x6c0>
 80062aa:	4b19      	ldr	r3, [pc, #100]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4921      	ldr	r1, [pc, #132]	; (8006334 <Batt_Protection_when_chargedischarge+0x704>)
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fa fccb 	bl	8000c4c <__addsf3>
 80062b6:	4603      	mov	r3, r0
 80062b8:	461a      	mov	r2, r3
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <Batt_Protection_when_chargedischarge+0x6e8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f7fa ff69 	bl	8001198 <__aeabi_fcmplt>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d111      	bne.n	80062f0 <Batt_Protection_when_chargedischarge+0x6c0>
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <Batt_Protection_when_chargedischarge+0x6e0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4918      	ldr	r1, [pc, #96]	; (8006334 <Batt_Protection_when_chargedischarge+0x704>)
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fa fcba 	bl	8000c4c <__addsf3>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <Batt_Protection_when_chargedischarge+0x6ec>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4619      	mov	r1, r3
 80062e2:	4610      	mov	r0, r2
 80062e4:	f7fa ff58 	bl	8001198 <__aeabi_fcmplt>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d100      	bne.n	80062f0 <Batt_Protection_when_chargedischarge+0x6c0>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 80062ee:	e2e9      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 80062f0:	f7fb fa60 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_overtemperature=ON;
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <Batt_Protection_when_chargedischarge+0x6f0>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80062fa:	2200      	movs	r2, #0
 80062fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006300:	480b      	ldr	r0, [pc, #44]	; (8006330 <Batt_Protection_when_chargedischarge+0x700>)
 8006302:	f002 feb9 	bl	8009078 <HAL_GPIO_WritePin>
		if(Suhu_T1>Chg_OverTemp && Suhu_T1<=Chg_OverTemp+1) {
 8006306:	e2dd      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
 8006308:	e2dc      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
 800630a:	bf00      	nop
 800630c:	200002a8 	.word	0x200002a8
 8006310:	20000054 	.word	0x20000054
 8006314:	200002ac 	.word	0x200002ac
 8006318:	200002b0 	.word	0x200002b0
 800631c:	200002b4 	.word	0x200002b4
 8006320:	20000308 	.word	0x20000308
 8006324:	200002f8 	.word	0x200002f8
 8006328:	20000304 	.word	0x20000304
 800632c:	10624dd3 	.word	0x10624dd3
 8006330:	40011000 	.word	0x40011000
 8006334:	40400000 	.word	0x40400000
	else if((Suhu_T1-Temp_Under_Set<=10||Suhu_T2-Temp_Under_Set<=10||Suhu_T3-Temp_Under_Set<=10||Suhu_T4-Temp_Under_Set<=10) && flag_trip_undertemperature==OFF) {
 8006338:	4b96      	ldr	r3, [pc, #600]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a96      	ldr	r2, [pc, #600]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	4611      	mov	r1, r2
 8006342:	4618      	mov	r0, r3
 8006344:	f7fa fc80 	bl	8000c48 <__aeabi_fsub>
 8006348:	4603      	mov	r3, r0
 800634a:	4994      	ldr	r1, [pc, #592]	; (800659c <Batt_Protection_when_chargedischarge+0x96c>)
 800634c:	4618      	mov	r0, r3
 800634e:	f7fa ff2d 	bl	80011ac <__aeabi_fcmple>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d130      	bne.n	80063ba <Batt_Protection_when_chargedischarge+0x78a>
 8006358:	4b91      	ldr	r3, [pc, #580]	; (80065a0 <Batt_Protection_when_chargedischarge+0x970>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a8e      	ldr	r2, [pc, #568]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f7fa fc70 	bl	8000c48 <__aeabi_fsub>
 8006368:	4603      	mov	r3, r0
 800636a:	498c      	ldr	r1, [pc, #560]	; (800659c <Batt_Protection_when_chargedischarge+0x96c>)
 800636c:	4618      	mov	r0, r3
 800636e:	f7fa ff1d 	bl	80011ac <__aeabi_fcmple>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d120      	bne.n	80063ba <Batt_Protection_when_chargedischarge+0x78a>
 8006378:	4b8a      	ldr	r3, [pc, #552]	; (80065a4 <Batt_Protection_when_chargedischarge+0x974>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a86      	ldr	r2, [pc, #536]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	4611      	mov	r1, r2
 8006382:	4618      	mov	r0, r3
 8006384:	f7fa fc60 	bl	8000c48 <__aeabi_fsub>
 8006388:	4603      	mov	r3, r0
 800638a:	4984      	ldr	r1, [pc, #528]	; (800659c <Batt_Protection_when_chargedischarge+0x96c>)
 800638c:	4618      	mov	r0, r3
 800638e:	f7fa ff0d 	bl	80011ac <__aeabi_fcmple>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d110      	bne.n	80063ba <Batt_Protection_when_chargedischarge+0x78a>
 8006398:	4b83      	ldr	r3, [pc, #524]	; (80065a8 <Batt_Protection_when_chargedischarge+0x978>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a7e      	ldr	r2, [pc, #504]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	4611      	mov	r1, r2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fa fc50 	bl	8000c48 <__aeabi_fsub>
 80063a8:	4603      	mov	r3, r0
 80063aa:	497c      	ldr	r1, [pc, #496]	; (800659c <Batt_Protection_when_chargedischarge+0x96c>)
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fa fefd 	bl	80011ac <__aeabi_fcmple>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8105 	beq.w	80065c4 <Batt_Protection_when_chargedischarge+0x994>
 80063ba:	4b7c      	ldr	r3, [pc, #496]	; (80065ac <Batt_Protection_when_chargedischarge+0x97c>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 8100 	bne.w	80065c4 <Batt_Protection_when_chargedischarge+0x994>
		fault_code=4;
 80063c4:	4b7a      	ldr	r3, [pc, #488]	; (80065b0 <Batt_Protection_when_chargedischarge+0x980>)
 80063c6:	2204      	movs	r2, #4
 80063c8:	701a      	strb	r2, [r3, #0]
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 80063ca:	4b73      	ldr	r3, [pc, #460]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4973      	ldr	r1, [pc, #460]	; (800659c <Batt_Protection_when_chargedischarge+0x96c>)
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fa fc3b 	bl	8000c4c <__addsf3>
 80063d6:	4603      	mov	r3, r0
 80063d8:	461a      	mov	r2, r3
 80063da:	4b6e      	ldr	r3, [pc, #440]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4619      	mov	r1, r3
 80063e0:	4610      	mov	r0, r2
 80063e2:	f7fa feed 	bl	80011c0 <__aeabi_fcmpge>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d029      	beq.n	8006440 <Batt_Protection_when_chargedischarge+0x810>
 80063ec:	4b6a      	ldr	r3, [pc, #424]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4970      	ldr	r1, [pc, #448]	; (80065b4 <Batt_Protection_when_chargedischarge+0x984>)
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fa fc2a 	bl	8000c4c <__addsf3>
 80063f8:	4603      	mov	r3, r0
 80063fa:	461a      	mov	r2, r3
 80063fc:	4b65      	ldr	r3, [pc, #404]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f7fa fec8 	bl	8001198 <__aeabi_fcmplt>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d018      	beq.n	8006440 <Batt_Protection_when_chargedischarge+0x810>
			if((test_tim2%1000)==0) {
 800640e:	4b6a      	ldr	r3, [pc, #424]	; (80065b8 <Batt_Protection_when_chargedischarge+0x988>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b6a      	ldr	r3, [pc, #424]	; (80065bc <Batt_Protection_when_chargedischarge+0x98c>)
 8006414:	fb83 1302 	smull	r1, r3, r3, r2
 8006418:	1199      	asrs	r1, r3, #6
 800641a:	17d3      	asrs	r3, r2, #31
 800641c:	1acb      	subs	r3, r1, r3
 800641e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 80b2 	bne.w	8006592 <Batt_Protection_when_chargedischarge+0x962>
				BUZZ_Toggle;
 800642e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006432:	4863      	ldr	r0, [pc, #396]	; (80065c0 <Batt_Protection_when_chargedischarge+0x990>)
 8006434:	f002 fe38 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006438:	4b5f      	ldr	r3, [pc, #380]	; (80065b8 <Batt_Protection_when_chargedischarge+0x988>)
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0) {
 800643e:	e0a8      	b.n	8006592 <Batt_Protection_when_chargedischarge+0x962>
		else if(Suhu_T1<=Temp_Under_Set+5 && Suhu_T1>Temp_Under_Set+2) {
 8006440:	4b55      	ldr	r3, [pc, #340]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	495b      	ldr	r1, [pc, #364]	; (80065b4 <Batt_Protection_when_chargedischarge+0x984>)
 8006446:	4618      	mov	r0, r3
 8006448:	f7fa fc00 	bl	8000c4c <__addsf3>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	4b50      	ldr	r3, [pc, #320]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f7fa feb2 	bl	80011c0 <__aeabi_fcmpge>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d029      	beq.n	80064b6 <Batt_Protection_when_chargedischarge+0x886>
 8006462:	4b4d      	ldr	r3, [pc, #308]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800646a:	4618      	mov	r0, r3
 800646c:	f7fa fbee 	bl	8000c4c <__addsf3>
 8006470:	4603      	mov	r3, r0
 8006472:	461a      	mov	r2, r3
 8006474:	4b47      	ldr	r3, [pc, #284]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7fa fe8c 	bl	8001198 <__aeabi_fcmplt>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d017      	beq.n	80064b6 <Batt_Protection_when_chargedischarge+0x886>
			if((test_tim2%500)==0) {
 8006486:	4b4c      	ldr	r3, [pc, #304]	; (80065b8 <Batt_Protection_when_chargedischarge+0x988>)
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b4c      	ldr	r3, [pc, #304]	; (80065bc <Batt_Protection_when_chargedischarge+0x98c>)
 800648c:	fb83 1302 	smull	r1, r3, r3, r2
 8006490:	1159      	asrs	r1, r3, #5
 8006492:	17d3      	asrs	r3, r2, #31
 8006494:	1acb      	subs	r3, r1, r3
 8006496:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800649a:	fb01 f303 	mul.w	r3, r1, r3
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d176      	bne.n	8006592 <Batt_Protection_when_chargedischarge+0x962>
				BUZZ_Toggle;
 80064a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064a8:	4845      	ldr	r0, [pc, #276]	; (80065c0 <Batt_Protection_when_chargedischarge+0x990>)
 80064aa:	f002 fdfd 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80064ae:	4b42      	ldr	r3, [pc, #264]	; (80065b8 <Batt_Protection_when_chargedischarge+0x988>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 80064b4:	e06d      	b.n	8006592 <Batt_Protection_when_chargedischarge+0x962>
		else if(Suhu_T1<Temp_Under_Set+2 && Suhu_T1>=Temp_Under_Set) {
 80064b6:	4b38      	ldr	r3, [pc, #224]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fa fbc4 	bl	8000c4c <__addsf3>
 80064c4:	4603      	mov	r3, r0
 80064c6:	461a      	mov	r2, r3
 80064c8:	4b32      	ldr	r3, [pc, #200]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f7fa fe80 	bl	80011d4 <__aeabi_fcmpgt>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d022      	beq.n	8006520 <Batt_Protection_when_chargedischarge+0x8f0>
 80064da:	4b2e      	ldr	r3, [pc, #184]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2e      	ldr	r2, [pc, #184]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	4611      	mov	r1, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fa fe6b 	bl	80011c0 <__aeabi_fcmpge>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d017      	beq.n	8006520 <Batt_Protection_when_chargedischarge+0x8f0>
			if((test_tim2%500)==0) {
 80064f0:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <Batt_Protection_when_chargedischarge+0x988>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b31      	ldr	r3, [pc, #196]	; (80065bc <Batt_Protection_when_chargedischarge+0x98c>)
 80064f6:	fb83 1302 	smull	r1, r3, r3, r2
 80064fa:	1159      	asrs	r1, r3, #5
 80064fc:	17d3      	asrs	r3, r2, #31
 80064fe:	1acb      	subs	r3, r1, r3
 8006500:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006504:	fb01 f303 	mul.w	r3, r1, r3
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d141      	bne.n	8006592 <Batt_Protection_when_chargedischarge+0x962>
				BUZZ_Toggle;
 800650e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006512:	482b      	ldr	r0, [pc, #172]	; (80065c0 <Batt_Protection_when_chargedischarge+0x990>)
 8006514:	f002 fdc8 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006518:	4b27      	ldr	r3, [pc, #156]	; (80065b8 <Batt_Protection_when_chargedischarge+0x988>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0) {
 800651e:	e038      	b.n	8006592 <Batt_Protection_when_chargedischarge+0x962>
		else if(Suhu_T1<Temp_Under_Set||Suhu_T2<Temp_Under_Set||Suhu_T3<Temp_Under_Set||Suhu_T4<Temp_Under_Set) {
 8006520:	4b1c      	ldr	r3, [pc, #112]	; (8006594 <Batt_Protection_when_chargedischarge+0x964>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f7fa fe34 	bl	8001198 <__aeabi_fcmplt>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d121      	bne.n	800657a <Batt_Protection_when_chargedischarge+0x94a>
 8006536:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <Batt_Protection_when_chargedischarge+0x970>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a17      	ldr	r2, [pc, #92]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	4611      	mov	r1, r2
 8006540:	4618      	mov	r0, r3
 8006542:	f7fa fe29 	bl	8001198 <__aeabi_fcmplt>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d116      	bne.n	800657a <Batt_Protection_when_chargedischarge+0x94a>
 800654c:	4b15      	ldr	r3, [pc, #84]	; (80065a4 <Batt_Protection_when_chargedischarge+0x974>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a11      	ldr	r2, [pc, #68]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa fe1e 	bl	8001198 <__aeabi_fcmplt>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10b      	bne.n	800657a <Batt_Protection_when_chargedischarge+0x94a>
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <Batt_Protection_when_chargedischarge+0x978>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <Batt_Protection_when_chargedischarge+0x968>)
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	4611      	mov	r1, r2
 800656c:	4618      	mov	r0, r3
 800656e:	f7fa fe13 	bl	8001198 <__aeabi_fcmplt>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d100      	bne.n	800657a <Batt_Protection_when_chargedischarge+0x94a>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006578:	e1a4      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 800657a:	f7fb f91b 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_undertemperature=ON;
 800657e:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <Batt_Protection_when_chargedischarge+0x97c>)
 8006580:	2201      	movs	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006584:	2200      	movs	r2, #0
 8006586:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800658a:	480d      	ldr	r0, [pc, #52]	; (80065c0 <Batt_Protection_when_chargedischarge+0x990>)
 800658c:	f002 fd74 	bl	8009078 <HAL_GPIO_WritePin>
		if(Suhu_T1<=Temp_Under_Set+10 && Suhu_T1>Temp_Under_Set+5) {
 8006590:	e198      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
 8006592:	e197      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
 8006594:	200002a8 	.word	0x200002a8
 8006598:	20000058 	.word	0x20000058
 800659c:	41200000 	.word	0x41200000
 80065a0:	200002ac 	.word	0x200002ac
 80065a4:	200002b0 	.word	0x200002b0
 80065a8:	200002b4 	.word	0x200002b4
 80065ac:	20000309 	.word	0x20000309
 80065b0:	200002f8 	.word	0x200002f8
 80065b4:	40a00000 	.word	0x40a00000
 80065b8:	20000304 	.word	0x20000304
 80065bc:	10624dd3 	.word	0x10624dd3
 80065c0:	40011000 	.word	0x40011000
	else if(Pack_SOC <= SOC_Under_Set+5 && flag_trip_SOCOverDischarge==OFF && BATT_State==STATE_DISCHARGE) {
 80065c4:	4b84      	ldr	r3, [pc, #528]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4984      	ldr	r1, [pc, #528]	; (80067dc <Batt_Protection_when_chargedischarge+0xbac>)
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fa fb3e 	bl	8000c4c <__addsf3>
 80065d0:	4603      	mov	r3, r0
 80065d2:	461a      	mov	r2, r3
 80065d4:	4b82      	ldr	r3, [pc, #520]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f7fa fdf0 	bl	80011c0 <__aeabi_fcmpge>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 80d1 	beq.w	800678a <Batt_Protection_when_chargedischarge+0xb5a>
 80065e8:	4b7e      	ldr	r3, [pc, #504]	; (80067e4 <Batt_Protection_when_chargedischarge+0xbb4>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 80cc 	bne.w	800678a <Batt_Protection_when_chargedischarge+0xb5a>
 80065f2:	4b7d      	ldr	r3, [pc, #500]	; (80067e8 <Batt_Protection_when_chargedischarge+0xbb8>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	f040 80c7 	bne.w	800678a <Batt_Protection_when_chargedischarge+0xb5a>
		fault_code=5;
 80065fc:	4b7b      	ldr	r3, [pc, #492]	; (80067ec <Batt_Protection_when_chargedischarge+0xbbc>)
 80065fe:	2205      	movs	r2, #5
 8006600:	701a      	strb	r2, [r3, #0]
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8006602:	4b75      	ldr	r3, [pc, #468]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4975      	ldr	r1, [pc, #468]	; (80067dc <Batt_Protection_when_chargedischarge+0xbac>)
 8006608:	4618      	mov	r0, r3
 800660a:	f7fa fb1f 	bl	8000c4c <__addsf3>
 800660e:	4603      	mov	r3, r0
 8006610:	461a      	mov	r2, r3
 8006612:	4b73      	ldr	r3, [pc, #460]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fa fdd1 	bl	80011c0 <__aeabi_fcmpge>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d029      	beq.n	8006678 <Batt_Protection_when_chargedischarge+0xa48>
 8006624:	4b6c      	ldr	r3, [pc, #432]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4971      	ldr	r1, [pc, #452]	; (80067f0 <Batt_Protection_when_chargedischarge+0xbc0>)
 800662a:	4618      	mov	r0, r3
 800662c:	f7fa fb0e 	bl	8000c4c <__addsf3>
 8006630:	4603      	mov	r3, r0
 8006632:	461a      	mov	r2, r3
 8006634:	4b6a      	ldr	r3, [pc, #424]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f7fa fdac 	bl	8001198 <__aeabi_fcmplt>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d018      	beq.n	8006678 <Batt_Protection_when_chargedischarge+0xa48>
			if((test_tim2%1000)==0){
 8006646:	4b6b      	ldr	r3, [pc, #428]	; (80067f4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b6b      	ldr	r3, [pc, #428]	; (80067f8 <Batt_Protection_when_chargedischarge+0xbc8>)
 800664c:	fb83 1302 	smull	r1, r3, r3, r2
 8006650:	1199      	asrs	r1, r3, #6
 8006652:	17d3      	asrs	r3, r2, #31
 8006654:	1acb      	subs	r3, r1, r3
 8006656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8091 	bne.w	8006788 <Batt_Protection_when_chargedischarge+0xb58>
				BUZZ_Toggle;
 8006666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800666a:	4864      	ldr	r0, [pc, #400]	; (80067fc <Batt_Protection_when_chargedischarge+0xbcc>)
 800666c:	f002 fd1c 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006670:	4b60      	ldr	r3, [pc, #384]	; (80067f4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
			if((test_tim2%1000)==0){
 8006676:	e087      	b.n	8006788 <Batt_Protection_when_chargedischarge+0xb58>
		else if(Pack_SOC <= SOC_Under_Set+3 && Pack_SOC>SOC_Under_Set+2){
 8006678:	4b57      	ldr	r3, [pc, #348]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	495c      	ldr	r1, [pc, #368]	; (80067f0 <Batt_Protection_when_chargedischarge+0xbc0>)
 800667e:	4618      	mov	r0, r3
 8006680:	f7fa fae4 	bl	8000c4c <__addsf3>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	4b55      	ldr	r3, [pc, #340]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fa fd96 	bl	80011c0 <__aeabi_fcmpge>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d029      	beq.n	80066ee <Batt_Protection_when_chargedischarge+0xabe>
 800669a:	4b4f      	ldr	r3, [pc, #316]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fa fad2 	bl	8000c4c <__addsf3>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	4b4c      	ldr	r3, [pc, #304]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f7fa fd70 	bl	8001198 <__aeabi_fcmplt>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d017      	beq.n	80066ee <Batt_Protection_when_chargedischarge+0xabe>
			if((test_tim2%500)==0){
 80066be:	4b4d      	ldr	r3, [pc, #308]	; (80067f4 <Batt_Protection_when_chargedischarge+0xbc4>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b4d      	ldr	r3, [pc, #308]	; (80067f8 <Batt_Protection_when_chargedischarge+0xbc8>)
 80066c4:	fb83 1302 	smull	r1, r3, r3, r2
 80066c8:	1159      	asrs	r1, r3, #5
 80066ca:	17d3      	asrs	r3, r2, #31
 80066cc:	1acb      	subs	r3, r1, r3
 80066ce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d155      	bne.n	8006788 <Batt_Protection_when_chargedischarge+0xb58>
				BUZZ_Toggle;
 80066dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066e0:	4846      	ldr	r0, [pc, #280]	; (80067fc <Batt_Protection_when_chargedischarge+0xbcc>)
 80066e2:	f002 fce1 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 80066e6:	4b43      	ldr	r3, [pc, #268]	; (80067f4 <Batt_Protection_when_chargedischarge+0xbc4>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 80066ec:	e04c      	b.n	8006788 <Batt_Protection_when_chargedischarge+0xb58>
		else if(Pack_SOC <= SOC_Under_Set+2 && Pack_SOC>SOC_Under_Set){
 80066ee:	4b3a      	ldr	r3, [pc, #232]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fa faa8 	bl	8000c4c <__addsf3>
 80066fc:	4603      	mov	r3, r0
 80066fe:	461a      	mov	r2, r3
 8006700:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	4610      	mov	r0, r2
 8006708:	f7fa fd5a 	bl	80011c0 <__aeabi_fcmpge>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d022      	beq.n	8006758 <Batt_Protection_when_chargedischarge+0xb28>
 8006712:	4b33      	ldr	r3, [pc, #204]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a30      	ldr	r2, [pc, #192]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f7fa fd59 	bl	80011d4 <__aeabi_fcmpgt>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <Batt_Protection_when_chargedischarge+0xb28>
			if((test_tim2%500)==0){
 8006728:	4b32      	ldr	r3, [pc, #200]	; (80067f4 <Batt_Protection_when_chargedischarge+0xbc4>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4b32      	ldr	r3, [pc, #200]	; (80067f8 <Batt_Protection_when_chargedischarge+0xbc8>)
 800672e:	fb83 1302 	smull	r1, r3, r3, r2
 8006732:	1159      	asrs	r1, r3, #5
 8006734:	17d3      	asrs	r3, r2, #31
 8006736:	1acb      	subs	r3, r1, r3
 8006738:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d120      	bne.n	8006788 <Batt_Protection_when_chargedischarge+0xb58>
				BUZZ_Toggle;
 8006746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800674a:	482c      	ldr	r0, [pc, #176]	; (80067fc <Batt_Protection_when_chargedischarge+0xbcc>)
 800674c:	f002 fcac 	bl	80090a8 <HAL_GPIO_TogglePin>
				test_tim2=0;
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <Batt_Protection_when_chargedischarge+0xbc4>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
			if((test_tim2%500)==0){
 8006756:	e017      	b.n	8006788 <Batt_Protection_when_chargedischarge+0xb58>
		else if(Pack_SOC <= SOC_Under_Set){
 8006758:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <Batt_Protection_when_chargedischarge+0xbb0>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <Batt_Protection_when_chargedischarge+0xba8>)
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	4611      	mov	r1, r2
 8006762:	4618      	mov	r0, r3
 8006764:	f7fa fd22 	bl	80011ac <__aeabi_fcmple>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d100      	bne.n	8006770 <Batt_Protection_when_chargedischarge+0xb40>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 800676e:	e0a9      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			Batt_Open_Mode();
 8006770:	f7fb f820 	bl	80017b4 <Batt_Open_Mode>
			flag_trip_SOCOverDischarge=ON;
 8006774:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <Batt_Protection_when_chargedischarge+0xbb4>)
 8006776:	2201      	movs	r2, #1
 8006778:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800677a:	2200      	movs	r2, #0
 800677c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006780:	481e      	ldr	r0, [pc, #120]	; (80067fc <Batt_Protection_when_chargedischarge+0xbcc>)
 8006782:	f002 fc79 	bl	8009078 <HAL_GPIO_WritePin>
		if(Pack_SOC <= SOC_Under_Set+5 && Pack_SOC>SOC_Under_Set+3){
 8006786:	e09d      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
 8006788:	e09c      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
	else if(persen_imbalance >= Persen_Imbalance_Set + 5)
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <Batt_Protection_when_chargedischarge+0xbd0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4913      	ldr	r1, [pc, #76]	; (80067dc <Batt_Protection_when_chargedischarge+0xbac>)
 8006790:	4618      	mov	r0, r3
 8006792:	f7fa fa5b 	bl	8000c4c <__addsf3>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	4b1a      	ldr	r3, [pc, #104]	; (8006804 <Batt_Protection_when_chargedischarge+0xbd4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7fa fd03 	bl	80011ac <__aeabi_fcmple>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d02f      	beq.n	800680c <Batt_Protection_when_chargedischarge+0xbdc>
		fault_code=6;
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <Batt_Protection_when_chargedischarge+0xbbc>)
 80067ae:	2206      	movs	r2, #6
 80067b0:	701a      	strb	r2, [r3, #0]
		if(persen_imbalance >= Persen_Imbalance_Set)
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <Batt_Protection_when_chargedischarge+0xbd4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a12      	ldr	r2, [pc, #72]	; (8006800 <Batt_Protection_when_chargedischarge+0xbd0>)
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	4611      	mov	r1, r2
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fa fcff 	bl	80011c0 <__aeabi_fcmpge>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d100      	bne.n	80067ca <Batt_Protection_when_chargedischarge+0xb9a>
}
 80067c8:	e07c      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			flag_trip_unbalance=ON;
 80067ca:	4b0f      	ldr	r3, [pc, #60]	; (8006808 <Batt_Protection_when_chargedischarge+0xbd8>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
			Batt_Open_Mode();
 80067d0:	f7fa fff0 	bl	80017b4 <Batt_Open_Mode>
}
 80067d4:	e076      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
 80067d6:	bf00      	nop
 80067d8:	20000754 	.word	0x20000754
 80067dc:	40a00000 	.word	0x40a00000
 80067e0:	2000031c 	.word	0x2000031c
 80067e4:	2000030a 	.word	0x2000030a
 80067e8:	200009d8 	.word	0x200009d8
 80067ec:	200002f8 	.word	0x200002f8
 80067f0:	40400000 	.word	0x40400000
 80067f4:	20000304 	.word	0x20000304
 80067f8:	10624dd3 	.word	0x10624dd3
 80067fc:	40011000 	.word	0x40011000
 8006800:	20000068 	.word	0x20000068
 8006804:	200002cc 	.word	0x200002cc
 8006808:	20000312 	.word	0x20000312
		if(fault_code!=0){
 800680c:	4b30      	ldr	r3, [pc, #192]	; (80068d0 <Batt_Protection_when_chargedischarge+0xca0>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d003      	beq.n	800681c <Batt_Protection_when_chargedischarge+0xbec>
			last_fault_code=fault_code;
 8006814:	4b2e      	ldr	r3, [pc, #184]	; (80068d0 <Batt_Protection_when_chargedischarge+0xca0>)
 8006816:	781a      	ldrb	r2, [r3, #0]
 8006818:	4b2e      	ldr	r3, [pc, #184]	; (80068d4 <Batt_Protection_when_chargedischarge+0xca4>)
 800681a:	701a      	strb	r2, [r3, #0]
		fault_code=0;
 800681c:	4b2c      	ldr	r3, [pc, #176]	; (80068d0 <Batt_Protection_when_chargedischarge+0xca0>)
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
		T_Under_trip=0;
 8006822:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <Batt_Protection_when_chargedischarge+0xca8>)
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	601a      	str	r2, [r3, #0]
		T_trip_cycle=T_trip_cycle-0.001;
 800682a:	4b2c      	ldr	r3, [pc, #176]	; (80068dc <Batt_Protection_when_chargedischarge+0xcac>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7f9 fe66 	bl	8000500 <__aeabi_f2d>
 8006834:	a324      	add	r3, pc, #144	; (adr r3, 80068c8 <Batt_Protection_when_chargedischarge+0xc98>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fd01 	bl	8000240 <__aeabi_dsub>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4610      	mov	r0, r2
 8006844:	4619      	mov	r1, r3
 8006846:	f7fa f9ab 	bl	8000ba0 <__aeabi_d2f>
 800684a:	4603      	mov	r3, r0
 800684c:	4a23      	ldr	r2, [pc, #140]	; (80068dc <Batt_Protection_when_chargedischarge+0xcac>)
 800684e:	6013      	str	r3, [r2, #0]
		T_I_Over_trip_cycle-=0.001;
 8006850:	4b23      	ldr	r3, [pc, #140]	; (80068e0 <Batt_Protection_when_chargedischarge+0xcb0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f7f9 fe53 	bl	8000500 <__aeabi_f2d>
 800685a:	a31b      	add	r3, pc, #108	; (adr r3, 80068c8 <Batt_Protection_when_chargedischarge+0xc98>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fcee 	bl	8000240 <__aeabi_dsub>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	f7fa f998 	bl	8000ba0 <__aeabi_d2f>
 8006870:	4603      	mov	r3, r0
 8006872:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <Batt_Protection_when_chargedischarge+0xcb0>)
 8006874:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006876:	2200      	movs	r2, #0
 8006878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800687c:	4819      	ldr	r0, [pc, #100]	; (80068e4 <Batt_Protection_when_chargedischarge+0xcb4>)
 800687e:	f002 fbfb 	bl	8009078 <HAL_GPIO_WritePin>
		if(T_trip_cycle<0)
 8006882:	4b16      	ldr	r3, [pc, #88]	; (80068dc <Batt_Protection_when_chargedischarge+0xcac>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f04f 0100 	mov.w	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f7fa fc84 	bl	8001198 <__aeabi_fcmplt>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <Batt_Protection_when_chargedischarge+0xc6e>
			T_trip_cycle=0;
 8006896:	4b11      	ldr	r3, [pc, #68]	; (80068dc <Batt_Protection_when_chargedischarge+0xcac>)
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	601a      	str	r2, [r3, #0]
		if(T_I_Over_trip_cycle<0)
 800689e:	4b10      	ldr	r3, [pc, #64]	; (80068e0 <Batt_Protection_when_chargedischarge+0xcb0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f04f 0100 	mov.w	r1, #0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fa fc76 	bl	8001198 <__aeabi_fcmplt>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d100      	bne.n	80068b4 <Batt_Protection_when_chargedischarge+0xc84>
}
 80068b2:	e007      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			T_I_Over_trip_cycle=0;
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <Batt_Protection_when_chargedischarge+0xcb0>)
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
}
 80068bc:	e002      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			if(T_trip_cycle>T_Under_trip && flag_trip_undervoltage==OFF) {
 80068be:	bf00      	nop
 80068c0:	e000      	b.n	80068c4 <Batt_Protection_when_chargedischarge+0xc94>
			if(flag_trip_overcurrentcharge==OFF) {
 80068c2:	bf00      	nop
}
 80068c4:	bf00      	nop
 80068c6:	bdb0      	pop	{r4, r5, r7, pc}
 80068c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80068cc:	3f50624d 	.word	0x3f50624d
 80068d0:	200002f8 	.word	0x200002f8
 80068d4:	200002f9 	.word	0x200002f9
 80068d8:	20000a7c 	.word	0x20000a7c
 80068dc:	20000a88 	.word	0x20000a88
 80068e0:	20000300 	.word	0x20000300
 80068e4:	40011000 	.word	0x40011000

080068e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80068e8:	b480      	push	{r7}
 80068ea:	af00      	add	r7, sp, #0
	return 1;
 80068ec:	2301      	movs	r3, #1
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <_kill>:

int _kill(int pid, int sig)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006900:	f007 fe86 	bl	800e610 <__errno>
 8006904:	4603      	mov	r3, r0
 8006906:	2216      	movs	r2, #22
 8006908:	601a      	str	r2, [r3, #0]
	return -1;
 800690a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <_exit>:

void _exit (int status)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800691e:	f04f 31ff 	mov.w	r1, #4294967295
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff ffe7 	bl	80068f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006928:	e7fe      	b.n	8006928 <_exit+0x12>

0800692a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	60f8      	str	r0, [r7, #12]
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	e00a      	b.n	8006952 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800693c:	f3af 8000 	nop.w
 8006940:	4601      	mov	r1, r0
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	60ba      	str	r2, [r7, #8]
 8006948:	b2ca      	uxtb	r2, r1
 800694a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3301      	adds	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	dbf0      	blt.n	800693c <_read+0x12>
	}

return len;
 800695a:	687b      	ldr	r3, [r7, #4]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	e009      	b.n	800698a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	60ba      	str	r2, [r7, #8]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3301      	adds	r3, #1
 8006988:	617b      	str	r3, [r7, #20]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	429a      	cmp	r2, r3
 8006990:	dbf1      	blt.n	8006976 <_write+0x12>
	}
	return len;
 8006992:	687b      	ldr	r3, [r7, #4]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_close>:

int _close(int file)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	return -1;
 80069a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr

080069b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069c2:	605a      	str	r2, [r3, #4]
	return 0;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <_isatty>:

int _isatty(int file)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	return 1;
 80069d8:	2301      	movs	r3, #1
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
	return 0;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a04:	4a14      	ldr	r2, [pc, #80]	; (8006a58 <_sbrk+0x5c>)
 8006a06:	4b15      	ldr	r3, [pc, #84]	; (8006a5c <_sbrk+0x60>)
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a10:	4b13      	ldr	r3, [pc, #76]	; (8006a60 <_sbrk+0x64>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a18:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <_sbrk+0x64>)
 8006a1a:	4a12      	ldr	r2, [pc, #72]	; (8006a64 <_sbrk+0x68>)
 8006a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a1e:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <_sbrk+0x64>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4413      	add	r3, r2
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d207      	bcs.n	8006a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a2c:	f007 fdf0 	bl	800e610 <__errno>
 8006a30:	4603      	mov	r3, r0
 8006a32:	220c      	movs	r2, #12
 8006a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	e009      	b.n	8006a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a3c:	4b08      	ldr	r3, [pc, #32]	; (8006a60 <_sbrk+0x64>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <_sbrk+0x64>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4413      	add	r3, r2
 8006a4a:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <_sbrk+0x64>)
 8006a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20018000 	.word	0x20018000
 8006a5c:	00000400 	.word	0x00000400
 8006a60:	20000758 	.word	0x20000758
 8006a64:	20000b40 	.word	0x20000b40

08006a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a6c:	bf00      	nop
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr

08006a74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	605a      	str	r2, [r3, #4]
 8006a84:	609a      	str	r2, [r3, #8]
 8006a86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a88:	463b      	mov	r3, r7
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006a90:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8006a98:	4b1c      	ldr	r3, [pc, #112]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006a9a:	f240 227f 	movw	r2, #639	; 0x27f
 8006a9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006aa6:	4b19      	ldr	r3, [pc, #100]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006aac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006aba:	4814      	ldr	r0, [pc, #80]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006abc:	f004 fe9a 	bl	800b7f4 <HAL_TIM_Base_Init>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006ac6:	f7fc fdc9 	bl	800365c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ace:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ad0:	f107 0308 	add.w	r3, r7, #8
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	480d      	ldr	r0, [pc, #52]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006ad8:	f005 f852 	bl	800bb80 <HAL_TIM_ConfigClockSource>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006ae2:	f7fc fdbb 	bl	800365c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006aee:	463b      	mov	r3, r7
 8006af0:	4619      	mov	r1, r3
 8006af2:	4806      	ldr	r0, [pc, #24]	; (8006b0c <MX_TIM2_Init+0x98>)
 8006af4:	f005 fa6a 	bl	800bfcc <HAL_TIMEx_MasterConfigSynchronization>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006afe:	f7fc fdad 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006b02:	bf00      	nop
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000ae4 	.word	0x20000ae4

08006b10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b16:	f107 0308 	add.w	r3, r7, #8
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	609a      	str	r2, [r3, #8]
 8006b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b24:	463b      	mov	r3, r7
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <MX_TIM3_Init+0x98>)
 8006b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b34:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8006b38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 333;
 8006b40:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b42:	f240 124d 	movw	r2, #333	; 0x14d
 8006b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b48:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b4e:	4b15      	ldr	r3, [pc, #84]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006b54:	4813      	ldr	r0, [pc, #76]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b56:	f004 fe4d 	bl	800b7f4 <HAL_TIM_Base_Init>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8006b60:	f7fc fd7c 	bl	800365c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	4619      	mov	r1, r3
 8006b70:	480c      	ldr	r0, [pc, #48]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b72:	f005 f805 	bl	800bb80 <HAL_TIM_ConfigClockSource>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8006b7c:	f7fc fd6e 	bl	800365c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b80:	2300      	movs	r3, #0
 8006b82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006b88:	463b      	mov	r3, r7
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4805      	ldr	r0, [pc, #20]	; (8006ba4 <MX_TIM3_Init+0x94>)
 8006b8e:	f005 fa1d 	bl	800bfcc <HAL_TIMEx_MasterConfigSynchronization>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8006b98:	f7fc fd60 	bl	800365c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006b9c:	bf00      	nop
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000a9c 	.word	0x20000a9c
 8006ba8:	40000400 	.word	0x40000400

08006bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d114      	bne.n	8006be8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006bbe:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <HAL_TIM_Base_MspInit+0x78>)
 8006bc0:	69db      	ldr	r3, [r3, #28]
 8006bc2:	4a18      	ldr	r2, [pc, #96]	; (8006c24 <HAL_TIM_Base_MspInit+0x78>)
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	61d3      	str	r3, [r2, #28]
 8006bca:	4b16      	ldr	r3, [pc, #88]	; (8006c24 <HAL_TIM_Base_MspInit+0x78>)
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	201c      	movs	r0, #28
 8006bdc:	f001 fc39 	bl	8008452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006be0:	201c      	movs	r0, #28
 8006be2:	f001 fc52 	bl	800848a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006be6:	e018      	b.n	8006c1a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a0e      	ldr	r2, [pc, #56]	; (8006c28 <HAL_TIM_Base_MspInit+0x7c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d113      	bne.n	8006c1a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006bf2:	4b0c      	ldr	r3, [pc, #48]	; (8006c24 <HAL_TIM_Base_MspInit+0x78>)
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	4a0b      	ldr	r2, [pc, #44]	; (8006c24 <HAL_TIM_Base_MspInit+0x78>)
 8006bf8:	f043 0302 	orr.w	r3, r3, #2
 8006bfc:	61d3      	str	r3, [r2, #28]
 8006bfe:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <HAL_TIM_Base_MspInit+0x78>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	201d      	movs	r0, #29
 8006c10:	f001 fc1f 	bl	8008452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006c14:	201d      	movs	r0, #29
 8006c16:	f001 fc38 	bl	800848a <HAL_NVIC_EnableIRQ>
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40000400 	.word	0x40000400

08006c2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c2c:	480c      	ldr	r0, [pc, #48]	; (8006c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006c2e:	490d      	ldr	r1, [pc, #52]	; (8006c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006c30:	4a0d      	ldr	r2, [pc, #52]	; (8006c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c34:	e002      	b.n	8006c3c <LoopCopyDataInit>

08006c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c3a:	3304      	adds	r3, #4

08006c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c40:	d3f9      	bcc.n	8006c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c42:	4a0a      	ldr	r2, [pc, #40]	; (8006c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006c44:	4c0a      	ldr	r4, [pc, #40]	; (8006c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c48:	e001      	b.n	8006c4e <LoopFillZerobss>

08006c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c4c:	3204      	adds	r2, #4

08006c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c50:	d3fb      	bcc.n	8006c4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006c52:	f7ff ff09 	bl	8006a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c56:	f007 fce1 	bl	800e61c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006c5a:	f7fb ffb1 	bl	8002bc0 <main>
  bx lr
 8006c5e:	4770      	bx	lr
  ldr r0, =_sdata
 8006c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c64:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8006c68:	0801424c 	.word	0x0801424c
  ldr r2, =_sbss
 8006c6c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8006c70:	20000b40 	.word	0x20000b40

08006c74 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006c74:	e7fe      	b.n	8006c74 <ADC1_2_IRQHandler>
	...

08006c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c7c:	4b08      	ldr	r3, [pc, #32]	; (8006ca0 <HAL_Init+0x28>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <HAL_Init+0x28>)
 8006c82:	f043 0310 	orr.w	r3, r3, #16
 8006c86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c88:	2003      	movs	r0, #3
 8006c8a:	f001 fbd7 	bl	800843c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c8e:	200f      	movs	r0, #15
 8006c90:	f000 f808 	bl	8006ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c94:	f7fd f828 	bl	8003ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40022000 	.word	0x40022000

08006ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006cac:	4b12      	ldr	r3, [pc, #72]	; (8006cf8 <HAL_InitTick+0x54>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <HAL_InitTick+0x58>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fbef 	bl	80084a6 <HAL_SYSTICK_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e00e      	b.n	8006cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b0f      	cmp	r3, #15
 8006cd6:	d80a      	bhi.n	8006cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cd8:	2200      	movs	r2, #0
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce0:	f001 fbb7 	bl	8008452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ce4:	4a06      	ldr	r2, [pc, #24]	; (8006d00 <HAL_InitTick+0x5c>)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
 8006cec:	e000      	b.n	8006cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	20000070 	.word	0x20000070
 8006cfc:	20000078 	.word	0x20000078
 8006d00:	20000074 	.word	0x20000074

08006d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <HAL_IncTick+0x1c>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <HAL_IncTick+0x20>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4413      	add	r3, r2
 8006d14:	4a03      	ldr	r2, [pc, #12]	; (8006d24 <HAL_IncTick+0x20>)
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr
 8006d20:	20000078 	.word	0x20000078
 8006d24:	20000b2c 	.word	0x20000b2c

08006d28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8006d2c:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <HAL_GetTick+0x10>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr
 8006d38:	20000b2c 	.word	0x20000b2c

08006d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d44:	f7ff fff0 	bl	8006d28 <HAL_GetTick>
 8006d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d005      	beq.n	8006d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d56:	4b0a      	ldr	r3, [pc, #40]	; (8006d80 <HAL_Delay+0x44>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d62:	bf00      	nop
 8006d64:	f7ff ffe0 	bl	8006d28 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d8f7      	bhi.n	8006d64 <HAL_Delay+0x28>
  {
  }
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000078 	.word	0x20000078

08006d84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0ce      	b.n	8006f44 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fa ffe0 	bl	8001d88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fb11 	bl	80073f0 <ADC_ConversionStop_Disable>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd6:	f003 0310 	and.w	r3, r3, #16
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 80a9 	bne.w	8006f32 <HAL_ADC_Init+0x1ae>
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 80a5 	bne.w	8006f32 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006df0:	f023 0302 	bic.w	r3, r3, #2
 8006df4:	f043 0202 	orr.w	r2, r3, #2
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4951      	ldr	r1, [pc, #324]	; (8006f4c <HAL_ADC_Init+0x1c8>)
 8006e06:	428b      	cmp	r3, r1
 8006e08:	d10a      	bne.n	8006e20 <HAL_ADC_Init+0x9c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e12:	d002      	beq.n	8006e1a <HAL_ADC_Init+0x96>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	e004      	b.n	8006e24 <HAL_ADC_Init+0xa0>
 8006e1a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e1e:	e001      	b.n	8006e24 <HAL_ADC_Init+0xa0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006e24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7b1b      	ldrb	r3, [r3, #12]
 8006e2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006e2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3c:	d003      	beq.n	8006e46 <HAL_ADC_Init+0xc2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d102      	bne.n	8006e4c <HAL_ADC_Init+0xc8>
 8006e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e4a:	e000      	b.n	8006e4e <HAL_ADC_Init+0xca>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	7d1b      	ldrb	r3, [r3, #20]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d119      	bne.n	8006e90 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7b1b      	ldrb	r3, [r3, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d109      	bne.n	8006e78 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	035a      	lsls	r2, r3, #13
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e74:	613b      	str	r3, [r7, #16]
 8006e76:	e00b      	b.n	8006e90 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	f043 0220 	orr.w	r2, r3, #32
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	f043 0201 	orr.w	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	4b29      	ldr	r3, [pc, #164]	; (8006f50 <HAL_ADC_Init+0x1cc>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6812      	ldr	r2, [r2, #0]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec0:	d003      	beq.n	8006eca <HAL_ADC_Init+0x146>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d104      	bne.n	8006ed4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	051b      	lsls	r3, r3, #20
 8006ed2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eda:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	4b19      	ldr	r3, [pc, #100]	; (8006f54 <HAL_ADC_Init+0x1d0>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d10b      	bne.n	8006f10 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	f043 0201 	orr.w	r2, r3, #1
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006f0e:	e018      	b.n	8006f42 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f023 0312 	bic.w	r3, r3, #18
 8006f18:	f043 0210 	orr.w	r2, r3, #16
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f043 0201 	orr.w	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006f30:	e007      	b.n	8006f42 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	f043 0210 	orr.w	r2, r3, #16
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40013c00 	.word	0x40013c00
 8006f50:	ffe1f7fd 	.word	0xffe1f7fd
 8006f54:	ff1f0efe 	.word	0xff1f0efe

08006f58 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a64      	ldr	r2, [pc, #400]	; (8007100 <HAL_ADC_Start_DMA+0x1a8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_ADC_Start_DMA+0x24>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a63      	ldr	r2, [pc, #396]	; (8007104 <HAL_ADC_Start_DMA+0x1ac>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d106      	bne.n	8006f8a <HAL_ADC_Start_DMA+0x32>
 8006f7c:	4b60      	ldr	r3, [pc, #384]	; (8007100 <HAL_ADC_Start_DMA+0x1a8>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 80b3 	bne.w	80070f0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_ADC_Start_DMA+0x40>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e0ae      	b.n	80070f6 <HAL_ADC_Start_DMA+0x19e>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f9cb 	bl	800733c <ADC_Enable>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f040 809a 	bne.w	80070e6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4e      	ldr	r2, [pc, #312]	; (8007104 <HAL_ADC_Start_DMA+0x1ac>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d105      	bne.n	8006fdc <HAL_ADC_Start_DMA+0x84>
 8006fd0:	4b4b      	ldr	r3, [pc, #300]	; (8007100 <HAL_ADC_Start_DMA+0x1a8>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d115      	bne.n	8007008 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d026      	beq.n	8007044 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ffe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007006:	e01d      	b.n	8007044 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a39      	ldr	r2, [pc, #228]	; (8007100 <HAL_ADC_Start_DMA+0x1a8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_ADC_Start_DMA+0xd0>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a38      	ldr	r2, [pc, #224]	; (8007104 <HAL_ADC_Start_DMA+0x1ac>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10d      	bne.n	8007044 <HAL_ADC_Start_DMA+0xec>
 8007028:	4b35      	ldr	r3, [pc, #212]	; (8007100 <HAL_ADC_Start_DMA+0x1a8>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007038:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800703c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f023 0206 	bic.w	r2, r3, #6
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c
 800705c:	e002      	b.n	8007064 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	4a25      	ldr	r2, [pc, #148]	; (8007108 <HAL_ADC_Start_DMA+0x1b0>)
 8007072:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	4a24      	ldr	r2, [pc, #144]	; (800710c <HAL_ADC_Start_DMA+0x1b4>)
 800707a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	4a23      	ldr	r2, [pc, #140]	; (8007110 <HAL_ADC_Start_DMA+0x1b8>)
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f06f 0202 	mvn.w	r2, #2
 800708c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800709c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a18      	ldr	r0, [r3, #32]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	334c      	adds	r3, #76	; 0x4c
 80070a8:	4619      	mov	r1, r3
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f001 fa7d 	bl	80085ac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80070bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80070c0:	d108      	bne.n	80070d4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80070d0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80070d2:	e00f      	b.n	80070f4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80070e2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80070e4:	e006      	b.n	80070f4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80070ee:	e001      	b.n	80070f4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80070f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40012400 	.word	0x40012400
 8007104:	40012800 	.word	0x40012800
 8007108:	08007473 	.word	0x08007473
 800710c:	080074ef 	.word	0x080074ef
 8007110:	0800750b 	.word	0x0800750b

08007114 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr
	...

0800714c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007164:	2b01      	cmp	r3, #1
 8007166:	d101      	bne.n	800716c <HAL_ADC_ConfigChannel+0x20>
 8007168:	2302      	movs	r3, #2
 800716a:	e0dc      	b.n	8007326 <HAL_ADC_ConfigChannel+0x1da>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d81c      	bhi.n	80071b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4413      	add	r3, r2
 800718c:	3b05      	subs	r3, #5
 800718e:	221f      	movs	r2, #31
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	43db      	mvns	r3, r3
 8007196:	4019      	ands	r1, r3
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	3b05      	subs	r3, #5
 80071a8:	fa00 f203 	lsl.w	r2, r0, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	635a      	str	r2, [r3, #52]	; 0x34
 80071b4:	e03c      	b.n	8007230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b0c      	cmp	r3, #12
 80071bc:	d81c      	bhi.n	80071f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	3b23      	subs	r3, #35	; 0x23
 80071d0:	221f      	movs	r2, #31
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	4019      	ands	r1, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	3b23      	subs	r3, #35	; 0x23
 80071ea:	fa00 f203 	lsl.w	r2, r0, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30
 80071f6:	e01b      	b.n	8007230 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	3b41      	subs	r3, #65	; 0x41
 800720a:	221f      	movs	r2, #31
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	4019      	ands	r1, r3
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	3b41      	subs	r3, #65	; 0x41
 8007224:	fa00 f203 	lsl.w	r2, r0, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b09      	cmp	r3, #9
 8007236:	d91c      	bls.n	8007272 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68d9      	ldr	r1, [r3, #12]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4413      	add	r3, r2
 8007248:	3b1e      	subs	r3, #30
 800724a:	2207      	movs	r2, #7
 800724c:	fa02 f303 	lsl.w	r3, r2, r3
 8007250:	43db      	mvns	r3, r3
 8007252:	4019      	ands	r1, r3
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	6898      	ldr	r0, [r3, #8]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4613      	mov	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	4413      	add	r3, r2
 8007262:	3b1e      	subs	r3, #30
 8007264:	fa00 f203 	lsl.w	r2, r0, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	e019      	b.n	80072a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6919      	ldr	r1, [r3, #16]
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	4413      	add	r3, r2
 8007282:	2207      	movs	r2, #7
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	43db      	mvns	r3, r3
 800728a:	4019      	ands	r1, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	6898      	ldr	r0, [r3, #8]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	fa00 f203 	lsl.w	r2, r0, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d003      	beq.n	80072b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80072b2:	2b11      	cmp	r3, #17
 80072b4:	d132      	bne.n	800731c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <HAL_ADC_ConfigChannel+0x1e4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d125      	bne.n	800730c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d126      	bne.n	800731c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80072dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b10      	cmp	r3, #16
 80072e4:	d11a      	bne.n	800731c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80072e6:	4b13      	ldr	r3, [pc, #76]	; (8007334 <HAL_ADC_ConfigChannel+0x1e8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a13      	ldr	r2, [pc, #76]	; (8007338 <HAL_ADC_ConfigChannel+0x1ec>)
 80072ec:	fba2 2303 	umull	r2, r3, r2, r3
 80072f0:	0c9a      	lsrs	r2, r3, #18
 80072f2:	4613      	mov	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	4413      	add	r3, r2
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80072fc:	e002      	b.n	8007304 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	3b01      	subs	r3, #1
 8007302:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f9      	bne.n	80072fe <HAL_ADC_ConfigChannel+0x1b2>
 800730a:	e007      	b.n	800731c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f043 0220 	orr.w	r2, r3, #32
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr
 8007330:	40012400 	.word	0x40012400
 8007334:	20000070 	.word	0x20000070
 8007338:	431bde83 	.word	0x431bde83

0800733c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b01      	cmp	r3, #1
 8007358:	d040      	beq.n	80073dc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0201 	orr.w	r2, r2, #1
 8007368:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800736a:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <ADC_Enable+0xac>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <ADC_Enable+0xb0>)
 8007370:	fba2 2303 	umull	r2, r3, r2, r3
 8007374:	0c9b      	lsrs	r3, r3, #18
 8007376:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007378:	e002      	b.n	8007380 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	3b01      	subs	r3, #1
 800737e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1f9      	bne.n	800737a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007386:	f7ff fccf 	bl	8006d28 <HAL_GetTick>
 800738a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800738c:	e01f      	b.n	80073ce <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800738e:	f7ff fccb 	bl	8006d28 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	d918      	bls.n	80073ce <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d011      	beq.n	80073ce <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	f043 0210 	orr.w	r2, r3, #16
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	f043 0201 	orr.w	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e007      	b.n	80073de <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d1d8      	bne.n	800738e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20000070 	.word	0x20000070
 80073ec:	431bde83 	.word	0x431bde83

080073f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b01      	cmp	r3, #1
 8007408:	d12e      	bne.n	8007468 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800741a:	f7ff fc85 	bl	8006d28 <HAL_GetTick>
 800741e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007420:	e01b      	b.n	800745a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007422:	f7ff fc81 	bl	8006d28 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d914      	bls.n	800745a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b01      	cmp	r3, #1
 800743c:	d10d      	bne.n	800745a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	f043 0210 	orr.w	r2, r3, #16
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744e:	f043 0201 	orr.w	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e007      	b.n	800746a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b01      	cmp	r3, #1
 8007466:	d0dc      	beq.n	8007422 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007488:	2b00      	cmp	r3, #0
 800748a:	d127      	bne.n	80074dc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80074a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80074a6:	d115      	bne.n	80074d4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d111      	bne.n	80074d4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	f043 0201 	orr.w	r2, r3, #1
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f7ff fe1d 	bl	8007114 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80074da:	e004      	b.n	80074e6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
}
 80074e6:	bf00      	nop
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fe12 	bl	8007126 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	f043 0204 	orr.w	r2, r3, #4
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fe01 	bl	8007138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b084      	sub	sp, #16
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0ed      	b.n	800772c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d102      	bne.n	8007562 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fa fcc9 	bl	8001ef4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007572:	f7ff fbd9 	bl	8006d28 <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007578:	e012      	b.n	80075a0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800757a:	f7ff fbd5 	bl	8006d28 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b0a      	cmp	r3, #10
 8007586:	d90b      	bls.n	80075a0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2205      	movs	r2, #5
 8007598:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e0c5      	b.n	800772c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0e5      	beq.n	800757a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0202 	bic.w	r2, r2, #2
 80075bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075be:	f7ff fbb3 	bl	8006d28 <HAL_GetTick>
 80075c2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075c4:	e012      	b.n	80075ec <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80075c6:	f7ff fbaf 	bl	8006d28 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b0a      	cmp	r3, #10
 80075d2:	d90b      	bls.n	80075ec <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2205      	movs	r2, #5
 80075e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e09f      	b.n	800772c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	7e1b      	ldrb	r3, [r3, #24]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d108      	bne.n	8007614 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	e007      	b.n	8007624 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007622:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7e5b      	ldrb	r3, [r3, #25]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d108      	bne.n	800763e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800763a:	601a      	str	r2, [r3, #0]
 800763c:	e007      	b.n	800764e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	7e9b      	ldrb	r3, [r3, #26]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d108      	bne.n	8007668 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0220 	orr.w	r2, r2, #32
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e007      	b.n	8007678 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0220 	bic.w	r2, r2, #32
 8007676:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	7edb      	ldrb	r3, [r3, #27]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d108      	bne.n	8007692 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0210 	bic.w	r2, r2, #16
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e007      	b.n	80076a2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0210 	orr.w	r2, r2, #16
 80076a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	7f1b      	ldrb	r3, [r3, #28]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d108      	bne.n	80076bc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0208 	orr.w	r2, r2, #8
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	e007      	b.n	80076cc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0208 	bic.w	r2, r2, #8
 80076ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7f5b      	ldrb	r3, [r3, #29]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d108      	bne.n	80076e6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0204 	orr.w	r2, r2, #4
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e007      	b.n	80076f6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0204 	bic.w	r2, r2, #4
 80076f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689a      	ldr	r2, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	ea42 0103 	orr.w	r1, r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	1e5a      	subs	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800774a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d003      	beq.n	800775a <HAL_CAN_ConfigFilter+0x26>
 8007752:	7cfb      	ldrb	r3, [r7, #19]
 8007754:	2b02      	cmp	r3, #2
 8007756:	f040 80aa 	bne.w	80078ae <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007760:	f043 0201 	orr.w	r2, r3, #1
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2201      	movs	r2, #1
 8007774:	fa02 f303 	lsl.w	r3, r2, r3
 8007778:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	43db      	mvns	r3, r3
 8007784:	401a      	ands	r2, r3
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d123      	bne.n	80077dc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	43db      	mvns	r3, r3
 800779e:	401a      	ands	r2, r3
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80077b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	3248      	adds	r2, #72	; 0x48
 80077bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80077d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80077d2:	6979      	ldr	r1, [r7, #20]
 80077d4:	3348      	adds	r3, #72	; 0x48
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	440b      	add	r3, r1
 80077da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d122      	bne.n	800782a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007804:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	3248      	adds	r2, #72	; 0x48
 800780a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800781e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007820:	6979      	ldr	r1, [r7, #20]
 8007822:	3348      	adds	r3, #72	; 0x48
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	440b      	add	r3, r1
 8007828:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d109      	bne.n	8007846 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	43db      	mvns	r3, r3
 800783c:	401a      	ands	r2, r3
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007844:	e007      	b.n	8007856 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	431a      	orrs	r2, r3
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	43db      	mvns	r3, r3
 8007868:	401a      	ands	r2, r3
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007870:	e007      	b.n	8007882 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	431a      	orrs	r2, r3
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d107      	bne.n	800789a <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	431a      	orrs	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80078a0:	f023 0201 	bic.w	r2, r3, #1
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e006      	b.n	80078bc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr

080078c6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d12e      	bne.n	8007938 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2202      	movs	r2, #2
 80078de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0201 	bic.w	r2, r2, #1
 80078f0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078f2:	f7ff fa19 	bl	8006d28 <HAL_GetTick>
 80078f6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80078f8:	e012      	b.n	8007920 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80078fa:	f7ff fa15 	bl	8006d28 <HAL_GetTick>
 80078fe:	4602      	mov	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b0a      	cmp	r3, #10
 8007906:	d90b      	bls.n	8007920 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2205      	movs	r2, #5
 8007918:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e012      	b.n	8007946 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e5      	bne.n	80078fa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e006      	b.n	8007946 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
  }
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800794e:	b480      	push	{r7}
 8007950:	b089      	sub	sp, #36	; 0x24
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007962:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800796c:	7ffb      	ldrb	r3, [r7, #31]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d003      	beq.n	800797a <HAL_CAN_AddTxMessage+0x2c>
 8007972:	7ffb      	ldrb	r3, [r7, #31]
 8007974:	2b02      	cmp	r3, #2
 8007976:	f040 80b8 	bne.w	8007aea <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800798a:	2b00      	cmp	r3, #0
 800798c:	d105      	bne.n	800799a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80a0 	beq.w	8007ada <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	0e1b      	lsrs	r3, r3, #24
 800799e:	f003 0303 	and.w	r3, r3, #3
 80079a2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d907      	bls.n	80079ba <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e09e      	b.n	8007af8 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80079ba:	2201      	movs	r2, #1
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	409a      	lsls	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10d      	bne.n	80079e8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	6809      	ldr	r1, [r1, #0]
 80079da:	431a      	orrs	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	3318      	adds	r3, #24
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	440b      	add	r3, r1
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e00f      	b.n	8007a08 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079f8:	68f9      	ldr	r1, [r7, #12]
 80079fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80079fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	3318      	adds	r3, #24
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	440b      	add	r3, r1
 8007a06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6819      	ldr	r1, [r3, #0]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691a      	ldr	r2, [r3, #16]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	3318      	adds	r3, #24
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	440b      	add	r3, r1
 8007a18:	3304      	adds	r3, #4
 8007a1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	7d1b      	ldrb	r3, [r3, #20]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d111      	bne.n	8007a48 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	3318      	adds	r3, #24
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	4413      	add	r3, r2
 8007a30:	3304      	adds	r3, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	6811      	ldr	r1, [r2, #0]
 8007a38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3318      	adds	r3, #24
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	440b      	add	r3, r1
 8007a44:	3304      	adds	r3, #4
 8007a46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3307      	adds	r3, #7
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	061a      	lsls	r2, r3, #24
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3306      	adds	r3, #6
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	041b      	lsls	r3, r3, #16
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3305      	adds	r3, #5
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	4313      	orrs	r3, r2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	3204      	adds	r2, #4
 8007a68:	7812      	ldrb	r2, [r2, #0]
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	6811      	ldr	r1, [r2, #0]
 8007a70:	ea43 0200 	orr.w	r2, r3, r0
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	440b      	add	r3, r1
 8007a7a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007a7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	3303      	adds	r3, #3
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	061a      	lsls	r2, r3, #24
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	041b      	lsls	r3, r3, #16
 8007a90:	431a      	orrs	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3301      	adds	r3, #1
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7812      	ldrb	r2, [r2, #0]
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	ea43 0200 	orr.w	r2, r3, r0
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	440b      	add	r3, r1
 8007ab0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007ab4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	3318      	adds	r3, #24
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	4413      	add	r3, r2
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	6811      	ldr	r1, [r2, #0]
 8007ac8:	f043 0201 	orr.w	r2, r3, #1
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	3318      	adds	r3, #24
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	440b      	add	r3, r1
 8007ad4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e00e      	b.n	8007af8 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e006      	b.n	8007af8 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
  }
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3724      	adds	r7, #36	; 0x24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr

08007b02 <HAL_CAN_AbortTxRequest>:
  * @param  TxMailboxes List of the Tx Mailboxes to abort.
  *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b12:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d002      	beq.n	8007b20 <HAL_CAN_AbortTxRequest+0x1e>
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d128      	bne.n	8007b72 <HAL_CAN_AbortTxRequest+0x70>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 */
    if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_CAN_AbortTxRequest+0x38>
    {
      /* Add cancellation request for Tx Mailbox 0 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b38:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 1 */
    if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <HAL_CAN_AbortTxRequest+0x52>
    {
      /* Add cancellation request for Tx Mailbox 1 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b52:	609a      	str	r2, [r3, #8]
    }

    /* Check Tx Mailbox 2 */
    if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	f003 0304 	and.w	r3, r3, #4
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <HAL_CAN_AbortTxRequest+0x6c>
    {
      /* Add cancellation request for Tx Mailbox 2 */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007b6c:	609a      	str	r2, [r3, #8]
    }

    /* Return function status */
    return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e006      	b.n	8007b80 <HAL_CAN_AbortTxRequest+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
  }
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b9c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d002      	beq.n	8007baa <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d11d      	bne.n	8007be6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d002      	beq.n	8007bd2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007be6:	68fb      	ldr	r3, [r7, #12]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b087      	sub	sp, #28
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
 8007bfe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c06:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d003      	beq.n	8007c16 <HAL_CAN_GetRxMessage+0x24>
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	f040 80f3 	bne.w	8007dfc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10e      	bne.n	8007c3a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d116      	bne.n	8007c58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e0e7      	b.n	8007e0a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f003 0303 	and.w	r3, r3, #3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d107      	bne.n	8007c58 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e0d8      	b.n	8007e0a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	331b      	adds	r3, #27
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	4413      	add	r3, r2
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0204 	and.w	r2, r3, #4
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10c      	bne.n	8007c90 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	331b      	adds	r3, #27
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	4413      	add	r3, r2
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	0d5b      	lsrs	r3, r3, #21
 8007c86:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	e00b      	b.n	8007ca8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	331b      	adds	r3, #27
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	4413      	add	r3, r2
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	08db      	lsrs	r3, r3, #3
 8007ca0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	331b      	adds	r3, #27
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	4413      	add	r3, r2
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0202 	and.w	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	331b      	adds	r3, #27
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	4413      	add	r3, r2
 8007cca:	3304      	adds	r3, #4
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 020f 	and.w	r2, r3, #15
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	331b      	adds	r3, #27
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	0a1b      	lsrs	r3, r3, #8
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	331b      	adds	r3, #27
 8007cf6:	011b      	lsls	r3, r3, #4
 8007cf8:	4413      	add	r3, r2
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	0c1b      	lsrs	r3, r3, #16
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	0a1a      	lsrs	r2, r3, #8
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	3301      	adds	r3, #1
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	0c1a      	lsrs	r2, r3, #16
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	b2d2      	uxtb	r2, r2
 8007d4e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	0e1a      	lsrs	r2, r3, #24
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	3303      	adds	r3, #3
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	0a1a      	lsrs	r2, r3, #8
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	3305      	adds	r3, #5
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	0c1a      	lsrs	r2, r3, #16
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	3306      	adds	r3, #6
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	0e1a      	lsrs	r2, r3, #24
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	3307      	adds	r3, #7
 8007dcc:	b2d2      	uxtb	r2, r2
 8007dce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d108      	bne.n	8007de8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f042 0220 	orr.w	r2, r2, #32
 8007de4:	60da      	str	r2, [r3, #12]
 8007de6:	e007      	b.n	8007df8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f042 0220 	orr.w	r2, r2, #32
 8007df6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	e006      	b.n	8007e0a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
  }
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	371c      	adds	r7, #28
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr

08007e14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d002      	beq.n	8007e32 <HAL_CAN_ActivateNotification+0x1e>
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d109      	bne.n	8007e46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6959      	ldr	r1, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e006      	b.n	8007e54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
  }
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr

08007e5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b08a      	sub	sp, #40	; 0x28
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d07c      	beq.n	8007f9e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d023      	beq.n	8007ef6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f983 	bl	80081cc <HAL_CAN_TxMailbox0CompleteCallback>
 8007ec6:	e016      	b.n	8007ef6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d004      	beq.n	8007edc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eda:	e00c      	b.n	8007ef6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
 8007eee:	e002      	b.n	8007ef6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f986 	bl	8008202 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d024      	beq.n	8007f4a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 f962 	bl	80081de <HAL_CAN_TxMailbox1CompleteCallback>
 8007f1a:	e016      	b.n	8007f4a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f2e:	e00c      	b.n	8007f4a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
 8007f42:	e002      	b.n	8007f4a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f965 	bl	8008214 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d024      	beq.n	8007f9e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007f5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d003      	beq.n	8007f70 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f941 	bl	80081f0 <HAL_CAN_TxMailbox2CompleteCallback>
 8007f6e:	e016      	b.n	8007f9e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d004      	beq.n	8007f84 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
 8007f82:	e00c      	b.n	8007f9e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d004      	beq.n	8007f98 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
 8007f96:	e002      	b.n	8007f9e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f944 	bl	8008226 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00c      	beq.n	8007fc2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	f003 0310 	and.w	r3, r3, #16
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d006      	beq.n	8007fe4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2208      	movs	r2, #8
 8007fdc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f92a 	bl	8008238 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7fa fb43 	bl	8002688 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00c      	beq.n	8008026 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800801c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2210      	movs	r2, #16
 8008024:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00b      	beq.n	8008048 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f003 0308 	and.w	r3, r3, #8
 8008036:	2b00      	cmp	r3, #0
 8008038:	d006      	beq.n	8008048 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2208      	movs	r2, #8
 8008040:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f90a 	bl	800825c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	f003 0310 	and.w	r3, r3, #16
 800804e:	2b00      	cmp	r3, #0
 8008050:	d009      	beq.n	8008066 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8f2 	bl	800824a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	f003 0310 	and.w	r3, r3, #16
 8008076:	2b00      	cmp	r3, #0
 8008078:	d006      	beq.n	8008088 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2210      	movs	r2, #16
 8008080:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8f3 	bl	800826e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	f003 0308 	and.w	r3, r3, #8
 8008098:	2b00      	cmp	r3, #0
 800809a:	d006      	beq.n	80080aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2208      	movs	r2, #8
 80080a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f8eb 	bl	8008280 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d07b      	beq.n	80081ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d072      	beq.n	80081a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	f043 0301 	orr.w	r3, r3, #1
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	f043 0302 	orr.w	r3, r3, #2
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	f043 0304 	orr.w	r3, r3, #4
 8008110:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008118:	2b00      	cmp	r3, #0
 800811a:	d043      	beq.n	80081a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008122:	2b00      	cmp	r3, #0
 8008124:	d03e      	beq.n	80081a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800812c:	2b60      	cmp	r3, #96	; 0x60
 800812e:	d02b      	beq.n	8008188 <HAL_CAN_IRQHandler+0x32a>
 8008130:	2b60      	cmp	r3, #96	; 0x60
 8008132:	d82e      	bhi.n	8008192 <HAL_CAN_IRQHandler+0x334>
 8008134:	2b50      	cmp	r3, #80	; 0x50
 8008136:	d022      	beq.n	800817e <HAL_CAN_IRQHandler+0x320>
 8008138:	2b50      	cmp	r3, #80	; 0x50
 800813a:	d82a      	bhi.n	8008192 <HAL_CAN_IRQHandler+0x334>
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	d019      	beq.n	8008174 <HAL_CAN_IRQHandler+0x316>
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	d826      	bhi.n	8008192 <HAL_CAN_IRQHandler+0x334>
 8008144:	2b30      	cmp	r3, #48	; 0x30
 8008146:	d010      	beq.n	800816a <HAL_CAN_IRQHandler+0x30c>
 8008148:	2b30      	cmp	r3, #48	; 0x30
 800814a:	d822      	bhi.n	8008192 <HAL_CAN_IRQHandler+0x334>
 800814c:	2b10      	cmp	r3, #16
 800814e:	d002      	beq.n	8008156 <HAL_CAN_IRQHandler+0x2f8>
 8008150:	2b20      	cmp	r3, #32
 8008152:	d005      	beq.n	8008160 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008154:	e01d      	b.n	8008192 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	f043 0308 	orr.w	r3, r3, #8
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800815e:	e019      	b.n	8008194 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	f043 0310 	orr.w	r3, r3, #16
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008168:	e014      	b.n	8008194 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	f043 0320 	orr.w	r3, r3, #32
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008172:	e00f      	b.n	8008194 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800817c:	e00a      	b.n	8008194 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008186:	e005      	b.n	8008194 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008190:	e000      	b.n	8008194 <HAL_CAN_IRQHandler+0x336>
            break;
 8008192:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80081a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2204      	movs	r2, #4
 80081aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80081ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f867 	bl	8008292 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80081c4:	bf00      	nop
 80081c6:	3728      	adds	r7, #40	; 0x28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr

08008202 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008202:	b480      	push	{r7}
 8008204:	b083      	sub	sp, #12
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr

08008226 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr

08008238 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr

0800826e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008276:	bf00      	nop
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr

08008280 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr

08008292 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr

080082a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80082b4:	4b0c      	ldr	r3, [pc, #48]	; (80082e8 <__NVIC_SetPriorityGrouping+0x44>)
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082c0:	4013      	ands	r3, r2
 80082c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80082cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80082d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082d6:	4a04      	ldr	r2, [pc, #16]	; (80082e8 <__NVIC_SetPriorityGrouping+0x44>)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	60d3      	str	r3, [r2, #12]
}
 80082dc:	bf00      	nop
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	e000ed00 	.word	0xe000ed00

080082ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082f0:	4b04      	ldr	r3, [pc, #16]	; (8008304 <__NVIC_GetPriorityGrouping+0x18>)
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	f003 0307 	and.w	r3, r3, #7
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	e000ed00 	.word	0xe000ed00

08008308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	4603      	mov	r3, r0
 8008310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008316:	2b00      	cmp	r3, #0
 8008318:	db0b      	blt.n	8008332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	f003 021f 	and.w	r2, r3, #31
 8008320:	4906      	ldr	r1, [pc, #24]	; (800833c <__NVIC_EnableIRQ+0x34>)
 8008322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2001      	movs	r0, #1
 800832a:	fa00 f202 	lsl.w	r2, r0, r2
 800832e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	bc80      	pop	{r7}
 800833a:	4770      	bx	lr
 800833c:	e000e100 	.word	0xe000e100

08008340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	6039      	str	r1, [r7, #0]
 800834a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800834c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008350:	2b00      	cmp	r3, #0
 8008352:	db0a      	blt.n	800836a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	b2da      	uxtb	r2, r3
 8008358:	490c      	ldr	r1, [pc, #48]	; (800838c <__NVIC_SetPriority+0x4c>)
 800835a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835e:	0112      	lsls	r2, r2, #4
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	440b      	add	r3, r1
 8008364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008368:	e00a      	b.n	8008380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	b2da      	uxtb	r2, r3
 800836e:	4908      	ldr	r1, [pc, #32]	; (8008390 <__NVIC_SetPriority+0x50>)
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	3b04      	subs	r3, #4
 8008378:	0112      	lsls	r2, r2, #4
 800837a:	b2d2      	uxtb	r2, r2
 800837c:	440b      	add	r3, r1
 800837e:	761a      	strb	r2, [r3, #24]
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e100 	.word	0xe000e100
 8008390:	e000ed00 	.word	0xe000ed00

08008394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008394:	b480      	push	{r7}
 8008396:	b089      	sub	sp, #36	; 0x24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f1c3 0307 	rsb	r3, r3, #7
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	bf28      	it	cs
 80083b2:	2304      	movcs	r3, #4
 80083b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	3304      	adds	r3, #4
 80083ba:	2b06      	cmp	r3, #6
 80083bc:	d902      	bls.n	80083c4 <NVIC_EncodePriority+0x30>
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	3b03      	subs	r3, #3
 80083c2:	e000      	b.n	80083c6 <NVIC_EncodePriority+0x32>
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083c8:	f04f 32ff 	mov.w	r2, #4294967295
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	fa02 f303 	lsl.w	r3, r2, r3
 80083d2:	43da      	mvns	r2, r3
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	401a      	ands	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083dc:	f04f 31ff 	mov.w	r1, #4294967295
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	fa01 f303 	lsl.w	r3, r1, r3
 80083e6:	43d9      	mvns	r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083ec:	4313      	orrs	r3, r2
         );
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3724      	adds	r7, #36	; 0x24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr

080083f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3b01      	subs	r3, #1
 8008404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008408:	d301      	bcc.n	800840e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800840a:	2301      	movs	r3, #1
 800840c:	e00f      	b.n	800842e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800840e:	4a0a      	ldr	r2, [pc, #40]	; (8008438 <SysTick_Config+0x40>)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3b01      	subs	r3, #1
 8008414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008416:	210f      	movs	r1, #15
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	f7ff ff90 	bl	8008340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008420:	4b05      	ldr	r3, [pc, #20]	; (8008438 <SysTick_Config+0x40>)
 8008422:	2200      	movs	r2, #0
 8008424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008426:	4b04      	ldr	r3, [pc, #16]	; (8008438 <SysTick_Config+0x40>)
 8008428:	2207      	movs	r2, #7
 800842a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	e000e010 	.word	0xe000e010

0800843c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff ff2d 	bl	80082a4 <__NVIC_SetPriorityGrouping>
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	4603      	mov	r3, r0
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
 800845e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008464:	f7ff ff42 	bl	80082ec <__NVIC_GetPriorityGrouping>
 8008468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	68b9      	ldr	r1, [r7, #8]
 800846e:	6978      	ldr	r0, [r7, #20]
 8008470:	f7ff ff90 	bl	8008394 <NVIC_EncodePriority>
 8008474:	4602      	mov	r2, r0
 8008476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff ff5f 	bl	8008340 <__NVIC_SetPriority>
}
 8008482:	bf00      	nop
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b082      	sub	sp, #8
 800848e:	af00      	add	r7, sp, #0
 8008490:	4603      	mov	r3, r0
 8008492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff ff35 	bl	8008308 <__NVIC_EnableIRQ>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff ffa2 	bl	80083f8 <SysTick_Config>
 80084b4:	4603      	mov	r3, r0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e059      	b.n	800858a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	4b2d      	ldr	r3, [pc, #180]	; (8008594 <HAL_DMA_Init+0xd4>)
 80084de:	429a      	cmp	r2, r3
 80084e0:	d80f      	bhi.n	8008502 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <HAL_DMA_Init+0xd8>)
 80084ea:	4413      	add	r3, r2
 80084ec:	4a2b      	ldr	r2, [pc, #172]	; (800859c <HAL_DMA_Init+0xdc>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	091b      	lsrs	r3, r3, #4
 80084f4:	009a      	lsls	r2, r3, #2
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a28      	ldr	r2, [pc, #160]	; (80085a0 <HAL_DMA_Init+0xe0>)
 80084fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8008500:	e00e      	b.n	8008520 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	4b26      	ldr	r3, [pc, #152]	; (80085a4 <HAL_DMA_Init+0xe4>)
 800850a:	4413      	add	r3, r2
 800850c:	4a23      	ldr	r2, [pc, #140]	; (800859c <HAL_DMA_Init+0xdc>)
 800850e:	fba2 2303 	umull	r2, r3, r2, r3
 8008512:	091b      	lsrs	r3, r3, #4
 8008514:	009a      	lsls	r2, r3, #2
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <HAL_DMA_Init+0xe8>)
 800851e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008536:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800853a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800855c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr
 8008594:	40020407 	.word	0x40020407
 8008598:	bffdfff8 	.word	0xbffdfff8
 800859c:	cccccccd 	.word	0xcccccccd
 80085a0:	40020000 	.word	0x40020000
 80085a4:	bffdfbf8 	.word	0xbffdfbf8
 80085a8:	40020400 	.word	0x40020400

080085ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
 80085b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_DMA_Start_IT+0x20>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e04a      	b.n	8008662 <HAL_DMA_Start_IT+0xb6>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d13a      	bne.n	8008654 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 fb76 	bl	8008cf4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d008      	beq.n	8008622 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 020e 	orr.w	r2, r2, #14
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	e00f      	b.n	8008642 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0204 	bic.w	r2, r2, #4
 8008630:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 020a 	orr.w	r2, r2, #10
 8008640:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f042 0201 	orr.w	r2, r2, #1
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	e005      	b.n	8008660 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800865c:	2302      	movs	r3, #2
 800865e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008660:	7dfb      	ldrb	r3, [r7, #23]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800867e:	2b02      	cmp	r3, #2
 8008680:	d005      	beq.n	800868e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2204      	movs	r2, #4
 8008686:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	73fb      	strb	r3, [r7, #15]
 800868c:	e0d6      	b.n	800883c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 020e 	bic.w	r2, r2, #14
 800869c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0201 	bic.w	r2, r2, #1
 80086ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	4b64      	ldr	r3, [pc, #400]	; (8008848 <HAL_DMA_Abort_IT+0x1dc>)
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d958      	bls.n	800876c <HAL_DMA_Abort_IT+0x100>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a63      	ldr	r2, [pc, #396]	; (800884c <HAL_DMA_Abort_IT+0x1e0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d04f      	beq.n	8008764 <HAL_DMA_Abort_IT+0xf8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a61      	ldr	r2, [pc, #388]	; (8008850 <HAL_DMA_Abort_IT+0x1e4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d048      	beq.n	8008760 <HAL_DMA_Abort_IT+0xf4>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a60      	ldr	r2, [pc, #384]	; (8008854 <HAL_DMA_Abort_IT+0x1e8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d040      	beq.n	800875a <HAL_DMA_Abort_IT+0xee>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a5e      	ldr	r2, [pc, #376]	; (8008858 <HAL_DMA_Abort_IT+0x1ec>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d038      	beq.n	8008754 <HAL_DMA_Abort_IT+0xe8>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a5d      	ldr	r2, [pc, #372]	; (800885c <HAL_DMA_Abort_IT+0x1f0>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d030      	beq.n	800874e <HAL_DMA_Abort_IT+0xe2>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a5b      	ldr	r2, [pc, #364]	; (8008860 <HAL_DMA_Abort_IT+0x1f4>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d028      	beq.n	8008748 <HAL_DMA_Abort_IT+0xdc>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a53      	ldr	r2, [pc, #332]	; (8008848 <HAL_DMA_Abort_IT+0x1dc>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d020      	beq.n	8008742 <HAL_DMA_Abort_IT+0xd6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a57      	ldr	r2, [pc, #348]	; (8008864 <HAL_DMA_Abort_IT+0x1f8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d019      	beq.n	800873e <HAL_DMA_Abort_IT+0xd2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a56      	ldr	r2, [pc, #344]	; (8008868 <HAL_DMA_Abort_IT+0x1fc>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d012      	beq.n	800873a <HAL_DMA_Abort_IT+0xce>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a54      	ldr	r2, [pc, #336]	; (800886c <HAL_DMA_Abort_IT+0x200>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00a      	beq.n	8008734 <HAL_DMA_Abort_IT+0xc8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a53      	ldr	r2, [pc, #332]	; (8008870 <HAL_DMA_Abort_IT+0x204>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d102      	bne.n	800872e <HAL_DMA_Abort_IT+0xc2>
 8008728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800872c:	e01b      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 800872e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008732:	e018      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 8008734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008738:	e015      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 800873a:	2310      	movs	r3, #16
 800873c:	e013      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 800873e:	2301      	movs	r3, #1
 8008740:	e011      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 8008742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008746:	e00e      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 8008748:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800874c:	e00b      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 800874e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008752:	e008      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 8008754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008758:	e005      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 800875a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800875e:	e002      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 8008760:	2310      	movs	r3, #16
 8008762:	e000      	b.n	8008766 <HAL_DMA_Abort_IT+0xfa>
 8008764:	2301      	movs	r3, #1
 8008766:	4a43      	ldr	r2, [pc, #268]	; (8008874 <HAL_DMA_Abort_IT+0x208>)
 8008768:	6053      	str	r3, [r2, #4]
 800876a:	e057      	b.n	800881c <HAL_DMA_Abort_IT+0x1b0>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a36      	ldr	r2, [pc, #216]	; (800884c <HAL_DMA_Abort_IT+0x1e0>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d04f      	beq.n	8008816 <HAL_DMA_Abort_IT+0x1aa>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a35      	ldr	r2, [pc, #212]	; (8008850 <HAL_DMA_Abort_IT+0x1e4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d048      	beq.n	8008812 <HAL_DMA_Abort_IT+0x1a6>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a33      	ldr	r2, [pc, #204]	; (8008854 <HAL_DMA_Abort_IT+0x1e8>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d040      	beq.n	800880c <HAL_DMA_Abort_IT+0x1a0>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a32      	ldr	r2, [pc, #200]	; (8008858 <HAL_DMA_Abort_IT+0x1ec>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d038      	beq.n	8008806 <HAL_DMA_Abort_IT+0x19a>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a30      	ldr	r2, [pc, #192]	; (800885c <HAL_DMA_Abort_IT+0x1f0>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d030      	beq.n	8008800 <HAL_DMA_Abort_IT+0x194>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a2f      	ldr	r2, [pc, #188]	; (8008860 <HAL_DMA_Abort_IT+0x1f4>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d028      	beq.n	80087fa <HAL_DMA_Abort_IT+0x18e>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a26      	ldr	r2, [pc, #152]	; (8008848 <HAL_DMA_Abort_IT+0x1dc>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d020      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x188>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2b      	ldr	r2, [pc, #172]	; (8008864 <HAL_DMA_Abort_IT+0x1f8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d019      	beq.n	80087f0 <HAL_DMA_Abort_IT+0x184>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a29      	ldr	r2, [pc, #164]	; (8008868 <HAL_DMA_Abort_IT+0x1fc>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d012      	beq.n	80087ec <HAL_DMA_Abort_IT+0x180>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a28      	ldr	r2, [pc, #160]	; (800886c <HAL_DMA_Abort_IT+0x200>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d00a      	beq.n	80087e6 <HAL_DMA_Abort_IT+0x17a>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a26      	ldr	r2, [pc, #152]	; (8008870 <HAL_DMA_Abort_IT+0x204>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d102      	bne.n	80087e0 <HAL_DMA_Abort_IT+0x174>
 80087da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087de:	e01b      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 80087e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087e4:	e018      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 80087e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ea:	e015      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 80087ec:	2310      	movs	r3, #16
 80087ee:	e013      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e011      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 80087f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087f8:	e00e      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 80087fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087fe:	e00b      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 8008800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008804:	e008      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 8008806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800880a:	e005      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 800880c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008810:	e002      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 8008812:	2310      	movs	r3, #16
 8008814:	e000      	b.n	8008818 <HAL_DMA_Abort_IT+0x1ac>
 8008816:	2301      	movs	r3, #1
 8008818:	4a17      	ldr	r2, [pc, #92]	; (8008878 <HAL_DMA_Abort_IT+0x20c>)
 800881a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008830:	2b00      	cmp	r3, #0
 8008832:	d003      	beq.n	800883c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
    } 
  }
  return status;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	40020080 	.word	0x40020080
 800884c:	40020008 	.word	0x40020008
 8008850:	4002001c 	.word	0x4002001c
 8008854:	40020030 	.word	0x40020030
 8008858:	40020044 	.word	0x40020044
 800885c:	40020058 	.word	0x40020058
 8008860:	4002006c 	.word	0x4002006c
 8008864:	40020408 	.word	0x40020408
 8008868:	4002041c 	.word	0x4002041c
 800886c:	40020430 	.word	0x40020430
 8008870:	40020444 	.word	0x40020444
 8008874:	40020400 	.word	0x40020400
 8008878:	40020000 	.word	0x40020000

0800887c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008898:	2204      	movs	r2, #4
 800889a:	409a      	lsls	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4013      	ands	r3, r2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 80d6 	beq.w	8008a52 <HAL_DMA_IRQHandler+0x1d6>
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 80d0 	beq.w	8008a52 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d107      	bne.n	80088d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0204 	bic.w	r2, r2, #4
 80088ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b9b      	ldr	r3, [pc, #620]	; (8008b44 <HAL_DMA_IRQHandler+0x2c8>)
 80088d8:	429a      	cmp	r2, r3
 80088da:	d958      	bls.n	800898e <HAL_DMA_IRQHandler+0x112>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a99      	ldr	r2, [pc, #612]	; (8008b48 <HAL_DMA_IRQHandler+0x2cc>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d04f      	beq.n	8008986 <HAL_DMA_IRQHandler+0x10a>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a98      	ldr	r2, [pc, #608]	; (8008b4c <HAL_DMA_IRQHandler+0x2d0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d048      	beq.n	8008982 <HAL_DMA_IRQHandler+0x106>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a96      	ldr	r2, [pc, #600]	; (8008b50 <HAL_DMA_IRQHandler+0x2d4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d040      	beq.n	800897c <HAL_DMA_IRQHandler+0x100>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a95      	ldr	r2, [pc, #596]	; (8008b54 <HAL_DMA_IRQHandler+0x2d8>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d038      	beq.n	8008976 <HAL_DMA_IRQHandler+0xfa>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a93      	ldr	r2, [pc, #588]	; (8008b58 <HAL_DMA_IRQHandler+0x2dc>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d030      	beq.n	8008970 <HAL_DMA_IRQHandler+0xf4>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a92      	ldr	r2, [pc, #584]	; (8008b5c <HAL_DMA_IRQHandler+0x2e0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d028      	beq.n	800896a <HAL_DMA_IRQHandler+0xee>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a89      	ldr	r2, [pc, #548]	; (8008b44 <HAL_DMA_IRQHandler+0x2c8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d020      	beq.n	8008964 <HAL_DMA_IRQHandler+0xe8>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a8e      	ldr	r2, [pc, #568]	; (8008b60 <HAL_DMA_IRQHandler+0x2e4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d019      	beq.n	8008960 <HAL_DMA_IRQHandler+0xe4>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a8c      	ldr	r2, [pc, #560]	; (8008b64 <HAL_DMA_IRQHandler+0x2e8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d012      	beq.n	800895c <HAL_DMA_IRQHandler+0xe0>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a8b      	ldr	r2, [pc, #556]	; (8008b68 <HAL_DMA_IRQHandler+0x2ec>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d00a      	beq.n	8008956 <HAL_DMA_IRQHandler+0xda>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a89      	ldr	r2, [pc, #548]	; (8008b6c <HAL_DMA_IRQHandler+0x2f0>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d102      	bne.n	8008950 <HAL_DMA_IRQHandler+0xd4>
 800894a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800894e:	e01b      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008950:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008954:	e018      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800895a:	e015      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	e013      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008960:	2304      	movs	r3, #4
 8008962:	e011      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008964:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008968:	e00e      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 800896a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800896e:	e00b      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008970:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008974:	e008      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800897a:	e005      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 800897c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008980:	e002      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008982:	2340      	movs	r3, #64	; 0x40
 8008984:	e000      	b.n	8008988 <HAL_DMA_IRQHandler+0x10c>
 8008986:	2304      	movs	r3, #4
 8008988:	4a79      	ldr	r2, [pc, #484]	; (8008b70 <HAL_DMA_IRQHandler+0x2f4>)
 800898a:	6053      	str	r3, [r2, #4]
 800898c:	e057      	b.n	8008a3e <HAL_DMA_IRQHandler+0x1c2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a6d      	ldr	r2, [pc, #436]	; (8008b48 <HAL_DMA_IRQHandler+0x2cc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d04f      	beq.n	8008a38 <HAL_DMA_IRQHandler+0x1bc>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a6b      	ldr	r2, [pc, #428]	; (8008b4c <HAL_DMA_IRQHandler+0x2d0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d048      	beq.n	8008a34 <HAL_DMA_IRQHandler+0x1b8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a6a      	ldr	r2, [pc, #424]	; (8008b50 <HAL_DMA_IRQHandler+0x2d4>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d040      	beq.n	8008a2e <HAL_DMA_IRQHandler+0x1b2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a68      	ldr	r2, [pc, #416]	; (8008b54 <HAL_DMA_IRQHandler+0x2d8>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d038      	beq.n	8008a28 <HAL_DMA_IRQHandler+0x1ac>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a67      	ldr	r2, [pc, #412]	; (8008b58 <HAL_DMA_IRQHandler+0x2dc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d030      	beq.n	8008a22 <HAL_DMA_IRQHandler+0x1a6>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a65      	ldr	r2, [pc, #404]	; (8008b5c <HAL_DMA_IRQHandler+0x2e0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d028      	beq.n	8008a1c <HAL_DMA_IRQHandler+0x1a0>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a5d      	ldr	r2, [pc, #372]	; (8008b44 <HAL_DMA_IRQHandler+0x2c8>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d020      	beq.n	8008a16 <HAL_DMA_IRQHandler+0x19a>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a61      	ldr	r2, [pc, #388]	; (8008b60 <HAL_DMA_IRQHandler+0x2e4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d019      	beq.n	8008a12 <HAL_DMA_IRQHandler+0x196>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a60      	ldr	r2, [pc, #384]	; (8008b64 <HAL_DMA_IRQHandler+0x2e8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d012      	beq.n	8008a0e <HAL_DMA_IRQHandler+0x192>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a5e      	ldr	r2, [pc, #376]	; (8008b68 <HAL_DMA_IRQHandler+0x2ec>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00a      	beq.n	8008a08 <HAL_DMA_IRQHandler+0x18c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a5d      	ldr	r2, [pc, #372]	; (8008b6c <HAL_DMA_IRQHandler+0x2f0>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d102      	bne.n	8008a02 <HAL_DMA_IRQHandler+0x186>
 80089fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a00:	e01b      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a06:	e018      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a0c:	e015      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a0e:	2340      	movs	r3, #64	; 0x40
 8008a10:	e013      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a12:	2304      	movs	r3, #4
 8008a14:	e011      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008a1a:	e00e      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a20:	e00b      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a26:	e008      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a2c:	e005      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a32:	e002      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	e000      	b.n	8008a3a <HAL_DMA_IRQHandler+0x1be>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	4a4e      	ldr	r2, [pc, #312]	; (8008b74 <HAL_DMA_IRQHandler+0x2f8>)
 8008a3c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8136 	beq.w	8008cb4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008a50:	e130      	b.n	8008cb4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	2202      	movs	r2, #2
 8008a58:	409a      	lsls	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 80f8 	beq.w	8008c54 <HAL_DMA_IRQHandler+0x3d8>
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f000 80f2 	beq.w	8008c54 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10b      	bne.n	8008a96 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 020a 	bic.w	r2, r2, #10
 8008a8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4b29      	ldr	r3, [pc, #164]	; (8008b44 <HAL_DMA_IRQHandler+0x2c8>)
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d973      	bls.n	8008b8a <HAL_DMA_IRQHandler+0x30e>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a28      	ldr	r2, [pc, #160]	; (8008b48 <HAL_DMA_IRQHandler+0x2cc>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d06a      	beq.n	8008b82 <HAL_DMA_IRQHandler+0x306>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a26      	ldr	r2, [pc, #152]	; (8008b4c <HAL_DMA_IRQHandler+0x2d0>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d063      	beq.n	8008b7e <HAL_DMA_IRQHandler+0x302>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a25      	ldr	r2, [pc, #148]	; (8008b50 <HAL_DMA_IRQHandler+0x2d4>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d05b      	beq.n	8008b78 <HAL_DMA_IRQHandler+0x2fc>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a23      	ldr	r2, [pc, #140]	; (8008b54 <HAL_DMA_IRQHandler+0x2d8>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d038      	beq.n	8008b3c <HAL_DMA_IRQHandler+0x2c0>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a22      	ldr	r2, [pc, #136]	; (8008b58 <HAL_DMA_IRQHandler+0x2dc>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d030      	beq.n	8008b36 <HAL_DMA_IRQHandler+0x2ba>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a20      	ldr	r2, [pc, #128]	; (8008b5c <HAL_DMA_IRQHandler+0x2e0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d028      	beq.n	8008b30 <HAL_DMA_IRQHandler+0x2b4>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a18      	ldr	r2, [pc, #96]	; (8008b44 <HAL_DMA_IRQHandler+0x2c8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d020      	beq.n	8008b2a <HAL_DMA_IRQHandler+0x2ae>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1c      	ldr	r2, [pc, #112]	; (8008b60 <HAL_DMA_IRQHandler+0x2e4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d019      	beq.n	8008b26 <HAL_DMA_IRQHandler+0x2aa>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a1b      	ldr	r2, [pc, #108]	; (8008b64 <HAL_DMA_IRQHandler+0x2e8>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d012      	beq.n	8008b22 <HAL_DMA_IRQHandler+0x2a6>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a19      	ldr	r2, [pc, #100]	; (8008b68 <HAL_DMA_IRQHandler+0x2ec>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00a      	beq.n	8008b1c <HAL_DMA_IRQHandler+0x2a0>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <HAL_DMA_IRQHandler+0x2f0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d102      	bne.n	8008b16 <HAL_DMA_IRQHandler+0x29a>
 8008b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b14:	e036      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b1a:	e033      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b20:	e030      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b22:	2320      	movs	r3, #32
 8008b24:	e02e      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b26:	2302      	movs	r3, #2
 8008b28:	e02c      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b2e:	e029      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b34:	e026      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b3a:	e023      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b40:	e020      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b42:	bf00      	nop
 8008b44:	40020080 	.word	0x40020080
 8008b48:	40020008 	.word	0x40020008
 8008b4c:	4002001c 	.word	0x4002001c
 8008b50:	40020030 	.word	0x40020030
 8008b54:	40020044 	.word	0x40020044
 8008b58:	40020058 	.word	0x40020058
 8008b5c:	4002006c 	.word	0x4002006c
 8008b60:	40020408 	.word	0x40020408
 8008b64:	4002041c 	.word	0x4002041c
 8008b68:	40020430 	.word	0x40020430
 8008b6c:	40020444 	.word	0x40020444
 8008b70:	40020400 	.word	0x40020400
 8008b74:	40020000 	.word	0x40020000
 8008b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7c:	e002      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b7e:	2320      	movs	r3, #32
 8008b80:	e000      	b.n	8008b84 <HAL_DMA_IRQHandler+0x308>
 8008b82:	2302      	movs	r3, #2
 8008b84:	4a4e      	ldr	r2, [pc, #312]	; (8008cc0 <HAL_DMA_IRQHandler+0x444>)
 8008b86:	6053      	str	r3, [r2, #4]
 8008b88:	e057      	b.n	8008c3a <HAL_DMA_IRQHandler+0x3be>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a4d      	ldr	r2, [pc, #308]	; (8008cc4 <HAL_DMA_IRQHandler+0x448>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d04f      	beq.n	8008c34 <HAL_DMA_IRQHandler+0x3b8>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a4b      	ldr	r2, [pc, #300]	; (8008cc8 <HAL_DMA_IRQHandler+0x44c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d048      	beq.n	8008c30 <HAL_DMA_IRQHandler+0x3b4>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a4a      	ldr	r2, [pc, #296]	; (8008ccc <HAL_DMA_IRQHandler+0x450>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d040      	beq.n	8008c2a <HAL_DMA_IRQHandler+0x3ae>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a48      	ldr	r2, [pc, #288]	; (8008cd0 <HAL_DMA_IRQHandler+0x454>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d038      	beq.n	8008c24 <HAL_DMA_IRQHandler+0x3a8>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a47      	ldr	r2, [pc, #284]	; (8008cd4 <HAL_DMA_IRQHandler+0x458>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d030      	beq.n	8008c1e <HAL_DMA_IRQHandler+0x3a2>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a45      	ldr	r2, [pc, #276]	; (8008cd8 <HAL_DMA_IRQHandler+0x45c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d028      	beq.n	8008c18 <HAL_DMA_IRQHandler+0x39c>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a44      	ldr	r2, [pc, #272]	; (8008cdc <HAL_DMA_IRQHandler+0x460>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d020      	beq.n	8008c12 <HAL_DMA_IRQHandler+0x396>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a42      	ldr	r2, [pc, #264]	; (8008ce0 <HAL_DMA_IRQHandler+0x464>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d019      	beq.n	8008c0e <HAL_DMA_IRQHandler+0x392>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a41      	ldr	r2, [pc, #260]	; (8008ce4 <HAL_DMA_IRQHandler+0x468>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d012      	beq.n	8008c0a <HAL_DMA_IRQHandler+0x38e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a3f      	ldr	r2, [pc, #252]	; (8008ce8 <HAL_DMA_IRQHandler+0x46c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d00a      	beq.n	8008c04 <HAL_DMA_IRQHandler+0x388>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a3e      	ldr	r2, [pc, #248]	; (8008cec <HAL_DMA_IRQHandler+0x470>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d102      	bne.n	8008bfe <HAL_DMA_IRQHandler+0x382>
 8008bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bfc:	e01b      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c02:	e018      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c08:	e015      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c0a:	2320      	movs	r3, #32
 8008c0c:	e013      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e011      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c16:	e00e      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c1c:	e00b      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c22:	e008      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c28:	e005      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c2e:	e002      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c30:	2320      	movs	r3, #32
 8008c32:	e000      	b.n	8008c36 <HAL_DMA_IRQHandler+0x3ba>
 8008c34:	2302      	movs	r3, #2
 8008c36:	4a2e      	ldr	r2, [pc, #184]	; (8008cf0 <HAL_DMA_IRQHandler+0x474>)
 8008c38:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d034      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008c52:	e02f      	b.n	8008cb4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	2208      	movs	r2, #8
 8008c5a:	409a      	lsls	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d028      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0x43a>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f003 0308 	and.w	r3, r3, #8
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d023      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 020e 	bic.w	r2, r2, #14
 8008c7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c86:	2101      	movs	r1, #1
 8008c88:	fa01 f202 	lsl.w	r2, r1, r2
 8008c8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2201      	movs	r2, #1
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
    }
  }
  return;
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
}
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	40020400 	.word	0x40020400
 8008cc4:	40020008 	.word	0x40020008
 8008cc8:	4002001c 	.word	0x4002001c
 8008ccc:	40020030 	.word	0x40020030
 8008cd0:	40020044 	.word	0x40020044
 8008cd4:	40020058 	.word	0x40020058
 8008cd8:	4002006c 	.word	0x4002006c
 8008cdc:	40020080 	.word	0x40020080
 8008ce0:	40020408 	.word	0x40020408
 8008ce4:	4002041c 	.word	0x4002041c
 8008ce8:	40020430 	.word	0x40020430
 8008cec:	40020444 	.word	0x40020444
 8008cf0:	40020000 	.word	0x40020000

08008cf4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	607a      	str	r2, [r7, #4]
 8008d00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8008d10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	d108      	bne.n	8008d34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008d32:	e007      	b.n	8008d44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	60da      	str	r2, [r3, #12]
}
 8008d44:	bf00      	nop
 8008d46:	3714      	adds	r7, #20
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
	...

08008d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b08b      	sub	sp, #44	; 0x2c
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008d62:	e179      	b.n	8009058 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008d64:	2201      	movs	r2, #1
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	4013      	ands	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	f040 8168 	bne.w	8009052 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	4aa0      	ldr	r2, [pc, #640]	; (8009008 <HAL_GPIO_Init+0x2b8>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d05e      	beq.n	8008e4a <HAL_GPIO_Init+0xfa>
 8008d8c:	4a9e      	ldr	r2, [pc, #632]	; (8009008 <HAL_GPIO_Init+0x2b8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d875      	bhi.n	8008e7e <HAL_GPIO_Init+0x12e>
 8008d92:	4a9e      	ldr	r2, [pc, #632]	; (800900c <HAL_GPIO_Init+0x2bc>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d058      	beq.n	8008e4a <HAL_GPIO_Init+0xfa>
 8008d98:	4a9c      	ldr	r2, [pc, #624]	; (800900c <HAL_GPIO_Init+0x2bc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d86f      	bhi.n	8008e7e <HAL_GPIO_Init+0x12e>
 8008d9e:	4a9c      	ldr	r2, [pc, #624]	; (8009010 <HAL_GPIO_Init+0x2c0>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d052      	beq.n	8008e4a <HAL_GPIO_Init+0xfa>
 8008da4:	4a9a      	ldr	r2, [pc, #616]	; (8009010 <HAL_GPIO_Init+0x2c0>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d869      	bhi.n	8008e7e <HAL_GPIO_Init+0x12e>
 8008daa:	4a9a      	ldr	r2, [pc, #616]	; (8009014 <HAL_GPIO_Init+0x2c4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d04c      	beq.n	8008e4a <HAL_GPIO_Init+0xfa>
 8008db0:	4a98      	ldr	r2, [pc, #608]	; (8009014 <HAL_GPIO_Init+0x2c4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d863      	bhi.n	8008e7e <HAL_GPIO_Init+0x12e>
 8008db6:	4a98      	ldr	r2, [pc, #608]	; (8009018 <HAL_GPIO_Init+0x2c8>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d046      	beq.n	8008e4a <HAL_GPIO_Init+0xfa>
 8008dbc:	4a96      	ldr	r2, [pc, #600]	; (8009018 <HAL_GPIO_Init+0x2c8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d85d      	bhi.n	8008e7e <HAL_GPIO_Init+0x12e>
 8008dc2:	2b12      	cmp	r3, #18
 8008dc4:	d82a      	bhi.n	8008e1c <HAL_GPIO_Init+0xcc>
 8008dc6:	2b12      	cmp	r3, #18
 8008dc8:	d859      	bhi.n	8008e7e <HAL_GPIO_Init+0x12e>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <HAL_GPIO_Init+0x80>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e4b 	.word	0x08008e4b
 8008dd4:	08008e25 	.word	0x08008e25
 8008dd8:	08008e37 	.word	0x08008e37
 8008ddc:	08008e79 	.word	0x08008e79
 8008de0:	08008e7f 	.word	0x08008e7f
 8008de4:	08008e7f 	.word	0x08008e7f
 8008de8:	08008e7f 	.word	0x08008e7f
 8008dec:	08008e7f 	.word	0x08008e7f
 8008df0:	08008e7f 	.word	0x08008e7f
 8008df4:	08008e7f 	.word	0x08008e7f
 8008df8:	08008e7f 	.word	0x08008e7f
 8008dfc:	08008e7f 	.word	0x08008e7f
 8008e00:	08008e7f 	.word	0x08008e7f
 8008e04:	08008e7f 	.word	0x08008e7f
 8008e08:	08008e7f 	.word	0x08008e7f
 8008e0c:	08008e7f 	.word	0x08008e7f
 8008e10:	08008e7f 	.word	0x08008e7f
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e41 	.word	0x08008e41
 8008e1c:	4a7f      	ldr	r2, [pc, #508]	; (800901c <HAL_GPIO_Init+0x2cc>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008e22:	e02c      	b.n	8008e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	623b      	str	r3, [r7, #32]
          break;
 8008e2a:	e029      	b.n	8008e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	3304      	adds	r3, #4
 8008e32:	623b      	str	r3, [r7, #32]
          break;
 8008e34:	e024      	b.n	8008e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	623b      	str	r3, [r7, #32]
          break;
 8008e3e:	e01f      	b.n	8008e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	330c      	adds	r3, #12
 8008e46:	623b      	str	r3, [r7, #32]
          break;
 8008e48:	e01a      	b.n	8008e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008e52:	2304      	movs	r3, #4
 8008e54:	623b      	str	r3, [r7, #32]
          break;
 8008e56:	e013      	b.n	8008e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d105      	bne.n	8008e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e60:	2308      	movs	r3, #8
 8008e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	69fa      	ldr	r2, [r7, #28]
 8008e68:	611a      	str	r2, [r3, #16]
          break;
 8008e6a:	e009      	b.n	8008e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008e6c:	2308      	movs	r3, #8
 8008e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	615a      	str	r2, [r3, #20]
          break;
 8008e76:	e003      	b.n	8008e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	623b      	str	r3, [r7, #32]
          break;
 8008e7c:	e000      	b.n	8008e80 <HAL_GPIO_Init+0x130>
          break;
 8008e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2bff      	cmp	r3, #255	; 0xff
 8008e84:	d801      	bhi.n	8008e8a <HAL_GPIO_Init+0x13a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	e001      	b.n	8008e8e <HAL_GPIO_Init+0x13e>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2bff      	cmp	r3, #255	; 0xff
 8008e94:	d802      	bhi.n	8008e9c <HAL_GPIO_Init+0x14c>
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	e002      	b.n	8008ea2 <HAL_GPIO_Init+0x152>
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	3b08      	subs	r3, #8
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	210f      	movs	r1, #15
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	401a      	ands	r2, r3
 8008eb4:	6a39      	ldr	r1, [r7, #32]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 80c1 	beq.w	8009052 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008ed0:	4b53      	ldr	r3, [pc, #332]	; (8009020 <HAL_GPIO_Init+0x2d0>)
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	4a52      	ldr	r2, [pc, #328]	; (8009020 <HAL_GPIO_Init+0x2d0>)
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	6193      	str	r3, [r2, #24]
 8008edc:	4b50      	ldr	r3, [pc, #320]	; (8009020 <HAL_GPIO_Init+0x2d0>)
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	60bb      	str	r3, [r7, #8]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008ee8:	4a4e      	ldr	r2, [pc, #312]	; (8009024 <HAL_GPIO_Init+0x2d4>)
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	089b      	lsrs	r3, r3, #2
 8008eee:	3302      	adds	r3, #2
 8008ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	f003 0303 	and.w	r3, r3, #3
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	220f      	movs	r2, #15
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	43db      	mvns	r3, r3
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4013      	ands	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a46      	ldr	r2, [pc, #280]	; (8009028 <HAL_GPIO_Init+0x2d8>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d01f      	beq.n	8008f54 <HAL_GPIO_Init+0x204>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a45      	ldr	r2, [pc, #276]	; (800902c <HAL_GPIO_Init+0x2dc>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d019      	beq.n	8008f50 <HAL_GPIO_Init+0x200>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a44      	ldr	r2, [pc, #272]	; (8009030 <HAL_GPIO_Init+0x2e0>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d013      	beq.n	8008f4c <HAL_GPIO_Init+0x1fc>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a43      	ldr	r2, [pc, #268]	; (8009034 <HAL_GPIO_Init+0x2e4>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00d      	beq.n	8008f48 <HAL_GPIO_Init+0x1f8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a42      	ldr	r2, [pc, #264]	; (8009038 <HAL_GPIO_Init+0x2e8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d007      	beq.n	8008f44 <HAL_GPIO_Init+0x1f4>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a41      	ldr	r2, [pc, #260]	; (800903c <HAL_GPIO_Init+0x2ec>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d101      	bne.n	8008f40 <HAL_GPIO_Init+0x1f0>
 8008f3c:	2305      	movs	r3, #5
 8008f3e:	e00a      	b.n	8008f56 <HAL_GPIO_Init+0x206>
 8008f40:	2306      	movs	r3, #6
 8008f42:	e008      	b.n	8008f56 <HAL_GPIO_Init+0x206>
 8008f44:	2304      	movs	r3, #4
 8008f46:	e006      	b.n	8008f56 <HAL_GPIO_Init+0x206>
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e004      	b.n	8008f56 <HAL_GPIO_Init+0x206>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e002      	b.n	8008f56 <HAL_GPIO_Init+0x206>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <HAL_GPIO_Init+0x206>
 8008f54:	2300      	movs	r3, #0
 8008f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f58:	f002 0203 	and.w	r2, r2, #3
 8008f5c:	0092      	lsls	r2, r2, #2
 8008f5e:	4093      	lsls	r3, r2
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008f66:	492f      	ldr	r1, [pc, #188]	; (8009024 <HAL_GPIO_Init+0x2d4>)
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	089b      	lsrs	r3, r3, #2
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008f80:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	492e      	ldr	r1, [pc, #184]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	600b      	str	r3, [r1, #0]
 8008f8c:	e006      	b.n	8008f9c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f8e:	4b2c      	ldr	r3, [pc, #176]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	43db      	mvns	r3, r3
 8008f96:	492a      	ldr	r1, [pc, #168]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d006      	beq.n	8008fb6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008fa8:	4b25      	ldr	r3, [pc, #148]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	4924      	ldr	r1, [pc, #144]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	604b      	str	r3, [r1, #4]
 8008fb4:	e006      	b.n	8008fc4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008fb6:	4b22      	ldr	r3, [pc, #136]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	4920      	ldr	r1, [pc, #128]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008fd0:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008fd2:	689a      	ldr	r2, [r3, #8]
 8008fd4:	491a      	ldr	r1, [pc, #104]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	608b      	str	r3, [r1, #8]
 8008fdc:	e006      	b.n	8008fec <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008fde:	4b18      	ldr	r3, [pc, #96]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	4916      	ldr	r1, [pc, #88]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d025      	beq.n	8009044 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008ff8:	4b11      	ldr	r3, [pc, #68]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	4910      	ldr	r1, [pc, #64]	; (8009040 <HAL_GPIO_Init+0x2f0>)
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	4313      	orrs	r3, r2
 8009002:	60cb      	str	r3, [r1, #12]
 8009004:	e025      	b.n	8009052 <HAL_GPIO_Init+0x302>
 8009006:	bf00      	nop
 8009008:	10320000 	.word	0x10320000
 800900c:	10310000 	.word	0x10310000
 8009010:	10220000 	.word	0x10220000
 8009014:	10210000 	.word	0x10210000
 8009018:	10120000 	.word	0x10120000
 800901c:	10110000 	.word	0x10110000
 8009020:	40021000 	.word	0x40021000
 8009024:	40010000 	.word	0x40010000
 8009028:	40010800 	.word	0x40010800
 800902c:	40010c00 	.word	0x40010c00
 8009030:	40011000 	.word	0x40011000
 8009034:	40011400 	.word	0x40011400
 8009038:	40011800 	.word	0x40011800
 800903c:	40011c00 	.word	0x40011c00
 8009040:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009044:	4b0b      	ldr	r3, [pc, #44]	; (8009074 <HAL_GPIO_Init+0x324>)
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	43db      	mvns	r3, r3
 800904c:	4909      	ldr	r1, [pc, #36]	; (8009074 <HAL_GPIO_Init+0x324>)
 800904e:	4013      	ands	r3, r2
 8009050:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	3301      	adds	r3, #1
 8009056:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	fa22 f303 	lsr.w	r3, r2, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	f47f ae7e 	bne.w	8008d64 <HAL_GPIO_Init+0x14>
  }
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	372c      	adds	r7, #44	; 0x2c
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr
 8009074:	40010400 	.word	0x40010400

08009078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	460b      	mov	r3, r1
 8009082:	807b      	strh	r3, [r7, #2]
 8009084:	4613      	mov	r3, r2
 8009086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009088:	787b      	ldrb	r3, [r7, #1]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d003      	beq.n	8009096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800908e:	887a      	ldrh	r2, [r7, #2]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009094:	e003      	b.n	800909e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009096:	887b      	ldrh	r3, [r7, #2]
 8009098:	041a      	lsls	r2, r3, #16
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	611a      	str	r2, [r3, #16]
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr

080090a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090ba:	887a      	ldrh	r2, [r7, #2]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4013      	ands	r3, r2
 80090c0:	041a      	lsls	r2, r3, #16
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	43d9      	mvns	r1, r3
 80090c6:	887b      	ldrh	r3, [r7, #2]
 80090c8:	400b      	ands	r3, r1
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	611a      	str	r2, [r3, #16]
}
 80090d0:	bf00      	nop
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr
	...

080090dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	e12b      	b.n	8009346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7f9 fcd4 	bl	8002ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2224      	movs	r2, #36	; 0x24
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f022 0201 	bic.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800912e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800913e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009140:	f001 fea0 	bl	800ae84 <HAL_RCC_GetPCLK1Freq>
 8009144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	4a81      	ldr	r2, [pc, #516]	; (8009350 <HAL_I2C_Init+0x274>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d807      	bhi.n	8009160 <HAL_I2C_Init+0x84>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4a80      	ldr	r2, [pc, #512]	; (8009354 <HAL_I2C_Init+0x278>)
 8009154:	4293      	cmp	r3, r2
 8009156:	bf94      	ite	ls
 8009158:	2301      	movls	r3, #1
 800915a:	2300      	movhi	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	e006      	b.n	800916e <HAL_I2C_Init+0x92>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4a7d      	ldr	r2, [pc, #500]	; (8009358 <HAL_I2C_Init+0x27c>)
 8009164:	4293      	cmp	r3, r2
 8009166:	bf94      	ite	ls
 8009168:	2301      	movls	r3, #1
 800916a:	2300      	movhi	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	e0e7      	b.n	8009346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4a78      	ldr	r2, [pc, #480]	; (800935c <HAL_I2C_Init+0x280>)
 800917a:	fba2 2303 	umull	r2, r3, r2, r3
 800917e:	0c9b      	lsrs	r3, r3, #18
 8009180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	430a      	orrs	r2, r1
 8009194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	4a6a      	ldr	r2, [pc, #424]	; (8009350 <HAL_I2C_Init+0x274>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d802      	bhi.n	80091b0 <HAL_I2C_Init+0xd4>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	3301      	adds	r3, #1
 80091ae:	e009      	b.n	80091c4 <HAL_I2C_Init+0xe8>
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
 80091ba:	4a69      	ldr	r2, [pc, #420]	; (8009360 <HAL_I2C_Init+0x284>)
 80091bc:	fba2 2303 	umull	r2, r3, r2, r3
 80091c0:	099b      	lsrs	r3, r3, #6
 80091c2:	3301      	adds	r3, #1
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	495c      	ldr	r1, [pc, #368]	; (8009350 <HAL_I2C_Init+0x274>)
 80091e0:	428b      	cmp	r3, r1
 80091e2:	d819      	bhi.n	8009218 <HAL_I2C_Init+0x13c>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	1e59      	subs	r1, r3, #1
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80091f2:	1c59      	adds	r1, r3, #1
 80091f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091f8:	400b      	ands	r3, r1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <HAL_I2C_Init+0x138>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1e59      	subs	r1, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	005b      	lsls	r3, r3, #1
 8009208:	fbb1 f3f3 	udiv	r3, r1, r3
 800920c:	3301      	adds	r3, #1
 800920e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009212:	e051      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009214:	2304      	movs	r3, #4
 8009216:	e04f      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d111      	bne.n	8009244 <HAL_I2C_Init+0x168>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	1e58      	subs	r0, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6859      	ldr	r1, [r3, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	440b      	add	r3, r1
 800922e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009232:	3301      	adds	r3, #1
 8009234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009238:	2b00      	cmp	r3, #0
 800923a:	bf0c      	ite	eq
 800923c:	2301      	moveq	r3, #1
 800923e:	2300      	movne	r3, #0
 8009240:	b2db      	uxtb	r3, r3
 8009242:	e012      	b.n	800926a <HAL_I2C_Init+0x18e>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	1e58      	subs	r0, r3, #1
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6859      	ldr	r1, [r3, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	440b      	add	r3, r1
 8009252:	0099      	lsls	r1, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	fbb0 f3f3 	udiv	r3, r0, r3
 800925a:	3301      	adds	r3, #1
 800925c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009260:	2b00      	cmp	r3, #0
 8009262:	bf0c      	ite	eq
 8009264:	2301      	moveq	r3, #1
 8009266:	2300      	movne	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <HAL_I2C_Init+0x196>
 800926e:	2301      	movs	r3, #1
 8009270:	e022      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10e      	bne.n	8009298 <HAL_I2C_Init+0x1bc>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1e58      	subs	r0, r3, #1
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6859      	ldr	r1, [r3, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	005b      	lsls	r3, r3, #1
 8009286:	440b      	add	r3, r1
 8009288:	fbb0 f3f3 	udiv	r3, r0, r3
 800928c:	3301      	adds	r3, #1
 800928e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009296:	e00f      	b.n	80092b8 <HAL_I2C_Init+0x1dc>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	1e58      	subs	r0, r3, #1
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6859      	ldr	r1, [r3, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	0099      	lsls	r1, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80092ae:	3301      	adds	r3, #1
 80092b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	6809      	ldr	r1, [r1, #0]
 80092bc:	4313      	orrs	r3, r2
 80092be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	69da      	ldr	r2, [r3, #28]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6911      	ldr	r1, [r2, #16]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	68d2      	ldr	r2, [r2, #12]
 80092f2:	4311      	orrs	r1, r2
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6812      	ldr	r2, [r2, #0]
 80092f8:	430b      	orrs	r3, r1
 80092fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695a      	ldr	r2, [r3, #20]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f042 0201 	orr.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2220      	movs	r2, #32
 8009332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	000186a0 	.word	0x000186a0
 8009354:	001e847f 	.word	0x001e847f
 8009358:	003d08ff 	.word	0x003d08ff
 800935c:	431bde83 	.word	0x431bde83
 8009360:	10624dd3 	.word	0x10624dd3

08009364 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	607a      	str	r2, [r7, #4]
 800936e:	461a      	mov	r2, r3
 8009370:	460b      	mov	r3, r1
 8009372:	817b      	strh	r3, [r7, #10]
 8009374:	4613      	mov	r3, r2
 8009376:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009378:	f7fd fcd6 	bl	8006d28 <HAL_GetTick>
 800937c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b20      	cmp	r3, #32
 8009388:	f040 80e0 	bne.w	800954c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	2319      	movs	r3, #25
 8009392:	2201      	movs	r2, #1
 8009394:	4970      	ldr	r1, [pc, #448]	; (8009558 <HAL_I2C_Master_Transmit+0x1f4>)
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f000 ff72 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80093a2:	2302      	movs	r3, #2
 80093a4:	e0d3      	b.n	800954e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_I2C_Master_Transmit+0x50>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e0cc      	b.n	800954e <HAL_I2C_Master_Transmit+0x1ea>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d007      	beq.n	80093da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0201 	orr.w	r2, r2, #1
 80093d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2221      	movs	r2, #33	; 0x21
 80093ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2210      	movs	r2, #16
 80093f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	893a      	ldrh	r2, [r7, #8]
 800940a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4a50      	ldr	r2, [pc, #320]	; (800955c <HAL_I2C_Master_Transmit+0x1f8>)
 800941a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800941c:	8979      	ldrh	r1, [r7, #10]
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	6a3a      	ldr	r2, [r7, #32]
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 fd2c 	bl	8009e80 <I2C_MasterRequestWrite>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e08d      	b.n	800954e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009432:	2300      	movs	r3, #0
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	695b      	ldr	r3, [r3, #20]
 800943c:	613b      	str	r3, [r7, #16]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009448:	e066      	b.n	8009518 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	6a39      	ldr	r1, [r7, #32]
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 ffec 	bl	800a42c <I2C_WaitOnTXEFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00d      	beq.n	8009476 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	2b04      	cmp	r3, #4
 8009460:	d107      	bne.n	8009472 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009470:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e06b      	b.n	800954e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009490:	b29b      	uxth	r3, r3
 8009492:	3b01      	subs	r3, #1
 8009494:	b29a      	uxth	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d11b      	bne.n	80094ec <HAL_I2C_Master_Transmit+0x188>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d017      	beq.n	80094ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	781a      	ldrb	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	1c5a      	adds	r2, r3, #1
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	6a39      	ldr	r1, [r7, #32]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 ffdc 	bl	800a4ae <I2C_WaitOnBTFFlagUntilTimeout>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00d      	beq.n	8009518 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	2b04      	cmp	r3, #4
 8009502:	d107      	bne.n	8009514 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009512:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e01a      	b.n	800954e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951c:	2b00      	cmp	r3, #0
 800951e:	d194      	bne.n	800944a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800952e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	e000      	b.n	800954e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800954c:	2302      	movs	r3, #2
  }
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	00100002 	.word	0x00100002
 800955c:	ffff0000 	.word	0xffff0000

08009560 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b088      	sub	sp, #32
 8009564:	af02      	add	r7, sp, #8
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	4608      	mov	r0, r1
 800956a:	4611      	mov	r1, r2
 800956c:	461a      	mov	r2, r3
 800956e:	4603      	mov	r3, r0
 8009570:	817b      	strh	r3, [r7, #10]
 8009572:	460b      	mov	r3, r1
 8009574:	813b      	strh	r3, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800957a:	f7fd fbd5 	bl	8006d28 <HAL_GetTick>
 800957e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b20      	cmp	r3, #32
 800958a:	f040 80d9 	bne.w	8009740 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	2319      	movs	r3, #25
 8009594:	2201      	movs	r2, #1
 8009596:	496d      	ldr	r1, [pc, #436]	; (800974c <HAL_I2C_Mem_Write+0x1ec>)
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 fe71 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80095a4:	2302      	movs	r3, #2
 80095a6:	e0cc      	b.n	8009742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_I2C_Mem_Write+0x56>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e0c5      	b.n	8009742 <HAL_I2C_Mem_Write+0x1e2>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d007      	beq.n	80095dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0201 	orr.w	r2, r2, #1
 80095da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2221      	movs	r2, #33	; 0x21
 80095f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2240      	movs	r2, #64	; 0x40
 80095f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6a3a      	ldr	r2, [r7, #32]
 8009606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800960c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009612:	b29a      	uxth	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4a4d      	ldr	r2, [pc, #308]	; (8009750 <HAL_I2C_Mem_Write+0x1f0>)
 800961c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800961e:	88f8      	ldrh	r0, [r7, #6]
 8009620:	893a      	ldrh	r2, [r7, #8]
 8009622:	8979      	ldrh	r1, [r7, #10]
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	9300      	str	r3, [sp, #0]
 800962c:	4603      	mov	r3, r0
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 fca8 	bl	8009f84 <I2C_RequestMemoryWrite>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d052      	beq.n	80096e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e081      	b.n	8009742 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fef2 	bl	800a42c <I2C_WaitOnTXEFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00d      	beq.n	800966a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	2b04      	cmp	r3, #4
 8009654:	d107      	bne.n	8009666 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e06b      	b.n	8009742 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	781a      	ldrb	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009684:	3b01      	subs	r3, #1
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b04      	cmp	r3, #4
 80096a6:	d11b      	bne.n	80096e0 <HAL_I2C_Mem_Write+0x180>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d017      	beq.n	80096e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	781a      	ldrb	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ca:	3b01      	subs	r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1aa      	bne.n	800963e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fede 	bl	800a4ae <I2C_WaitOnBTFFlagUntilTimeout>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00d      	beq.n	8009714 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	2b04      	cmp	r3, #4
 80096fe:	d107      	bne.n	8009710 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800970e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e016      	b.n	8009742 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	e000      	b.n	8009742 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009740:	2302      	movs	r3, #2
  }
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	00100002 	.word	0x00100002
 8009750:	ffff0000 	.word	0xffff0000

08009754 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08c      	sub	sp, #48	; 0x30
 8009758:	af02      	add	r7, sp, #8
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	461a      	mov	r2, r3
 8009762:	4603      	mov	r3, r0
 8009764:	817b      	strh	r3, [r7, #10]
 8009766:	460b      	mov	r3, r1
 8009768:	813b      	strh	r3, [r7, #8]
 800976a:	4613      	mov	r3, r2
 800976c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009772:	f7fd fad9 	bl	8006d28 <HAL_GetTick>
 8009776:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b20      	cmp	r3, #32
 8009782:	f040 8244 	bne.w	8009c0e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	2319      	movs	r3, #25
 800978c:	2201      	movs	r2, #1
 800978e:	4982      	ldr	r1, [pc, #520]	; (8009998 <HAL_I2C_Mem_Read+0x244>)
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 fd75 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800979c:	2302      	movs	r3, #2
 800979e:	e237      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_I2C_Mem_Read+0x5a>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e230      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d007      	beq.n	80097d4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0201 	orr.w	r2, r2, #1
 80097d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2222      	movs	r2, #34	; 0x22
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2240      	movs	r2, #64	; 0x40
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009804:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980a:	b29a      	uxth	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a62      	ldr	r2, [pc, #392]	; (800999c <HAL_I2C_Mem_Read+0x248>)
 8009814:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009816:	88f8      	ldrh	r0, [r7, #6]
 8009818:	893a      	ldrh	r2, [r7, #8]
 800981a:	8979      	ldrh	r1, [r7, #10]
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	4603      	mov	r3, r0
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fc42 	bl	800a0b0 <I2C_RequestMemoryRead>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d001      	beq.n	8009836 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e1ec      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	d113      	bne.n	8009866 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800983e:	2300      	movs	r3, #0
 8009840:	61fb      	str	r3, [r7, #28]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e1c0      	b.n	8009be8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986a:	2b01      	cmp	r3, #1
 800986c:	d11e      	bne.n	80098ac <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800987c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800987e:	b672      	cpsid	i
}
 8009880:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009882:	2300      	movs	r3, #0
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80098a8:	b662      	cpsie	i
}
 80098aa:	e035      	b.n	8009918 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d11e      	bne.n	80098f2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098c4:	b672      	cpsid	i
}
 80098c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098c8:	2300      	movs	r3, #0
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	617b      	str	r3, [r7, #20]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80098ee:	b662      	cpsie	i
}
 80098f0:	e012      	b.n	8009918 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009900:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009902:	2300      	movs	r3, #0
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	613b      	str	r3, [r7, #16]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009918:	e166      	b.n	8009be8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800991e:	2b03      	cmp	r3, #3
 8009920:	f200 811f 	bhi.w	8009b62 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009928:	2b01      	cmp	r3, #1
 800992a:	d123      	bne.n	8009974 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800992c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f000 fdfd 	bl	800a530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e167      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691a      	ldr	r2, [r3, #16]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	b2d2      	uxtb	r2, r2
 800994c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800995c:	3b01      	subs	r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009968:	b29b      	uxth	r3, r3
 800996a:	3b01      	subs	r3, #1
 800996c:	b29a      	uxth	r2, r3
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009972:	e139      	b.n	8009be8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009978:	2b02      	cmp	r3, #2
 800997a:	d152      	bne.n	8009a22 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	2200      	movs	r2, #0
 8009984:	4906      	ldr	r1, [pc, #24]	; (80099a0 <HAL_I2C_Mem_Read+0x24c>)
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 fc7a 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d008      	beq.n	80099a4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e13c      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
 8009996:	bf00      	nop
 8009998:	00100002 	.word	0x00100002
 800999c:	ffff0000 	.word	0xffff0000
 80099a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80099a4:	b672      	cpsid	i
}
 80099a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691a      	ldr	r2, [r3, #16]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099d4:	3b01      	subs	r3, #1
 80099d6:	b29a      	uxth	r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80099ea:	b662      	cpsie	i
}
 80099ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	691a      	ldr	r2, [r3, #16]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a20:	e0e2      	b.n	8009be8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	2200      	movs	r2, #0
 8009a2a:	497b      	ldr	r1, [pc, #492]	; (8009c18 <HAL_I2C_Mem_Read+0x4c4>)
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fc27 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e0e9      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a4c:	b672      	cpsid	i
}
 8009a4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	b2d2      	uxtb	r2, r2
 8009a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	1c5a      	adds	r2, r3, #1
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009a82:	4b66      	ldr	r3, [pc, #408]	; (8009c1c <HAL_I2C_Mem_Read+0x4c8>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	08db      	lsrs	r3, r3, #3
 8009a88:	4a65      	ldr	r2, [pc, #404]	; (8009c20 <HAL_I2C_Mem_Read+0x4cc>)
 8009a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8e:	0a1a      	lsrs	r2, r3, #8
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	00da      	lsls	r2, r3, #3
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009aa2:	6a3b      	ldr	r3, [r7, #32]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d118      	bne.n	8009ada <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	f043 0220 	orr.w	r2, r3, #32
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009aca:	b662      	cpsie	i
}
 8009acc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e09a      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d1d9      	bne.n	8009a9c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009af6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691a      	ldr	r2, [r3, #16]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b14:	3b01      	subs	r3, #1
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b01      	subs	r3, #1
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b2a:	b662      	cpsie	i
}
 8009b2c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	691a      	ldr	r2, [r3, #16]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	b2d2      	uxtb	r2, r2
 8009b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b60:	e042      	b.n	8009be8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 fce2 	bl	800a530 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e04c      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	691a      	ldr	r2, [r3, #16]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b92:	3b01      	subs	r3, #1
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	3b01      	subs	r3, #1
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	f003 0304 	and.w	r3, r3, #4
 8009bb2:	2b04      	cmp	r3, #4
 8009bb4:	d118      	bne.n	8009be8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	b2d2      	uxtb	r2, r2
 8009bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	3b01      	subs	r3, #1
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f47f ae94 	bne.w	800991a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e000      	b.n	8009c10 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
  }
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3728      	adds	r7, #40	; 0x28
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	00010004 	.word	0x00010004
 8009c1c:	20000070 	.word	0x20000070
 8009c20:	14f8b589 	.word	0x14f8b589

08009c24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08a      	sub	sp, #40	; 0x28
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	460b      	mov	r3, r1
 8009c32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009c34:	f7fd f878 	bl	8006d28 <HAL_GetTick>
 8009c38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	f040 8111 	bne.w	8009e6e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	2319      	movs	r3, #25
 8009c52:	2201      	movs	r2, #1
 8009c54:	4988      	ldr	r1, [pc, #544]	; (8009e78 <HAL_I2C_IsDeviceReady+0x254>)
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 fb12 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d001      	beq.n	8009c66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009c62:	2302      	movs	r3, #2
 8009c64:	e104      	b.n	8009e70 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_I2C_IsDeviceReady+0x50>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e0fd      	b.n	8009e70 <HAL_I2C_IsDeviceReady+0x24c>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d007      	beq.n	8009c9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0201 	orr.w	r2, r2, #1
 8009c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ca8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2224      	movs	r2, #36	; 0x24
 8009cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4a70      	ldr	r2, [pc, #448]	; (8009e7c <HAL_I2C_IsDeviceReady+0x258>)
 8009cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ccc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 fad0 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00d      	beq.n	8009d02 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cf4:	d103      	bne.n	8009cfe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cfc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e0b6      	b.n	8009e70 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d02:	897b      	ldrh	r3, [r7, #10]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d10:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009d12:	f7fd f809 	bl	8006d28 <HAL_GetTick>
 8009d16:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	bf0c      	ite	eq
 8009d26:	2301      	moveq	r3, #1
 8009d28:	2300      	movne	r3, #0
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d3c:	bf0c      	ite	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	2300      	movne	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d46:	e025      	b.n	8009d94 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009d48:	f7fc ffee 	bl	8006d28 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d302      	bcc.n	8009d5e <HAL_I2C_IsDeviceReady+0x13a>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	22a0      	movs	r2, #160	; 0xa0
 8009d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	f003 0302 	and.w	r3, r3, #2
 8009d70:	2b02      	cmp	r3, #2
 8009d72:	bf0c      	ite	eq
 8009d74:	2301      	moveq	r3, #1
 8009d76:	2300      	movne	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d8a:	bf0c      	ite	eq
 8009d8c:	2301      	moveq	r3, #1
 8009d8e:	2300      	movne	r3, #0
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	2ba0      	cmp	r3, #160	; 0xa0
 8009d9e:	d005      	beq.n	8009dac <HAL_I2C_IsDeviceReady+0x188>
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d102      	bne.n	8009dac <HAL_I2C_IsDeviceReady+0x188>
 8009da6:	7dbb      	ldrb	r3, [r7, #22]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d0cd      	beq.n	8009d48 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	f003 0302 	and.w	r3, r3, #2
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d129      	bne.n	8009e16 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	613b      	str	r3, [r7, #16]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	613b      	str	r3, [r7, #16]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	613b      	str	r3, [r7, #16]
 8009de6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	2319      	movs	r3, #25
 8009dee:	2201      	movs	r2, #1
 8009df0:	4921      	ldr	r1, [pc, #132]	; (8009e78 <HAL_I2C_IsDeviceReady+0x254>)
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 fa44 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e036      	b.n	8009e70 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2220      	movs	r2, #32
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e02c      	b.n	8009e70 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e24:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e2e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	2319      	movs	r3, #25
 8009e36:	2201      	movs	r2, #1
 8009e38:	490f      	ldr	r1, [pc, #60]	; (8009e78 <HAL_I2C_IsDeviceReady+0x254>)
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 fa20 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e012      	b.n	8009e70 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	f4ff af32 	bcc.w	8009cbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009e6e:	2302      	movs	r3, #2
  }
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3720      	adds	r7, #32
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	00100002 	.word	0x00100002
 8009e7c:	ffff0000 	.word	0xffff0000

08009e80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af02      	add	r7, sp, #8
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	607a      	str	r2, [r7, #4]
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2b08      	cmp	r3, #8
 8009e9a:	d006      	beq.n	8009eaa <I2C_MasterRequestWrite+0x2a>
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d003      	beq.n	8009eaa <I2C_MasterRequestWrite+0x2a>
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ea8:	d108      	bne.n	8009ebc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	e00b      	b.n	8009ed4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec0:	2b12      	cmp	r3, #18
 8009ec2:	d107      	bne.n	8009ed4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f9cd 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00d      	beq.n	8009f08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009efa:	d103      	bne.n	8009f04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e035      	b.n	8009f74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f10:	d108      	bne.n	8009f24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f12:	897b      	ldrh	r3, [r7, #10]
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f20:	611a      	str	r2, [r3, #16]
 8009f22:	e01b      	b.n	8009f5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009f24:	897b      	ldrh	r3, [r7, #10]
 8009f26:	11db      	asrs	r3, r3, #7
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	f003 0306 	and.w	r3, r3, #6
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f063 030f 	orn	r3, r3, #15
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	490e      	ldr	r1, [pc, #56]	; (8009f7c <I2C_MasterRequestWrite+0xfc>)
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f9f3 	bl	800a32e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e010      	b.n	8009f74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009f52:	897b      	ldrh	r3, [r7, #10]
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	4907      	ldr	r1, [pc, #28]	; (8009f80 <I2C_MasterRequestWrite+0x100>)
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f000 f9e3 	bl	800a32e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e000      	b.n	8009f74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	00010008 	.word	0x00010008
 8009f80:	00010002 	.word	0x00010002

08009f84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	4611      	mov	r1, r2
 8009f90:	461a      	mov	r2, r3
 8009f92:	4603      	mov	r3, r0
 8009f94:	817b      	strh	r3, [r7, #10]
 8009f96:	460b      	mov	r3, r1
 8009f98:	813b      	strh	r3, [r7, #8]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	6a3b      	ldr	r3, [r7, #32]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f960 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00d      	beq.n	8009fe2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fd4:	d103      	bne.n	8009fde <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e05f      	b.n	800a0a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009fe2:	897b      	ldrh	r3, [r7, #10]
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009ff0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	6a3a      	ldr	r2, [r7, #32]
 8009ff6:	492d      	ldr	r1, [pc, #180]	; (800a0ac <I2C_RequestMemoryWrite+0x128>)
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f000 f998 	bl	800a32e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e04c      	b.n	800a0a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a008:	2300      	movs	r3, #0
 800a00a:	617b      	str	r3, [r7, #20]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	617b      	str	r3, [r7, #20]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a020:	6a39      	ldr	r1, [r7, #32]
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fa02 	bl	800a42c <I2C_WaitOnTXEFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00d      	beq.n	800a04a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	2b04      	cmp	r3, #4
 800a034:	d107      	bne.n	800a046 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a044:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a046:	2301      	movs	r3, #1
 800a048:	e02b      	b.n	800a0a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d105      	bne.n	800a05c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a050:	893b      	ldrh	r3, [r7, #8]
 800a052:	b2da      	uxtb	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	611a      	str	r2, [r3, #16]
 800a05a:	e021      	b.n	800a0a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a05c:	893b      	ldrh	r3, [r7, #8]
 800a05e:	0a1b      	lsrs	r3, r3, #8
 800a060:	b29b      	uxth	r3, r3
 800a062:	b2da      	uxtb	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a06c:	6a39      	ldr	r1, [r7, #32]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f9dc 	bl	800a42c <I2C_WaitOnTXEFlagUntilTimeout>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00d      	beq.n	800a096 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d107      	bne.n	800a092 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a090:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e005      	b.n	800a0a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a096:	893b      	ldrh	r3, [r7, #8]
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	00010002 	.word	0x00010002

0800a0b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	af02      	add	r7, sp, #8
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	4611      	mov	r1, r2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4603      	mov	r3, r0
 800a0c0:	817b      	strh	r3, [r7, #10]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	813b      	strh	r3, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a0d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 f8c2 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00d      	beq.n	800a11e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a10c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a110:	d103      	bne.n	800a11a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a118:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e0aa      	b.n	800a274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a11e:	897b      	ldrh	r3, [r7, #10]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	461a      	mov	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a12c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	6a3a      	ldr	r2, [r7, #32]
 800a132:	4952      	ldr	r1, [pc, #328]	; (800a27c <I2C_RequestMemoryRead+0x1cc>)
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 f8fa 	bl	800a32e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e097      	b.n	800a274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a15a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15c:	6a39      	ldr	r1, [r7, #32]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f964 	bl	800a42c <I2C_WaitOnTXEFlagUntilTimeout>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00d      	beq.n	800a186 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d107      	bne.n	800a182 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a180:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e076      	b.n	800a274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a186:	88fb      	ldrh	r3, [r7, #6]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d105      	bne.n	800a198 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a18c:	893b      	ldrh	r3, [r7, #8]
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	611a      	str	r2, [r3, #16]
 800a196:	e021      	b.n	800a1dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a198:	893b      	ldrh	r3, [r7, #8]
 800a19a:	0a1b      	lsrs	r3, r3, #8
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1a8:	6a39      	ldr	r1, [r7, #32]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 f93e 	bl	800a42c <I2C_WaitOnTXEFlagUntilTimeout>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00d      	beq.n	800a1d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d107      	bne.n	800a1ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e050      	b.n	800a274 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a1d2:	893b      	ldrh	r3, [r7, #8]
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1de:	6a39      	ldr	r1, [r7, #32]
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 f923 	bl	800a42c <I2C_WaitOnTXEFlagUntilTimeout>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00d      	beq.n	800a208 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d107      	bne.n	800a204 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a202:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e035      	b.n	800a274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a216:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	2200      	movs	r2, #0
 800a220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f82b 	bl	800a280 <I2C_WaitOnFlagUntilTimeout>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00d      	beq.n	800a24c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a23a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a23e:	d103      	bne.n	800a248 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a246:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e013      	b.n	800a274 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a24c:	897b      	ldrh	r3, [r7, #10]
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	f043 0301 	orr.w	r3, r3, #1
 800a254:	b2da      	uxtb	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	6a3a      	ldr	r2, [r7, #32]
 800a260:	4906      	ldr	r1, [pc, #24]	; (800a27c <I2C_RequestMemoryRead+0x1cc>)
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f000 f863 	bl	800a32e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e000      	b.n	800a274 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3718      	adds	r7, #24
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	00010002 	.word	0x00010002

0800a280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	603b      	str	r3, [r7, #0]
 800a28c:	4613      	mov	r3, r2
 800a28e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a290:	e025      	b.n	800a2de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d021      	beq.n	800a2de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a29a:	f7fc fd45 	bl	8006d28 <HAL_GetTick>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d302      	bcc.n	800a2b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d116      	bne.n	800a2de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	f043 0220 	orr.w	r2, r3, #32
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e023      	b.n	800a326 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	0c1b      	lsrs	r3, r3, #16
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d10d      	bne.n	800a304 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
 800a2ee:	43da      	mvns	r2, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bf0c      	ite	eq
 800a2fa:	2301      	moveq	r3, #1
 800a2fc:	2300      	movne	r3, #0
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	461a      	mov	r2, r3
 800a302:	e00c      	b.n	800a31e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	43da      	mvns	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4013      	ands	r3, r2
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	bf0c      	ite	eq
 800a316:	2301      	moveq	r3, #1
 800a318:	2300      	movne	r3, #0
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	461a      	mov	r2, r3
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	429a      	cmp	r2, r3
 800a322:	d0b6      	beq.n	800a292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	607a      	str	r2, [r7, #4]
 800a33a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a33c:	e051      	b.n	800a3e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a34c:	d123      	bne.n	800a396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a35c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a366:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2220      	movs	r2, #32
 800a372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a382:	f043 0204 	orr.w	r2, r3, #4
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e046      	b.n	800a424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39c:	d021      	beq.n	800a3e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a39e:	f7fc fcc3 	bl	8006d28 <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d302      	bcc.n	800a3b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d116      	bne.n	800a3e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ce:	f043 0220 	orr.w	r2, r3, #32
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e020      	b.n	800a424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	0c1b      	lsrs	r3, r3, #16
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d10c      	bne.n	800a406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	43da      	mvns	r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bf14      	ite	ne
 800a3fe:	2301      	movne	r3, #1
 800a400:	2300      	moveq	r3, #0
 800a402:	b2db      	uxtb	r3, r3
 800a404:	e00b      	b.n	800a41e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	43da      	mvns	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4013      	ands	r3, r2
 800a412:	b29b      	uxth	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	bf14      	ite	ne
 800a418:	2301      	movne	r3, #1
 800a41a:	2300      	moveq	r3, #0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d18d      	bne.n	800a33e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a438:	e02d      	b.n	800a496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 f8ce 	bl	800a5dc <I2C_IsAcknowledgeFailed>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e02d      	b.n	800a4a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a450:	d021      	beq.n	800a496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a452:	f7fc fc69 	bl	8006d28 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	68ba      	ldr	r2, [r7, #8]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d302      	bcc.n	800a468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d116      	bne.n	800a496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2220      	movs	r2, #32
 800a472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	f043 0220 	orr.w	r2, r3, #32
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e007      	b.n	800a4a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a0:	2b80      	cmp	r3, #128	; 0x80
 800a4a2:	d1ca      	bne.n	800a43a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4ba:	e02d      	b.n	800a518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a4bc:	68f8      	ldr	r0, [r7, #12]
 800a4be:	f000 f88d 	bl	800a5dc <I2C_IsAcknowledgeFailed>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e02d      	b.n	800a528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d2:	d021      	beq.n	800a518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d4:	f7fc fc28 	bl	8006d28 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d302      	bcc.n	800a4ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d116      	bne.n	800a518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	f043 0220 	orr.w	r2, r3, #32
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e007      	b.n	800a528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	f003 0304 	and.w	r3, r3, #4
 800a522:	2b04      	cmp	r3, #4
 800a524:	d1ca      	bne.n	800a4bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a53c:	e042      	b.n	800a5c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	695b      	ldr	r3, [r3, #20]
 800a544:	f003 0310 	and.w	r3, r3, #16
 800a548:	2b10      	cmp	r3, #16
 800a54a:	d119      	bne.n	800a580 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f06f 0210 	mvn.w	r2, #16
 800a554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2220      	movs	r2, #32
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e029      	b.n	800a5d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a580:	f7fc fbd2 	bl	8006d28 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d302      	bcc.n	800a596 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d116      	bne.n	800a5c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b0:	f043 0220 	orr.w	r2, r3, #32
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e007      	b.n	800a5d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ce:	2b40      	cmp	r3, #64	; 0x40
 800a5d0:	d1b5      	bne.n	800a53e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f2:	d11b      	bne.n	800a62c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	f043 0204 	orr.w	r2, r3, #4
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e000      	b.n	800a62e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	bc80      	pop	{r7}
 800a636:	4770      	bx	lr

0800a638 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b084      	sub	sp, #16
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e034      	b.n	800a6b4 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a652:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f245 5255 	movw	r2, #21845	; 0x5555
 800a65c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	6852      	ldr	r2, [r2, #4]
 800a666:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	6892      	ldr	r2, [r2, #8]
 800a670:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a672:	f7fc fb59 	bl	8006d28 <HAL_GetTick>
 800a676:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a678:	e00f      	b.n	800a69a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a67a:	f7fc fb55 	bl	8006d28 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b27      	cmp	r3, #39	; 0x27
 800a686:	d908      	bls.n	800a69a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e00c      	b.n	800a6b4 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f003 0303 	and.w	r3, r3, #3
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e8      	bne.n	800a67a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a6cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bc80      	pop	{r7}
 800a6d8:	4770      	bx	lr
	...

0800a6dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e26c      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 8087 	beq.w	800a80a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a6fc:	4b92      	ldr	r3, [pc, #584]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	f003 030c 	and.w	r3, r3, #12
 800a704:	2b04      	cmp	r3, #4
 800a706:	d00c      	beq.n	800a722 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a708:	4b8f      	ldr	r3, [pc, #572]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	f003 030c 	and.w	r3, r3, #12
 800a710:	2b08      	cmp	r3, #8
 800a712:	d112      	bne.n	800a73a <HAL_RCC_OscConfig+0x5e>
 800a714:	4b8c      	ldr	r3, [pc, #560]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a720:	d10b      	bne.n	800a73a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a722:	4b89      	ldr	r3, [pc, #548]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d06c      	beq.n	800a808 <HAL_RCC_OscConfig+0x12c>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d168      	bne.n	800a808 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	e246      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a742:	d106      	bne.n	800a752 <HAL_RCC_OscConfig+0x76>
 800a744:	4b80      	ldr	r3, [pc, #512]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a7f      	ldr	r2, [pc, #508]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a74a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a74e:	6013      	str	r3, [r2, #0]
 800a750:	e02e      	b.n	800a7b0 <HAL_RCC_OscConfig+0xd4>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10c      	bne.n	800a774 <HAL_RCC_OscConfig+0x98>
 800a75a:	4b7b      	ldr	r3, [pc, #492]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a7a      	ldr	r2, [pc, #488]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a764:	6013      	str	r3, [r2, #0]
 800a766:	4b78      	ldr	r3, [pc, #480]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a77      	ldr	r2, [pc, #476]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a76c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	e01d      	b.n	800a7b0 <HAL_RCC_OscConfig+0xd4>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a77c:	d10c      	bne.n	800a798 <HAL_RCC_OscConfig+0xbc>
 800a77e:	4b72      	ldr	r3, [pc, #456]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a71      	ldr	r2, [pc, #452]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	4b6f      	ldr	r3, [pc, #444]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a6e      	ldr	r2, [pc, #440]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	e00b      	b.n	800a7b0 <HAL_RCC_OscConfig+0xd4>
 800a798:	4b6b      	ldr	r3, [pc, #428]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a6a      	ldr	r2, [pc, #424]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a79e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7a2:	6013      	str	r3, [r2, #0]
 800a7a4:	4b68      	ldr	r3, [pc, #416]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a67      	ldr	r2, [pc, #412]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a7aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d013      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7b8:	f7fc fab6 	bl	8006d28 <HAL_GetTick>
 800a7bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7be:	e008      	b.n	800a7d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7c0:	f7fc fab2 	bl	8006d28 <HAL_GetTick>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	2b64      	cmp	r3, #100	; 0x64
 800a7cc:	d901      	bls.n	800a7d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e1fa      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7d2:	4b5d      	ldr	r3, [pc, #372]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0f0      	beq.n	800a7c0 <HAL_RCC_OscConfig+0xe4>
 800a7de:	e014      	b.n	800a80a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7e0:	f7fc faa2 	bl	8006d28 <HAL_GetTick>
 800a7e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7e6:	e008      	b.n	800a7fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7e8:	f7fc fa9e 	bl	8006d28 <HAL_GetTick>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b64      	cmp	r3, #100	; 0x64
 800a7f4:	d901      	bls.n	800a7fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e1e6      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7fa:	4b53      	ldr	r3, [pc, #332]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d1f0      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x10c>
 800a806:	e000      	b.n	800a80a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 0302 	and.w	r3, r3, #2
 800a812:	2b00      	cmp	r3, #0
 800a814:	d063      	beq.n	800a8de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a816:	4b4c      	ldr	r3, [pc, #304]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f003 030c 	and.w	r3, r3, #12
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00b      	beq.n	800a83a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a822:	4b49      	ldr	r3, [pc, #292]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f003 030c 	and.w	r3, r3, #12
 800a82a:	2b08      	cmp	r3, #8
 800a82c:	d11c      	bne.n	800a868 <HAL_RCC_OscConfig+0x18c>
 800a82e:	4b46      	ldr	r3, [pc, #280]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a836:	2b00      	cmp	r3, #0
 800a838:	d116      	bne.n	800a868 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a83a:	4b43      	ldr	r3, [pc, #268]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f003 0302 	and.w	r3, r3, #2
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <HAL_RCC_OscConfig+0x176>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d001      	beq.n	800a852 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e1ba      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a852:	4b3d      	ldr	r3, [pc, #244]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4939      	ldr	r1, [pc, #228]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a862:	4313      	orrs	r3, r2
 800a864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a866:	e03a      	b.n	800a8de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d020      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a870:	4b36      	ldr	r3, [pc, #216]	; (800a94c <HAL_RCC_OscConfig+0x270>)
 800a872:	2201      	movs	r2, #1
 800a874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a876:	f7fc fa57 	bl	8006d28 <HAL_GetTick>
 800a87a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a87c:	e008      	b.n	800a890 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a87e:	f7fc fa53 	bl	8006d28 <HAL_GetTick>
 800a882:	4602      	mov	r2, r0
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	1ad3      	subs	r3, r2, r3
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d901      	bls.n	800a890 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e19b      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a890:	4b2d      	ldr	r3, [pc, #180]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d0f0      	beq.n	800a87e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a89c:	4b2a      	ldr	r3, [pc, #168]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	00db      	lsls	r3, r3, #3
 800a8aa:	4927      	ldr	r1, [pc, #156]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	600b      	str	r3, [r1, #0]
 800a8b0:	e015      	b.n	800a8de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8b2:	4b26      	ldr	r3, [pc, #152]	; (800a94c <HAL_RCC_OscConfig+0x270>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8b8:	f7fc fa36 	bl	8006d28 <HAL_GetTick>
 800a8bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8be:	e008      	b.n	800a8d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8c0:	f7fc fa32 	bl	8006d28 <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d901      	bls.n	800a8d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e17a      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8d2:	4b1d      	ldr	r3, [pc, #116]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0302 	and.w	r3, r3, #2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f0      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0308 	and.w	r3, r3, #8
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d03a      	beq.n	800a960 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d019      	beq.n	800a926 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8f2:	4b17      	ldr	r3, [pc, #92]	; (800a950 <HAL_RCC_OscConfig+0x274>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8f8:	f7fc fa16 	bl	8006d28 <HAL_GetTick>
 800a8fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8fe:	e008      	b.n	800a912 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a900:	f7fc fa12 	bl	8006d28 <HAL_GetTick>
 800a904:	4602      	mov	r2, r0
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d901      	bls.n	800a912 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a90e:	2303      	movs	r3, #3
 800a910:	e15a      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a912:	4b0d      	ldr	r3, [pc, #52]	; (800a948 <HAL_RCC_OscConfig+0x26c>)
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	f003 0302 	and.w	r3, r3, #2
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0f0      	beq.n	800a900 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a91e:	2001      	movs	r0, #1
 800a920:	f000 fac4 	bl	800aeac <RCC_Delay>
 800a924:	e01c      	b.n	800a960 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a926:	4b0a      	ldr	r3, [pc, #40]	; (800a950 <HAL_RCC_OscConfig+0x274>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a92c:	f7fc f9fc 	bl	8006d28 <HAL_GetTick>
 800a930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a932:	e00f      	b.n	800a954 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a934:	f7fc f9f8 	bl	8006d28 <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d908      	bls.n	800a954 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e140      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
 800a946:	bf00      	nop
 800a948:	40021000 	.word	0x40021000
 800a94c:	42420000 	.word	0x42420000
 800a950:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a954:	4b9e      	ldr	r3, [pc, #632]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d1e9      	bne.n	800a934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80a6 	beq.w	800aaba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a96e:	2300      	movs	r3, #0
 800a970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a972:	4b97      	ldr	r3, [pc, #604]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a974:	69db      	ldr	r3, [r3, #28]
 800a976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10d      	bne.n	800a99a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a97e:	4b94      	ldr	r3, [pc, #592]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	4a93      	ldr	r2, [pc, #588]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a988:	61d3      	str	r3, [r2, #28]
 800a98a:	4b91      	ldr	r3, [pc, #580]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a992:	60bb      	str	r3, [r7, #8]
 800a994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a996:	2301      	movs	r3, #1
 800a998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a99a:	4b8e      	ldr	r3, [pc, #568]	; (800abd4 <HAL_RCC_OscConfig+0x4f8>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d118      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a9a6:	4b8b      	ldr	r3, [pc, #556]	; (800abd4 <HAL_RCC_OscConfig+0x4f8>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a8a      	ldr	r2, [pc, #552]	; (800abd4 <HAL_RCC_OscConfig+0x4f8>)
 800a9ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a9b2:	f7fc f9b9 	bl	8006d28 <HAL_GetTick>
 800a9b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9b8:	e008      	b.n	800a9cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9ba:	f7fc f9b5 	bl	8006d28 <HAL_GetTick>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	2b64      	cmp	r3, #100	; 0x64
 800a9c6:	d901      	bls.n	800a9cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e0fd      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9cc:	4b81      	ldr	r3, [pc, #516]	; (800abd4 <HAL_RCC_OscConfig+0x4f8>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0f0      	beq.n	800a9ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d106      	bne.n	800a9ee <HAL_RCC_OscConfig+0x312>
 800a9e0:	4b7b      	ldr	r3, [pc, #492]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a9e2:	6a1b      	ldr	r3, [r3, #32]
 800a9e4:	4a7a      	ldr	r2, [pc, #488]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	6213      	str	r3, [r2, #32]
 800a9ec:	e02d      	b.n	800aa4a <HAL_RCC_OscConfig+0x36e>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d10c      	bne.n	800aa10 <HAL_RCC_OscConfig+0x334>
 800a9f6:	4b76      	ldr	r3, [pc, #472]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	4a75      	ldr	r2, [pc, #468]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800a9fc:	f023 0301 	bic.w	r3, r3, #1
 800aa00:	6213      	str	r3, [r2, #32]
 800aa02:	4b73      	ldr	r3, [pc, #460]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	4a72      	ldr	r2, [pc, #456]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa08:	f023 0304 	bic.w	r3, r3, #4
 800aa0c:	6213      	str	r3, [r2, #32]
 800aa0e:	e01c      	b.n	800aa4a <HAL_RCC_OscConfig+0x36e>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	2b05      	cmp	r3, #5
 800aa16:	d10c      	bne.n	800aa32 <HAL_RCC_OscConfig+0x356>
 800aa18:	4b6d      	ldr	r3, [pc, #436]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	4a6c      	ldr	r2, [pc, #432]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa1e:	f043 0304 	orr.w	r3, r3, #4
 800aa22:	6213      	str	r3, [r2, #32]
 800aa24:	4b6a      	ldr	r3, [pc, #424]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	4a69      	ldr	r2, [pc, #420]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa2a:	f043 0301 	orr.w	r3, r3, #1
 800aa2e:	6213      	str	r3, [r2, #32]
 800aa30:	e00b      	b.n	800aa4a <HAL_RCC_OscConfig+0x36e>
 800aa32:	4b67      	ldr	r3, [pc, #412]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	4a66      	ldr	r2, [pc, #408]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa38:	f023 0301 	bic.w	r3, r3, #1
 800aa3c:	6213      	str	r3, [r2, #32]
 800aa3e:	4b64      	ldr	r3, [pc, #400]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	4a63      	ldr	r2, [pc, #396]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa44:	f023 0304 	bic.w	r3, r3, #4
 800aa48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d015      	beq.n	800aa7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa52:	f7fc f969 	bl	8006d28 <HAL_GetTick>
 800aa56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa58:	e00a      	b.n	800aa70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa5a:	f7fc f965 	bl	8006d28 <HAL_GetTick>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d901      	bls.n	800aa70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e0ab      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa70:	4b57      	ldr	r3, [pc, #348]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa72:	6a1b      	ldr	r3, [r3, #32]
 800aa74:	f003 0302 	and.w	r3, r3, #2
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0ee      	beq.n	800aa5a <HAL_RCC_OscConfig+0x37e>
 800aa7c:	e014      	b.n	800aaa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa7e:	f7fc f953 	bl	8006d28 <HAL_GetTick>
 800aa82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa84:	e00a      	b.n	800aa9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa86:	f7fc f94f 	bl	8006d28 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d901      	bls.n	800aa9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800aa98:	2303      	movs	r3, #3
 800aa9a:	e095      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa9c:	4b4c      	ldr	r3, [pc, #304]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	f003 0302 	and.w	r3, r3, #2
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1ee      	bne.n	800aa86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d105      	bne.n	800aaba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aaae:	4b48      	ldr	r3, [pc, #288]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	4a47      	ldr	r2, [pc, #284]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aab8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	69db      	ldr	r3, [r3, #28]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 8081 	beq.w	800abc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aac4:	4b42      	ldr	r3, [pc, #264]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f003 030c 	and.w	r3, r3, #12
 800aacc:	2b08      	cmp	r3, #8
 800aace:	d061      	beq.n	800ab94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d146      	bne.n	800ab66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aad8:	4b3f      	ldr	r3, [pc, #252]	; (800abd8 <HAL_RCC_OscConfig+0x4fc>)
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aade:	f7fc f923 	bl	8006d28 <HAL_GetTick>
 800aae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aae4:	e008      	b.n	800aaf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aae6:	f7fc f91f 	bl	8006d28 <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d901      	bls.n	800aaf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e067      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aaf8:	4b35      	ldr	r3, [pc, #212]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1f0      	bne.n	800aae6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab0c:	d108      	bne.n	800ab20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ab0e:	4b30      	ldr	r3, [pc, #192]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	492d      	ldr	r1, [pc, #180]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab20:	4b2b      	ldr	r3, [pc, #172]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a19      	ldr	r1, [r3, #32]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	430b      	orrs	r3, r1
 800ab32:	4927      	ldr	r1, [pc, #156]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab38:	4b27      	ldr	r3, [pc, #156]	; (800abd8 <HAL_RCC_OscConfig+0x4fc>)
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab3e:	f7fc f8f3 	bl	8006d28 <HAL_GetTick>
 800ab42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab44:	e008      	b.n	800ab58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab46:	f7fc f8ef 	bl	8006d28 <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d901      	bls.n	800ab58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e037      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ab58:	4b1d      	ldr	r3, [pc, #116]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d0f0      	beq.n	800ab46 <HAL_RCC_OscConfig+0x46a>
 800ab64:	e02f      	b.n	800abc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab66:	4b1c      	ldr	r3, [pc, #112]	; (800abd8 <HAL_RCC_OscConfig+0x4fc>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab6c:	f7fc f8dc 	bl	8006d28 <HAL_GetTick>
 800ab70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab72:	e008      	b.n	800ab86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab74:	f7fc f8d8 	bl	8006d28 <HAL_GetTick>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d901      	bls.n	800ab86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e020      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab86:	4b12      	ldr	r3, [pc, #72]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1f0      	bne.n	800ab74 <HAL_RCC_OscConfig+0x498>
 800ab92:	e018      	b.n	800abc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e013      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aba0:	4b0b      	ldr	r3, [pc, #44]	; (800abd0 <HAL_RCC_OscConfig+0x4f4>)
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d106      	bne.n	800abc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d001      	beq.n	800abc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	40021000 	.word	0x40021000
 800abd4:	40007000 	.word	0x40007000
 800abd8:	42420060 	.word	0x42420060

0800abdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e0d0      	b.n	800ad92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abf0:	4b6a      	ldr	r3, [pc, #424]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0307 	and.w	r3, r3, #7
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d910      	bls.n	800ac20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abfe:	4b67      	ldr	r3, [pc, #412]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f023 0207 	bic.w	r2, r3, #7
 800ac06:	4965      	ldr	r1, [pc, #404]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac0e:	4b63      	ldr	r3, [pc, #396]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d001      	beq.n	800ac20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e0b8      	b.n	800ad92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d020      	beq.n	800ac6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ac38:	4b59      	ldr	r3, [pc, #356]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	4a58      	ldr	r2, [pc, #352]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ac42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d005      	beq.n	800ac5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ac50:	4b53      	ldr	r3, [pc, #332]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	4a52      	ldr	r2, [pc, #328]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ac5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac5c:	4b50      	ldr	r3, [pc, #320]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	494d      	ldr	r1, [pc, #308]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d040      	beq.n	800acfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d107      	bne.n	800ac92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac82:	4b47      	ldr	r3, [pc, #284]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d115      	bne.n	800acba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e07f      	b.n	800ad92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d107      	bne.n	800acaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac9a:	4b41      	ldr	r3, [pc, #260]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d109      	bne.n	800acba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e073      	b.n	800ad92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acaa:	4b3d      	ldr	r3, [pc, #244]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0302 	and.w	r3, r3, #2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e06b      	b.n	800ad92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800acba:	4b39      	ldr	r3, [pc, #228]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	f023 0203 	bic.w	r2, r3, #3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	4936      	ldr	r1, [pc, #216]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800accc:	f7fc f82c 	bl	8006d28 <HAL_GetTick>
 800acd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acd2:	e00a      	b.n	800acea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acd4:	f7fc f828 	bl	8006d28 <HAL_GetTick>
 800acd8:	4602      	mov	r2, r0
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d901      	bls.n	800acea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e053      	b.n	800ad92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acea:	4b2d      	ldr	r3, [pc, #180]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f003 020c 	and.w	r2, r3, #12
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d1eb      	bne.n	800acd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800acfc:	4b27      	ldr	r3, [pc, #156]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0307 	and.w	r3, r3, #7
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d210      	bcs.n	800ad2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad0a:	4b24      	ldr	r3, [pc, #144]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f023 0207 	bic.w	r2, r3, #7
 800ad12:	4922      	ldr	r1, [pc, #136]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad1a:	4b20      	ldr	r3, [pc, #128]	; (800ad9c <HAL_RCC_ClockConfig+0x1c0>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 0307 	and.w	r3, r3, #7
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d001      	beq.n	800ad2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e032      	b.n	800ad92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d008      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ad38:	4b19      	ldr	r3, [pc, #100]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	4916      	ldr	r1, [pc, #88]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0308 	and.w	r3, r3, #8
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d009      	beq.n	800ad6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ad56:	4b12      	ldr	r3, [pc, #72]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	490e      	ldr	r1, [pc, #56]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ad6a:	f000 f821 	bl	800adb0 <HAL_RCC_GetSysClockFreq>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	4b0b      	ldr	r3, [pc, #44]	; (800ada0 <HAL_RCC_ClockConfig+0x1c4>)
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	091b      	lsrs	r3, r3, #4
 800ad76:	f003 030f 	and.w	r3, r3, #15
 800ad7a:	490a      	ldr	r1, [pc, #40]	; (800ada4 <HAL_RCC_ClockConfig+0x1c8>)
 800ad7c:	5ccb      	ldrb	r3, [r1, r3]
 800ad7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad82:	4a09      	ldr	r2, [pc, #36]	; (800ada8 <HAL_RCC_ClockConfig+0x1cc>)
 800ad84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ad86:	4b09      	ldr	r3, [pc, #36]	; (800adac <HAL_RCC_ClockConfig+0x1d0>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fb ff8a 	bl	8006ca4 <HAL_InitTick>

  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	40022000 	.word	0x40022000
 800ada0:	40021000 	.word	0x40021000
 800ada4:	08013910 	.word	0x08013910
 800ada8:	20000070 	.word	0x20000070
 800adac:	20000074 	.word	0x20000074

0800adb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800adb0:	b490      	push	{r4, r7}
 800adb2:	b08a      	sub	sp, #40	; 0x28
 800adb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800adb6:	4b2a      	ldr	r3, [pc, #168]	; (800ae60 <HAL_RCC_GetSysClockFreq+0xb0>)
 800adb8:	1d3c      	adds	r4, r7, #4
 800adba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800adbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800adc0:	f240 2301 	movw	r3, #513	; 0x201
 800adc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	2300      	movs	r3, #0
 800adcc:	61bb      	str	r3, [r7, #24]
 800adce:	2300      	movs	r3, #0
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800adda:	4b22      	ldr	r3, [pc, #136]	; (800ae64 <HAL_RCC_GetSysClockFreq+0xb4>)
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	f003 030c 	and.w	r3, r3, #12
 800ade6:	2b04      	cmp	r3, #4
 800ade8:	d002      	beq.n	800adf0 <HAL_RCC_GetSysClockFreq+0x40>
 800adea:	2b08      	cmp	r3, #8
 800adec:	d003      	beq.n	800adf6 <HAL_RCC_GetSysClockFreq+0x46>
 800adee:	e02d      	b.n	800ae4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800adf0:	4b1d      	ldr	r3, [pc, #116]	; (800ae68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800adf2:	623b      	str	r3, [r7, #32]
      break;
 800adf4:	e02d      	b.n	800ae52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	0c9b      	lsrs	r3, r3, #18
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae02:	4413      	add	r3, r2
 800ae04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800ae08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d013      	beq.n	800ae3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ae14:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <HAL_RCC_GetSysClockFreq+0xb4>)
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	0c5b      	lsrs	r3, r3, #17
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ae22:	4413      	add	r3, r2
 800ae24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ae28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	4a0e      	ldr	r2, [pc, #56]	; (800ae68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae2e:	fb02 f203 	mul.w	r2, r2, r3
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
 800ae3a:	e004      	b.n	800ae46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	4a0b      	ldr	r2, [pc, #44]	; (800ae6c <HAL_RCC_GetSysClockFreq+0xbc>)
 800ae40:	fb02 f303 	mul.w	r3, r2, r3
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800ae46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae48:	623b      	str	r3, [r7, #32]
      break;
 800ae4a:	e002      	b.n	800ae52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ae4c:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ae4e:	623b      	str	r3, [r7, #32]
      break;
 800ae50:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae52:	6a3b      	ldr	r3, [r7, #32]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3728      	adds	r7, #40	; 0x28
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bc90      	pop	{r4, r7}
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	08013190 	.word	0x08013190
 800ae64:	40021000 	.word	0x40021000
 800ae68:	007a1200 	.word	0x007a1200
 800ae6c:	003d0900 	.word	0x003d0900

0800ae70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae70:	b480      	push	{r7}
 800ae72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae74:	4b02      	ldr	r3, [pc, #8]	; (800ae80 <HAL_RCC_GetHCLKFreq+0x10>)
 800ae76:	681b      	ldr	r3, [r3, #0]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr
 800ae80:	20000070 	.word	0x20000070

0800ae84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ae88:	f7ff fff2 	bl	800ae70 <HAL_RCC_GetHCLKFreq>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	0a1b      	lsrs	r3, r3, #8
 800ae94:	f003 0307 	and.w	r3, r3, #7
 800ae98:	4903      	ldr	r1, [pc, #12]	; (800aea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae9a:	5ccb      	ldrb	r3, [r1, r3]
 800ae9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	40021000 	.word	0x40021000
 800aea8:	08013920 	.word	0x08013920

0800aeac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aeb4:	4b0a      	ldr	r3, [pc, #40]	; (800aee0 <RCC_Delay+0x34>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a0a      	ldr	r2, [pc, #40]	; (800aee4 <RCC_Delay+0x38>)
 800aeba:	fba2 2303 	umull	r2, r3, r2, r3
 800aebe:	0a5b      	lsrs	r3, r3, #9
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	fb02 f303 	mul.w	r3, r2, r3
 800aec6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aec8:	bf00      	nop
  }
  while (Delay --);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	1e5a      	subs	r2, r3, #1
 800aece:	60fa      	str	r2, [r7, #12]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1f9      	bne.n	800aec8 <RCC_Delay+0x1c>
}
 800aed4:	bf00      	nop
 800aed6:	bf00      	nop
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bc80      	pop	{r7}
 800aede:	4770      	bx	lr
 800aee0:	20000070 	.word	0x20000070
 800aee4:	10624dd3 	.word	0x10624dd3

0800aee8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	613b      	str	r3, [r7, #16]
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	2b00      	cmp	r3, #0
 800af02:	d07d      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800af04:	2300      	movs	r3, #0
 800af06:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af08:	4b4f      	ldr	r3, [pc, #316]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10d      	bne.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af14:	4b4c      	ldr	r3, [pc, #304]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	4a4b      	ldr	r2, [pc, #300]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af1e:	61d3      	str	r3, [r2, #28]
 800af20:	4b49      	ldr	r3, [pc, #292]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af28:	60bb      	str	r3, [r7, #8]
 800af2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af2c:	2301      	movs	r3, #1
 800af2e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af30:	4b46      	ldr	r3, [pc, #280]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d118      	bne.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af3c:	4b43      	ldr	r3, [pc, #268]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a42      	ldr	r2, [pc, #264]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af48:	f7fb feee 	bl	8006d28 <HAL_GetTick>
 800af4c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af4e:	e008      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af50:	f7fb feea 	bl	8006d28 <HAL_GetTick>
 800af54:	4602      	mov	r2, r0
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	1ad3      	subs	r3, r2, r3
 800af5a:	2b64      	cmp	r3, #100	; 0x64
 800af5c:	d901      	bls.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	e06d      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af62:	4b3a      	ldr	r3, [pc, #232]	; (800b04c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d0f0      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800af6e:	4b36      	ldr	r3, [pc, #216]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d02e      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d027      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af8c:	4b2e      	ldr	r3, [pc, #184]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af94:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800af96:	4b2e      	ldr	r3, [pc, #184]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800af98:	2201      	movs	r2, #1
 800af9a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800af9c:	4b2c      	ldr	r3, [pc, #176]	; (800b050 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800afa2:	4a29      	ldr	r2, [pc, #164]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d014      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afb2:	f7fb feb9 	bl	8006d28 <HAL_GetTick>
 800afb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afb8:	e00a      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afba:	f7fb feb5 	bl	8006d28 <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afc8:	4293      	cmp	r3, r2
 800afca:	d901      	bls.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e036      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd0:	4b1d      	ldr	r3, [pc, #116]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	f003 0302 	and.w	r3, r3, #2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0ee      	beq.n	800afba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800afdc:	4b1a      	ldr	r3, [pc, #104]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	4917      	ldr	r1, [pc, #92]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800afea:	4313      	orrs	r3, r2
 800afec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800afee:	7dfb      	ldrb	r3, [r7, #23]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d105      	bne.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aff4:	4b14      	ldr	r3, [pc, #80]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aff6:	69db      	ldr	r3, [r3, #28]
 800aff8:	4a13      	ldr	r2, [pc, #76]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800affa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800affe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d008      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b00c:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	490b      	ldr	r1, [pc, #44]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0310 	and.w	r3, r3, #16
 800b026:	2b00      	cmp	r3, #0
 800b028:	d008      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b02a:	4b07      	ldr	r3, [pc, #28]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	4904      	ldr	r1, [pc, #16]	; (800b048 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800b038:	4313      	orrs	r3, r2
 800b03a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	40021000 	.word	0x40021000
 800b04c:	40007000 	.word	0x40007000
 800b050:	42420440 	.word	0x42420440

0800b054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e076      	b.n	800b154 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d108      	bne.n	800b080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b076:	d009      	beq.n	800b08c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	61da      	str	r2, [r3, #28]
 800b07e:	e005      	b.n	800b08c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d106      	bne.n	800b0ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7f8 fb14 	bl	80036d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	f003 0302 	and.w	r3, r3, #2
 800b0e8:	431a      	orrs	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69db      	ldr	r3, [r3, #28]
 800b102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b106:	431a      	orrs	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b110:	ea42 0103 	orr.w	r1, r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	0c1a      	lsrs	r2, r3, #16
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f002 0204 	and.w	r2, r2, #4
 800b132:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	69da      	ldr	r2, [r3, #28]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b142:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	3708      	adds	r7, #8
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08c      	sub	sp, #48	; 0x30
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b16a:	2301      	movs	r3, #1
 800b16c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d101      	bne.n	800b182 <HAL_SPI_TransmitReceive+0x26>
 800b17e:	2302      	movs	r3, #2
 800b180:	e18a      	b.n	800b498 <HAL_SPI_TransmitReceive+0x33c>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b18a:	f7fb fdcd 	bl	8006d28 <HAL_GetTick>
 800b18e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b1a0:	887b      	ldrh	r3, [r7, #2]
 800b1a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b1a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d00f      	beq.n	800b1cc <HAL_SPI_TransmitReceive+0x70>
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1b2:	d107      	bne.n	800b1c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d103      	bne.n	800b1c4 <HAL_SPI_TransmitReceive+0x68>
 800b1bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d003      	beq.n	800b1cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b1ca:	e15b      	b.n	800b484 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d005      	beq.n	800b1de <HAL_SPI_TransmitReceive+0x82>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <HAL_SPI_TransmitReceive+0x82>
 800b1d8:	887b      	ldrh	r3, [r7, #2]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d103      	bne.n	800b1e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b1e4:	e14e      	b.n	800b484 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	d003      	beq.n	800b1fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2205      	movs	r2, #5
 800b1f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	887a      	ldrh	r2, [r7, #2]
 800b20a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	887a      	ldrh	r2, [r7, #2]
 800b210:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	887a      	ldrh	r2, [r7, #2]
 800b21c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	887a      	ldrh	r2, [r7, #2]
 800b222:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23a:	2b40      	cmp	r3, #64	; 0x40
 800b23c:	d007      	beq.n	800b24e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b24c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b256:	d178      	bne.n	800b34a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d002      	beq.n	800b266 <HAL_SPI_TransmitReceive+0x10a>
 800b260:	8b7b      	ldrh	r3, [r7, #26]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d166      	bne.n	800b334 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26a:	881a      	ldrh	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b276:	1c9a      	adds	r2, r3, #2
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b280:	b29b      	uxth	r3, r3
 800b282:	3b01      	subs	r3, #1
 800b284:	b29a      	uxth	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b28a:	e053      	b.n	800b334 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b02      	cmp	r3, #2
 800b298:	d11b      	bne.n	800b2d2 <HAL_SPI_TransmitReceive+0x176>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d016      	beq.n	800b2d2 <HAL_SPI_TransmitReceive+0x176>
 800b2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d113      	bne.n	800b2d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ae:	881a      	ldrh	r2, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ba:	1c9a      	adds	r2, r3, #2
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d119      	bne.n	800b314 <HAL_SPI_TransmitReceive+0x1b8>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d014      	beq.n	800b314 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68da      	ldr	r2, [r3, #12]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f4:	b292      	uxth	r2, r2
 800b2f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fc:	1c9a      	adds	r2, r3, #2
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b306:	b29b      	uxth	r3, r3
 800b308:	3b01      	subs	r3, #1
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b310:	2301      	movs	r3, #1
 800b312:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b314:	f7fb fd08 	bl	8006d28 <HAL_GetTick>
 800b318:	4602      	mov	r2, r0
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b320:	429a      	cmp	r2, r3
 800b322:	d807      	bhi.n	800b334 <HAL_SPI_TransmitReceive+0x1d8>
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b32a:	d003      	beq.n	800b334 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b332:	e0a7      	b.n	800b484 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b338:	b29b      	uxth	r3, r3
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1a6      	bne.n	800b28c <HAL_SPI_TransmitReceive+0x130>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b342:	b29b      	uxth	r3, r3
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1a1      	bne.n	800b28c <HAL_SPI_TransmitReceive+0x130>
 800b348:	e07c      	b.n	800b444 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <HAL_SPI_TransmitReceive+0x1fc>
 800b352:	8b7b      	ldrh	r3, [r7, #26]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d16b      	bne.n	800b430 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	330c      	adds	r3, #12
 800b362:	7812      	ldrb	r2, [r2, #0]
 800b364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b374:	b29b      	uxth	r3, r3
 800b376:	3b01      	subs	r3, #1
 800b378:	b29a      	uxth	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b37e:	e057      	b.n	800b430 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f003 0302 	and.w	r3, r3, #2
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d11c      	bne.n	800b3c8 <HAL_SPI_TransmitReceive+0x26c>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b392:	b29b      	uxth	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d017      	beq.n	800b3c8 <HAL_SPI_TransmitReceive+0x26c>
 800b398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d114      	bne.n	800b3c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	330c      	adds	r3, #12
 800b3a8:	7812      	ldrb	r2, [r2, #0]
 800b3aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d119      	bne.n	800b40a <HAL_SPI_TransmitReceive+0x2ae>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d014      	beq.n	800b40a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68da      	ldr	r2, [r3, #12]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b406:	2301      	movs	r3, #1
 800b408:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b40a:	f7fb fc8d 	bl	8006d28 <HAL_GetTick>
 800b40e:	4602      	mov	r2, r0
 800b410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b416:	429a      	cmp	r2, r3
 800b418:	d803      	bhi.n	800b422 <HAL_SPI_TransmitReceive+0x2c6>
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b420:	d102      	bne.n	800b428 <HAL_SPI_TransmitReceive+0x2cc>
 800b422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b424:	2b00      	cmp	r3, #0
 800b426:	d103      	bne.n	800b430 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b428:	2303      	movs	r3, #3
 800b42a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b42e:	e029      	b.n	800b484 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b434:	b29b      	uxth	r3, r3
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1a2      	bne.n	800b380 <HAL_SPI_TransmitReceive+0x224>
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b43e:	b29b      	uxth	r3, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	d19d      	bne.n	800b380 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 f9b5 	bl	800b7b8 <SPI_EndRxTxTransaction>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d006      	beq.n	800b462 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b454:	2301      	movs	r3, #1
 800b456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2220      	movs	r2, #32
 800b45e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b460:	e010      	b.n	800b484 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10b      	bne.n	800b482 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b46a:	2300      	movs	r3, #0
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	617b      	str	r3, [r7, #20]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	617b      	str	r3, [r7, #20]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	e000      	b.n	800b484 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b494:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3730      	adds	r7, #48	; 0x30
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	099b      	lsrs	r3, r3, #6
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10f      	bne.n	800b4e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	099b      	lsrs	r3, r3, #6
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d004      	beq.n	800b4e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	4798      	blx	r3
    return;
 800b4e2:	e0be      	b.n	800b662 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	085b      	lsrs	r3, r3, #1
 800b4e8:	f003 0301 	and.w	r3, r3, #1
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <HAL_SPI_IRQHandler+0x66>
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	09db      	lsrs	r3, r3, #7
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d004      	beq.n	800b506 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	4798      	blx	r3
    return;
 800b504:	e0ad      	b.n	800b662 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	095b      	lsrs	r3, r3, #5
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <HAL_SPI_IRQHandler+0x80>
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	099b      	lsrs	r3, r3, #6
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f000 80a1 	beq.w	800b662 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	095b      	lsrs	r3, r3, #5
 800b524:	f003 0301 	and.w	r3, r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f000 809a 	beq.w	800b662 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	099b      	lsrs	r3, r3, #6
 800b532:	f003 0301 	and.w	r3, r3, #1
 800b536:	2b00      	cmp	r3, #0
 800b538:	d023      	beq.n	800b582 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b03      	cmp	r3, #3
 800b544:	d011      	beq.n	800b56a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54a:	f043 0204 	orr.w	r2, r3, #4
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b552:	2300      	movs	r3, #0
 800b554:	617b      	str	r3, [r7, #20]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	617b      	str	r3, [r7, #20]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	617b      	str	r3, [r7, #20]
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	e00b      	b.n	800b582 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b56a:	2300      	movs	r3, #0
 800b56c:	613b      	str	r3, [r7, #16]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	613b      	str	r3, [r7, #16]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	613b      	str	r3, [r7, #16]
 800b57e:	693b      	ldr	r3, [r7, #16]
        return;
 800b580:	e06f      	b.n	800b662 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	095b      	lsrs	r3, r3, #5
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d014      	beq.n	800b5b8 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b592:	f043 0201 	orr.w	r2, r3, #1
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	60fb      	str	r3, [r7, #12]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d04f      	beq.n	800b660 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	685a      	ldr	r2, [r3, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b5ce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	f003 0302 	and.w	r3, r3, #2
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d104      	bne.n	800b5ec <HAL_SPI_IRQHandler+0x14c>
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d034      	beq.n	800b656 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f022 0203 	bic.w	r2, r2, #3
 800b5fa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d011      	beq.n	800b628 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b608:	4a17      	ldr	r2, [pc, #92]	; (800b668 <HAL_SPI_IRQHandler+0x1c8>)
 800b60a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b610:	4618      	mov	r0, r3
 800b612:	f7fd f82b 	bl	800866c <HAL_DMA_Abort_IT>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d005      	beq.n	800b628 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b620:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d016      	beq.n	800b65e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b634:	4a0c      	ldr	r2, [pc, #48]	; (800b668 <HAL_SPI_IRQHandler+0x1c8>)
 800b636:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fd f815 	bl	800866c <HAL_DMA_Abort_IT>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00a      	beq.n	800b65e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b64c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b654:	e003      	b.n	800b65e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f808 	bl	800b66c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b65c:	e000      	b.n	800b660 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800b65e:	bf00      	nop
    return;
 800b660:	bf00      	nop
  }
}
 800b662:	3720      	adds	r7, #32
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	0800b67f 	.word	0x0800b67f

0800b66c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr

0800b67e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b084      	sub	sp, #16
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff ffe7 	bl	800b66c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b69e:	bf00      	nop
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	603b      	str	r3, [r7, #0]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b6b8:	f7fb fb36 	bl	8006d28 <HAL_GetTick>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c0:	1a9b      	subs	r3, r3, r2
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b6c8:	f7fb fb2e 	bl	8006d28 <HAL_GetTick>
 800b6cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b6ce:	4b39      	ldr	r3, [pc, #228]	; (800b7b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	015b      	lsls	r3, r3, #5
 800b6d4:	0d1b      	lsrs	r3, r3, #20
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	fb02 f303 	mul.w	r3, r2, r3
 800b6dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6de:	e054      	b.n	800b78a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e6:	d050      	beq.n	800b78a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b6e8:	f7fb fb1e 	bl	8006d28 <HAL_GetTick>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	69fa      	ldr	r2, [r7, #28]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d902      	bls.n	800b6fe <SPI_WaitFlagStateUntilTimeout+0x56>
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d13d      	bne.n	800b77a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685a      	ldr	r2, [r3, #4]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b70c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b716:	d111      	bne.n	800b73c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b720:	d004      	beq.n	800b72c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b72a:	d107      	bne.n	800b73c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b73a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b744:	d10f      	bne.n	800b766 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	681a      	ldr	r2, [r3, #0]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b764:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e017      	b.n	800b7aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d101      	bne.n	800b784 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b780:	2300      	movs	r3, #0
 800b782:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	3b01      	subs	r3, #1
 800b788:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	4013      	ands	r3, r2
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	429a      	cmp	r2, r3
 800b798:	bf0c      	ite	eq
 800b79a:	2301      	moveq	r3, #1
 800b79c:	2300      	movne	r3, #0
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d19b      	bne.n	800b6e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20000070 	.word	0x20000070

0800b7b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af02      	add	r7, sp, #8
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	2180      	movs	r1, #128	; 0x80
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f7ff ff6a 	bl	800b6a8 <SPI_WaitFlagStateUntilTimeout>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d007      	beq.n	800b7ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7de:	f043 0220 	orr.w	r2, r3, #32
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e000      	b.n	800b7ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d101      	bne.n	800b806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e041      	b.n	800b88a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fb f9c6 	bl	8006bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3304      	adds	r3, #4
 800b830:	4619      	mov	r1, r3
 800b832:	4610      	mov	r0, r2
 800b834:	f000 fa96 	bl	800bd64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d001      	beq.n	800b8ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e04e      	b.n	800b94a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0201 	orr.w	r2, r2, #1
 800b8c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a22      	ldr	r2, [pc, #136]	; (800b954 <HAL_TIM_Base_Start_IT+0xc0>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d022      	beq.n	800b914 <HAL_TIM_Base_Start_IT+0x80>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a21      	ldr	r2, [pc, #132]	; (800b958 <HAL_TIM_Base_Start_IT+0xc4>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d01d      	beq.n	800b914 <HAL_TIM_Base_Start_IT+0x80>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e0:	d018      	beq.n	800b914 <HAL_TIM_Base_Start_IT+0x80>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a1d      	ldr	r2, [pc, #116]	; (800b95c <HAL_TIM_Base_Start_IT+0xc8>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d013      	beq.n	800b914 <HAL_TIM_Base_Start_IT+0x80>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a1b      	ldr	r2, [pc, #108]	; (800b960 <HAL_TIM_Base_Start_IT+0xcc>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d00e      	beq.n	800b914 <HAL_TIM_Base_Start_IT+0x80>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a1a      	ldr	r2, [pc, #104]	; (800b964 <HAL_TIM_Base_Start_IT+0xd0>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d009      	beq.n	800b914 <HAL_TIM_Base_Start_IT+0x80>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a18      	ldr	r2, [pc, #96]	; (800b968 <HAL_TIM_Base_Start_IT+0xd4>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d004      	beq.n	800b914 <HAL_TIM_Base_Start_IT+0x80>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a17      	ldr	r2, [pc, #92]	; (800b96c <HAL_TIM_Base_Start_IT+0xd8>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d111      	bne.n	800b938 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f003 0307 	and.w	r3, r3, #7
 800b91e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b06      	cmp	r3, #6
 800b924:	d010      	beq.n	800b948 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f042 0201 	orr.w	r2, r2, #1
 800b934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b936:	e007      	b.n	800b948 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f042 0201 	orr.w	r2, r2, #1
 800b946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	bc80      	pop	{r7}
 800b952:	4770      	bx	lr
 800b954:	40012c00 	.word	0x40012c00
 800b958:	40013400 	.word	0x40013400
 800b95c:	40000400 	.word	0x40000400
 800b960:	40000800 	.word	0x40000800
 800b964:	40000c00 	.word	0x40000c00
 800b968:	40014c00 	.word	0x40014c00
 800b96c:	40001800 	.word	0x40001800

0800b970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	f003 0302 	and.w	r3, r3, #2
 800b982:	2b02      	cmp	r3, #2
 800b984:	d122      	bne.n	800b9cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	f003 0302 	and.w	r3, r3, #2
 800b990:	2b02      	cmp	r3, #2
 800b992:	d11b      	bne.n	800b9cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f06f 0202 	mvn.w	r2, #2
 800b99c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	f003 0303 	and.w	r3, r3, #3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d003      	beq.n	800b9ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f9ba 	bl	800bd2c <HAL_TIM_IC_CaptureCallback>
 800b9b8:	e005      	b.n	800b9c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f9ad 	bl	800bd1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f9bc 	bl	800bd3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	f003 0304 	and.w	r3, r3, #4
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d122      	bne.n	800ba20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f003 0304 	and.w	r3, r3, #4
 800b9e4:	2b04      	cmp	r3, #4
 800b9e6:	d11b      	bne.n	800ba20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f06f 0204 	mvn.w	r2, #4
 800b9f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2202      	movs	r2, #2
 800b9f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d003      	beq.n	800ba0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f990 	bl	800bd2c <HAL_TIM_IC_CaptureCallback>
 800ba0c:	e005      	b.n	800ba1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f983 	bl	800bd1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f992 	bl	800bd3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	691b      	ldr	r3, [r3, #16]
 800ba26:	f003 0308 	and.w	r3, r3, #8
 800ba2a:	2b08      	cmp	r3, #8
 800ba2c:	d122      	bne.n	800ba74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f003 0308 	and.w	r3, r3, #8
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d11b      	bne.n	800ba74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f06f 0208 	mvn.w	r2, #8
 800ba44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2204      	movs	r2, #4
 800ba4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	69db      	ldr	r3, [r3, #28]
 800ba52:	f003 0303 	and.w	r3, r3, #3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d003      	beq.n	800ba62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f966 	bl	800bd2c <HAL_TIM_IC_CaptureCallback>
 800ba60:	e005      	b.n	800ba6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f959 	bl	800bd1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f968 	bl	800bd3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f003 0310 	and.w	r3, r3, #16
 800ba7e:	2b10      	cmp	r3, #16
 800ba80:	d122      	bne.n	800bac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	f003 0310 	and.w	r3, r3, #16
 800ba8c:	2b10      	cmp	r3, #16
 800ba8e:	d11b      	bne.n	800bac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f06f 0210 	mvn.w	r2, #16
 800ba98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2208      	movs	r2, #8
 800ba9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	69db      	ldr	r3, [r3, #28]
 800baa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f93c 	bl	800bd2c <HAL_TIM_IC_CaptureCallback>
 800bab4:	e005      	b.n	800bac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f92f 	bl	800bd1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f93e 	bl	800bd3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d10e      	bne.n	800baf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d107      	bne.n	800baf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f06f 0201 	mvn.w	r2, #1
 800baec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f90a 	bl	800bd08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafe:	2b80      	cmp	r3, #128	; 0x80
 800bb00:	d10e      	bne.n	800bb20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb0c:	2b80      	cmp	r3, #128	; 0x80
 800bb0e:	d107      	bne.n	800bb20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fad9 	bl	800c0d2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb2a:	2b40      	cmp	r3, #64	; 0x40
 800bb2c:	d10e      	bne.n	800bb4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb38:	2b40      	cmp	r3, #64	; 0x40
 800bb3a:	d107      	bne.n	800bb4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f902 	bl	800bd50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	f003 0320 	and.w	r3, r3, #32
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	d10e      	bne.n	800bb78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	f003 0320 	and.w	r3, r3, #32
 800bb64:	2b20      	cmp	r3, #32
 800bb66:	d107      	bne.n	800bb78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f06f 0220 	mvn.w	r2, #32
 800bb70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 faa4 	bl	800c0c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb78:	bf00      	nop
 800bb7a:	3708      	adds	r7, #8
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d101      	bne.n	800bb98 <HAL_TIM_ConfigClockSource+0x18>
 800bb94:	2302      	movs	r3, #2
 800bb96:	e0b3      	b.n	800bd00 <HAL_TIM_ConfigClockSource+0x180>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2202      	movs	r2, #2
 800bba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bbb6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbbe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd0:	d03e      	beq.n	800bc50 <HAL_TIM_ConfigClockSource+0xd0>
 800bbd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbd6:	f200 8087 	bhi.w	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bbda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbde:	f000 8085 	beq.w	800bcec <HAL_TIM_ConfigClockSource+0x16c>
 800bbe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbe6:	d87f      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bbe8:	2b70      	cmp	r3, #112	; 0x70
 800bbea:	d01a      	beq.n	800bc22 <HAL_TIM_ConfigClockSource+0xa2>
 800bbec:	2b70      	cmp	r3, #112	; 0x70
 800bbee:	d87b      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bbf0:	2b60      	cmp	r3, #96	; 0x60
 800bbf2:	d050      	beq.n	800bc96 <HAL_TIM_ConfigClockSource+0x116>
 800bbf4:	2b60      	cmp	r3, #96	; 0x60
 800bbf6:	d877      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bbf8:	2b50      	cmp	r3, #80	; 0x50
 800bbfa:	d03c      	beq.n	800bc76 <HAL_TIM_ConfigClockSource+0xf6>
 800bbfc:	2b50      	cmp	r3, #80	; 0x50
 800bbfe:	d873      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bc00:	2b40      	cmp	r3, #64	; 0x40
 800bc02:	d058      	beq.n	800bcb6 <HAL_TIM_ConfigClockSource+0x136>
 800bc04:	2b40      	cmp	r3, #64	; 0x40
 800bc06:	d86f      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bc08:	2b30      	cmp	r3, #48	; 0x30
 800bc0a:	d064      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x156>
 800bc0c:	2b30      	cmp	r3, #48	; 0x30
 800bc0e:	d86b      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bc10:	2b20      	cmp	r3, #32
 800bc12:	d060      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x156>
 800bc14:	2b20      	cmp	r3, #32
 800bc16:	d867      	bhi.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d05c      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x156>
 800bc1c:	2b10      	cmp	r3, #16
 800bc1e:	d05a      	beq.n	800bcd6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800bc20:	e062      	b.n	800bce8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6818      	ldr	r0, [r3, #0]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	6899      	ldr	r1, [r3, #8]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f000 f9ac 	bl	800bf8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	609a      	str	r2, [r3, #8]
      break;
 800bc4e:	e04e      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	6899      	ldr	r1, [r3, #8]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f000 f995 	bl	800bf8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689a      	ldr	r2, [r3, #8]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc72:	609a      	str	r2, [r3, #8]
      break;
 800bc74:	e03b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	6859      	ldr	r1, [r3, #4]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	461a      	mov	r2, r3
 800bc84:	f000 f90c 	bl	800bea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2150      	movs	r1, #80	; 0x50
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 f963 	bl	800bf5a <TIM_ITRx_SetConfig>
      break;
 800bc94:	e02b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6859      	ldr	r1, [r3, #4]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	461a      	mov	r2, r3
 800bca4:	f000 f92a 	bl	800befc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2160      	movs	r1, #96	; 0x60
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 f953 	bl	800bf5a <TIM_ITRx_SetConfig>
      break;
 800bcb4:	e01b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6818      	ldr	r0, [r3, #0]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	6859      	ldr	r1, [r3, #4]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	f000 f8ec 	bl	800bea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2140      	movs	r1, #64	; 0x40
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 f943 	bl	800bf5a <TIM_ITRx_SetConfig>
      break;
 800bcd4:	e00b      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4619      	mov	r1, r3
 800bce0:	4610      	mov	r0, r2
 800bce2:	f000 f93a 	bl	800bf5a <TIM_ITRx_SetConfig>
        break;
 800bce6:	e002      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bce8:	bf00      	nop
 800bcea:	e000      	b.n	800bcee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800bcec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bc80      	pop	{r7}
 800bd18:	4770      	bx	lr

0800bd1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd22:	bf00      	nop
 800bd24:	370c      	adds	r7, #12
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bc80      	pop	{r7}
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd34:	bf00      	nop
 800bd36:	370c      	adds	r7, #12
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bc80      	pop	{r7}
 800bd3c:	4770      	bx	lr

0800bd3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b083      	sub	sp, #12
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd46:	bf00      	nop
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bc80      	pop	{r7}
 800bd4e:	4770      	bx	lr

0800bd50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd58:	bf00      	nop
 800bd5a:	370c      	adds	r7, #12
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bc80      	pop	{r7}
 800bd60:	4770      	bx	lr
	...

0800bd64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a3f      	ldr	r2, [pc, #252]	; (800be74 <TIM_Base_SetConfig+0x110>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d013      	beq.n	800bda4 <TIM_Base_SetConfig+0x40>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a3e      	ldr	r2, [pc, #248]	; (800be78 <TIM_Base_SetConfig+0x114>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d00f      	beq.n	800bda4 <TIM_Base_SetConfig+0x40>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd8a:	d00b      	beq.n	800bda4 <TIM_Base_SetConfig+0x40>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a3b      	ldr	r2, [pc, #236]	; (800be7c <TIM_Base_SetConfig+0x118>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d007      	beq.n	800bda4 <TIM_Base_SetConfig+0x40>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a3a      	ldr	r2, [pc, #232]	; (800be80 <TIM_Base_SetConfig+0x11c>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d003      	beq.n	800bda4 <TIM_Base_SetConfig+0x40>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a39      	ldr	r2, [pc, #228]	; (800be84 <TIM_Base_SetConfig+0x120>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d108      	bne.n	800bdb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	68fa      	ldr	r2, [r7, #12]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a2e      	ldr	r2, [pc, #184]	; (800be74 <TIM_Base_SetConfig+0x110>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d02b      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a2d      	ldr	r2, [pc, #180]	; (800be78 <TIM_Base_SetConfig+0x114>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d027      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdcc:	d023      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a2a      	ldr	r2, [pc, #168]	; (800be7c <TIM_Base_SetConfig+0x118>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d01f      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a29      	ldr	r2, [pc, #164]	; (800be80 <TIM_Base_SetConfig+0x11c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d01b      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a28      	ldr	r2, [pc, #160]	; (800be84 <TIM_Base_SetConfig+0x120>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d017      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a27      	ldr	r2, [pc, #156]	; (800be88 <TIM_Base_SetConfig+0x124>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d013      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a26      	ldr	r2, [pc, #152]	; (800be8c <TIM_Base_SetConfig+0x128>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d00f      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a25      	ldr	r2, [pc, #148]	; (800be90 <TIM_Base_SetConfig+0x12c>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d00b      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	4a24      	ldr	r2, [pc, #144]	; (800be94 <TIM_Base_SetConfig+0x130>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d007      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a23      	ldr	r2, [pc, #140]	; (800be98 <TIM_Base_SetConfig+0x134>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d003      	beq.n	800be16 <TIM_Base_SetConfig+0xb2>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a22      	ldr	r2, [pc, #136]	; (800be9c <TIM_Base_SetConfig+0x138>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d108      	bne.n	800be28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4313      	orrs	r3, r2
 800be26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	4313      	orrs	r3, r2
 800be34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a09      	ldr	r2, [pc, #36]	; (800be74 <TIM_Base_SetConfig+0x110>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d003      	beq.n	800be5c <TIM_Base_SetConfig+0xf8>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a08      	ldr	r2, [pc, #32]	; (800be78 <TIM_Base_SetConfig+0x114>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d103      	bne.n	800be64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	615a      	str	r2, [r3, #20]
}
 800be6a:	bf00      	nop
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	bc80      	pop	{r7}
 800be72:	4770      	bx	lr
 800be74:	40012c00 	.word	0x40012c00
 800be78:	40013400 	.word	0x40013400
 800be7c:	40000400 	.word	0x40000400
 800be80:	40000800 	.word	0x40000800
 800be84:	40000c00 	.word	0x40000c00
 800be88:	40014c00 	.word	0x40014c00
 800be8c:	40015000 	.word	0x40015000
 800be90:	40015400 	.word	0x40015400
 800be94:	40001800 	.word	0x40001800
 800be98:	40001c00 	.word	0x40001c00
 800be9c:	40002000 	.word	0x40002000

0800bea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	f023 0201 	bic.w	r2, r3, #1
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	699b      	ldr	r3, [r3, #24]
 800bec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800beca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f023 030a 	bic.w	r3, r3, #10
 800bedc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bede:	697a      	ldr	r2, [r7, #20]
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	621a      	str	r2, [r3, #32]
}
 800bef2:	bf00      	nop
 800bef4:	371c      	adds	r7, #28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bc80      	pop	{r7}
 800befa:	4770      	bx	lr

0800befc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800befc:	b480      	push	{r7}
 800befe:	b087      	sub	sp, #28
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6a1b      	ldr	r3, [r3, #32]
 800bf0c:	f023 0210 	bic.w	r2, r3, #16
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	031b      	lsls	r3, r3, #12
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bf38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	011b      	lsls	r3, r3, #4
 800bf3e:	693a      	ldr	r2, [r7, #16]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	621a      	str	r2, [r3, #32]
}
 800bf50:	bf00      	nop
 800bf52:	371c      	adds	r7, #28
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bc80      	pop	{r7}
 800bf58:	4770      	bx	lr

0800bf5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b085      	sub	sp, #20
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
 800bf62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	f043 0307 	orr.w	r3, r3, #7
 800bf7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	609a      	str	r2, [r3, #8]
}
 800bf84:	bf00      	nop
 800bf86:	3714      	adds	r7, #20
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bc80      	pop	{r7}
 800bf8c:	4770      	bx	lr

0800bf8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b087      	sub	sp, #28
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	60f8      	str	r0, [r7, #12]
 800bf96:	60b9      	str	r1, [r7, #8]
 800bf98:	607a      	str	r2, [r7, #4]
 800bf9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	021a      	lsls	r2, r3, #8
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	431a      	orrs	r2, r3
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	609a      	str	r2, [r3, #8]
}
 800bfc2:	bf00      	nop
 800bfc4:	371c      	adds	r7, #28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bc80      	pop	{r7}
 800bfca:	4770      	bx	lr

0800bfcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d101      	bne.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfe0:	2302      	movs	r3, #2
 800bfe2:	e05a      	b.n	800c09a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2202      	movs	r2, #2
 800bff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	689b      	ldr	r3, [r3, #8]
 800c002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c00a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	4313      	orrs	r3, r2
 800c014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4a20      	ldr	r2, [pc, #128]	; (800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d022      	beq.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a1e      	ldr	r2, [pc, #120]	; (800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d01d      	beq.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c03a:	d018      	beq.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a1a      	ldr	r2, [pc, #104]	; (800c0ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d013      	beq.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a19      	ldr	r2, [pc, #100]	; (800c0b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d00e      	beq.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a17      	ldr	r2, [pc, #92]	; (800c0b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d009      	beq.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a16      	ldr	r2, [pc, #88]	; (800c0b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d004      	beq.n	800c06e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a14      	ldr	r2, [pc, #80]	; (800c0bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d10c      	bne.n	800c088 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c074:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	68ba      	ldr	r2, [r7, #8]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bc80      	pop	{r7}
 800c0a2:	4770      	bx	lr
 800c0a4:	40012c00 	.word	0x40012c00
 800c0a8:	40013400 	.word	0x40013400
 800c0ac:	40000400 	.word	0x40000400
 800c0b0:	40000800 	.word	0x40000800
 800c0b4:	40000c00 	.word	0x40000c00
 800c0b8:	40014c00 	.word	0x40014c00
 800c0bc:	40001800 	.word	0x40001800

0800c0c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bc80      	pop	{r7}
 800c0d0:	4770      	bx	lr

0800c0d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c0da:	bf00      	nop
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bc80      	pop	{r7}
 800c0e2:	4770      	bx	lr

0800c0e4 <_Z14Adbms6948_InitPK17Adbms6948_CfgType>:
    @return        E_OK: Success  \n
                   E_NOT_OK: Failed \n
 */
/*****************************************************************************/
Adbms6948_ReturnType  Adbms6948_Init(const Adbms6948_CfgType *pkConfig)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  return (Adbms6948_Int_Init(pkConfig));
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 ffd5 	bl	800d09c <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType>
 800c0f2:	4603      	mov	r3, r0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <_Z18Adbms6948_TrigCADCP24Adbms6948_TrigCADCInputsh>:
Adbms6948_ReturnType  Adbms6948_TrigCADC
(
    Adbms6948_TrigCADCInputs   *poTrigCADCIp,
  const uint8_t           knChainID
)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  return (Adbms6948_Int_TrigCADC(poTrigCADCIp, knChainID));
 800c108:	78fb      	ldrb	r3, [r7, #3]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 fb67 	bl	800d7e0 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh>
 800c112:	4603      	mov	r3, r0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <_Z19Adbms6948_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>:
Adbms6948_ReturnType  Adbms6948_TrigI1ADC
(
  Adbms6948_TrigI1ADCInputs   *poTrigI1ADCIp,
  const uint8_t           knChainID
)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	460b      	mov	r3, r1
 800c126:	70fb      	strb	r3, [r7, #3]
  return Adbms6948_Int_TrigI1ADC(poTrigI1ADCIp, knChainID);
 800c128:	78fb      	ldrb	r3, [r7, #3]
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f001 fbdd 	bl	800d8ec <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>
 800c132:	4603      	mov	r3, r0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <_Z22Adbms6948_ReadCellVolt26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePs21Adbms6948_SnapSelTypeh>:
Adbms6948_ReturnType Adbms6948_ReadCellVolt(Adbms6948_CellMeasDataType eCellMeasData,
                                            Adbms6948_CellGrpSelType   eCellGrpSel,
                                            int16_t                    *pnCellData,
                                            Adbms6948_SnapSelType      eSnapSel,
                                            const uint8_t              knChainID)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	603a      	str	r2, [r7, #0]
 800c144:	461a      	mov	r2, r3
 800c146:	4603      	mov	r3, r0
 800c148:	71fb      	strb	r3, [r7, #7]
 800c14a:	460b      	mov	r3, r1
 800c14c:	71bb      	strb	r3, [r7, #6]
 800c14e:	4613      	mov	r3, r2
 800c150:	717b      	strb	r3, [r7, #5]
    #ifdef ADI_LEGACY_GRP_SUPPORT
      return (Adbms6948_Int_ReadCellVolt(eCellMeasData, eCellGrpSel, pnCellData, eSnapSel, knChainID));
  #else
        return (Adbms6948_Int_ReadAllCellVolt(eCellMeasData, pnCellData, eSnapSel, knChainID));
 800c152:	7c3b      	ldrb	r3, [r7, #16]
 800c154:	797a      	ldrb	r2, [r7, #5]
 800c156:	79f8      	ldrb	r0, [r7, #7]
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	f001 fc3b 	bl	800d9d4 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>
 800c15e:	4603      	mov	r3, r0
    #endif
}
 800c160:	4618      	mov	r0, r3
 800c162:	3708      	adds	r7, #8
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <_Z21Adbms6948_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>:
Adbms6948_ReturnType  Adbms6948_ReadCurrent(Adbms6948_CurrentMeasDataType eCurrentMeasData,
                                            Adbms6948_CurrentSelType      eCurrentSel,
                                            int32_t                       *pnCurrentData,
                                            Adbms6948_SnapSelType         eSnapSel,
                                            const uint8_t                 knChainID)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af02      	add	r7, sp, #8
 800c16e:	603a      	str	r2, [r7, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	4603      	mov	r3, r0
 800c174:	71fb      	strb	r3, [r7, #7]
 800c176:	460b      	mov	r3, r1
 800c178:	71bb      	strb	r3, [r7, #6]
 800c17a:	4613      	mov	r3, r2
 800c17c:	717b      	strb	r3, [r7, #5]
  return (Adbms6948_Int_ReadCurrent(eCurrentMeasData, eCurrentSel, pnCurrentData, eSnapSel, knChainID));
 800c17e:	797a      	ldrb	r2, [r7, #5]
 800c180:	79b9      	ldrb	r1, [r7, #6]
 800c182:	79f8      	ldrb	r0, [r7, #7]
 800c184:	7c3b      	ldrb	r3, [r7, #16]
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	4613      	mov	r3, r2
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	f001 fc8e 	bl	800daac <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>
 800c190:	4603      	mov	r3, r0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <_Z26adi_pal_ReportRuntimeErrorth>:
__attribute__((weak)) void adi_pal_ReportRuntimeError
(
    uint16  ErrorId,
    uint8  Status
)
{
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	460a      	mov	r2, r1
 800c1a4:	80fb      	strh	r3, [r7, #6]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	717b      	strb	r3, [r7, #5]
#ifdef _ADI_DEBUG_
    printf("Runtime error- ErrID: 0x%04X, Status: 0x%02X", ErrorId, Status);
#endif
}
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bc80      	pop	{r7}
 800c1b2:	4770      	bx	lr

0800c1b4 <_Z14adi_pal_MemsetPhhm>:
(
    uint8 *  pAddr,
    uint8  nVal,
    uint32  nSize
)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	460b      	mov	r3, r1
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	72fb      	strb	r3, [r7, #11]
    (void) memset(pAddr, nVal, nSize);
 800c1c2:	7afb      	ldrb	r3, [r7, #11]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f002 fa73 	bl	800e6b4 <memset>
}
 800c1ce:	bf00      	nop
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <_Z14adi_pal_MemcpyPhS_m>:
(
    uint8 *  pDstAddr,
    uint8 *  pSrcAddr,
    uint32  nSize
)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b084      	sub	sp, #16
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	60b9      	str	r1, [r7, #8]
 800c1e0:	607a      	str	r2, [r7, #4]
    memcpy(pDstAddr, pSrcAddr, nSize);
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f002 fa56 	bl	800e698 <memcpy>
}
 800c1ec:	bf00      	nop
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <_Z16adi_pal_SpiWritePhth>:
(
    uint8 *pData,
    uint16 nDataLen,
    uint8  nChainID
)
{
 800c1f4:	b5b0      	push	{r4, r5, r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	807b      	strh	r3, [r7, #2]
 800c200:	4613      	mov	r3, r2
 800c202:	707b      	strb	r3, [r7, #1]
    uint8_t rx_data[nDataLen];

    Adbms6948_SPI_Lock();
    Adbms6948_SPI_WriteRead(pData, rx_data, nDataLen);
    Adbms6948_SPI_Unlock();
 800c204:	466b      	mov	r3, sp
 800c206:	461d      	mov	r5, r3
    uint8_t rx_data[nDataLen];
 800c208:	887b      	ldrh	r3, [r7, #2]
 800c20a:	1e5c      	subs	r4, r3, #1
 800c20c:	60fc      	str	r4, [r7, #12]
 800c20e:	4623      	mov	r3, r4
 800c210:	3301      	adds	r3, #1
 800c212:	4618      	mov	r0, r3
 800c214:	f04f 0100 	mov.w	r1, #0
 800c218:	f04f 0200 	mov.w	r2, #0
 800c21c:	f04f 0300 	mov.w	r3, #0
 800c220:	00cb      	lsls	r3, r1, #3
 800c222:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c226:	00c2      	lsls	r2, r0, #3
 800c228:	4623      	mov	r3, r4
 800c22a:	3301      	adds	r3, #1
 800c22c:	4618      	mov	r0, r3
 800c22e:	f04f 0100 	mov.w	r1, #0
 800c232:	f04f 0200 	mov.w	r2, #0
 800c236:	f04f 0300 	mov.w	r3, #0
 800c23a:	00cb      	lsls	r3, r1, #3
 800c23c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c240:	00c2      	lsls	r2, r0, #3
 800c242:	4623      	mov	r3, r4
 800c244:	3301      	adds	r3, #1
 800c246:	3307      	adds	r3, #7
 800c248:	08db      	lsrs	r3, r3, #3
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	ebad 0d03 	sub.w	sp, sp, r3
 800c250:	466b      	mov	r3, sp
 800c252:	3300      	adds	r3, #0
 800c254:	60bb      	str	r3, [r7, #8]
    Adbms6948_SPI_Lock();
 800c256:	f7f5 f850 	bl	80012fa <_Z18Adbms6948_SPI_Lockv>
    Adbms6948_SPI_WriteRead(pData, rx_data, nDataLen);
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	887a      	ldrh	r2, [r7, #2]
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7f5 f857 	bl	8001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>
    Adbms6948_SPI_Unlock();
 800c266:	f7f5 f84e 	bl	8001306 <_Z20Adbms6948_SPI_Unlockv>
 800c26a:	46ad      	mov	sp, r5
        } else {
            printf("0x%02X\n", pData[nIdx]);
        }
    }
#endif
}
 800c26c:	bf00      	nop
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bdb0      	pop	{r4, r5, r7, pc}

0800c274 <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh>:
                                DataCfg[15:0]: Specifies length of all data buffer.
                                DataCfg[31:16]: Specifies number of data buffer.
    @param[in]      knChainId   Daisy chain ID to perform the operation.
 */
__attribute__((weak)) void adi_pal_SpiWriteReads (uint8 pTxBuf[8][PAL_MUL_SPI_BUFF_SIZE], uint8 pRxBuf[8][PAL_MUL_SPI_BUFF_SIZE],  uint32 DataCfg, uint8 knChainId )
{
 800c274:	b5b0      	push	{r4, r5, r7, lr}
 800c276:	b08a      	sub	sp, #40	; 0x28
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	70fb      	strb	r3, [r7, #3]
            } else {
                printf("0x%02X\n", pRxBuf[reg_group_cnt][nIdx]);
            }
        }
#endif
    }
 800c282:	466b      	mov	r3, sp
 800c284:	461d      	mov	r5, r3
    uint8_t reg_group_total = (DataCfg >> 16u);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	0c1b      	lsrs	r3, r3, #16
 800c28a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint16_t nGroupDataLen = (uint16_t)(((uint16_t)DataCfg) - ADBMS6948_CMD_DATA_LEN);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	b29b      	uxth	r3, r3
 800c292:	3b04      	subs	r3, #4
 800c294:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t data_size = (ADBMS6948_CMD_DATA_LEN + nGroupDataLen);
 800c296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c298:	3304      	adds	r3, #4
 800c29a:	84fb      	strh	r3, [r7, #38]	; 0x26
    uint8_t cmd[data_size];
 800c29c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c29e:	1e5c      	subs	r4, r3, #1
 800c2a0:	61fc      	str	r4, [r7, #28]
 800c2a2:	4623      	mov	r3, r4
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f04f 0100 	mov.w	r1, #0
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	f04f 0300 	mov.w	r3, #0
 800c2b4:	00cb      	lsls	r3, r1, #3
 800c2b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c2ba:	00c2      	lsls	r2, r0, #3
 800c2bc:	4623      	mov	r3, r4
 800c2be:	3301      	adds	r3, #1
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f04f 0100 	mov.w	r1, #0
 800c2c6:	f04f 0200 	mov.w	r2, #0
 800c2ca:	f04f 0300 	mov.w	r3, #0
 800c2ce:	00cb      	lsls	r3, r1, #3
 800c2d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c2d4:	00c2      	lsls	r2, r0, #3
 800c2d6:	4623      	mov	r3, r4
 800c2d8:	3301      	adds	r3, #1
 800c2da:	3307      	adds	r3, #7
 800c2dc:	08db      	lsrs	r3, r3, #3
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	ebad 0d03 	sub.w	sp, sp, r3
 800c2e4:	466b      	mov	r3, sp
 800c2e6:	3300      	adds	r3, #0
 800c2e8:	61bb      	str	r3, [r7, #24]
    uint8_t resp[data_size];
 800c2ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2ec:	1e5c      	subs	r4, r3, #1
 800c2ee:	617c      	str	r4, [r7, #20]
 800c2f0:	4623      	mov	r3, r4
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f04f 0100 	mov.w	r1, #0
 800c2fa:	f04f 0200 	mov.w	r2, #0
 800c2fe:	f04f 0300 	mov.w	r3, #0
 800c302:	00cb      	lsls	r3, r1, #3
 800c304:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c308:	00c2      	lsls	r2, r0, #3
 800c30a:	4623      	mov	r3, r4
 800c30c:	3301      	adds	r3, #1
 800c30e:	4618      	mov	r0, r3
 800c310:	f04f 0100 	mov.w	r1, #0
 800c314:	f04f 0200 	mov.w	r2, #0
 800c318:	f04f 0300 	mov.w	r3, #0
 800c31c:	00cb      	lsls	r3, r1, #3
 800c31e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c322:	00c2      	lsls	r2, r0, #3
 800c324:	4623      	mov	r3, r4
 800c326:	3301      	adds	r3, #1
 800c328:	3307      	adds	r3, #7
 800c32a:	08db      	lsrs	r3, r3, #3
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	ebad 0d03 	sub.w	sp, sp, r3
 800c332:	466b      	mov	r3, sp
 800c334:	3300      	adds	r3, #0
 800c336:	613b      	str	r3, [r7, #16]
    for (reg_group_cnt = 0; reg_group_cnt < reg_group_total ; reg_group_cnt++) {
 800c338:	2300      	movs	r3, #0
 800c33a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c33e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c346:	429a      	cmp	r2, r3
 800c348:	d22b      	bcs.n	800c3a2 <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh+0x12e>
        Adbms6948_SPI_Lock();
 800c34a:	f7f4 ffd6 	bl	80012fa <_Z18Adbms6948_SPI_Lockv>
        memcpy(&cmd[0], &pTxBuf[reg_group_cnt][0], ADBMS6948_CMD_DATA_LEN); /* dst, src, size */
 800c34e:	69b9      	ldr	r1, [r7, #24]
 800c350:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c354:	4613      	mov	r3, r2
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	461a      	mov	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4413      	add	r3, r2
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	600b      	str	r3, [r1, #0]
        Adbms6948_SPI_WriteRead(cmd, resp, data_size);
 800c366:	69bb      	ldr	r3, [r7, #24]
 800c368:	6939      	ldr	r1, [r7, #16]
 800c36a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c36c:	4618      	mov	r0, r3
 800c36e:	f7f4 ffd1 	bl	8001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>
        memcpy(&pRxBuf[reg_group_cnt][ADBMS6948_CMD_DATA_LEN], &resp[ADBMS6948_CMD_DATA_LEN], nGroupDataLen); /* dst, src, size */
 800c372:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c376:	4613      	mov	r3, r2
 800c378:	005b      	lsls	r3, r3, #1
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	461a      	mov	r2, r3
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	4413      	add	r3, r2
 800c384:	1d18      	adds	r0, r3, #4
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	3304      	adds	r3, #4
 800c38a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c38c:	4619      	mov	r1, r3
 800c38e:	f002 f983 	bl	800e698 <memcpy>
        Adbms6948_SPI_Unlock();
 800c392:	f7f4 ffb8 	bl	8001306 <_Z20Adbms6948_SPI_Unlockv>
    for (reg_group_cnt = 0; reg_group_cnt < reg_group_total ; reg_group_cnt++) {
 800c396:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c39a:	3301      	adds	r3, #1
 800c39c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c3a0:	e7cd      	b.n	800c33e <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh+0xca>
 800c3a2:	46ad      	mov	sp, r5
}
 800c3a4:	bf00      	nop
 800c3a6:	3728      	adds	r7, #40	; 0x28
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bdb0      	pop	{r4, r5, r7, pc}

0800c3ac <_Z23adi_pal_SpiWriteReadAllPhS_mh>:
    @param[in]      pRxBuf      Pointer to the receive buffer.
    @param[in]      nDataLen    Length of data to receive.
    @param[in]      nChainID    Daisy chain ID to perform the operation.
 */
__attribute__((weak)) void adi_pal_SpiWriteReadAll(uint8 *pTxBuf, uint8 *pRxBuf, uint32 nDataLen, uint8 nChainID)
{
 800c3ac:	b5b0      	push	{r4, r5, r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
 800c3b8:	70fb      	strb	r3, [r7, #3]

    memcpy(&cmd[0], pTxBuf, ADBMS6948_CMD_DATA_LEN); /* dst, src, size */
    Adbms6948_SPI_WriteRead(cmd, cmd, data_size);
    memcpy(pRxBuf, &cmd[ADBMS6948_CMD_DATA_LEN], nDataLen); /* dst, src, size */

    Adbms6948_SPI_Unlock();
 800c3ba:	466b      	mov	r3, sp
 800c3bc:	461d      	mov	r5, r3
    uint16_t data_size = (ADBMS6948_CMD_DATA_LEN + nDataLen);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	83fb      	strh	r3, [r7, #30]
    uint8_t cmd[data_size];
 800c3c6:	8bfb      	ldrh	r3, [r7, #30]
 800c3c8:	1e5c      	subs	r4, r3, #1
 800c3ca:	61bc      	str	r4, [r7, #24]
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f04f 0100 	mov.w	r1, #0
 800c3d6:	f04f 0200 	mov.w	r2, #0
 800c3da:	f04f 0300 	mov.w	r3, #0
 800c3de:	00cb      	lsls	r3, r1, #3
 800c3e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c3e4:	00c2      	lsls	r2, r0, #3
 800c3e6:	4623      	mov	r3, r4
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f04f 0100 	mov.w	r1, #0
 800c3f0:	f04f 0200 	mov.w	r2, #0
 800c3f4:	f04f 0300 	mov.w	r3, #0
 800c3f8:	00cb      	lsls	r3, r1, #3
 800c3fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c3fe:	00c2      	lsls	r2, r0, #3
 800c400:	4623      	mov	r3, r4
 800c402:	3301      	adds	r3, #1
 800c404:	3307      	adds	r3, #7
 800c406:	08db      	lsrs	r3, r3, #3
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	ebad 0d03 	sub.w	sp, sp, r3
 800c40e:	466b      	mov	r3, sp
 800c410:	3300      	adds	r3, #0
 800c412:	617b      	str	r3, [r7, #20]
    Adbms6948_SPI_Lock();
 800c414:	f7f4 ff71 	bl	80012fa <_Z18Adbms6948_SPI_Lockv>
    memcpy(&cmd[0], pTxBuf, ADBMS6948_CMD_DATA_LEN); /* dst, src, size */
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	6812      	ldr	r2, [r2, #0]
 800c41e:	601a      	str	r2, [r3, #0]
    Adbms6948_SPI_WriteRead(cmd, cmd, data_size);
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	6979      	ldr	r1, [r7, #20]
 800c424:	8bfa      	ldrh	r2, [r7, #30]
 800c426:	4618      	mov	r0, r3
 800c428:	f7f4 ff74 	bl	8001314 <_Z23Adbms6948_SPI_WriteReadPhS_t>
    memcpy(pRxBuf, &cmd[ADBMS6948_CMD_DATA_LEN], nDataLen); /* dst, src, size */
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	3304      	adds	r3, #4
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	4619      	mov	r1, r3
 800c434:	68b8      	ldr	r0, [r7, #8]
 800c436:	f002 f92f 	bl	800e698 <memcpy>
    Adbms6948_SPI_Unlock();
 800c43a:	f7f4 ff64 	bl	8001306 <_Z20Adbms6948_SPI_Unlockv>
 800c43e:	46ad      	mov	sp, r5
}
 800c440:	bf00      	nop
 800c442:	3720      	adds	r7, #32
 800c444:	46bd      	mov	sp, r7
 800c446:	bdb0      	pop	{r4, r5, r7, pc}

0800c448 <_Z15adi_pal_IsErrorh>:
 */
__attribute__((weak)) boolean adi_pal_IsError
(
    uint8 nChainID
)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	71fb      	strb	r3, [r7, #7]
    boolean bRet = FALSE;
 800c452:	2300      	movs	r3, #0
 800c454:	73fb      	strb	r3, [r7, #15]

    return bRet;
 800c456:	7bfb      	ldrb	r3, [r7, #15]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bc80      	pop	{r7}
 800c460:	4770      	bx	lr

0800c462 <_Z18adi_pal_TimerDelaymh>:

    @param[in]      nPeriodInUS     Delay in microseconds.
    @param[in]      nChainID        Daisy chain ID to perform the operation.
 */
__attribute__((weak)) void adi_pal_TimerDelay(uint32 nPeriodInUS, uint8 nChainID)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b082      	sub	sp, #8
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	460b      	mov	r3, r1
 800c46c:	70fb      	strb	r3, [r7, #3]
  Adbms_Delay_us(nPeriodInUS);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f001 febe 	bl	800e1f0 <_Z14Adbms_Delay_usm>
}
 800c474:	bf00      	nop
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <_Z25Adbms6948_Cmn_WakeUpBmsICh>:
                It starts with 0 for the first chain.

    @return          E_OK    : Operation was successful \n
                    E_NOT_OK: Operation failed \n
 */
void Adbms6948_Cmn_WakeUpBmsIC(uint8_t knChainID) {
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	4603      	mov	r3, r0
 800c484:	71fb      	strb	r3, [r7, #7]
	uint8_t   nLen = 1u;
 800c486:	2301      	movs	r3, #1
 800c488:	73fb      	strb	r3, [r7, #15]
	uint8_t   nDummyByte = 0xFFu;
 800c48a:	23ff      	movs	r3, #255	; 0xff
 800c48c:	73bb      	strb	r3, [r7, #14]

	/* Write a dummy byte. */
	Adbms6948_Cmd_SendDummyBytes(&nDummyByte, nLen, knChainID);
 800c48e:	79fa      	ldrb	r2, [r7, #7]
 800c490:	7bf9      	ldrb	r1, [r7, #15]
 800c492:	f107 030e 	add.w	r3, r7, #14
 800c496:	4618      	mov	r0, r3
 800c498:	f001 f8db 	bl	800d652 <_Z28Adbms6948_Cmd_SendDummyBytesPhhh>
	if (TRUE == Adbms6948_aoChainStateInfo[knChainID].bFirstWakeup)
 800c49c:	79fa      	ldrb	r2, [r7, #7]
 800c49e:	490c      	ldr	r1, [pc, #48]	; (800c4d0 <_Z25Adbms6948_Cmn_WakeUpBmsICh+0x54>)
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	440b      	add	r3, r1
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d106      	bne.n	800c4be <_Z25Adbms6948_Cmn_WakeUpBmsICh+0x42>
	{
		/* Delay to ensure Wakeup after initialization */
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_TWAKE, knChainID);
 800c4b0:	79fb      	ldrb	r3, [r7, #7]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	f44f 7016 	mov.w	r0, #600	; 0x258
 800c4b8:	f7ff ffd3 	bl	800c462 <_Z18adi_pal_TimerDelaymh>
	{
		/* Delay to ensure Wakeup during initialization */
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_TREADY, knChainID);
	}

	return;
 800c4bc:	e005      	b.n	800c4ca <_Z25Adbms6948_Cmn_WakeUpBmsICh+0x4e>
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_TREADY, knChainID);
 800c4be:	79fb      	ldrb	r3, [r7, #7]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	200a      	movs	r0, #10
 800c4c4:	f7ff ffcd 	bl	800c462 <_Z18adi_pal_TimerDelaymh>
	return;
 800c4c8:	bf00      	nop
}
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20000760 	.word	0x20000760

0800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>:
void Adbms6948_Cmn_ReportRuntimeErr
(
		uint16_t   ErrorId,
		uint8_t   Status
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	460a      	mov	r2, r1
 800c4de:	80fb      	strh	r3, [r7, #6]
 800c4e0:	4613      	mov	r3, r2
 800c4e2:	717b      	strb	r3, [r7, #5]
	ADI_PAL_REPORT_RUNTIME_ERROR(ErrorId, Status);
 800c4e4:	797a      	ldrb	r2, [r7, #5]
 800c4e6:	88fb      	ldrh	r3, [r7, #6]
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff fe55 	bl	800c19a <_Z26adi_pal_ReportRuntimeErrorth>
}
 800c4f0:	bf00      	nop
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <_Z21Adbms6948_Cmn_IsErrorh>:
 */
boolean Adbms6948_Cmn_IsError
(
		uint8_t  knChainID
)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	71fb      	strb	r3, [r7, #7]
	Adbms6948_ReturnType  nRet;
	nRet = ADI_PAL_ISERROR(knChainID);
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	4618      	mov	r0, r3
 800c506:	f7ff ff9f 	bl	800c448 <_Z15adi_pal_IsErrorh>
 800c50a:	4603      	mov	r3, r0
 800c50c:	73fb      	strb	r3, [r7, #15]

	return nRet;
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <_Z25Adbms6948_Cmn_ValidatePECPhhhh>:
		uint8_t *pDataBuf,
		uint8_t  nLen,
		uint8_t  nDeviceId,
		uint8_t  knChainID
)
{
 800c518:	b590      	push	{r4, r7, lr}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	4608      	mov	r0, r1
 800c522:	4611      	mov	r1, r2
 800c524:	461a      	mov	r2, r3
 800c526:	4603      	mov	r3, r0
 800c528:	70fb      	strb	r3, [r7, #3]
 800c52a:	460b      	mov	r3, r1
 800c52c:	70bb      	strb	r3, [r7, #2]
 800c52e:	4613      	mov	r3, r2
 800c530:	707b      	strb	r3, [r7, #1]
	uint16_t   nDataPec;
	uint16_t   nRcvdPec;
	uint8_t   nCmdCntRcvd;
	boolean  bIsPecValid = TRUE;
 800c532:	2301      	movs	r3, #1
 800c534:	73fb      	strb	r3, [r7, #15]

	nDataPec = Adbms6948_Pec10Calculate(&pDataBuf[0], TRUE, nLen - ADBMS6948_PEC_LEN);
 800c536:	78fb      	ldrb	r3, [r7, #3]
 800c538:	3b02      	subs	r3, #2
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	461a      	mov	r2, r3
 800c53e:	2101      	movs	r1, #1
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 fdf7 	bl	800e134 <_Z24Adbms6948_Pec10CalculatePhhh>
 800c546:	4603      	mov	r3, r0
 800c548:	81bb      	strh	r3, [r7, #12]
	nRcvdPec = ((uint16_t)(((uint16_t)pDataBuf[nLen-2u]) << 8) + (uint16_t)pDataBuf[nLen-1u]);
 800c54a:	78fb      	ldrb	r3, [r7, #3]
 800c54c:	3b02      	subs	r3, #2
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	4413      	add	r3, r2
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	b29b      	uxth	r3, r3
 800c556:	021b      	lsls	r3, r3, #8
 800c558:	b29a      	uxth	r2, r3
 800c55a:	78fb      	ldrb	r3, [r7, #3]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	440b      	add	r3, r1
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	b29b      	uxth	r3, r3
 800c566:	4413      	add	r3, r2
 800c568:	817b      	strh	r3, [r7, #10]
	nCmdCntRcvd = (uint8_t)((nRcvdPec & (uint16_t)0xFC00) >> 10u);
 800c56a:	897b      	ldrh	r3, [r7, #10]
 800c56c:	0a9b      	lsrs	r3, r3, #10
 800c56e:	b29b      	uxth	r3, r3
 800c570:	727b      	strb	r3, [r7, #9]
	nRcvdPec = (uint16_t)(nRcvdPec & (uint16_t)0x03FF);
 800c572:	897b      	ldrh	r3, [r7, #10]
 800c574:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c578:	817b      	strh	r3, [r7, #10]

	/* Set the PEC error to FALSE in the state variable */
	Adbms6948_aoChainStateInfo[knChainID].aLastReadPecEr[nDeviceId] = (boolean)FALSE;
 800c57a:	787a      	ldrb	r2, [r7, #1]
 800c57c:	78b9      	ldrb	r1, [r7, #2]
 800c57e:	4854      	ldr	r0, [pc, #336]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c580:	4613      	mov	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4413      	add	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4403      	add	r3, r0
 800c58a:	440b      	add	r3, r1
 800c58c:	3301      	adds	r3, #1
 800c58e:	2200      	movs	r2, #0
 800c590:	701a      	strb	r2, [r3, #0]
	if (nRcvdPec != nDataPec)
 800c592:	897a      	ldrh	r2, [r7, #10]
 800c594:	89bb      	ldrh	r3, [r7, #12]
 800c596:	429a      	cmp	r2, r3
 800c598:	d03e      	beq.n	800c618 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x100>
	{
		if (Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDeviceId] == ADBMS6948_DEVICE)
 800c59a:	787a      	ldrb	r2, [r7, #1]
 800c59c:	78b9      	ldrb	r1, [r7, #2]
 800c59e:	484c      	ldr	r0, [pc, #304]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c5a0:	4613      	mov	r3, r2
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	4413      	add	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4403      	add	r3, r0
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3311      	adds	r3, #17
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d124      	bne.n	800c5fe <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0xe6>
		{
			bIsPecValid = FALSE;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	73fb      	strb	r3, [r7, #15]
			Adbms6948_aoChainStateInfo[knChainID].nPECError[nDeviceId]++;
 800c5b8:	787a      	ldrb	r2, [r7, #1]
 800c5ba:	78b9      	ldrb	r1, [r7, #2]
 800c5bc:	4844      	ldr	r0, [pc, #272]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c5be:	4613      	mov	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	440b      	add	r3, r1
 800c5c6:	3302      	adds	r3, #2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4403      	add	r3, r0
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	1c58      	adds	r0, r3, #1
 800c5d0:	4c3f      	ldr	r4, [pc, #252]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	440b      	add	r3, r1
 800c5da:	3302      	adds	r3, #2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4423      	add	r3, r4
 800c5e0:	6058      	str	r0, [r3, #4]
			if (TRUE == Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Invalid_PEC.nState)
 800c5e2:	4b3c      	ldr	r3, [pc, #240]	; (800c6d4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d107      	bne.n	800c5fe <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0xe6>
			{
				Adbms6948_Cmn_ReportRuntimeErr(
						Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Invalid_PEC.nErrID,
 800c5ee:	4b39      	ldr	r3, [pc, #228]	; (800c6d4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	885b      	ldrh	r3, [r3, #2]
				Adbms6948_Cmn_ReportRuntimeErr(
 800c5f6:	2101      	movs	r1, #1
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff ff6b 	bl	800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
						ADBMS6948_RUNTIME_E_STATUS_FAILED);
			}
		}
		/* Set the PEC error to TRUE in the state variable */
		Adbms6948_aoChainStateInfo[knChainID].aLastReadPecEr[nDeviceId] = (boolean)TRUE;
 800c5fe:	787a      	ldrb	r2, [r7, #1]
 800c600:	78b9      	ldrb	r1, [r7, #2]
 800c602:	4833      	ldr	r0, [pc, #204]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4403      	add	r3, r0
 800c60e:	440b      	add	r3, r1
 800c610:	3301      	adds	r3, #1
 800c612:	2201      	movs	r2, #1
 800c614:	701a      	strb	r2, [r3, #0]
 800c616:	e055      	b.n	800c6c4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1ac>
	}
	else
	{
		if (Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDeviceId] == ADBMS6948_DEVICE)
 800c618:	787a      	ldrb	r2, [r7, #1]
 800c61a:	78b9      	ldrb	r1, [r7, #2]
 800c61c:	482c      	ldr	r0, [pc, #176]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4403      	add	r3, r0
 800c628:	440b      	add	r3, r1
 800c62a:	3311      	adds	r3, #17
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d13c      	bne.n	800c6ac <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x194>
		{
			if (nCmdCntRcvd != Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDeviceId])
 800c632:	787a      	ldrb	r2, [r7, #1]
 800c634:	78b9      	ldrb	r1, [r7, #2]
 800c636:	4826      	ldr	r0, [pc, #152]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c638:	4613      	mov	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4413      	add	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4403      	add	r3, r0
 800c642:	440b      	add	r3, r1
 800c644:	3304      	adds	r3, #4
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	7a7a      	ldrb	r2, [r7, #9]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d02e      	beq.n	800c6ac <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x194>
			{
				bIsPecValid = FALSE;
 800c64e:	2300      	movs	r3, #0
 800c650:	73fb      	strb	r3, [r7, #15]
				Adbms6948_aoChainStateInfo[knChainID].nCmdCntError[nDeviceId]++;
 800c652:	787a      	ldrb	r2, [r7, #1]
 800c654:	78b9      	ldrb	r1, [r7, #2]
 800c656:	481e      	ldr	r0, [pc, #120]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c658:	4613      	mov	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4413      	add	r3, r2
 800c65e:	440b      	add	r3, r1
 800c660:	3302      	adds	r3, #2
 800c662:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800c666:	1c58      	adds	r0, r3, #1
 800c668:	4c19      	ldr	r4, [pc, #100]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c66a:	4613      	mov	r3, r2
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	4413      	add	r3, r2
 800c670:	440b      	add	r3, r1
 800c672:	3302      	adds	r3, #2
 800c674:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
				/* Latch onto the command count set in the device */
				Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDeviceId] = (uint8_t)nCmdCntRcvd;
 800c678:	787a      	ldrb	r2, [r7, #1]
 800c67a:	78b9      	ldrb	r1, [r7, #2]
 800c67c:	4814      	ldr	r0, [pc, #80]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4403      	add	r3, r0
 800c688:	440b      	add	r3, r1
 800c68a:	3304      	adds	r3, #4
 800c68c:	7a7a      	ldrb	r2, [r7, #9]
 800c68e:	701a      	strb	r2, [r3, #0]
				if (TRUE == Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_CommandCount.nState)
 800c690:	4b10      	ldr	r3, [pc, #64]	; (800c6d4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	791b      	ldrb	r3, [r3, #4]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d107      	bne.n	800c6ac <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x194>
				{
					Adbms6948_Cmn_ReportRuntimeErr(
							Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_CommandCount.nErrID,
 800c69c:	4b0d      	ldr	r3, [pc, #52]	; (800c6d4 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1bc>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	88db      	ldrh	r3, [r3, #6]
					Adbms6948_Cmn_ReportRuntimeErr(
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff ff14 	bl	800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
							ADBMS6948_RUNTIME_E_STATUS_FAILED);
				}
			}
		}
		Adbms6948_aoChainStateInfo[knChainID].aLastReadCCs[nDeviceId] = (uint8_t)nCmdCntRcvd;
 800c6ac:	787a      	ldrb	r2, [r7, #1]
 800c6ae:	78b9      	ldrb	r1, [r7, #2]
 800c6b0:	4807      	ldr	r0, [pc, #28]	; (800c6d0 <_Z25Adbms6948_Cmn_ValidatePECPhhhh+0x1b8>)
 800c6b2:	4613      	mov	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4413      	add	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4403      	add	r3, r0
 800c6bc:	440b      	add	r3, r1
 800c6be:	3303      	adds	r3, #3
 800c6c0:	7a7a      	ldrb	r2, [r7, #9]
 800c6c2:	701a      	strb	r2, [r3, #0]
	}
	return (bIsPecValid);
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd90      	pop	{r4, r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	20000760 	.word	0x20000760
 800c6d4:	20000774 	.word	0x20000774

0800c6d8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>:
Adbms6948_ReturnType  Adbms6948_Cmn_VerifyCmdCnt
(
		boolean   bWithCfgRead,
		uint8_t    knChainID
)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	460a      	mov	r2, r1
 800c6e2:	71fb      	strb	r3, [r7, #7]
 800c6e4:	4613      	mov	r3, r2
 800c6e6:	71bb      	strb	r3, [r7, #6]
	Adbms6948_ReturnType  nRet = E_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	77fb      	strb	r3, [r7, #31]

	if (TRUE == bWithCfgRead)
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d10b      	bne.n	800c70a <_Z26Adbms6948_Cmn_VerifyCmdCnthh+0x32>
	{
		uint8_t  aRdCfgData[ADBMS6948_NUMOF_REGGRP_ONE][ADBMS6948_CMD_DATA_LEN + (ADBMS6948_REG_DATA_LEN_WITH_PEC * ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)];
		uint16_t anCmdList[ADBMS6948_NUMOF_REGGRP_ONE];
		/* Read configuration register group A and verify the PEC and command counter. */
		anCmdList[0u] = ADBMS6948_CMD_RDCFGA;
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	81bb      	strh	r3, [r7, #12]
		nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, knChainID);
 800c6f6:	79bb      	ldrb	r3, [r7, #6]
 800c6f8:	f107 0110 	add.w	r1, r7, #16
 800c6fc:	f107 000c 	add.w	r0, r7, #12
 800c700:	2201      	movs	r2, #1
 800c702:	f000 fab5 	bl	800cc70 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800c706:	4603      	mov	r3, r0
 800c708:	77fb      	strb	r3, [r7, #31]
	}

	return (nRet);
 800c70a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <_Z23Adbms6948_Cmn_InitChainh>:

  @return          E_OK    : Operation was successful \n
                    E_NOT_OK: Operation failed \n
 */
Adbms6948_ReturnType  Adbms6948_Cmn_InitChain(uint8_t nChainIndex)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b096      	sub	sp, #88	; 0x58
 800c718:	af02      	add	r7, sp, #8
 800c71a:	4603      	mov	r3, r0
 800c71c:	71fb      	strb	r3, [r7, #7]
	uint8_t   nCfgDataChain[(ADBMS6948_REG_GRP_LEN)*ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN];
	uint8_t   nCfgAData[ADBMS6948_REG_GRP_LEN] = {0};
 800c71e:	2300      	movs	r3, #0
 800c720:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c722:	2300      	movs	r3, #0
 800c724:	863b      	strh	r3, [r7, #48]	; 0x30
	uint8_t   nCfgBData[ADBMS6948_REG_GRP_LEN] = {0};
 800c726:	2300      	movs	r3, #0
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
 800c72a:	2300      	movs	r3, #0
 800c72c:	853b      	strh	r3, [r7, #40]	; 0x28
	uint8_t   nCfgCData[ADBMS6948_REG_GRP_LEN] = {0};
 800c72e:	2300      	movs	r3, #0
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	2300      	movs	r3, #0
 800c734:	843b      	strh	r3, [r7, #32]
	uint16_t  nUnderVoltCompVal,nOverVoltCompVal,nTempGpo;
	uint8_t   nTemp;
	uint8_t   nGpio11Sel;
	uint16_t  anCmdList[ADBMS6948_NUMOF_REGGRP_ONE];
	Adbms6948_ReturnType  nRet = E_OK;
 800c736:	2300      	movs	r3, #0
 800c738:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t  aRdCfgData[ADBMS6948_NUMOF_REGGRP_ONE][ADBMS6948_CMD_DATA_LEN +
 800c73c:	f107 030c 	add.w	r3, r7, #12
 800c740:	2200      	movs	r2, #0
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	605a      	str	r2, [r3, #4]
 800c746:	609a      	str	r2, [r3, #8]
													(ADBMS6948_REG_DATA_LEN_WITH_PEC *
															ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)] = {0u};

	if (TRUE == Adbms6948_pConfig->Adbms6948_pDaisyChainCfg[nChainIndex].Adbms6948_bEnableInit)
 800c748:	4bc3      	ldr	r3, [pc, #780]	; (800ca58 <_Z23Adbms6948_Cmn_InitChainh+0x344>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	6819      	ldr	r1, [r3, #0]
 800c74e:	79fa      	ldrb	r2, [r7, #7]
 800c750:	4613      	mov	r3, r2
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	1a9b      	subs	r3, r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	440b      	add	r3, r1
 800c75a:	785b      	ldrb	r3, [r3, #1]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	f040 819e 	bne.w	800ca9e <_Z23Adbms6948_Cmn_InitChainh+0x38a>
	{

		/* Reference ON/OFF */
		nTemp = (uint8_t)Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_bEnableRefOn;
 800c762:	4bbe      	ldr	r3, [pc, #760]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c764:	6819      	ldr	r1, [r3, #0]
 800c766:	79fa      	ldrb	r2, [r7, #7]
 800c768:	4613      	mov	r3, r2
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	1a9b      	subs	r3, r3, r2
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	440b      	add	r3, r1
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		nCfgAData[0] = (uint8_t)(nTemp << ADBMS6948_CFGAR0_POS_REFON);
 800c778:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c77c:	01db      	lsls	r3, r3, #7
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		/*C and S comparison threshold voltage value */
		nTemp = (uint8_t)Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_eCSThresholdVolt;
 800c784:	4bb5      	ldr	r3, [pc, #724]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c786:	6819      	ldr	r1, [r3, #0]
 800c788:	79fa      	ldrb	r2, [r7, #7]
 800c78a:	4613      	mov	r3, r2
 800c78c:	00db      	lsls	r3, r3, #3
 800c78e:	1a9b      	subs	r3, r3, r2
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	440b      	add	r3, r1
 800c794:	7bdb      	ldrb	r3, [r3, #15]
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		nCfgAData[0] = (uint8_t)(nCfgAData[0] |
 800c79a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
				((uint8_t)(((uint8_t)nTemp ) & (ADBMS6948_CFGAR0_MASK_CTH))));
 800c79e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7a2:	f003 0307 	and.w	r3, r3, #7
 800c7a6:	b2db      	uxtb	r3, r3
		nCfgAData[0] = (uint8_t)(nCfgAData[0] |
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		/*GPIO Pin control selection */
		nTempGpo = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nGPIOPinCtrlValue;
 800c7b0:	4baa      	ldr	r3, [pc, #680]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c7b2:	6819      	ldr	r1, [r3, #0]
 800c7b4:	79fa      	ldrb	r2, [r7, #7]
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	1a9b      	subs	r3, r3, r2
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	440b      	add	r3, r1
 800c7c0:	891b      	ldrh	r3, [r3, #8]
 800c7c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		nCfgAData[3] = (uint8_t)(nTempGpo & ADBMS6948_CFGAR3_MASK_GPO);
 800c7c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		nCfgAData[4] = (uint8_t)(((nTempGpo >> 8u) & ADBMS6948_CFGAR4_MASK_GPO) << ADBMS6948_CFGAR4_POS_GPO);
 800c7d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c7d4:	121b      	asrs	r3, r3, #8
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 0307 	and.w	r3, r3, #7
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

		/*FC bit value */
		nTemp = (uint8_t)Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_eIIRCornerFreq;
 800c7e2:	4b9e      	ldr	r3, [pc, #632]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c7e4:	6819      	ldr	r1, [r3, #0]
 800c7e6:	79fa      	ldrb	r2, [r7, #7]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	1a9b      	subs	r3, r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	440b      	add	r3, r1
 800c7f2:	7b9b      	ldrb	r3, [r3, #14]
 800c7f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		nCfgAData[5] = (uint8_t)(((uint8_t)nTemp) & (ADBMS6948_CFGAR5_MASK_FC));
 800c7f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7fc:	f003 0307 	and.w	r3, r3, #7
 800c800:	b2db      	uxtb	r3, r3
 800c802:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		/* Under Voltage Settings */
		nUnderVoltCompVal = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nUnderVoltThreshold;
 800c806:	4b95      	ldr	r3, [pc, #596]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c808:	6819      	ldr	r1, [r3, #0]
 800c80a:	79fa      	ldrb	r2, [r7, #7]
 800c80c:	4613      	mov	r3, r2
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	1a9b      	subs	r3, r3, r2
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	440b      	add	r3, r1
 800c816:	899b      	ldrh	r3, [r3, #12]
 800c818:	87fb      	strh	r3, [r7, #62]	; 0x3e
		nCfgBData[0] = (uint8_t)(nCfgBData[0] | ((uint8_t)(nUnderVoltCompVal & (uint8_t)0x0FF)));
 800c81a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800c81e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c820:	b2db      	uxtb	r3, r3
 800c822:	4313      	orrs	r3, r2
 800c824:	b2db      	uxtb	r3, r3
 800c826:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		nCfgBData[1] = (uint8_t)(nCfgBData[1] | (uint8_t)((nUnderVoltCompVal & (uint16_t)0xF00u) >> 8u));
 800c82a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c82e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c830:	121b      	asrs	r3, r3, #8
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 030f 	and.w	r3, r3, #15
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	4313      	orrs	r3, r2
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		/* Over Voltage Settings */
		nOverVoltCompVal = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nOverVoltThreshold;
 800c842:	4b86      	ldr	r3, [pc, #536]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c844:	6819      	ldr	r1, [r3, #0]
 800c846:	79fa      	ldrb	r2, [r7, #7]
 800c848:	4613      	mov	r3, r2
 800c84a:	00db      	lsls	r3, r3, #3
 800c84c:	1a9b      	subs	r3, r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	440b      	add	r3, r1
 800c852:	895b      	ldrh	r3, [r3, #10]
 800c854:	87bb      	strh	r3, [r7, #60]	; 0x3c
		nCfgBData[1] = (uint8_t)(nCfgBData[1] | (uint8_t)((uint16_t)(nOverVoltCompVal & 0x000Fu) << 4u));
 800c856:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c85a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c85c:	011b      	lsls	r3, r3, #4
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	4313      	orrs	r3, r2
 800c862:	b2db      	uxtb	r3, r3
 800c864:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		nCfgBData[2] = (uint8_t)(nCfgBData[2] | (uint8_t)((nOverVoltCompVal & (uint16_t)0x0FF0u) >> 4u));
 800c868:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c86c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c86e:	111b      	asrs	r3, r3, #4
 800c870:	b2db      	uxtb	r3, r3
 800c872:	4313      	orrs	r3, r2
 800c874:	b2db      	uxtb	r3, r3
 800c876:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/* balancing */
		nCfgBData[3] = 0xB2;
 800c87a:	23b2      	movs	r3, #178	; 0xb2
 800c87c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		/* GPIO11 pin selection */
		nGpio11Sel = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_eGpio11CfgType;
 800c880:	4b76      	ldr	r3, [pc, #472]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c882:	6819      	ldr	r1, [r3, #0]
 800c884:	79fa      	ldrb	r2, [r7, #7]
 800c886:	4613      	mov	r3, r2
 800c888:	00db      	lsls	r3, r3, #3
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	440b      	add	r3, r1
 800c890:	7c1b      	ldrb	r3, [r3, #16]
 800c892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		nCfgCData[4] = (uint8_t)((nGpio11Sel & 0x03) << ADBMS6948_CFGCR0_POS_G11_SEL);
 800c896:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c89a:	019b      	lsls	r3, r3, #6
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f887 3020 	strb.w	r3, [r7, #32]

		/* Wake up N devices in the daisy chain */
		Adbms6948_aoChainStateInfo[nChainIndex].bFirstWakeup = TRUE;
 800c8a2:	79fa      	ldrb	r2, [r7, #7]
 800c8a4:	496e      	ldr	r1, [pc, #440]	; (800ca60 <_Z23Adbms6948_Cmn_InitChainh+0x34c>)
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	440b      	add	r3, r1
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	701a      	strb	r2, [r3, #0]

		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800c8b4:	4b69      	ldr	r3, [pc, #420]	; (800ca5c <_Z23Adbms6948_Cmn_InitChainh+0x348>)
 800c8b6:	6819      	ldr	r1, [r3, #0]
 800c8b8:	79fa      	ldrb	r2, [r7, #7]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	00db      	lsls	r3, r3, #3
 800c8be:	1a9b      	subs	r3, r3, r2
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	440b      	add	r3, r1
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800c8c4:	79fa      	ldrb	r2, [r7, #7]
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800c8c6:	7898      	ldrb	r0, [r3, #2]
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800c8c8:	4965      	ldr	r1, [pc, #404]	; (800ca60 <_Z23Adbms6948_Cmn_InitChainh+0x34c>)
 800c8ca:	4613      	mov	r3, r2
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	440b      	add	r3, r1
 800c8d4:	3305      	adds	r3, #5
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	701a      	strb	r2, [r3, #0]

		/*Wakeup*/
		Adbms6948_Cmn_WakeUpBmsIC(nChainIndex);
 800c8da:	79fb      	ldrb	r3, [r7, #7]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7ff fdcd 	bl	800c47c <_Z25Adbms6948_Cmn_WakeUpBmsICh>

		/*Software reset the IC, puts it into sleep mode*/
		Adbms6948_Cmd_ExecCmd(ADBMS6948_CMD_SRST, FALSE, nChainIndex);
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	2100      	movs	r1, #0
 800c8e8:	2027      	movs	r0, #39	; 0x27
 800c8ea:	f000 fcab 	bl	800d244 <_Z21Adbms6948_Cmd_ExecCmdthh>

		/*Wakeup the IC again*/
		Adbms6948_Cmn_WakeUpBmsIC(nChainIndex);
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7ff fdc3 	bl	800c47c <_Z25Adbms6948_Cmn_WakeUpBmsICh>

		/* Copy the configuration data to local variable */
		Adbms6948_lPrepConfigBuff(ADBMS6948_CMD_RDCFGA,aRdCfgData,nCfgAData,&nCfgDataChain[0u],nChainIndex);
 800c8f6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c8fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c8fe:	f107 010c 	add.w	r1, r7, #12
 800c902:	79fb      	ldrb	r3, [r7, #7]
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	4603      	mov	r3, r0
 800c908:	2002      	movs	r0, #2
 800c90a:	f000 fb91 	bl	800d030 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>

		/* Clear the command counter. */
		Adbms6948_Cmd_ExecCmd(ADBMS6948_CMD_RSTCC, FALSE, nChainIndex);
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	461a      	mov	r2, r3
 800c912:	2100      	movs	r1, #0
 800c914:	202e      	movs	r0, #46	; 0x2e
 800c916:	f000 fc95 	bl	800d244 <_Z21Adbms6948_Cmd_ExecCmdthh>

		/* Write the configuration register to the BMS IC */
		Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRCFGA, &nCfgDataChain[0], nChainIndex);
 800c91a:	79fa      	ldrb	r2, [r7, #7]
 800c91c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c920:	4619      	mov	r1, r3
 800c922:	2001      	movs	r0, #1
 800c924:	f000 fd0c 	bl	800d340 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>

		/* Read the configuration register from the BMS IC and compare with the written values*/
		anCmdList[0u] = ADBMS6948_CMD_RDCFGA;
 800c928:	2302      	movs	r3, #2
 800c92a:	833b      	strh	r3, [r7, #24]
		nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, nChainIndex);
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	f107 010c 	add.w	r1, r7, #12
 800c932:	f107 0018 	add.w	r0, r7, #24
 800c936:	2201      	movs	r2, #1
 800c938:	f000 f99a 	bl	800cc70 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800c93c:	4603      	mov	r3, r0
 800c93e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (nRet != E_OK) return nRet;
 800c942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c946:	2b00      	cmp	r3, #0
 800c948:	d002      	beq.n	800c950 <_Z23Adbms6948_Cmn_InitChainh+0x23c>
 800c94a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c94e:	e0d6      	b.n	800cafe <_Z23Adbms6948_Cmn_InitChainh+0x3ea>

		/*Calibration delay*/
		ADI_PAL_TIMERDELAY(ADBMS6948_TIME_CALIBRATION, nChainIndex);
 800c950:	79fb      	ldrb	r3, [r7, #7]
 800c952:	4619      	mov	r1, r3
 800c954:	4843      	ldr	r0, [pc, #268]	; (800ca64 <_Z23Adbms6948_Cmn_InitChainh+0x350>)
 800c956:	f7ff fd84 	bl	800c462 <_Z18adi_pal_TimerDelaymh>
				nRet = E_NOT_OK;
				break;
			}
		}
#endif
if (E_OK == nRet)
 800c95a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d13a      	bne.n	800c9d8 <_Z23Adbms6948_Cmn_InitChainh+0x2c4>
{
	/* Copy the configuration data to local variable */
	Adbms6948_lPrepConfigBuff(ADBMS6948_CMD_RDCFGB, aRdCfgData, nCfgBData, &nCfgDataChain[0u], nChainIndex);
 800c962:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c966:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c96a:	f107 010c 	add.w	r1, r7, #12
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	4603      	mov	r3, r0
 800c974:	2026      	movs	r0, #38	; 0x26
 800c976:	f000 fb5b 	bl	800d030 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>
	/* Write the configuration to the chain */
	Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRCFGB, &nCfgDataChain[0], nChainIndex);
 800c97a:	79fa      	ldrb	r2, [r7, #7]
 800c97c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c980:	4619      	mov	r1, r3
 800c982:	2024      	movs	r0, #36	; 0x24
 800c984:	f000 fcdc 	bl	800d340 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>
	/* Read the configuration register from the BMS IC and compare with the written values*/
	anCmdList[0u] = ADBMS6948_CMD_RDCFGB;
 800c988:	2326      	movs	r3, #38	; 0x26
 800c98a:	833b      	strh	r3, [r7, #24]
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, nChainIndex);
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	f107 010c 	add.w	r1, r7, #12
 800c992:	f107 0018 	add.w	r0, r7, #24
 800c996:	2201      	movs	r2, #1
 800c998:	f000 f96a 	bl	800cc70 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9a8:	2b05      	cmp	r3, #5
 800c9aa:	dc15      	bgt.n	800c9d8 <_Z23Adbms6948_Cmn_InitChainh+0x2c4>
	{
		if (aRdCfgData[0][i + ADBMS6948_CMD_DATA_LEN] != nCfgDataChain[i])
 800c9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800c9ba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800c9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c0:	440b      	add	r3, r1
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d003      	beq.n	800c9d0 <_Z23Adbms6948_Cmn_InitChainh+0x2bc>
		{
			nRet = E_NOT_OK;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 800c9ce:	e003      	b.n	800c9d8 <_Z23Adbms6948_Cmn_InitChainh+0x2c4>
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800c9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9d6:	e7e6      	b.n	800c9a6 <_Z23Adbms6948_Cmn_InitChainh+0x292>
		}
	}
}

if (E_OK == nRet)
 800c9d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d143      	bne.n	800ca68 <_Z23Adbms6948_Cmn_InitChainh+0x354>
{
	/* Copy the configuration data to local variable */
	Adbms6948_lPrepConfigBuff(ADBMS6948_CMD_RDCFGC,aRdCfgData,nCfgCData,&nCfgDataChain[0u],nChainIndex);
 800c9e0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c9e4:	f107 021c 	add.w	r2, r7, #28
 800c9e8:	f107 010c 	add.w	r1, r7, #12
 800c9ec:	79fb      	ldrb	r3, [r7, #7]
 800c9ee:	9300      	str	r3, [sp, #0]
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2082      	movs	r0, #130	; 0x82
 800c9f4:	f000 fb1c 	bl	800d030 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>
	/* Write the configuration to the chain */
	Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRCFGC, &nCfgDataChain[0], nChainIndex);
 800c9f8:	79fa      	ldrb	r2, [r7, #7]
 800c9fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c9fe:	4619      	mov	r1, r3
 800ca00:	2081      	movs	r0, #129	; 0x81
 800ca02:	f000 fc9d 	bl	800d340 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>
	/* Read the configuration register from the BMS IC and compare with the written values*/
	anCmdList[0u] = ADBMS6948_CMD_RDCFGC;
 800ca06:	2382      	movs	r3, #130	; 0x82
 800ca08:	833b      	strh	r3, [r7, #24]
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, nChainIndex);
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
 800ca0c:	f107 010c 	add.w	r1, r7, #12
 800ca10:	f107 0018 	add.w	r0, r7, #24
 800ca14:	2201      	movs	r2, #1
 800ca16:	f000 f92b 	bl	800cc70 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800ca20:	2300      	movs	r3, #0
 800ca22:	647b      	str	r3, [r7, #68]	; 0x44
 800ca24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca26:	2b05      	cmp	r3, #5
 800ca28:	dc1e      	bgt.n	800ca68 <_Z23Adbms6948_Cmn_InitChainh+0x354>
	{
		if (aRdCfgData[0][i + ADBMS6948_CMD_DATA_LEN] != nCfgDataChain[i])
 800ca2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ca32:	4413      	add	r3, r2
 800ca34:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800ca38:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ca3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca3e:	440b      	add	r3, r1
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d003      	beq.n	800ca4e <_Z23Adbms6948_Cmn_InitChainh+0x33a>
		{
			nRet = E_NOT_OK;
 800ca46:	2301      	movs	r3, #1
 800ca48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
 800ca4c:	e00c      	b.n	800ca68 <_Z23Adbms6948_Cmn_InitChainh+0x354>
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800ca4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca50:	3301      	adds	r3, #1
 800ca52:	647b      	str	r3, [r7, #68]	; 0x44
 800ca54:	e7e6      	b.n	800ca24 <_Z23Adbms6948_Cmn_InitChainh+0x310>
 800ca56:	bf00      	nop
 800ca58:	20000774 	.word	0x20000774
 800ca5c:	20000778 	.word	0x20000778
 800ca60:	20000760 	.word	0x20000760
 800ca64:	00030d40 	.word	0x00030d40
		}
	}
}

if (E_OK == nRet)
 800ca68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d116      	bne.n	800ca9e <_Z23Adbms6948_Cmn_InitChainh+0x38a>
{
	if (TRUE == Adbms6948_Cmn_IsError(nChainIndex))
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fd40 	bl	800c4f8 <_Z21Adbms6948_Cmn_IsErrorh>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	bf0c      	ite	eq
 800ca7e:	2301      	moveq	r3, #1
 800ca80:	2300      	movne	r3, #0
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00a      	beq.n	800ca9e <_Z23Adbms6948_Cmn_InitChainh+0x38a>
	{
		nRet = E_NOT_OK;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		/* Platform error. */
		Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID,
 800ca8e:	4b1e      	ldr	r3, [pc, #120]	; (800cb08 <_Z23Adbms6948_Cmn_InitChainh+0x3f4>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	895b      	ldrh	r3, [r3, #10]
 800ca96:	2101      	movs	r1, #1
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7ff fd1b 	bl	800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
				ADBMS6948_RUNTIME_E_STATUS_FAILED);
	}
}
	}
	if (E_OK == nRet)
 800ca9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d129      	bne.n	800cafa <_Z23Adbms6948_Cmn_InitChainh+0x3e6>
	{
		/* Update the state information */
		Adbms6948_aoChainStateInfo[nChainIndex].eChainState = ADBMS6948_ST_CHAIN_IDLE;
 800caa6:	79fa      	ldrb	r2, [r7, #7]
 800caa8:	4918      	ldr	r1, [pc, #96]	; (800cb0c <_Z23Adbms6948_Cmn_InitChainh+0x3f8>)
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	440b      	add	r3, r1
 800cab4:	3310      	adds	r3, #16
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800caba:	4b15      	ldr	r3, [pc, #84]	; (800cb10 <_Z23Adbms6948_Cmn_InitChainh+0x3fc>)
 800cabc:	6819      	ldr	r1, [r3, #0]
 800cabe:	79fa      	ldrb	r2, [r7, #7]
 800cac0:	4613      	mov	r3, r2
 800cac2:	00db      	lsls	r3, r3, #3
 800cac4:	1a9b      	subs	r3, r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	440b      	add	r3, r1
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800caca:	79fa      	ldrb	r2, [r7, #7]
				Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800cacc:	7898      	ldrb	r0, [r3, #2]
		Adbms6948_aoChainStateInfo[nChainIndex].nCurrNoOfDevices =
 800cace:	490f      	ldr	r1, [pc, #60]	; (800cb0c <_Z23Adbms6948_Cmn_InitChainh+0x3f8>)
 800cad0:	4613      	mov	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4413      	add	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	440b      	add	r3, r1
 800cada:	3305      	adds	r3, #5
 800cadc:	4602      	mov	r2, r0
 800cade:	701a      	strb	r2, [r3, #0]
		Adbms6948_aoChainStateInfo[nChainIndex].bFirstWakeup = FALSE;
 800cae0:	79fa      	ldrb	r2, [r7, #7]
 800cae2:	490a      	ldr	r1, [pc, #40]	; (800cb0c <_Z23Adbms6948_Cmn_InitChainh+0x3f8>)
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	440b      	add	r3, r1
 800caee:	2200      	movs	r2, #0
 800caf0:	701a      	strb	r2, [r3, #0]
		Adbms6948_lInitMaxCellGrps(nChainIndex);
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f000 fa2f 	bl	800cf58 <_ZL26Adbms6948_lInitMaxCellGrpsh>
	}

	return (nRet);
 800cafa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f

}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3750      	adds	r7, #80	; 0x50
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20000774 	.word	0x20000774
 800cb0c:	20000760 	.word	0x20000760
 800cb10:	20000778 	.word	0x20000778

0800cb14 <_Z24Adbms6948_discharge_cellt>:
	return (nRet);

}

Adbms6948_ReturnType Adbms6948_discharge_cell(uint16_t DischargedCell)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b08a      	sub	sp, #40	; 0x28
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	80fb      	strh	r3, [r7, #6]

	uint8_t  aRdCfgData[ADBMS6948_NUMOF_REGGRP_ONE][ADBMS6948_CMD_DATA_LEN +
 800cb1e:	f107 0314 	add.w	r3, r7, #20
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	605a      	str	r2, [r3, #4]
 800cb28:	609a      	str	r2, [r3, #8]
													(ADBMS6948_REG_DATA_LEN_WITH_PEC *
															ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)] = {0u};
	uint8_t   nCfgDataChain[(ADBMS6948_REG_GRP_LEN)*ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN];
	//	uint8_t   nCfgBData[ADBMS6948_REG_GRP_LEN] = {0};
	uint16_t  anCmdList[ADBMS6948_NUMOF_REGGRP_ONE];
	Adbms6948_ReturnType  nRet = E_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* balancing */
	nCfgDataChain[0] = ((DischargedCell & 0x0002)? 0xF0:0x00) | ((DischargedCell & 0x0001)? 0x0F:0x00);
 800cb30:	88fb      	ldrh	r3, [r7, #6]
 800cb32:	f003 0302 	and.w	r3, r3, #2
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <_Z24Adbms6948_discharge_cellt+0x2c>
 800cb3a:	f06f 020f 	mvn.w	r2, #15
 800cb3e:	e000      	b.n	800cb42 <_Z24Adbms6948_discharge_cellt+0x2e>
 800cb40:	2200      	movs	r2, #0
 800cb42:	88fb      	ldrh	r3, [r7, #6]
 800cb44:	f003 0301 	and.w	r3, r3, #1
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <_Z24Adbms6948_discharge_cellt+0x3c>
 800cb4c:	230f      	movs	r3, #15
 800cb4e:	e000      	b.n	800cb52 <_Z24Adbms6948_discharge_cellt+0x3e>
 800cb50:	2300      	movs	r3, #0
 800cb52:	4313      	orrs	r3, r2
 800cb54:	b25b      	sxtb	r3, r3
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	733b      	strb	r3, [r7, #12]
	nCfgDataChain[1] = ((DischargedCell & 0x0008)? 0xF0:0x00) | ((DischargedCell & 0x0004)? 0x0F:0x00);
 800cb5a:	88fb      	ldrh	r3, [r7, #6]
 800cb5c:	f003 0308 	and.w	r3, r3, #8
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <_Z24Adbms6948_discharge_cellt+0x56>
 800cb64:	f06f 020f 	mvn.w	r2, #15
 800cb68:	e000      	b.n	800cb6c <_Z24Adbms6948_discharge_cellt+0x58>
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	88fb      	ldrh	r3, [r7, #6]
 800cb6e:	f003 0304 	and.w	r3, r3, #4
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d001      	beq.n	800cb7a <_Z24Adbms6948_discharge_cellt+0x66>
 800cb76:	230f      	movs	r3, #15
 800cb78:	e000      	b.n	800cb7c <_Z24Adbms6948_discharge_cellt+0x68>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	b25b      	sxtb	r3, r3
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	737b      	strb	r3, [r7, #13]
	nCfgDataChain[2] = ((DischargedCell & 0x0020)? 0xF0:0x00) | ((DischargedCell & 0x0010)? 0x0F:0x00);
 800cb84:	88fb      	ldrh	r3, [r7, #6]
 800cb86:	f003 0320 	and.w	r3, r3, #32
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d002      	beq.n	800cb94 <_Z24Adbms6948_discharge_cellt+0x80>
 800cb8e:	f06f 020f 	mvn.w	r2, #15
 800cb92:	e000      	b.n	800cb96 <_Z24Adbms6948_discharge_cellt+0x82>
 800cb94:	2200      	movs	r2, #0
 800cb96:	88fb      	ldrh	r3, [r7, #6]
 800cb98:	f003 0310 	and.w	r3, r3, #16
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <_Z24Adbms6948_discharge_cellt+0x90>
 800cba0:	230f      	movs	r3, #15
 800cba2:	e000      	b.n	800cba6 <_Z24Adbms6948_discharge_cellt+0x92>
 800cba4:	2300      	movs	r3, #0
 800cba6:	4313      	orrs	r3, r2
 800cba8:	b25b      	sxtb	r3, r3
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	73bb      	strb	r3, [r7, #14]
	nCfgDataChain[3] = ((DischargedCell & 0x0080)? 0xF0:0x00) | ((DischargedCell & 0x0040)? 0x0F:0x00);
 800cbae:	88fb      	ldrh	r3, [r7, #6]
 800cbb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d002      	beq.n	800cbbe <_Z24Adbms6948_discharge_cellt+0xaa>
 800cbb8:	f06f 020f 	mvn.w	r2, #15
 800cbbc:	e000      	b.n	800cbc0 <_Z24Adbms6948_discharge_cellt+0xac>
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	88fb      	ldrh	r3, [r7, #6]
 800cbc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d001      	beq.n	800cbce <_Z24Adbms6948_discharge_cellt+0xba>
 800cbca:	230f      	movs	r3, #15
 800cbcc:	e000      	b.n	800cbd0 <_Z24Adbms6948_discharge_cellt+0xbc>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	b25b      	sxtb	r3, r3
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	73fb      	strb	r3, [r7, #15]
	nCfgDataChain[4] = ((DischargedCell & 0x0200)? 0xF0:0x00) | ((DischargedCell & 0x0100)? 0x0F:0x00);
 800cbd8:	88fb      	ldrh	r3, [r7, #6]
 800cbda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d002      	beq.n	800cbe8 <_Z24Adbms6948_discharge_cellt+0xd4>
 800cbe2:	f06f 020f 	mvn.w	r2, #15
 800cbe6:	e000      	b.n	800cbea <_Z24Adbms6948_discharge_cellt+0xd6>
 800cbe8:	2200      	movs	r2, #0
 800cbea:	88fb      	ldrh	r3, [r7, #6]
 800cbec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <_Z24Adbms6948_discharge_cellt+0xe4>
 800cbf4:	230f      	movs	r3, #15
 800cbf6:	e000      	b.n	800cbfa <_Z24Adbms6948_discharge_cellt+0xe6>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	b25b      	sxtb	r3, r3
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	743b      	strb	r3, [r7, #16]
	nCfgDataChain[5] = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	747b      	strb	r3, [r7, #17]

	/* Write the configuration to the chain */
	Adbms6948_Cmd_ExecuteCmdWR(ADBMS6948_CMD_WRPWMA, &nCfgDataChain[0], 0);
 800cc06:	f107 030c 	add.w	r3, r7, #12
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	2020      	movs	r0, #32
 800cc10:	f000 fb96 	bl	800d340 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>
	/* Read the configuration register from
	 * the BMS IC and compare with the written values*/
	anCmdList[0u] = ADBMS6948_CMD_RDPWMA;
 800cc14:	2322      	movs	r3, #34	; 0x22
 800cc16:	813b      	strh	r3, [r7, #8]
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, aRdCfgData, ADBMS6948_NUMOF_REGGRP_ONE, 0);
 800cc18:	f107 0114 	add.w	r1, r7, #20
 800cc1c:	f107 0008 	add.w	r0, r7, #8
 800cc20:	2300      	movs	r3, #0
 800cc22:	2201      	movs	r2, #1
 800cc24:	f000 f824 	bl	800cc70 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800cc2e:	2300      	movs	r3, #0
 800cc30:	623b      	str	r3, [r7, #32]
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	2b05      	cmp	r3, #5
 800cc36:	dc15      	bgt.n	800cc64 <_Z24Adbms6948_discharge_cellt+0x150>
	{
		if (aRdCfgData[0][i + ADBMS6948_CMD_DATA_LEN] != nCfgDataChain[i])
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	3304      	adds	r3, #4
 800cc3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cc40:	4413      	add	r3, r2
 800cc42:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800cc46:	f107 010c 	add.w	r1, r7, #12
 800cc4a:	6a3b      	ldr	r3, [r7, #32]
 800cc4c:	440b      	add	r3, r1
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d003      	beq.n	800cc5c <_Z24Adbms6948_discharge_cellt+0x148>
		{
			nRet = E_NOT_OK;
 800cc54:	2301      	movs	r3, #1
 800cc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800cc5a:	e003      	b.n	800cc64 <_Z24Adbms6948_discharge_cellt+0x150>
	for(int i = 0; i < ADBMS6948_REG_DATA_LEN_WITHOUT_PEC; ++i)
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	623b      	str	r3, [r7, #32]
 800cc62:	e7e6      	b.n	800cc32 <_Z24Adbms6948_discharge_cellt+0x11e>
		}
	}
	return (nRet);
 800cc64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3728      	adds	r7, #40	; 0x28
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>:
/*****************************************************************************/
Adbms6948_ReturnType  Adbms6948_Cmn_ReadRegGroup(uint16_t       *pnCmdLst,
		uint8_t        pRxBuff[][ADBMS6948_MAX_FRAME_SIZE],
		uint8_t        nCmdLstLen,
		const uint8_t  knChainID)
{
 800cc70:	b590      	push	{r4, r7, lr}
 800cc72:	b09f      	sub	sp, #124	; 0x7c
 800cc74:	af02      	add	r7, sp, #8
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	460b      	mov	r3, r1
 800cc80:	71fb      	strb	r3, [r7, #7]
 800cc82:	4613      	mov	r3, r2
 800cc84:	71bb      	strb	r3, [r7, #6]
	Adbms6948_ReturnType  nRet = E_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t  aRdDataBuff[ADBMS6948_NUMOF_REGGRP_SIX][ADBMS6948_CMD_DATA_LEN + (ADBMS6948_REG_DATA_LEN_WITH_PEC * ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)] = {0u};
 800cc8c:	f107 0314 	add.w	r3, r7, #20
 800cc90:	2248      	movs	r2, #72	; 0x48
 800cc92:	2100      	movs	r1, #0
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 fd0d 	bl	800e6b4 <memset>
	uint32_t nDataCfg;
	uint32_t nDataBufLen;
	uint16_t nDevStartIdx, nDevDataIdx;
	boolean  bValidData;

	nDataBufLen = (uint32_t)((uint32_t)ADBMS6948_CMD_DATA_LEN + (uint32_t)(Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices * (uint32_t)ADBMS6948_REG_DATA_LEN_WITH_PEC));
 800cc9a:	79ba      	ldrb	r2, [r7, #6]
 800cc9c:	4953      	ldr	r1, [pc, #332]	; (800cdec <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x17c>)
 800cc9e:	4613      	mov	r3, r2
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	4413      	add	r3, r2
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	440b      	add	r3, r1
 800cca8:	3305      	adds	r3, #5
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	3304      	adds	r3, #4
 800ccb0:	66bb      	str	r3, [r7, #104]	; 0x68
	nDataCfg = (((uint32_t)nCmdLstLen << 16u) | (nDataBufLen));
 800ccb2:	79fb      	ldrb	r3, [r7, #7]
 800ccb4:	041b      	lsls	r3, r3, #16
 800ccb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	667b      	str	r3, [r7, #100]	; 0x64

	/* Read the configuration of the chain */
	Adbms6948_Cmd_ExecuteCmdRD(pnCmdLst, aRdDataBuff, nDataCfg, FALSE, knChainID);
 800ccbc:	f107 0114 	add.w	r1, r7, #20
 800ccc0:	79bb      	ldrb	r3, [r7, #6]
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f000 fbf5 	bl	800d4b8 <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh>

	for (nGrpIdx = 0u; nGrpIdx < nCmdLstLen; nGrpIdx++) {
 800ccce:	2300      	movs	r3, #0
 800ccd0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800ccd4:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d27f      	bcs.n	800cdde <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x16e>
		for (nDevIdx = 0u;
 800ccde:	2300      	movs	r3, #0
 800cce0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
				nDevIdx < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800cce4:	79ba      	ldrb	r2, [r7, #6]
 800cce6:	4941      	ldr	r1, [pc, #260]	; (800cdec <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x17c>)
 800cce8:	4613      	mov	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	440b      	add	r3, r1
 800ccf2:	3305      	adds	r3, #5
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d269      	bcs.n	800cdd2 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x162>
				nDevIdx++)
		{
			nDevStartIdx = (uint16_t)((uint16_t)ADBMS6948_CMD_DATA_LEN + (nDevIdx * (uint16_t)ADBMS6948_REG_DATA_LEN_WITH_PEC));
 800ccfe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	3304      	adds	r3, #4
 800cd0a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			bValidData = Adbms6948_Cmn_ValidatePEC((uint8_t*)&aRdDataBuff[nGrpIdx][nDevStartIdx],ADBMS6948_REG_DATA_LEN_WITH_PEC, nDevIdx, knChainID);
 800cd0e:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800cd12:	f8b7 0062 	ldrh.w	r0, [r7, #98]	; 0x62
 800cd16:	f107 0114 	add.w	r1, r7, #20
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	005b      	lsls	r3, r3, #1
 800cd1e:	4413      	add	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4403      	add	r3, r0
 800cd24:	18c8      	adds	r0, r1, r3
 800cd26:	79bb      	ldrb	r3, [r7, #6]
 800cd28:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 800cd2c:	2108      	movs	r1, #8
 800cd2e:	f7ff fbf3 	bl	800c518 <_Z25Adbms6948_Cmn_ValidatePECPhhhh>
 800cd32:	4603      	mov	r3, r0
 800cd34:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
			if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIdx])
 800cd38:	79ba      	ldrb	r2, [r7, #6]
 800cd3a:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800cd3e:	482b      	ldr	r0, [pc, #172]	; (800cdec <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x17c>)
 800cd40:	4613      	mov	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	4413      	add	r3, r2
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4403      	add	r3, r0
 800cd4a:	440b      	add	r3, r1
 800cd4c:	3311      	adds	r3, #17
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d138      	bne.n	800cdc6 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x156>
			{
				if (TRUE == bValidData)
 800cd54:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d12e      	bne.n	800cdba <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x14a>
				{
					for (nRegGrpDataLen = 0u; nRegGrpDataLen < ADBMS6948_REG_GRP_LEN; nRegGrpDataLen++)
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800cd62:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800cd66:	2b05      	cmp	r3, #5
 800cd68:	d82d      	bhi.n	800cdc6 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x156>
					{
						nDevDataIdx = nDevStartIdx + nRegGrpDataLen;
 800cd6a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cd74:	4413      	add	r3, r2
 800cd76:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
						pRxBuff[nGrpIdx][nDevDataIdx] = aRdDataBuff[nGrpIdx][nDevDataIdx];
 800cd7a:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800cd7e:	f8b7 405e 	ldrh.w	r4, [r7, #94]	; 0x5e
 800cd82:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 800cd86:	460b      	mov	r3, r1
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	440b      	add	r3, r1
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4619      	mov	r1, r3
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	1858      	adds	r0, r3, r1
 800cd94:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800cd98:	4613      	mov	r3, r2
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	4413      	add	r3, r2
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800cda4:	4413      	add	r3, r2
 800cda6:	4423      	add	r3, r4
 800cda8:	3b5c      	subs	r3, #92	; 0x5c
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	5443      	strb	r3, [r0, r1]
					for (nRegGrpDataLen = 0u; nRegGrpDataLen < ADBMS6948_REG_GRP_LEN; nRegGrpDataLen++)
 800cdae:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800cdb8:	e7d3      	b.n	800cd62 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0xf2>
					}
				}
				else
				{
					nRet |= E_NOT_OK;
 800cdba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cdbe:	f043 0301 	orr.w	r3, r3, #1
 800cdc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		for (nDevIdx = 0u;
 800cdc6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800cdca:	3301      	adds	r3, #1
 800cdcc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800cdd0:	e788      	b.n	800cce4 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x74>
	for (nGrpIdx = 0u; nGrpIdx < nCmdLstLen; nGrpIdx++) {
 800cdd2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800cddc:	e77a      	b.n	800ccd4 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh+0x64>
				}
			}
		}
	}
	return(nRet);
 800cdde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3774      	adds	r7, #116	; 0x74
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd90      	pop	{r4, r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20000760 	.word	0x20000760

0800cdf0 <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh>:
		uint16_t        nCmd,
		uint8_t         *pRxBuf,
		uint8_t         nDataLenBytes,
		const uint8_t   knChainID
)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	6039      	str	r1, [r7, #0]
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	80fb      	strh	r3, [r7, #6]
 800ce00:	460b      	mov	r3, r1
 800ce02:	717b      	strb	r3, [r7, #5]
 800ce04:	4613      	mov	r3, r2
 800ce06:	713b      	strb	r3, [r7, #4]
	Adbms6948_ReturnType  nRet = E_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
	uint8_t  nDevIdx;
	nDevIdx = 0;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73bb      	strb	r3, [r7, #14]
	boolean  bValidData;

	/* Read all the register groups from ADBMS6948 */
	Adbms6948_Cmd_ExecuteCmdRDAll(pRxBuf, nCmd, nDataLenBytes, FALSE, knChainID);
 800ce10:	797a      	ldrb	r2, [r7, #5]
 800ce12:	88f9      	ldrh	r1, [r7, #6]
 800ce14:	793b      	ldrb	r3, [r7, #4]
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	6838      	ldr	r0, [r7, #0]
 800ce1c:	f000 fc8a 	bl	800d734 <_Z29Adbms6948_Cmd_ExecuteCmdRDAllPhthhh>
	bValidData = Adbms6948_Cmn_ValidatePEC(pRxBuf, nDataLenBytes, nDevIdx, knChainID);
 800ce20:	793b      	ldrb	r3, [r7, #4]
 800ce22:	7bba      	ldrb	r2, [r7, #14]
 800ce24:	7979      	ldrb	r1, [r7, #5]
 800ce26:	6838      	ldr	r0, [r7, #0]
 800ce28:	f7ff fb76 	bl	800c518 <_Z25Adbms6948_Cmn_ValidatePECPhhhh>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	737b      	strb	r3, [r7, #13]
	if (TRUE == bValidData)
 800ce30:	7b7b      	ldrb	r3, [r7, #13]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d102      	bne.n	800ce3c <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh+0x4c>
	{
		nRet = E_OK;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]
 800ce3a:	e001      	b.n	800ce40 <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh+0x50>
	}
	else
	{
		nRet = E_NOT_OK;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	73fb      	strb	r3, [r7, #15]
	}

	return(nRet);
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>:
(
		uint16_t       nCommand,
		boolean       bIncrementCmdCount,
		const uint8_t   knChainID
)
{
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	4603      	mov	r3, r0
 800ce52:	80fb      	strh	r3, [r7, #6]
 800ce54:	460b      	mov	r3, r1
 800ce56:	717b      	strb	r3, [r7, #5]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	713b      	strb	r3, [r7, #4]
	Adbms6948_Cmd_ExecCmd(nCommand, bIncrementCmdCount, knChainID);
 800ce5c:	793a      	ldrb	r2, [r7, #4]
 800ce5e:	7979      	ldrb	r1, [r7, #5]
 800ce60:	88fb      	ldrh	r3, [r7, #6]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 f9ee 	bl	800d244 <_Z21Adbms6948_Cmd_ExecCmdthh>
}
 800ce68:	bf00      	nop
 800ce6a:	3708      	adds	r7, #8
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType>:
/*****************************************************************************/
boolean  Adbms6948_Cmn_IsInvalidSnapSelType
(
		Adbms6948_SnapSelType      eSnapSel
)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	71fb      	strb	r3, [r7, #7]
	boolean  bRet;

	switch(eSnapSel)
 800ce7a:	79fb      	ldrb	r3, [r7, #7]
 800ce7c:	2b03      	cmp	r3, #3
 800ce7e:	d802      	bhi.n	800ce86 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType+0x16>
	{
	case ADBMS6948_SEND_NONE:
	case ADBMS6948_SEND_SNAP:
	case ADBMS6948_SEND_UNSNAP:
	case ADBMS6948_SEND_BOTH:
		bRet = FALSE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	73fb      	strb	r3, [r7, #15]
		break;
 800ce84:	e002      	b.n	800ce8c <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType+0x1c>

	default:
		bRet = TRUE;
 800ce86:	2301      	movs	r3, #1
 800ce88:	73fb      	strb	r3, [r7, #15]
		break;
 800ce8a:	bf00      	nop
	}
	return(bRet);
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3714      	adds	r7, #20
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bc80      	pop	{r7}
 800ce96:	4770      	bx	lr

0800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>:
    @return        E_OK:     Success \n
                   E_NOT_OK:   Failure \n
 */
Adbms6948_ReturnType Adbms6948_Cmn_UpdateChainStatus(Adbms6948_ChainStateType eReqSt,
		const uint8_t            knChainID)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	4603      	mov	r3, r0
 800cea0:	460a      	mov	r2, r1
 800cea2:	71fb      	strb	r3, [r7, #7]
 800cea4:	4613      	mov	r3, r2
 800cea6:	71bb      	strb	r3, [r7, #6]
	Adbms6948_ReturnType nRet = E_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]

	Adbms6948_Cmn_EnterCriticalSection();
 800ceac:	f000 f828 	bl	800cf00 <_Z34Adbms6948_Cmn_EnterCriticalSectionv>
	/* Get the current chain state. */
	if (eReqSt == Adbms6948_aoChainStateInfo[knChainID].eChainState)
 800ceb0:	79ba      	ldrb	r2, [r7, #6]
 800ceb2:	4912      	ldr	r1, [pc, #72]	; (800cefc <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x64>)
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	440b      	add	r3, r1
 800cebe:	3310      	adds	r3, #16
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	79fa      	ldrb	r2, [r7, #7]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	bf0c      	ite	eq
 800ceca:	2301      	moveq	r3, #1
 800cecc:	2300      	movne	r3, #0
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d002      	beq.n	800ceda <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x42>
	{
		/* It is already in requested state */
		nRet = E_NOT_OK;
 800ced4:	2301      	movs	r3, #1
 800ced6:	73fb      	strb	r3, [r7, #15]
 800ced8:	e009      	b.n	800ceee <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x56>
	}
	else
	{
		/* Update the chain state to requested state. */
		Adbms6948_aoChainStateInfo[knChainID].eChainState = eReqSt;
 800ceda:	79ba      	ldrb	r2, [r7, #6]
 800cedc:	4907      	ldr	r1, [pc, #28]	; (800cefc <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh+0x64>)
 800cede:	4613      	mov	r3, r2
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	440b      	add	r3, r1
 800cee8:	3310      	adds	r3, #16
 800ceea:	79fa      	ldrb	r2, [r7, #7]
 800ceec:	701a      	strb	r2, [r3, #0]
	}
	Adbms6948_Cmn_ExitCriticalSection();
 800ceee:	f000 f80d 	bl	800cf0c <_Z33Adbms6948_Cmn_ExitCriticalSectionv>
	return nRet;
 800cef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	20000760 	.word	0x20000760

0800cf00 <_Z34Adbms6948_Cmn_EnterCriticalSectionv>:
    @brief         This function is used to enter a critical section

    @return        None
 */
void Adbms6948_Cmn_EnterCriticalSection(void)
{
 800cf00:	b480      	push	{r7}
 800cf02:	af00      	add	r7, sp, #0
	ADI_PAL_CRITICAL_SECTION_START;
}
 800cf04:	bf00      	nop
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bc80      	pop	{r7}
 800cf0a:	4770      	bx	lr

0800cf0c <_Z33Adbms6948_Cmn_ExitCriticalSectionv>:
    @brief         This function is used to exit a critical section

    @return        None
 */
void Adbms6948_Cmn_ExitCriticalSection(void)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	af00      	add	r7, sp, #0
	ADI_PAL_CRITICAL_SECTION_STOP;
}
 800cf10:	bf00      	nop
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bc80      	pop	{r7}
 800cf16:	4770      	bx	lr

0800cf18 <_Z20Adbms6948_Cmn_MemsetPhhm>:
    @return        None
 */
void Adbms6948_Cmn_Memset(uint8_t   *pAddr,
		uint8_t   nVal,
		uint32_t  nSize)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60f8      	str	r0, [r7, #12]
 800cf20:	460b      	mov	r3, r1
 800cf22:	607a      	str	r2, [r7, #4]
 800cf24:	72fb      	strb	r3, [r7, #11]
	ADI_PAL_MEMSET(pAddr,nVal,nSize);
 800cf26:	7afb      	ldrb	r3, [r7, #11]
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f7ff f941 	bl	800c1b4 <_Z14adi_pal_MemsetPhhm>
}
 800cf32:	bf00      	nop
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <_Z20Adbms6948_Cmn_MemcpyPhS_m>:
    @return        None
 */
void Adbms6948_Cmn_Memcpy(uint8_t   *pDstAddr,
		uint8_t   *pSrcAddr,
		uint32_t  nSize)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	60f8      	str	r0, [r7, #12]
 800cf42:	60b9      	str	r1, [r7, #8]
 800cf44:	607a      	str	r2, [r7, #4]
	ADI_PAL_MEMCPY(pDstAddr,pSrcAddr,nSize);
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	68b9      	ldr	r1, [r7, #8]
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f7ff f943 	bl	800c1d6 <_Z14adi_pal_MemcpyPhS_m>
}
 800cf50:	bf00      	nop
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <_ZL26Adbms6948_lInitMaxCellGrpsh>:
                          operation is to be performed.
              @range: 0 to (ADBMS6948_NO_OF_DAISY_CHAIN-1)
              @resolution: NA
 */
static void Adbms6948_lInitMaxCellGrps(const uint8_t knChainID)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	4603      	mov	r3, r0
 800cf60:	71fb      	strb	r3, [r7, #7]
	uint8_t nRegGrpsToRead, nDevIdx, nMaxCellsPerDev = 0u;
 800cf62:	2300      	movs	r3, #0
 800cf64:	737b      	strb	r3, [r7, #13]

	/* Get the maximum count of cells on a single device */
	for (nDevIdx = 0u; nDevIdx < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices; nDevIdx++)
 800cf66:	2300      	movs	r3, #0
 800cf68:	73bb      	strb	r3, [r7, #14]
 800cf6a:	79fa      	ldrb	r2, [r7, #7]
 800cf6c:	492d      	ldr	r1, [pc, #180]	; (800d024 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xcc>)
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	3305      	adds	r3, #5
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	7bba      	ldrb	r2, [r7, #14]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d22c      	bcs.n	800cfdc <_ZL26Adbms6948_lInitMaxCellGrpsh+0x84>
	{
		if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIdx])
 800cf82:	79fa      	ldrb	r2, [r7, #7]
 800cf84:	7bb9      	ldrb	r1, [r7, #14]
 800cf86:	4827      	ldr	r0, [pc, #156]	; (800d024 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xcc>)
 800cf88:	4613      	mov	r3, r2
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4403      	add	r3, r0
 800cf92:	440b      	add	r3, r1
 800cf94:	3311      	adds	r3, #17
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d11b      	bne.n	800cfd4 <_ZL26Adbms6948_lInitMaxCellGrpsh+0x7c>
		{
			if (nMaxCellsPerDev < Adbms6948_pDaisyChainCfgInput[knChainID].Adbms6948_pNoOfCellsPerDevice[nDevIdx])
 800cf9c:	4b22      	ldr	r3, [pc, #136]	; (800d028 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd0>)
 800cf9e:	6819      	ldr	r1, [r3, #0]
 800cfa0:	79fa      	ldrb	r2, [r7, #7]
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	1a9b      	subs	r3, r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	440b      	add	r3, r1
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	7bbb      	ldrb	r3, [r7, #14]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	7b7a      	ldrb	r2, [r7, #13]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d20c      	bcs.n	800cfd4 <_ZL26Adbms6948_lInitMaxCellGrpsh+0x7c>
			{
				nMaxCellsPerDev =  Adbms6948_pDaisyChainCfgInput[knChainID].Adbms6948_pNoOfCellsPerDevice[nDevIdx];
 800cfba:	4b1b      	ldr	r3, [pc, #108]	; (800d028 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd0>)
 800cfbc:	6819      	ldr	r1, [r3, #0]
 800cfbe:	79fa      	ldrb	r2, [r7, #7]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	1a9b      	subs	r3, r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	440b      	add	r3, r1
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	7bbb      	ldrb	r3, [r7, #14]
 800cfce:	4413      	add	r3, r2
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	737b      	strb	r3, [r7, #13]
	for (nDevIdx = 0u; nDevIdx < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices; nDevIdx++)
 800cfd4:	7bbb      	ldrb	r3, [r7, #14]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	73bb      	strb	r3, [r7, #14]
 800cfda:	e7c6      	b.n	800cf6a <_ZL26Adbms6948_lInitMaxCellGrpsh+0x12>
			}
		}
	}

	nRegGrpsToRead = (uint8_t)(nMaxCellsPerDev/3u);
 800cfdc:	7b7b      	ldrb	r3, [r7, #13]
 800cfde:	4a13      	ldr	r2, [pc, #76]	; (800d02c <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd4>)
 800cfe0:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe4:	085b      	lsrs	r3, r3, #1
 800cfe6:	73fb      	strb	r3, [r7, #15]
	if ((nMaxCellsPerDev % 3u) != 0u)
 800cfe8:	7b7a      	ldrb	r2, [r7, #13]
 800cfea:	4b10      	ldr	r3, [pc, #64]	; (800d02c <_ZL26Adbms6948_lInitMaxCellGrpsh+0xd4>)
 800cfec:	fba3 1302 	umull	r1, r3, r3, r2
 800cff0:	0859      	lsrs	r1, r3, #1
 800cff2:	460b      	mov	r3, r1
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	440b      	add	r3, r1
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xae>
	{
		nRegGrpsToRead++;
 800d000:	7bfb      	ldrb	r3, [r7, #15]
 800d002:	3301      	adds	r3, #1
 800d004:	73fb      	strb	r3, [r7, #15]
	}

	/* Update the Chain State Information */
	Adbms6948_aoChainStateInfo[knChainID].nMaxCellRegGrps = nRegGrpsToRead;
 800d006:	79fa      	ldrb	r2, [r7, #7]
 800d008:	4906      	ldr	r1, [pc, #24]	; (800d024 <_ZL26Adbms6948_lInitMaxCellGrpsh+0xcc>)
 800d00a:	4613      	mov	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	440b      	add	r3, r1
 800d014:	3302      	adds	r3, #2
 800d016:	7bfa      	ldrb	r2, [r7, #15]
 800d018:	701a      	strb	r2, [r3, #0]
}
 800d01a:	bf00      	nop
 800d01c:	3714      	adds	r7, #20
 800d01e:	46bd      	mov	sp, r7
 800d020:	bc80      	pop	{r7}
 800d022:	4770      	bx	lr
 800d024:	20000760 	.word	0x20000760
 800d028:	20000778 	.word	0x20000778
 800d02c:	aaaaaaab 	.word	0xaaaaaaab

0800d030 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h>:
static void  Adbms6948_lPrepConfigBuff(uint16_t nCmd,
		uint8_t  aRdCfgData[][ADBMS6948_MAX_FRAME_SIZE],
		uint8_t  *pCfgData,
		uint8_t  *pCfgDataChain,
		uint8_t  nChainIndex)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	607a      	str	r2, [r7, #4]
 800d03a:	603b      	str	r3, [r7, #0]
 800d03c:	4603      	mov	r3, r0
 800d03e:	81fb      	strh	r3, [r7, #14]
	uint8_t nDeviceIndex,nNoOfDevices;

	(void)Adbms6948_Cmn_Memset(pCfgDataChain,0, (
 800d040:	2206      	movs	r2, #6
 800d042:	2100      	movs	r1, #0
 800d044:	6838      	ldr	r0, [r7, #0]
 800d046:	f7ff ff67 	bl	800cf18 <_Z20Adbms6948_Cmn_MemsetPhhm>
			ADBMS6948_REG_GRP_LEN * ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN));

	/* number of devices in chain */
	nNoOfDevices = Adbms6948_pDaisyChainCfgInput[nChainIndex].Adbms6948_nNoOfDevices;
 800d04a:	4b13      	ldr	r3, [pc, #76]	; (800d098 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h+0x68>)
 800d04c:	6819      	ldr	r1, [r3, #0]
 800d04e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d052:	4613      	mov	r3, r2
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	1a9b      	subs	r3, r3, r2
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	440b      	add	r3, r1
 800d05c:	789b      	ldrb	r3, [r3, #2]
 800d05e:	75bb      	strb	r3, [r7, #22]

	/* For all devices in chain accumulate the configuration data */
	for (nDeviceIndex = 0u; nDeviceIndex < nNoOfDevices ; nDeviceIndex++) {
 800d060:	2300      	movs	r3, #0
 800d062:	75fb      	strb	r3, [r7, #23]
 800d064:	7dfa      	ldrb	r2, [r7, #23]
 800d066:	7dbb      	ldrb	r3, [r7, #22]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d210      	bcs.n	800d08e <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h+0x5e>
		(void)Adbms6948_Cmn_Memcpy(&pCfgDataChain[nDeviceIndex*ADBMS6948_REG_GRP_LEN],
 800d06c:	7dfa      	ldrb	r2, [r7, #23]
 800d06e:	4613      	mov	r3, r2
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	4413      	add	r3, r2
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	461a      	mov	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	4413      	add	r3, r2
 800d07c:	2206      	movs	r2, #6
 800d07e:	6879      	ldr	r1, [r7, #4]
 800d080:	4618      	mov	r0, r3
 800d082:	f7ff ff5a 	bl	800cf3a <_Z20Adbms6948_Cmn_MemcpyPhS_m>
	for (nDeviceIndex = 0u; nDeviceIndex < nNoOfDevices ; nDeviceIndex++) {
 800d086:	7dfb      	ldrb	r3, [r7, #23]
 800d088:	3301      	adds	r3, #1
 800d08a:	75fb      	strb	r3, [r7, #23]
 800d08c:	e7ea      	b.n	800d064 <_ZL25Adbms6948_lPrepConfigBufftPA12_hPhS1_h+0x34>
				pCfgData, ADBMS6948_REG_GRP_LEN);
	}
}
 800d08e:	bf00      	nop
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	20000778 	.word	0x20000778

0800d09c <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType>:
    @return        E_OK: Success  \n
                   E_NOT_OK: Failed \n
 */
/*****************************************************************************/
Adbms6948_ReturnType  Adbms6948_Int_Init(const Adbms6948_CfgType 	*pkConfig)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  Adbms6948_ReturnType  nRet = E_NOT_OK;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	73fb      	strb	r3, [r7, #15]
  uint8_t               nChainIndex;

  if(ADBMS6948_ST_INIT == Adbms6948_eState)
 800d0a8:	4b29      	ldr	r3, [pc, #164]	; (800d150 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb4>)
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d04a      	beq.n	800d146 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
    #if (ADBMS6948_DEVELOPMENT_MODE_EN == TRUE)
    Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID,
    ADBMS6948_INIT_ID, ADBMS6948_E_MODULESTATE);
    #endif
  }
  else if(NULL_PTR == pkConfig)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d047      	beq.n	800d146 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
    #if (ADBMS6948_DEVELOPMENT_MODE_EN == TRUE)
    Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID,
    ADBMS6948_INIT_ID, ADBMS6948_E_PARAM_POINTER);
    #endif
  }
  else if (TRUE == Adbms6948_lIsInvalidConfig(pkConfig))
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f852 	bl	800d160 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	bf0c      	ite	eq
 800d0c2:	2301      	moveq	r3, #1
 800d0c4:	2300      	movne	r3, #0
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d13c      	bne.n	800d146 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
    #endif
  }
  else
  {
		/* No error. Set status to 'E_OK'. */
		nRet = E_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73fb      	strb	r3, [r7, #15]
		/*Store configuration address. */
		Adbms6948_pConfig = pkConfig;
 800d0d0:	4a20      	ldr	r2, [pc, #128]	; (800d154 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb8>)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6013      	str	r3, [r2, #0]
		Adbms6948_pDaisyChainCfgInput=Adbms6948_pConfig->Adbms6948_pDaisyChainCfg;
 800d0d6:	4b1f      	ldr	r3, [pc, #124]	; (800d154 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb8>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a1e      	ldr	r2, [pc, #120]	; (800d158 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xbc>)
 800d0de:	6013      	str	r3, [r2, #0]

		/* Initialize all chain for which initialization is enabled. */
		for (nChainIndex = 0u; nChainIndex < (uint8_t)ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	73bb      	strb	r3, [r7, #14]
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d120      	bne.n	800d12c <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x90>
		{
			/* Clear the state information and initialize the number of devices in the state for the chain */
			(void) Adbms6948_Cmn_Memset((uint8_t*)&Adbms6948_aoChainStateInfo[nChainIndex],
 800d0ea:	7bba      	ldrb	r2, [r7, #14]
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4a19      	ldr	r2, [pc, #100]	; (800d15c <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xc0>)
 800d0f6:	4413      	add	r3, r2
 800d0f8:	2214      	movs	r2, #20
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff ff0b 	bl	800cf18 <_Z20Adbms6948_Cmn_MemsetPhhm>
			                            0, sizeof(Adbms6948_ChainStateInfoType));

			/* Prepare chain of Adbms6948 and non-Adbms6948 devices */
			Adbms6948_lPrepareChain(nChainIndex);
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	4618      	mov	r0, r3
 800d106:	f000 f86f 	bl	800d1e8 <_ZL23Adbms6948_lPrepareChainh>

			/* Initialization is enabled for the chain.*/
			nRet |= Adbms6948_Cmn_InitChain(nChainIndex);
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff fb01 	bl	800c714 <_Z23Adbms6948_Cmn_InitChainh>
 800d112:	4603      	mov	r3, r0
 800d114:	461a      	mov	r2, r3
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	4313      	orrs	r3, r2
 800d11a:	73fb      	strb	r3, [r7, #15]
			if (E_OK != nRet)
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d103      	bne.n	800d12a <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x8e>
		for (nChainIndex = 0u; nChainIndex < (uint8_t)ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	3301      	adds	r3, #1
 800d126:	73bb      	strb	r3, [r7, #14]
 800d128:	e7dc      	b.n	800d0e4 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x48>
			{
				/* Chain initialization is failed for the chain. Stop the service. */
				break;
 800d12a:	bf00      	nop
			}

		}

		if (E_OK == nRet)
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d103      	bne.n	800d13a <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0x9e>
		{
			/* All the chains initialized successfully. Set module state to initialized. */
			Adbms6948_eState = ADBMS6948_ST_INIT;
 800d132:	4b07      	ldr	r3, [pc, #28]	; (800d150 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb4>)
 800d134:	2201      	movs	r2, #1
 800d136:	701a      	strb	r2, [r3, #0]
 800d138:	e005      	b.n	800d146 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xaa>
		}
		else
		{
			/* Initialization service failed. */
			Adbms6948_pConfig = NULL_PTR;
 800d13a:	4b06      	ldr	r3, [pc, #24]	; (800d154 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xb8>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]
			Adbms6948_pDaisyChainCfgInput = NULL_PTR;
 800d140:	4b05      	ldr	r3, [pc, #20]	; (800d158 <_Z18Adbms6948_Int_InitPK17Adbms6948_CfgType+0xbc>)
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
		}
	}
  return (nRet);
 800d146:	7bfb      	ldrb	r3, [r7, #15]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	2000075c 	.word	0x2000075c
 800d154:	20000774 	.word	0x20000774
 800d158:	20000778 	.word	0x20000778
 800d15c:	20000760 	.word	0x20000760

0800d160 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType>:
*/
static boolean  Adbms6948_lIsInvalidConfig
(
    const Adbms6948_CfgType *   pConfig
)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
    boolean  bRet = FALSE;
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]
    uint8_t  nChainIndex,nDeviceIndex,nAdbms6948Devices;

    for (nChainIndex = 0u; nChainIndex < ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d16c:	2300      	movs	r3, #0
 800d16e:	73bb      	strb	r3, [r7, #14]
 800d170:	7bbb      	ldrb	r3, [r7, #14]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d132      	bne.n	800d1dc <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x7c>
    {
    	nAdbms6948Devices = pConfig->Adbms6948_pDaisyChainCfg[nChainIndex].Adbms6948_nNoOfDevices;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6819      	ldr	r1, [r3, #0]
 800d17a:	7bba      	ldrb	r2, [r7, #14]
 800d17c:	4613      	mov	r3, r2
 800d17e:	00db      	lsls	r3, r3, #3
 800d180:	1a9b      	subs	r3, r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	440b      	add	r3, r1
 800d186:	789b      	ldrb	r3, [r3, #2]
 800d188:	733b      	strb	r3, [r7, #12]

        if (nAdbms6948Devices > ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)
 800d18a:	7b3b      	ldrb	r3, [r7, #12]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d902      	bls.n	800d196 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x36>
        {
            bRet = TRUE;
 800d190:	2301      	movs	r3, #1
 800d192:	73fb      	strb	r3, [r7, #15]
 800d194:	e01a      	b.n	800d1cc <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x6c>
        }
        else
        {
            for (nDeviceIndex=0u;nDeviceIndex<nAdbms6948Devices;nDeviceIndex++)
 800d196:	2300      	movs	r3, #0
 800d198:	737b      	strb	r3, [r7, #13]
 800d19a:	7b7a      	ldrb	r2, [r7, #13]
 800d19c:	7b3b      	ldrb	r3, [r7, #12]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d214      	bcs.n	800d1cc <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x6c>
            {
                 if (pConfig->Adbms6948_pDaisyChainCfg[nChainIndex].Adbms6948_pNoOfCellsPerDevice[nDeviceIndex] >
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6819      	ldr	r1, [r3, #0]
 800d1a6:	7bba      	ldrb	r2, [r7, #14]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	1a9b      	subs	r3, r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	440b      	add	r3, r1
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	7b7b      	ldrb	r3, [r7, #13]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b10      	cmp	r3, #16
 800d1bc:	d902      	bls.n	800d1c4 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x64>
                       ADBMS6948_MAX_NO_OF_CELLS_PER_DEVICE)
                 {
                      bRet = TRUE;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	73fb      	strb	r3, [r7, #15]
                      break;
 800d1c2:	e003      	b.n	800d1cc <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x6c>
            for (nDeviceIndex=0u;nDeviceIndex<nAdbms6948Devices;nDeviceIndex++)
 800d1c4:	7b7b      	ldrb	r3, [r7, #13]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	737b      	strb	r3, [r7, #13]
 800d1ca:	e7e6      	b.n	800d19a <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x3a>
                 }
            }
        }

        if (TRUE == bRet)
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d003      	beq.n	800d1da <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x7a>
    for (nChainIndex = 0u; nChainIndex < ADBMS6948_NO_OF_DAISY_CHAIN; nChainIndex++)
 800d1d2:	7bbb      	ldrb	r3, [r7, #14]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	73bb      	strb	r3, [r7, #14]
 800d1d8:	e7ca      	b.n	800d170 <_ZL26Adbms6948_lIsInvalidConfigPK17Adbms6948_CfgType+0x10>
        {
                break;
 800d1da:	bf00      	nop
        }
     }
return bRet;
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bc80      	pop	{r7}
 800d1e6:	4770      	bx	lr

0800d1e8 <_ZL23Adbms6948_lPrepareChainh>:

    @param  [in]   knChainID        Chain Id

    @return    None
*/
static void  Adbms6948_lPrepareChain(const uint8_t knChainID) {
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	71fb      	strb	r3, [r7, #7]
	uint8_t nNoOfDevices,nDeviceIndex;

	/* Identify the total number of devices in chain */
	nNoOfDevices = Adbms6948_pDaisyChainCfgInput[knChainID].Adbms6948_nNoOfDevices;
 800d1f2:	4b12      	ldr	r3, [pc, #72]	; (800d23c <_ZL23Adbms6948_lPrepareChainh+0x54>)
 800d1f4:	6819      	ldr	r1, [r3, #0]
 800d1f6:	79fa      	ldrb	r2, [r7, #7]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	1a9b      	subs	r3, r3, r2
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	440b      	add	r3, r1
 800d202:	789b      	ldrb	r3, [r3, #2]
 800d204:	73bb      	strb	r3, [r7, #14]

	/* Prepare the list of Devices in chain */
	for (nDeviceIndex=0u;nDeviceIndex<nNoOfDevices;nDeviceIndex++) {
 800d206:	2300      	movs	r3, #0
 800d208:	73fb      	strb	r3, [r7, #15]
 800d20a:	7bfa      	ldrb	r2, [r7, #15]
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d20f      	bcs.n	800d232 <_ZL23Adbms6948_lPrepareChainh+0x4a>
		Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDeviceIndex] = ADBMS6948_DEVICE;
 800d212:	79fa      	ldrb	r2, [r7, #7]
 800d214:	7bf9      	ldrb	r1, [r7, #15]
 800d216:	480a      	ldr	r0, [pc, #40]	; (800d240 <_ZL23Adbms6948_lPrepareChainh+0x58>)
 800d218:	4613      	mov	r3, r2
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4403      	add	r3, r0
 800d222:	440b      	add	r3, r1
 800d224:	3311      	adds	r3, #17
 800d226:	2201      	movs	r2, #1
 800d228:	701a      	strb	r2, [r3, #0]
	for (nDeviceIndex=0u;nDeviceIndex<nNoOfDevices;nDeviceIndex++) {
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
 800d22c:	3301      	adds	r3, #1
 800d22e:	73fb      	strb	r3, [r7, #15]
 800d230:	e7eb      	b.n	800d20a <_ZL23Adbms6948_lPrepareChainh+0x22>
	}
}
 800d232:	bf00      	nop
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	bc80      	pop	{r7}
 800d23a:	4770      	bx	lr
 800d23c:	20000778 	.word	0x20000778
 800d240:	20000760 	.word	0x20000760

0800d244 <_Z21Adbms6948_Cmd_ExecCmdthh>:
(
uint16_t       nCommand,
boolean       bIncrementCmdCount,
const uint8_t   knChainID
)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b086      	sub	sp, #24
 800d248:	af00      	add	r7, sp, #0
 800d24a:	4603      	mov	r3, r0
 800d24c:	80fb      	strh	r3, [r7, #6]
 800d24e:	460b      	mov	r3, r1
 800d250:	717b      	strb	r3, [r7, #5]
 800d252:	4613      	mov	r3, r2
 800d254:	713b      	strb	r3, [r7, #4]
    uint16_t   nCmdPec;
    uint8_t   aCmd[ADBMS6948_CMD_DATA_LEN];
    uint8_t   nDevIdx, nNoOfDevInChain;

    aCmd[0] = (uint8_t)((nCommand & 0xFF00u) >> ADBMS6948_SHIFT_BY_8);
 800d256:	88fb      	ldrh	r3, [r7, #6]
 800d258:	0a1b      	lsrs	r3, r3, #8
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	733b      	strb	r3, [r7, #12]
    aCmd[1] = (uint8_t)((nCommand & 0x00FFu));
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	737b      	strb	r3, [r7, #13]
    /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = (uint16_t)Adbms6948_Pec15Calculate(&aCmd[0], 2u);
 800d266:	f107 030c 	add.w	r3, r7, #12
 800d26a:	2102      	movs	r1, #2
 800d26c:	4618      	mov	r0, r3
 800d26e:	f000 ff2d 	bl	800e0cc <_Z24Adbms6948_Pec15CalculatePhh>
 800d272:	4603      	mov	r3, r0
 800d274:	82bb      	strh	r3, [r7, #20]
    /* Append the PEC to the command buffer */
    aCmd[2] = (uint8_t)(nCmdPec >> ADBMS6948_SHIFT_BY_8);
 800d276:	8abb      	ldrh	r3, [r7, #20]
 800d278:	121b      	asrs	r3, r3, #8
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	73bb      	strb	r3, [r7, #14]
    aCmd[3] = (uint8_t)(nCmdPec);
 800d27e:	8abb      	ldrh	r3, [r7, #20]
 800d280:	b2db      	uxtb	r3, r3
 800d282:	73fb      	strb	r3, [r7, #15]

    if(nCommand == ADBMS6948_CMD_STCOMM)
 800d284:	88fb      	ldrh	r3, [r7, #6]
 800d286:	f240 7223 	movw	r2, #1827	; 0x723
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d107      	bne.n	800d29e <_Z21Adbms6948_Cmd_ExecCmdthh+0x5a>
    {
      /* Transmit the command buffer on the SPI bus */
      ADI_PAL_SPIWRITE(&aCmd[0], (uint8_t)(ADBMS6948_CMD_DATA_LEN + ADBMS6948_I2C_STCOMM_BYTES), knChainID);
 800d28e:	793a      	ldrb	r2, [r7, #4]
 800d290:	f107 030c 	add.w	r3, r7, #12
 800d294:	210d      	movs	r1, #13
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe ffac 	bl	800c1f4 <_Z16adi_pal_SpiWritePhth>
 800d29c:	e006      	b.n	800d2ac <_Z21Adbms6948_Cmd_ExecCmdthh+0x68>
    }
    else
    {
      /* Transmit the command buffer on the SPI bus */
      ADI_PAL_SPIWRITE(&aCmd[0], ADBMS6948_CMD_DATA_LEN, knChainID);
 800d29e:	793a      	ldrb	r2, [r7, #4]
 800d2a0:	f107 030c 	add.w	r3, r7, #12
 800d2a4:	2104      	movs	r1, #4
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe ffa4 	bl	800c1f4 <_Z16adi_pal_SpiWritePhth>
    }

    /* Does the command increment the device command count */
    if (bIncrementCmdCount == TRUE)
 800d2ac:	797b      	ldrb	r3, [r7, #5]
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	d103      	bne.n	800d2ba <_Z21Adbms6948_Cmd_ExecCmdthh+0x76>
    {
        /* Increment the command counter maintained by the driver for all the devices on the daisy
         * chain */
        Adbms6948_lIncCmdCntAllDev(knChainID);
 800d2b2:	793b      	ldrb	r3, [r7, #4]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f000 f9df 	bl	800d678 <_ZL26Adbms6948_lIncCmdCntAllDevh>
    }
    /* Is the command to be sent RSTCC */
    if (nCommand == ADBMS6948_CMD_RSTCC)
 800d2ba:	88fb      	ldrh	r3, [r7, #6]
 800d2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d2be:	d138      	bne.n	800d332 <_Z21Adbms6948_Cmd_ExecCmdthh+0xee>
    {
        /* Clear the command counter value maintained by the driver for all the devices on the
         * chain */
        nNoOfDevInChain = Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800d2c0:	793a      	ldrb	r2, [r7, #4]
 800d2c2:	491e      	ldr	r1, [pc, #120]	; (800d33c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	440b      	add	r3, r1
 800d2ce:	3305      	adds	r3, #5
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	74fb      	strb	r3, [r7, #19]
      for (nDevIdx = 0u; nDevIdx < nNoOfDevInChain; nDevIdx++)
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	75fb      	strb	r3, [r7, #23]
 800d2d8:	7dfa      	ldrb	r2, [r7, #23]
 800d2da:	7cfb      	ldrb	r3, [r7, #19]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d228      	bcs.n	800d332 <_Z21Adbms6948_Cmd_ExecCmdthh+0xee>
        {
      if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIdx])
 800d2e0:	793a      	ldrb	r2, [r7, #4]
 800d2e2:	7df9      	ldrb	r1, [r7, #23]
 800d2e4:	4815      	ldr	r0, [pc, #84]	; (800d33c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	4413      	add	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4403      	add	r3, r0
 800d2f0:	440b      	add	r3, r1
 800d2f2:	3311      	adds	r3, #17
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d10b      	bne.n	800d312 <_Z21Adbms6948_Cmd_ExecCmdthh+0xce>
      {
        Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIdx] = 0;
 800d2fa:	793a      	ldrb	r2, [r7, #4]
 800d2fc:	7df9      	ldrb	r1, [r7, #23]
 800d2fe:	480f      	ldr	r0, [pc, #60]	; (800d33c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4403      	add	r3, r0
 800d30a:	440b      	add	r3, r1
 800d30c:	3304      	adds	r3, #4
 800d30e:	2200      	movs	r2, #0
 800d310:	701a      	strb	r2, [r3, #0]
      }
      Adbms6948_aoChainStateInfo[knChainID].aLastReadCCs[nDevIdx] = 0;
 800d312:	793a      	ldrb	r2, [r7, #4]
 800d314:	7df9      	ldrb	r1, [r7, #23]
 800d316:	4809      	ldr	r0, [pc, #36]	; (800d33c <_Z21Adbms6948_Cmd_ExecCmdthh+0xf8>)
 800d318:	4613      	mov	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4403      	add	r3, r0
 800d322:	440b      	add	r3, r1
 800d324:	3303      	adds	r3, #3
 800d326:	2200      	movs	r2, #0
 800d328:	701a      	strb	r2, [r3, #0]
      for (nDevIdx = 0u; nDevIdx < nNoOfDevInChain; nDevIdx++)
 800d32a:	7dfb      	ldrb	r3, [r7, #23]
 800d32c:	3301      	adds	r3, #1
 800d32e:	75fb      	strb	r3, [r7, #23]
 800d330:	e7d2      	b.n	800d2d8 <_Z21Adbms6948_Cmd_ExecCmdthh+0x94>
        }
    }
}
 800d332:	bf00      	nop
 800d334:	3718      	adds	r7, #24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	20000760 	.word	0x20000760

0800d340 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh>:
(
    uint16_t       nCommand,
    uint8_t     *pTxBuf,
    const uint8_t    knChainID
)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08a      	sub	sp, #40	; 0x28
 800d344:	af00      	add	r7, sp, #0
 800d346:	4603      	mov	r3, r0
 800d348:	6039      	str	r1, [r7, #0]
 800d34a:	80fb      	strh	r3, [r7, #6]
 800d34c:	4613      	mov	r3, r2
 800d34e:	717b      	strb	r3, [r7, #5]
    uint8_t  aTxBuf[ADBMS6948_CMD_DATA_LEN +
                             (ADBMS6948_REG_DATA_LEN_WITH_PEC *ADBMS6948_MAX_NO_OF_DEVICES_IN_DAISY_CHAIN)];
    uint8_t  nDevIndex, nByteIndex, nNoOfDevices;
    uint8_t *   pDevCfgArray;
    uint16_t  nCfgPec, nCmdPec;
    uint8_t  nLen = 0u;
 800d350:	2300      	movs	r3, #0
 800d352:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    aTxBuf[nLen++] = (uint8_t)((uint16_t)(nCommand & (uint16_t)0xFF00U) >> 8U);
 800d356:	88fb      	ldrh	r3, [r7, #6]
 800d358:	0a1b      	lsrs	r3, r3, #8
 800d35a:	b29a      	uxth	r2, r3
 800d35c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d360:	1c59      	adds	r1, r3, #1
 800d362:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d366:	b2d2      	uxtb	r2, r2
 800d368:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d36c:	440b      	add	r3, r1
 800d36e:	f803 2c1c 	strb.w	r2, [r3, #-28]
    aTxBuf[nLen++] = (uint8_t)(nCommand & (uint16_t)0x00FFU);
 800d372:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800d37c:	88fa      	ldrh	r2, [r7, #6]
 800d37e:	b2d2      	uxtb	r2, r2
 800d380:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d384:	440b      	add	r3, r1
 800d386:	f803 2c1c 	strb.w	r2, [r3, #-28]
    /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = (uint16_t)Adbms6948_Pec15Calculate(&aTxBuf[0], 2u);
 800d38a:	f107 030c 	add.w	r3, r7, #12
 800d38e:	2102      	movs	r1, #2
 800d390:	4618      	mov	r0, r3
 800d392:	f000 fe9b 	bl	800e0cc <_Z24Adbms6948_Pec15CalculatePhh>
 800d396:	4603      	mov	r3, r0
 800d398:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Append the command PEC to the transmit buffer */
    aTxBuf[nLen++] = (uint8_t)(nCmdPec >> 8U);
 800d39a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d39c:	121a      	asrs	r2, r3, #8
 800d39e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d3a2:	1c59      	adds	r1, r3, #1
 800d3a4:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d3a8:	b2d2      	uxtb	r2, r2
 800d3aa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d3ae:	440b      	add	r3, r1
 800d3b0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    aTxBuf[nLen++] = (uint8_t)(nCmdPec);
 800d3b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800d3be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d3c0:	b2d2      	uxtb	r2, r2
 800d3c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d3c6:	440b      	add	r3, r1
 800d3c8:	f803 2c1c 	strb.w	r2, [r3, #-28]

    nNoOfDevices = Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800d3cc:	797a      	ldrb	r2, [r7, #5]
 800d3ce:	4939      	ldr	r1, [pc, #228]	; (800d4b4 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0x174>)
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	4413      	add	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	440b      	add	r3, r1
 800d3da:	3305      	adds	r3, #5
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    /* Start from last configuration data to first as first data written goes to last device */
    for (nDevIndex = nNoOfDevices; nDevIndex > 0u ; nDevIndex--)
 800d3e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d04e      	beq.n	800d490 <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0x150>
    {
        pDevCfgArray = pTxBuf + ((nDevIndex - 1u) * (ADBMS6948_REG_GRP_LEN));
 800d3f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d3f6:	4613      	mov	r3, r2
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	4413      	add	r3, r2
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	3b06      	subs	r3, #6
 800d400:	683a      	ldr	r2, [r7, #0]
 800d402:	4413      	add	r3, r2
 800d404:	61fb      	str	r3, [r7, #28]
        for (nByteIndex = 0u; nByteIndex < ADBMS6948_REG_GRP_LEN; nByteIndex++)
 800d406:	2300      	movs	r3, #0
 800d408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d40c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d410:	2b05      	cmp	r3, #5
 800d412:	d814      	bhi.n	800d43e <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0xfe>
        {
            aTxBuf[nLen++] = *(pDevCfgArray + nByteIndex);
 800d414:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d418:	69fa      	ldr	r2, [r7, #28]
 800d41a:	441a      	add	r2, r3
 800d41c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d420:	1c59      	adds	r1, r3, #1
 800d422:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d426:	7812      	ldrb	r2, [r2, #0]
 800d428:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d42c:	440b      	add	r3, r1
 800d42e:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (nByteIndex = 0u; nByteIndex < ADBMS6948_REG_GRP_LEN; nByteIndex++)
 800d432:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d436:	3301      	adds	r3, #1
 800d438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d43c:	e7e6      	b.n	800d40c <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0xcc>
        }
        /* Calculate the 10-bit PEC for the transmit data bytes for all the devices on the chain */
        nCfgPec = (uint16_t)Adbms6948_Pec10Calculate(pDevCfgArray, FALSE, ADBMS6948_REG_GRP_LEN);
 800d43e:	2206      	movs	r2, #6
 800d440:	2100      	movs	r1, #0
 800d442:	69f8      	ldr	r0, [r7, #28]
 800d444:	f000 fe76 	bl	800e134 <_Z24Adbms6948_Pec10CalculatePhhh>
 800d448:	4603      	mov	r3, r0
 800d44a:	837b      	strh	r3, [r7, #26]
        /* Append the data PEC to the transmit buffer */
        aTxBuf[nLen++]  = (uint8_t)((nCfgPec & (uint16_t)0x0300u) >> 8u);
 800d44c:	8b7b      	ldrh	r3, [r7, #26]
 800d44e:	121b      	asrs	r3, r3, #8
 800d450:	b2da      	uxtb	r2, r3
 800d452:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d456:	1c59      	adds	r1, r3, #1
 800d458:	f887 1025 	strb.w	r1, [r7, #37]	; 0x25
 800d45c:	f002 0203 	and.w	r2, r2, #3
 800d460:	b2d2      	uxtb	r2, r2
 800d462:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d466:	440b      	add	r3, r1
 800d468:	f803 2c1c 	strb.w	r2, [r3, #-28]
        aTxBuf[nLen++] = (uint8_t)(nCfgPec & (uint16_t)0x00FFu);
 800d46c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800d476:	8b7a      	ldrh	r2, [r7, #26]
 800d478:	b2d2      	uxtb	r2, r2
 800d47a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d47e:	440b      	add	r3, r1
 800d480:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (nDevIndex = nNoOfDevices; nDevIndex > 0u ; nDevIndex--)
 800d484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d488:	3b01      	subs	r3, #1
 800d48a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d48e:	e7ac      	b.n	800d3ea <_Z26Adbms6948_Cmd_ExecuteCmdWRtPhh+0xaa>
    }

    /* Transmit the command + data buffer on the SPI bus */
    ADI_PAL_SPIWRITE(aTxBuf, nLen, knChainID);
 800d490:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d494:	b299      	uxth	r1, r3
 800d496:	797a      	ldrb	r2, [r7, #5]
 800d498:	f107 030c 	add.w	r3, r7, #12
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7fe fea9 	bl	800c1f4 <_Z16adi_pal_SpiWritePhth>

    /* Increment the command counter for all the devices in the daisy chain */
    Adbms6948_lIncCmdCntAllDev(knChainID);
 800d4a2:	797b      	ldrb	r3, [r7, #5]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f000 f8e7 	bl	800d678 <_ZL26Adbms6948_lIncCmdCntAllDevh>

    return;
 800d4aa:	bf00      	nop
}
 800d4ac:	3728      	adds	r7, #40	; 0x28
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	20000760 	.word	0x20000760

0800d4b8 <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh>:
void Adbms6948_Cmd_ExecuteCmdRD(uint16_t      *pnCmdLst,
                                uint8_t       pRxBuf[][ADBMS6948_MAX_FRAME_SIZE],
                                uint32_t      nDataCfg,
                                boolean       bIsPollCmd,
                                const uint8_t knChainID)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b09a      	sub	sp, #104	; 0x68
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
 800d4c4:	70fb      	strb	r3, [r7, #3]
  uint16_t nCmdPec;
  uint16_t nRegGroups, nGroupDataLen;
  uint16_t nGrpIdx, nGrpDataIdx;
  uint16_t nFrameStartIdx;

  nRegGroups = (uint16_t)(nDataCfg >> 16u);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	0c1b      	lsrs	r3, r3, #16
 800d4ca:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  nGroupDataLen = (uint16_t)(((uint16_t)nDataCfg) - ADBMS6948_CMD_DATA_LEN);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	3b04      	subs	r3, #4
 800d4d4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

  for (nGrpIdx = 0u; nGrpIdx < nRegGroups; nGrpIdx++) {
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d4de:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d4e2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	f080 809e 	bcs.w	800d628 <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x170>
    nFrameStartIdx = 0u;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    /* Populate the command code */
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)((uint16_t)(pnCmdLst[nGrpIdx] & (uint16_t)0xFF00U) >> 8U);
 800d4f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	0a1b      	lsrs	r3, r3, #8
 800d500:	b299      	uxth	r1, r3
 800d502:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d506:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d50a:	1c58      	adds	r0, r3, #1
 800d50c:	f8a7 0062 	strh.w	r0, [r7, #98]	; 0x62
 800d510:	4618      	mov	r0, r3
 800d512:	b2c9      	uxtb	r1, r1
 800d514:	4613      	mov	r3, r2
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	4413      	add	r3, r2
 800d51a:	009b      	lsls	r3, r3, #2
 800d51c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d520:	4413      	add	r3, r2
 800d522:	4403      	add	r3, r0
 800d524:	3b54      	subs	r3, #84	; 0x54
 800d526:	460a      	mov	r2, r1
 800d528:	701a      	strb	r2, [r3, #0]
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)(pnCmdLst[nGrpIdx] & (uint16_t)0x00FFU);
 800d52a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	4413      	add	r3, r2
 800d534:	8819      	ldrh	r1, [r3, #0]
 800d536:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d53a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d53e:	1c58      	adds	r0, r3, #1
 800d540:	f8a7 0062 	strh.w	r0, [r7, #98]	; 0x62
 800d544:	4618      	mov	r0, r3
 800d546:	b2c9      	uxtb	r1, r1
 800d548:	4613      	mov	r3, r2
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d554:	4413      	add	r3, r2
 800d556:	4403      	add	r3, r0
 800d558:	3b54      	subs	r3, #84	; 0x54
 800d55a:	460a      	mov	r2, r1
 800d55c:	701a      	strb	r2, [r3, #0]

      /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = Adbms6948_Pec15Calculate((uint8_t*)&aTxBuf[nGrpIdx][0u], 2u);
 800d55e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d562:	f107 0114 	add.w	r1, r7, #20
 800d566:	4613      	mov	r3, r2
 800d568:	005b      	lsls	r3, r3, #1
 800d56a:	4413      	add	r3, r2
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	440b      	add	r3, r1
 800d570:	2102      	movs	r1, #2
 800d572:	4618      	mov	r0, r3
 800d574:	f000 fdaa 	bl	800e0cc <_Z24Adbms6948_Pec15CalculatePhh>
 800d578:	4603      	mov	r3, r0
 800d57a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    /* Append the PEC to the command buffer */
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)(nCmdPec >> 8U);
 800d57e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800d582:	1219      	asrs	r1, r3, #8
 800d584:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d588:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d58c:	1c58      	adds	r0, r3, #1
 800d58e:	f8a7 0062 	strh.w	r0, [r7, #98]	; 0x62
 800d592:	4618      	mov	r0, r3
 800d594:	b2c9      	uxtb	r1, r1
 800d596:	4613      	mov	r3, r2
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	4413      	add	r3, r2
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d5a2:	4413      	add	r3, r2
 800d5a4:	4403      	add	r3, r0
 800d5a6:	3b54      	subs	r3, #84	; 0x54
 800d5a8:	460a      	mov	r2, r1
 800d5aa:	701a      	strb	r2, [r3, #0]
    aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)(nCmdPec);
 800d5ac:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d5b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d5b4:	1c59      	adds	r1, r3, #1
 800d5b6:	f8a7 1062 	strh.w	r1, [r7, #98]	; 0x62
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800d5c0:	b2d9      	uxtb	r1, r3
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	005b      	lsls	r3, r3, #1
 800d5c6:	4413      	add	r3, r2
 800d5c8:	009b      	lsls	r3, r3, #2
 800d5ca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d5ce:	4413      	add	r3, r2
 800d5d0:	4403      	add	r3, r0
 800d5d2:	3b54      	subs	r3, #84	; 0x54
 800d5d4:	460a      	mov	r2, r1
 800d5d6:	701a      	strb	r2, [r3, #0]

    for (nGrpDataIdx = 0u; nGrpDataIdx < nGroupDataLen; nGrpDataIdx++) {
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d5de:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800d5e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d218      	bcs.n	800d61c <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x164>
      aTxBuf[nGrpIdx][nFrameStartIdx++] = (uint8_t)0xFFu;
 800d5ea:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800d5ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d5f2:	1c59      	adds	r1, r3, #1
 800d5f4:	f8a7 1062 	strh.w	r1, [r7, #98]	; 0x62
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	005b      	lsls	r3, r3, #1
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800d606:	4413      	add	r3, r2
 800d608:	440b      	add	r3, r1
 800d60a:	3b54      	subs	r3, #84	; 0x54
 800d60c:	22ff      	movs	r2, #255	; 0xff
 800d60e:	701a      	strb	r2, [r3, #0]
    for (nGrpDataIdx = 0u; nGrpDataIdx < nGroupDataLen; nGrpDataIdx++) {
 800d610:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d614:	3301      	adds	r3, #1
 800d616:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d61a:	e7e0      	b.n	800d5de <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x126>
  for (nGrpIdx = 0u; nGrpIdx < nRegGroups; nGrpIdx++) {
 800d61c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800d620:	3301      	adds	r3, #1
 800d622:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800d626:	e75a      	b.n	800d4de <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x26>
    }
  }

  /* Transmit the command buffer on the SPI bus */
  ADI_PAL_SPIWRITEREADS(aTxBuf, pRxBuf, nDataCfg, knChainID);
 800d628:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d62c:	f107 0014 	add.w	r0, r7, #20
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	68b9      	ldr	r1, [r7, #8]
 800d634:	f7fe fe1e 	bl	800c274 <_Z21adi_pal_SpiWriteReadsPA12_hS0_mh>

  /* Does the command increment the device command count */
  if (bIsPollCmd == TRUE) {
 800d638:	78fb      	ldrb	r3, [r7, #3]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d105      	bne.n	800d64a <_Z26Adbms6948_Cmd_ExecuteCmdRDPtPA12_hmhh+0x192>
    /* Increment the command counter maintained by the driver for all the devices in the daisy chain */
    Adbms6948_lIncCmdCntAllDev(knChainID);
 800d63e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800d642:	4618      	mov	r0, r3
 800d644:	f000 f818 	bl	800d678 <_ZL26Adbms6948_lIncCmdCntAllDevh>
  }
  return;
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
}
 800d64c:	3768      	adds	r7, #104	; 0x68
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <_Z28Adbms6948_Cmd_SendDummyBytesPhhh>:
    @param  [in]  knChainID  The daisy chain ID to perform the operation.

    @return  None.
*/
void Adbms6948_Cmd_SendDummyBytes(uint8_t *pBuff, uint8_t nLen, const uint8_t knChainID)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
 800d658:	6078      	str	r0, [r7, #4]
 800d65a:	460b      	mov	r3, r1
 800d65c:	70fb      	strb	r3, [r7, #3]
 800d65e:	4613      	mov	r3, r2
 800d660:	70bb      	strb	r3, [r7, #2]
  ADI_PAL_SPIWRITE(pBuff, nLen, knChainID);
 800d662:	78fb      	ldrb	r3, [r7, #3]
 800d664:	b29b      	uxth	r3, r3
 800d666:	78ba      	ldrb	r2, [r7, #2]
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7fe fdc2 	bl	800c1f4 <_Z16adi_pal_SpiWritePhth>
}
 800d670:	bf00      	nop
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <_ZL26Adbms6948_lIncCmdCntAllDevh>:

    @param [in]  knChainID  The Id of the daisy chain on which the operation is done.

*/
static void  Adbms6948_lIncCmdCntAllDev(const uint8_t knChainID)
{
 800d678:	b490      	push	{r4, r7}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4603      	mov	r3, r0
 800d680:	71fb      	strb	r3, [r7, #7]
  uint8_t   nDevIndex;
  /* Loop for all the devices */
  for (nDevIndex = 0u;
 800d682:	2300      	movs	r3, #0
 800d684:	73fb      	strb	r3, [r7, #15]
       nDevIndex < Adbms6948_aoChainStateInfo[knChainID].nCurrNoOfDevices;
 800d686:	79fa      	ldrb	r2, [r7, #7]
 800d688:	4929      	ldr	r1, [pc, #164]	; (800d730 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d68a:	4613      	mov	r3, r2
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	009b      	lsls	r3, r3, #2
 800d692:	440b      	add	r3, r1
 800d694:	3305      	adds	r3, #5
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	7bfa      	ldrb	r2, [r7, #15]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d242      	bcs.n	800d724 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xac>
       nDevIndex++)
  {
    if (ADBMS6948_DEVICE == Adbms6948_aoChainStateInfo[knChainID].Adbms6948_eDevChain[nDevIndex])
 800d69e:	79fa      	ldrb	r2, [r7, #7]
 800d6a0:	7bf9      	ldrb	r1, [r7, #15]
 800d6a2:	4823      	ldr	r0, [pc, #140]	; (800d730 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4403      	add	r3, r0
 800d6ae:	440b      	add	r3, r1
 800d6b0:	3311      	adds	r3, #17
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d131      	bne.n	800d71c <_ZL26Adbms6948_lIncCmdCntAllDevh+0xa4>
    {
      /* Increment the command counter */
      Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] =
                (Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] + 1u);
 800d6b8:	79fa      	ldrb	r2, [r7, #7]
 800d6ba:	7bf9      	ldrb	r1, [r7, #15]
 800d6bc:	481c      	ldr	r0, [pc, #112]	; (800d730 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6be:	4613      	mov	r3, r2
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4403      	add	r3, r0
 800d6c8:	440b      	add	r3, r1
 800d6ca:	3304      	adds	r3, #4
 800d6cc:	781b      	ldrb	r3, [r3, #0]
      Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] =
 800d6ce:	79fa      	ldrb	r2, [r7, #7]
 800d6d0:	7bf9      	ldrb	r1, [r7, #15]
                (Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] + 1u);
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	b2dc      	uxtb	r4, r3
      Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] =
 800d6d6:	4816      	ldr	r0, [pc, #88]	; (800d730 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6d8:	4613      	mov	r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	4413      	add	r3, r2
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4403      	add	r3, r0
 800d6e2:	440b      	add	r3, r1
 800d6e4:	3304      	adds	r3, #4
 800d6e6:	4622      	mov	r2, r4
 800d6e8:	701a      	strb	r2, [r3, #0]
      if (Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] >
 800d6ea:	79fa      	ldrb	r2, [r7, #7]
 800d6ec:	7bf9      	ldrb	r1, [r7, #15]
 800d6ee:	4810      	ldr	r0, [pc, #64]	; (800d730 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	4413      	add	r3, r2
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4403      	add	r3, r0
 800d6fa:	440b      	add	r3, r1
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b3f      	cmp	r3, #63	; 0x3f
 800d702:	d90b      	bls.n	800d71c <_ZL26Adbms6948_lIncCmdCntAllDevh+0xa4>
                ADBMS6948_MAX_COMMAND_COUNT_VAL)
      {
        Adbms6948_aoChainStateInfo[knChainID].nCmdCnt[nDevIndex] = 0x1u;
 800d704:	79fa      	ldrb	r2, [r7, #7]
 800d706:	7bf9      	ldrb	r1, [r7, #15]
 800d708:	4809      	ldr	r0, [pc, #36]	; (800d730 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xb8>)
 800d70a:	4613      	mov	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	4403      	add	r3, r0
 800d714:	440b      	add	r3, r1
 800d716:	3304      	adds	r3, #4
 800d718:	2201      	movs	r2, #1
 800d71a:	701a      	strb	r2, [r3, #0]
  for (nDevIndex = 0u;
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	3301      	adds	r3, #1
 800d720:	73fb      	strb	r3, [r7, #15]
 800d722:	e7b0      	b.n	800d686 <_ZL26Adbms6948_lIncCmdCntAllDevh+0xe>
      }
    }
  }
}
 800d724:	bf00      	nop
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bc90      	pop	{r4, r7}
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	20000760 	.word	0x20000760

0800d734 <_Z29Adbms6948_Cmd_ExecuteCmdRDAllPhthhh>:
    uint16_t            nCmd,
    uint8_t             nRegGrps,
    boolean             bIsPollCmd,
    const uint8_t       knChainID
)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	4608      	mov	r0, r1
 800d73e:	4611      	mov	r1, r2
 800d740:	461a      	mov	r2, r3
 800d742:	4603      	mov	r3, r0
 800d744:	807b      	strh	r3, [r7, #2]
 800d746:	460b      	mov	r3, r1
 800d748:	707b      	strb	r3, [r7, #1]
 800d74a:	4613      	mov	r3, r2
 800d74c:	703b      	strb	r3, [r7, #0]
    uint8_t aTxBuf[ADBMS6948_CMD_DATA_LEN];
  uint16_t  nCmdPec;
    uint16_t  nFrameStartIdx;

    nFrameStartIdx = 0u;
 800d74e:	2300      	movs	r3, #0
 800d750:	81fb      	strh	r3, [r7, #14]

    /* Populate the command code */
    aTxBuf[nFrameStartIdx++] = (uint8_t)((uint16_t)(nCmd & (uint16_t)0xFF00U) >> 8U);
 800d752:	887b      	ldrh	r3, [r7, #2]
 800d754:	0a1b      	lsrs	r3, r3, #8
 800d756:	b29a      	uxth	r2, r3
 800d758:	89fb      	ldrh	r3, [r7, #14]
 800d75a:	1c59      	adds	r1, r3, #1
 800d75c:	81f9      	strh	r1, [r7, #14]
 800d75e:	b2d2      	uxtb	r2, r2
 800d760:	f107 0110 	add.w	r1, r7, #16
 800d764:	440b      	add	r3, r1
 800d766:	f803 2c08 	strb.w	r2, [r3, #-8]
    aTxBuf[nFrameStartIdx++] = (uint8_t)(nCmd & (uint16_t)0x00FFU);
 800d76a:	89fb      	ldrh	r3, [r7, #14]
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	81fa      	strh	r2, [r7, #14]
 800d770:	887a      	ldrh	r2, [r7, #2]
 800d772:	b2d2      	uxtb	r2, r2
 800d774:	f107 0110 	add.w	r1, r7, #16
 800d778:	440b      	add	r3, r1
 800d77a:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Calculate the 15-bit PEC for the command bytes */
    nCmdPec = Adbms6948_Pec15Calculate((uint8_t*)&aTxBuf[0u], 2u);
 800d77e:	f107 0308 	add.w	r3, r7, #8
 800d782:	2102      	movs	r1, #2
 800d784:	4618      	mov	r0, r3
 800d786:	f000 fca1 	bl	800e0cc <_Z24Adbms6948_Pec15CalculatePhh>
 800d78a:	4603      	mov	r3, r0
 800d78c:	81bb      	strh	r3, [r7, #12]

    /* Append the PEC to the command buffer */
    aTxBuf[nFrameStartIdx++] = (uint8_t)(nCmdPec >> 8U);
 800d78e:	89bb      	ldrh	r3, [r7, #12]
 800d790:	121a      	asrs	r2, r3, #8
 800d792:	89fb      	ldrh	r3, [r7, #14]
 800d794:	1c59      	adds	r1, r3, #1
 800d796:	81f9      	strh	r1, [r7, #14]
 800d798:	b2d2      	uxtb	r2, r2
 800d79a:	f107 0110 	add.w	r1, r7, #16
 800d79e:	440b      	add	r3, r1
 800d7a0:	f803 2c08 	strb.w	r2, [r3, #-8]
    aTxBuf[nFrameStartIdx++] = (uint8_t)(nCmdPec);
 800d7a4:	89fb      	ldrh	r3, [r7, #14]
 800d7a6:	1c5a      	adds	r2, r3, #1
 800d7a8:	81fa      	strh	r2, [r7, #14]
 800d7aa:	89ba      	ldrh	r2, [r7, #12]
 800d7ac:	b2d2      	uxtb	r2, r2
 800d7ae:	f107 0110 	add.w	r1, r7, #16
 800d7b2:	440b      	add	r3, r1
 800d7b4:	f803 2c08 	strb.w	r2, [r3, #-8]

    /* Transmit the command buffer on the SPI bus */
    ADI_PAL_SPIWRITEREADALL(aTxBuf, pRxBuf, nRegGrps, knChainID);
 800d7b8:	787a      	ldrb	r2, [r7, #1]
 800d7ba:	7e3b      	ldrb	r3, [r7, #24]
 800d7bc:	f107 0008 	add.w	r0, r7, #8
 800d7c0:	6879      	ldr	r1, [r7, #4]
 800d7c2:	f7fe fdf3 	bl	800c3ac <_Z23adi_pal_SpiWriteReadAllPhS_mh>

    /* Does the command increment the device command count */
    if (bIsPollCmd == TRUE)
 800d7c6:	783b      	ldrb	r3, [r7, #0]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d104      	bne.n	800d7d6 <_Z29Adbms6948_Cmd_ExecuteCmdRDAllPhthhh+0xa2>
    {
        /* Increment the command counter maintained by the driver for all the devices in the daisy chain */
        Adbms6948_lIncCmdCntAllDev(knChainID);
 800d7cc:	7e3b      	ldrb	r3, [r7, #24]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff ff52 	bl	800d678 <_ZL26Adbms6948_lIncCmdCntAllDevh>
    }
return;
 800d7d4:	bf00      	nop
 800d7d6:	bf00      	nop
}
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
	...

0800d7e0 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh>:
Adbms6948_ReturnType  Adbms6948_Int_TrigCADC
(
    Adbms6948_TrigCADCInputs 	*poTrigCADCIp,
	const uint8_t  				 knChainID
)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	73fb      	strb	r3, [r7, #15]
	uint16_t  nCmdCode;

	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800d7f0:	4b3c      	ldr	r3, [pc, #240]	; (800d8e4 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0x104>)
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d06f      	beq.n	800d8d8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGCADC_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == poTrigCADCIp)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d06c      	beq.n	800d8d8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGCADC_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID)
 800d7fe:	78fb      	ldrb	r3, [r7, #3]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d169      	bne.n	800d8d8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGCADC_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800d804:	78fb      	ldrb	r3, [r7, #3]
 800d806:	4619      	mov	r1, r3
 800d808:	2001      	movs	r0, #1
 800d80a:	f7ff fb45 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b01      	cmp	r3, #1
 800d812:	bf0c      	ite	eq
 800d814:	2301      	moveq	r3, #1
 800d816:	2300      	movne	r3, #0
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d15c      	bne.n	800d8d8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xf8>
		#endif
	}
	else
	{
		/* Prepare the ADCV command based on the user inputs */
		nCmdCode = ADBMS6948_CMD_ADCV;
 800d81e:	f44f 7318 	mov.w	r3, #608	; 0x260
 800d822:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | (uint16_t)poTrigCADCIp->Adbms6948_eOWSel);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	791b      	ldrb	r3, [r3, #4]
 800d828:	b29a      	uxth	r2, r3
 800d82a:	89bb      	ldrh	r3, [r7, #12]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bRstIIRFltr << ADBMS6948_ADCV_POS_RSTF));
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	78db      	ldrb	r3, [r3, #3]
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	b21a      	sxth	r2, r3
 800d838:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	b21b      	sxth	r3, r3
 800d840:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bEnSSDP << ADBMS6948_ADCV_POS_SSDP));
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	789b      	ldrb	r3, [r3, #2]
 800d846:	011b      	lsls	r3, r3, #4
 800d848:	b21a      	sxth	r2, r3
 800d84a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d84e:	4313      	orrs	r3, r2
 800d850:	b21b      	sxth	r3, r3
 800d852:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bContMode << ADBMS6948_ADCV_POS_CONT));
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	01db      	lsls	r3, r3, #7
 800d85a:	b21a      	sxth	r2, r3
 800d85c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d860:	4313      	orrs	r3, r2
 800d862:	b21b      	sxth	r3, r3
 800d864:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigCADCIp->Adbms6948_bEnRedun << ADBMS6948_ADCV_POS_RD));
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	785b      	ldrb	r3, [r3, #1]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	b21a      	sxth	r2, r3
 800d86e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d872:	4313      	orrs	r3, r2
 800d874:	b21b      	sxth	r3, r3
 800d876:	81bb      	strh	r3, [r7, #12]

		/* Send the ADCV command */
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800d878:	78fa      	ldrb	r2, [r7, #3]
 800d87a:	89bb      	ldrh	r3, [r7, #12]
 800d87c:	2101      	movs	r1, #1
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff fae3 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
		nRet = Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800d884:	78fb      	ldrb	r3, [r7, #3]
 800d886:	4619      	mov	r1, r3
 800d888:	2001      	movs	r0, #1
 800d88a:	f7fe ff25 	bl	800c6d8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800d892:	7bfb      	ldrb	r3, [r7, #15]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d115      	bne.n	800d8c4 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xe4>
		{
            /* Perform platform error check. */
            if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800d898:	78fb      	ldrb	r3, [r7, #3]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fe fe2c 	bl	800c4f8 <_Z21Adbms6948_Cmn_IsErrorh>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	bf0c      	ite	eq
 800d8a6:	2301      	moveq	r3, #1
 800d8a8:	2300      	movne	r3, #0
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d009      	beq.n	800d8c4 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0xe4>
            {
                /* Platform error. */
                nRet = E_NOT_OK;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	73fb      	strb	r3, [r7, #15]
                Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800d8b4:	4b0c      	ldr	r3, [pc, #48]	; (800d8e8 <_Z22Adbms6948_Int_TrigCADCP24Adbms6948_TrigCADCInputsh+0x108>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	895b      	ldrh	r3, [r3, #10]
 800d8bc:	2101      	movs	r1, #1
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fe fe08 	bl	800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
            }
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	2000      	movs	r0, #0
 800d8ca:	f7ff fae5 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	73fb      	strb	r3, [r7, #15]
	}
return(nRet);
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	2000075c 	.word	0x2000075c
 800d8e8:	20000774 	.word	0x20000774

0800d8ec <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh>:
Adbms6948_ReturnType  Adbms6948_Int_TrigI1ADC
(
    Adbms6948_TrigI1ADCInputs 	*poTrigI1ADCIp,
	const uint8_t  				 knChainID
)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	70fb      	strb	r3, [r7, #3]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	73fb      	strb	r3, [r7, #15]
	uint16_t  nCmdCode;

	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800d8fc:	4b33      	ldr	r3, [pc, #204]	; (800d9cc <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xe0>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d05d      	beq.n	800d9c0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGI1ADC_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == poTrigI1ADCIp)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d05a      	beq.n	800d9c0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGI1ADC_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID)
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d157      	bne.n	800d9c0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_TRIGI1ADC_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	4619      	mov	r1, r3
 800d914:	2001      	movs	r0, #1
 800d916:	f7ff fabf 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	bf0c      	ite	eq
 800d920:	2301      	moveq	r3, #1
 800d922:	2300      	movne	r3, #0
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b00      	cmp	r3, #0
 800d928:	d14a      	bne.n	800d9c0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xd4>
		#endif
	}
	else
	{
		/* Prepare the ADI1 command based on the user inputs */
		nCmdCode = ADBMS6948_CMD_ADI1;
 800d92a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d92e:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigI1ADCIp->Adbms6948_eOWSel << ADBMS6948_ADI1_POS_OW));
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	789b      	ldrb	r3, [r3, #2]
 800d934:	b29a      	uxth	r2, r3
 800d936:	89bb      	ldrh	r3, [r7, #12]
 800d938:	4313      	orrs	r3, r2
 800d93a:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigI1ADCIp->Adbms6948_bContMode << ADBMS6948_ADI1_POS_CONT));
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	01db      	lsls	r3, r3, #7
 800d942:	b21a      	sxth	r2, r3
 800d944:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d948:	4313      	orrs	r3, r2
 800d94a:	b21b      	sxth	r3, r3
 800d94c:	81bb      	strh	r3, [r7, #12]
		nCmdCode =  (uint16_t)( nCmdCode | ((uint16_t)poTrigI1ADCIp->Adbms6948_bEnRedun << ADBMS6948_ADI1_POS_RD));
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	785b      	ldrb	r3, [r3, #1]
 800d952:	021b      	lsls	r3, r3, #8
 800d954:	b21a      	sxth	r2, r3
 800d956:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	81bb      	strh	r3, [r7, #12]

		/* Send the ADI1 command */
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800d960:	78fa      	ldrb	r2, [r7, #3]
 800d962:	89bb      	ldrh	r3, [r7, #12]
 800d964:	2101      	movs	r1, #1
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff fa6f 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
		nRet = Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800d96c:	78fb      	ldrb	r3, [r7, #3]
 800d96e:	4619      	mov	r1, r3
 800d970:	2001      	movs	r0, #1
 800d972:	f7fe feb1 	bl	800c6d8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800d976:	4603      	mov	r3, r0
 800d978:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d115      	bne.n	800d9ac <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xc0>
		{
            /* Perform platform error check. */
            if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	4618      	mov	r0, r3
 800d984:	f7fe fdb8 	bl	800c4f8 <_Z21Adbms6948_Cmn_IsErrorh>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	bf0c      	ite	eq
 800d98e:	2301      	moveq	r3, #1
 800d990:	2300      	movne	r3, #0
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d009      	beq.n	800d9ac <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xc0>
            {
                /* Platform error. */
                nRet = E_NOT_OK;
 800d998:	2301      	movs	r3, #1
 800d99a:	73fb      	strb	r3, [r7, #15]
                Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800d99c:	4b0c      	ldr	r3, [pc, #48]	; (800d9d0 <_Z23Adbms6948_Int_TrigI1ADCP25Adbms6948_TrigI1ADCInputsh+0xe4>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	895b      	ldrh	r3, [r3, #10]
 800d9a4:	2101      	movs	r1, #1
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fd94 	bl	800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
            }
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800d9ac:	78fb      	ldrb	r3, [r7, #3]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	f7ff fa71 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	7bfb      	ldrb	r3, [r7, #15]
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	73fb      	strb	r3, [r7, #15]
	}
return(nRet);
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	2000075c 	.word	0x2000075c
 800d9d0:	20000774 	.word	0x20000774

0800d9d4 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>:
/*****************************************************************************/
Adbms6948_ReturnType Adbms6948_Int_ReadAllCellVolt(Adbms6948_CellMeasDataType eCellMeasData,
                                                   int16_t 					          *pnCellData,
                                                   Adbms6948_SnapSelType 			eSnapSel,
                                                   const uint8_t              knChainID)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6039      	str	r1, [r7, #0]
 800d9dc:	4611      	mov	r1, r2
 800d9de:	461a      	mov	r2, r3
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	71fb      	strb	r3, [r7, #7]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	71bb      	strb	r3, [r7, #6]
 800d9e8:	4613      	mov	r3, r2
 800d9ea:	717b      	strb	r3, [r7, #5]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	73fb      	strb	r3, [r7, #15]

	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800d9f0:	4b2c      	ldr	r3, [pc, #176]	; (800daa4 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xd0>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d050      	beq.n	800da9a <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCELLVOLT_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == pnCellData)
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d04d      	beq.n	800da9a <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCELLVOLT_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if ((TRUE == Adbms6948_Cmn_IsInvalidSnapSelType(eSnapSel)) || (TRUE == Adbms6948_lIsInvalidCellMeasDataType(eCellMeasData)) || (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID))
 800d9fe:	79bb      	ldrb	r3, [r7, #6]
 800da00:	4618      	mov	r0, r3
 800da02:	f7ff fa35 	bl	800ce70 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType>
 800da06:	4603      	mov	r3, r0
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d009      	beq.n	800da20 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x4c>
 800da0c:	79fb      	ldrb	r3, [r7, #7]
 800da0e:	4618      	mov	r0, r3
 800da10:	f000 fb20 	bl	800e054 <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType>
 800da14:	4603      	mov	r3, r0
 800da16:	2b01      	cmp	r3, #1
 800da18:	d002      	beq.n	800da20 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x4c>
 800da1a:	797b      	ldrb	r3, [r7, #5]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d001      	beq.n	800da24 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x50>
 800da20:	2301      	movs	r3, #1
 800da22:	e000      	b.n	800da26 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x52>
 800da24:	2300      	movs	r3, #0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d137      	bne.n	800da9a <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCELLVOLT_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800da2a:	797b      	ldrb	r3, [r7, #5]
 800da2c:	4619      	mov	r1, r3
 800da2e:	2001      	movs	r0, #1
 800da30:	f7ff fa32 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800da34:	4603      	mov	r3, r0
 800da36:	2b01      	cmp	r3, #1
 800da38:	bf0c      	ite	eq
 800da3a:	2301      	moveq	r3, #1
 800da3c:	2300      	movne	r3, #0
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	2b00      	cmp	r3, #0
 800da42:	d12a      	bne.n	800da9a <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xc6>
		#endif
	}
	else
	{
		/* Read cell voltages */
		nRet = Adbms6948_lReadAllCellVolt(eCellMeasData, pnCellData, eSnapSel, knChainID);
 800da44:	797b      	ldrb	r3, [r7, #5]
 800da46:	79ba      	ldrb	r2, [r7, #6]
 800da48:	79f8      	ldrb	r0, [r7, #7]
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	f000 f8d0 	bl	800dbf0 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d115      	bne.n	800da86 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xb2>
		{
			/* Perform platform error check. */
			if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800da5a:	797b      	ldrb	r3, [r7, #5]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fe fd4b 	bl	800c4f8 <_Z21Adbms6948_Cmn_IsErrorh>
 800da62:	4603      	mov	r3, r0
 800da64:	2b01      	cmp	r3, #1
 800da66:	bf0c      	ite	eq
 800da68:	2301      	moveq	r3, #1
 800da6a:	2300      	movne	r3, #0
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d009      	beq.n	800da86 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xb2>
			{
				/* Platform error. */
				nRet = E_NOT_OK;
 800da72:	2301      	movs	r3, #1
 800da74:	73fb      	strb	r3, [r7, #15]
				Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800da76:	4b0c      	ldr	r3, [pc, #48]	; (800daa8 <_Z29Adbms6948_Int_ReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xd4>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	895b      	ldrh	r3, [r3, #10]
 800da7e:	2101      	movs	r1, #1
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe fd27 	bl	800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
			}
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800da86:	797b      	ldrb	r3, [r7, #5]
 800da88:	4619      	mov	r1, r3
 800da8a:	2000      	movs	r0, #0
 800da8c:	f7ff fa04 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800da90:	4603      	mov	r3, r0
 800da92:	461a      	mov	r2, r3
 800da94:	7bfb      	ldrb	r3, [r7, #15]
 800da96:	4313      	orrs	r3, r2
 800da98:	73fb      	strb	r3, [r7, #15]
	}

	return(nRet);
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	2000075c 	.word	0x2000075c
 800daa8:	20000774 	.word	0x20000774

0800daac <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>:
Adbms6948_ReturnType Adbms6948_Int_ReadCurrent(Adbms6948_CurrentMeasDataType  eCurrentMeasData,
                                                Adbms6948_CurrentSelType      eCurrentSel,
                                                int32_t                       *pnCurrentData,
                                                Adbms6948_SnapSelType 			  eSnapSel,
                                                const uint8_t  					      knChainID)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af02      	add	r7, sp, #8
 800dab2:	603a      	str	r2, [r7, #0]
 800dab4:	461a      	mov	r2, r3
 800dab6:	4603      	mov	r3, r0
 800dab8:	71fb      	strb	r3, [r7, #7]
 800daba:	460b      	mov	r3, r1
 800dabc:	71bb      	strb	r3, [r7, #6]
 800dabe:	4613      	mov	r3, r2
 800dac0:	717b      	strb	r3, [r7, #5]
	Adbms6948_ReturnType nRet = E_NOT_OK;
 800dac2:	2301      	movs	r3, #1
 800dac4:	73fb      	strb	r3, [r7, #15]
	if (ADBMS6948_ST_UNINIT == Adbms6948_eState)
 800dac6:	4b32      	ldr	r3, [pc, #200]	; (800db90 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xe4>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d05a      	beq.n	800db84 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		/* Module is not initialized. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCURRENT_ID, ADBMS6948_E_MODULESTATE);
		#endif
	}
	else if (NULL_PTR == pnCurrentData)
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d057      	beq.n	800db84 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		/* Null pointer error. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCURRENT_ID, ADBMS6948_E_PARAM_POINTER);
		#endif
	}
	else if ((TRUE == Adbms6948_Cmn_IsInvalidSnapSelType(eSnapSel)) || (TRUE == Adbms6948_lIsInvalidCurrentMeasDataType(eCurrentMeasData)) || (TRUE == Adbms6948_lIsInvalidCurrentSelType(eCurrentSel)) || (ADBMS6948_NO_OF_DAISY_CHAIN <= knChainID))
 800dad4:	797b      	ldrb	r3, [r7, #5]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff f9ca 	bl	800ce70 <_Z34Adbms6948_Cmn_IsInvalidSnapSelType21Adbms6948_SnapSelType>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d010      	beq.n	800db04 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x58>
 800dae2:	79fb      	ldrb	r3, [r7, #7]
 800dae4:	4618      	mov	r0, r3
 800dae6:	f000 fac9 	bl	800e07c <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType>
 800daea:	4603      	mov	r3, r0
 800daec:	2b01      	cmp	r3, #1
 800daee:	d009      	beq.n	800db04 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x58>
 800daf0:	79bb      	ldrb	r3, [r7, #6]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 fad6 	bl	800e0a4 <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d002      	beq.n	800db04 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x58>
 800dafe:	7e3b      	ldrb	r3, [r7, #24]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d001      	beq.n	800db08 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x5c>
 800db04:	2301      	movs	r3, #1
 800db06:	e000      	b.n	800db0a <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x5e>
 800db08:	2300      	movs	r3, #0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d13a      	bne.n	800db84 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		/* Invalid chain ID. */
		#if (TRUE == ADBMS6948_DEVELOPMENT_MODE_EN)
		Adbms6948_Cmn_ReportDevErr(ADBMS6948_MODULE_ID, ADBMS6948_INSTANCE_ID, ADBMS6948_READCURRENT_ID, ADBMS6948_E_INVALID_PARAM);
		#endif
	}
	else if (E_NOT_OK == Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_BUSY, knChainID))
 800db0e:	7e3b      	ldrb	r3, [r7, #24]
 800db10:	4619      	mov	r1, r3
 800db12:	2001      	movs	r0, #1
 800db14:	f7ff f9c0 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	bf0c      	ite	eq
 800db1e:	2301      	moveq	r3, #1
 800db20:	2300      	movne	r3, #0
 800db22:	b2db      	uxtb	r3, r3
 800db24:	2b00      	cmp	r3, #0
 800db26:	d12d      	bne.n	800db84 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xd8>
		#endif
	}
	else
	{
		/* Read current */
		nRet = Adbms6948_lReadCurrent(eCurrentMeasData, eCurrentSel, pnCurrentData, eSnapSel, knChainID);
 800db28:	797a      	ldrb	r2, [r7, #5]
 800db2a:	79b9      	ldrb	r1, [r7, #6]
 800db2c:	79f8      	ldrb	r0, [r7, #7]
 800db2e:	7e3b      	ldrb	r3, [r7, #24]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	4613      	mov	r3, r2
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	f000 f911 	bl	800dd5c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]
		if (E_OK == nRet)
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d115      	bne.n	800db70 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xc4>
		{
			/* Perform platform error check. */
			if (TRUE == Adbms6948_Cmn_IsError(knChainID))
 800db44:	7e3b      	ldrb	r3, [r7, #24]
 800db46:	4618      	mov	r0, r3
 800db48:	f7fe fcd6 	bl	800c4f8 <_Z21Adbms6948_Cmn_IsErrorh>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b01      	cmp	r3, #1
 800db50:	bf0c      	ite	eq
 800db52:	2301      	moveq	r3, #1
 800db54:	2300      	movne	r3, #0
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d009      	beq.n	800db70 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xc4>
			{
				/* Platform error. */
				nRet = E_NOT_OK;
 800db5c:	2301      	movs	r3, #1
 800db5e:	73fb      	strb	r3, [r7, #15]
				Adbms6948_Cmn_ReportRuntimeErr(Adbms6948_pConfig->Adbms6948_pRunTimeErrCfg->Adbms6948_E_Platform_Error.nErrID, ADBMS6948_RUNTIME_E_STATUS_FAILED);
 800db60:	4b0c      	ldr	r3, [pc, #48]	; (800db94 <_Z25Adbms6948_Int_ReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xe8>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	895b      	ldrh	r3, [r3, #10]
 800db68:	2101      	movs	r1, #1
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fcb2 	bl	800c4d4 <_Z30Adbms6948_Cmn_ReportRuntimeErrth>
			}
		}

		/* Set chain state to IDLE. */
		nRet |= Adbms6948_Cmn_UpdateChainStatus(ADBMS6948_ST_CHAIN_IDLE, knChainID);
 800db70:	7e3b      	ldrb	r3, [r7, #24]
 800db72:	4619      	mov	r1, r3
 800db74:	2000      	movs	r0, #0
 800db76:	f7ff f98f 	bl	800ce98 <_Z31Adbms6948_Cmn_UpdateChainStatus24Adbms6948_ChainStateTypeh>
 800db7a:	4603      	mov	r3, r0
 800db7c:	461a      	mov	r2, r3
 800db7e:	7bfb      	ldrb	r3, [r7, #15]
 800db80:	4313      	orrs	r3, r2
 800db82:	73fb      	strb	r3, [r7, #15]
	}

	return(nRet);
 800db84:	7bfb      	ldrb	r3, [r7, #15]
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	2000075c 	.word	0x2000075c
 800db94:	20000774 	.word	0x20000774

0800db98 <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth>:
	Adbms6948_CellMeasDataType      eCellMeasData,
	Adbms6948_CellGrpSelType  	    eCellGrpSel,
	uint16_t                        *pnCmd,
	const uint8_t  					 knChainID
)
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	603a      	str	r2, [r7, #0]
 800dba0:	461a      	mov	r2, r3
 800dba2:	4603      	mov	r3, r0
 800dba4:	71fb      	strb	r3, [r7, #7]
 800dba6:	460b      	mov	r3, r1
 800dba8:	71bb      	strb	r3, [r7, #6]
 800dbaa:	4613      	mov	r3, r2
 800dbac:	717b      	strb	r3, [r7, #5]
	if (ADBMS6948_CELL_GRP_SEL_ALL == eCellGrpSel)
 800dbae:	79bb      	ldrb	r3, [r7, #6]
 800dbb0:	2b06      	cmp	r3, #6
 800dbb2:	d10b      	bne.n	800dbcc <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x34>
	{
        /*Use ALL commands for reading all cell voltage groups at once*/
        *pnCmd = Adbms6948_CellDataReadCmds[(uint8_t)eCellMeasData][(uint8_t)(ADBMS6948_MAX_CELLDATA_REGGRPS)];
 800dbb4:	79fa      	ldrb	r2, [r7, #7]
 800dbb6:	490d      	ldr	r1, [pc, #52]	; (800dbec <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x54>)
 800dbb8:	4613      	mov	r3, r2
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	1a9b      	subs	r3, r3, r2
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	440b      	add	r3, r1
 800dbc2:	330c      	adds	r3, #12
 800dbc4:	881a      	ldrh	r2, [r3, #0]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		*pnCmd = Adbms6948_CellDataReadCmds[(uint8_t)eCellMeasData][(uint8_t)eCellGrpSel];
	}
}
 800dbca:	e00a      	b.n	800dbe2 <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x4a>
		*pnCmd = Adbms6948_CellDataReadCmds[(uint8_t)eCellMeasData][(uint8_t)eCellGrpSel];
 800dbcc:	79fa      	ldrb	r2, [r7, #7]
 800dbce:	79b9      	ldrb	r1, [r7, #6]
 800dbd0:	4806      	ldr	r0, [pc, #24]	; (800dbec <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth+0x54>)
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	00db      	lsls	r3, r3, #3
 800dbd6:	1a9b      	subs	r3, r3, r2
 800dbd8:	440b      	add	r3, r1
 800dbda:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	801a      	strh	r2, [r3, #0]
}
 800dbe2:	bf00      	nop
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bc80      	pop	{r7}
 800dbea:	4770      	bx	lr
 800dbec:	08013928 	.word	0x08013928

0800dbf0 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh>:
	Adbms6948_CellMeasDataType  	eCellMeasData,
	int16_t 					    *pnCellData,
	Adbms6948_SnapSelType 			eSnapSel,
    const uint8_t                   knChainID
)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b092      	sub	sp, #72	; 0x48
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6039      	str	r1, [r7, #0]
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	71fb      	strb	r3, [r7, #7]
 800dc00:	460b      	mov	r3, r1
 800dc02:	71bb      	strb	r3, [r7, #6]
 800dc04:	4613      	mov	r3, r2
 800dc06:	717b      	strb	r3, [r7, #5]
	uint16_t  nCmd;
	uint16_t  nCmdCode, nCellData, nRdBufIdx;
	uint8_t  nDataLenBytesWithPec;
	boolean  bSendSnap, bSendUnsnap;

	nRdBufIdx = 0u;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	bSendSnap = (boolean)((uint8_t)eSnapSel & 0x01u);
 800dc0e:	79bb      	ldrb	r3, [r7, #6]
 800dc10:	f003 0301 	and.w	r3, r3, #1
 800dc14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	bSendUnsnap = (boolean)(((uint8_t)eSnapSel & 0x02u) >> 1u);
 800dc18:	79bb      	ldrb	r3, [r7, #6]
 800dc1a:	085b      	lsrs	r3, r3, #1
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	f003 0301 	and.w	r3, r3, #1
 800dc22:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	nDataLenBytesWithPec = Adbms6948_ReadAllCommandBytes[ADBMS6948_READALL_CELLVOLTAGES];
 800dc26:	2322      	movs	r3, #34	; 0x22
 800dc28:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	if(TRUE == bSendSnap)
 800dc2c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d109      	bne.n	800dc48 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x58>
	{
		/*Send SNAP command */
		nCmdCode = ADBMS6948_CMD_SNAP;
 800dc34:	232d      	movs	r3, #45	; 0x2d
 800dc36:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800dc3a:	797a      	ldrb	r2, [r7, #5]
 800dc3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dc40:	2101      	movs	r1, #1
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7ff f901 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}
	/* Send Read commands*/
	Adbms6948_lGetCellCmd(eCellMeasData, ADBMS6948_CELL_GRP_SEL_ALL, &nCmd, knChainID);
 800dc48:	797b      	ldrb	r3, [r7, #5]
 800dc4a:	f107 020e 	add.w	r2, r7, #14
 800dc4e:	79f8      	ldrb	r0, [r7, #7]
 800dc50:	2106      	movs	r1, #6
 800dc52:	f7ff ffa1 	bl	800db98 <_ZL21Adbms6948_lGetCellCmd26Adbms6948_CellMeasDataType24Adbms6948_CellGrpSelTypePth>
    
	nRet = Adbms6948_Cmn_ReadAllRegGroups(nCmd, anReadCellDataBuf, nDataLenBytesWithPec, knChainID);
 800dc56:	89f8      	ldrh	r0, [r7, #14]
 800dc58:	797b      	ldrb	r3, [r7, #5]
 800dc5a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800dc5e:	f107 0110 	add.w	r1, r7, #16
 800dc62:	f7ff f8c5 	bl	800cdf0 <_Z30Adbms6948_Cmn_ReadAllRegGroupstPhhh>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (E_OK == nRet)
 800dc6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d12e      	bne.n	800dcd2 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xe2>
	{
		for(uint8_t nCellIdx = 0; nCellIdx < ADBMS6948_MAX_NO_OF_CELLS_PER_DEVICE; ++nCellIdx)
 800dc74:	2300      	movs	r3, #0
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc7e:	2b0f      	cmp	r3, #15
 800dc80:	d827      	bhi.n	800dcd2 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0xe2>
		{
			/* Populate the user data buffer. */
        	nCellData = (int16_t)(((uint16_t)anReadCellDataBuf[nRdBufIdx + 1u] << 8u) | (uint16_t)anReadCellDataBuf[nRdBufIdx]);
 800dc82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dc86:	3301      	adds	r3, #1
 800dc88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dc8c:	4413      	add	r3, r2
 800dc8e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800dc92:	021b      	lsls	r3, r3, #8
 800dc94:	b21a      	sxth	r2, r3
 800dc96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dc9a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dc9e:	440b      	add	r3, r1
 800dca0:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800dca4:	b21b      	sxth	r3, r3
 800dca6:	4313      	orrs	r3, r2
 800dca8:	b21b      	sxth	r3, r3
 800dcaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
        	pnCellData[nCellIdx] = nCellData;
 800dcac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcb0:	005b      	lsls	r3, r3, #1
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	; 0x3c
 800dcba:	801a      	strh	r2, [r3, #0]
			nRdBufIdx += 2;
 800dcbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dcc0:	3302      	adds	r3, #2
 800dcc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		for(uint8_t nCellIdx = 0; nCellIdx < ADBMS6948_MAX_NO_OF_CELLS_PER_DEVICE; ++nCellIdx)
 800dcc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcca:	3301      	adds	r3, #1
 800dccc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd0:	e7d3      	b.n	800dc7a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x8a>
		}
	}
	if ((E_OK == nRet) && (TRUE == bSendUnsnap))
 800dcd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10d      	bne.n	800dcf6 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x106>
 800dcda:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d109      	bne.n	800dcf6 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x106>
	{
		nCmdCode = ADBMS6948_CMD_UNSNAP;
 800dce2:	232f      	movs	r3, #47	; 0x2f
 800dce4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800dce8:	797a      	ldrb	r2, [r7, #5]
 800dcea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dcee:	2101      	movs	r1, #1
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff f8aa 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}

	/*Clear the Cell Voltage registers*/
	if (ADBMS6948_CELL_MEAS_DATA == eCellMeasData || ADBMS6948_CELL_MEAS_DATA_AVERAGED == eCellMeasData)
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x112>
 800dcfc:	79fb      	ldrb	r3, [r7, #7]
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d104      	bne.n	800dd0c <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x11c>
	{
		nCmdCode = ADBMS6948_CMD_CLRCELL;
 800dd02:	f240 7311 	movw	r3, #1809	; 0x711
 800dd06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd0a:	e00e      	b.n	800dd2a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x13a>
	}
	else if (ADBMS6948_CELL_MEAS_DATA_REDUNDANT == eCellMeasData)
 800dd0c:	79fb      	ldrb	r3, [r7, #7]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d104      	bne.n	800dd1c <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x12c>
	{
		nCmdCode = ADBMS6948_CMD_CLRSPIN;
 800dd12:	f240 7316 	movw	r3, #1814	; 0x716
 800dd16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800dd1a:	e006      	b.n	800dd2a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x13a>
	}
	else if (ADBMS6948_CELL_MEAS_DATA_FILTERED == eCellMeasData)
 800dd1c:	79fb      	ldrb	r3, [r7, #7]
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d103      	bne.n	800dd2a <_ZL26Adbms6948_lReadAllCellVolt26Adbms6948_CellMeasDataTypePs21Adbms6948_SnapSelTypeh+0x13a>
	{
		nCmdCode = ADBMS6948_CMD_CLRFC;
 800dd22:	f240 7314 	movw	r3, #1812	; 0x714
 800dd26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	}

	Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800dd2a:	797a      	ldrb	r2, [r7, #5]
 800dd2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800dd30:	2101      	movs	r1, #1
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff f889 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>

	/* Verify the command counter if UNSNAP command was sent*/
	nRet |= Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800dd38:	797b      	ldrb	r3, [r7, #5]
 800dd3a:	4619      	mov	r1, r3
 800dd3c:	2001      	movs	r0, #1
 800dd3e:	f7fe fccb 	bl	800c6d8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800dd42:	4603      	mov	r3, r0
 800dd44:	461a      	mov	r2, r3
 800dd46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

return(nRet);
 800dd50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3748      	adds	r7, #72	; 0x48
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh>:
	Adbms6948_CurrentSelType		eCurrentSel,
	int32_t							*pnCurrentData,
	Adbms6948_SnapSelType			eSnapSel,
	const uint8_t					knChainID
)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08c      	sub	sp, #48	; 0x30
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	603a      	str	r2, [r7, #0]
 800dd64:	461a      	mov	r2, r3
 800dd66:	4603      	mov	r3, r0
 800dd68:	71fb      	strb	r3, [r7, #7]
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	71bb      	strb	r3, [r7, #6]
 800dd6e:	4613      	mov	r3, r2
 800dd70:	717b      	strb	r3, [r7, #5]
	Adbms6948_ReturnType  nRet;
	uint8_t		anReadCurrentDataBuf[ADBMS6948_MAX_CURRENT_REGGRPS][ADBMS6948_CMD_DATA_LEN + ADBMS6948_REG_DATA_LEN_WITH_PEC];
	uint16_t	anCmdList[ADBMS6948_MAX_CURRENT_REGGRPS];
	uint16_t	nCmdCode, nRdBufIdx, nBufIdx = 0u;
 800dd72:	2300      	movs	r3, #0
 800dd74:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint32_t	nCurrentData;
	uint8_t		nRegGrpIdx, nNumOfCmds = 0u;
 800dd76:	2300      	movs	r3, #0
 800dd78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	boolean		bSendSnap, bSendUnsnap;
	uint16_t 	nCmd;

	bSendSnap = (boolean)((uint8_t)eSnapSel & 0x01u);
 800dd7c:	797b      	ldrb	r3, [r7, #5]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bSendUnsnap = (boolean)(((uint8_t)eSnapSel & 0x02u) >> 1u);
 800dd86:	797b      	ldrb	r3, [r7, #5]
 800dd88:	085b      	lsrs	r3, r3, #1
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(TRUE == bSendSnap)
 800dd94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d108      	bne.n	800ddae <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x52>
	{
		/*Send SNAP command */
		nCmdCode = ADBMS6948_CMD_SNAP;
 800dd9c:	232d      	movs	r3, #45	; 0x2d
 800dd9e:	847b      	strh	r3, [r7, #34]	; 0x22
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800dda0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dda4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dda6:	2101      	movs	r1, #1
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7ff f84e 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}

	/*Select the read command to send based on type of current data*/
	if (ADBMS6948_CURRENT_MEAS_DATA == eCurrentMeasData)
 800ddae:	79fb      	ldrb	r3, [r7, #7]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d10c      	bne.n	800ddce <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x72>
	{
		anCmdList[nNumOfCmds++] = ADBMS6948_CMD_RDI;
 800ddb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddb8:	1c5a      	adds	r2, r3, #1
 800ddba:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ddc4:	4413      	add	r3, r2
 800ddc6:	2284      	movs	r2, #132	; 0x84
 800ddc8:	f823 2c24 	strh.w	r2, [r3, #-36]
 800ddcc:	e00e      	b.n	800ddec <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x90>
	}
	else if (ADBMS6948_CURRENT_MEAS_DATA_AVERAGED == eCurrentMeasData)
 800ddce:	79fb      	ldrb	r3, [r7, #7]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d10b      	bne.n	800ddec <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x90>
	{
		anCmdList[nNumOfCmds++] = ADBMS6948_CMD_RDIAV;
 800ddd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd8:	1c5a      	adds	r2, r3, #1
 800ddda:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800ddde:	005b      	lsls	r3, r3, #1
 800dde0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dde4:	4413      	add	r3, r2
 800dde6:	22c4      	movs	r2, #196	; 0xc4
 800dde8:	f823 2c24 	strh.w	r2, [r3, #-36]
	}

	/* Send Read commands*/
	nRet = Adbms6948_Cmn_ReadRegGroup(anCmdList, anReadCurrentDataBuf, nNumOfCmds, knChainID);
 800ddec:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ddf0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ddf4:	f107 0110 	add.w	r1, r7, #16
 800ddf8:	f107 000c 	add.w	r0, r7, #12
 800ddfc:	f7fe ff38 	bl	800cc70 <_Z26Adbms6948_Cmn_ReadRegGroupPtPA12_hhh>
 800de00:	4603      	mov	r3, r0
 800de02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (E_OK == nRet)
 800de06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f040 80fe 	bne.w	800e00c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2b0>
	{
        nRdBufIdx = (uint16_t)ADBMS6948_CMD_DATA_LEN;
 800de10:	2304      	movs	r3, #4
 800de12:	843b      	strh	r3, [r7, #32]
        nRegGrpIdx = 0u;
 800de14:	2300      	movs	r3, #0
 800de16:	77fb      	strb	r3, [r7, #31]
		/*Populate the user data buffer*/
        /*Populate I1 value if applicable*/
        if (ADBMS6948_CURRENT_I1I2 == eCurrentSel || ADBMS6948_CURRENT_I1 == eCurrentSel)
 800de18:	79bb      	ldrb	r3, [r7, #6]
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	d002      	beq.n	800de24 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0xc8>
 800de1e:	79bb      	ldrb	r3, [r7, #6]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d174      	bne.n	800df0e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x1b2>
        {
            /*Current register and Average current register have different
            number of bits*/
            switch (eCurrentMeasData)
 800de24:	79fb      	ldrb	r3, [r7, #7]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d01a      	beq.n	800de60 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x104>
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d135      	bne.n	800de9a <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x13e>
            {
                case ADBMS6948_CURRENT_MEAS_DATA_AVERAGED:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 2u]) & 0xFF) << 16u);
 800de2e:	7ffa      	ldrb	r2, [r7, #31]
 800de30:	8c3b      	ldrh	r3, [r7, #32]
 800de32:	1c99      	adds	r1, r3, #2
 800de34:	4613      	mov	r3, r2
 800de36:	005b      	lsls	r3, r3, #1
 800de38:	4413      	add	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800de40:	4413      	add	r3, r2
 800de42:	440b      	add	r3, r1
 800de44:	3b20      	subs	r3, #32
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	041b      	lsls	r3, r3, #16
 800de4a:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00800000))
 800de4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d025      	beq.n	800dea2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x146>
                    {
                        nCurrentData |= 0xFF000000;
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800de5c:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800de5e:	e020      	b.n	800dea2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x146>
                case ADBMS6948_CURRENT_MEAS_DATA:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 2u]) & 0x07) << 16u);
 800de60:	7ffa      	ldrb	r2, [r7, #31]
 800de62:	8c3b      	ldrh	r3, [r7, #32]
 800de64:	1c99      	adds	r1, r3, #2
 800de66:	4613      	mov	r3, r2
 800de68:	005b      	lsls	r3, r3, #1
 800de6a:	4413      	add	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800de72:	4413      	add	r3, r2
 800de74:	440b      	add	r3, r1
 800de76:	3b20      	subs	r3, #32
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	041b      	lsls	r3, r3, #16
 800de7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800de80:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00040000))
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00c      	beq.n	800dea6 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14a>
                    {
                        nCurrentData |= 0xFFF80000;
 800de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8e:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 800de92:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 800de96:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800de98:	e005      	b.n	800dea6 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14a>
                default:
                    nRet = E_NOT_OK;
 800de9a:	2301      	movs	r3, #1
 800de9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    break;
 800dea0:	e002      	b.n	800dea8 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14c>
                    break;
 800dea2:	bf00      	nop
 800dea4:	e000      	b.n	800dea8 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x14c>
                    break;
 800dea6:	bf00      	nop
            }
            nCurrentData |= ((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 1u]) << 8u;
 800dea8:	7ffa      	ldrb	r2, [r7, #31]
 800deaa:	8c3b      	ldrh	r3, [r7, #32]
 800deac:	1c59      	adds	r1, r3, #1
 800deae:	4613      	mov	r3, r2
 800deb0:	005b      	lsls	r3, r3, #1
 800deb2:	4413      	add	r3, r2
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800deba:	4413      	add	r3, r2
 800debc:	440b      	add	r3, r1
 800debe:	3b20      	subs	r3, #32
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	021b      	lsls	r3, r3, #8
 800dec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dec6:	4313      	orrs	r3, r2
 800dec8:	62bb      	str	r3, [r7, #40]	; 0x28
            nCurrentData |= (uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx];
 800deca:	7ffa      	ldrb	r2, [r7, #31]
 800decc:	8c39      	ldrh	r1, [r7, #32]
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800deda:	4413      	add	r3, r2
 800dedc:	440b      	add	r3, r1
 800dede:	3b20      	subs	r3, #32
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	461a      	mov	r2, r3
 800dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee6:	4313      	orrs	r3, r2
 800dee8:	62bb      	str	r3, [r7, #40]	; 0x28
            pnCurrentData[nBufIdx++] = nCurrentData;
 800deea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800deec:	1c5a      	adds	r2, r3, #1
 800deee:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	4413      	add	r3, r2
 800def6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800def8:	601a      	str	r2, [r3, #0]

			/*Clear the I1 values in Current and Average Current Register groups*/
			nCmd = ADBMS6948_CMD_CLRCI;
 800defa:	f44f 63f2 	mov.w	r3, #1936	; 0x790
 800defe:	83bb      	strh	r3, [r7, #28]
			Adbms6948_Cmn_SendCommandOnly(nCmd, TRUE, knChainID);
 800df00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df04:	8bbb      	ldrh	r3, [r7, #28]
 800df06:	2101      	movs	r1, #1
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fe ff9e 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
        }

        /*Populate I2 value if applicable*/
        if (ADBMS6948_CURRENT_I1I2 == eCurrentSel || ADBMS6948_CURRENT_I2 == eCurrentSel)
 800df0e:	79bb      	ldrb	r3, [r7, #6]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d002      	beq.n	800df1a <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x1be>
 800df14:	79bb      	ldrb	r3, [r7, #6]
 800df16:	2b01      	cmp	r3, #1
 800df18:	d178      	bne.n	800e00c <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2b0>
        {
            /*Current register and Average current register have different
            number of bits*/
            switch (eCurrentMeasData)
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d01a      	beq.n	800df56 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x1fa>
 800df20:	2b01      	cmp	r3, #1
 800df22:	d135      	bne.n	800df90 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x234>
            {
                case ADBMS6948_CURRENT_MEAS_DATA_AVERAGED:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 5u]) & 0xFF) << 16u);
 800df24:	7ffa      	ldrb	r2, [r7, #31]
 800df26:	8c3b      	ldrh	r3, [r7, #32]
 800df28:	1d59      	adds	r1, r3, #5
 800df2a:	4613      	mov	r3, r2
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df36:	4413      	add	r3, r2
 800df38:	440b      	add	r3, r1
 800df3a:	3b20      	subs	r3, #32
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	041b      	lsls	r3, r3, #16
 800df40:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00800000))
 800df42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d028      	beq.n	800df9e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x242>
                    {
                        nCurrentData |= 0xFF000000;
 800df4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800df52:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800df54:	e023      	b.n	800df9e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x242>
                case ADBMS6948_CURRENT_MEAS_DATA:
                    nCurrentData = (uint32_t)((((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 5u]) & 0x07) << 16u);
 800df56:	7ffa      	ldrb	r2, [r7, #31]
 800df58:	8c3b      	ldrh	r3, [r7, #32]
 800df5a:	1d59      	adds	r1, r3, #5
 800df5c:	4613      	mov	r3, r2
 800df5e:	005b      	lsls	r3, r3, #1
 800df60:	4413      	add	r3, r2
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800df68:	4413      	add	r3, r2
 800df6a:	440b      	add	r3, r1
 800df6c:	3b20      	subs	r3, #32
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	041b      	lsls	r3, r3, #16
 800df72:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800df76:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (nCurrentData & (0x00040000))
 800df78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00f      	beq.n	800dfa2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x246>
                    {
                        nCurrentData |= 0xFFF80000;
 800df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df84:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 800df88:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 800df8c:	62bb      	str	r3, [r7, #40]	; 0x28
                    }
                    break;
 800df8e:	e008      	b.n	800dfa2 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x246>
                default:
                    nRet |= E_NOT_OK;
 800df90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800df94:	f043 0301 	orr.w	r3, r3, #1
 800df98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800df9c:	e002      	b.n	800dfa4 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x248>
                    break;
 800df9e:	bf00      	nop
 800dfa0:	e000      	b.n	800dfa4 <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x248>
                    break;
 800dfa2:	bf00      	nop
            }
            nCurrentData |= ((uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 4u] << 8u);
 800dfa4:	7ffa      	ldrb	r2, [r7, #31]
 800dfa6:	8c3b      	ldrh	r3, [r7, #32]
 800dfa8:	1d19      	adds	r1, r3, #4
 800dfaa:	4613      	mov	r3, r2
 800dfac:	005b      	lsls	r3, r3, #1
 800dfae:	4413      	add	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfb6:	4413      	add	r3, r2
 800dfb8:	440b      	add	r3, r1
 800dfba:	3b20      	subs	r3, #32
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	021b      	lsls	r3, r3, #8
 800dfc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	62bb      	str	r3, [r7, #40]	; 0x28
            nCurrentData |= (uint32_t)anReadCurrentDataBuf[nRegGrpIdx][nRdBufIdx + 3u];
 800dfc6:	7ffa      	ldrb	r2, [r7, #31]
 800dfc8:	8c3b      	ldrh	r3, [r7, #32]
 800dfca:	1cd9      	adds	r1, r3, #3
 800dfcc:	4613      	mov	r3, r2
 800dfce:	005b      	lsls	r3, r3, #1
 800dfd0:	4413      	add	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800dfd8:	4413      	add	r3, r2
 800dfda:	440b      	add	r3, r1
 800dfdc:	3b20      	subs	r3, #32
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	62bb      	str	r3, [r7, #40]	; 0x28
            pnCurrentData[nBufIdx++] = nCurrentData;
 800dfe8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	4413      	add	r3, r2
 800dff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dff6:	601a      	str	r2, [r3, #0]

			/*Clear the I2 values in Current and Average Current Register groups*/
			nCmd = ADBMS6948_CMD_CLRSI;
 800dff8:	f240 7392 	movw	r3, #1938	; 0x792
 800dffc:	83bb      	strh	r3, [r7, #28]
			Adbms6948_Cmn_SendCommandOnly(nCmd, TRUE, knChainID);
 800dffe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e002:	8bbb      	ldrh	r3, [r7, #28]
 800e004:	2101      	movs	r1, #1
 800e006:	4618      	mov	r0, r3
 800e008:	f7fe ff1f 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
        }
	}
	if ((E_OK == nRet) && (TRUE == bSendUnsnap))
 800e00c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10c      	bne.n	800e02e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2d2>
 800e014:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d108      	bne.n	800e02e <_ZL22Adbms6948_lReadCurrent29Adbms6948_CurrentMeasDataType24Adbms6948_CurrentSelTypePl21Adbms6948_SnapSelTypeh+0x2d2>
	{
		nCmdCode = ADBMS6948_CMD_UNSNAP;
 800e01c:	232f      	movs	r3, #47	; 0x2f
 800e01e:	847b      	strh	r3, [r7, #34]	; 0x22
		Adbms6948_Cmn_SendCommandOnly(nCmdCode, TRUE, knChainID);
 800e020:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e026:	2101      	movs	r1, #1
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fe ff0e 	bl	800ce4a <_Z29Adbms6948_Cmn_SendCommandOnlythh>
	}
	/* Verify the command counter as CLRCI or CLRSI or both commands were sent*/
	nRet |= Adbms6948_Cmn_VerifyCmdCnt(TRUE, knChainID);
 800e02e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e032:	4619      	mov	r1, r3
 800e034:	2001      	movs	r0, #1
 800e036:	f7fe fb4f 	bl	800c6d8 <_Z26Adbms6948_Cmn_VerifyCmdCnthh>
 800e03a:	4603      	mov	r3, r0
 800e03c:	461a      	mov	r2, r3
 800e03e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e042:	4313      	orrs	r3, r2
 800e044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

return(nRet);
 800e048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3730      	adds	r7, #48	; 0x30
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType>:
/*****************************************************************************/
static boolean  Adbms6948_lIsInvalidCellMeasDataType
(
    Adbms6948_CellMeasDataType      eCellMeasData
)
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	4603      	mov	r3, r0
 800e05c:	71fb      	strb	r3, [r7, #7]
    boolean  bRet;
    switch(eCellMeasData)
 800e05e:	79fb      	ldrb	r3, [r7, #7]
 800e060:	2b03      	cmp	r3, #3
 800e062:	d802      	bhi.n	800e06a <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType+0x16>
    {
        case ADBMS6948_CELL_MEAS_DATA:
        case ADBMS6948_CELL_MEAS_DATA_REDUNDANT:
        case ADBMS6948_CELL_MEAS_DATA_AVERAGED:
        case ADBMS6948_CELL_MEAS_DATA_FILTERED:
            bRet = FALSE;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
            break;
 800e068:	e002      	b.n	800e070 <_ZL36Adbms6948_lIsInvalidCellMeasDataType26Adbms6948_CellMeasDataType+0x1c>
        default:
            bRet = TRUE;
 800e06a:	2301      	movs	r3, #1
 800e06c:	73fb      	strb	r3, [r7, #15]
            break;
 800e06e:	bf00      	nop
    }
    return(bRet);
 800e070:	7bfb      	ldrb	r3, [r7, #15]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3714      	adds	r7, #20
 800e076:	46bd      	mov	sp, r7
 800e078:	bc80      	pop	{r7}
 800e07a:	4770      	bx	lr

0800e07c <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType>:
/*****************************************************************************/
static boolean  Adbms6948_lIsInvalidCurrentMeasDataType
(
    Adbms6948_CurrentMeasDataType      eCurrentMeasData
)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	4603      	mov	r3, r0
 800e084:	71fb      	strb	r3, [r7, #7]
    boolean  bRet;
    switch(eCurrentMeasData)
 800e086:	79fb      	ldrb	r3, [r7, #7]
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d802      	bhi.n	800e092 <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType+0x16>
    {
        case ADBMS6948_CURRENT_MEAS_DATA:
        case ADBMS6948_CURRENT_MEAS_DATA_AVERAGED:
            bRet = FALSE;
 800e08c:	2300      	movs	r3, #0
 800e08e:	73fb      	strb	r3, [r7, #15]
            break;
 800e090:	e002      	b.n	800e098 <_ZL39Adbms6948_lIsInvalidCurrentMeasDataType29Adbms6948_CurrentMeasDataType+0x1c>
        default:
            bRet = TRUE;
 800e092:	2301      	movs	r3, #1
 800e094:	73fb      	strb	r3, [r7, #15]
            break;
 800e096:	bf00      	nop
    }
    return(bRet);
 800e098:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bc80      	pop	{r7}
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType>:
/*****************************************************************************/
static boolean  Adbms6948_lIsInvalidCurrentSelType
(
    Adbms6948_CurrentSelType      eCurrentSel
)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	71fb      	strb	r3, [r7, #7]
    boolean  bRet;
    switch(eCurrentSel)
 800e0ae:	79fb      	ldrb	r3, [r7, #7]
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d802      	bhi.n	800e0ba <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType+0x16>
    {
        case ADBMS6948_CURRENT_I1:
        case ADBMS6948_CURRENT_I2:
        case ADBMS6948_CURRENT_I1I2:
            bRet = FALSE;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	73fb      	strb	r3, [r7, #15]
            break;
 800e0b8:	e002      	b.n	800e0c0 <_ZL34Adbms6948_lIsInvalidCurrentSelType24Adbms6948_CurrentSelType+0x1c>
        default:
            bRet = TRUE;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	73fb      	strb	r3, [r7, #15]
            break;
 800e0be:	bf00      	nop
    }
    return(bRet);
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bc80      	pop	{r7}
 800e0ca:	4770      	bx	lr

0800e0cc <_Z24Adbms6948_Pec15CalculatePhh>:
uint16_t Adbms6948_Pec15Calculate
(
    uint8_t 	*pDataBuf,
    uint8_t   	 nLength
)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	460b      	mov	r3, r1
 800e0d6:	70fb      	strb	r3, [r7, #3]
    uint16_t  nRemainder, nTableAddr;
    uint8_t   nByteIndex;

    nRemainder = 16u;/* initialize the PEC */
 800e0d8:	2310      	movs	r3, #16
 800e0da:	81fb      	strh	r3, [r7, #14]

    /* loops for each byte in data array */
    for (nByteIndex = 0u; nByteIndex < nLength; nByteIndex++)
 800e0dc:	2300      	movs	r3, #0
 800e0de:	737b      	strb	r3, [r7, #13]
 800e0e0:	7b7a      	ldrb	r2, [r7, #13]
 800e0e2:	78fb      	ldrb	r3, [r7, #3]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d21a      	bcs.n	800e11e <_Z24Adbms6948_Pec15CalculatePhh+0x52>
    {
        /* calculate PEC table address */
        nTableAddr = (uint16_t)(((uint16_t)(nRemainder >> 7) ^ (uint8_t)pDataBuf[nByteIndex]) &
 800e0e8:	89fb      	ldrh	r3, [r7, #14]
 800e0ea:	11db      	asrs	r3, r3, #7
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	7b7b      	ldrb	r3, [r7, #13]
 800e0f0:	6879      	ldr	r1, [r7, #4]
 800e0f2:	440b      	add	r3, r1
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	4053      	eors	r3, r2
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	817b      	strh	r3, [r7, #10]
                (uint8_t)0xff);
        nRemainder = (uint16_t)((nRemainder << 8) ^ Adbms6948_Crc15Table[nTableAddr]);
 800e100:	89fb      	ldrh	r3, [r7, #14]
 800e102:	021b      	lsls	r3, r3, #8
 800e104:	b21a      	sxth	r2, r3
 800e106:	897b      	ldrh	r3, [r7, #10]
 800e108:	4909      	ldr	r1, [pc, #36]	; (800e130 <_Z24Adbms6948_Pec15CalculatePhh+0x64>)
 800e10a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e10e:	b21b      	sxth	r3, r3
 800e110:	4053      	eors	r3, r2
 800e112:	b21b      	sxth	r3, r3
 800e114:	81fb      	strh	r3, [r7, #14]
    for (nByteIndex = 0u; nByteIndex < nLength; nByteIndex++)
 800e116:	7b7b      	ldrb	r3, [r7, #13]
 800e118:	3301      	adds	r3, #1
 800e11a:	737b      	strb	r3, [r7, #13]
 800e11c:	e7e0      	b.n	800e0e0 <_Z24Adbms6948_Pec15CalculatePhh+0x14>
    }
    /* The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2 */
    return(nRemainder * 2u);
 800e11e:	89fb      	ldrh	r3, [r7, #14]
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	b29b      	uxth	r3, r3
}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	bc80      	pop	{r7}
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	08013960 	.word	0x08013960

0800e134 <_Z24Adbms6948_Pec10CalculatePhhh>:
(
uint8_t 	*pDataBuf,
boolean  	 bIsRxCmd,
uint8_t   	 nLength
)
{
 800e134:	b480      	push	{r7}
 800e136:	b085      	sub	sp, #20
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	460b      	mov	r3, r1
 800e13e:	70fb      	strb	r3, [r7, #3]
 800e140:	4613      	mov	r3, r2
 800e142:	70bb      	strb	r3, [r7, #2]
    uint16_t   nRemainder = 16u;/* PEC_SEED */
 800e144:	2310      	movs	r3, #16
 800e146:	81fb      	strh	r3, [r7, #14]
    /* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
    uint16_t   nPolynomial = 0x8Fu;
 800e148:	238f      	movs	r3, #143	; 0x8f
 800e14a:	817b      	strh	r3, [r7, #10]
    uint8_t   nByteIndex, nBitIndex;
    uint16_t   nTableAddr;

    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 800e14c:	2300      	movs	r3, #0
 800e14e:	737b      	strb	r3, [r7, #13]
 800e150:	7b7a      	ldrb	r2, [r7, #13]
 800e152:	78bb      	ldrb	r3, [r7, #2]
 800e154:	429a      	cmp	r2, r3
 800e156:	d218      	bcs.n	800e18a <_Z24Adbms6948_Pec10CalculatePhhh+0x56>
    {
        /* calculate PEC table address */
        nTableAddr = (uint16_t)(((uint16_t)(nRemainder >> 2) ^ (uint8_t)pDataBuf[nByteIndex]) &
 800e158:	89fb      	ldrh	r3, [r7, #14]
 800e15a:	109b      	asrs	r3, r3, #2
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	7b7b      	ldrb	r3, [r7, #13]
 800e160:	6879      	ldr	r1, [r7, #4]
 800e162:	440b      	add	r3, r1
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	b29b      	uxth	r3, r3
 800e168:	4053      	eors	r3, r2
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	813b      	strh	r3, [r7, #8]
                (uint8_t)0xff);
        nRemainder = (uint16_t)(((uint16_t)(nRemainder << 8)) ^ Adbms6948_Crc10Table[nTableAddr]);
 800e170:	89fb      	ldrh	r3, [r7, #14]
 800e172:	021b      	lsls	r3, r3, #8
 800e174:	b29a      	uxth	r2, r3
 800e176:	893b      	ldrh	r3, [r7, #8]
 800e178:	491c      	ldr	r1, [pc, #112]	; (800e1ec <_Z24Adbms6948_Pec10CalculatePhhh+0xb8>)
 800e17a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e17e:	4053      	eors	r3, r2
 800e180:	81fb      	strh	r3, [r7, #14]
    for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 800e182:	7b7b      	ldrb	r3, [r7, #13]
 800e184:	3301      	adds	r3, #1
 800e186:	737b      	strb	r3, [r7, #13]
 800e188:	e7e2      	b.n	800e150 <_Z24Adbms6948_Pec10CalculatePhhh+0x1c>
    }
    /* If array is from received buffer add command counter to crc calculation */
    if (bIsRxCmd == TRUE)
 800e18a:	78fb      	ldrb	r3, [r7, #3]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d10b      	bne.n	800e1a8 <_Z24Adbms6948_Pec10CalculatePhhh+0x74>
    {
        nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 800e190:	78bb      	ldrb	r3, [r7, #2]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	4413      	add	r3, r2
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	009b      	lsls	r3, r3, #2
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	89fb      	ldrh	r3, [r7, #14]
 800e1a4:	4053      	eors	r3, r2
 800e1a6:	81fb      	strh	r3, [r7, #14]
    }
    /* Perform modulo-2 division, a bit at a time */
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800e1a8:	2306      	movs	r3, #6
 800e1aa:	733b      	strb	r3, [r7, #12]
 800e1ac:	7b3b      	ldrb	r3, [r7, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d013      	beq.n	800e1da <_Z24Adbms6948_Pec10CalculatePhhh+0xa6>
    {
        /* Try to divide the current data bit */
        if ((nRemainder & 0x200u) > 0u)
 800e1b2:	89fb      	ldrh	r3, [r7, #14]
 800e1b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d007      	beq.n	800e1cc <_Z24Adbms6948_Pec10CalculatePhhh+0x98>
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800e1bc:	89fb      	ldrh	r3, [r7, #14]
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	81fb      	strh	r3, [r7, #14]
            nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 800e1c2:	89fa      	ldrh	r2, [r7, #14]
 800e1c4:	897b      	ldrh	r3, [r7, #10]
 800e1c6:	4053      	eors	r3, r2
 800e1c8:	81fb      	strh	r3, [r7, #14]
 800e1ca:	e002      	b.n	800e1d2 <_Z24Adbms6948_Pec10CalculatePhhh+0x9e>
        }
        else
        {
            nRemainder = (uint16_t)((nRemainder << 1u));
 800e1cc:	89fb      	ldrh	r3, [r7, #14]
 800e1ce:	005b      	lsls	r3, r3, #1
 800e1d0:	81fb      	strh	r3, [r7, #14]
    for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 800e1d2:	7b3b      	ldrb	r3, [r7, #12]
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	733b      	strb	r3, [r7, #12]
 800e1d8:	e7e8      	b.n	800e1ac <_Z24Adbms6948_Pec10CalculatePhhh+0x78>
        }
    }
    return ((uint16_t)(nRemainder & 0x3FFu));
 800e1da:	89fb      	ldrh	r3, [r7, #14]
 800e1dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1e0:	b29b      	uxth	r3, r3
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3714      	adds	r7, #20
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bc80      	pop	{r7}
 800e1ea:	4770      	bx	lr
 800e1ec:	08013b60 	.word	0x08013b60

0800e1f0 <_Z14Adbms_Delay_usm>:
{

}

__attribute__((weak)) void Adbms_Delay_us(uint32_t us)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  if (us > 1000) us /= 1000;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1fe:	d909      	bls.n	800e214 <_Z14Adbms_Delay_usm+0x24>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4a08      	ldr	r2, [pc, #32]	; (800e224 <_Z14Adbms_Delay_usm+0x34>)
 800e204:	fba2 2303 	umull	r2, r3, r2, r3
 800e208:	099b      	lsrs	r3, r3, #6
 800e20a:	607b      	str	r3, [r7, #4]
  else return (void) Adbms_Delay(1);
  Adbms_Delay(us);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7f3 f869 	bl	80012e4 <_Z11Adbms_Delaym>
 800e212:	e003      	b.n	800e21c <_Z14Adbms_Delay_usm+0x2c>
  else return (void) Adbms_Delay(1);
 800e214:	2001      	movs	r0, #1
 800e216:	f7f3 f865 	bl	80012e4 <_Z11Adbms_Delaym>
 800e21a:	bf00      	nop
}
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	10624dd3 	.word	0x10624dd3

0800e228 <log>:
 800e228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e22a:	4604      	mov	r4, r0
 800e22c:	460d      	mov	r5, r1
 800e22e:	f000 f837 	bl	800e2a0 <__ieee754_log>
 800e232:	4b17      	ldr	r3, [pc, #92]	; (800e290 <log+0x68>)
 800e234:	4606      	mov	r6, r0
 800e236:	f993 3000 	ldrsb.w	r3, [r3]
 800e23a:	460f      	mov	r7, r1
 800e23c:	3301      	adds	r3, #1
 800e23e:	d01a      	beq.n	800e276 <log+0x4e>
 800e240:	4622      	mov	r2, r4
 800e242:	462b      	mov	r3, r5
 800e244:	4620      	mov	r0, r4
 800e246:	4629      	mov	r1, r5
 800e248:	f7f2 fc4c 	bl	8000ae4 <__aeabi_dcmpun>
 800e24c:	b998      	cbnz	r0, 800e276 <log+0x4e>
 800e24e:	2200      	movs	r2, #0
 800e250:	2300      	movs	r3, #0
 800e252:	4620      	mov	r0, r4
 800e254:	4629      	mov	r1, r5
 800e256:	f7f2 fc3b 	bl	8000ad0 <__aeabi_dcmpgt>
 800e25a:	b960      	cbnz	r0, 800e276 <log+0x4e>
 800e25c:	2200      	movs	r2, #0
 800e25e:	2300      	movs	r3, #0
 800e260:	4620      	mov	r0, r4
 800e262:	4629      	mov	r1, r5
 800e264:	f7f2 fc0c 	bl	8000a80 <__aeabi_dcmpeq>
 800e268:	b140      	cbz	r0, 800e27c <log+0x54>
 800e26a:	f000 f9d1 	bl	800e610 <__errno>
 800e26e:	2322      	movs	r3, #34	; 0x22
 800e270:	2600      	movs	r6, #0
 800e272:	4f08      	ldr	r7, [pc, #32]	; (800e294 <log+0x6c>)
 800e274:	6003      	str	r3, [r0, #0]
 800e276:	4630      	mov	r0, r6
 800e278:	4639      	mov	r1, r7
 800e27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e27c:	f000 f9c8 	bl	800e610 <__errno>
 800e280:	2321      	movs	r3, #33	; 0x21
 800e282:	6003      	str	r3, [r0, #0]
 800e284:	4804      	ldr	r0, [pc, #16]	; (800e298 <log+0x70>)
 800e286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e28a:	f000 b9bb 	b.w	800e604 <nan>
 800e28e:	bf00      	nop
 800e290:	20000079 	.word	0x20000079
 800e294:	fff00000 	.word	0xfff00000
 800e298:	08014240 	.word	0x08014240
 800e29c:	00000000 	.word	0x00000000

0800e2a0 <__ieee754_log>:
 800e2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	460d      	mov	r5, r1
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	da24      	bge.n	800e2fc <__ieee754_log+0x5c>
 800e2b2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800e2b6:	4304      	orrs	r4, r0
 800e2b8:	d108      	bne.n	800e2cc <__ieee754_log+0x2c>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	2300      	movs	r3, #0
 800e2be:	2000      	movs	r0, #0
 800e2c0:	49cb      	ldr	r1, [pc, #812]	; (800e5f0 <__ieee754_log+0x350>)
 800e2c2:	f7f2 fa9f 	bl	8000804 <__aeabi_ddiv>
 800e2c6:	b007      	add	sp, #28
 800e2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2cc:	2900      	cmp	r1, #0
 800e2ce:	da04      	bge.n	800e2da <__ieee754_log+0x3a>
 800e2d0:	f7f1 ffb6 	bl	8000240 <__aeabi_dsub>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	e7f3      	b.n	800e2c2 <__ieee754_log+0x22>
 800e2da:	2200      	movs	r2, #0
 800e2dc:	4bc5      	ldr	r3, [pc, #788]	; (800e5f4 <__ieee754_log+0x354>)
 800e2de:	f7f2 f967 	bl	80005b0 <__aeabi_dmul>
 800e2e2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	49c2      	ldr	r1, [pc, #776]	; (800e5f8 <__ieee754_log+0x358>)
 800e2ee:	428d      	cmp	r5, r1
 800e2f0:	dd06      	ble.n	800e300 <__ieee754_log+0x60>
 800e2f2:	4610      	mov	r0, r2
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	f7f1 ffa5 	bl	8000244 <__adddf3>
 800e2fa:	e7e4      	b.n	800e2c6 <__ieee754_log+0x26>
 800e2fc:	2600      	movs	r6, #0
 800e2fe:	e7f5      	b.n	800e2ec <__ieee754_log+0x4c>
 800e300:	152c      	asrs	r4, r5, #20
 800e302:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e306:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800e30a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e30e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800e312:	4426      	add	r6, r4
 800e314:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800e318:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800e31c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800e320:	ea41 0305 	orr.w	r3, r1, r5
 800e324:	4610      	mov	r0, r2
 800e326:	4619      	mov	r1, r3
 800e328:	2200      	movs	r2, #0
 800e32a:	4bb4      	ldr	r3, [pc, #720]	; (800e5fc <__ieee754_log+0x35c>)
 800e32c:	f7f1 ff88 	bl	8000240 <__aeabi_dsub>
 800e330:	1cab      	adds	r3, r5, #2
 800e332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e336:	2b02      	cmp	r3, #2
 800e338:	4682      	mov	sl, r0
 800e33a:	468b      	mov	fp, r1
 800e33c:	f04f 0200 	mov.w	r2, #0
 800e340:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800e344:	dc53      	bgt.n	800e3ee <__ieee754_log+0x14e>
 800e346:	2300      	movs	r3, #0
 800e348:	f7f2 fb9a 	bl	8000a80 <__aeabi_dcmpeq>
 800e34c:	b1d0      	cbz	r0, 800e384 <__ieee754_log+0xe4>
 800e34e:	2c00      	cmp	r4, #0
 800e350:	f000 8122 	beq.w	800e598 <__ieee754_log+0x2f8>
 800e354:	4620      	mov	r0, r4
 800e356:	f7f2 f8c1 	bl	80004dc <__aeabi_i2d>
 800e35a:	a391      	add	r3, pc, #580	; (adr r3, 800e5a0 <__ieee754_log+0x300>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	4606      	mov	r6, r0
 800e362:	460f      	mov	r7, r1
 800e364:	f7f2 f924 	bl	80005b0 <__aeabi_dmul>
 800e368:	a38f      	add	r3, pc, #572	; (adr r3, 800e5a8 <__ieee754_log+0x308>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	4604      	mov	r4, r0
 800e370:	460d      	mov	r5, r1
 800e372:	4630      	mov	r0, r6
 800e374:	4639      	mov	r1, r7
 800e376:	f7f2 f91b 	bl	80005b0 <__aeabi_dmul>
 800e37a:	4602      	mov	r2, r0
 800e37c:	460b      	mov	r3, r1
 800e37e:	4620      	mov	r0, r4
 800e380:	4629      	mov	r1, r5
 800e382:	e7b8      	b.n	800e2f6 <__ieee754_log+0x56>
 800e384:	a38a      	add	r3, pc, #552	; (adr r3, 800e5b0 <__ieee754_log+0x310>)
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	4650      	mov	r0, sl
 800e38c:	4659      	mov	r1, fp
 800e38e:	f7f2 f90f 	bl	80005b0 <__aeabi_dmul>
 800e392:	4602      	mov	r2, r0
 800e394:	460b      	mov	r3, r1
 800e396:	2000      	movs	r0, #0
 800e398:	4999      	ldr	r1, [pc, #612]	; (800e600 <__ieee754_log+0x360>)
 800e39a:	f7f1 ff51 	bl	8000240 <__aeabi_dsub>
 800e39e:	4652      	mov	r2, sl
 800e3a0:	4606      	mov	r6, r0
 800e3a2:	460f      	mov	r7, r1
 800e3a4:	465b      	mov	r3, fp
 800e3a6:	4650      	mov	r0, sl
 800e3a8:	4659      	mov	r1, fp
 800e3aa:	f7f2 f901 	bl	80005b0 <__aeabi_dmul>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	4639      	mov	r1, r7
 800e3b6:	f7f2 f8fb 	bl	80005b0 <__aeabi_dmul>
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	460f      	mov	r7, r1
 800e3be:	b914      	cbnz	r4, 800e3c6 <__ieee754_log+0x126>
 800e3c0:	4632      	mov	r2, r6
 800e3c2:	463b      	mov	r3, r7
 800e3c4:	e0a2      	b.n	800e50c <__ieee754_log+0x26c>
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f7f2 f888 	bl	80004dc <__aeabi_i2d>
 800e3cc:	a374      	add	r3, pc, #464	; (adr r3, 800e5a0 <__ieee754_log+0x300>)
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	4680      	mov	r8, r0
 800e3d4:	4689      	mov	r9, r1
 800e3d6:	f7f2 f8eb 	bl	80005b0 <__aeabi_dmul>
 800e3da:	a373      	add	r3, pc, #460	; (adr r3, 800e5a8 <__ieee754_log+0x308>)
 800e3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	460d      	mov	r5, r1
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	4649      	mov	r1, r9
 800e3e8:	f7f2 f8e2 	bl	80005b0 <__aeabi_dmul>
 800e3ec:	e0a7      	b.n	800e53e <__ieee754_log+0x29e>
 800e3ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e3f2:	f7f1 ff27 	bl	8000244 <__adddf3>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	4650      	mov	r0, sl
 800e3fc:	4659      	mov	r1, fp
 800e3fe:	f7f2 fa01 	bl	8000804 <__aeabi_ddiv>
 800e402:	e9cd 0100 	strd	r0, r1, [sp]
 800e406:	4620      	mov	r0, r4
 800e408:	f7f2 f868 	bl	80004dc <__aeabi_i2d>
 800e40c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e414:	4610      	mov	r0, r2
 800e416:	4619      	mov	r1, r3
 800e418:	f7f2 f8ca 	bl	80005b0 <__aeabi_dmul>
 800e41c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e420:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e424:	4602      	mov	r2, r0
 800e426:	9305      	str	r3, [sp, #20]
 800e428:	460b      	mov	r3, r1
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	f7f2 f8bf 	bl	80005b0 <__aeabi_dmul>
 800e432:	a361      	add	r3, pc, #388	; (adr r3, 800e5b8 <__ieee754_log+0x318>)
 800e434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e438:	4680      	mov	r8, r0
 800e43a:	4689      	mov	r9, r1
 800e43c:	f7f2 f8b8 	bl	80005b0 <__aeabi_dmul>
 800e440:	a35f      	add	r3, pc, #380	; (adr r3, 800e5c0 <__ieee754_log+0x320>)
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	f7f1 fefd 	bl	8000244 <__adddf3>
 800e44a:	4642      	mov	r2, r8
 800e44c:	464b      	mov	r3, r9
 800e44e:	f7f2 f8af 	bl	80005b0 <__aeabi_dmul>
 800e452:	a35d      	add	r3, pc, #372	; (adr r3, 800e5c8 <__ieee754_log+0x328>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	f7f1 fef4 	bl	8000244 <__adddf3>
 800e45c:	4642      	mov	r2, r8
 800e45e:	464b      	mov	r3, r9
 800e460:	f7f2 f8a6 	bl	80005b0 <__aeabi_dmul>
 800e464:	a35a      	add	r3, pc, #360	; (adr r3, 800e5d0 <__ieee754_log+0x330>)
 800e466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46a:	f7f1 feeb 	bl	8000244 <__adddf3>
 800e46e:	4632      	mov	r2, r6
 800e470:	463b      	mov	r3, r7
 800e472:	f7f2 f89d 	bl	80005b0 <__aeabi_dmul>
 800e476:	a358      	add	r3, pc, #352	; (adr r3, 800e5d8 <__ieee754_log+0x338>)
 800e478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47c:	4606      	mov	r6, r0
 800e47e:	460f      	mov	r7, r1
 800e480:	4640      	mov	r0, r8
 800e482:	4649      	mov	r1, r9
 800e484:	f7f2 f894 	bl	80005b0 <__aeabi_dmul>
 800e488:	a355      	add	r3, pc, #340	; (adr r3, 800e5e0 <__ieee754_log+0x340>)
 800e48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48e:	f7f1 fed9 	bl	8000244 <__adddf3>
 800e492:	4642      	mov	r2, r8
 800e494:	464b      	mov	r3, r9
 800e496:	f7f2 f88b 	bl	80005b0 <__aeabi_dmul>
 800e49a:	a353      	add	r3, pc, #332	; (adr r3, 800e5e8 <__ieee754_log+0x348>)
 800e49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a0:	f7f1 fed0 	bl	8000244 <__adddf3>
 800e4a4:	4642      	mov	r2, r8
 800e4a6:	464b      	mov	r3, r9
 800e4a8:	f7f2 f882 	bl	80005b0 <__aeabi_dmul>
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f7f1 fec6 	bl	8000244 <__adddf3>
 800e4b8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e4bc:	9b05      	ldr	r3, [sp, #20]
 800e4be:	3551      	adds	r5, #81	; 0x51
 800e4c0:	431d      	orrs	r5, r3
 800e4c2:	2d00      	cmp	r5, #0
 800e4c4:	4680      	mov	r8, r0
 800e4c6:	4689      	mov	r9, r1
 800e4c8:	dd48      	ble.n	800e55c <__ieee754_log+0x2bc>
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	4b4c      	ldr	r3, [pc, #304]	; (800e600 <__ieee754_log+0x360>)
 800e4ce:	4650      	mov	r0, sl
 800e4d0:	4659      	mov	r1, fp
 800e4d2:	f7f2 f86d 	bl	80005b0 <__aeabi_dmul>
 800e4d6:	4652      	mov	r2, sl
 800e4d8:	465b      	mov	r3, fp
 800e4da:	f7f2 f869 	bl	80005b0 <__aeabi_dmul>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460f      	mov	r7, r1
 800e4e6:	4640      	mov	r0, r8
 800e4e8:	4649      	mov	r1, r9
 800e4ea:	f7f1 feab 	bl	8000244 <__adddf3>
 800e4ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4f2:	f7f2 f85d 	bl	80005b0 <__aeabi_dmul>
 800e4f6:	4680      	mov	r8, r0
 800e4f8:	4689      	mov	r9, r1
 800e4fa:	b964      	cbnz	r4, 800e516 <__ieee754_log+0x276>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	4630      	mov	r0, r6
 800e502:	4639      	mov	r1, r7
 800e504:	f7f1 fe9c 	bl	8000240 <__aeabi_dsub>
 800e508:	4602      	mov	r2, r0
 800e50a:	460b      	mov	r3, r1
 800e50c:	4650      	mov	r0, sl
 800e50e:	4659      	mov	r1, fp
 800e510:	f7f1 fe96 	bl	8000240 <__aeabi_dsub>
 800e514:	e6d7      	b.n	800e2c6 <__ieee754_log+0x26>
 800e516:	a322      	add	r3, pc, #136	; (adr r3, 800e5a0 <__ieee754_log+0x300>)
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e520:	f7f2 f846 	bl	80005b0 <__aeabi_dmul>
 800e524:	a320      	add	r3, pc, #128	; (adr r3, 800e5a8 <__ieee754_log+0x308>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	4604      	mov	r4, r0
 800e52c:	460d      	mov	r5, r1
 800e52e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e532:	f7f2 f83d 	bl	80005b0 <__aeabi_dmul>
 800e536:	4642      	mov	r2, r8
 800e538:	464b      	mov	r3, r9
 800e53a:	f7f1 fe83 	bl	8000244 <__adddf3>
 800e53e:	4602      	mov	r2, r0
 800e540:	460b      	mov	r3, r1
 800e542:	4630      	mov	r0, r6
 800e544:	4639      	mov	r1, r7
 800e546:	f7f1 fe7b 	bl	8000240 <__aeabi_dsub>
 800e54a:	4652      	mov	r2, sl
 800e54c:	465b      	mov	r3, fp
 800e54e:	f7f1 fe77 	bl	8000240 <__aeabi_dsub>
 800e552:	4602      	mov	r2, r0
 800e554:	460b      	mov	r3, r1
 800e556:	4620      	mov	r0, r4
 800e558:	4629      	mov	r1, r5
 800e55a:	e7d9      	b.n	800e510 <__ieee754_log+0x270>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	4650      	mov	r0, sl
 800e562:	4659      	mov	r1, fp
 800e564:	f7f1 fe6c 	bl	8000240 <__aeabi_dsub>
 800e568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e56c:	f7f2 f820 	bl	80005b0 <__aeabi_dmul>
 800e570:	4606      	mov	r6, r0
 800e572:	460f      	mov	r7, r1
 800e574:	2c00      	cmp	r4, #0
 800e576:	f43f af23 	beq.w	800e3c0 <__ieee754_log+0x120>
 800e57a:	a309      	add	r3, pc, #36	; (adr r3, 800e5a0 <__ieee754_log+0x300>)
 800e57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e580:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e584:	f7f2 f814 	bl	80005b0 <__aeabi_dmul>
 800e588:	a307      	add	r3, pc, #28	; (adr r3, 800e5a8 <__ieee754_log+0x308>)
 800e58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58e:	4604      	mov	r4, r0
 800e590:	460d      	mov	r5, r1
 800e592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e596:	e727      	b.n	800e3e8 <__ieee754_log+0x148>
 800e598:	2000      	movs	r0, #0
 800e59a:	2100      	movs	r1, #0
 800e59c:	e693      	b.n	800e2c6 <__ieee754_log+0x26>
 800e59e:	bf00      	nop
 800e5a0:	fee00000 	.word	0xfee00000
 800e5a4:	3fe62e42 	.word	0x3fe62e42
 800e5a8:	35793c76 	.word	0x35793c76
 800e5ac:	3dea39ef 	.word	0x3dea39ef
 800e5b0:	55555555 	.word	0x55555555
 800e5b4:	3fd55555 	.word	0x3fd55555
 800e5b8:	df3e5244 	.word	0xdf3e5244
 800e5bc:	3fc2f112 	.word	0x3fc2f112
 800e5c0:	96cb03de 	.word	0x96cb03de
 800e5c4:	3fc74664 	.word	0x3fc74664
 800e5c8:	94229359 	.word	0x94229359
 800e5cc:	3fd24924 	.word	0x3fd24924
 800e5d0:	55555593 	.word	0x55555593
 800e5d4:	3fe55555 	.word	0x3fe55555
 800e5d8:	d078c69f 	.word	0xd078c69f
 800e5dc:	3fc39a09 	.word	0x3fc39a09
 800e5e0:	1d8e78af 	.word	0x1d8e78af
 800e5e4:	3fcc71c5 	.word	0x3fcc71c5
 800e5e8:	9997fa04 	.word	0x9997fa04
 800e5ec:	3fd99999 	.word	0x3fd99999
 800e5f0:	c3500000 	.word	0xc3500000
 800e5f4:	43500000 	.word	0x43500000
 800e5f8:	7fefffff 	.word	0x7fefffff
 800e5fc:	3ff00000 	.word	0x3ff00000
 800e600:	3fe00000 	.word	0x3fe00000

0800e604 <nan>:
 800e604:	2000      	movs	r0, #0
 800e606:	4901      	ldr	r1, [pc, #4]	; (800e60c <nan+0x8>)
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	7ff80000 	.word	0x7ff80000

0800e610 <__errno>:
 800e610:	4b01      	ldr	r3, [pc, #4]	; (800e618 <__errno+0x8>)
 800e612:	6818      	ldr	r0, [r3, #0]
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	2000007c 	.word	0x2000007c

0800e61c <__libc_init_array>:
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	2600      	movs	r6, #0
 800e620:	4d0c      	ldr	r5, [pc, #48]	; (800e654 <__libc_init_array+0x38>)
 800e622:	4c0d      	ldr	r4, [pc, #52]	; (800e658 <__libc_init_array+0x3c>)
 800e624:	1b64      	subs	r4, r4, r5
 800e626:	10a4      	asrs	r4, r4, #2
 800e628:	42a6      	cmp	r6, r4
 800e62a:	d109      	bne.n	800e640 <__libc_init_array+0x24>
 800e62c:	f004 fcf6 	bl	801301c <_init>
 800e630:	2600      	movs	r6, #0
 800e632:	4d0a      	ldr	r5, [pc, #40]	; (800e65c <__libc_init_array+0x40>)
 800e634:	4c0a      	ldr	r4, [pc, #40]	; (800e660 <__libc_init_array+0x44>)
 800e636:	1b64      	subs	r4, r4, r5
 800e638:	10a4      	asrs	r4, r4, #2
 800e63a:	42a6      	cmp	r6, r4
 800e63c:	d105      	bne.n	800e64a <__libc_init_array+0x2e>
 800e63e:	bd70      	pop	{r4, r5, r6, pc}
 800e640:	f855 3b04 	ldr.w	r3, [r5], #4
 800e644:	4798      	blx	r3
 800e646:	3601      	adds	r6, #1
 800e648:	e7ee      	b.n	800e628 <__libc_init_array+0xc>
 800e64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e64e:	4798      	blx	r3
 800e650:	3601      	adds	r6, #1
 800e652:	e7f2      	b.n	800e63a <__libc_init_array+0x1e>
 800e654:	08014244 	.word	0x08014244
 800e658:	08014244 	.word	0x08014244
 800e65c:	08014244 	.word	0x08014244
 800e660:	08014248 	.word	0x08014248

0800e664 <__itoa>:
 800e664:	1e93      	subs	r3, r2, #2
 800e666:	2b22      	cmp	r3, #34	; 0x22
 800e668:	b510      	push	{r4, lr}
 800e66a:	460c      	mov	r4, r1
 800e66c:	d904      	bls.n	800e678 <__itoa+0x14>
 800e66e:	2300      	movs	r3, #0
 800e670:	461c      	mov	r4, r3
 800e672:	700b      	strb	r3, [r1, #0]
 800e674:	4620      	mov	r0, r4
 800e676:	bd10      	pop	{r4, pc}
 800e678:	2a0a      	cmp	r2, #10
 800e67a:	d109      	bne.n	800e690 <__itoa+0x2c>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	da07      	bge.n	800e690 <__itoa+0x2c>
 800e680:	232d      	movs	r3, #45	; 0x2d
 800e682:	700b      	strb	r3, [r1, #0]
 800e684:	2101      	movs	r1, #1
 800e686:	4240      	negs	r0, r0
 800e688:	4421      	add	r1, r4
 800e68a:	f001 fdcb 	bl	8010224 <__utoa>
 800e68e:	e7f1      	b.n	800e674 <__itoa+0x10>
 800e690:	2100      	movs	r1, #0
 800e692:	e7f9      	b.n	800e688 <__itoa+0x24>

0800e694 <itoa>:
 800e694:	f7ff bfe6 	b.w	800e664 <__itoa>

0800e698 <memcpy>:
 800e698:	440a      	add	r2, r1
 800e69a:	4291      	cmp	r1, r2
 800e69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6a0:	d100      	bne.n	800e6a4 <memcpy+0xc>
 800e6a2:	4770      	bx	lr
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6aa:	4291      	cmp	r1, r2
 800e6ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6b0:	d1f9      	bne.n	800e6a6 <memcpy+0xe>
 800e6b2:	bd10      	pop	{r4, pc}

0800e6b4 <memset>:
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	4402      	add	r2, r0
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d100      	bne.n	800e6be <memset+0xa>
 800e6bc:	4770      	bx	lr
 800e6be:	f803 1b01 	strb.w	r1, [r3], #1
 800e6c2:	e7f9      	b.n	800e6b8 <memset+0x4>

0800e6c4 <__cvt>:
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ca:	461f      	mov	r7, r3
 800e6cc:	bfbb      	ittet	lt
 800e6ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e6d2:	461f      	movlt	r7, r3
 800e6d4:	2300      	movge	r3, #0
 800e6d6:	232d      	movlt	r3, #45	; 0x2d
 800e6d8:	b088      	sub	sp, #32
 800e6da:	4614      	mov	r4, r2
 800e6dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e6e0:	7013      	strb	r3, [r2, #0]
 800e6e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800e6e8:	f023 0820 	bic.w	r8, r3, #32
 800e6ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e6f0:	d005      	beq.n	800e6fe <__cvt+0x3a>
 800e6f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e6f6:	d100      	bne.n	800e6fa <__cvt+0x36>
 800e6f8:	3501      	adds	r5, #1
 800e6fa:	2302      	movs	r3, #2
 800e6fc:	e000      	b.n	800e700 <__cvt+0x3c>
 800e6fe:	2303      	movs	r3, #3
 800e700:	aa07      	add	r2, sp, #28
 800e702:	9204      	str	r2, [sp, #16]
 800e704:	aa06      	add	r2, sp, #24
 800e706:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e70a:	e9cd 3500 	strd	r3, r5, [sp]
 800e70e:	4622      	mov	r2, r4
 800e710:	463b      	mov	r3, r7
 800e712:	f001 ff19 	bl	8010548 <_dtoa_r>
 800e716:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e71a:	4606      	mov	r6, r0
 800e71c:	d102      	bne.n	800e724 <__cvt+0x60>
 800e71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e720:	07db      	lsls	r3, r3, #31
 800e722:	d522      	bpl.n	800e76a <__cvt+0xa6>
 800e724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e728:	eb06 0905 	add.w	r9, r6, r5
 800e72c:	d110      	bne.n	800e750 <__cvt+0x8c>
 800e72e:	7833      	ldrb	r3, [r6, #0]
 800e730:	2b30      	cmp	r3, #48	; 0x30
 800e732:	d10a      	bne.n	800e74a <__cvt+0x86>
 800e734:	2200      	movs	r2, #0
 800e736:	2300      	movs	r3, #0
 800e738:	4620      	mov	r0, r4
 800e73a:	4639      	mov	r1, r7
 800e73c:	f7f2 f9a0 	bl	8000a80 <__aeabi_dcmpeq>
 800e740:	b918      	cbnz	r0, 800e74a <__cvt+0x86>
 800e742:	f1c5 0501 	rsb	r5, r5, #1
 800e746:	f8ca 5000 	str.w	r5, [sl]
 800e74a:	f8da 3000 	ldr.w	r3, [sl]
 800e74e:	4499      	add	r9, r3
 800e750:	2200      	movs	r2, #0
 800e752:	2300      	movs	r3, #0
 800e754:	4620      	mov	r0, r4
 800e756:	4639      	mov	r1, r7
 800e758:	f7f2 f992 	bl	8000a80 <__aeabi_dcmpeq>
 800e75c:	b108      	cbz	r0, 800e762 <__cvt+0x9e>
 800e75e:	f8cd 901c 	str.w	r9, [sp, #28]
 800e762:	2230      	movs	r2, #48	; 0x30
 800e764:	9b07      	ldr	r3, [sp, #28]
 800e766:	454b      	cmp	r3, r9
 800e768:	d307      	bcc.n	800e77a <__cvt+0xb6>
 800e76a:	4630      	mov	r0, r6
 800e76c:	9b07      	ldr	r3, [sp, #28]
 800e76e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e770:	1b9b      	subs	r3, r3, r6
 800e772:	6013      	str	r3, [r2, #0]
 800e774:	b008      	add	sp, #32
 800e776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e77a:	1c59      	adds	r1, r3, #1
 800e77c:	9107      	str	r1, [sp, #28]
 800e77e:	701a      	strb	r2, [r3, #0]
 800e780:	e7f0      	b.n	800e764 <__cvt+0xa0>

0800e782 <__exponent>:
 800e782:	4603      	mov	r3, r0
 800e784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e786:	2900      	cmp	r1, #0
 800e788:	f803 2b02 	strb.w	r2, [r3], #2
 800e78c:	bfb6      	itet	lt
 800e78e:	222d      	movlt	r2, #45	; 0x2d
 800e790:	222b      	movge	r2, #43	; 0x2b
 800e792:	4249      	neglt	r1, r1
 800e794:	2909      	cmp	r1, #9
 800e796:	7042      	strb	r2, [r0, #1]
 800e798:	dd2b      	ble.n	800e7f2 <__exponent+0x70>
 800e79a:	f10d 0407 	add.w	r4, sp, #7
 800e79e:	46a4      	mov	ip, r4
 800e7a0:	270a      	movs	r7, #10
 800e7a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7a6:	460a      	mov	r2, r1
 800e7a8:	46a6      	mov	lr, r4
 800e7aa:	fb07 1516 	mls	r5, r7, r6, r1
 800e7ae:	2a63      	cmp	r2, #99	; 0x63
 800e7b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e7ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e7be:	dcf0      	bgt.n	800e7a2 <__exponent+0x20>
 800e7c0:	3130      	adds	r1, #48	; 0x30
 800e7c2:	f1ae 0502 	sub.w	r5, lr, #2
 800e7c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	1c44      	adds	r4, r0, #1
 800e7ce:	4561      	cmp	r1, ip
 800e7d0:	d30a      	bcc.n	800e7e8 <__exponent+0x66>
 800e7d2:	f10d 0209 	add.w	r2, sp, #9
 800e7d6:	eba2 020e 	sub.w	r2, r2, lr
 800e7da:	4565      	cmp	r5, ip
 800e7dc:	bf88      	it	hi
 800e7de:	2200      	movhi	r2, #0
 800e7e0:	4413      	add	r3, r2
 800e7e2:	1a18      	subs	r0, r3, r0
 800e7e4:	b003      	add	sp, #12
 800e7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e7f0:	e7ed      	b.n	800e7ce <__exponent+0x4c>
 800e7f2:	2330      	movs	r3, #48	; 0x30
 800e7f4:	3130      	adds	r1, #48	; 0x30
 800e7f6:	7083      	strb	r3, [r0, #2]
 800e7f8:	70c1      	strb	r1, [r0, #3]
 800e7fa:	1d03      	adds	r3, r0, #4
 800e7fc:	e7f1      	b.n	800e7e2 <__exponent+0x60>
	...

0800e800 <_printf_float>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	b091      	sub	sp, #68	; 0x44
 800e806:	460c      	mov	r4, r1
 800e808:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800e80c:	4616      	mov	r6, r2
 800e80e:	461f      	mov	r7, r3
 800e810:	4605      	mov	r5, r0
 800e812:	f003 f9a5 	bl	8011b60 <_localeconv_r>
 800e816:	6803      	ldr	r3, [r0, #0]
 800e818:	4618      	mov	r0, r3
 800e81a:	9309      	str	r3, [sp, #36]	; 0x24
 800e81c:	f7f1 fd04 	bl	8000228 <strlen>
 800e820:	2300      	movs	r3, #0
 800e822:	930e      	str	r3, [sp, #56]	; 0x38
 800e824:	f8d8 3000 	ldr.w	r3, [r8]
 800e828:	900a      	str	r0, [sp, #40]	; 0x28
 800e82a:	3307      	adds	r3, #7
 800e82c:	f023 0307 	bic.w	r3, r3, #7
 800e830:	f103 0208 	add.w	r2, r3, #8
 800e834:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e838:	f8d4 b000 	ldr.w	fp, [r4]
 800e83c:	f8c8 2000 	str.w	r2, [r8]
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e848:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800e84c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800e850:	930b      	str	r3, [sp, #44]	; 0x2c
 800e852:	f04f 32ff 	mov.w	r2, #4294967295
 800e856:	4640      	mov	r0, r8
 800e858:	4b9c      	ldr	r3, [pc, #624]	; (800eacc <_printf_float+0x2cc>)
 800e85a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e85c:	f7f2 f942 	bl	8000ae4 <__aeabi_dcmpun>
 800e860:	bb70      	cbnz	r0, 800e8c0 <_printf_float+0xc0>
 800e862:	f04f 32ff 	mov.w	r2, #4294967295
 800e866:	4640      	mov	r0, r8
 800e868:	4b98      	ldr	r3, [pc, #608]	; (800eacc <_printf_float+0x2cc>)
 800e86a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e86c:	f7f2 f91c 	bl	8000aa8 <__aeabi_dcmple>
 800e870:	bb30      	cbnz	r0, 800e8c0 <_printf_float+0xc0>
 800e872:	2200      	movs	r2, #0
 800e874:	2300      	movs	r3, #0
 800e876:	4640      	mov	r0, r8
 800e878:	4651      	mov	r1, sl
 800e87a:	f7f2 f90b 	bl	8000a94 <__aeabi_dcmplt>
 800e87e:	b110      	cbz	r0, 800e886 <_printf_float+0x86>
 800e880:	232d      	movs	r3, #45	; 0x2d
 800e882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e886:	4b92      	ldr	r3, [pc, #584]	; (800ead0 <_printf_float+0x2d0>)
 800e888:	4892      	ldr	r0, [pc, #584]	; (800ead4 <_printf_float+0x2d4>)
 800e88a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e88e:	bf94      	ite	ls
 800e890:	4698      	movls	r8, r3
 800e892:	4680      	movhi	r8, r0
 800e894:	2303      	movs	r3, #3
 800e896:	f04f 0a00 	mov.w	sl, #0
 800e89a:	6123      	str	r3, [r4, #16]
 800e89c:	f02b 0304 	bic.w	r3, fp, #4
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	4633      	mov	r3, r6
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4628      	mov	r0, r5
 800e8a8:	9700      	str	r7, [sp, #0]
 800e8aa:	aa0f      	add	r2, sp, #60	; 0x3c
 800e8ac:	f000 f9d4 	bl	800ec58 <_printf_common>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	f040 8090 	bne.w	800e9d6 <_printf_float+0x1d6>
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ba:	b011      	add	sp, #68	; 0x44
 800e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c0:	4642      	mov	r2, r8
 800e8c2:	4653      	mov	r3, sl
 800e8c4:	4640      	mov	r0, r8
 800e8c6:	4651      	mov	r1, sl
 800e8c8:	f7f2 f90c 	bl	8000ae4 <__aeabi_dcmpun>
 800e8cc:	b148      	cbz	r0, 800e8e2 <_printf_float+0xe2>
 800e8ce:	f1ba 0f00 	cmp.w	sl, #0
 800e8d2:	bfb8      	it	lt
 800e8d4:	232d      	movlt	r3, #45	; 0x2d
 800e8d6:	4880      	ldr	r0, [pc, #512]	; (800ead8 <_printf_float+0x2d8>)
 800e8d8:	bfb8      	it	lt
 800e8da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e8de:	4b7f      	ldr	r3, [pc, #508]	; (800eadc <_printf_float+0x2dc>)
 800e8e0:	e7d3      	b.n	800e88a <_printf_float+0x8a>
 800e8e2:	6863      	ldr	r3, [r4, #4]
 800e8e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e8e8:	1c5a      	adds	r2, r3, #1
 800e8ea:	d142      	bne.n	800e972 <_printf_float+0x172>
 800e8ec:	2306      	movs	r3, #6
 800e8ee:	6063      	str	r3, [r4, #4]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	9206      	str	r2, [sp, #24]
 800e8f4:	aa0e      	add	r2, sp, #56	; 0x38
 800e8f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800e8fa:	aa0d      	add	r2, sp, #52	; 0x34
 800e8fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800e900:	9203      	str	r2, [sp, #12]
 800e902:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800e906:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e90a:	6023      	str	r3, [r4, #0]
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	4642      	mov	r2, r8
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	4628      	mov	r0, r5
 800e914:	4653      	mov	r3, sl
 800e916:	910b      	str	r1, [sp, #44]	; 0x2c
 800e918:	f7ff fed4 	bl	800e6c4 <__cvt>
 800e91c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e91e:	4680      	mov	r8, r0
 800e920:	2947      	cmp	r1, #71	; 0x47
 800e922:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e924:	d108      	bne.n	800e938 <_printf_float+0x138>
 800e926:	1cc8      	adds	r0, r1, #3
 800e928:	db02      	blt.n	800e930 <_printf_float+0x130>
 800e92a:	6863      	ldr	r3, [r4, #4]
 800e92c:	4299      	cmp	r1, r3
 800e92e:	dd40      	ble.n	800e9b2 <_printf_float+0x1b2>
 800e930:	f1a9 0902 	sub.w	r9, r9, #2
 800e934:	fa5f f989 	uxtb.w	r9, r9
 800e938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e93c:	d81f      	bhi.n	800e97e <_printf_float+0x17e>
 800e93e:	464a      	mov	r2, r9
 800e940:	3901      	subs	r1, #1
 800e942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e946:	910d      	str	r1, [sp, #52]	; 0x34
 800e948:	f7ff ff1b 	bl	800e782 <__exponent>
 800e94c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e94e:	4682      	mov	sl, r0
 800e950:	1813      	adds	r3, r2, r0
 800e952:	2a01      	cmp	r2, #1
 800e954:	6123      	str	r3, [r4, #16]
 800e956:	dc02      	bgt.n	800e95e <_printf_float+0x15e>
 800e958:	6822      	ldr	r2, [r4, #0]
 800e95a:	07d2      	lsls	r2, r2, #31
 800e95c:	d501      	bpl.n	800e962 <_printf_float+0x162>
 800e95e:	3301      	adds	r3, #1
 800e960:	6123      	str	r3, [r4, #16]
 800e962:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e966:	2b00      	cmp	r3, #0
 800e968:	d09b      	beq.n	800e8a2 <_printf_float+0xa2>
 800e96a:	232d      	movs	r3, #45	; 0x2d
 800e96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e970:	e797      	b.n	800e8a2 <_printf_float+0xa2>
 800e972:	2947      	cmp	r1, #71	; 0x47
 800e974:	d1bc      	bne.n	800e8f0 <_printf_float+0xf0>
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1ba      	bne.n	800e8f0 <_printf_float+0xf0>
 800e97a:	2301      	movs	r3, #1
 800e97c:	e7b7      	b.n	800e8ee <_printf_float+0xee>
 800e97e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e982:	d118      	bne.n	800e9b6 <_printf_float+0x1b6>
 800e984:	2900      	cmp	r1, #0
 800e986:	6863      	ldr	r3, [r4, #4]
 800e988:	dd0b      	ble.n	800e9a2 <_printf_float+0x1a2>
 800e98a:	6121      	str	r1, [r4, #16]
 800e98c:	b913      	cbnz	r3, 800e994 <_printf_float+0x194>
 800e98e:	6822      	ldr	r2, [r4, #0]
 800e990:	07d0      	lsls	r0, r2, #31
 800e992:	d502      	bpl.n	800e99a <_printf_float+0x19a>
 800e994:	3301      	adds	r3, #1
 800e996:	440b      	add	r3, r1
 800e998:	6123      	str	r3, [r4, #16]
 800e99a:	f04f 0a00 	mov.w	sl, #0
 800e99e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9a0:	e7df      	b.n	800e962 <_printf_float+0x162>
 800e9a2:	b913      	cbnz	r3, 800e9aa <_printf_float+0x1aa>
 800e9a4:	6822      	ldr	r2, [r4, #0]
 800e9a6:	07d2      	lsls	r2, r2, #31
 800e9a8:	d501      	bpl.n	800e9ae <_printf_float+0x1ae>
 800e9aa:	3302      	adds	r3, #2
 800e9ac:	e7f4      	b.n	800e998 <_printf_float+0x198>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e7f2      	b.n	800e998 <_printf_float+0x198>
 800e9b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e9b8:	4299      	cmp	r1, r3
 800e9ba:	db05      	blt.n	800e9c8 <_printf_float+0x1c8>
 800e9bc:	6823      	ldr	r3, [r4, #0]
 800e9be:	6121      	str	r1, [r4, #16]
 800e9c0:	07d8      	lsls	r0, r3, #31
 800e9c2:	d5ea      	bpl.n	800e99a <_printf_float+0x19a>
 800e9c4:	1c4b      	adds	r3, r1, #1
 800e9c6:	e7e7      	b.n	800e998 <_printf_float+0x198>
 800e9c8:	2900      	cmp	r1, #0
 800e9ca:	bfcc      	ite	gt
 800e9cc:	2201      	movgt	r2, #1
 800e9ce:	f1c1 0202 	rsble	r2, r1, #2
 800e9d2:	4413      	add	r3, r2
 800e9d4:	e7e0      	b.n	800e998 <_printf_float+0x198>
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	055a      	lsls	r2, r3, #21
 800e9da:	d407      	bmi.n	800e9ec <_printf_float+0x1ec>
 800e9dc:	6923      	ldr	r3, [r4, #16]
 800e9de:	4642      	mov	r2, r8
 800e9e0:	4631      	mov	r1, r6
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	47b8      	blx	r7
 800e9e6:	3001      	adds	r0, #1
 800e9e8:	d12b      	bne.n	800ea42 <_printf_float+0x242>
 800e9ea:	e764      	b.n	800e8b6 <_printf_float+0xb6>
 800e9ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e9f0:	f240 80dd 	bls.w	800ebae <_printf_float+0x3ae>
 800e9f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f7f2 f840 	bl	8000a80 <__aeabi_dcmpeq>
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d033      	beq.n	800ea6c <_printf_float+0x26c>
 800ea04:	2301      	movs	r3, #1
 800ea06:	4631      	mov	r1, r6
 800ea08:	4628      	mov	r0, r5
 800ea0a:	4a35      	ldr	r2, [pc, #212]	; (800eae0 <_printf_float+0x2e0>)
 800ea0c:	47b8      	blx	r7
 800ea0e:	3001      	adds	r0, #1
 800ea10:	f43f af51 	beq.w	800e8b6 <_printf_float+0xb6>
 800ea14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	db02      	blt.n	800ea22 <_printf_float+0x222>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	07d8      	lsls	r0, r3, #31
 800ea20:	d50f      	bpl.n	800ea42 <_printf_float+0x242>
 800ea22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea26:	4631      	mov	r1, r6
 800ea28:	4628      	mov	r0, r5
 800ea2a:	47b8      	blx	r7
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	f43f af42 	beq.w	800e8b6 <_printf_float+0xb6>
 800ea32:	f04f 0800 	mov.w	r8, #0
 800ea36:	f104 091a 	add.w	r9, r4, #26
 800ea3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea3c:	3b01      	subs	r3, #1
 800ea3e:	4543      	cmp	r3, r8
 800ea40:	dc09      	bgt.n	800ea56 <_printf_float+0x256>
 800ea42:	6823      	ldr	r3, [r4, #0]
 800ea44:	079b      	lsls	r3, r3, #30
 800ea46:	f100 8102 	bmi.w	800ec4e <_printf_float+0x44e>
 800ea4a:	68e0      	ldr	r0, [r4, #12]
 800ea4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea4e:	4298      	cmp	r0, r3
 800ea50:	bfb8      	it	lt
 800ea52:	4618      	movlt	r0, r3
 800ea54:	e731      	b.n	800e8ba <_printf_float+0xba>
 800ea56:	2301      	movs	r3, #1
 800ea58:	464a      	mov	r2, r9
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b8      	blx	r7
 800ea60:	3001      	adds	r0, #1
 800ea62:	f43f af28 	beq.w	800e8b6 <_printf_float+0xb6>
 800ea66:	f108 0801 	add.w	r8, r8, #1
 800ea6a:	e7e6      	b.n	800ea3a <_printf_float+0x23a>
 800ea6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	dc38      	bgt.n	800eae4 <_printf_float+0x2e4>
 800ea72:	2301      	movs	r3, #1
 800ea74:	4631      	mov	r1, r6
 800ea76:	4628      	mov	r0, r5
 800ea78:	4a19      	ldr	r2, [pc, #100]	; (800eae0 <_printf_float+0x2e0>)
 800ea7a:	47b8      	blx	r7
 800ea7c:	3001      	adds	r0, #1
 800ea7e:	f43f af1a 	beq.w	800e8b6 <_printf_float+0xb6>
 800ea82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ea86:	4313      	orrs	r3, r2
 800ea88:	d102      	bne.n	800ea90 <_printf_float+0x290>
 800ea8a:	6823      	ldr	r3, [r4, #0]
 800ea8c:	07d9      	lsls	r1, r3, #31
 800ea8e:	d5d8      	bpl.n	800ea42 <_printf_float+0x242>
 800ea90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea94:	4631      	mov	r1, r6
 800ea96:	4628      	mov	r0, r5
 800ea98:	47b8      	blx	r7
 800ea9a:	3001      	adds	r0, #1
 800ea9c:	f43f af0b 	beq.w	800e8b6 <_printf_float+0xb6>
 800eaa0:	f04f 0900 	mov.w	r9, #0
 800eaa4:	f104 0a1a 	add.w	sl, r4, #26
 800eaa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eaaa:	425b      	negs	r3, r3
 800eaac:	454b      	cmp	r3, r9
 800eaae:	dc01      	bgt.n	800eab4 <_printf_float+0x2b4>
 800eab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eab2:	e794      	b.n	800e9de <_printf_float+0x1de>
 800eab4:	2301      	movs	r3, #1
 800eab6:	4652      	mov	r2, sl
 800eab8:	4631      	mov	r1, r6
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b8      	blx	r7
 800eabe:	3001      	adds	r0, #1
 800eac0:	f43f aef9 	beq.w	800e8b6 <_printf_float+0xb6>
 800eac4:	f109 0901 	add.w	r9, r9, #1
 800eac8:	e7ee      	b.n	800eaa8 <_printf_float+0x2a8>
 800eaca:	bf00      	nop
 800eacc:	7fefffff 	.word	0x7fefffff
 800ead0:	08013e68 	.word	0x08013e68
 800ead4:	08013e6c 	.word	0x08013e6c
 800ead8:	08013e74 	.word	0x08013e74
 800eadc:	08013e70 	.word	0x08013e70
 800eae0:	08013e78 	.word	0x08013e78
 800eae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eae8:	429a      	cmp	r2, r3
 800eaea:	bfa8      	it	ge
 800eaec:	461a      	movge	r2, r3
 800eaee:	2a00      	cmp	r2, #0
 800eaf0:	4691      	mov	r9, r2
 800eaf2:	dc37      	bgt.n	800eb64 <_printf_float+0x364>
 800eaf4:	f04f 0b00 	mov.w	fp, #0
 800eaf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eafc:	f104 021a 	add.w	r2, r4, #26
 800eb00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800eb04:	ebaa 0309 	sub.w	r3, sl, r9
 800eb08:	455b      	cmp	r3, fp
 800eb0a:	dc33      	bgt.n	800eb74 <_printf_float+0x374>
 800eb0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eb10:	429a      	cmp	r2, r3
 800eb12:	db3b      	blt.n	800eb8c <_printf_float+0x38c>
 800eb14:	6823      	ldr	r3, [r4, #0]
 800eb16:	07da      	lsls	r2, r3, #31
 800eb18:	d438      	bmi.n	800eb8c <_printf_float+0x38c>
 800eb1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800eb1e:	eba2 030a 	sub.w	r3, r2, sl
 800eb22:	eba2 0901 	sub.w	r9, r2, r1
 800eb26:	4599      	cmp	r9, r3
 800eb28:	bfa8      	it	ge
 800eb2a:	4699      	movge	r9, r3
 800eb2c:	f1b9 0f00 	cmp.w	r9, #0
 800eb30:	dc34      	bgt.n	800eb9c <_printf_float+0x39c>
 800eb32:	f04f 0800 	mov.w	r8, #0
 800eb36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb3a:	f104 0a1a 	add.w	sl, r4, #26
 800eb3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800eb42:	1a9b      	subs	r3, r3, r2
 800eb44:	eba3 0309 	sub.w	r3, r3, r9
 800eb48:	4543      	cmp	r3, r8
 800eb4a:	f77f af7a 	ble.w	800ea42 <_printf_float+0x242>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	4652      	mov	r2, sl
 800eb52:	4631      	mov	r1, r6
 800eb54:	4628      	mov	r0, r5
 800eb56:	47b8      	blx	r7
 800eb58:	3001      	adds	r0, #1
 800eb5a:	f43f aeac 	beq.w	800e8b6 <_printf_float+0xb6>
 800eb5e:	f108 0801 	add.w	r8, r8, #1
 800eb62:	e7ec      	b.n	800eb3e <_printf_float+0x33e>
 800eb64:	4613      	mov	r3, r2
 800eb66:	4631      	mov	r1, r6
 800eb68:	4642      	mov	r2, r8
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	47b8      	blx	r7
 800eb6e:	3001      	adds	r0, #1
 800eb70:	d1c0      	bne.n	800eaf4 <_printf_float+0x2f4>
 800eb72:	e6a0      	b.n	800e8b6 <_printf_float+0xb6>
 800eb74:	2301      	movs	r3, #1
 800eb76:	4631      	mov	r1, r6
 800eb78:	4628      	mov	r0, r5
 800eb7a:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb7c:	47b8      	blx	r7
 800eb7e:	3001      	adds	r0, #1
 800eb80:	f43f ae99 	beq.w	800e8b6 <_printf_float+0xb6>
 800eb84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eb86:	f10b 0b01 	add.w	fp, fp, #1
 800eb8a:	e7b9      	b.n	800eb00 <_printf_float+0x300>
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb92:	4628      	mov	r0, r5
 800eb94:	47b8      	blx	r7
 800eb96:	3001      	adds	r0, #1
 800eb98:	d1bf      	bne.n	800eb1a <_printf_float+0x31a>
 800eb9a:	e68c      	b.n	800e8b6 <_printf_float+0xb6>
 800eb9c:	464b      	mov	r3, r9
 800eb9e:	4631      	mov	r1, r6
 800eba0:	4628      	mov	r0, r5
 800eba2:	eb08 020a 	add.w	r2, r8, sl
 800eba6:	47b8      	blx	r7
 800eba8:	3001      	adds	r0, #1
 800ebaa:	d1c2      	bne.n	800eb32 <_printf_float+0x332>
 800ebac:	e683      	b.n	800e8b6 <_printf_float+0xb6>
 800ebae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebb0:	2a01      	cmp	r2, #1
 800ebb2:	dc01      	bgt.n	800ebb8 <_printf_float+0x3b8>
 800ebb4:	07db      	lsls	r3, r3, #31
 800ebb6:	d537      	bpl.n	800ec28 <_printf_float+0x428>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	4642      	mov	r2, r8
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	f43f ae77 	beq.w	800e8b6 <_printf_float+0xb6>
 800ebc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ebcc:	4631      	mov	r1, r6
 800ebce:	4628      	mov	r0, r5
 800ebd0:	47b8      	blx	r7
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	f43f ae6f 	beq.w	800e8b6 <_printf_float+0xb6>
 800ebd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ebdc:	2200      	movs	r2, #0
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f7f1 ff4e 	bl	8000a80 <__aeabi_dcmpeq>
 800ebe4:	b9d8      	cbnz	r0, 800ec1e <_printf_float+0x41e>
 800ebe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebe8:	f108 0201 	add.w	r2, r8, #1
 800ebec:	3b01      	subs	r3, #1
 800ebee:	4631      	mov	r1, r6
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	47b8      	blx	r7
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	d10e      	bne.n	800ec16 <_printf_float+0x416>
 800ebf8:	e65d      	b.n	800e8b6 <_printf_float+0xb6>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	464a      	mov	r2, r9
 800ebfe:	4631      	mov	r1, r6
 800ec00:	4628      	mov	r0, r5
 800ec02:	47b8      	blx	r7
 800ec04:	3001      	adds	r0, #1
 800ec06:	f43f ae56 	beq.w	800e8b6 <_printf_float+0xb6>
 800ec0a:	f108 0801 	add.w	r8, r8, #1
 800ec0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec10:	3b01      	subs	r3, #1
 800ec12:	4543      	cmp	r3, r8
 800ec14:	dcf1      	bgt.n	800ebfa <_printf_float+0x3fa>
 800ec16:	4653      	mov	r3, sl
 800ec18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec1c:	e6e0      	b.n	800e9e0 <_printf_float+0x1e0>
 800ec1e:	f04f 0800 	mov.w	r8, #0
 800ec22:	f104 091a 	add.w	r9, r4, #26
 800ec26:	e7f2      	b.n	800ec0e <_printf_float+0x40e>
 800ec28:	2301      	movs	r3, #1
 800ec2a:	4642      	mov	r2, r8
 800ec2c:	e7df      	b.n	800ebee <_printf_float+0x3ee>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	464a      	mov	r2, r9
 800ec32:	4631      	mov	r1, r6
 800ec34:	4628      	mov	r0, r5
 800ec36:	47b8      	blx	r7
 800ec38:	3001      	adds	r0, #1
 800ec3a:	f43f ae3c 	beq.w	800e8b6 <_printf_float+0xb6>
 800ec3e:	f108 0801 	add.w	r8, r8, #1
 800ec42:	68e3      	ldr	r3, [r4, #12]
 800ec44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ec46:	1a5b      	subs	r3, r3, r1
 800ec48:	4543      	cmp	r3, r8
 800ec4a:	dcf0      	bgt.n	800ec2e <_printf_float+0x42e>
 800ec4c:	e6fd      	b.n	800ea4a <_printf_float+0x24a>
 800ec4e:	f04f 0800 	mov.w	r8, #0
 800ec52:	f104 0919 	add.w	r9, r4, #25
 800ec56:	e7f4      	b.n	800ec42 <_printf_float+0x442>

0800ec58 <_printf_common>:
 800ec58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec5c:	4616      	mov	r6, r2
 800ec5e:	4699      	mov	r9, r3
 800ec60:	688a      	ldr	r2, [r1, #8]
 800ec62:	690b      	ldr	r3, [r1, #16]
 800ec64:	4607      	mov	r7, r0
 800ec66:	4293      	cmp	r3, r2
 800ec68:	bfb8      	it	lt
 800ec6a:	4613      	movlt	r3, r2
 800ec6c:	6033      	str	r3, [r6, #0]
 800ec6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec72:	460c      	mov	r4, r1
 800ec74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec78:	b10a      	cbz	r2, 800ec7e <_printf_common+0x26>
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	6033      	str	r3, [r6, #0]
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	0699      	lsls	r1, r3, #26
 800ec82:	bf42      	ittt	mi
 800ec84:	6833      	ldrmi	r3, [r6, #0]
 800ec86:	3302      	addmi	r3, #2
 800ec88:	6033      	strmi	r3, [r6, #0]
 800ec8a:	6825      	ldr	r5, [r4, #0]
 800ec8c:	f015 0506 	ands.w	r5, r5, #6
 800ec90:	d106      	bne.n	800eca0 <_printf_common+0x48>
 800ec92:	f104 0a19 	add.w	sl, r4, #25
 800ec96:	68e3      	ldr	r3, [r4, #12]
 800ec98:	6832      	ldr	r2, [r6, #0]
 800ec9a:	1a9b      	subs	r3, r3, r2
 800ec9c:	42ab      	cmp	r3, r5
 800ec9e:	dc28      	bgt.n	800ecf2 <_printf_common+0x9a>
 800eca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eca4:	1e13      	subs	r3, r2, #0
 800eca6:	6822      	ldr	r2, [r4, #0]
 800eca8:	bf18      	it	ne
 800ecaa:	2301      	movne	r3, #1
 800ecac:	0692      	lsls	r2, r2, #26
 800ecae:	d42d      	bmi.n	800ed0c <_printf_common+0xb4>
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	4638      	mov	r0, r7
 800ecb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecb8:	47c0      	blx	r8
 800ecba:	3001      	adds	r0, #1
 800ecbc:	d020      	beq.n	800ed00 <_printf_common+0xa8>
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	68e5      	ldr	r5, [r4, #12]
 800ecc2:	f003 0306 	and.w	r3, r3, #6
 800ecc6:	2b04      	cmp	r3, #4
 800ecc8:	bf18      	it	ne
 800ecca:	2500      	movne	r5, #0
 800eccc:	6832      	ldr	r2, [r6, #0]
 800ecce:	f04f 0600 	mov.w	r6, #0
 800ecd2:	68a3      	ldr	r3, [r4, #8]
 800ecd4:	bf08      	it	eq
 800ecd6:	1aad      	subeq	r5, r5, r2
 800ecd8:	6922      	ldr	r2, [r4, #16]
 800ecda:	bf08      	it	eq
 800ecdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ece0:	4293      	cmp	r3, r2
 800ece2:	bfc4      	itt	gt
 800ece4:	1a9b      	subgt	r3, r3, r2
 800ece6:	18ed      	addgt	r5, r5, r3
 800ece8:	341a      	adds	r4, #26
 800ecea:	42b5      	cmp	r5, r6
 800ecec:	d11a      	bne.n	800ed24 <_printf_common+0xcc>
 800ecee:	2000      	movs	r0, #0
 800ecf0:	e008      	b.n	800ed04 <_printf_common+0xac>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	4652      	mov	r2, sl
 800ecf6:	4649      	mov	r1, r9
 800ecf8:	4638      	mov	r0, r7
 800ecfa:	47c0      	blx	r8
 800ecfc:	3001      	adds	r0, #1
 800ecfe:	d103      	bne.n	800ed08 <_printf_common+0xb0>
 800ed00:	f04f 30ff 	mov.w	r0, #4294967295
 800ed04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed08:	3501      	adds	r5, #1
 800ed0a:	e7c4      	b.n	800ec96 <_printf_common+0x3e>
 800ed0c:	2030      	movs	r0, #48	; 0x30
 800ed0e:	18e1      	adds	r1, r4, r3
 800ed10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed14:	1c5a      	adds	r2, r3, #1
 800ed16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed1a:	4422      	add	r2, r4
 800ed1c:	3302      	adds	r3, #2
 800ed1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed22:	e7c5      	b.n	800ecb0 <_printf_common+0x58>
 800ed24:	2301      	movs	r3, #1
 800ed26:	4622      	mov	r2, r4
 800ed28:	4649      	mov	r1, r9
 800ed2a:	4638      	mov	r0, r7
 800ed2c:	47c0      	blx	r8
 800ed2e:	3001      	adds	r0, #1
 800ed30:	d0e6      	beq.n	800ed00 <_printf_common+0xa8>
 800ed32:	3601      	adds	r6, #1
 800ed34:	e7d9      	b.n	800ecea <_printf_common+0x92>
	...

0800ed38 <_printf_i>:
 800ed38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	7e27      	ldrb	r7, [r4, #24]
 800ed40:	4691      	mov	r9, r2
 800ed42:	2f78      	cmp	r7, #120	; 0x78
 800ed44:	4680      	mov	r8, r0
 800ed46:	469a      	mov	sl, r3
 800ed48:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed4e:	d807      	bhi.n	800ed60 <_printf_i+0x28>
 800ed50:	2f62      	cmp	r7, #98	; 0x62
 800ed52:	d80a      	bhi.n	800ed6a <_printf_i+0x32>
 800ed54:	2f00      	cmp	r7, #0
 800ed56:	f000 80d9 	beq.w	800ef0c <_printf_i+0x1d4>
 800ed5a:	2f58      	cmp	r7, #88	; 0x58
 800ed5c:	f000 80a4 	beq.w	800eea8 <_printf_i+0x170>
 800ed60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed68:	e03a      	b.n	800ede0 <_printf_i+0xa8>
 800ed6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed6e:	2b15      	cmp	r3, #21
 800ed70:	d8f6      	bhi.n	800ed60 <_printf_i+0x28>
 800ed72:	a001      	add	r0, pc, #4	; (adr r0, 800ed78 <_printf_i+0x40>)
 800ed74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed78:	0800edd1 	.word	0x0800edd1
 800ed7c:	0800ede5 	.word	0x0800ede5
 800ed80:	0800ed61 	.word	0x0800ed61
 800ed84:	0800ed61 	.word	0x0800ed61
 800ed88:	0800ed61 	.word	0x0800ed61
 800ed8c:	0800ed61 	.word	0x0800ed61
 800ed90:	0800ede5 	.word	0x0800ede5
 800ed94:	0800ed61 	.word	0x0800ed61
 800ed98:	0800ed61 	.word	0x0800ed61
 800ed9c:	0800ed61 	.word	0x0800ed61
 800eda0:	0800ed61 	.word	0x0800ed61
 800eda4:	0800eef3 	.word	0x0800eef3
 800eda8:	0800ee15 	.word	0x0800ee15
 800edac:	0800eed5 	.word	0x0800eed5
 800edb0:	0800ed61 	.word	0x0800ed61
 800edb4:	0800ed61 	.word	0x0800ed61
 800edb8:	0800ef15 	.word	0x0800ef15
 800edbc:	0800ed61 	.word	0x0800ed61
 800edc0:	0800ee15 	.word	0x0800ee15
 800edc4:	0800ed61 	.word	0x0800ed61
 800edc8:	0800ed61 	.word	0x0800ed61
 800edcc:	0800eedd 	.word	0x0800eedd
 800edd0:	680b      	ldr	r3, [r1, #0]
 800edd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800edd6:	1d1a      	adds	r2, r3, #4
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	600a      	str	r2, [r1, #0]
 800eddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ede0:	2301      	movs	r3, #1
 800ede2:	e0a4      	b.n	800ef2e <_printf_i+0x1f6>
 800ede4:	6825      	ldr	r5, [r4, #0]
 800ede6:	6808      	ldr	r0, [r1, #0]
 800ede8:	062e      	lsls	r6, r5, #24
 800edea:	f100 0304 	add.w	r3, r0, #4
 800edee:	d50a      	bpl.n	800ee06 <_printf_i+0xce>
 800edf0:	6805      	ldr	r5, [r0, #0]
 800edf2:	600b      	str	r3, [r1, #0]
 800edf4:	2d00      	cmp	r5, #0
 800edf6:	da03      	bge.n	800ee00 <_printf_i+0xc8>
 800edf8:	232d      	movs	r3, #45	; 0x2d
 800edfa:	426d      	negs	r5, r5
 800edfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee00:	230a      	movs	r3, #10
 800ee02:	485e      	ldr	r0, [pc, #376]	; (800ef7c <_printf_i+0x244>)
 800ee04:	e019      	b.n	800ee3a <_printf_i+0x102>
 800ee06:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee0a:	6805      	ldr	r5, [r0, #0]
 800ee0c:	600b      	str	r3, [r1, #0]
 800ee0e:	bf18      	it	ne
 800ee10:	b22d      	sxthne	r5, r5
 800ee12:	e7ef      	b.n	800edf4 <_printf_i+0xbc>
 800ee14:	680b      	ldr	r3, [r1, #0]
 800ee16:	6825      	ldr	r5, [r4, #0]
 800ee18:	1d18      	adds	r0, r3, #4
 800ee1a:	6008      	str	r0, [r1, #0]
 800ee1c:	0628      	lsls	r0, r5, #24
 800ee1e:	d501      	bpl.n	800ee24 <_printf_i+0xec>
 800ee20:	681d      	ldr	r5, [r3, #0]
 800ee22:	e002      	b.n	800ee2a <_printf_i+0xf2>
 800ee24:	0669      	lsls	r1, r5, #25
 800ee26:	d5fb      	bpl.n	800ee20 <_printf_i+0xe8>
 800ee28:	881d      	ldrh	r5, [r3, #0]
 800ee2a:	2f6f      	cmp	r7, #111	; 0x6f
 800ee2c:	bf0c      	ite	eq
 800ee2e:	2308      	moveq	r3, #8
 800ee30:	230a      	movne	r3, #10
 800ee32:	4852      	ldr	r0, [pc, #328]	; (800ef7c <_printf_i+0x244>)
 800ee34:	2100      	movs	r1, #0
 800ee36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee3a:	6866      	ldr	r6, [r4, #4]
 800ee3c:	2e00      	cmp	r6, #0
 800ee3e:	bfa8      	it	ge
 800ee40:	6821      	ldrge	r1, [r4, #0]
 800ee42:	60a6      	str	r6, [r4, #8]
 800ee44:	bfa4      	itt	ge
 800ee46:	f021 0104 	bicge.w	r1, r1, #4
 800ee4a:	6021      	strge	r1, [r4, #0]
 800ee4c:	b90d      	cbnz	r5, 800ee52 <_printf_i+0x11a>
 800ee4e:	2e00      	cmp	r6, #0
 800ee50:	d04d      	beq.n	800eeee <_printf_i+0x1b6>
 800ee52:	4616      	mov	r6, r2
 800ee54:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee58:	fb03 5711 	mls	r7, r3, r1, r5
 800ee5c:	5dc7      	ldrb	r7, [r0, r7]
 800ee5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee62:	462f      	mov	r7, r5
 800ee64:	42bb      	cmp	r3, r7
 800ee66:	460d      	mov	r5, r1
 800ee68:	d9f4      	bls.n	800ee54 <_printf_i+0x11c>
 800ee6a:	2b08      	cmp	r3, #8
 800ee6c:	d10b      	bne.n	800ee86 <_printf_i+0x14e>
 800ee6e:	6823      	ldr	r3, [r4, #0]
 800ee70:	07df      	lsls	r7, r3, #31
 800ee72:	d508      	bpl.n	800ee86 <_printf_i+0x14e>
 800ee74:	6923      	ldr	r3, [r4, #16]
 800ee76:	6861      	ldr	r1, [r4, #4]
 800ee78:	4299      	cmp	r1, r3
 800ee7a:	bfde      	ittt	le
 800ee7c:	2330      	movle	r3, #48	; 0x30
 800ee7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee82:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee86:	1b92      	subs	r2, r2, r6
 800ee88:	6122      	str	r2, [r4, #16]
 800ee8a:	464b      	mov	r3, r9
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4640      	mov	r0, r8
 800ee90:	f8cd a000 	str.w	sl, [sp]
 800ee94:	aa03      	add	r2, sp, #12
 800ee96:	f7ff fedf 	bl	800ec58 <_printf_common>
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	d14c      	bne.n	800ef38 <_printf_i+0x200>
 800ee9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eea2:	b004      	add	sp, #16
 800eea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eea8:	4834      	ldr	r0, [pc, #208]	; (800ef7c <_printf_i+0x244>)
 800eeaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eeae:	680e      	ldr	r6, [r1, #0]
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	f856 5b04 	ldr.w	r5, [r6], #4
 800eeb6:	061f      	lsls	r7, r3, #24
 800eeb8:	600e      	str	r6, [r1, #0]
 800eeba:	d514      	bpl.n	800eee6 <_printf_i+0x1ae>
 800eebc:	07d9      	lsls	r1, r3, #31
 800eebe:	bf44      	itt	mi
 800eec0:	f043 0320 	orrmi.w	r3, r3, #32
 800eec4:	6023      	strmi	r3, [r4, #0]
 800eec6:	b91d      	cbnz	r5, 800eed0 <_printf_i+0x198>
 800eec8:	6823      	ldr	r3, [r4, #0]
 800eeca:	f023 0320 	bic.w	r3, r3, #32
 800eece:	6023      	str	r3, [r4, #0]
 800eed0:	2310      	movs	r3, #16
 800eed2:	e7af      	b.n	800ee34 <_printf_i+0xfc>
 800eed4:	6823      	ldr	r3, [r4, #0]
 800eed6:	f043 0320 	orr.w	r3, r3, #32
 800eeda:	6023      	str	r3, [r4, #0]
 800eedc:	2378      	movs	r3, #120	; 0x78
 800eede:	4828      	ldr	r0, [pc, #160]	; (800ef80 <_printf_i+0x248>)
 800eee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eee4:	e7e3      	b.n	800eeae <_printf_i+0x176>
 800eee6:	065e      	lsls	r6, r3, #25
 800eee8:	bf48      	it	mi
 800eeea:	b2ad      	uxthmi	r5, r5
 800eeec:	e7e6      	b.n	800eebc <_printf_i+0x184>
 800eeee:	4616      	mov	r6, r2
 800eef0:	e7bb      	b.n	800ee6a <_printf_i+0x132>
 800eef2:	680b      	ldr	r3, [r1, #0]
 800eef4:	6826      	ldr	r6, [r4, #0]
 800eef6:	1d1d      	adds	r5, r3, #4
 800eef8:	6960      	ldr	r0, [r4, #20]
 800eefa:	600d      	str	r5, [r1, #0]
 800eefc:	0635      	lsls	r5, r6, #24
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	d501      	bpl.n	800ef06 <_printf_i+0x1ce>
 800ef02:	6018      	str	r0, [r3, #0]
 800ef04:	e002      	b.n	800ef0c <_printf_i+0x1d4>
 800ef06:	0671      	lsls	r1, r6, #25
 800ef08:	d5fb      	bpl.n	800ef02 <_printf_i+0x1ca>
 800ef0a:	8018      	strh	r0, [r3, #0]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	4616      	mov	r6, r2
 800ef10:	6123      	str	r3, [r4, #16]
 800ef12:	e7ba      	b.n	800ee8a <_printf_i+0x152>
 800ef14:	680b      	ldr	r3, [r1, #0]
 800ef16:	1d1a      	adds	r2, r3, #4
 800ef18:	600a      	str	r2, [r1, #0]
 800ef1a:	681e      	ldr	r6, [r3, #0]
 800ef1c:	2100      	movs	r1, #0
 800ef1e:	4630      	mov	r0, r6
 800ef20:	6862      	ldr	r2, [r4, #4]
 800ef22:	f002 fea3 	bl	8011c6c <memchr>
 800ef26:	b108      	cbz	r0, 800ef2c <_printf_i+0x1f4>
 800ef28:	1b80      	subs	r0, r0, r6
 800ef2a:	6060      	str	r0, [r4, #4]
 800ef2c:	6863      	ldr	r3, [r4, #4]
 800ef2e:	6123      	str	r3, [r4, #16]
 800ef30:	2300      	movs	r3, #0
 800ef32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef36:	e7a8      	b.n	800ee8a <_printf_i+0x152>
 800ef38:	4632      	mov	r2, r6
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	47d0      	blx	sl
 800ef42:	3001      	adds	r0, #1
 800ef44:	d0ab      	beq.n	800ee9e <_printf_i+0x166>
 800ef46:	6823      	ldr	r3, [r4, #0]
 800ef48:	079b      	lsls	r3, r3, #30
 800ef4a:	d413      	bmi.n	800ef74 <_printf_i+0x23c>
 800ef4c:	68e0      	ldr	r0, [r4, #12]
 800ef4e:	9b03      	ldr	r3, [sp, #12]
 800ef50:	4298      	cmp	r0, r3
 800ef52:	bfb8      	it	lt
 800ef54:	4618      	movlt	r0, r3
 800ef56:	e7a4      	b.n	800eea2 <_printf_i+0x16a>
 800ef58:	2301      	movs	r3, #1
 800ef5a:	4632      	mov	r2, r6
 800ef5c:	4649      	mov	r1, r9
 800ef5e:	4640      	mov	r0, r8
 800ef60:	47d0      	blx	sl
 800ef62:	3001      	adds	r0, #1
 800ef64:	d09b      	beq.n	800ee9e <_printf_i+0x166>
 800ef66:	3501      	adds	r5, #1
 800ef68:	68e3      	ldr	r3, [r4, #12]
 800ef6a:	9903      	ldr	r1, [sp, #12]
 800ef6c:	1a5b      	subs	r3, r3, r1
 800ef6e:	42ab      	cmp	r3, r5
 800ef70:	dcf2      	bgt.n	800ef58 <_printf_i+0x220>
 800ef72:	e7eb      	b.n	800ef4c <_printf_i+0x214>
 800ef74:	2500      	movs	r5, #0
 800ef76:	f104 0619 	add.w	r6, r4, #25
 800ef7a:	e7f5      	b.n	800ef68 <_printf_i+0x230>
 800ef7c:	08013e7a 	.word	0x08013e7a
 800ef80:	08013e8b 	.word	0x08013e8b

0800ef84 <_scanf_float>:
 800ef84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef88:	b087      	sub	sp, #28
 800ef8a:	9303      	str	r3, [sp, #12]
 800ef8c:	688b      	ldr	r3, [r1, #8]
 800ef8e:	4617      	mov	r7, r2
 800ef90:	1e5a      	subs	r2, r3, #1
 800ef92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ef96:	bf85      	ittet	hi
 800ef98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ef9c:	195b      	addhi	r3, r3, r5
 800ef9e:	2300      	movls	r3, #0
 800efa0:	9302      	strhi	r3, [sp, #8]
 800efa2:	bf88      	it	hi
 800efa4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800efa8:	468b      	mov	fp, r1
 800efaa:	f04f 0500 	mov.w	r5, #0
 800efae:	bf8c      	ite	hi
 800efb0:	608b      	strhi	r3, [r1, #8]
 800efb2:	9302      	strls	r3, [sp, #8]
 800efb4:	680b      	ldr	r3, [r1, #0]
 800efb6:	4680      	mov	r8, r0
 800efb8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800efbc:	f84b 3b1c 	str.w	r3, [fp], #28
 800efc0:	460c      	mov	r4, r1
 800efc2:	465e      	mov	r6, fp
 800efc4:	46aa      	mov	sl, r5
 800efc6:	46a9      	mov	r9, r5
 800efc8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800efcc:	9501      	str	r5, [sp, #4]
 800efce:	68a2      	ldr	r2, [r4, #8]
 800efd0:	b152      	cbz	r2, 800efe8 <_scanf_float+0x64>
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	2b4e      	cmp	r3, #78	; 0x4e
 800efd8:	d864      	bhi.n	800f0a4 <_scanf_float+0x120>
 800efda:	2b40      	cmp	r3, #64	; 0x40
 800efdc:	d83c      	bhi.n	800f058 <_scanf_float+0xd4>
 800efde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800efe2:	b2c8      	uxtb	r0, r1
 800efe4:	280e      	cmp	r0, #14
 800efe6:	d93a      	bls.n	800f05e <_scanf_float+0xda>
 800efe8:	f1b9 0f00 	cmp.w	r9, #0
 800efec:	d003      	beq.n	800eff6 <_scanf_float+0x72>
 800efee:	6823      	ldr	r3, [r4, #0]
 800eff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eff4:	6023      	str	r3, [r4, #0]
 800eff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800effa:	f1ba 0f01 	cmp.w	sl, #1
 800effe:	f200 8113 	bhi.w	800f228 <_scanf_float+0x2a4>
 800f002:	455e      	cmp	r6, fp
 800f004:	f200 8105 	bhi.w	800f212 <_scanf_float+0x28e>
 800f008:	2501      	movs	r5, #1
 800f00a:	4628      	mov	r0, r5
 800f00c:	b007      	add	sp, #28
 800f00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f012:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f016:	2a0d      	cmp	r2, #13
 800f018:	d8e6      	bhi.n	800efe8 <_scanf_float+0x64>
 800f01a:	a101      	add	r1, pc, #4	; (adr r1, 800f020 <_scanf_float+0x9c>)
 800f01c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f020:	0800f15f 	.word	0x0800f15f
 800f024:	0800efe9 	.word	0x0800efe9
 800f028:	0800efe9 	.word	0x0800efe9
 800f02c:	0800efe9 	.word	0x0800efe9
 800f030:	0800f1bf 	.word	0x0800f1bf
 800f034:	0800f197 	.word	0x0800f197
 800f038:	0800efe9 	.word	0x0800efe9
 800f03c:	0800efe9 	.word	0x0800efe9
 800f040:	0800f16d 	.word	0x0800f16d
 800f044:	0800efe9 	.word	0x0800efe9
 800f048:	0800efe9 	.word	0x0800efe9
 800f04c:	0800efe9 	.word	0x0800efe9
 800f050:	0800efe9 	.word	0x0800efe9
 800f054:	0800f125 	.word	0x0800f125
 800f058:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f05c:	e7db      	b.n	800f016 <_scanf_float+0x92>
 800f05e:	290e      	cmp	r1, #14
 800f060:	d8c2      	bhi.n	800efe8 <_scanf_float+0x64>
 800f062:	a001      	add	r0, pc, #4	; (adr r0, 800f068 <_scanf_float+0xe4>)
 800f064:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f068:	0800f117 	.word	0x0800f117
 800f06c:	0800efe9 	.word	0x0800efe9
 800f070:	0800f117 	.word	0x0800f117
 800f074:	0800f1ab 	.word	0x0800f1ab
 800f078:	0800efe9 	.word	0x0800efe9
 800f07c:	0800f0c5 	.word	0x0800f0c5
 800f080:	0800f101 	.word	0x0800f101
 800f084:	0800f101 	.word	0x0800f101
 800f088:	0800f101 	.word	0x0800f101
 800f08c:	0800f101 	.word	0x0800f101
 800f090:	0800f101 	.word	0x0800f101
 800f094:	0800f101 	.word	0x0800f101
 800f098:	0800f101 	.word	0x0800f101
 800f09c:	0800f101 	.word	0x0800f101
 800f0a0:	0800f101 	.word	0x0800f101
 800f0a4:	2b6e      	cmp	r3, #110	; 0x6e
 800f0a6:	d809      	bhi.n	800f0bc <_scanf_float+0x138>
 800f0a8:	2b60      	cmp	r3, #96	; 0x60
 800f0aa:	d8b2      	bhi.n	800f012 <_scanf_float+0x8e>
 800f0ac:	2b54      	cmp	r3, #84	; 0x54
 800f0ae:	d077      	beq.n	800f1a0 <_scanf_float+0x21c>
 800f0b0:	2b59      	cmp	r3, #89	; 0x59
 800f0b2:	d199      	bne.n	800efe8 <_scanf_float+0x64>
 800f0b4:	2d07      	cmp	r5, #7
 800f0b6:	d197      	bne.n	800efe8 <_scanf_float+0x64>
 800f0b8:	2508      	movs	r5, #8
 800f0ba:	e029      	b.n	800f110 <_scanf_float+0x18c>
 800f0bc:	2b74      	cmp	r3, #116	; 0x74
 800f0be:	d06f      	beq.n	800f1a0 <_scanf_float+0x21c>
 800f0c0:	2b79      	cmp	r3, #121	; 0x79
 800f0c2:	e7f6      	b.n	800f0b2 <_scanf_float+0x12e>
 800f0c4:	6821      	ldr	r1, [r4, #0]
 800f0c6:	05c8      	lsls	r0, r1, #23
 800f0c8:	d51a      	bpl.n	800f100 <_scanf_float+0x17c>
 800f0ca:	9b02      	ldr	r3, [sp, #8]
 800f0cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f0d0:	6021      	str	r1, [r4, #0]
 800f0d2:	f109 0901 	add.w	r9, r9, #1
 800f0d6:	b11b      	cbz	r3, 800f0e0 <_scanf_float+0x15c>
 800f0d8:	3b01      	subs	r3, #1
 800f0da:	3201      	adds	r2, #1
 800f0dc:	9302      	str	r3, [sp, #8]
 800f0de:	60a2      	str	r2, [r4, #8]
 800f0e0:	68a3      	ldr	r3, [r4, #8]
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	60a3      	str	r3, [r4, #8]
 800f0e6:	6923      	ldr	r3, [r4, #16]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	6123      	str	r3, [r4, #16]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	607b      	str	r3, [r7, #4]
 800f0f4:	f340 8084 	ble.w	800f200 <_scanf_float+0x27c>
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	3301      	adds	r3, #1
 800f0fc:	603b      	str	r3, [r7, #0]
 800f0fe:	e766      	b.n	800efce <_scanf_float+0x4a>
 800f100:	eb1a 0f05 	cmn.w	sl, r5
 800f104:	f47f af70 	bne.w	800efe8 <_scanf_float+0x64>
 800f108:	6822      	ldr	r2, [r4, #0]
 800f10a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f10e:	6022      	str	r2, [r4, #0]
 800f110:	f806 3b01 	strb.w	r3, [r6], #1
 800f114:	e7e4      	b.n	800f0e0 <_scanf_float+0x15c>
 800f116:	6822      	ldr	r2, [r4, #0]
 800f118:	0610      	lsls	r0, r2, #24
 800f11a:	f57f af65 	bpl.w	800efe8 <_scanf_float+0x64>
 800f11e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f122:	e7f4      	b.n	800f10e <_scanf_float+0x18a>
 800f124:	f1ba 0f00 	cmp.w	sl, #0
 800f128:	d10e      	bne.n	800f148 <_scanf_float+0x1c4>
 800f12a:	f1b9 0f00 	cmp.w	r9, #0
 800f12e:	d10e      	bne.n	800f14e <_scanf_float+0x1ca>
 800f130:	6822      	ldr	r2, [r4, #0]
 800f132:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f136:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f13a:	d108      	bne.n	800f14e <_scanf_float+0x1ca>
 800f13c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f140:	f04f 0a01 	mov.w	sl, #1
 800f144:	6022      	str	r2, [r4, #0]
 800f146:	e7e3      	b.n	800f110 <_scanf_float+0x18c>
 800f148:	f1ba 0f02 	cmp.w	sl, #2
 800f14c:	d055      	beq.n	800f1fa <_scanf_float+0x276>
 800f14e:	2d01      	cmp	r5, #1
 800f150:	d002      	beq.n	800f158 <_scanf_float+0x1d4>
 800f152:	2d04      	cmp	r5, #4
 800f154:	f47f af48 	bne.w	800efe8 <_scanf_float+0x64>
 800f158:	3501      	adds	r5, #1
 800f15a:	b2ed      	uxtb	r5, r5
 800f15c:	e7d8      	b.n	800f110 <_scanf_float+0x18c>
 800f15e:	f1ba 0f01 	cmp.w	sl, #1
 800f162:	f47f af41 	bne.w	800efe8 <_scanf_float+0x64>
 800f166:	f04f 0a02 	mov.w	sl, #2
 800f16a:	e7d1      	b.n	800f110 <_scanf_float+0x18c>
 800f16c:	b97d      	cbnz	r5, 800f18e <_scanf_float+0x20a>
 800f16e:	f1b9 0f00 	cmp.w	r9, #0
 800f172:	f47f af3c 	bne.w	800efee <_scanf_float+0x6a>
 800f176:	6822      	ldr	r2, [r4, #0]
 800f178:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f17c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f180:	f47f af39 	bne.w	800eff6 <_scanf_float+0x72>
 800f184:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f188:	2501      	movs	r5, #1
 800f18a:	6022      	str	r2, [r4, #0]
 800f18c:	e7c0      	b.n	800f110 <_scanf_float+0x18c>
 800f18e:	2d03      	cmp	r5, #3
 800f190:	d0e2      	beq.n	800f158 <_scanf_float+0x1d4>
 800f192:	2d05      	cmp	r5, #5
 800f194:	e7de      	b.n	800f154 <_scanf_float+0x1d0>
 800f196:	2d02      	cmp	r5, #2
 800f198:	f47f af26 	bne.w	800efe8 <_scanf_float+0x64>
 800f19c:	2503      	movs	r5, #3
 800f19e:	e7b7      	b.n	800f110 <_scanf_float+0x18c>
 800f1a0:	2d06      	cmp	r5, #6
 800f1a2:	f47f af21 	bne.w	800efe8 <_scanf_float+0x64>
 800f1a6:	2507      	movs	r5, #7
 800f1a8:	e7b2      	b.n	800f110 <_scanf_float+0x18c>
 800f1aa:	6822      	ldr	r2, [r4, #0]
 800f1ac:	0591      	lsls	r1, r2, #22
 800f1ae:	f57f af1b 	bpl.w	800efe8 <_scanf_float+0x64>
 800f1b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f1b6:	6022      	str	r2, [r4, #0]
 800f1b8:	f8cd 9004 	str.w	r9, [sp, #4]
 800f1bc:	e7a8      	b.n	800f110 <_scanf_float+0x18c>
 800f1be:	6822      	ldr	r2, [r4, #0]
 800f1c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f1c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f1c8:	d006      	beq.n	800f1d8 <_scanf_float+0x254>
 800f1ca:	0550      	lsls	r0, r2, #21
 800f1cc:	f57f af0c 	bpl.w	800efe8 <_scanf_float+0x64>
 800f1d0:	f1b9 0f00 	cmp.w	r9, #0
 800f1d4:	f43f af0f 	beq.w	800eff6 <_scanf_float+0x72>
 800f1d8:	0591      	lsls	r1, r2, #22
 800f1da:	bf58      	it	pl
 800f1dc:	9901      	ldrpl	r1, [sp, #4]
 800f1de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f1e2:	bf58      	it	pl
 800f1e4:	eba9 0101 	subpl.w	r1, r9, r1
 800f1e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f1ec:	f04f 0900 	mov.w	r9, #0
 800f1f0:	bf58      	it	pl
 800f1f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f1f6:	6022      	str	r2, [r4, #0]
 800f1f8:	e78a      	b.n	800f110 <_scanf_float+0x18c>
 800f1fa:	f04f 0a03 	mov.w	sl, #3
 800f1fe:	e787      	b.n	800f110 <_scanf_float+0x18c>
 800f200:	4639      	mov	r1, r7
 800f202:	4640      	mov	r0, r8
 800f204:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f208:	4798      	blx	r3
 800f20a:	2800      	cmp	r0, #0
 800f20c:	f43f aedf 	beq.w	800efce <_scanf_float+0x4a>
 800f210:	e6ea      	b.n	800efe8 <_scanf_float+0x64>
 800f212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f216:	463a      	mov	r2, r7
 800f218:	4640      	mov	r0, r8
 800f21a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f21e:	4798      	blx	r3
 800f220:	6923      	ldr	r3, [r4, #16]
 800f222:	3b01      	subs	r3, #1
 800f224:	6123      	str	r3, [r4, #16]
 800f226:	e6ec      	b.n	800f002 <_scanf_float+0x7e>
 800f228:	1e6b      	subs	r3, r5, #1
 800f22a:	2b06      	cmp	r3, #6
 800f22c:	d825      	bhi.n	800f27a <_scanf_float+0x2f6>
 800f22e:	2d02      	cmp	r5, #2
 800f230:	d836      	bhi.n	800f2a0 <_scanf_float+0x31c>
 800f232:	455e      	cmp	r6, fp
 800f234:	f67f aee8 	bls.w	800f008 <_scanf_float+0x84>
 800f238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f23c:	463a      	mov	r2, r7
 800f23e:	4640      	mov	r0, r8
 800f240:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f244:	4798      	blx	r3
 800f246:	6923      	ldr	r3, [r4, #16]
 800f248:	3b01      	subs	r3, #1
 800f24a:	6123      	str	r3, [r4, #16]
 800f24c:	e7f1      	b.n	800f232 <_scanf_float+0x2ae>
 800f24e:	9802      	ldr	r0, [sp, #8]
 800f250:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f254:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f258:	463a      	mov	r2, r7
 800f25a:	9002      	str	r0, [sp, #8]
 800f25c:	4640      	mov	r0, r8
 800f25e:	4798      	blx	r3
 800f260:	6923      	ldr	r3, [r4, #16]
 800f262:	3b01      	subs	r3, #1
 800f264:	6123      	str	r3, [r4, #16]
 800f266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f26a:	fa5f fa8a 	uxtb.w	sl, sl
 800f26e:	f1ba 0f02 	cmp.w	sl, #2
 800f272:	d1ec      	bne.n	800f24e <_scanf_float+0x2ca>
 800f274:	3d03      	subs	r5, #3
 800f276:	b2ed      	uxtb	r5, r5
 800f278:	1b76      	subs	r6, r6, r5
 800f27a:	6823      	ldr	r3, [r4, #0]
 800f27c:	05da      	lsls	r2, r3, #23
 800f27e:	d52f      	bpl.n	800f2e0 <_scanf_float+0x35c>
 800f280:	055b      	lsls	r3, r3, #21
 800f282:	d510      	bpl.n	800f2a6 <_scanf_float+0x322>
 800f284:	455e      	cmp	r6, fp
 800f286:	f67f aebf 	bls.w	800f008 <_scanf_float+0x84>
 800f28a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f28e:	463a      	mov	r2, r7
 800f290:	4640      	mov	r0, r8
 800f292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f296:	4798      	blx	r3
 800f298:	6923      	ldr	r3, [r4, #16]
 800f29a:	3b01      	subs	r3, #1
 800f29c:	6123      	str	r3, [r4, #16]
 800f29e:	e7f1      	b.n	800f284 <_scanf_float+0x300>
 800f2a0:	46aa      	mov	sl, r5
 800f2a2:	9602      	str	r6, [sp, #8]
 800f2a4:	e7df      	b.n	800f266 <_scanf_float+0x2e2>
 800f2a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	2965      	cmp	r1, #101	; 0x65
 800f2ae:	f103 33ff 	add.w	r3, r3, #4294967295
 800f2b2:	f106 35ff 	add.w	r5, r6, #4294967295
 800f2b6:	6123      	str	r3, [r4, #16]
 800f2b8:	d00c      	beq.n	800f2d4 <_scanf_float+0x350>
 800f2ba:	2945      	cmp	r1, #69	; 0x45
 800f2bc:	d00a      	beq.n	800f2d4 <_scanf_float+0x350>
 800f2be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2c2:	463a      	mov	r2, r7
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	4798      	blx	r3
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f2ce:	3b01      	subs	r3, #1
 800f2d0:	1eb5      	subs	r5, r6, #2
 800f2d2:	6123      	str	r3, [r4, #16]
 800f2d4:	463a      	mov	r2, r7
 800f2d6:	4640      	mov	r0, r8
 800f2d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f2dc:	4798      	blx	r3
 800f2de:	462e      	mov	r6, r5
 800f2e0:	6825      	ldr	r5, [r4, #0]
 800f2e2:	f015 0510 	ands.w	r5, r5, #16
 800f2e6:	d159      	bne.n	800f39c <_scanf_float+0x418>
 800f2e8:	7035      	strb	r5, [r6, #0]
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2f4:	d11c      	bne.n	800f330 <_scanf_float+0x3ac>
 800f2f6:	9b01      	ldr	r3, [sp, #4]
 800f2f8:	454b      	cmp	r3, r9
 800f2fa:	eba3 0209 	sub.w	r2, r3, r9
 800f2fe:	d124      	bne.n	800f34a <_scanf_float+0x3c6>
 800f300:	2200      	movs	r2, #0
 800f302:	4659      	mov	r1, fp
 800f304:	4640      	mov	r0, r8
 800f306:	f000 feff 	bl	8010108 <_strtod_r>
 800f30a:	f8d4 c000 	ldr.w	ip, [r4]
 800f30e:	9b03      	ldr	r3, [sp, #12]
 800f310:	f01c 0f02 	tst.w	ip, #2
 800f314:	4606      	mov	r6, r0
 800f316:	460f      	mov	r7, r1
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	d021      	beq.n	800f360 <_scanf_float+0x3dc>
 800f31c:	9903      	ldr	r1, [sp, #12]
 800f31e:	1d1a      	adds	r2, r3, #4
 800f320:	600a      	str	r2, [r1, #0]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	e9c3 6700 	strd	r6, r7, [r3]
 800f328:	68e3      	ldr	r3, [r4, #12]
 800f32a:	3301      	adds	r3, #1
 800f32c:	60e3      	str	r3, [r4, #12]
 800f32e:	e66c      	b.n	800f00a <_scanf_float+0x86>
 800f330:	9b04      	ldr	r3, [sp, #16]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d0e4      	beq.n	800f300 <_scanf_float+0x37c>
 800f336:	9905      	ldr	r1, [sp, #20]
 800f338:	230a      	movs	r3, #10
 800f33a:	462a      	mov	r2, r5
 800f33c:	4640      	mov	r0, r8
 800f33e:	3101      	adds	r1, #1
 800f340:	f000 ff6e 	bl	8010220 <_strtol_r>
 800f344:	9b04      	ldr	r3, [sp, #16]
 800f346:	9e05      	ldr	r6, [sp, #20]
 800f348:	1ac2      	subs	r2, r0, r3
 800f34a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f34e:	429e      	cmp	r6, r3
 800f350:	bf28      	it	cs
 800f352:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f356:	4630      	mov	r0, r6
 800f358:	4911      	ldr	r1, [pc, #68]	; (800f3a0 <_scanf_float+0x41c>)
 800f35a:	f000 f89f 	bl	800f49c <siprintf>
 800f35e:	e7cf      	b.n	800f300 <_scanf_float+0x37c>
 800f360:	f01c 0f04 	tst.w	ip, #4
 800f364:	f103 0e04 	add.w	lr, r3, #4
 800f368:	d003      	beq.n	800f372 <_scanf_float+0x3ee>
 800f36a:	9903      	ldr	r1, [sp, #12]
 800f36c:	f8c1 e000 	str.w	lr, [r1]
 800f370:	e7d7      	b.n	800f322 <_scanf_float+0x39e>
 800f372:	9a03      	ldr	r2, [sp, #12]
 800f374:	f8c2 e000 	str.w	lr, [r2]
 800f378:	f8d3 8000 	ldr.w	r8, [r3]
 800f37c:	4602      	mov	r2, r0
 800f37e:	460b      	mov	r3, r1
 800f380:	f7f1 fbb0 	bl	8000ae4 <__aeabi_dcmpun>
 800f384:	b128      	cbz	r0, 800f392 <_scanf_float+0x40e>
 800f386:	4807      	ldr	r0, [pc, #28]	; (800f3a4 <_scanf_float+0x420>)
 800f388:	f000 f884 	bl	800f494 <nanf>
 800f38c:	f8c8 0000 	str.w	r0, [r8]
 800f390:	e7ca      	b.n	800f328 <_scanf_float+0x3a4>
 800f392:	4630      	mov	r0, r6
 800f394:	4639      	mov	r1, r7
 800f396:	f7f1 fc03 	bl	8000ba0 <__aeabi_d2f>
 800f39a:	e7f7      	b.n	800f38c <_scanf_float+0x408>
 800f39c:	2500      	movs	r5, #0
 800f39e:	e634      	b.n	800f00a <_scanf_float+0x86>
 800f3a0:	08013e9c 	.word	0x08013e9c
 800f3a4:	08014240 	.word	0x08014240

0800f3a8 <_puts_r>:
 800f3a8:	b570      	push	{r4, r5, r6, lr}
 800f3aa:	460e      	mov	r6, r1
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	b118      	cbz	r0, 800f3b8 <_puts_r+0x10>
 800f3b0:	6983      	ldr	r3, [r0, #24]
 800f3b2:	b90b      	cbnz	r3, 800f3b8 <_puts_r+0x10>
 800f3b4:	f001 ffd0 	bl	8011358 <__sinit>
 800f3b8:	69ab      	ldr	r3, [r5, #24]
 800f3ba:	68ac      	ldr	r4, [r5, #8]
 800f3bc:	b913      	cbnz	r3, 800f3c4 <_puts_r+0x1c>
 800f3be:	4628      	mov	r0, r5
 800f3c0:	f001 ffca 	bl	8011358 <__sinit>
 800f3c4:	4b2c      	ldr	r3, [pc, #176]	; (800f478 <_puts_r+0xd0>)
 800f3c6:	429c      	cmp	r4, r3
 800f3c8:	d120      	bne.n	800f40c <_puts_r+0x64>
 800f3ca:	686c      	ldr	r4, [r5, #4]
 800f3cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3ce:	07db      	lsls	r3, r3, #31
 800f3d0:	d405      	bmi.n	800f3de <_puts_r+0x36>
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	0598      	lsls	r0, r3, #22
 800f3d6:	d402      	bmi.n	800f3de <_puts_r+0x36>
 800f3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3da:	f002 fbc6 	bl	8011b6a <__retarget_lock_acquire_recursive>
 800f3de:	89a3      	ldrh	r3, [r4, #12]
 800f3e0:	0719      	lsls	r1, r3, #28
 800f3e2:	d51d      	bpl.n	800f420 <_puts_r+0x78>
 800f3e4:	6923      	ldr	r3, [r4, #16]
 800f3e6:	b1db      	cbz	r3, 800f420 <_puts_r+0x78>
 800f3e8:	3e01      	subs	r6, #1
 800f3ea:	68a3      	ldr	r3, [r4, #8]
 800f3ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	60a3      	str	r3, [r4, #8]
 800f3f4:	bb39      	cbnz	r1, 800f446 <_puts_r+0x9e>
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	da38      	bge.n	800f46c <_puts_r+0xc4>
 800f3fa:	4622      	mov	r2, r4
 800f3fc:	210a      	movs	r1, #10
 800f3fe:	4628      	mov	r0, r5
 800f400:	f000 ff52 	bl	80102a8 <__swbuf_r>
 800f404:	3001      	adds	r0, #1
 800f406:	d011      	beq.n	800f42c <_puts_r+0x84>
 800f408:	250a      	movs	r5, #10
 800f40a:	e011      	b.n	800f430 <_puts_r+0x88>
 800f40c:	4b1b      	ldr	r3, [pc, #108]	; (800f47c <_puts_r+0xd4>)
 800f40e:	429c      	cmp	r4, r3
 800f410:	d101      	bne.n	800f416 <_puts_r+0x6e>
 800f412:	68ac      	ldr	r4, [r5, #8]
 800f414:	e7da      	b.n	800f3cc <_puts_r+0x24>
 800f416:	4b1a      	ldr	r3, [pc, #104]	; (800f480 <_puts_r+0xd8>)
 800f418:	429c      	cmp	r4, r3
 800f41a:	bf08      	it	eq
 800f41c:	68ec      	ldreq	r4, [r5, #12]
 800f41e:	e7d5      	b.n	800f3cc <_puts_r+0x24>
 800f420:	4621      	mov	r1, r4
 800f422:	4628      	mov	r0, r5
 800f424:	f000 ff92 	bl	801034c <__swsetup_r>
 800f428:	2800      	cmp	r0, #0
 800f42a:	d0dd      	beq.n	800f3e8 <_puts_r+0x40>
 800f42c:	f04f 35ff 	mov.w	r5, #4294967295
 800f430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f432:	07da      	lsls	r2, r3, #31
 800f434:	d405      	bmi.n	800f442 <_puts_r+0x9a>
 800f436:	89a3      	ldrh	r3, [r4, #12]
 800f438:	059b      	lsls	r3, r3, #22
 800f43a:	d402      	bmi.n	800f442 <_puts_r+0x9a>
 800f43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f43e:	f002 fb95 	bl	8011b6c <__retarget_lock_release_recursive>
 800f442:	4628      	mov	r0, r5
 800f444:	bd70      	pop	{r4, r5, r6, pc}
 800f446:	2b00      	cmp	r3, #0
 800f448:	da04      	bge.n	800f454 <_puts_r+0xac>
 800f44a:	69a2      	ldr	r2, [r4, #24]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	dc06      	bgt.n	800f45e <_puts_r+0xb6>
 800f450:	290a      	cmp	r1, #10
 800f452:	d004      	beq.n	800f45e <_puts_r+0xb6>
 800f454:	6823      	ldr	r3, [r4, #0]
 800f456:	1c5a      	adds	r2, r3, #1
 800f458:	6022      	str	r2, [r4, #0]
 800f45a:	7019      	strb	r1, [r3, #0]
 800f45c:	e7c5      	b.n	800f3ea <_puts_r+0x42>
 800f45e:	4622      	mov	r2, r4
 800f460:	4628      	mov	r0, r5
 800f462:	f000 ff21 	bl	80102a8 <__swbuf_r>
 800f466:	3001      	adds	r0, #1
 800f468:	d1bf      	bne.n	800f3ea <_puts_r+0x42>
 800f46a:	e7df      	b.n	800f42c <_puts_r+0x84>
 800f46c:	250a      	movs	r5, #10
 800f46e:	6823      	ldr	r3, [r4, #0]
 800f470:	1c5a      	adds	r2, r3, #1
 800f472:	6022      	str	r2, [r4, #0]
 800f474:	701d      	strb	r5, [r3, #0]
 800f476:	e7db      	b.n	800f430 <_puts_r+0x88>
 800f478:	08013fd4 	.word	0x08013fd4
 800f47c:	08013ff4 	.word	0x08013ff4
 800f480:	08013fb4 	.word	0x08013fb4

0800f484 <puts>:
 800f484:	4b02      	ldr	r3, [pc, #8]	; (800f490 <puts+0xc>)
 800f486:	4601      	mov	r1, r0
 800f488:	6818      	ldr	r0, [r3, #0]
 800f48a:	f7ff bf8d 	b.w	800f3a8 <_puts_r>
 800f48e:	bf00      	nop
 800f490:	2000007c 	.word	0x2000007c

0800f494 <nanf>:
 800f494:	4800      	ldr	r0, [pc, #0]	; (800f498 <nanf+0x4>)
 800f496:	4770      	bx	lr
 800f498:	7fc00000 	.word	0x7fc00000

0800f49c <siprintf>:
 800f49c:	b40e      	push	{r1, r2, r3}
 800f49e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4a2:	b500      	push	{lr}
 800f4a4:	b09c      	sub	sp, #112	; 0x70
 800f4a6:	ab1d      	add	r3, sp, #116	; 0x74
 800f4a8:	9002      	str	r0, [sp, #8]
 800f4aa:	9006      	str	r0, [sp, #24]
 800f4ac:	9107      	str	r1, [sp, #28]
 800f4ae:	9104      	str	r1, [sp, #16]
 800f4b0:	4808      	ldr	r0, [pc, #32]	; (800f4d4 <siprintf+0x38>)
 800f4b2:	4909      	ldr	r1, [pc, #36]	; (800f4d8 <siprintf+0x3c>)
 800f4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4b8:	9105      	str	r1, [sp, #20]
 800f4ba:	6800      	ldr	r0, [r0, #0]
 800f4bc:	a902      	add	r1, sp, #8
 800f4be:	9301      	str	r3, [sp, #4]
 800f4c0:	f003 f9aa 	bl	8012818 <_svfiprintf_r>
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	9b02      	ldr	r3, [sp, #8]
 800f4c8:	701a      	strb	r2, [r3, #0]
 800f4ca:	b01c      	add	sp, #112	; 0x70
 800f4cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4d0:	b003      	add	sp, #12
 800f4d2:	4770      	bx	lr
 800f4d4:	2000007c 	.word	0x2000007c
 800f4d8:	ffff0208 	.word	0xffff0208

0800f4dc <sulp>:
 800f4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e0:	460f      	mov	r7, r1
 800f4e2:	4690      	mov	r8, r2
 800f4e4:	f002 ff40 	bl	8012368 <__ulp>
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	460d      	mov	r5, r1
 800f4ec:	f1b8 0f00 	cmp.w	r8, #0
 800f4f0:	d011      	beq.n	800f516 <sulp+0x3a>
 800f4f2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800f4f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	dd0b      	ble.n	800f516 <sulp+0x3a>
 800f4fe:	2400      	movs	r4, #0
 800f500:	051b      	lsls	r3, r3, #20
 800f502:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f506:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f50a:	4622      	mov	r2, r4
 800f50c:	462b      	mov	r3, r5
 800f50e:	f7f1 f84f 	bl	80005b0 <__aeabi_dmul>
 800f512:	4604      	mov	r4, r0
 800f514:	460d      	mov	r5, r1
 800f516:	4620      	mov	r0, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800f520 <_strtod_l>:
 800f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f524:	469b      	mov	fp, r3
 800f526:	2300      	movs	r3, #0
 800f528:	b0a1      	sub	sp, #132	; 0x84
 800f52a:	931c      	str	r3, [sp, #112]	; 0x70
 800f52c:	4ba1      	ldr	r3, [pc, #644]	; (800f7b4 <_strtod_l+0x294>)
 800f52e:	4682      	mov	sl, r0
 800f530:	681f      	ldr	r7, [r3, #0]
 800f532:	460e      	mov	r6, r1
 800f534:	4638      	mov	r0, r7
 800f536:	9217      	str	r2, [sp, #92]	; 0x5c
 800f538:	f7f0 fe76 	bl	8000228 <strlen>
 800f53c:	f04f 0800 	mov.w	r8, #0
 800f540:	4604      	mov	r4, r0
 800f542:	f04f 0900 	mov.w	r9, #0
 800f546:	961b      	str	r6, [sp, #108]	; 0x6c
 800f548:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f54a:	781a      	ldrb	r2, [r3, #0]
 800f54c:	2a2b      	cmp	r2, #43	; 0x2b
 800f54e:	d04c      	beq.n	800f5ea <_strtod_l+0xca>
 800f550:	d83a      	bhi.n	800f5c8 <_strtod_l+0xa8>
 800f552:	2a0d      	cmp	r2, #13
 800f554:	d833      	bhi.n	800f5be <_strtod_l+0x9e>
 800f556:	2a08      	cmp	r2, #8
 800f558:	d833      	bhi.n	800f5c2 <_strtod_l+0xa2>
 800f55a:	2a00      	cmp	r2, #0
 800f55c:	d03d      	beq.n	800f5da <_strtod_l+0xba>
 800f55e:	2300      	movs	r3, #0
 800f560:	930c      	str	r3, [sp, #48]	; 0x30
 800f562:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f564:	782b      	ldrb	r3, [r5, #0]
 800f566:	2b30      	cmp	r3, #48	; 0x30
 800f568:	f040 80af 	bne.w	800f6ca <_strtod_l+0x1aa>
 800f56c:	786b      	ldrb	r3, [r5, #1]
 800f56e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f572:	2b58      	cmp	r3, #88	; 0x58
 800f574:	d16c      	bne.n	800f650 <_strtod_l+0x130>
 800f576:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f578:	4650      	mov	r0, sl
 800f57a:	9301      	str	r3, [sp, #4]
 800f57c:	ab1c      	add	r3, sp, #112	; 0x70
 800f57e:	9300      	str	r3, [sp, #0]
 800f580:	4a8d      	ldr	r2, [pc, #564]	; (800f7b8 <_strtod_l+0x298>)
 800f582:	f8cd b008 	str.w	fp, [sp, #8]
 800f586:	ab1d      	add	r3, sp, #116	; 0x74
 800f588:	a91b      	add	r1, sp, #108	; 0x6c
 800f58a:	f001 ffeb 	bl	8011564 <__gethex>
 800f58e:	f010 0607 	ands.w	r6, r0, #7
 800f592:	4604      	mov	r4, r0
 800f594:	d005      	beq.n	800f5a2 <_strtod_l+0x82>
 800f596:	2e06      	cmp	r6, #6
 800f598:	d129      	bne.n	800f5ee <_strtod_l+0xce>
 800f59a:	2300      	movs	r3, #0
 800f59c:	3501      	adds	r5, #1
 800f59e:	951b      	str	r5, [sp, #108]	; 0x6c
 800f5a0:	930c      	str	r3, [sp, #48]	; 0x30
 800f5a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f040 8596 	bne.w	80100d6 <_strtod_l+0xbb6>
 800f5aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ac:	b1d3      	cbz	r3, 800f5e4 <_strtod_l+0xc4>
 800f5ae:	4642      	mov	r2, r8
 800f5b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	b021      	add	sp, #132	; 0x84
 800f5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5be:	2a20      	cmp	r2, #32
 800f5c0:	d1cd      	bne.n	800f55e <_strtod_l+0x3e>
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	931b      	str	r3, [sp, #108]	; 0x6c
 800f5c6:	e7bf      	b.n	800f548 <_strtod_l+0x28>
 800f5c8:	2a2d      	cmp	r2, #45	; 0x2d
 800f5ca:	d1c8      	bne.n	800f55e <_strtod_l+0x3e>
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	920c      	str	r2, [sp, #48]	; 0x30
 800f5d0:	1c5a      	adds	r2, r3, #1
 800f5d2:	921b      	str	r2, [sp, #108]	; 0x6c
 800f5d4:	785b      	ldrb	r3, [r3, #1]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1c3      	bne.n	800f562 <_strtod_l+0x42>
 800f5da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f5dc:	961b      	str	r6, [sp, #108]	; 0x6c
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f040 8577 	bne.w	80100d2 <_strtod_l+0xbb2>
 800f5e4:	4642      	mov	r2, r8
 800f5e6:	464b      	mov	r3, r9
 800f5e8:	e7e4      	b.n	800f5b4 <_strtod_l+0x94>
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	e7ef      	b.n	800f5ce <_strtod_l+0xae>
 800f5ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f5f0:	b13a      	cbz	r2, 800f602 <_strtod_l+0xe2>
 800f5f2:	2135      	movs	r1, #53	; 0x35
 800f5f4:	a81e      	add	r0, sp, #120	; 0x78
 800f5f6:	f002 ffbb 	bl	8012570 <__copybits>
 800f5fa:	4650      	mov	r0, sl
 800f5fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f5fe:	f002 fb83 	bl	8011d08 <_Bfree>
 800f602:	3e01      	subs	r6, #1
 800f604:	2e05      	cmp	r6, #5
 800f606:	d807      	bhi.n	800f618 <_strtod_l+0xf8>
 800f608:	e8df f006 	tbb	[pc, r6]
 800f60c:	1d180b0e 	.word	0x1d180b0e
 800f610:	030e      	.short	0x030e
 800f612:	f04f 0900 	mov.w	r9, #0
 800f616:	46c8      	mov	r8, r9
 800f618:	0721      	lsls	r1, r4, #28
 800f61a:	d5c2      	bpl.n	800f5a2 <_strtod_l+0x82>
 800f61c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800f620:	e7bf      	b.n	800f5a2 <_strtod_l+0x82>
 800f622:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800f626:	e7f7      	b.n	800f618 <_strtod_l+0xf8>
 800f628:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f62a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800f62e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f632:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f636:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f63a:	e7ed      	b.n	800f618 <_strtod_l+0xf8>
 800f63c:	f04f 0800 	mov.w	r8, #0
 800f640:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f7bc <_strtod_l+0x29c>
 800f644:	e7e8      	b.n	800f618 <_strtod_l+0xf8>
 800f646:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f64a:	f04f 38ff 	mov.w	r8, #4294967295
 800f64e:	e7e3      	b.n	800f618 <_strtod_l+0xf8>
 800f650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	921b      	str	r2, [sp, #108]	; 0x6c
 800f656:	785b      	ldrb	r3, [r3, #1]
 800f658:	2b30      	cmp	r3, #48	; 0x30
 800f65a:	d0f9      	beq.n	800f650 <_strtod_l+0x130>
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d0a0      	beq.n	800f5a2 <_strtod_l+0x82>
 800f660:	2301      	movs	r3, #1
 800f662:	9307      	str	r3, [sp, #28]
 800f664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f666:	220a      	movs	r2, #10
 800f668:	9308      	str	r3, [sp, #32]
 800f66a:	2300      	movs	r3, #0
 800f66c:	469b      	mov	fp, r3
 800f66e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f672:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f674:	7805      	ldrb	r5, [r0, #0]
 800f676:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800f67a:	b2d9      	uxtb	r1, r3
 800f67c:	2909      	cmp	r1, #9
 800f67e:	d926      	bls.n	800f6ce <_strtod_l+0x1ae>
 800f680:	4622      	mov	r2, r4
 800f682:	4639      	mov	r1, r7
 800f684:	f003 fa1b 	bl	8012abe <strncmp>
 800f688:	2800      	cmp	r0, #0
 800f68a:	d032      	beq.n	800f6f2 <_strtod_l+0x1d2>
 800f68c:	2000      	movs	r0, #0
 800f68e:	462b      	mov	r3, r5
 800f690:	465c      	mov	r4, fp
 800f692:	4602      	mov	r2, r0
 800f694:	9004      	str	r0, [sp, #16]
 800f696:	2b65      	cmp	r3, #101	; 0x65
 800f698:	d001      	beq.n	800f69e <_strtod_l+0x17e>
 800f69a:	2b45      	cmp	r3, #69	; 0x45
 800f69c:	d113      	bne.n	800f6c6 <_strtod_l+0x1a6>
 800f69e:	b91c      	cbnz	r4, 800f6a8 <_strtod_l+0x188>
 800f6a0:	9b07      	ldr	r3, [sp, #28]
 800f6a2:	4303      	orrs	r3, r0
 800f6a4:	d099      	beq.n	800f5da <_strtod_l+0xba>
 800f6a6:	2400      	movs	r4, #0
 800f6a8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f6aa:	1c73      	adds	r3, r6, #1
 800f6ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800f6ae:	7873      	ldrb	r3, [r6, #1]
 800f6b0:	2b2b      	cmp	r3, #43	; 0x2b
 800f6b2:	d078      	beq.n	800f7a6 <_strtod_l+0x286>
 800f6b4:	2b2d      	cmp	r3, #45	; 0x2d
 800f6b6:	d07b      	beq.n	800f7b0 <_strtod_l+0x290>
 800f6b8:	2700      	movs	r7, #0
 800f6ba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f6be:	2909      	cmp	r1, #9
 800f6c0:	f240 8082 	bls.w	800f7c8 <_strtod_l+0x2a8>
 800f6c4:	961b      	str	r6, [sp, #108]	; 0x6c
 800f6c6:	2500      	movs	r5, #0
 800f6c8:	e09e      	b.n	800f808 <_strtod_l+0x2e8>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e7c9      	b.n	800f662 <_strtod_l+0x142>
 800f6ce:	f1bb 0f08 	cmp.w	fp, #8
 800f6d2:	bfd5      	itete	le
 800f6d4:	9906      	ldrle	r1, [sp, #24]
 800f6d6:	9905      	ldrgt	r1, [sp, #20]
 800f6d8:	fb02 3301 	mlale	r3, r2, r1, r3
 800f6dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f6e0:	f100 0001 	add.w	r0, r0, #1
 800f6e4:	bfd4      	ite	le
 800f6e6:	9306      	strle	r3, [sp, #24]
 800f6e8:	9305      	strgt	r3, [sp, #20]
 800f6ea:	f10b 0b01 	add.w	fp, fp, #1
 800f6ee:	901b      	str	r0, [sp, #108]	; 0x6c
 800f6f0:	e7bf      	b.n	800f672 <_strtod_l+0x152>
 800f6f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f6f4:	191a      	adds	r2, r3, r4
 800f6f6:	921b      	str	r2, [sp, #108]	; 0x6c
 800f6f8:	5d1b      	ldrb	r3, [r3, r4]
 800f6fa:	f1bb 0f00 	cmp.w	fp, #0
 800f6fe:	d036      	beq.n	800f76e <_strtod_l+0x24e>
 800f700:	465c      	mov	r4, fp
 800f702:	9004      	str	r0, [sp, #16]
 800f704:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f708:	2a09      	cmp	r2, #9
 800f70a:	d912      	bls.n	800f732 <_strtod_l+0x212>
 800f70c:	2201      	movs	r2, #1
 800f70e:	e7c2      	b.n	800f696 <_strtod_l+0x176>
 800f710:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f712:	3001      	adds	r0, #1
 800f714:	1c5a      	adds	r2, r3, #1
 800f716:	921b      	str	r2, [sp, #108]	; 0x6c
 800f718:	785b      	ldrb	r3, [r3, #1]
 800f71a:	2b30      	cmp	r3, #48	; 0x30
 800f71c:	d0f8      	beq.n	800f710 <_strtod_l+0x1f0>
 800f71e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f722:	2a08      	cmp	r2, #8
 800f724:	f200 84dc 	bhi.w	80100e0 <_strtod_l+0xbc0>
 800f728:	9004      	str	r0, [sp, #16]
 800f72a:	2000      	movs	r0, #0
 800f72c:	4604      	mov	r4, r0
 800f72e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f730:	9208      	str	r2, [sp, #32]
 800f732:	3b30      	subs	r3, #48	; 0x30
 800f734:	f100 0201 	add.w	r2, r0, #1
 800f738:	d013      	beq.n	800f762 <_strtod_l+0x242>
 800f73a:	9904      	ldr	r1, [sp, #16]
 800f73c:	1905      	adds	r5, r0, r4
 800f73e:	4411      	add	r1, r2
 800f740:	9104      	str	r1, [sp, #16]
 800f742:	4622      	mov	r2, r4
 800f744:	210a      	movs	r1, #10
 800f746:	42aa      	cmp	r2, r5
 800f748:	d113      	bne.n	800f772 <_strtod_l+0x252>
 800f74a:	1822      	adds	r2, r4, r0
 800f74c:	2a08      	cmp	r2, #8
 800f74e:	f104 0401 	add.w	r4, r4, #1
 800f752:	4404      	add	r4, r0
 800f754:	dc1b      	bgt.n	800f78e <_strtod_l+0x26e>
 800f756:	220a      	movs	r2, #10
 800f758:	9906      	ldr	r1, [sp, #24]
 800f75a:	fb02 3301 	mla	r3, r2, r1, r3
 800f75e:	9306      	str	r3, [sp, #24]
 800f760:	2200      	movs	r2, #0
 800f762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f764:	4610      	mov	r0, r2
 800f766:	1c59      	adds	r1, r3, #1
 800f768:	911b      	str	r1, [sp, #108]	; 0x6c
 800f76a:	785b      	ldrb	r3, [r3, #1]
 800f76c:	e7ca      	b.n	800f704 <_strtod_l+0x1e4>
 800f76e:	4658      	mov	r0, fp
 800f770:	e7d3      	b.n	800f71a <_strtod_l+0x1fa>
 800f772:	2a08      	cmp	r2, #8
 800f774:	dc04      	bgt.n	800f780 <_strtod_l+0x260>
 800f776:	9f06      	ldr	r7, [sp, #24]
 800f778:	434f      	muls	r7, r1
 800f77a:	9706      	str	r7, [sp, #24]
 800f77c:	3201      	adds	r2, #1
 800f77e:	e7e2      	b.n	800f746 <_strtod_l+0x226>
 800f780:	1c57      	adds	r7, r2, #1
 800f782:	2f10      	cmp	r7, #16
 800f784:	bfde      	ittt	le
 800f786:	9f05      	ldrle	r7, [sp, #20]
 800f788:	434f      	mulle	r7, r1
 800f78a:	9705      	strle	r7, [sp, #20]
 800f78c:	e7f6      	b.n	800f77c <_strtod_l+0x25c>
 800f78e:	2c10      	cmp	r4, #16
 800f790:	bfdf      	itttt	le
 800f792:	220a      	movle	r2, #10
 800f794:	9905      	ldrle	r1, [sp, #20]
 800f796:	fb02 3301 	mlale	r3, r2, r1, r3
 800f79a:	9305      	strle	r3, [sp, #20]
 800f79c:	e7e0      	b.n	800f760 <_strtod_l+0x240>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	9304      	str	r3, [sp, #16]
 800f7a4:	e77c      	b.n	800f6a0 <_strtod_l+0x180>
 800f7a6:	2700      	movs	r7, #0
 800f7a8:	1cb3      	adds	r3, r6, #2
 800f7aa:	931b      	str	r3, [sp, #108]	; 0x6c
 800f7ac:	78b3      	ldrb	r3, [r6, #2]
 800f7ae:	e784      	b.n	800f6ba <_strtod_l+0x19a>
 800f7b0:	2701      	movs	r7, #1
 800f7b2:	e7f9      	b.n	800f7a8 <_strtod_l+0x288>
 800f7b4:	08014080 	.word	0x08014080
 800f7b8:	08013ea4 	.word	0x08013ea4
 800f7bc:	7ff00000 	.word	0x7ff00000
 800f7c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7c2:	1c59      	adds	r1, r3, #1
 800f7c4:	911b      	str	r1, [sp, #108]	; 0x6c
 800f7c6:	785b      	ldrb	r3, [r3, #1]
 800f7c8:	2b30      	cmp	r3, #48	; 0x30
 800f7ca:	d0f9      	beq.n	800f7c0 <_strtod_l+0x2a0>
 800f7cc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800f7d0:	2908      	cmp	r1, #8
 800f7d2:	f63f af78 	bhi.w	800f6c6 <_strtod_l+0x1a6>
 800f7d6:	f04f 0e0a 	mov.w	lr, #10
 800f7da:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800f7de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7e0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f7e4:	1c59      	adds	r1, r3, #1
 800f7e6:	911b      	str	r1, [sp, #108]	; 0x6c
 800f7e8:	785b      	ldrb	r3, [r3, #1]
 800f7ea:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800f7ee:	2d09      	cmp	r5, #9
 800f7f0:	d935      	bls.n	800f85e <_strtod_l+0x33e>
 800f7f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f7f4:	1b49      	subs	r1, r1, r5
 800f7f6:	2908      	cmp	r1, #8
 800f7f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800f7fc:	dc02      	bgt.n	800f804 <_strtod_l+0x2e4>
 800f7fe:	4565      	cmp	r5, ip
 800f800:	bfa8      	it	ge
 800f802:	4665      	movge	r5, ip
 800f804:	b107      	cbz	r7, 800f808 <_strtod_l+0x2e8>
 800f806:	426d      	negs	r5, r5
 800f808:	2c00      	cmp	r4, #0
 800f80a:	d14c      	bne.n	800f8a6 <_strtod_l+0x386>
 800f80c:	9907      	ldr	r1, [sp, #28]
 800f80e:	4301      	orrs	r1, r0
 800f810:	f47f aec7 	bne.w	800f5a2 <_strtod_l+0x82>
 800f814:	2a00      	cmp	r2, #0
 800f816:	f47f aee0 	bne.w	800f5da <_strtod_l+0xba>
 800f81a:	2b69      	cmp	r3, #105	; 0x69
 800f81c:	d026      	beq.n	800f86c <_strtod_l+0x34c>
 800f81e:	dc23      	bgt.n	800f868 <_strtod_l+0x348>
 800f820:	2b49      	cmp	r3, #73	; 0x49
 800f822:	d023      	beq.n	800f86c <_strtod_l+0x34c>
 800f824:	2b4e      	cmp	r3, #78	; 0x4e
 800f826:	f47f aed8 	bne.w	800f5da <_strtod_l+0xba>
 800f82a:	499c      	ldr	r1, [pc, #624]	; (800fa9c <_strtod_l+0x57c>)
 800f82c:	a81b      	add	r0, sp, #108	; 0x6c
 800f82e:	f002 f8e7 	bl	8011a00 <__match>
 800f832:	2800      	cmp	r0, #0
 800f834:	f43f aed1 	beq.w	800f5da <_strtod_l+0xba>
 800f838:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	2b28      	cmp	r3, #40	; 0x28
 800f83e:	d12c      	bne.n	800f89a <_strtod_l+0x37a>
 800f840:	4997      	ldr	r1, [pc, #604]	; (800faa0 <_strtod_l+0x580>)
 800f842:	aa1e      	add	r2, sp, #120	; 0x78
 800f844:	a81b      	add	r0, sp, #108	; 0x6c
 800f846:	f002 f8ef 	bl	8011a28 <__hexnan>
 800f84a:	2805      	cmp	r0, #5
 800f84c:	d125      	bne.n	800f89a <_strtod_l+0x37a>
 800f84e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f850:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800f854:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f858:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f85c:	e6a1      	b.n	800f5a2 <_strtod_l+0x82>
 800f85e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800f862:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800f866:	e7bc      	b.n	800f7e2 <_strtod_l+0x2c2>
 800f868:	2b6e      	cmp	r3, #110	; 0x6e
 800f86a:	e7dc      	b.n	800f826 <_strtod_l+0x306>
 800f86c:	498d      	ldr	r1, [pc, #564]	; (800faa4 <_strtod_l+0x584>)
 800f86e:	a81b      	add	r0, sp, #108	; 0x6c
 800f870:	f002 f8c6 	bl	8011a00 <__match>
 800f874:	2800      	cmp	r0, #0
 800f876:	f43f aeb0 	beq.w	800f5da <_strtod_l+0xba>
 800f87a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f87c:	498a      	ldr	r1, [pc, #552]	; (800faa8 <_strtod_l+0x588>)
 800f87e:	3b01      	subs	r3, #1
 800f880:	a81b      	add	r0, sp, #108	; 0x6c
 800f882:	931b      	str	r3, [sp, #108]	; 0x6c
 800f884:	f002 f8bc 	bl	8011a00 <__match>
 800f888:	b910      	cbnz	r0, 800f890 <_strtod_l+0x370>
 800f88a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f88c:	3301      	adds	r3, #1
 800f88e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f890:	f04f 0800 	mov.w	r8, #0
 800f894:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800fab8 <_strtod_l+0x598>
 800f898:	e683      	b.n	800f5a2 <_strtod_l+0x82>
 800f89a:	4884      	ldr	r0, [pc, #528]	; (800faac <_strtod_l+0x58c>)
 800f89c:	f7fe feb2 	bl	800e604 <nan>
 800f8a0:	4680      	mov	r8, r0
 800f8a2:	4689      	mov	r9, r1
 800f8a4:	e67d      	b.n	800f5a2 <_strtod_l+0x82>
 800f8a6:	9b04      	ldr	r3, [sp, #16]
 800f8a8:	f1bb 0f00 	cmp.w	fp, #0
 800f8ac:	bf08      	it	eq
 800f8ae:	46a3      	moveq	fp, r4
 800f8b0:	1aeb      	subs	r3, r5, r3
 800f8b2:	2c10      	cmp	r4, #16
 800f8b4:	9806      	ldr	r0, [sp, #24]
 800f8b6:	4626      	mov	r6, r4
 800f8b8:	9307      	str	r3, [sp, #28]
 800f8ba:	bfa8      	it	ge
 800f8bc:	2610      	movge	r6, #16
 800f8be:	f7f0 fdfd 	bl	80004bc <__aeabi_ui2d>
 800f8c2:	2c09      	cmp	r4, #9
 800f8c4:	4680      	mov	r8, r0
 800f8c6:	4689      	mov	r9, r1
 800f8c8:	dd13      	ble.n	800f8f2 <_strtod_l+0x3d2>
 800f8ca:	4b79      	ldr	r3, [pc, #484]	; (800fab0 <_strtod_l+0x590>)
 800f8cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f8d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f8d4:	f7f0 fe6c 	bl	80005b0 <__aeabi_dmul>
 800f8d8:	4680      	mov	r8, r0
 800f8da:	9805      	ldr	r0, [sp, #20]
 800f8dc:	4689      	mov	r9, r1
 800f8de:	f7f0 fded 	bl	80004bc <__aeabi_ui2d>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	4640      	mov	r0, r8
 800f8e8:	4649      	mov	r1, r9
 800f8ea:	f7f0 fcab 	bl	8000244 <__adddf3>
 800f8ee:	4680      	mov	r8, r0
 800f8f0:	4689      	mov	r9, r1
 800f8f2:	2c0f      	cmp	r4, #15
 800f8f4:	dc36      	bgt.n	800f964 <_strtod_l+0x444>
 800f8f6:	9b07      	ldr	r3, [sp, #28]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f43f ae52 	beq.w	800f5a2 <_strtod_l+0x82>
 800f8fe:	dd22      	ble.n	800f946 <_strtod_l+0x426>
 800f900:	2b16      	cmp	r3, #22
 800f902:	dc09      	bgt.n	800f918 <_strtod_l+0x3f8>
 800f904:	4c6a      	ldr	r4, [pc, #424]	; (800fab0 <_strtod_l+0x590>)
 800f906:	4642      	mov	r2, r8
 800f908:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800f90c:	464b      	mov	r3, r9
 800f90e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f912:	f7f0 fe4d 	bl	80005b0 <__aeabi_dmul>
 800f916:	e7c3      	b.n	800f8a0 <_strtod_l+0x380>
 800f918:	9a07      	ldr	r2, [sp, #28]
 800f91a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f91e:	4293      	cmp	r3, r2
 800f920:	db20      	blt.n	800f964 <_strtod_l+0x444>
 800f922:	4d63      	ldr	r5, [pc, #396]	; (800fab0 <_strtod_l+0x590>)
 800f924:	f1c4 040f 	rsb	r4, r4, #15
 800f928:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f92c:	4642      	mov	r2, r8
 800f92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f932:	464b      	mov	r3, r9
 800f934:	f7f0 fe3c 	bl	80005b0 <__aeabi_dmul>
 800f938:	9b07      	ldr	r3, [sp, #28]
 800f93a:	1b1c      	subs	r4, r3, r4
 800f93c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f940:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f944:	e7e5      	b.n	800f912 <_strtod_l+0x3f2>
 800f946:	9b07      	ldr	r3, [sp, #28]
 800f948:	3316      	adds	r3, #22
 800f94a:	db0b      	blt.n	800f964 <_strtod_l+0x444>
 800f94c:	9b04      	ldr	r3, [sp, #16]
 800f94e:	4a58      	ldr	r2, [pc, #352]	; (800fab0 <_strtod_l+0x590>)
 800f950:	1b5d      	subs	r5, r3, r5
 800f952:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f956:	4640      	mov	r0, r8
 800f958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f95c:	4649      	mov	r1, r9
 800f95e:	f7f0 ff51 	bl	8000804 <__aeabi_ddiv>
 800f962:	e79d      	b.n	800f8a0 <_strtod_l+0x380>
 800f964:	9b07      	ldr	r3, [sp, #28]
 800f966:	1ba6      	subs	r6, r4, r6
 800f968:	441e      	add	r6, r3
 800f96a:	2e00      	cmp	r6, #0
 800f96c:	dd71      	ble.n	800fa52 <_strtod_l+0x532>
 800f96e:	f016 030f 	ands.w	r3, r6, #15
 800f972:	d00a      	beq.n	800f98a <_strtod_l+0x46a>
 800f974:	494e      	ldr	r1, [pc, #312]	; (800fab0 <_strtod_l+0x590>)
 800f976:	4642      	mov	r2, r8
 800f978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f97c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f980:	464b      	mov	r3, r9
 800f982:	f7f0 fe15 	bl	80005b0 <__aeabi_dmul>
 800f986:	4680      	mov	r8, r0
 800f988:	4689      	mov	r9, r1
 800f98a:	f036 060f 	bics.w	r6, r6, #15
 800f98e:	d050      	beq.n	800fa32 <_strtod_l+0x512>
 800f990:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800f994:	dd27      	ble.n	800f9e6 <_strtod_l+0x4c6>
 800f996:	f04f 0b00 	mov.w	fp, #0
 800f99a:	f8cd b010 	str.w	fp, [sp, #16]
 800f99e:	f8cd b020 	str.w	fp, [sp, #32]
 800f9a2:	f8cd b018 	str.w	fp, [sp, #24]
 800f9a6:	2322      	movs	r3, #34	; 0x22
 800f9a8:	f04f 0800 	mov.w	r8, #0
 800f9ac:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800fab8 <_strtod_l+0x598>
 800f9b0:	f8ca 3000 	str.w	r3, [sl]
 800f9b4:	9b08      	ldr	r3, [sp, #32]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f43f adf3 	beq.w	800f5a2 <_strtod_l+0x82>
 800f9bc:	4650      	mov	r0, sl
 800f9be:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f9c0:	f002 f9a2 	bl	8011d08 <_Bfree>
 800f9c4:	4650      	mov	r0, sl
 800f9c6:	9906      	ldr	r1, [sp, #24]
 800f9c8:	f002 f99e 	bl	8011d08 <_Bfree>
 800f9cc:	4650      	mov	r0, sl
 800f9ce:	9904      	ldr	r1, [sp, #16]
 800f9d0:	f002 f99a 	bl	8011d08 <_Bfree>
 800f9d4:	4650      	mov	r0, sl
 800f9d6:	9908      	ldr	r1, [sp, #32]
 800f9d8:	f002 f996 	bl	8011d08 <_Bfree>
 800f9dc:	4659      	mov	r1, fp
 800f9de:	4650      	mov	r0, sl
 800f9e0:	f002 f992 	bl	8011d08 <_Bfree>
 800f9e4:	e5dd      	b.n	800f5a2 <_strtod_l+0x82>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	4649      	mov	r1, r9
 800f9ec:	461f      	mov	r7, r3
 800f9ee:	1136      	asrs	r6, r6, #4
 800f9f0:	2e01      	cmp	r6, #1
 800f9f2:	dc21      	bgt.n	800fa38 <_strtod_l+0x518>
 800f9f4:	b10b      	cbz	r3, 800f9fa <_strtod_l+0x4da>
 800f9f6:	4680      	mov	r8, r0
 800f9f8:	4689      	mov	r9, r1
 800f9fa:	4b2e      	ldr	r3, [pc, #184]	; (800fab4 <_strtod_l+0x594>)
 800f9fc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800fa00:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fa04:	4642      	mov	r2, r8
 800fa06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fa0a:	464b      	mov	r3, r9
 800fa0c:	f7f0 fdd0 	bl	80005b0 <__aeabi_dmul>
 800fa10:	4b29      	ldr	r3, [pc, #164]	; (800fab8 <_strtod_l+0x598>)
 800fa12:	460a      	mov	r2, r1
 800fa14:	400b      	ands	r3, r1
 800fa16:	4929      	ldr	r1, [pc, #164]	; (800fabc <_strtod_l+0x59c>)
 800fa18:	4680      	mov	r8, r0
 800fa1a:	428b      	cmp	r3, r1
 800fa1c:	d8bb      	bhi.n	800f996 <_strtod_l+0x476>
 800fa1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fa22:	428b      	cmp	r3, r1
 800fa24:	bf86      	itte	hi
 800fa26:	f04f 38ff 	movhi.w	r8, #4294967295
 800fa2a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800fac0 <_strtod_l+0x5a0>
 800fa2e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800fa32:	2300      	movs	r3, #0
 800fa34:	9305      	str	r3, [sp, #20]
 800fa36:	e07e      	b.n	800fb36 <_strtod_l+0x616>
 800fa38:	07f2      	lsls	r2, r6, #31
 800fa3a:	d507      	bpl.n	800fa4c <_strtod_l+0x52c>
 800fa3c:	4b1d      	ldr	r3, [pc, #116]	; (800fab4 <_strtod_l+0x594>)
 800fa3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f0 fdb3 	bl	80005b0 <__aeabi_dmul>
 800fa4a:	2301      	movs	r3, #1
 800fa4c:	3701      	adds	r7, #1
 800fa4e:	1076      	asrs	r6, r6, #1
 800fa50:	e7ce      	b.n	800f9f0 <_strtod_l+0x4d0>
 800fa52:	d0ee      	beq.n	800fa32 <_strtod_l+0x512>
 800fa54:	4276      	negs	r6, r6
 800fa56:	f016 020f 	ands.w	r2, r6, #15
 800fa5a:	d00a      	beq.n	800fa72 <_strtod_l+0x552>
 800fa5c:	4b14      	ldr	r3, [pc, #80]	; (800fab0 <_strtod_l+0x590>)
 800fa5e:	4640      	mov	r0, r8
 800fa60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa64:	4649      	mov	r1, r9
 800fa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6a:	f7f0 fecb 	bl	8000804 <__aeabi_ddiv>
 800fa6e:	4680      	mov	r8, r0
 800fa70:	4689      	mov	r9, r1
 800fa72:	1136      	asrs	r6, r6, #4
 800fa74:	d0dd      	beq.n	800fa32 <_strtod_l+0x512>
 800fa76:	2e1f      	cmp	r6, #31
 800fa78:	dd24      	ble.n	800fac4 <_strtod_l+0x5a4>
 800fa7a:	f04f 0b00 	mov.w	fp, #0
 800fa7e:	f8cd b010 	str.w	fp, [sp, #16]
 800fa82:	f8cd b020 	str.w	fp, [sp, #32]
 800fa86:	f8cd b018 	str.w	fp, [sp, #24]
 800fa8a:	2322      	movs	r3, #34	; 0x22
 800fa8c:	f04f 0800 	mov.w	r8, #0
 800fa90:	f04f 0900 	mov.w	r9, #0
 800fa94:	f8ca 3000 	str.w	r3, [sl]
 800fa98:	e78c      	b.n	800f9b4 <_strtod_l+0x494>
 800fa9a:	bf00      	nop
 800fa9c:	08013e75 	.word	0x08013e75
 800faa0:	08013eb8 	.word	0x08013eb8
 800faa4:	08013e6d 	.word	0x08013e6d
 800faa8:	08013f20 	.word	0x08013f20
 800faac:	08014240 	.word	0x08014240
 800fab0:	08014120 	.word	0x08014120
 800fab4:	080140f8 	.word	0x080140f8
 800fab8:	7ff00000 	.word	0x7ff00000
 800fabc:	7ca00000 	.word	0x7ca00000
 800fac0:	7fefffff 	.word	0x7fefffff
 800fac4:	f016 0310 	ands.w	r3, r6, #16
 800fac8:	bf18      	it	ne
 800faca:	236a      	movne	r3, #106	; 0x6a
 800facc:	4640      	mov	r0, r8
 800face:	9305      	str	r3, [sp, #20]
 800fad0:	4649      	mov	r1, r9
 800fad2:	2300      	movs	r3, #0
 800fad4:	4fb2      	ldr	r7, [pc, #712]	; (800fda0 <_strtod_l+0x880>)
 800fad6:	07f2      	lsls	r2, r6, #31
 800fad8:	d504      	bpl.n	800fae4 <_strtod_l+0x5c4>
 800fada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fade:	f7f0 fd67 	bl	80005b0 <__aeabi_dmul>
 800fae2:	2301      	movs	r3, #1
 800fae4:	1076      	asrs	r6, r6, #1
 800fae6:	f107 0708 	add.w	r7, r7, #8
 800faea:	d1f4      	bne.n	800fad6 <_strtod_l+0x5b6>
 800faec:	b10b      	cbz	r3, 800faf2 <_strtod_l+0x5d2>
 800faee:	4680      	mov	r8, r0
 800faf0:	4689      	mov	r9, r1
 800faf2:	9b05      	ldr	r3, [sp, #20]
 800faf4:	b1bb      	cbz	r3, 800fb26 <_strtod_l+0x606>
 800faf6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800fafa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	4649      	mov	r1, r9
 800fb02:	dd10      	ble.n	800fb26 <_strtod_l+0x606>
 800fb04:	2b1f      	cmp	r3, #31
 800fb06:	f340 812b 	ble.w	800fd60 <_strtod_l+0x840>
 800fb0a:	2b34      	cmp	r3, #52	; 0x34
 800fb0c:	bfd8      	it	le
 800fb0e:	f04f 32ff 	movle.w	r2, #4294967295
 800fb12:	f04f 0800 	mov.w	r8, #0
 800fb16:	bfcf      	iteee	gt
 800fb18:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800fb1c:	3b20      	suble	r3, #32
 800fb1e:	fa02 f303 	lslle.w	r3, r2, r3
 800fb22:	ea03 0901 	andle.w	r9, r3, r1
 800fb26:	2200      	movs	r2, #0
 800fb28:	2300      	movs	r3, #0
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	4649      	mov	r1, r9
 800fb2e:	f7f0 ffa7 	bl	8000a80 <__aeabi_dcmpeq>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d1a1      	bne.n	800fa7a <_strtod_l+0x55a>
 800fb36:	9b06      	ldr	r3, [sp, #24]
 800fb38:	465a      	mov	r2, fp
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	4650      	mov	r0, sl
 800fb3e:	4623      	mov	r3, r4
 800fb40:	9908      	ldr	r1, [sp, #32]
 800fb42:	f002 f94d 	bl	8011de0 <__s2b>
 800fb46:	9008      	str	r0, [sp, #32]
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	f43f af24 	beq.w	800f996 <_strtod_l+0x476>
 800fb4e:	9b04      	ldr	r3, [sp, #16]
 800fb50:	f04f 0b00 	mov.w	fp, #0
 800fb54:	1b5d      	subs	r5, r3, r5
 800fb56:	9b07      	ldr	r3, [sp, #28]
 800fb58:	f8cd b010 	str.w	fp, [sp, #16]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	bfb4      	ite	lt
 800fb60:	462b      	movlt	r3, r5
 800fb62:	2300      	movge	r3, #0
 800fb64:	930e      	str	r3, [sp, #56]	; 0x38
 800fb66:	9b07      	ldr	r3, [sp, #28]
 800fb68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fb6c:	9316      	str	r3, [sp, #88]	; 0x58
 800fb6e:	9b08      	ldr	r3, [sp, #32]
 800fb70:	4650      	mov	r0, sl
 800fb72:	6859      	ldr	r1, [r3, #4]
 800fb74:	f002 f888 	bl	8011c88 <_Balloc>
 800fb78:	9006      	str	r0, [sp, #24]
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	f43f af13 	beq.w	800f9a6 <_strtod_l+0x486>
 800fb80:	9b08      	ldr	r3, [sp, #32]
 800fb82:	300c      	adds	r0, #12
 800fb84:	691a      	ldr	r2, [r3, #16]
 800fb86:	f103 010c 	add.w	r1, r3, #12
 800fb8a:	3202      	adds	r2, #2
 800fb8c:	0092      	lsls	r2, r2, #2
 800fb8e:	f7fe fd83 	bl	800e698 <memcpy>
 800fb92:	ab1e      	add	r3, sp, #120	; 0x78
 800fb94:	9301      	str	r3, [sp, #4]
 800fb96:	ab1d      	add	r3, sp, #116	; 0x74
 800fb98:	9300      	str	r3, [sp, #0]
 800fb9a:	4642      	mov	r2, r8
 800fb9c:	464b      	mov	r3, r9
 800fb9e:	4650      	mov	r0, sl
 800fba0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800fba4:	f002 fc5a 	bl	801245c <__d2b>
 800fba8:	901c      	str	r0, [sp, #112]	; 0x70
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	f43f aefb 	beq.w	800f9a6 <_strtod_l+0x486>
 800fbb0:	2101      	movs	r1, #1
 800fbb2:	4650      	mov	r0, sl
 800fbb4:	f002 f9ac 	bl	8011f10 <__i2b>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	9004      	str	r0, [sp, #16]
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	f43f aef2 	beq.w	800f9a6 <_strtod_l+0x486>
 800fbc2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800fbc4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fbc6:	2d00      	cmp	r5, #0
 800fbc8:	bfab      	itete	ge
 800fbca:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800fbcc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800fbce:	18ee      	addge	r6, r5, r3
 800fbd0:	1b5c      	sublt	r4, r3, r5
 800fbd2:	9b05      	ldr	r3, [sp, #20]
 800fbd4:	bfa8      	it	ge
 800fbd6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800fbd8:	eba5 0503 	sub.w	r5, r5, r3
 800fbdc:	4415      	add	r5, r2
 800fbde:	4b71      	ldr	r3, [pc, #452]	; (800fda4 <_strtod_l+0x884>)
 800fbe0:	f105 35ff 	add.w	r5, r5, #4294967295
 800fbe4:	bfb8      	it	lt
 800fbe6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800fbe8:	429d      	cmp	r5, r3
 800fbea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fbee:	f280 80c9 	bge.w	800fd84 <_strtod_l+0x864>
 800fbf2:	1b5b      	subs	r3, r3, r5
 800fbf4:	2b1f      	cmp	r3, #31
 800fbf6:	f04f 0701 	mov.w	r7, #1
 800fbfa:	eba2 0203 	sub.w	r2, r2, r3
 800fbfe:	f300 80b6 	bgt.w	800fd6e <_strtod_l+0x84e>
 800fc02:	2500      	movs	r5, #0
 800fc04:	fa07 f303 	lsl.w	r3, r7, r3
 800fc08:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc0a:	18b7      	adds	r7, r6, r2
 800fc0c:	9b05      	ldr	r3, [sp, #20]
 800fc0e:	42be      	cmp	r6, r7
 800fc10:	4414      	add	r4, r2
 800fc12:	441c      	add	r4, r3
 800fc14:	4633      	mov	r3, r6
 800fc16:	bfa8      	it	ge
 800fc18:	463b      	movge	r3, r7
 800fc1a:	42a3      	cmp	r3, r4
 800fc1c:	bfa8      	it	ge
 800fc1e:	4623      	movge	r3, r4
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	bfc2      	ittt	gt
 800fc24:	1aff      	subgt	r7, r7, r3
 800fc26:	1ae4      	subgt	r4, r4, r3
 800fc28:	1af6      	subgt	r6, r6, r3
 800fc2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	dd17      	ble.n	800fc60 <_strtod_l+0x740>
 800fc30:	461a      	mov	r2, r3
 800fc32:	4650      	mov	r0, sl
 800fc34:	9904      	ldr	r1, [sp, #16]
 800fc36:	f002 fa25 	bl	8012084 <__pow5mult>
 800fc3a:	9004      	str	r0, [sp, #16]
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	f43f aeb2 	beq.w	800f9a6 <_strtod_l+0x486>
 800fc42:	4601      	mov	r1, r0
 800fc44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fc46:	4650      	mov	r0, sl
 800fc48:	f002 f978 	bl	8011f3c <__multiply>
 800fc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	f43f aea9 	beq.w	800f9a6 <_strtod_l+0x486>
 800fc54:	4650      	mov	r0, sl
 800fc56:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fc58:	f002 f856 	bl	8011d08 <_Bfree>
 800fc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc5e:	931c      	str	r3, [sp, #112]	; 0x70
 800fc60:	2f00      	cmp	r7, #0
 800fc62:	f300 8093 	bgt.w	800fd8c <_strtod_l+0x86c>
 800fc66:	9b07      	ldr	r3, [sp, #28]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	dd08      	ble.n	800fc7e <_strtod_l+0x75e>
 800fc6c:	4650      	mov	r0, sl
 800fc6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fc70:	9906      	ldr	r1, [sp, #24]
 800fc72:	f002 fa07 	bl	8012084 <__pow5mult>
 800fc76:	9006      	str	r0, [sp, #24]
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	f43f ae94 	beq.w	800f9a6 <_strtod_l+0x486>
 800fc7e:	2c00      	cmp	r4, #0
 800fc80:	dd08      	ble.n	800fc94 <_strtod_l+0x774>
 800fc82:	4622      	mov	r2, r4
 800fc84:	4650      	mov	r0, sl
 800fc86:	9906      	ldr	r1, [sp, #24]
 800fc88:	f002 fa56 	bl	8012138 <__lshift>
 800fc8c:	9006      	str	r0, [sp, #24]
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	f43f ae89 	beq.w	800f9a6 <_strtod_l+0x486>
 800fc94:	2e00      	cmp	r6, #0
 800fc96:	dd08      	ble.n	800fcaa <_strtod_l+0x78a>
 800fc98:	4632      	mov	r2, r6
 800fc9a:	4650      	mov	r0, sl
 800fc9c:	9904      	ldr	r1, [sp, #16]
 800fc9e:	f002 fa4b 	bl	8012138 <__lshift>
 800fca2:	9004      	str	r0, [sp, #16]
 800fca4:	2800      	cmp	r0, #0
 800fca6:	f43f ae7e 	beq.w	800f9a6 <_strtod_l+0x486>
 800fcaa:	4650      	mov	r0, sl
 800fcac:	9a06      	ldr	r2, [sp, #24]
 800fcae:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fcb0:	f002 faca 	bl	8012248 <__mdiff>
 800fcb4:	4683      	mov	fp, r0
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	f43f ae75 	beq.w	800f9a6 <_strtod_l+0x486>
 800fcbc:	2400      	movs	r4, #0
 800fcbe:	68c3      	ldr	r3, [r0, #12]
 800fcc0:	9904      	ldr	r1, [sp, #16]
 800fcc2:	60c4      	str	r4, [r0, #12]
 800fcc4:	930d      	str	r3, [sp, #52]	; 0x34
 800fcc6:	f002 faa3 	bl	8012210 <__mcmp>
 800fcca:	42a0      	cmp	r0, r4
 800fccc:	da70      	bge.n	800fdb0 <_strtod_l+0x890>
 800fcce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fcd0:	ea53 0308 	orrs.w	r3, r3, r8
 800fcd4:	f040 8096 	bne.w	800fe04 <_strtod_l+0x8e4>
 800fcd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	f040 8091 	bne.w	800fe04 <_strtod_l+0x8e4>
 800fce2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fce6:	0d1b      	lsrs	r3, r3, #20
 800fce8:	051b      	lsls	r3, r3, #20
 800fcea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fcee:	f240 8089 	bls.w	800fe04 <_strtod_l+0x8e4>
 800fcf2:	f8db 3014 	ldr.w	r3, [fp, #20]
 800fcf6:	b923      	cbnz	r3, 800fd02 <_strtod_l+0x7e2>
 800fcf8:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	f340 8081 	ble.w	800fe04 <_strtod_l+0x8e4>
 800fd02:	4659      	mov	r1, fp
 800fd04:	2201      	movs	r2, #1
 800fd06:	4650      	mov	r0, sl
 800fd08:	f002 fa16 	bl	8012138 <__lshift>
 800fd0c:	9904      	ldr	r1, [sp, #16]
 800fd0e:	4683      	mov	fp, r0
 800fd10:	f002 fa7e 	bl	8012210 <__mcmp>
 800fd14:	2800      	cmp	r0, #0
 800fd16:	dd75      	ble.n	800fe04 <_strtod_l+0x8e4>
 800fd18:	9905      	ldr	r1, [sp, #20]
 800fd1a:	464b      	mov	r3, r9
 800fd1c:	4a22      	ldr	r2, [pc, #136]	; (800fda8 <_strtod_l+0x888>)
 800fd1e:	2900      	cmp	r1, #0
 800fd20:	f000 8091 	beq.w	800fe46 <_strtod_l+0x926>
 800fd24:	ea02 0109 	and.w	r1, r2, r9
 800fd28:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fd2c:	f300 808b 	bgt.w	800fe46 <_strtod_l+0x926>
 800fd30:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fd34:	f77f aea9 	ble.w	800fa8a <_strtod_l+0x56a>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4a1c      	ldr	r2, [pc, #112]	; (800fdac <_strtod_l+0x88c>)
 800fd3c:	4640      	mov	r0, r8
 800fd3e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800fd42:	4649      	mov	r1, r9
 800fd44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fd48:	f7f0 fc32 	bl	80005b0 <__aeabi_dmul>
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4303      	orrs	r3, r0
 800fd50:	bf08      	it	eq
 800fd52:	2322      	moveq	r3, #34	; 0x22
 800fd54:	4680      	mov	r8, r0
 800fd56:	4689      	mov	r9, r1
 800fd58:	bf08      	it	eq
 800fd5a:	f8ca 3000 	streq.w	r3, [sl]
 800fd5e:	e62d      	b.n	800f9bc <_strtod_l+0x49c>
 800fd60:	f04f 32ff 	mov.w	r2, #4294967295
 800fd64:	fa02 f303 	lsl.w	r3, r2, r3
 800fd68:	ea03 0808 	and.w	r8, r3, r8
 800fd6c:	e6db      	b.n	800fb26 <_strtod_l+0x606>
 800fd6e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800fd72:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800fd76:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800fd7a:	35e2      	adds	r5, #226	; 0xe2
 800fd7c:	fa07 f505 	lsl.w	r5, r7, r5
 800fd80:	970f      	str	r7, [sp, #60]	; 0x3c
 800fd82:	e742      	b.n	800fc0a <_strtod_l+0x6ea>
 800fd84:	2301      	movs	r3, #1
 800fd86:	2500      	movs	r5, #0
 800fd88:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd8a:	e73e      	b.n	800fc0a <_strtod_l+0x6ea>
 800fd8c:	463a      	mov	r2, r7
 800fd8e:	4650      	mov	r0, sl
 800fd90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fd92:	f002 f9d1 	bl	8012138 <__lshift>
 800fd96:	901c      	str	r0, [sp, #112]	; 0x70
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	f47f af64 	bne.w	800fc66 <_strtod_l+0x746>
 800fd9e:	e602      	b.n	800f9a6 <_strtod_l+0x486>
 800fda0:	08013ed0 	.word	0x08013ed0
 800fda4:	fffffc02 	.word	0xfffffc02
 800fda8:	7ff00000 	.word	0x7ff00000
 800fdac:	39500000 	.word	0x39500000
 800fdb0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fdb4:	d166      	bne.n	800fe84 <_strtod_l+0x964>
 800fdb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fdb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdbc:	b35a      	cbz	r2, 800fe16 <_strtod_l+0x8f6>
 800fdbe:	4a9c      	ldr	r2, [pc, #624]	; (8010030 <_strtod_l+0xb10>)
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d12c      	bne.n	800fe1e <_strtod_l+0x8fe>
 800fdc4:	9b05      	ldr	r3, [sp, #20]
 800fdc6:	4640      	mov	r0, r8
 800fdc8:	b303      	cbz	r3, 800fe0c <_strtod_l+0x8ec>
 800fdca:	464b      	mov	r3, r9
 800fdcc:	4a99      	ldr	r2, [pc, #612]	; (8010034 <_strtod_l+0xb14>)
 800fdce:	f04f 31ff 	mov.w	r1, #4294967295
 800fdd2:	401a      	ands	r2, r3
 800fdd4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fdd8:	d81b      	bhi.n	800fe12 <_strtod_l+0x8f2>
 800fdda:	0d12      	lsrs	r2, r2, #20
 800fddc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fde0:	fa01 f303 	lsl.w	r3, r1, r3
 800fde4:	4298      	cmp	r0, r3
 800fde6:	d11a      	bne.n	800fe1e <_strtod_l+0x8fe>
 800fde8:	4b93      	ldr	r3, [pc, #588]	; (8010038 <_strtod_l+0xb18>)
 800fdea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d102      	bne.n	800fdf6 <_strtod_l+0x8d6>
 800fdf0:	3001      	adds	r0, #1
 800fdf2:	f43f add8 	beq.w	800f9a6 <_strtod_l+0x486>
 800fdf6:	f04f 0800 	mov.w	r8, #0
 800fdfa:	4b8e      	ldr	r3, [pc, #568]	; (8010034 <_strtod_l+0xb14>)
 800fdfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdfe:	401a      	ands	r2, r3
 800fe00:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800fe04:	9b05      	ldr	r3, [sp, #20]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d196      	bne.n	800fd38 <_strtod_l+0x818>
 800fe0a:	e5d7      	b.n	800f9bc <_strtod_l+0x49c>
 800fe0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe10:	e7e8      	b.n	800fde4 <_strtod_l+0x8c4>
 800fe12:	460b      	mov	r3, r1
 800fe14:	e7e6      	b.n	800fde4 <_strtod_l+0x8c4>
 800fe16:	ea53 0308 	orrs.w	r3, r3, r8
 800fe1a:	f43f af7d 	beq.w	800fd18 <_strtod_l+0x7f8>
 800fe1e:	b1e5      	cbz	r5, 800fe5a <_strtod_l+0x93a>
 800fe20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe22:	421d      	tst	r5, r3
 800fe24:	d0ee      	beq.n	800fe04 <_strtod_l+0x8e4>
 800fe26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe28:	4640      	mov	r0, r8
 800fe2a:	4649      	mov	r1, r9
 800fe2c:	9a05      	ldr	r2, [sp, #20]
 800fe2e:	b1c3      	cbz	r3, 800fe62 <_strtod_l+0x942>
 800fe30:	f7ff fb54 	bl	800f4dc <sulp>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe3c:	f7f0 fa02 	bl	8000244 <__adddf3>
 800fe40:	4680      	mov	r8, r0
 800fe42:	4689      	mov	r9, r1
 800fe44:	e7de      	b.n	800fe04 <_strtod_l+0x8e4>
 800fe46:	4013      	ands	r3, r2
 800fe48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fe4c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fe50:	f04f 38ff 	mov.w	r8, #4294967295
 800fe54:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fe58:	e7d4      	b.n	800fe04 <_strtod_l+0x8e4>
 800fe5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe5c:	ea13 0f08 	tst.w	r3, r8
 800fe60:	e7e0      	b.n	800fe24 <_strtod_l+0x904>
 800fe62:	f7ff fb3b 	bl	800f4dc <sulp>
 800fe66:	4602      	mov	r2, r0
 800fe68:	460b      	mov	r3, r1
 800fe6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fe6e:	f7f0 f9e7 	bl	8000240 <__aeabi_dsub>
 800fe72:	2200      	movs	r2, #0
 800fe74:	2300      	movs	r3, #0
 800fe76:	4680      	mov	r8, r0
 800fe78:	4689      	mov	r9, r1
 800fe7a:	f7f0 fe01 	bl	8000a80 <__aeabi_dcmpeq>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d0c0      	beq.n	800fe04 <_strtod_l+0x8e4>
 800fe82:	e602      	b.n	800fa8a <_strtod_l+0x56a>
 800fe84:	4658      	mov	r0, fp
 800fe86:	9904      	ldr	r1, [sp, #16]
 800fe88:	f002 fb44 	bl	8012514 <__ratio>
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe92:	4606      	mov	r6, r0
 800fe94:	460f      	mov	r7, r1
 800fe96:	f7f0 fe07 	bl	8000aa8 <__aeabi_dcmple>
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	d075      	beq.n	800ff8a <_strtod_l+0xa6a>
 800fe9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d047      	beq.n	800ff34 <_strtod_l+0xa14>
 800fea4:	2600      	movs	r6, #0
 800fea6:	4f65      	ldr	r7, [pc, #404]	; (801003c <_strtod_l+0xb1c>)
 800fea8:	4d64      	ldr	r5, [pc, #400]	; (801003c <_strtod_l+0xb1c>)
 800feaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800feb0:	0d1b      	lsrs	r3, r3, #20
 800feb2:	051b      	lsls	r3, r3, #20
 800feb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800feb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800feb8:	4b61      	ldr	r3, [pc, #388]	; (8010040 <_strtod_l+0xb20>)
 800feba:	429a      	cmp	r2, r3
 800febc:	f040 80c8 	bne.w	8010050 <_strtod_l+0xb30>
 800fec0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fec4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800fec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feca:	4640      	mov	r0, r8
 800fecc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800fed0:	4649      	mov	r1, r9
 800fed2:	f002 fa49 	bl	8012368 <__ulp>
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4630      	mov	r0, r6
 800fedc:	4639      	mov	r1, r7
 800fede:	f7f0 fb67 	bl	80005b0 <__aeabi_dmul>
 800fee2:	4642      	mov	r2, r8
 800fee4:	464b      	mov	r3, r9
 800fee6:	f7f0 f9ad 	bl	8000244 <__adddf3>
 800feea:	460b      	mov	r3, r1
 800feec:	4951      	ldr	r1, [pc, #324]	; (8010034 <_strtod_l+0xb14>)
 800feee:	4a55      	ldr	r2, [pc, #340]	; (8010044 <_strtod_l+0xb24>)
 800fef0:	4019      	ands	r1, r3
 800fef2:	4291      	cmp	r1, r2
 800fef4:	4680      	mov	r8, r0
 800fef6:	d95e      	bls.n	800ffb6 <_strtod_l+0xa96>
 800fef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fefa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d103      	bne.n	800ff0a <_strtod_l+0x9ea>
 800ff02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff04:	3301      	adds	r3, #1
 800ff06:	f43f ad4e 	beq.w	800f9a6 <_strtod_l+0x486>
 800ff0a:	f04f 38ff 	mov.w	r8, #4294967295
 800ff0e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8010038 <_strtod_l+0xb18>
 800ff12:	4650      	mov	r0, sl
 800ff14:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ff16:	f001 fef7 	bl	8011d08 <_Bfree>
 800ff1a:	4650      	mov	r0, sl
 800ff1c:	9906      	ldr	r1, [sp, #24]
 800ff1e:	f001 fef3 	bl	8011d08 <_Bfree>
 800ff22:	4650      	mov	r0, sl
 800ff24:	9904      	ldr	r1, [sp, #16]
 800ff26:	f001 feef 	bl	8011d08 <_Bfree>
 800ff2a:	4659      	mov	r1, fp
 800ff2c:	4650      	mov	r0, sl
 800ff2e:	f001 feeb 	bl	8011d08 <_Bfree>
 800ff32:	e61c      	b.n	800fb6e <_strtod_l+0x64e>
 800ff34:	f1b8 0f00 	cmp.w	r8, #0
 800ff38:	d119      	bne.n	800ff6e <_strtod_l+0xa4e>
 800ff3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff40:	b9e3      	cbnz	r3, 800ff7c <_strtod_l+0xa5c>
 800ff42:	2200      	movs	r2, #0
 800ff44:	4630      	mov	r0, r6
 800ff46:	4639      	mov	r1, r7
 800ff48:	4b3c      	ldr	r3, [pc, #240]	; (801003c <_strtod_l+0xb1c>)
 800ff4a:	f7f0 fda3 	bl	8000a94 <__aeabi_dcmplt>
 800ff4e:	b9c8      	cbnz	r0, 800ff84 <_strtod_l+0xa64>
 800ff50:	2200      	movs	r2, #0
 800ff52:	4630      	mov	r0, r6
 800ff54:	4639      	mov	r1, r7
 800ff56:	4b3c      	ldr	r3, [pc, #240]	; (8010048 <_strtod_l+0xb28>)
 800ff58:	f7f0 fb2a 	bl	80005b0 <__aeabi_dmul>
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	460d      	mov	r5, r1
 800ff60:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ff64:	9418      	str	r4, [sp, #96]	; 0x60
 800ff66:	9319      	str	r3, [sp, #100]	; 0x64
 800ff68:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ff6c:	e79d      	b.n	800feaa <_strtod_l+0x98a>
 800ff6e:	f1b8 0f01 	cmp.w	r8, #1
 800ff72:	d103      	bne.n	800ff7c <_strtod_l+0xa5c>
 800ff74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f43f ad87 	beq.w	800fa8a <_strtod_l+0x56a>
 800ff7c:	2600      	movs	r6, #0
 800ff7e:	2400      	movs	r4, #0
 800ff80:	4f32      	ldr	r7, [pc, #200]	; (801004c <_strtod_l+0xb2c>)
 800ff82:	e791      	b.n	800fea8 <_strtod_l+0x988>
 800ff84:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ff86:	4d30      	ldr	r5, [pc, #192]	; (8010048 <_strtod_l+0xb28>)
 800ff88:	e7ea      	b.n	800ff60 <_strtod_l+0xa40>
 800ff8a:	4b2f      	ldr	r3, [pc, #188]	; (8010048 <_strtod_l+0xb28>)
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	4630      	mov	r0, r6
 800ff90:	4639      	mov	r1, r7
 800ff92:	f7f0 fb0d 	bl	80005b0 <__aeabi_dmul>
 800ff96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff98:	4604      	mov	r4, r0
 800ff9a:	460d      	mov	r5, r1
 800ff9c:	b933      	cbnz	r3, 800ffac <_strtod_l+0xa8c>
 800ff9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffa2:	9010      	str	r0, [sp, #64]	; 0x40
 800ffa4:	9311      	str	r3, [sp, #68]	; 0x44
 800ffa6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ffaa:	e77e      	b.n	800feaa <_strtod_l+0x98a>
 800ffac:	4602      	mov	r2, r0
 800ffae:	460b      	mov	r3, r1
 800ffb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ffb4:	e7f7      	b.n	800ffa6 <_strtod_l+0xa86>
 800ffb6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ffba:	9b05      	ldr	r3, [sp, #20]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1a8      	bne.n	800ff12 <_strtod_l+0x9f2>
 800ffc0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ffc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffc6:	0d1b      	lsrs	r3, r3, #20
 800ffc8:	051b      	lsls	r3, r3, #20
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d1a1      	bne.n	800ff12 <_strtod_l+0x9f2>
 800ffce:	4620      	mov	r0, r4
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	f7f1 f94f 	bl	8001274 <__aeabi_d2lz>
 800ffd6:	f7f0 fabd 	bl	8000554 <__aeabi_l2d>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	460b      	mov	r3, r1
 800ffde:	4620      	mov	r0, r4
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	f7f0 f92d 	bl	8000240 <__aeabi_dsub>
 800ffe6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ffec:	ea43 0308 	orr.w	r3, r3, r8
 800fff0:	4313      	orrs	r3, r2
 800fff2:	4604      	mov	r4, r0
 800fff4:	460d      	mov	r5, r1
 800fff6:	d066      	beq.n	80100c6 <_strtod_l+0xba6>
 800fff8:	a309      	add	r3, pc, #36	; (adr r3, 8010020 <_strtod_l+0xb00>)
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	f7f0 fd49 	bl	8000a94 <__aeabi_dcmplt>
 8010002:	2800      	cmp	r0, #0
 8010004:	f47f acda 	bne.w	800f9bc <_strtod_l+0x49c>
 8010008:	a307      	add	r3, pc, #28	; (adr r3, 8010028 <_strtod_l+0xb08>)
 801000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 fd5d 	bl	8000ad0 <__aeabi_dcmpgt>
 8010016:	2800      	cmp	r0, #0
 8010018:	f43f af7b 	beq.w	800ff12 <_strtod_l+0x9f2>
 801001c:	e4ce      	b.n	800f9bc <_strtod_l+0x49c>
 801001e:	bf00      	nop
 8010020:	94a03595 	.word	0x94a03595
 8010024:	3fdfffff 	.word	0x3fdfffff
 8010028:	35afe535 	.word	0x35afe535
 801002c:	3fe00000 	.word	0x3fe00000
 8010030:	000fffff 	.word	0x000fffff
 8010034:	7ff00000 	.word	0x7ff00000
 8010038:	7fefffff 	.word	0x7fefffff
 801003c:	3ff00000 	.word	0x3ff00000
 8010040:	7fe00000 	.word	0x7fe00000
 8010044:	7c9fffff 	.word	0x7c9fffff
 8010048:	3fe00000 	.word	0x3fe00000
 801004c:	bff00000 	.word	0xbff00000
 8010050:	9b05      	ldr	r3, [sp, #20]
 8010052:	b313      	cbz	r3, 801009a <_strtod_l+0xb7a>
 8010054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010056:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801005a:	d81e      	bhi.n	801009a <_strtod_l+0xb7a>
 801005c:	a326      	add	r3, pc, #152	; (adr r3, 80100f8 <_strtod_l+0xbd8>)
 801005e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010062:	4620      	mov	r0, r4
 8010064:	4629      	mov	r1, r5
 8010066:	f7f0 fd1f 	bl	8000aa8 <__aeabi_dcmple>
 801006a:	b190      	cbz	r0, 8010092 <_strtod_l+0xb72>
 801006c:	4629      	mov	r1, r5
 801006e:	4620      	mov	r0, r4
 8010070:	f7f0 fd76 	bl	8000b60 <__aeabi_d2uiz>
 8010074:	2801      	cmp	r0, #1
 8010076:	bf38      	it	cc
 8010078:	2001      	movcc	r0, #1
 801007a:	f7f0 fa1f 	bl	80004bc <__aeabi_ui2d>
 801007e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010080:	4604      	mov	r4, r0
 8010082:	460d      	mov	r5, r1
 8010084:	b9d3      	cbnz	r3, 80100bc <_strtod_l+0xb9c>
 8010086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801008a:	9012      	str	r0, [sp, #72]	; 0x48
 801008c:	9313      	str	r3, [sp, #76]	; 0x4c
 801008e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8010092:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010094:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8010098:	1a9f      	subs	r7, r3, r2
 801009a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801009e:	f002 f963 	bl	8012368 <__ulp>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	4630      	mov	r0, r6
 80100a8:	4639      	mov	r1, r7
 80100aa:	f7f0 fa81 	bl	80005b0 <__aeabi_dmul>
 80100ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80100b2:	f7f0 f8c7 	bl	8000244 <__adddf3>
 80100b6:	4680      	mov	r8, r0
 80100b8:	4689      	mov	r9, r1
 80100ba:	e77e      	b.n	800ffba <_strtod_l+0xa9a>
 80100bc:	4602      	mov	r2, r0
 80100be:	460b      	mov	r3, r1
 80100c0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80100c4:	e7e3      	b.n	801008e <_strtod_l+0xb6e>
 80100c6:	a30e      	add	r3, pc, #56	; (adr r3, 8010100 <_strtod_l+0xbe0>)
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	f7f0 fce2 	bl	8000a94 <__aeabi_dcmplt>
 80100d0:	e7a1      	b.n	8010016 <_strtod_l+0xaf6>
 80100d2:	2300      	movs	r3, #0
 80100d4:	930c      	str	r3, [sp, #48]	; 0x30
 80100d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80100d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80100da:	6013      	str	r3, [r2, #0]
 80100dc:	f7ff ba65 	b.w	800f5aa <_strtod_l+0x8a>
 80100e0:	2b65      	cmp	r3, #101	; 0x65
 80100e2:	f43f ab5c 	beq.w	800f79e <_strtod_l+0x27e>
 80100e6:	2b45      	cmp	r3, #69	; 0x45
 80100e8:	f43f ab59 	beq.w	800f79e <_strtod_l+0x27e>
 80100ec:	2201      	movs	r2, #1
 80100ee:	f7ff bb8d 	b.w	800f80c <_strtod_l+0x2ec>
 80100f2:	bf00      	nop
 80100f4:	f3af 8000 	nop.w
 80100f8:	ffc00000 	.word	0xffc00000
 80100fc:	41dfffff 	.word	0x41dfffff
 8010100:	94a03595 	.word	0x94a03595
 8010104:	3fcfffff 	.word	0x3fcfffff

08010108 <_strtod_r>:
 8010108:	4b01      	ldr	r3, [pc, #4]	; (8010110 <_strtod_r+0x8>)
 801010a:	f7ff ba09 	b.w	800f520 <_strtod_l>
 801010e:	bf00      	nop
 8010110:	200000e4 	.word	0x200000e4

08010114 <_strtol_l.isra.0>:
 8010114:	2b01      	cmp	r3, #1
 8010116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801011a:	4686      	mov	lr, r0
 801011c:	d001      	beq.n	8010122 <_strtol_l.isra.0+0xe>
 801011e:	2b24      	cmp	r3, #36	; 0x24
 8010120:	d906      	bls.n	8010130 <_strtol_l.isra.0+0x1c>
 8010122:	f7fe fa75 	bl	800e610 <__errno>
 8010126:	2316      	movs	r3, #22
 8010128:	6003      	str	r3, [r0, #0]
 801012a:	2000      	movs	r0, #0
 801012c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010130:	468c      	mov	ip, r1
 8010132:	4e3a      	ldr	r6, [pc, #232]	; (801021c <_strtol_l.isra.0+0x108>)
 8010134:	4660      	mov	r0, ip
 8010136:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801013a:	5da5      	ldrb	r5, [r4, r6]
 801013c:	f015 0508 	ands.w	r5, r5, #8
 8010140:	d1f8      	bne.n	8010134 <_strtol_l.isra.0+0x20>
 8010142:	2c2d      	cmp	r4, #45	; 0x2d
 8010144:	d133      	bne.n	80101ae <_strtol_l.isra.0+0x9a>
 8010146:	f04f 0801 	mov.w	r8, #1
 801014a:	f89c 4000 	ldrb.w	r4, [ip]
 801014e:	f100 0c02 	add.w	ip, r0, #2
 8010152:	2b00      	cmp	r3, #0
 8010154:	d05d      	beq.n	8010212 <_strtol_l.isra.0+0xfe>
 8010156:	2b10      	cmp	r3, #16
 8010158:	d10c      	bne.n	8010174 <_strtol_l.isra.0+0x60>
 801015a:	2c30      	cmp	r4, #48	; 0x30
 801015c:	d10a      	bne.n	8010174 <_strtol_l.isra.0+0x60>
 801015e:	f89c 0000 	ldrb.w	r0, [ip]
 8010162:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010166:	2858      	cmp	r0, #88	; 0x58
 8010168:	d14e      	bne.n	8010208 <_strtol_l.isra.0+0xf4>
 801016a:	2310      	movs	r3, #16
 801016c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010170:	f10c 0c02 	add.w	ip, ip, #2
 8010174:	2500      	movs	r5, #0
 8010176:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 801017a:	3f01      	subs	r7, #1
 801017c:	fbb7 f9f3 	udiv	r9, r7, r3
 8010180:	4628      	mov	r0, r5
 8010182:	fb03 7a19 	mls	sl, r3, r9, r7
 8010186:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801018a:	2e09      	cmp	r6, #9
 801018c:	d818      	bhi.n	80101c0 <_strtol_l.isra.0+0xac>
 801018e:	4634      	mov	r4, r6
 8010190:	42a3      	cmp	r3, r4
 8010192:	dd24      	ble.n	80101de <_strtol_l.isra.0+0xca>
 8010194:	2d00      	cmp	r5, #0
 8010196:	db1f      	blt.n	80101d8 <_strtol_l.isra.0+0xc4>
 8010198:	4581      	cmp	r9, r0
 801019a:	d31d      	bcc.n	80101d8 <_strtol_l.isra.0+0xc4>
 801019c:	d101      	bne.n	80101a2 <_strtol_l.isra.0+0x8e>
 801019e:	45a2      	cmp	sl, r4
 80101a0:	db1a      	blt.n	80101d8 <_strtol_l.isra.0+0xc4>
 80101a2:	2501      	movs	r5, #1
 80101a4:	fb00 4003 	mla	r0, r0, r3, r4
 80101a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80101ac:	e7eb      	b.n	8010186 <_strtol_l.isra.0+0x72>
 80101ae:	2c2b      	cmp	r4, #43	; 0x2b
 80101b0:	bf08      	it	eq
 80101b2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80101b6:	46a8      	mov	r8, r5
 80101b8:	bf08      	it	eq
 80101ba:	f100 0c02 	addeq.w	ip, r0, #2
 80101be:	e7c8      	b.n	8010152 <_strtol_l.isra.0+0x3e>
 80101c0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80101c4:	2e19      	cmp	r6, #25
 80101c6:	d801      	bhi.n	80101cc <_strtol_l.isra.0+0xb8>
 80101c8:	3c37      	subs	r4, #55	; 0x37
 80101ca:	e7e1      	b.n	8010190 <_strtol_l.isra.0+0x7c>
 80101cc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80101d0:	2e19      	cmp	r6, #25
 80101d2:	d804      	bhi.n	80101de <_strtol_l.isra.0+0xca>
 80101d4:	3c57      	subs	r4, #87	; 0x57
 80101d6:	e7db      	b.n	8010190 <_strtol_l.isra.0+0x7c>
 80101d8:	f04f 35ff 	mov.w	r5, #4294967295
 80101dc:	e7e4      	b.n	80101a8 <_strtol_l.isra.0+0x94>
 80101de:	2d00      	cmp	r5, #0
 80101e0:	da08      	bge.n	80101f4 <_strtol_l.isra.0+0xe0>
 80101e2:	2322      	movs	r3, #34	; 0x22
 80101e4:	4638      	mov	r0, r7
 80101e6:	f8ce 3000 	str.w	r3, [lr]
 80101ea:	2a00      	cmp	r2, #0
 80101ec:	d09e      	beq.n	801012c <_strtol_l.isra.0+0x18>
 80101ee:	f10c 31ff 	add.w	r1, ip, #4294967295
 80101f2:	e007      	b.n	8010204 <_strtol_l.isra.0+0xf0>
 80101f4:	f1b8 0f00 	cmp.w	r8, #0
 80101f8:	d000      	beq.n	80101fc <_strtol_l.isra.0+0xe8>
 80101fa:	4240      	negs	r0, r0
 80101fc:	2a00      	cmp	r2, #0
 80101fe:	d095      	beq.n	801012c <_strtol_l.isra.0+0x18>
 8010200:	2d00      	cmp	r5, #0
 8010202:	d1f4      	bne.n	80101ee <_strtol_l.isra.0+0xda>
 8010204:	6011      	str	r1, [r2, #0]
 8010206:	e791      	b.n	801012c <_strtol_l.isra.0+0x18>
 8010208:	2430      	movs	r4, #48	; 0x30
 801020a:	2b00      	cmp	r3, #0
 801020c:	d1b2      	bne.n	8010174 <_strtol_l.isra.0+0x60>
 801020e:	2308      	movs	r3, #8
 8010210:	e7b0      	b.n	8010174 <_strtol_l.isra.0+0x60>
 8010212:	2c30      	cmp	r4, #48	; 0x30
 8010214:	d0a3      	beq.n	801015e <_strtol_l.isra.0+0x4a>
 8010216:	230a      	movs	r3, #10
 8010218:	e7ac      	b.n	8010174 <_strtol_l.isra.0+0x60>
 801021a:	bf00      	nop
 801021c:	08013d61 	.word	0x08013d61

08010220 <_strtol_r>:
 8010220:	f7ff bf78 	b.w	8010114 <_strtol_l.isra.0>

08010224 <__utoa>:
 8010224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010226:	b08b      	sub	sp, #44	; 0x2c
 8010228:	4605      	mov	r5, r0
 801022a:	460b      	mov	r3, r1
 801022c:	466e      	mov	r6, sp
 801022e:	4c1d      	ldr	r4, [pc, #116]	; (80102a4 <__utoa+0x80>)
 8010230:	f104 0c20 	add.w	ip, r4, #32
 8010234:	4637      	mov	r7, r6
 8010236:	6820      	ldr	r0, [r4, #0]
 8010238:	6861      	ldr	r1, [r4, #4]
 801023a:	3408      	adds	r4, #8
 801023c:	c703      	stmia	r7!, {r0, r1}
 801023e:	4564      	cmp	r4, ip
 8010240:	463e      	mov	r6, r7
 8010242:	d1f7      	bne.n	8010234 <__utoa+0x10>
 8010244:	7921      	ldrb	r1, [r4, #4]
 8010246:	6820      	ldr	r0, [r4, #0]
 8010248:	7139      	strb	r1, [r7, #4]
 801024a:	1e91      	subs	r1, r2, #2
 801024c:	2922      	cmp	r1, #34	; 0x22
 801024e:	6038      	str	r0, [r7, #0]
 8010250:	f04f 0100 	mov.w	r1, #0
 8010254:	d904      	bls.n	8010260 <__utoa+0x3c>
 8010256:	7019      	strb	r1, [r3, #0]
 8010258:	460b      	mov	r3, r1
 801025a:	4618      	mov	r0, r3
 801025c:	b00b      	add	sp, #44	; 0x2c
 801025e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010260:	1e58      	subs	r0, r3, #1
 8010262:	4684      	mov	ip, r0
 8010264:	fbb5 f7f2 	udiv	r7, r5, r2
 8010268:	fb02 5617 	mls	r6, r2, r7, r5
 801026c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8010270:	4476      	add	r6, lr
 8010272:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010276:	460c      	mov	r4, r1
 8010278:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801027c:	462e      	mov	r6, r5
 801027e:	42b2      	cmp	r2, r6
 8010280:	463d      	mov	r5, r7
 8010282:	f101 0101 	add.w	r1, r1, #1
 8010286:	d9ed      	bls.n	8010264 <__utoa+0x40>
 8010288:	2200      	movs	r2, #0
 801028a:	545a      	strb	r2, [r3, r1]
 801028c:	1919      	adds	r1, r3, r4
 801028e:	1aa5      	subs	r5, r4, r2
 8010290:	42aa      	cmp	r2, r5
 8010292:	dae2      	bge.n	801025a <__utoa+0x36>
 8010294:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010298:	780e      	ldrb	r6, [r1, #0]
 801029a:	3201      	adds	r2, #1
 801029c:	7006      	strb	r6, [r0, #0]
 801029e:	f801 5901 	strb.w	r5, [r1], #-1
 80102a2:	e7f4      	b.n	801028e <__utoa+0x6a>
 80102a4:	08013ef8 	.word	0x08013ef8

080102a8 <__swbuf_r>:
 80102a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102aa:	460e      	mov	r6, r1
 80102ac:	4614      	mov	r4, r2
 80102ae:	4605      	mov	r5, r0
 80102b0:	b118      	cbz	r0, 80102ba <__swbuf_r+0x12>
 80102b2:	6983      	ldr	r3, [r0, #24]
 80102b4:	b90b      	cbnz	r3, 80102ba <__swbuf_r+0x12>
 80102b6:	f001 f84f 	bl	8011358 <__sinit>
 80102ba:	4b21      	ldr	r3, [pc, #132]	; (8010340 <__swbuf_r+0x98>)
 80102bc:	429c      	cmp	r4, r3
 80102be:	d12b      	bne.n	8010318 <__swbuf_r+0x70>
 80102c0:	686c      	ldr	r4, [r5, #4]
 80102c2:	69a3      	ldr	r3, [r4, #24]
 80102c4:	60a3      	str	r3, [r4, #8]
 80102c6:	89a3      	ldrh	r3, [r4, #12]
 80102c8:	071a      	lsls	r2, r3, #28
 80102ca:	d52f      	bpl.n	801032c <__swbuf_r+0x84>
 80102cc:	6923      	ldr	r3, [r4, #16]
 80102ce:	b36b      	cbz	r3, 801032c <__swbuf_r+0x84>
 80102d0:	6923      	ldr	r3, [r4, #16]
 80102d2:	6820      	ldr	r0, [r4, #0]
 80102d4:	b2f6      	uxtb	r6, r6
 80102d6:	1ac0      	subs	r0, r0, r3
 80102d8:	6963      	ldr	r3, [r4, #20]
 80102da:	4637      	mov	r7, r6
 80102dc:	4283      	cmp	r3, r0
 80102de:	dc04      	bgt.n	80102ea <__swbuf_r+0x42>
 80102e0:	4621      	mov	r1, r4
 80102e2:	4628      	mov	r0, r5
 80102e4:	f000 ffa4 	bl	8011230 <_fflush_r>
 80102e8:	bb30      	cbnz	r0, 8010338 <__swbuf_r+0x90>
 80102ea:	68a3      	ldr	r3, [r4, #8]
 80102ec:	3001      	adds	r0, #1
 80102ee:	3b01      	subs	r3, #1
 80102f0:	60a3      	str	r3, [r4, #8]
 80102f2:	6823      	ldr	r3, [r4, #0]
 80102f4:	1c5a      	adds	r2, r3, #1
 80102f6:	6022      	str	r2, [r4, #0]
 80102f8:	701e      	strb	r6, [r3, #0]
 80102fa:	6963      	ldr	r3, [r4, #20]
 80102fc:	4283      	cmp	r3, r0
 80102fe:	d004      	beq.n	801030a <__swbuf_r+0x62>
 8010300:	89a3      	ldrh	r3, [r4, #12]
 8010302:	07db      	lsls	r3, r3, #31
 8010304:	d506      	bpl.n	8010314 <__swbuf_r+0x6c>
 8010306:	2e0a      	cmp	r6, #10
 8010308:	d104      	bne.n	8010314 <__swbuf_r+0x6c>
 801030a:	4621      	mov	r1, r4
 801030c:	4628      	mov	r0, r5
 801030e:	f000 ff8f 	bl	8011230 <_fflush_r>
 8010312:	b988      	cbnz	r0, 8010338 <__swbuf_r+0x90>
 8010314:	4638      	mov	r0, r7
 8010316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010318:	4b0a      	ldr	r3, [pc, #40]	; (8010344 <__swbuf_r+0x9c>)
 801031a:	429c      	cmp	r4, r3
 801031c:	d101      	bne.n	8010322 <__swbuf_r+0x7a>
 801031e:	68ac      	ldr	r4, [r5, #8]
 8010320:	e7cf      	b.n	80102c2 <__swbuf_r+0x1a>
 8010322:	4b09      	ldr	r3, [pc, #36]	; (8010348 <__swbuf_r+0xa0>)
 8010324:	429c      	cmp	r4, r3
 8010326:	bf08      	it	eq
 8010328:	68ec      	ldreq	r4, [r5, #12]
 801032a:	e7ca      	b.n	80102c2 <__swbuf_r+0x1a>
 801032c:	4621      	mov	r1, r4
 801032e:	4628      	mov	r0, r5
 8010330:	f000 f80c 	bl	801034c <__swsetup_r>
 8010334:	2800      	cmp	r0, #0
 8010336:	d0cb      	beq.n	80102d0 <__swbuf_r+0x28>
 8010338:	f04f 37ff 	mov.w	r7, #4294967295
 801033c:	e7ea      	b.n	8010314 <__swbuf_r+0x6c>
 801033e:	bf00      	nop
 8010340:	08013fd4 	.word	0x08013fd4
 8010344:	08013ff4 	.word	0x08013ff4
 8010348:	08013fb4 	.word	0x08013fb4

0801034c <__swsetup_r>:
 801034c:	4b32      	ldr	r3, [pc, #200]	; (8010418 <__swsetup_r+0xcc>)
 801034e:	b570      	push	{r4, r5, r6, lr}
 8010350:	681d      	ldr	r5, [r3, #0]
 8010352:	4606      	mov	r6, r0
 8010354:	460c      	mov	r4, r1
 8010356:	b125      	cbz	r5, 8010362 <__swsetup_r+0x16>
 8010358:	69ab      	ldr	r3, [r5, #24]
 801035a:	b913      	cbnz	r3, 8010362 <__swsetup_r+0x16>
 801035c:	4628      	mov	r0, r5
 801035e:	f000 fffb 	bl	8011358 <__sinit>
 8010362:	4b2e      	ldr	r3, [pc, #184]	; (801041c <__swsetup_r+0xd0>)
 8010364:	429c      	cmp	r4, r3
 8010366:	d10f      	bne.n	8010388 <__swsetup_r+0x3c>
 8010368:	686c      	ldr	r4, [r5, #4]
 801036a:	89a3      	ldrh	r3, [r4, #12]
 801036c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010370:	0719      	lsls	r1, r3, #28
 8010372:	d42c      	bmi.n	80103ce <__swsetup_r+0x82>
 8010374:	06dd      	lsls	r5, r3, #27
 8010376:	d411      	bmi.n	801039c <__swsetup_r+0x50>
 8010378:	2309      	movs	r3, #9
 801037a:	6033      	str	r3, [r6, #0]
 801037c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010380:	f04f 30ff 	mov.w	r0, #4294967295
 8010384:	81a3      	strh	r3, [r4, #12]
 8010386:	e03e      	b.n	8010406 <__swsetup_r+0xba>
 8010388:	4b25      	ldr	r3, [pc, #148]	; (8010420 <__swsetup_r+0xd4>)
 801038a:	429c      	cmp	r4, r3
 801038c:	d101      	bne.n	8010392 <__swsetup_r+0x46>
 801038e:	68ac      	ldr	r4, [r5, #8]
 8010390:	e7eb      	b.n	801036a <__swsetup_r+0x1e>
 8010392:	4b24      	ldr	r3, [pc, #144]	; (8010424 <__swsetup_r+0xd8>)
 8010394:	429c      	cmp	r4, r3
 8010396:	bf08      	it	eq
 8010398:	68ec      	ldreq	r4, [r5, #12]
 801039a:	e7e6      	b.n	801036a <__swsetup_r+0x1e>
 801039c:	0758      	lsls	r0, r3, #29
 801039e:	d512      	bpl.n	80103c6 <__swsetup_r+0x7a>
 80103a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103a2:	b141      	cbz	r1, 80103b6 <__swsetup_r+0x6a>
 80103a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103a8:	4299      	cmp	r1, r3
 80103aa:	d002      	beq.n	80103b2 <__swsetup_r+0x66>
 80103ac:	4630      	mov	r0, r6
 80103ae:	f002 f931 	bl	8012614 <_free_r>
 80103b2:	2300      	movs	r3, #0
 80103b4:	6363      	str	r3, [r4, #52]	; 0x34
 80103b6:	89a3      	ldrh	r3, [r4, #12]
 80103b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80103bc:	81a3      	strh	r3, [r4, #12]
 80103be:	2300      	movs	r3, #0
 80103c0:	6063      	str	r3, [r4, #4]
 80103c2:	6923      	ldr	r3, [r4, #16]
 80103c4:	6023      	str	r3, [r4, #0]
 80103c6:	89a3      	ldrh	r3, [r4, #12]
 80103c8:	f043 0308 	orr.w	r3, r3, #8
 80103cc:	81a3      	strh	r3, [r4, #12]
 80103ce:	6923      	ldr	r3, [r4, #16]
 80103d0:	b94b      	cbnz	r3, 80103e6 <__swsetup_r+0x9a>
 80103d2:	89a3      	ldrh	r3, [r4, #12]
 80103d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80103d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103dc:	d003      	beq.n	80103e6 <__swsetup_r+0x9a>
 80103de:	4621      	mov	r1, r4
 80103e0:	4630      	mov	r0, r6
 80103e2:	f001 fbe9 	bl	8011bb8 <__smakebuf_r>
 80103e6:	89a0      	ldrh	r0, [r4, #12]
 80103e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103ec:	f010 0301 	ands.w	r3, r0, #1
 80103f0:	d00a      	beq.n	8010408 <__swsetup_r+0xbc>
 80103f2:	2300      	movs	r3, #0
 80103f4:	60a3      	str	r3, [r4, #8]
 80103f6:	6963      	ldr	r3, [r4, #20]
 80103f8:	425b      	negs	r3, r3
 80103fa:	61a3      	str	r3, [r4, #24]
 80103fc:	6923      	ldr	r3, [r4, #16]
 80103fe:	b943      	cbnz	r3, 8010412 <__swsetup_r+0xc6>
 8010400:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010404:	d1ba      	bne.n	801037c <__swsetup_r+0x30>
 8010406:	bd70      	pop	{r4, r5, r6, pc}
 8010408:	0781      	lsls	r1, r0, #30
 801040a:	bf58      	it	pl
 801040c:	6963      	ldrpl	r3, [r4, #20]
 801040e:	60a3      	str	r3, [r4, #8]
 8010410:	e7f4      	b.n	80103fc <__swsetup_r+0xb0>
 8010412:	2000      	movs	r0, #0
 8010414:	e7f7      	b.n	8010406 <__swsetup_r+0xba>
 8010416:	bf00      	nop
 8010418:	2000007c 	.word	0x2000007c
 801041c:	08013fd4 	.word	0x08013fd4
 8010420:	08013ff4 	.word	0x08013ff4
 8010424:	08013fb4 	.word	0x08013fb4

08010428 <quorem>:
 8010428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042c:	6903      	ldr	r3, [r0, #16]
 801042e:	690c      	ldr	r4, [r1, #16]
 8010430:	4607      	mov	r7, r0
 8010432:	42a3      	cmp	r3, r4
 8010434:	f2c0 8083 	blt.w	801053e <quorem+0x116>
 8010438:	3c01      	subs	r4, #1
 801043a:	f100 0514 	add.w	r5, r0, #20
 801043e:	f101 0814 	add.w	r8, r1, #20
 8010442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801044c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010450:	3301      	adds	r3, #1
 8010452:	429a      	cmp	r2, r3
 8010454:	fbb2 f6f3 	udiv	r6, r2, r3
 8010458:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801045c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010460:	d332      	bcc.n	80104c8 <quorem+0xa0>
 8010462:	f04f 0e00 	mov.w	lr, #0
 8010466:	4640      	mov	r0, r8
 8010468:	46ac      	mov	ip, r5
 801046a:	46f2      	mov	sl, lr
 801046c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010470:	b293      	uxth	r3, r2
 8010472:	fb06 e303 	mla	r3, r6, r3, lr
 8010476:	0c12      	lsrs	r2, r2, #16
 8010478:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801047c:	fb06 e202 	mla	r2, r6, r2, lr
 8010480:	b29b      	uxth	r3, r3
 8010482:	ebaa 0303 	sub.w	r3, sl, r3
 8010486:	f8dc a000 	ldr.w	sl, [ip]
 801048a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801048e:	fa1f fa8a 	uxth.w	sl, sl
 8010492:	4453      	add	r3, sl
 8010494:	fa1f fa82 	uxth.w	sl, r2
 8010498:	f8dc 2000 	ldr.w	r2, [ip]
 801049c:	4581      	cmp	r9, r0
 801049e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80104a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80104b0:	f84c 3b04 	str.w	r3, [ip], #4
 80104b4:	d2da      	bcs.n	801046c <quorem+0x44>
 80104b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80104ba:	b92b      	cbnz	r3, 80104c8 <quorem+0xa0>
 80104bc:	9b01      	ldr	r3, [sp, #4]
 80104be:	3b04      	subs	r3, #4
 80104c0:	429d      	cmp	r5, r3
 80104c2:	461a      	mov	r2, r3
 80104c4:	d32f      	bcc.n	8010526 <quorem+0xfe>
 80104c6:	613c      	str	r4, [r7, #16]
 80104c8:	4638      	mov	r0, r7
 80104ca:	f001 fea1 	bl	8012210 <__mcmp>
 80104ce:	2800      	cmp	r0, #0
 80104d0:	db25      	blt.n	801051e <quorem+0xf6>
 80104d2:	4628      	mov	r0, r5
 80104d4:	f04f 0c00 	mov.w	ip, #0
 80104d8:	3601      	adds	r6, #1
 80104da:	f858 1b04 	ldr.w	r1, [r8], #4
 80104de:	f8d0 e000 	ldr.w	lr, [r0]
 80104e2:	b28b      	uxth	r3, r1
 80104e4:	ebac 0303 	sub.w	r3, ip, r3
 80104e8:	fa1f f28e 	uxth.w	r2, lr
 80104ec:	4413      	add	r3, r2
 80104ee:	0c0a      	lsrs	r2, r1, #16
 80104f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80104f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104fe:	45c1      	cmp	r9, r8
 8010500:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010504:	f840 3b04 	str.w	r3, [r0], #4
 8010508:	d2e7      	bcs.n	80104da <quorem+0xb2>
 801050a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801050e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010512:	b922      	cbnz	r2, 801051e <quorem+0xf6>
 8010514:	3b04      	subs	r3, #4
 8010516:	429d      	cmp	r5, r3
 8010518:	461a      	mov	r2, r3
 801051a:	d30a      	bcc.n	8010532 <quorem+0x10a>
 801051c:	613c      	str	r4, [r7, #16]
 801051e:	4630      	mov	r0, r6
 8010520:	b003      	add	sp, #12
 8010522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010526:	6812      	ldr	r2, [r2, #0]
 8010528:	3b04      	subs	r3, #4
 801052a:	2a00      	cmp	r2, #0
 801052c:	d1cb      	bne.n	80104c6 <quorem+0x9e>
 801052e:	3c01      	subs	r4, #1
 8010530:	e7c6      	b.n	80104c0 <quorem+0x98>
 8010532:	6812      	ldr	r2, [r2, #0]
 8010534:	3b04      	subs	r3, #4
 8010536:	2a00      	cmp	r2, #0
 8010538:	d1f0      	bne.n	801051c <quorem+0xf4>
 801053a:	3c01      	subs	r4, #1
 801053c:	e7eb      	b.n	8010516 <quorem+0xee>
 801053e:	2000      	movs	r0, #0
 8010540:	e7ee      	b.n	8010520 <quorem+0xf8>
 8010542:	0000      	movs	r0, r0
 8010544:	0000      	movs	r0, r0
	...

08010548 <_dtoa_r>:
 8010548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801054c:	4616      	mov	r6, r2
 801054e:	461f      	mov	r7, r3
 8010550:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010552:	b099      	sub	sp, #100	; 0x64
 8010554:	4605      	mov	r5, r0
 8010556:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801055a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801055e:	b974      	cbnz	r4, 801057e <_dtoa_r+0x36>
 8010560:	2010      	movs	r0, #16
 8010562:	f001 fb69 	bl	8011c38 <malloc>
 8010566:	4602      	mov	r2, r0
 8010568:	6268      	str	r0, [r5, #36]	; 0x24
 801056a:	b920      	cbnz	r0, 8010576 <_dtoa_r+0x2e>
 801056c:	21ea      	movs	r1, #234	; 0xea
 801056e:	4bae      	ldr	r3, [pc, #696]	; (8010828 <_dtoa_r+0x2e0>)
 8010570:	48ae      	ldr	r0, [pc, #696]	; (801082c <_dtoa_r+0x2e4>)
 8010572:	f002 fad5 	bl	8012b20 <__assert_func>
 8010576:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801057a:	6004      	str	r4, [r0, #0]
 801057c:	60c4      	str	r4, [r0, #12]
 801057e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010580:	6819      	ldr	r1, [r3, #0]
 8010582:	b151      	cbz	r1, 801059a <_dtoa_r+0x52>
 8010584:	685a      	ldr	r2, [r3, #4]
 8010586:	2301      	movs	r3, #1
 8010588:	4093      	lsls	r3, r2
 801058a:	604a      	str	r2, [r1, #4]
 801058c:	608b      	str	r3, [r1, #8]
 801058e:	4628      	mov	r0, r5
 8010590:	f001 fbba 	bl	8011d08 <_Bfree>
 8010594:	2200      	movs	r2, #0
 8010596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010598:	601a      	str	r2, [r3, #0]
 801059a:	1e3b      	subs	r3, r7, #0
 801059c:	bfaf      	iteee	ge
 801059e:	2300      	movge	r3, #0
 80105a0:	2201      	movlt	r2, #1
 80105a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80105a6:	9305      	strlt	r3, [sp, #20]
 80105a8:	bfa8      	it	ge
 80105aa:	f8c8 3000 	strge.w	r3, [r8]
 80105ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80105b2:	4b9f      	ldr	r3, [pc, #636]	; (8010830 <_dtoa_r+0x2e8>)
 80105b4:	bfb8      	it	lt
 80105b6:	f8c8 2000 	strlt.w	r2, [r8]
 80105ba:	ea33 0309 	bics.w	r3, r3, r9
 80105be:	d119      	bne.n	80105f4 <_dtoa_r+0xac>
 80105c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80105c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80105c6:	6013      	str	r3, [r2, #0]
 80105c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105cc:	4333      	orrs	r3, r6
 80105ce:	f000 8580 	beq.w	80110d2 <_dtoa_r+0xb8a>
 80105d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80105d4:	b953      	cbnz	r3, 80105ec <_dtoa_r+0xa4>
 80105d6:	4b97      	ldr	r3, [pc, #604]	; (8010834 <_dtoa_r+0x2ec>)
 80105d8:	e022      	b.n	8010620 <_dtoa_r+0xd8>
 80105da:	4b97      	ldr	r3, [pc, #604]	; (8010838 <_dtoa_r+0x2f0>)
 80105dc:	9308      	str	r3, [sp, #32]
 80105de:	3308      	adds	r3, #8
 80105e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80105e2:	6013      	str	r3, [r2, #0]
 80105e4:	9808      	ldr	r0, [sp, #32]
 80105e6:	b019      	add	sp, #100	; 0x64
 80105e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ec:	4b91      	ldr	r3, [pc, #580]	; (8010834 <_dtoa_r+0x2ec>)
 80105ee:	9308      	str	r3, [sp, #32]
 80105f0:	3303      	adds	r3, #3
 80105f2:	e7f5      	b.n	80105e0 <_dtoa_r+0x98>
 80105f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80105f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80105fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010600:	2200      	movs	r2, #0
 8010602:	2300      	movs	r3, #0
 8010604:	f7f0 fa3c 	bl	8000a80 <__aeabi_dcmpeq>
 8010608:	4680      	mov	r8, r0
 801060a:	b158      	cbz	r0, 8010624 <_dtoa_r+0xdc>
 801060c:	2301      	movs	r3, #1
 801060e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8010610:	6013      	str	r3, [r2, #0]
 8010612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 8559 	beq.w	80110cc <_dtoa_r+0xb84>
 801061a:	4888      	ldr	r0, [pc, #544]	; (801083c <_dtoa_r+0x2f4>)
 801061c:	6018      	str	r0, [r3, #0]
 801061e:	1e43      	subs	r3, r0, #1
 8010620:	9308      	str	r3, [sp, #32]
 8010622:	e7df      	b.n	80105e4 <_dtoa_r+0x9c>
 8010624:	ab16      	add	r3, sp, #88	; 0x58
 8010626:	9301      	str	r3, [sp, #4]
 8010628:	ab17      	add	r3, sp, #92	; 0x5c
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	4628      	mov	r0, r5
 801062e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010632:	f001 ff13 	bl	801245c <__d2b>
 8010636:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801063a:	4682      	mov	sl, r0
 801063c:	2c00      	cmp	r4, #0
 801063e:	d07e      	beq.n	801073e <_dtoa_r+0x1f6>
 8010640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010646:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801064a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801064e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8010652:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8010656:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801065a:	2200      	movs	r2, #0
 801065c:	4b78      	ldr	r3, [pc, #480]	; (8010840 <_dtoa_r+0x2f8>)
 801065e:	f7ef fdef 	bl	8000240 <__aeabi_dsub>
 8010662:	a36b      	add	r3, pc, #428	; (adr r3, 8010810 <_dtoa_r+0x2c8>)
 8010664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010668:	f7ef ffa2 	bl	80005b0 <__aeabi_dmul>
 801066c:	a36a      	add	r3, pc, #424	; (adr r3, 8010818 <_dtoa_r+0x2d0>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f7ef fde7 	bl	8000244 <__adddf3>
 8010676:	4606      	mov	r6, r0
 8010678:	4620      	mov	r0, r4
 801067a:	460f      	mov	r7, r1
 801067c:	f7ef ff2e 	bl	80004dc <__aeabi_i2d>
 8010680:	a367      	add	r3, pc, #412	; (adr r3, 8010820 <_dtoa_r+0x2d8>)
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	f7ef ff93 	bl	80005b0 <__aeabi_dmul>
 801068a:	4602      	mov	r2, r0
 801068c:	460b      	mov	r3, r1
 801068e:	4630      	mov	r0, r6
 8010690:	4639      	mov	r1, r7
 8010692:	f7ef fdd7 	bl	8000244 <__adddf3>
 8010696:	4606      	mov	r6, r0
 8010698:	460f      	mov	r7, r1
 801069a:	f7f0 fa39 	bl	8000b10 <__aeabi_d2iz>
 801069e:	2200      	movs	r2, #0
 80106a0:	4681      	mov	r9, r0
 80106a2:	2300      	movs	r3, #0
 80106a4:	4630      	mov	r0, r6
 80106a6:	4639      	mov	r1, r7
 80106a8:	f7f0 f9f4 	bl	8000a94 <__aeabi_dcmplt>
 80106ac:	b148      	cbz	r0, 80106c2 <_dtoa_r+0x17a>
 80106ae:	4648      	mov	r0, r9
 80106b0:	f7ef ff14 	bl	80004dc <__aeabi_i2d>
 80106b4:	4632      	mov	r2, r6
 80106b6:	463b      	mov	r3, r7
 80106b8:	f7f0 f9e2 	bl	8000a80 <__aeabi_dcmpeq>
 80106bc:	b908      	cbnz	r0, 80106c2 <_dtoa_r+0x17a>
 80106be:	f109 39ff 	add.w	r9, r9, #4294967295
 80106c2:	f1b9 0f16 	cmp.w	r9, #22
 80106c6:	d857      	bhi.n	8010778 <_dtoa_r+0x230>
 80106c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106cc:	4b5d      	ldr	r3, [pc, #372]	; (8010844 <_dtoa_r+0x2fc>)
 80106ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80106d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d6:	f7f0 f9dd 	bl	8000a94 <__aeabi_dcmplt>
 80106da:	2800      	cmp	r0, #0
 80106dc:	d04e      	beq.n	801077c <_dtoa_r+0x234>
 80106de:	2300      	movs	r3, #0
 80106e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80106e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80106e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80106e8:	1b1c      	subs	r4, r3, r4
 80106ea:	1e63      	subs	r3, r4, #1
 80106ec:	9309      	str	r3, [sp, #36]	; 0x24
 80106ee:	bf49      	itett	mi
 80106f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80106f4:	2300      	movpl	r3, #0
 80106f6:	9306      	strmi	r3, [sp, #24]
 80106f8:	2300      	movmi	r3, #0
 80106fa:	bf54      	ite	pl
 80106fc:	9306      	strpl	r3, [sp, #24]
 80106fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8010700:	f1b9 0f00 	cmp.w	r9, #0
 8010704:	db3c      	blt.n	8010780 <_dtoa_r+0x238>
 8010706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010708:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801070c:	444b      	add	r3, r9
 801070e:	9309      	str	r3, [sp, #36]	; 0x24
 8010710:	2300      	movs	r3, #0
 8010712:	930a      	str	r3, [sp, #40]	; 0x28
 8010714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010716:	2b09      	cmp	r3, #9
 8010718:	d86c      	bhi.n	80107f4 <_dtoa_r+0x2ac>
 801071a:	2b05      	cmp	r3, #5
 801071c:	bfc4      	itt	gt
 801071e:	3b04      	subgt	r3, #4
 8010720:	9322      	strgt	r3, [sp, #136]	; 0x88
 8010722:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010724:	bfc8      	it	gt
 8010726:	2400      	movgt	r4, #0
 8010728:	f1a3 0302 	sub.w	r3, r3, #2
 801072c:	bfd8      	it	le
 801072e:	2401      	movle	r4, #1
 8010730:	2b03      	cmp	r3, #3
 8010732:	f200 808b 	bhi.w	801084c <_dtoa_r+0x304>
 8010736:	e8df f003 	tbb	[pc, r3]
 801073a:	4f2d      	.short	0x4f2d
 801073c:	5b4d      	.short	0x5b4d
 801073e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8010742:	441c      	add	r4, r3
 8010744:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8010748:	2b20      	cmp	r3, #32
 801074a:	bfc3      	ittte	gt
 801074c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010750:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8010754:	fa09 f303 	lslgt.w	r3, r9, r3
 8010758:	f1c3 0320 	rsble	r3, r3, #32
 801075c:	bfc6      	itte	gt
 801075e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010762:	4318      	orrgt	r0, r3
 8010764:	fa06 f003 	lslle.w	r0, r6, r3
 8010768:	f7ef fea8 	bl	80004bc <__aeabi_ui2d>
 801076c:	2301      	movs	r3, #1
 801076e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8010772:	3c01      	subs	r4, #1
 8010774:	9313      	str	r3, [sp, #76]	; 0x4c
 8010776:	e770      	b.n	801065a <_dtoa_r+0x112>
 8010778:	2301      	movs	r3, #1
 801077a:	e7b3      	b.n	80106e4 <_dtoa_r+0x19c>
 801077c:	900f      	str	r0, [sp, #60]	; 0x3c
 801077e:	e7b2      	b.n	80106e6 <_dtoa_r+0x19e>
 8010780:	9b06      	ldr	r3, [sp, #24]
 8010782:	eba3 0309 	sub.w	r3, r3, r9
 8010786:	9306      	str	r3, [sp, #24]
 8010788:	f1c9 0300 	rsb	r3, r9, #0
 801078c:	930a      	str	r3, [sp, #40]	; 0x28
 801078e:	2300      	movs	r3, #0
 8010790:	930e      	str	r3, [sp, #56]	; 0x38
 8010792:	e7bf      	b.n	8010714 <_dtoa_r+0x1cc>
 8010794:	2300      	movs	r3, #0
 8010796:	930b      	str	r3, [sp, #44]	; 0x2c
 8010798:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801079a:	2b00      	cmp	r3, #0
 801079c:	dc59      	bgt.n	8010852 <_dtoa_r+0x30a>
 801079e:	f04f 0b01 	mov.w	fp, #1
 80107a2:	465b      	mov	r3, fp
 80107a4:	f8cd b008 	str.w	fp, [sp, #8]
 80107a8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80107ac:	2200      	movs	r2, #0
 80107ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80107b0:	6042      	str	r2, [r0, #4]
 80107b2:	2204      	movs	r2, #4
 80107b4:	f102 0614 	add.w	r6, r2, #20
 80107b8:	429e      	cmp	r6, r3
 80107ba:	6841      	ldr	r1, [r0, #4]
 80107bc:	d94f      	bls.n	801085e <_dtoa_r+0x316>
 80107be:	4628      	mov	r0, r5
 80107c0:	f001 fa62 	bl	8011c88 <_Balloc>
 80107c4:	9008      	str	r0, [sp, #32]
 80107c6:	2800      	cmp	r0, #0
 80107c8:	d14d      	bne.n	8010866 <_dtoa_r+0x31e>
 80107ca:	4602      	mov	r2, r0
 80107cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80107d0:	4b1d      	ldr	r3, [pc, #116]	; (8010848 <_dtoa_r+0x300>)
 80107d2:	e6cd      	b.n	8010570 <_dtoa_r+0x28>
 80107d4:	2301      	movs	r3, #1
 80107d6:	e7de      	b.n	8010796 <_dtoa_r+0x24e>
 80107d8:	2300      	movs	r3, #0
 80107da:	930b      	str	r3, [sp, #44]	; 0x2c
 80107dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80107de:	eb09 0b03 	add.w	fp, r9, r3
 80107e2:	f10b 0301 	add.w	r3, fp, #1
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	9302      	str	r3, [sp, #8]
 80107ea:	bfb8      	it	lt
 80107ec:	2301      	movlt	r3, #1
 80107ee:	e7dd      	b.n	80107ac <_dtoa_r+0x264>
 80107f0:	2301      	movs	r3, #1
 80107f2:	e7f2      	b.n	80107da <_dtoa_r+0x292>
 80107f4:	2401      	movs	r4, #1
 80107f6:	2300      	movs	r3, #0
 80107f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80107fa:	9322      	str	r3, [sp, #136]	; 0x88
 80107fc:	f04f 3bff 	mov.w	fp, #4294967295
 8010800:	2200      	movs	r2, #0
 8010802:	2312      	movs	r3, #18
 8010804:	f8cd b008 	str.w	fp, [sp, #8]
 8010808:	9223      	str	r2, [sp, #140]	; 0x8c
 801080a:	e7cf      	b.n	80107ac <_dtoa_r+0x264>
 801080c:	f3af 8000 	nop.w
 8010810:	636f4361 	.word	0x636f4361
 8010814:	3fd287a7 	.word	0x3fd287a7
 8010818:	8b60c8b3 	.word	0x8b60c8b3
 801081c:	3fc68a28 	.word	0x3fc68a28
 8010820:	509f79fb 	.word	0x509f79fb
 8010824:	3fd34413 	.word	0x3fd34413
 8010828:	08013f2a 	.word	0x08013f2a
 801082c:	08013f41 	.word	0x08013f41
 8010830:	7ff00000 	.word	0x7ff00000
 8010834:	08013f26 	.word	0x08013f26
 8010838:	08013f1d 	.word	0x08013f1d
 801083c:	08013e79 	.word	0x08013e79
 8010840:	3ff80000 	.word	0x3ff80000
 8010844:	08014120 	.word	0x08014120
 8010848:	08013fa0 	.word	0x08013fa0
 801084c:	2301      	movs	r3, #1
 801084e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010850:	e7d4      	b.n	80107fc <_dtoa_r+0x2b4>
 8010852:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8010856:	465b      	mov	r3, fp
 8010858:	f8cd b008 	str.w	fp, [sp, #8]
 801085c:	e7a6      	b.n	80107ac <_dtoa_r+0x264>
 801085e:	3101      	adds	r1, #1
 8010860:	6041      	str	r1, [r0, #4]
 8010862:	0052      	lsls	r2, r2, #1
 8010864:	e7a6      	b.n	80107b4 <_dtoa_r+0x26c>
 8010866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010868:	9a08      	ldr	r2, [sp, #32]
 801086a:	601a      	str	r2, [r3, #0]
 801086c:	9b02      	ldr	r3, [sp, #8]
 801086e:	2b0e      	cmp	r3, #14
 8010870:	f200 80a8 	bhi.w	80109c4 <_dtoa_r+0x47c>
 8010874:	2c00      	cmp	r4, #0
 8010876:	f000 80a5 	beq.w	80109c4 <_dtoa_r+0x47c>
 801087a:	f1b9 0f00 	cmp.w	r9, #0
 801087e:	dd34      	ble.n	80108ea <_dtoa_r+0x3a2>
 8010880:	4a9a      	ldr	r2, [pc, #616]	; (8010aec <_dtoa_r+0x5a4>)
 8010882:	f009 030f 	and.w	r3, r9, #15
 8010886:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801088a:	f419 7f80 	tst.w	r9, #256	; 0x100
 801088e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010892:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8010896:	ea4f 1429 	mov.w	r4, r9, asr #4
 801089a:	d016      	beq.n	80108ca <_dtoa_r+0x382>
 801089c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108a0:	4b93      	ldr	r3, [pc, #588]	; (8010af0 <_dtoa_r+0x5a8>)
 80108a2:	2703      	movs	r7, #3
 80108a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80108a8:	f7ef ffac 	bl	8000804 <__aeabi_ddiv>
 80108ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108b0:	f004 040f 	and.w	r4, r4, #15
 80108b4:	4e8e      	ldr	r6, [pc, #568]	; (8010af0 <_dtoa_r+0x5a8>)
 80108b6:	b954      	cbnz	r4, 80108ce <_dtoa_r+0x386>
 80108b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80108bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80108c0:	f7ef ffa0 	bl	8000804 <__aeabi_ddiv>
 80108c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80108c8:	e029      	b.n	801091e <_dtoa_r+0x3d6>
 80108ca:	2702      	movs	r7, #2
 80108cc:	e7f2      	b.n	80108b4 <_dtoa_r+0x36c>
 80108ce:	07e1      	lsls	r1, r4, #31
 80108d0:	d508      	bpl.n	80108e4 <_dtoa_r+0x39c>
 80108d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80108d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80108da:	f7ef fe69 	bl	80005b0 <__aeabi_dmul>
 80108de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80108e2:	3701      	adds	r7, #1
 80108e4:	1064      	asrs	r4, r4, #1
 80108e6:	3608      	adds	r6, #8
 80108e8:	e7e5      	b.n	80108b6 <_dtoa_r+0x36e>
 80108ea:	f000 80a5 	beq.w	8010a38 <_dtoa_r+0x4f0>
 80108ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80108f2:	f1c9 0400 	rsb	r4, r9, #0
 80108f6:	4b7d      	ldr	r3, [pc, #500]	; (8010aec <_dtoa_r+0x5a4>)
 80108f8:	f004 020f 	and.w	r2, r4, #15
 80108fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010904:	f7ef fe54 	bl	80005b0 <__aeabi_dmul>
 8010908:	2702      	movs	r7, #2
 801090a:	2300      	movs	r3, #0
 801090c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010910:	4e77      	ldr	r6, [pc, #476]	; (8010af0 <_dtoa_r+0x5a8>)
 8010912:	1124      	asrs	r4, r4, #4
 8010914:	2c00      	cmp	r4, #0
 8010916:	f040 8084 	bne.w	8010a22 <_dtoa_r+0x4da>
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1d2      	bne.n	80108c4 <_dtoa_r+0x37c>
 801091e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010920:	2b00      	cmp	r3, #0
 8010922:	f000 808b 	beq.w	8010a3c <_dtoa_r+0x4f4>
 8010926:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801092a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801092e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010932:	2200      	movs	r2, #0
 8010934:	4b6f      	ldr	r3, [pc, #444]	; (8010af4 <_dtoa_r+0x5ac>)
 8010936:	f7f0 f8ad 	bl	8000a94 <__aeabi_dcmplt>
 801093a:	2800      	cmp	r0, #0
 801093c:	d07e      	beq.n	8010a3c <_dtoa_r+0x4f4>
 801093e:	9b02      	ldr	r3, [sp, #8]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d07b      	beq.n	8010a3c <_dtoa_r+0x4f4>
 8010944:	f1bb 0f00 	cmp.w	fp, #0
 8010948:	dd38      	ble.n	80109bc <_dtoa_r+0x474>
 801094a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801094e:	2200      	movs	r2, #0
 8010950:	4b69      	ldr	r3, [pc, #420]	; (8010af8 <_dtoa_r+0x5b0>)
 8010952:	f7ef fe2d 	bl	80005b0 <__aeabi_dmul>
 8010956:	465c      	mov	r4, fp
 8010958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801095c:	f109 38ff 	add.w	r8, r9, #4294967295
 8010960:	3701      	adds	r7, #1
 8010962:	4638      	mov	r0, r7
 8010964:	f7ef fdba 	bl	80004dc <__aeabi_i2d>
 8010968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801096c:	f7ef fe20 	bl	80005b0 <__aeabi_dmul>
 8010970:	2200      	movs	r2, #0
 8010972:	4b62      	ldr	r3, [pc, #392]	; (8010afc <_dtoa_r+0x5b4>)
 8010974:	f7ef fc66 	bl	8000244 <__adddf3>
 8010978:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801097c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010980:	9611      	str	r6, [sp, #68]	; 0x44
 8010982:	2c00      	cmp	r4, #0
 8010984:	d15d      	bne.n	8010a42 <_dtoa_r+0x4fa>
 8010986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801098a:	2200      	movs	r2, #0
 801098c:	4b5c      	ldr	r3, [pc, #368]	; (8010b00 <_dtoa_r+0x5b8>)
 801098e:	f7ef fc57 	bl	8000240 <__aeabi_dsub>
 8010992:	4602      	mov	r2, r0
 8010994:	460b      	mov	r3, r1
 8010996:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801099a:	4633      	mov	r3, r6
 801099c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801099e:	f7f0 f897 	bl	8000ad0 <__aeabi_dcmpgt>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	f040 829e 	bne.w	8010ee4 <_dtoa_r+0x99c>
 80109a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80109ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80109ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80109b2:	f7f0 f86f 	bl	8000a94 <__aeabi_dcmplt>
 80109b6:	2800      	cmp	r0, #0
 80109b8:	f040 8292 	bne.w	8010ee0 <_dtoa_r+0x998>
 80109bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80109c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80109c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f2c0 8153 	blt.w	8010c72 <_dtoa_r+0x72a>
 80109cc:	f1b9 0f0e 	cmp.w	r9, #14
 80109d0:	f300 814f 	bgt.w	8010c72 <_dtoa_r+0x72a>
 80109d4:	4b45      	ldr	r3, [pc, #276]	; (8010aec <_dtoa_r+0x5a4>)
 80109d6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80109da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80109de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80109e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f280 80db 	bge.w	8010ba0 <_dtoa_r+0x658>
 80109ea:	9b02      	ldr	r3, [sp, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f300 80d7 	bgt.w	8010ba0 <_dtoa_r+0x658>
 80109f2:	f040 8274 	bne.w	8010ede <_dtoa_r+0x996>
 80109f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109fa:	2200      	movs	r2, #0
 80109fc:	4b40      	ldr	r3, [pc, #256]	; (8010b00 <_dtoa_r+0x5b8>)
 80109fe:	f7ef fdd7 	bl	80005b0 <__aeabi_dmul>
 8010a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a06:	f7f0 f859 	bl	8000abc <__aeabi_dcmpge>
 8010a0a:	9c02      	ldr	r4, [sp, #8]
 8010a0c:	4626      	mov	r6, r4
 8010a0e:	2800      	cmp	r0, #0
 8010a10:	f040 824a 	bne.w	8010ea8 <_dtoa_r+0x960>
 8010a14:	2331      	movs	r3, #49	; 0x31
 8010a16:	9f08      	ldr	r7, [sp, #32]
 8010a18:	f109 0901 	add.w	r9, r9, #1
 8010a1c:	f807 3b01 	strb.w	r3, [r7], #1
 8010a20:	e246      	b.n	8010eb0 <_dtoa_r+0x968>
 8010a22:	07e2      	lsls	r2, r4, #31
 8010a24:	d505      	bpl.n	8010a32 <_dtoa_r+0x4ea>
 8010a26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a2a:	f7ef fdc1 	bl	80005b0 <__aeabi_dmul>
 8010a2e:	2301      	movs	r3, #1
 8010a30:	3701      	adds	r7, #1
 8010a32:	1064      	asrs	r4, r4, #1
 8010a34:	3608      	adds	r6, #8
 8010a36:	e76d      	b.n	8010914 <_dtoa_r+0x3cc>
 8010a38:	2702      	movs	r7, #2
 8010a3a:	e770      	b.n	801091e <_dtoa_r+0x3d6>
 8010a3c:	46c8      	mov	r8, r9
 8010a3e:	9c02      	ldr	r4, [sp, #8]
 8010a40:	e78f      	b.n	8010962 <_dtoa_r+0x41a>
 8010a42:	9908      	ldr	r1, [sp, #32]
 8010a44:	4b29      	ldr	r3, [pc, #164]	; (8010aec <_dtoa_r+0x5a4>)
 8010a46:	4421      	add	r1, r4
 8010a48:	9112      	str	r1, [sp, #72]	; 0x48
 8010a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8010a54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a58:	2900      	cmp	r1, #0
 8010a5a:	d055      	beq.n	8010b08 <_dtoa_r+0x5c0>
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	4929      	ldr	r1, [pc, #164]	; (8010b04 <_dtoa_r+0x5bc>)
 8010a60:	f7ef fed0 	bl	8000804 <__aeabi_ddiv>
 8010a64:	463b      	mov	r3, r7
 8010a66:	4632      	mov	r2, r6
 8010a68:	f7ef fbea 	bl	8000240 <__aeabi_dsub>
 8010a6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010a70:	9f08      	ldr	r7, [sp, #32]
 8010a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a76:	f7f0 f84b 	bl	8000b10 <__aeabi_d2iz>
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	f7ef fd2e 	bl	80004dc <__aeabi_i2d>
 8010a80:	4602      	mov	r2, r0
 8010a82:	460b      	mov	r3, r1
 8010a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a88:	f7ef fbda 	bl	8000240 <__aeabi_dsub>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	3430      	adds	r4, #48	; 0x30
 8010a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010a9a:	f807 4b01 	strb.w	r4, [r7], #1
 8010a9e:	f7ef fff9 	bl	8000a94 <__aeabi_dcmplt>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	d174      	bne.n	8010b90 <_dtoa_r+0x648>
 8010aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aaa:	2000      	movs	r0, #0
 8010aac:	4911      	ldr	r1, [pc, #68]	; (8010af4 <_dtoa_r+0x5ac>)
 8010aae:	f7ef fbc7 	bl	8000240 <__aeabi_dsub>
 8010ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ab6:	f7ef ffed 	bl	8000a94 <__aeabi_dcmplt>
 8010aba:	2800      	cmp	r0, #0
 8010abc:	f040 80b6 	bne.w	8010c2c <_dtoa_r+0x6e4>
 8010ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010ac2:	429f      	cmp	r7, r3
 8010ac4:	f43f af7a 	beq.w	80109bc <_dtoa_r+0x474>
 8010ac8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010acc:	2200      	movs	r2, #0
 8010ace:	4b0a      	ldr	r3, [pc, #40]	; (8010af8 <_dtoa_r+0x5b0>)
 8010ad0:	f7ef fd6e 	bl	80005b0 <__aeabi_dmul>
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010ade:	4b06      	ldr	r3, [pc, #24]	; (8010af8 <_dtoa_r+0x5b0>)
 8010ae0:	f7ef fd66 	bl	80005b0 <__aeabi_dmul>
 8010ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010ae8:	e7c3      	b.n	8010a72 <_dtoa_r+0x52a>
 8010aea:	bf00      	nop
 8010aec:	08014120 	.word	0x08014120
 8010af0:	080140f8 	.word	0x080140f8
 8010af4:	3ff00000 	.word	0x3ff00000
 8010af8:	40240000 	.word	0x40240000
 8010afc:	401c0000 	.word	0x401c0000
 8010b00:	40140000 	.word	0x40140000
 8010b04:	3fe00000 	.word	0x3fe00000
 8010b08:	4630      	mov	r0, r6
 8010b0a:	4639      	mov	r1, r7
 8010b0c:	f7ef fd50 	bl	80005b0 <__aeabi_dmul>
 8010b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8010b16:	9c08      	ldr	r4, [sp, #32]
 8010b18:	9314      	str	r3, [sp, #80]	; 0x50
 8010b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b1e:	f7ef fff7 	bl	8000b10 <__aeabi_d2iz>
 8010b22:	9015      	str	r0, [sp, #84]	; 0x54
 8010b24:	f7ef fcda 	bl	80004dc <__aeabi_i2d>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010b30:	f7ef fb86 	bl	8000240 <__aeabi_dsub>
 8010b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b36:	4606      	mov	r6, r0
 8010b38:	3330      	adds	r3, #48	; 0x30
 8010b3a:	f804 3b01 	strb.w	r3, [r4], #1
 8010b3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b40:	460f      	mov	r7, r1
 8010b42:	429c      	cmp	r4, r3
 8010b44:	f04f 0200 	mov.w	r2, #0
 8010b48:	d124      	bne.n	8010b94 <_dtoa_r+0x64c>
 8010b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010b4e:	4bb3      	ldr	r3, [pc, #716]	; (8010e1c <_dtoa_r+0x8d4>)
 8010b50:	f7ef fb78 	bl	8000244 <__adddf3>
 8010b54:	4602      	mov	r2, r0
 8010b56:	460b      	mov	r3, r1
 8010b58:	4630      	mov	r0, r6
 8010b5a:	4639      	mov	r1, r7
 8010b5c:	f7ef ffb8 	bl	8000ad0 <__aeabi_dcmpgt>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	d162      	bne.n	8010c2a <_dtoa_r+0x6e2>
 8010b64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010b68:	2000      	movs	r0, #0
 8010b6a:	49ac      	ldr	r1, [pc, #688]	; (8010e1c <_dtoa_r+0x8d4>)
 8010b6c:	f7ef fb68 	bl	8000240 <__aeabi_dsub>
 8010b70:	4602      	mov	r2, r0
 8010b72:	460b      	mov	r3, r1
 8010b74:	4630      	mov	r0, r6
 8010b76:	4639      	mov	r1, r7
 8010b78:	f7ef ff8c 	bl	8000a94 <__aeabi_dcmplt>
 8010b7c:	2800      	cmp	r0, #0
 8010b7e:	f43f af1d 	beq.w	80109bc <_dtoa_r+0x474>
 8010b82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010b84:	1e7b      	subs	r3, r7, #1
 8010b86:	9314      	str	r3, [sp, #80]	; 0x50
 8010b88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8010b8c:	2b30      	cmp	r3, #48	; 0x30
 8010b8e:	d0f8      	beq.n	8010b82 <_dtoa_r+0x63a>
 8010b90:	46c1      	mov	r9, r8
 8010b92:	e03a      	b.n	8010c0a <_dtoa_r+0x6c2>
 8010b94:	4ba2      	ldr	r3, [pc, #648]	; (8010e20 <_dtoa_r+0x8d8>)
 8010b96:	f7ef fd0b 	bl	80005b0 <__aeabi_dmul>
 8010b9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010b9e:	e7bc      	b.n	8010b1a <_dtoa_r+0x5d2>
 8010ba0:	9f08      	ldr	r7, [sp, #32]
 8010ba2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010baa:	f7ef fe2b 	bl	8000804 <__aeabi_ddiv>
 8010bae:	f7ef ffaf 	bl	8000b10 <__aeabi_d2iz>
 8010bb2:	4604      	mov	r4, r0
 8010bb4:	f7ef fc92 	bl	80004dc <__aeabi_i2d>
 8010bb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bbc:	f7ef fcf8 	bl	80005b0 <__aeabi_dmul>
 8010bc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4602      	mov	r2, r0
 8010bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010bcc:	f7ef fb38 	bl	8000240 <__aeabi_dsub>
 8010bd0:	f807 6b01 	strb.w	r6, [r7], #1
 8010bd4:	9e08      	ldr	r6, [sp, #32]
 8010bd6:	9b02      	ldr	r3, [sp, #8]
 8010bd8:	1bbe      	subs	r6, r7, r6
 8010bda:	42b3      	cmp	r3, r6
 8010bdc:	d13a      	bne.n	8010c54 <_dtoa_r+0x70c>
 8010bde:	4602      	mov	r2, r0
 8010be0:	460b      	mov	r3, r1
 8010be2:	f7ef fb2f 	bl	8000244 <__adddf3>
 8010be6:	4602      	mov	r2, r0
 8010be8:	460b      	mov	r3, r1
 8010bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bf2:	f7ef ff6d 	bl	8000ad0 <__aeabi_dcmpgt>
 8010bf6:	bb58      	cbnz	r0, 8010c50 <_dtoa_r+0x708>
 8010bf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c00:	f7ef ff3e 	bl	8000a80 <__aeabi_dcmpeq>
 8010c04:	b108      	cbz	r0, 8010c0a <_dtoa_r+0x6c2>
 8010c06:	07e1      	lsls	r1, r4, #31
 8010c08:	d422      	bmi.n	8010c50 <_dtoa_r+0x708>
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	4651      	mov	r1, sl
 8010c0e:	f001 f87b 	bl	8011d08 <_Bfree>
 8010c12:	2300      	movs	r3, #0
 8010c14:	703b      	strb	r3, [r7, #0]
 8010c16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010c18:	f109 0001 	add.w	r0, r9, #1
 8010c1c:	6018      	str	r0, [r3, #0]
 8010c1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	f43f acdf 	beq.w	80105e4 <_dtoa_r+0x9c>
 8010c26:	601f      	str	r7, [r3, #0]
 8010c28:	e4dc      	b.n	80105e4 <_dtoa_r+0x9c>
 8010c2a:	4627      	mov	r7, r4
 8010c2c:	463b      	mov	r3, r7
 8010c2e:	461f      	mov	r7, r3
 8010c30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c34:	2a39      	cmp	r2, #57	; 0x39
 8010c36:	d107      	bne.n	8010c48 <_dtoa_r+0x700>
 8010c38:	9a08      	ldr	r2, [sp, #32]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d1f7      	bne.n	8010c2e <_dtoa_r+0x6e6>
 8010c3e:	2230      	movs	r2, #48	; 0x30
 8010c40:	9908      	ldr	r1, [sp, #32]
 8010c42:	f108 0801 	add.w	r8, r8, #1
 8010c46:	700a      	strb	r2, [r1, #0]
 8010c48:	781a      	ldrb	r2, [r3, #0]
 8010c4a:	3201      	adds	r2, #1
 8010c4c:	701a      	strb	r2, [r3, #0]
 8010c4e:	e79f      	b.n	8010b90 <_dtoa_r+0x648>
 8010c50:	46c8      	mov	r8, r9
 8010c52:	e7eb      	b.n	8010c2c <_dtoa_r+0x6e4>
 8010c54:	2200      	movs	r2, #0
 8010c56:	4b72      	ldr	r3, [pc, #456]	; (8010e20 <_dtoa_r+0x8d8>)
 8010c58:	f7ef fcaa 	bl	80005b0 <__aeabi_dmul>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	460b      	mov	r3, r1
 8010c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010c64:	2200      	movs	r2, #0
 8010c66:	2300      	movs	r3, #0
 8010c68:	f7ef ff0a 	bl	8000a80 <__aeabi_dcmpeq>
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d098      	beq.n	8010ba2 <_dtoa_r+0x65a>
 8010c70:	e7cb      	b.n	8010c0a <_dtoa_r+0x6c2>
 8010c72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c74:	2a00      	cmp	r2, #0
 8010c76:	f000 80cd 	beq.w	8010e14 <_dtoa_r+0x8cc>
 8010c7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c7c:	2a01      	cmp	r2, #1
 8010c7e:	f300 80af 	bgt.w	8010de0 <_dtoa_r+0x898>
 8010c82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010c84:	2a00      	cmp	r2, #0
 8010c86:	f000 80a7 	beq.w	8010dd8 <_dtoa_r+0x890>
 8010c8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010c8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010c90:	9f06      	ldr	r7, [sp, #24]
 8010c92:	9a06      	ldr	r2, [sp, #24]
 8010c94:	2101      	movs	r1, #1
 8010c96:	441a      	add	r2, r3
 8010c98:	9206      	str	r2, [sp, #24]
 8010c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	441a      	add	r2, r3
 8010ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8010ca2:	f001 f935 	bl	8011f10 <__i2b>
 8010ca6:	4606      	mov	r6, r0
 8010ca8:	2f00      	cmp	r7, #0
 8010caa:	dd0c      	ble.n	8010cc6 <_dtoa_r+0x77e>
 8010cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	dd09      	ble.n	8010cc6 <_dtoa_r+0x77e>
 8010cb2:	42bb      	cmp	r3, r7
 8010cb4:	bfa8      	it	ge
 8010cb6:	463b      	movge	r3, r7
 8010cb8:	9a06      	ldr	r2, [sp, #24]
 8010cba:	1aff      	subs	r7, r7, r3
 8010cbc:	1ad2      	subs	r2, r2, r3
 8010cbe:	9206      	str	r2, [sp, #24]
 8010cc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cc2:	1ad3      	subs	r3, r2, r3
 8010cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8010cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cc8:	b1f3      	cbz	r3, 8010d08 <_dtoa_r+0x7c0>
 8010cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f000 80a9 	beq.w	8010e24 <_dtoa_r+0x8dc>
 8010cd2:	2c00      	cmp	r4, #0
 8010cd4:	dd10      	ble.n	8010cf8 <_dtoa_r+0x7b0>
 8010cd6:	4631      	mov	r1, r6
 8010cd8:	4622      	mov	r2, r4
 8010cda:	4628      	mov	r0, r5
 8010cdc:	f001 f9d2 	bl	8012084 <__pow5mult>
 8010ce0:	4652      	mov	r2, sl
 8010ce2:	4601      	mov	r1, r0
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	4628      	mov	r0, r5
 8010ce8:	f001 f928 	bl	8011f3c <__multiply>
 8010cec:	4680      	mov	r8, r0
 8010cee:	4651      	mov	r1, sl
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f001 f809 	bl	8011d08 <_Bfree>
 8010cf6:	46c2      	mov	sl, r8
 8010cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010cfa:	1b1a      	subs	r2, r3, r4
 8010cfc:	d004      	beq.n	8010d08 <_dtoa_r+0x7c0>
 8010cfe:	4651      	mov	r1, sl
 8010d00:	4628      	mov	r0, r5
 8010d02:	f001 f9bf 	bl	8012084 <__pow5mult>
 8010d06:	4682      	mov	sl, r0
 8010d08:	2101      	movs	r1, #1
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	f001 f900 	bl	8011f10 <__i2b>
 8010d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d12:	4604      	mov	r4, r0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	f340 8087 	ble.w	8010e28 <_dtoa_r+0x8e0>
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	4601      	mov	r1, r0
 8010d1e:	4628      	mov	r0, r5
 8010d20:	f001 f9b0 	bl	8012084 <__pow5mult>
 8010d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d26:	4604      	mov	r4, r0
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	f340 8080 	ble.w	8010e2e <_dtoa_r+0x8e6>
 8010d2e:	f04f 0800 	mov.w	r8, #0
 8010d32:	6923      	ldr	r3, [r4, #16]
 8010d34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d38:	6918      	ldr	r0, [r3, #16]
 8010d3a:	f001 f89b 	bl	8011e74 <__hi0bits>
 8010d3e:	f1c0 0020 	rsb	r0, r0, #32
 8010d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d44:	4418      	add	r0, r3
 8010d46:	f010 001f 	ands.w	r0, r0, #31
 8010d4a:	f000 8092 	beq.w	8010e72 <_dtoa_r+0x92a>
 8010d4e:	f1c0 0320 	rsb	r3, r0, #32
 8010d52:	2b04      	cmp	r3, #4
 8010d54:	f340 808a 	ble.w	8010e6c <_dtoa_r+0x924>
 8010d58:	f1c0 001c 	rsb	r0, r0, #28
 8010d5c:	9b06      	ldr	r3, [sp, #24]
 8010d5e:	4407      	add	r7, r0
 8010d60:	4403      	add	r3, r0
 8010d62:	9306      	str	r3, [sp, #24]
 8010d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d66:	4403      	add	r3, r0
 8010d68:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6a:	9b06      	ldr	r3, [sp, #24]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	dd05      	ble.n	8010d7c <_dtoa_r+0x834>
 8010d70:	4651      	mov	r1, sl
 8010d72:	461a      	mov	r2, r3
 8010d74:	4628      	mov	r0, r5
 8010d76:	f001 f9df 	bl	8012138 <__lshift>
 8010d7a:	4682      	mov	sl, r0
 8010d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	dd05      	ble.n	8010d8e <_dtoa_r+0x846>
 8010d82:	4621      	mov	r1, r4
 8010d84:	461a      	mov	r2, r3
 8010d86:	4628      	mov	r0, r5
 8010d88:	f001 f9d6 	bl	8012138 <__lshift>
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d070      	beq.n	8010e76 <_dtoa_r+0x92e>
 8010d94:	4621      	mov	r1, r4
 8010d96:	4650      	mov	r0, sl
 8010d98:	f001 fa3a 	bl	8012210 <__mcmp>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	da6a      	bge.n	8010e76 <_dtoa_r+0x92e>
 8010da0:	2300      	movs	r3, #0
 8010da2:	4651      	mov	r1, sl
 8010da4:	220a      	movs	r2, #10
 8010da6:	4628      	mov	r0, r5
 8010da8:	f000 ffd0 	bl	8011d4c <__multadd>
 8010dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010dae:	4682      	mov	sl, r0
 8010db0:	f109 39ff 	add.w	r9, r9, #4294967295
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f000 8193 	beq.w	80110e0 <_dtoa_r+0xb98>
 8010dba:	4631      	mov	r1, r6
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	220a      	movs	r2, #10
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	f000 ffc3 	bl	8011d4c <__multadd>
 8010dc6:	f1bb 0f00 	cmp.w	fp, #0
 8010dca:	4606      	mov	r6, r0
 8010dcc:	f300 8093 	bgt.w	8010ef6 <_dtoa_r+0x9ae>
 8010dd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	dc57      	bgt.n	8010e86 <_dtoa_r+0x93e>
 8010dd6:	e08e      	b.n	8010ef6 <_dtoa_r+0x9ae>
 8010dd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010dda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010dde:	e756      	b.n	8010c8e <_dtoa_r+0x746>
 8010de0:	9b02      	ldr	r3, [sp, #8]
 8010de2:	1e5c      	subs	r4, r3, #1
 8010de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010de6:	42a3      	cmp	r3, r4
 8010de8:	bfb7      	itett	lt
 8010dea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010dec:	1b1c      	subge	r4, r3, r4
 8010dee:	1ae2      	sublt	r2, r4, r3
 8010df0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010df2:	bfbe      	ittt	lt
 8010df4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8010df6:	189b      	addlt	r3, r3, r2
 8010df8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010dfa:	9b02      	ldr	r3, [sp, #8]
 8010dfc:	bfb8      	it	lt
 8010dfe:	2400      	movlt	r4, #0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	bfbb      	ittet	lt
 8010e04:	9b06      	ldrlt	r3, [sp, #24]
 8010e06:	9a02      	ldrlt	r2, [sp, #8]
 8010e08:	9f06      	ldrge	r7, [sp, #24]
 8010e0a:	1a9f      	sublt	r7, r3, r2
 8010e0c:	bfac      	ite	ge
 8010e0e:	9b02      	ldrge	r3, [sp, #8]
 8010e10:	2300      	movlt	r3, #0
 8010e12:	e73e      	b.n	8010c92 <_dtoa_r+0x74a>
 8010e14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010e16:	9f06      	ldr	r7, [sp, #24]
 8010e18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8010e1a:	e745      	b.n	8010ca8 <_dtoa_r+0x760>
 8010e1c:	3fe00000 	.word	0x3fe00000
 8010e20:	40240000 	.word	0x40240000
 8010e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e26:	e76a      	b.n	8010cfe <_dtoa_r+0x7b6>
 8010e28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	dc19      	bgt.n	8010e62 <_dtoa_r+0x91a>
 8010e2e:	9b04      	ldr	r3, [sp, #16]
 8010e30:	b9bb      	cbnz	r3, 8010e62 <_dtoa_r+0x91a>
 8010e32:	9b05      	ldr	r3, [sp, #20]
 8010e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010e38:	b99b      	cbnz	r3, 8010e62 <_dtoa_r+0x91a>
 8010e3a:	9b05      	ldr	r3, [sp, #20]
 8010e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e40:	0d1b      	lsrs	r3, r3, #20
 8010e42:	051b      	lsls	r3, r3, #20
 8010e44:	b183      	cbz	r3, 8010e68 <_dtoa_r+0x920>
 8010e46:	f04f 0801 	mov.w	r8, #1
 8010e4a:	9b06      	ldr	r3, [sp, #24]
 8010e4c:	3301      	adds	r3, #1
 8010e4e:	9306      	str	r3, [sp, #24]
 8010e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e52:	3301      	adds	r3, #1
 8010e54:	9309      	str	r3, [sp, #36]	; 0x24
 8010e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	f47f af6a 	bne.w	8010d32 <_dtoa_r+0x7ea>
 8010e5e:	2001      	movs	r0, #1
 8010e60:	e76f      	b.n	8010d42 <_dtoa_r+0x7fa>
 8010e62:	f04f 0800 	mov.w	r8, #0
 8010e66:	e7f6      	b.n	8010e56 <_dtoa_r+0x90e>
 8010e68:	4698      	mov	r8, r3
 8010e6a:	e7f4      	b.n	8010e56 <_dtoa_r+0x90e>
 8010e6c:	f43f af7d 	beq.w	8010d6a <_dtoa_r+0x822>
 8010e70:	4618      	mov	r0, r3
 8010e72:	301c      	adds	r0, #28
 8010e74:	e772      	b.n	8010d5c <_dtoa_r+0x814>
 8010e76:	9b02      	ldr	r3, [sp, #8]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	dc36      	bgt.n	8010eea <_dtoa_r+0x9a2>
 8010e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	dd33      	ble.n	8010eea <_dtoa_r+0x9a2>
 8010e82:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010e86:	f1bb 0f00 	cmp.w	fp, #0
 8010e8a:	d10d      	bne.n	8010ea8 <_dtoa_r+0x960>
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	465b      	mov	r3, fp
 8010e90:	2205      	movs	r2, #5
 8010e92:	4628      	mov	r0, r5
 8010e94:	f000 ff5a 	bl	8011d4c <__multadd>
 8010e98:	4601      	mov	r1, r0
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	4650      	mov	r0, sl
 8010e9e:	f001 f9b7 	bl	8012210 <__mcmp>
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	f73f adb6 	bgt.w	8010a14 <_dtoa_r+0x4cc>
 8010ea8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010eaa:	9f08      	ldr	r7, [sp, #32]
 8010eac:	ea6f 0903 	mvn.w	r9, r3
 8010eb0:	f04f 0800 	mov.w	r8, #0
 8010eb4:	4621      	mov	r1, r4
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f000 ff26 	bl	8011d08 <_Bfree>
 8010ebc:	2e00      	cmp	r6, #0
 8010ebe:	f43f aea4 	beq.w	8010c0a <_dtoa_r+0x6c2>
 8010ec2:	f1b8 0f00 	cmp.w	r8, #0
 8010ec6:	d005      	beq.n	8010ed4 <_dtoa_r+0x98c>
 8010ec8:	45b0      	cmp	r8, r6
 8010eca:	d003      	beq.n	8010ed4 <_dtoa_r+0x98c>
 8010ecc:	4641      	mov	r1, r8
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f000 ff1a 	bl	8011d08 <_Bfree>
 8010ed4:	4631      	mov	r1, r6
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f000 ff16 	bl	8011d08 <_Bfree>
 8010edc:	e695      	b.n	8010c0a <_dtoa_r+0x6c2>
 8010ede:	2400      	movs	r4, #0
 8010ee0:	4626      	mov	r6, r4
 8010ee2:	e7e1      	b.n	8010ea8 <_dtoa_r+0x960>
 8010ee4:	46c1      	mov	r9, r8
 8010ee6:	4626      	mov	r6, r4
 8010ee8:	e594      	b.n	8010a14 <_dtoa_r+0x4cc>
 8010eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010eec:	f8dd b008 	ldr.w	fp, [sp, #8]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 80fc 	beq.w	80110ee <_dtoa_r+0xba6>
 8010ef6:	2f00      	cmp	r7, #0
 8010ef8:	dd05      	ble.n	8010f06 <_dtoa_r+0x9be>
 8010efa:	4631      	mov	r1, r6
 8010efc:	463a      	mov	r2, r7
 8010efe:	4628      	mov	r0, r5
 8010f00:	f001 f91a 	bl	8012138 <__lshift>
 8010f04:	4606      	mov	r6, r0
 8010f06:	f1b8 0f00 	cmp.w	r8, #0
 8010f0a:	d05c      	beq.n	8010fc6 <_dtoa_r+0xa7e>
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	6871      	ldr	r1, [r6, #4]
 8010f10:	f000 feba 	bl	8011c88 <_Balloc>
 8010f14:	4607      	mov	r7, r0
 8010f16:	b928      	cbnz	r0, 8010f24 <_dtoa_r+0x9dc>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010f1e:	4b7e      	ldr	r3, [pc, #504]	; (8011118 <_dtoa_r+0xbd0>)
 8010f20:	f7ff bb26 	b.w	8010570 <_dtoa_r+0x28>
 8010f24:	6932      	ldr	r2, [r6, #16]
 8010f26:	f106 010c 	add.w	r1, r6, #12
 8010f2a:	3202      	adds	r2, #2
 8010f2c:	0092      	lsls	r2, r2, #2
 8010f2e:	300c      	adds	r0, #12
 8010f30:	f7fd fbb2 	bl	800e698 <memcpy>
 8010f34:	2201      	movs	r2, #1
 8010f36:	4639      	mov	r1, r7
 8010f38:	4628      	mov	r0, r5
 8010f3a:	f001 f8fd 	bl	8012138 <__lshift>
 8010f3e:	46b0      	mov	r8, r6
 8010f40:	4606      	mov	r6, r0
 8010f42:	9b08      	ldr	r3, [sp, #32]
 8010f44:	3301      	adds	r3, #1
 8010f46:	9302      	str	r3, [sp, #8]
 8010f48:	9b08      	ldr	r3, [sp, #32]
 8010f4a:	445b      	add	r3, fp
 8010f4c:	930a      	str	r3, [sp, #40]	; 0x28
 8010f4e:	9b04      	ldr	r3, [sp, #16]
 8010f50:	f003 0301 	and.w	r3, r3, #1
 8010f54:	9309      	str	r3, [sp, #36]	; 0x24
 8010f56:	9b02      	ldr	r3, [sp, #8]
 8010f58:	4621      	mov	r1, r4
 8010f5a:	4650      	mov	r0, sl
 8010f5c:	f103 3bff 	add.w	fp, r3, #4294967295
 8010f60:	f7ff fa62 	bl	8010428 <quorem>
 8010f64:	4603      	mov	r3, r0
 8010f66:	4641      	mov	r1, r8
 8010f68:	3330      	adds	r3, #48	; 0x30
 8010f6a:	9004      	str	r0, [sp, #16]
 8010f6c:	4650      	mov	r0, sl
 8010f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f70:	f001 f94e 	bl	8012210 <__mcmp>
 8010f74:	4632      	mov	r2, r6
 8010f76:	9006      	str	r0, [sp, #24]
 8010f78:	4621      	mov	r1, r4
 8010f7a:	4628      	mov	r0, r5
 8010f7c:	f001 f964 	bl	8012248 <__mdiff>
 8010f80:	68c2      	ldr	r2, [r0, #12]
 8010f82:	4607      	mov	r7, r0
 8010f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f86:	bb02      	cbnz	r2, 8010fca <_dtoa_r+0xa82>
 8010f88:	4601      	mov	r1, r0
 8010f8a:	4650      	mov	r0, sl
 8010f8c:	f001 f940 	bl	8012210 <__mcmp>
 8010f90:	4602      	mov	r2, r0
 8010f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f94:	4639      	mov	r1, r7
 8010f96:	4628      	mov	r0, r5
 8010f98:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8010f9c:	f000 feb4 	bl	8011d08 <_Bfree>
 8010fa0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010fa4:	9f02      	ldr	r7, [sp, #8]
 8010fa6:	ea43 0102 	orr.w	r1, r3, r2
 8010faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fac:	430b      	orrs	r3, r1
 8010fae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fb0:	d10d      	bne.n	8010fce <_dtoa_r+0xa86>
 8010fb2:	2b39      	cmp	r3, #57	; 0x39
 8010fb4:	d027      	beq.n	8011006 <_dtoa_r+0xabe>
 8010fb6:	9a06      	ldr	r2, [sp, #24]
 8010fb8:	2a00      	cmp	r2, #0
 8010fba:	dd01      	ble.n	8010fc0 <_dtoa_r+0xa78>
 8010fbc:	9b04      	ldr	r3, [sp, #16]
 8010fbe:	3331      	adds	r3, #49	; 0x31
 8010fc0:	f88b 3000 	strb.w	r3, [fp]
 8010fc4:	e776      	b.n	8010eb4 <_dtoa_r+0x96c>
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	e7b9      	b.n	8010f3e <_dtoa_r+0x9f6>
 8010fca:	2201      	movs	r2, #1
 8010fcc:	e7e2      	b.n	8010f94 <_dtoa_r+0xa4c>
 8010fce:	9906      	ldr	r1, [sp, #24]
 8010fd0:	2900      	cmp	r1, #0
 8010fd2:	db04      	blt.n	8010fde <_dtoa_r+0xa96>
 8010fd4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8010fd6:	4301      	orrs	r1, r0
 8010fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fda:	4301      	orrs	r1, r0
 8010fdc:	d120      	bne.n	8011020 <_dtoa_r+0xad8>
 8010fde:	2a00      	cmp	r2, #0
 8010fe0:	ddee      	ble.n	8010fc0 <_dtoa_r+0xa78>
 8010fe2:	4651      	mov	r1, sl
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	9302      	str	r3, [sp, #8]
 8010fea:	f001 f8a5 	bl	8012138 <__lshift>
 8010fee:	4621      	mov	r1, r4
 8010ff0:	4682      	mov	sl, r0
 8010ff2:	f001 f90d 	bl	8012210 <__mcmp>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	9b02      	ldr	r3, [sp, #8]
 8010ffa:	dc02      	bgt.n	8011002 <_dtoa_r+0xaba>
 8010ffc:	d1e0      	bne.n	8010fc0 <_dtoa_r+0xa78>
 8010ffe:	07da      	lsls	r2, r3, #31
 8011000:	d5de      	bpl.n	8010fc0 <_dtoa_r+0xa78>
 8011002:	2b39      	cmp	r3, #57	; 0x39
 8011004:	d1da      	bne.n	8010fbc <_dtoa_r+0xa74>
 8011006:	2339      	movs	r3, #57	; 0x39
 8011008:	f88b 3000 	strb.w	r3, [fp]
 801100c:	463b      	mov	r3, r7
 801100e:	461f      	mov	r7, r3
 8011010:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8011014:	3b01      	subs	r3, #1
 8011016:	2a39      	cmp	r2, #57	; 0x39
 8011018:	d050      	beq.n	80110bc <_dtoa_r+0xb74>
 801101a:	3201      	adds	r2, #1
 801101c:	701a      	strb	r2, [r3, #0]
 801101e:	e749      	b.n	8010eb4 <_dtoa_r+0x96c>
 8011020:	2a00      	cmp	r2, #0
 8011022:	dd03      	ble.n	801102c <_dtoa_r+0xae4>
 8011024:	2b39      	cmp	r3, #57	; 0x39
 8011026:	d0ee      	beq.n	8011006 <_dtoa_r+0xabe>
 8011028:	3301      	adds	r3, #1
 801102a:	e7c9      	b.n	8010fc0 <_dtoa_r+0xa78>
 801102c:	9a02      	ldr	r2, [sp, #8]
 801102e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011030:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011034:	428a      	cmp	r2, r1
 8011036:	d02a      	beq.n	801108e <_dtoa_r+0xb46>
 8011038:	4651      	mov	r1, sl
 801103a:	2300      	movs	r3, #0
 801103c:	220a      	movs	r2, #10
 801103e:	4628      	mov	r0, r5
 8011040:	f000 fe84 	bl	8011d4c <__multadd>
 8011044:	45b0      	cmp	r8, r6
 8011046:	4682      	mov	sl, r0
 8011048:	f04f 0300 	mov.w	r3, #0
 801104c:	f04f 020a 	mov.w	r2, #10
 8011050:	4641      	mov	r1, r8
 8011052:	4628      	mov	r0, r5
 8011054:	d107      	bne.n	8011066 <_dtoa_r+0xb1e>
 8011056:	f000 fe79 	bl	8011d4c <__multadd>
 801105a:	4680      	mov	r8, r0
 801105c:	4606      	mov	r6, r0
 801105e:	9b02      	ldr	r3, [sp, #8]
 8011060:	3301      	adds	r3, #1
 8011062:	9302      	str	r3, [sp, #8]
 8011064:	e777      	b.n	8010f56 <_dtoa_r+0xa0e>
 8011066:	f000 fe71 	bl	8011d4c <__multadd>
 801106a:	4631      	mov	r1, r6
 801106c:	4680      	mov	r8, r0
 801106e:	2300      	movs	r3, #0
 8011070:	220a      	movs	r2, #10
 8011072:	4628      	mov	r0, r5
 8011074:	f000 fe6a 	bl	8011d4c <__multadd>
 8011078:	4606      	mov	r6, r0
 801107a:	e7f0      	b.n	801105e <_dtoa_r+0xb16>
 801107c:	f1bb 0f00 	cmp.w	fp, #0
 8011080:	bfcc      	ite	gt
 8011082:	465f      	movgt	r7, fp
 8011084:	2701      	movle	r7, #1
 8011086:	f04f 0800 	mov.w	r8, #0
 801108a:	9a08      	ldr	r2, [sp, #32]
 801108c:	4417      	add	r7, r2
 801108e:	4651      	mov	r1, sl
 8011090:	2201      	movs	r2, #1
 8011092:	4628      	mov	r0, r5
 8011094:	9302      	str	r3, [sp, #8]
 8011096:	f001 f84f 	bl	8012138 <__lshift>
 801109a:	4621      	mov	r1, r4
 801109c:	4682      	mov	sl, r0
 801109e:	f001 f8b7 	bl	8012210 <__mcmp>
 80110a2:	2800      	cmp	r0, #0
 80110a4:	dcb2      	bgt.n	801100c <_dtoa_r+0xac4>
 80110a6:	d102      	bne.n	80110ae <_dtoa_r+0xb66>
 80110a8:	9b02      	ldr	r3, [sp, #8]
 80110aa:	07db      	lsls	r3, r3, #31
 80110ac:	d4ae      	bmi.n	801100c <_dtoa_r+0xac4>
 80110ae:	463b      	mov	r3, r7
 80110b0:	461f      	mov	r7, r3
 80110b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110b6:	2a30      	cmp	r2, #48	; 0x30
 80110b8:	d0fa      	beq.n	80110b0 <_dtoa_r+0xb68>
 80110ba:	e6fb      	b.n	8010eb4 <_dtoa_r+0x96c>
 80110bc:	9a08      	ldr	r2, [sp, #32]
 80110be:	429a      	cmp	r2, r3
 80110c0:	d1a5      	bne.n	801100e <_dtoa_r+0xac6>
 80110c2:	2331      	movs	r3, #49	; 0x31
 80110c4:	f109 0901 	add.w	r9, r9, #1
 80110c8:	7013      	strb	r3, [r2, #0]
 80110ca:	e6f3      	b.n	8010eb4 <_dtoa_r+0x96c>
 80110cc:	4b13      	ldr	r3, [pc, #76]	; (801111c <_dtoa_r+0xbd4>)
 80110ce:	f7ff baa7 	b.w	8010620 <_dtoa_r+0xd8>
 80110d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	f47f aa80 	bne.w	80105da <_dtoa_r+0x92>
 80110da:	4b11      	ldr	r3, [pc, #68]	; (8011120 <_dtoa_r+0xbd8>)
 80110dc:	f7ff baa0 	b.w	8010620 <_dtoa_r+0xd8>
 80110e0:	f1bb 0f00 	cmp.w	fp, #0
 80110e4:	dc03      	bgt.n	80110ee <_dtoa_r+0xba6>
 80110e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80110e8:	2b02      	cmp	r3, #2
 80110ea:	f73f aecc 	bgt.w	8010e86 <_dtoa_r+0x93e>
 80110ee:	9f08      	ldr	r7, [sp, #32]
 80110f0:	4621      	mov	r1, r4
 80110f2:	4650      	mov	r0, sl
 80110f4:	f7ff f998 	bl	8010428 <quorem>
 80110f8:	9a08      	ldr	r2, [sp, #32]
 80110fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80110fe:	f807 3b01 	strb.w	r3, [r7], #1
 8011102:	1aba      	subs	r2, r7, r2
 8011104:	4593      	cmp	fp, r2
 8011106:	ddb9      	ble.n	801107c <_dtoa_r+0xb34>
 8011108:	4651      	mov	r1, sl
 801110a:	2300      	movs	r3, #0
 801110c:	220a      	movs	r2, #10
 801110e:	4628      	mov	r0, r5
 8011110:	f000 fe1c 	bl	8011d4c <__multadd>
 8011114:	4682      	mov	sl, r0
 8011116:	e7eb      	b.n	80110f0 <_dtoa_r+0xba8>
 8011118:	08013fa0 	.word	0x08013fa0
 801111c:	08013e78 	.word	0x08013e78
 8011120:	08013f1d 	.word	0x08013f1d

08011124 <__sflush_r>:
 8011124:	898a      	ldrh	r2, [r1, #12]
 8011126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801112a:	4605      	mov	r5, r0
 801112c:	0710      	lsls	r0, r2, #28
 801112e:	460c      	mov	r4, r1
 8011130:	d458      	bmi.n	80111e4 <__sflush_r+0xc0>
 8011132:	684b      	ldr	r3, [r1, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	dc05      	bgt.n	8011144 <__sflush_r+0x20>
 8011138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801113a:	2b00      	cmp	r3, #0
 801113c:	dc02      	bgt.n	8011144 <__sflush_r+0x20>
 801113e:	2000      	movs	r0, #0
 8011140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011146:	2e00      	cmp	r6, #0
 8011148:	d0f9      	beq.n	801113e <__sflush_r+0x1a>
 801114a:	2300      	movs	r3, #0
 801114c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011150:	682f      	ldr	r7, [r5, #0]
 8011152:	602b      	str	r3, [r5, #0]
 8011154:	d032      	beq.n	80111bc <__sflush_r+0x98>
 8011156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	075a      	lsls	r2, r3, #29
 801115c:	d505      	bpl.n	801116a <__sflush_r+0x46>
 801115e:	6863      	ldr	r3, [r4, #4]
 8011160:	1ac0      	subs	r0, r0, r3
 8011162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011164:	b10b      	cbz	r3, 801116a <__sflush_r+0x46>
 8011166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011168:	1ac0      	subs	r0, r0, r3
 801116a:	2300      	movs	r3, #0
 801116c:	4602      	mov	r2, r0
 801116e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011170:	4628      	mov	r0, r5
 8011172:	6a21      	ldr	r1, [r4, #32]
 8011174:	47b0      	blx	r6
 8011176:	1c43      	adds	r3, r0, #1
 8011178:	89a3      	ldrh	r3, [r4, #12]
 801117a:	d106      	bne.n	801118a <__sflush_r+0x66>
 801117c:	6829      	ldr	r1, [r5, #0]
 801117e:	291d      	cmp	r1, #29
 8011180:	d82c      	bhi.n	80111dc <__sflush_r+0xb8>
 8011182:	4a2a      	ldr	r2, [pc, #168]	; (801122c <__sflush_r+0x108>)
 8011184:	40ca      	lsrs	r2, r1
 8011186:	07d6      	lsls	r6, r2, #31
 8011188:	d528      	bpl.n	80111dc <__sflush_r+0xb8>
 801118a:	2200      	movs	r2, #0
 801118c:	6062      	str	r2, [r4, #4]
 801118e:	6922      	ldr	r2, [r4, #16]
 8011190:	04d9      	lsls	r1, r3, #19
 8011192:	6022      	str	r2, [r4, #0]
 8011194:	d504      	bpl.n	80111a0 <__sflush_r+0x7c>
 8011196:	1c42      	adds	r2, r0, #1
 8011198:	d101      	bne.n	801119e <__sflush_r+0x7a>
 801119a:	682b      	ldr	r3, [r5, #0]
 801119c:	b903      	cbnz	r3, 80111a0 <__sflush_r+0x7c>
 801119e:	6560      	str	r0, [r4, #84]	; 0x54
 80111a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111a2:	602f      	str	r7, [r5, #0]
 80111a4:	2900      	cmp	r1, #0
 80111a6:	d0ca      	beq.n	801113e <__sflush_r+0x1a>
 80111a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111ac:	4299      	cmp	r1, r3
 80111ae:	d002      	beq.n	80111b6 <__sflush_r+0x92>
 80111b0:	4628      	mov	r0, r5
 80111b2:	f001 fa2f 	bl	8012614 <_free_r>
 80111b6:	2000      	movs	r0, #0
 80111b8:	6360      	str	r0, [r4, #52]	; 0x34
 80111ba:	e7c1      	b.n	8011140 <__sflush_r+0x1c>
 80111bc:	6a21      	ldr	r1, [r4, #32]
 80111be:	2301      	movs	r3, #1
 80111c0:	4628      	mov	r0, r5
 80111c2:	47b0      	blx	r6
 80111c4:	1c41      	adds	r1, r0, #1
 80111c6:	d1c7      	bne.n	8011158 <__sflush_r+0x34>
 80111c8:	682b      	ldr	r3, [r5, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d0c4      	beq.n	8011158 <__sflush_r+0x34>
 80111ce:	2b1d      	cmp	r3, #29
 80111d0:	d001      	beq.n	80111d6 <__sflush_r+0xb2>
 80111d2:	2b16      	cmp	r3, #22
 80111d4:	d101      	bne.n	80111da <__sflush_r+0xb6>
 80111d6:	602f      	str	r7, [r5, #0]
 80111d8:	e7b1      	b.n	801113e <__sflush_r+0x1a>
 80111da:	89a3      	ldrh	r3, [r4, #12]
 80111dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111e0:	81a3      	strh	r3, [r4, #12]
 80111e2:	e7ad      	b.n	8011140 <__sflush_r+0x1c>
 80111e4:	690f      	ldr	r7, [r1, #16]
 80111e6:	2f00      	cmp	r7, #0
 80111e8:	d0a9      	beq.n	801113e <__sflush_r+0x1a>
 80111ea:	0793      	lsls	r3, r2, #30
 80111ec:	bf18      	it	ne
 80111ee:	2300      	movne	r3, #0
 80111f0:	680e      	ldr	r6, [r1, #0]
 80111f2:	bf08      	it	eq
 80111f4:	694b      	ldreq	r3, [r1, #20]
 80111f6:	eba6 0807 	sub.w	r8, r6, r7
 80111fa:	600f      	str	r7, [r1, #0]
 80111fc:	608b      	str	r3, [r1, #8]
 80111fe:	f1b8 0f00 	cmp.w	r8, #0
 8011202:	dd9c      	ble.n	801113e <__sflush_r+0x1a>
 8011204:	4643      	mov	r3, r8
 8011206:	463a      	mov	r2, r7
 8011208:	4628      	mov	r0, r5
 801120a:	6a21      	ldr	r1, [r4, #32]
 801120c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801120e:	47b0      	blx	r6
 8011210:	2800      	cmp	r0, #0
 8011212:	dc06      	bgt.n	8011222 <__sflush_r+0xfe>
 8011214:	89a3      	ldrh	r3, [r4, #12]
 8011216:	f04f 30ff 	mov.w	r0, #4294967295
 801121a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801121e:	81a3      	strh	r3, [r4, #12]
 8011220:	e78e      	b.n	8011140 <__sflush_r+0x1c>
 8011222:	4407      	add	r7, r0
 8011224:	eba8 0800 	sub.w	r8, r8, r0
 8011228:	e7e9      	b.n	80111fe <__sflush_r+0xda>
 801122a:	bf00      	nop
 801122c:	20400001 	.word	0x20400001

08011230 <_fflush_r>:
 8011230:	b538      	push	{r3, r4, r5, lr}
 8011232:	690b      	ldr	r3, [r1, #16]
 8011234:	4605      	mov	r5, r0
 8011236:	460c      	mov	r4, r1
 8011238:	b913      	cbnz	r3, 8011240 <_fflush_r+0x10>
 801123a:	2500      	movs	r5, #0
 801123c:	4628      	mov	r0, r5
 801123e:	bd38      	pop	{r3, r4, r5, pc}
 8011240:	b118      	cbz	r0, 801124a <_fflush_r+0x1a>
 8011242:	6983      	ldr	r3, [r0, #24]
 8011244:	b90b      	cbnz	r3, 801124a <_fflush_r+0x1a>
 8011246:	f000 f887 	bl	8011358 <__sinit>
 801124a:	4b14      	ldr	r3, [pc, #80]	; (801129c <_fflush_r+0x6c>)
 801124c:	429c      	cmp	r4, r3
 801124e:	d11b      	bne.n	8011288 <_fflush_r+0x58>
 8011250:	686c      	ldr	r4, [r5, #4]
 8011252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d0ef      	beq.n	801123a <_fflush_r+0xa>
 801125a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801125c:	07d0      	lsls	r0, r2, #31
 801125e:	d404      	bmi.n	801126a <_fflush_r+0x3a>
 8011260:	0599      	lsls	r1, r3, #22
 8011262:	d402      	bmi.n	801126a <_fflush_r+0x3a>
 8011264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011266:	f000 fc80 	bl	8011b6a <__retarget_lock_acquire_recursive>
 801126a:	4628      	mov	r0, r5
 801126c:	4621      	mov	r1, r4
 801126e:	f7ff ff59 	bl	8011124 <__sflush_r>
 8011272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011274:	4605      	mov	r5, r0
 8011276:	07da      	lsls	r2, r3, #31
 8011278:	d4e0      	bmi.n	801123c <_fflush_r+0xc>
 801127a:	89a3      	ldrh	r3, [r4, #12]
 801127c:	059b      	lsls	r3, r3, #22
 801127e:	d4dd      	bmi.n	801123c <_fflush_r+0xc>
 8011280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011282:	f000 fc73 	bl	8011b6c <__retarget_lock_release_recursive>
 8011286:	e7d9      	b.n	801123c <_fflush_r+0xc>
 8011288:	4b05      	ldr	r3, [pc, #20]	; (80112a0 <_fflush_r+0x70>)
 801128a:	429c      	cmp	r4, r3
 801128c:	d101      	bne.n	8011292 <_fflush_r+0x62>
 801128e:	68ac      	ldr	r4, [r5, #8]
 8011290:	e7df      	b.n	8011252 <_fflush_r+0x22>
 8011292:	4b04      	ldr	r3, [pc, #16]	; (80112a4 <_fflush_r+0x74>)
 8011294:	429c      	cmp	r4, r3
 8011296:	bf08      	it	eq
 8011298:	68ec      	ldreq	r4, [r5, #12]
 801129a:	e7da      	b.n	8011252 <_fflush_r+0x22>
 801129c:	08013fd4 	.word	0x08013fd4
 80112a0:	08013ff4 	.word	0x08013ff4
 80112a4:	08013fb4 	.word	0x08013fb4

080112a8 <std>:
 80112a8:	2300      	movs	r3, #0
 80112aa:	b510      	push	{r4, lr}
 80112ac:	4604      	mov	r4, r0
 80112ae:	e9c0 3300 	strd	r3, r3, [r0]
 80112b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80112b6:	6083      	str	r3, [r0, #8]
 80112b8:	8181      	strh	r1, [r0, #12]
 80112ba:	6643      	str	r3, [r0, #100]	; 0x64
 80112bc:	81c2      	strh	r2, [r0, #14]
 80112be:	6183      	str	r3, [r0, #24]
 80112c0:	4619      	mov	r1, r3
 80112c2:	2208      	movs	r2, #8
 80112c4:	305c      	adds	r0, #92	; 0x5c
 80112c6:	f7fd f9f5 	bl	800e6b4 <memset>
 80112ca:	4b05      	ldr	r3, [pc, #20]	; (80112e0 <std+0x38>)
 80112cc:	6224      	str	r4, [r4, #32]
 80112ce:	6263      	str	r3, [r4, #36]	; 0x24
 80112d0:	4b04      	ldr	r3, [pc, #16]	; (80112e4 <std+0x3c>)
 80112d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80112d4:	4b04      	ldr	r3, [pc, #16]	; (80112e8 <std+0x40>)
 80112d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80112d8:	4b04      	ldr	r3, [pc, #16]	; (80112ec <std+0x44>)
 80112da:	6323      	str	r3, [r4, #48]	; 0x30
 80112dc:	bd10      	pop	{r4, pc}
 80112de:	bf00      	nop
 80112e0:	08012a39 	.word	0x08012a39
 80112e4:	08012a5b 	.word	0x08012a5b
 80112e8:	08012a93 	.word	0x08012a93
 80112ec:	08012ab7 	.word	0x08012ab7

080112f0 <_cleanup_r>:
 80112f0:	4901      	ldr	r1, [pc, #4]	; (80112f8 <_cleanup_r+0x8>)
 80112f2:	f000 b8af 	b.w	8011454 <_fwalk_reent>
 80112f6:	bf00      	nop
 80112f8:	08011231 	.word	0x08011231

080112fc <__sfmoreglue>:
 80112fc:	b570      	push	{r4, r5, r6, lr}
 80112fe:	2568      	movs	r5, #104	; 0x68
 8011300:	1e4a      	subs	r2, r1, #1
 8011302:	4355      	muls	r5, r2
 8011304:	460e      	mov	r6, r1
 8011306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801130a:	f001 f9cf 	bl	80126ac <_malloc_r>
 801130e:	4604      	mov	r4, r0
 8011310:	b140      	cbz	r0, 8011324 <__sfmoreglue+0x28>
 8011312:	2100      	movs	r1, #0
 8011314:	e9c0 1600 	strd	r1, r6, [r0]
 8011318:	300c      	adds	r0, #12
 801131a:	60a0      	str	r0, [r4, #8]
 801131c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011320:	f7fd f9c8 	bl	800e6b4 <memset>
 8011324:	4620      	mov	r0, r4
 8011326:	bd70      	pop	{r4, r5, r6, pc}

08011328 <__sfp_lock_acquire>:
 8011328:	4801      	ldr	r0, [pc, #4]	; (8011330 <__sfp_lock_acquire+0x8>)
 801132a:	f000 bc1e 	b.w	8011b6a <__retarget_lock_acquire_recursive>
 801132e:	bf00      	nop
 8011330:	20000b38 	.word	0x20000b38

08011334 <__sfp_lock_release>:
 8011334:	4801      	ldr	r0, [pc, #4]	; (801133c <__sfp_lock_release+0x8>)
 8011336:	f000 bc19 	b.w	8011b6c <__retarget_lock_release_recursive>
 801133a:	bf00      	nop
 801133c:	20000b38 	.word	0x20000b38

08011340 <__sinit_lock_acquire>:
 8011340:	4801      	ldr	r0, [pc, #4]	; (8011348 <__sinit_lock_acquire+0x8>)
 8011342:	f000 bc12 	b.w	8011b6a <__retarget_lock_acquire_recursive>
 8011346:	bf00      	nop
 8011348:	20000b33 	.word	0x20000b33

0801134c <__sinit_lock_release>:
 801134c:	4801      	ldr	r0, [pc, #4]	; (8011354 <__sinit_lock_release+0x8>)
 801134e:	f000 bc0d 	b.w	8011b6c <__retarget_lock_release_recursive>
 8011352:	bf00      	nop
 8011354:	20000b33 	.word	0x20000b33

08011358 <__sinit>:
 8011358:	b510      	push	{r4, lr}
 801135a:	4604      	mov	r4, r0
 801135c:	f7ff fff0 	bl	8011340 <__sinit_lock_acquire>
 8011360:	69a3      	ldr	r3, [r4, #24]
 8011362:	b11b      	cbz	r3, 801136c <__sinit+0x14>
 8011364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011368:	f7ff bff0 	b.w	801134c <__sinit_lock_release>
 801136c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011370:	6523      	str	r3, [r4, #80]	; 0x50
 8011372:	4b13      	ldr	r3, [pc, #76]	; (80113c0 <__sinit+0x68>)
 8011374:	4a13      	ldr	r2, [pc, #76]	; (80113c4 <__sinit+0x6c>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	62a2      	str	r2, [r4, #40]	; 0x28
 801137a:	42a3      	cmp	r3, r4
 801137c:	bf08      	it	eq
 801137e:	2301      	moveq	r3, #1
 8011380:	4620      	mov	r0, r4
 8011382:	bf08      	it	eq
 8011384:	61a3      	streq	r3, [r4, #24]
 8011386:	f000 f81f 	bl	80113c8 <__sfp>
 801138a:	6060      	str	r0, [r4, #4]
 801138c:	4620      	mov	r0, r4
 801138e:	f000 f81b 	bl	80113c8 <__sfp>
 8011392:	60a0      	str	r0, [r4, #8]
 8011394:	4620      	mov	r0, r4
 8011396:	f000 f817 	bl	80113c8 <__sfp>
 801139a:	2200      	movs	r2, #0
 801139c:	2104      	movs	r1, #4
 801139e:	60e0      	str	r0, [r4, #12]
 80113a0:	6860      	ldr	r0, [r4, #4]
 80113a2:	f7ff ff81 	bl	80112a8 <std>
 80113a6:	2201      	movs	r2, #1
 80113a8:	2109      	movs	r1, #9
 80113aa:	68a0      	ldr	r0, [r4, #8]
 80113ac:	f7ff ff7c 	bl	80112a8 <std>
 80113b0:	2202      	movs	r2, #2
 80113b2:	2112      	movs	r1, #18
 80113b4:	68e0      	ldr	r0, [r4, #12]
 80113b6:	f7ff ff77 	bl	80112a8 <std>
 80113ba:	2301      	movs	r3, #1
 80113bc:	61a3      	str	r3, [r4, #24]
 80113be:	e7d1      	b.n	8011364 <__sinit+0xc>
 80113c0:	08013e64 	.word	0x08013e64
 80113c4:	080112f1 	.word	0x080112f1

080113c8 <__sfp>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	4607      	mov	r7, r0
 80113cc:	f7ff ffac 	bl	8011328 <__sfp_lock_acquire>
 80113d0:	4b1e      	ldr	r3, [pc, #120]	; (801144c <__sfp+0x84>)
 80113d2:	681e      	ldr	r6, [r3, #0]
 80113d4:	69b3      	ldr	r3, [r6, #24]
 80113d6:	b913      	cbnz	r3, 80113de <__sfp+0x16>
 80113d8:	4630      	mov	r0, r6
 80113da:	f7ff ffbd 	bl	8011358 <__sinit>
 80113de:	3648      	adds	r6, #72	; 0x48
 80113e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	d503      	bpl.n	80113f0 <__sfp+0x28>
 80113e8:	6833      	ldr	r3, [r6, #0]
 80113ea:	b30b      	cbz	r3, 8011430 <__sfp+0x68>
 80113ec:	6836      	ldr	r6, [r6, #0]
 80113ee:	e7f7      	b.n	80113e0 <__sfp+0x18>
 80113f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80113f4:	b9d5      	cbnz	r5, 801142c <__sfp+0x64>
 80113f6:	4b16      	ldr	r3, [pc, #88]	; (8011450 <__sfp+0x88>)
 80113f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80113fc:	60e3      	str	r3, [r4, #12]
 80113fe:	6665      	str	r5, [r4, #100]	; 0x64
 8011400:	f000 fbb2 	bl	8011b68 <__retarget_lock_init_recursive>
 8011404:	f7ff ff96 	bl	8011334 <__sfp_lock_release>
 8011408:	2208      	movs	r2, #8
 801140a:	4629      	mov	r1, r5
 801140c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011414:	6025      	str	r5, [r4, #0]
 8011416:	61a5      	str	r5, [r4, #24]
 8011418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801141c:	f7fd f94a 	bl	800e6b4 <memset>
 8011420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011428:	4620      	mov	r0, r4
 801142a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801142c:	3468      	adds	r4, #104	; 0x68
 801142e:	e7d9      	b.n	80113e4 <__sfp+0x1c>
 8011430:	2104      	movs	r1, #4
 8011432:	4638      	mov	r0, r7
 8011434:	f7ff ff62 	bl	80112fc <__sfmoreglue>
 8011438:	4604      	mov	r4, r0
 801143a:	6030      	str	r0, [r6, #0]
 801143c:	2800      	cmp	r0, #0
 801143e:	d1d5      	bne.n	80113ec <__sfp+0x24>
 8011440:	f7ff ff78 	bl	8011334 <__sfp_lock_release>
 8011444:	230c      	movs	r3, #12
 8011446:	603b      	str	r3, [r7, #0]
 8011448:	e7ee      	b.n	8011428 <__sfp+0x60>
 801144a:	bf00      	nop
 801144c:	08013e64 	.word	0x08013e64
 8011450:	ffff0001 	.word	0xffff0001

08011454 <_fwalk_reent>:
 8011454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011458:	4606      	mov	r6, r0
 801145a:	4688      	mov	r8, r1
 801145c:	2700      	movs	r7, #0
 801145e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011466:	f1b9 0901 	subs.w	r9, r9, #1
 801146a:	d505      	bpl.n	8011478 <_fwalk_reent+0x24>
 801146c:	6824      	ldr	r4, [r4, #0]
 801146e:	2c00      	cmp	r4, #0
 8011470:	d1f7      	bne.n	8011462 <_fwalk_reent+0xe>
 8011472:	4638      	mov	r0, r7
 8011474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011478:	89ab      	ldrh	r3, [r5, #12]
 801147a:	2b01      	cmp	r3, #1
 801147c:	d907      	bls.n	801148e <_fwalk_reent+0x3a>
 801147e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011482:	3301      	adds	r3, #1
 8011484:	d003      	beq.n	801148e <_fwalk_reent+0x3a>
 8011486:	4629      	mov	r1, r5
 8011488:	4630      	mov	r0, r6
 801148a:	47c0      	blx	r8
 801148c:	4307      	orrs	r7, r0
 801148e:	3568      	adds	r5, #104	; 0x68
 8011490:	e7e9      	b.n	8011466 <_fwalk_reent+0x12>

08011492 <rshift>:
 8011492:	6903      	ldr	r3, [r0, #16]
 8011494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011498:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801149c:	f100 0414 	add.w	r4, r0, #20
 80114a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80114a4:	dd46      	ble.n	8011534 <rshift+0xa2>
 80114a6:	f011 011f 	ands.w	r1, r1, #31
 80114aa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80114ae:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80114b2:	d10c      	bne.n	80114ce <rshift+0x3c>
 80114b4:	4629      	mov	r1, r5
 80114b6:	f100 0710 	add.w	r7, r0, #16
 80114ba:	42b1      	cmp	r1, r6
 80114bc:	d335      	bcc.n	801152a <rshift+0x98>
 80114be:	1a9b      	subs	r3, r3, r2
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	1eea      	subs	r2, r5, #3
 80114c4:	4296      	cmp	r6, r2
 80114c6:	bf38      	it	cc
 80114c8:	2300      	movcc	r3, #0
 80114ca:	4423      	add	r3, r4
 80114cc:	e015      	b.n	80114fa <rshift+0x68>
 80114ce:	46a1      	mov	r9, r4
 80114d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80114d4:	f1c1 0820 	rsb	r8, r1, #32
 80114d8:	40cf      	lsrs	r7, r1
 80114da:	f105 0e04 	add.w	lr, r5, #4
 80114de:	4576      	cmp	r6, lr
 80114e0:	46f4      	mov	ip, lr
 80114e2:	d816      	bhi.n	8011512 <rshift+0x80>
 80114e4:	1a9b      	subs	r3, r3, r2
 80114e6:	009a      	lsls	r2, r3, #2
 80114e8:	3a04      	subs	r2, #4
 80114ea:	3501      	adds	r5, #1
 80114ec:	42ae      	cmp	r6, r5
 80114ee:	bf38      	it	cc
 80114f0:	2200      	movcc	r2, #0
 80114f2:	18a3      	adds	r3, r4, r2
 80114f4:	50a7      	str	r7, [r4, r2]
 80114f6:	b107      	cbz	r7, 80114fa <rshift+0x68>
 80114f8:	3304      	adds	r3, #4
 80114fa:	42a3      	cmp	r3, r4
 80114fc:	eba3 0204 	sub.w	r2, r3, r4
 8011500:	bf08      	it	eq
 8011502:	2300      	moveq	r3, #0
 8011504:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011508:	6102      	str	r2, [r0, #16]
 801150a:	bf08      	it	eq
 801150c:	6143      	streq	r3, [r0, #20]
 801150e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011512:	f8dc c000 	ldr.w	ip, [ip]
 8011516:	fa0c fc08 	lsl.w	ip, ip, r8
 801151a:	ea4c 0707 	orr.w	r7, ip, r7
 801151e:	f849 7b04 	str.w	r7, [r9], #4
 8011522:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011526:	40cf      	lsrs	r7, r1
 8011528:	e7d9      	b.n	80114de <rshift+0x4c>
 801152a:	f851 cb04 	ldr.w	ip, [r1], #4
 801152e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011532:	e7c2      	b.n	80114ba <rshift+0x28>
 8011534:	4623      	mov	r3, r4
 8011536:	e7e0      	b.n	80114fa <rshift+0x68>

08011538 <__hexdig_fun>:
 8011538:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801153c:	2b09      	cmp	r3, #9
 801153e:	d802      	bhi.n	8011546 <__hexdig_fun+0xe>
 8011540:	3820      	subs	r0, #32
 8011542:	b2c0      	uxtb	r0, r0
 8011544:	4770      	bx	lr
 8011546:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801154a:	2b05      	cmp	r3, #5
 801154c:	d801      	bhi.n	8011552 <__hexdig_fun+0x1a>
 801154e:	3847      	subs	r0, #71	; 0x47
 8011550:	e7f7      	b.n	8011542 <__hexdig_fun+0xa>
 8011552:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011556:	2b05      	cmp	r3, #5
 8011558:	d801      	bhi.n	801155e <__hexdig_fun+0x26>
 801155a:	3827      	subs	r0, #39	; 0x27
 801155c:	e7f1      	b.n	8011542 <__hexdig_fun+0xa>
 801155e:	2000      	movs	r0, #0
 8011560:	4770      	bx	lr
	...

08011564 <__gethex>:
 8011564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011568:	b08b      	sub	sp, #44	; 0x2c
 801156a:	9306      	str	r3, [sp, #24]
 801156c:	4bb9      	ldr	r3, [pc, #740]	; (8011854 <__gethex+0x2f0>)
 801156e:	9002      	str	r0, [sp, #8]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	468b      	mov	fp, r1
 8011574:	4618      	mov	r0, r3
 8011576:	4690      	mov	r8, r2
 8011578:	9303      	str	r3, [sp, #12]
 801157a:	f7ee fe55 	bl	8000228 <strlen>
 801157e:	4682      	mov	sl, r0
 8011580:	9b03      	ldr	r3, [sp, #12]
 8011582:	f8db 2000 	ldr.w	r2, [fp]
 8011586:	4403      	add	r3, r0
 8011588:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801158c:	9307      	str	r3, [sp, #28]
 801158e:	1c93      	adds	r3, r2, #2
 8011590:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011594:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011598:	32fe      	adds	r2, #254	; 0xfe
 801159a:	18d1      	adds	r1, r2, r3
 801159c:	461f      	mov	r7, r3
 801159e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80115a2:	9101      	str	r1, [sp, #4]
 80115a4:	2830      	cmp	r0, #48	; 0x30
 80115a6:	d0f8      	beq.n	801159a <__gethex+0x36>
 80115a8:	f7ff ffc6 	bl	8011538 <__hexdig_fun>
 80115ac:	4604      	mov	r4, r0
 80115ae:	2800      	cmp	r0, #0
 80115b0:	d13a      	bne.n	8011628 <__gethex+0xc4>
 80115b2:	4652      	mov	r2, sl
 80115b4:	4638      	mov	r0, r7
 80115b6:	9903      	ldr	r1, [sp, #12]
 80115b8:	f001 fa81 	bl	8012abe <strncmp>
 80115bc:	4605      	mov	r5, r0
 80115be:	2800      	cmp	r0, #0
 80115c0:	d166      	bne.n	8011690 <__gethex+0x12c>
 80115c2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80115c6:	eb07 060a 	add.w	r6, r7, sl
 80115ca:	f7ff ffb5 	bl	8011538 <__hexdig_fun>
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d060      	beq.n	8011694 <__gethex+0x130>
 80115d2:	4633      	mov	r3, r6
 80115d4:	7818      	ldrb	r0, [r3, #0]
 80115d6:	461f      	mov	r7, r3
 80115d8:	2830      	cmp	r0, #48	; 0x30
 80115da:	f103 0301 	add.w	r3, r3, #1
 80115de:	d0f9      	beq.n	80115d4 <__gethex+0x70>
 80115e0:	f7ff ffaa 	bl	8011538 <__hexdig_fun>
 80115e4:	2301      	movs	r3, #1
 80115e6:	fab0 f480 	clz	r4, r0
 80115ea:	4635      	mov	r5, r6
 80115ec:	0964      	lsrs	r4, r4, #5
 80115ee:	9301      	str	r3, [sp, #4]
 80115f0:	463a      	mov	r2, r7
 80115f2:	4616      	mov	r6, r2
 80115f4:	7830      	ldrb	r0, [r6, #0]
 80115f6:	3201      	adds	r2, #1
 80115f8:	f7ff ff9e 	bl	8011538 <__hexdig_fun>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d1f8      	bne.n	80115f2 <__gethex+0x8e>
 8011600:	4652      	mov	r2, sl
 8011602:	4630      	mov	r0, r6
 8011604:	9903      	ldr	r1, [sp, #12]
 8011606:	f001 fa5a 	bl	8012abe <strncmp>
 801160a:	b980      	cbnz	r0, 801162e <__gethex+0xca>
 801160c:	b94d      	cbnz	r5, 8011622 <__gethex+0xbe>
 801160e:	eb06 050a 	add.w	r5, r6, sl
 8011612:	462a      	mov	r2, r5
 8011614:	4616      	mov	r6, r2
 8011616:	7830      	ldrb	r0, [r6, #0]
 8011618:	3201      	adds	r2, #1
 801161a:	f7ff ff8d 	bl	8011538 <__hexdig_fun>
 801161e:	2800      	cmp	r0, #0
 8011620:	d1f8      	bne.n	8011614 <__gethex+0xb0>
 8011622:	1bad      	subs	r5, r5, r6
 8011624:	00ad      	lsls	r5, r5, #2
 8011626:	e004      	b.n	8011632 <__gethex+0xce>
 8011628:	2400      	movs	r4, #0
 801162a:	4625      	mov	r5, r4
 801162c:	e7e0      	b.n	80115f0 <__gethex+0x8c>
 801162e:	2d00      	cmp	r5, #0
 8011630:	d1f7      	bne.n	8011622 <__gethex+0xbe>
 8011632:	7833      	ldrb	r3, [r6, #0]
 8011634:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011638:	2b50      	cmp	r3, #80	; 0x50
 801163a:	d139      	bne.n	80116b0 <__gethex+0x14c>
 801163c:	7873      	ldrb	r3, [r6, #1]
 801163e:	2b2b      	cmp	r3, #43	; 0x2b
 8011640:	d02a      	beq.n	8011698 <__gethex+0x134>
 8011642:	2b2d      	cmp	r3, #45	; 0x2d
 8011644:	d02c      	beq.n	80116a0 <__gethex+0x13c>
 8011646:	f04f 0900 	mov.w	r9, #0
 801164a:	1c71      	adds	r1, r6, #1
 801164c:	7808      	ldrb	r0, [r1, #0]
 801164e:	f7ff ff73 	bl	8011538 <__hexdig_fun>
 8011652:	1e43      	subs	r3, r0, #1
 8011654:	b2db      	uxtb	r3, r3
 8011656:	2b18      	cmp	r3, #24
 8011658:	d82a      	bhi.n	80116b0 <__gethex+0x14c>
 801165a:	f1a0 0210 	sub.w	r2, r0, #16
 801165e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011662:	f7ff ff69 	bl	8011538 <__hexdig_fun>
 8011666:	1e43      	subs	r3, r0, #1
 8011668:	b2db      	uxtb	r3, r3
 801166a:	2b18      	cmp	r3, #24
 801166c:	d91b      	bls.n	80116a6 <__gethex+0x142>
 801166e:	f1b9 0f00 	cmp.w	r9, #0
 8011672:	d000      	beq.n	8011676 <__gethex+0x112>
 8011674:	4252      	negs	r2, r2
 8011676:	4415      	add	r5, r2
 8011678:	f8cb 1000 	str.w	r1, [fp]
 801167c:	b1d4      	cbz	r4, 80116b4 <__gethex+0x150>
 801167e:	9b01      	ldr	r3, [sp, #4]
 8011680:	2b00      	cmp	r3, #0
 8011682:	bf14      	ite	ne
 8011684:	2700      	movne	r7, #0
 8011686:	2706      	moveq	r7, #6
 8011688:	4638      	mov	r0, r7
 801168a:	b00b      	add	sp, #44	; 0x2c
 801168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011690:	463e      	mov	r6, r7
 8011692:	4625      	mov	r5, r4
 8011694:	2401      	movs	r4, #1
 8011696:	e7cc      	b.n	8011632 <__gethex+0xce>
 8011698:	f04f 0900 	mov.w	r9, #0
 801169c:	1cb1      	adds	r1, r6, #2
 801169e:	e7d5      	b.n	801164c <__gethex+0xe8>
 80116a0:	f04f 0901 	mov.w	r9, #1
 80116a4:	e7fa      	b.n	801169c <__gethex+0x138>
 80116a6:	230a      	movs	r3, #10
 80116a8:	fb03 0202 	mla	r2, r3, r2, r0
 80116ac:	3a10      	subs	r2, #16
 80116ae:	e7d6      	b.n	801165e <__gethex+0xfa>
 80116b0:	4631      	mov	r1, r6
 80116b2:	e7e1      	b.n	8011678 <__gethex+0x114>
 80116b4:	4621      	mov	r1, r4
 80116b6:	1bf3      	subs	r3, r6, r7
 80116b8:	3b01      	subs	r3, #1
 80116ba:	2b07      	cmp	r3, #7
 80116bc:	dc0a      	bgt.n	80116d4 <__gethex+0x170>
 80116be:	9802      	ldr	r0, [sp, #8]
 80116c0:	f000 fae2 	bl	8011c88 <_Balloc>
 80116c4:	4604      	mov	r4, r0
 80116c6:	b940      	cbnz	r0, 80116da <__gethex+0x176>
 80116c8:	4602      	mov	r2, r0
 80116ca:	21de      	movs	r1, #222	; 0xde
 80116cc:	4b62      	ldr	r3, [pc, #392]	; (8011858 <__gethex+0x2f4>)
 80116ce:	4863      	ldr	r0, [pc, #396]	; (801185c <__gethex+0x2f8>)
 80116d0:	f001 fa26 	bl	8012b20 <__assert_func>
 80116d4:	3101      	adds	r1, #1
 80116d6:	105b      	asrs	r3, r3, #1
 80116d8:	e7ef      	b.n	80116ba <__gethex+0x156>
 80116da:	f04f 0b00 	mov.w	fp, #0
 80116de:	f100 0914 	add.w	r9, r0, #20
 80116e2:	f1ca 0301 	rsb	r3, sl, #1
 80116e6:	f8cd 9010 	str.w	r9, [sp, #16]
 80116ea:	f8cd b004 	str.w	fp, [sp, #4]
 80116ee:	9308      	str	r3, [sp, #32]
 80116f0:	42b7      	cmp	r7, r6
 80116f2:	d33f      	bcc.n	8011774 <__gethex+0x210>
 80116f4:	9f04      	ldr	r7, [sp, #16]
 80116f6:	9b01      	ldr	r3, [sp, #4]
 80116f8:	f847 3b04 	str.w	r3, [r7], #4
 80116fc:	eba7 0709 	sub.w	r7, r7, r9
 8011700:	10bf      	asrs	r7, r7, #2
 8011702:	6127      	str	r7, [r4, #16]
 8011704:	4618      	mov	r0, r3
 8011706:	f000 fbb5 	bl	8011e74 <__hi0bits>
 801170a:	017f      	lsls	r7, r7, #5
 801170c:	f8d8 6000 	ldr.w	r6, [r8]
 8011710:	1a3f      	subs	r7, r7, r0
 8011712:	42b7      	cmp	r7, r6
 8011714:	dd62      	ble.n	80117dc <__gethex+0x278>
 8011716:	1bbf      	subs	r7, r7, r6
 8011718:	4639      	mov	r1, r7
 801171a:	4620      	mov	r0, r4
 801171c:	f000 ff4b 	bl	80125b6 <__any_on>
 8011720:	4682      	mov	sl, r0
 8011722:	b1a8      	cbz	r0, 8011750 <__gethex+0x1ec>
 8011724:	f04f 0a01 	mov.w	sl, #1
 8011728:	1e7b      	subs	r3, r7, #1
 801172a:	1159      	asrs	r1, r3, #5
 801172c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011730:	f003 021f 	and.w	r2, r3, #31
 8011734:	fa0a f202 	lsl.w	r2, sl, r2
 8011738:	420a      	tst	r2, r1
 801173a:	d009      	beq.n	8011750 <__gethex+0x1ec>
 801173c:	4553      	cmp	r3, sl
 801173e:	dd05      	ble.n	801174c <__gethex+0x1e8>
 8011740:	4620      	mov	r0, r4
 8011742:	1eb9      	subs	r1, r7, #2
 8011744:	f000 ff37 	bl	80125b6 <__any_on>
 8011748:	2800      	cmp	r0, #0
 801174a:	d144      	bne.n	80117d6 <__gethex+0x272>
 801174c:	f04f 0a02 	mov.w	sl, #2
 8011750:	4639      	mov	r1, r7
 8011752:	4620      	mov	r0, r4
 8011754:	f7ff fe9d 	bl	8011492 <rshift>
 8011758:	443d      	add	r5, r7
 801175a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801175e:	42ab      	cmp	r3, r5
 8011760:	da4a      	bge.n	80117f8 <__gethex+0x294>
 8011762:	4621      	mov	r1, r4
 8011764:	9802      	ldr	r0, [sp, #8]
 8011766:	f000 facf 	bl	8011d08 <_Bfree>
 801176a:	2300      	movs	r3, #0
 801176c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801176e:	27a3      	movs	r7, #163	; 0xa3
 8011770:	6013      	str	r3, [r2, #0]
 8011772:	e789      	b.n	8011688 <__gethex+0x124>
 8011774:	1e73      	subs	r3, r6, #1
 8011776:	9a07      	ldr	r2, [sp, #28]
 8011778:	9305      	str	r3, [sp, #20]
 801177a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801177e:	4293      	cmp	r3, r2
 8011780:	d019      	beq.n	80117b6 <__gethex+0x252>
 8011782:	f1bb 0f20 	cmp.w	fp, #32
 8011786:	d107      	bne.n	8011798 <__gethex+0x234>
 8011788:	9b04      	ldr	r3, [sp, #16]
 801178a:	9a01      	ldr	r2, [sp, #4]
 801178c:	f843 2b04 	str.w	r2, [r3], #4
 8011790:	9304      	str	r3, [sp, #16]
 8011792:	2300      	movs	r3, #0
 8011794:	469b      	mov	fp, r3
 8011796:	9301      	str	r3, [sp, #4]
 8011798:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801179c:	f7ff fecc 	bl	8011538 <__hexdig_fun>
 80117a0:	9b01      	ldr	r3, [sp, #4]
 80117a2:	f000 000f 	and.w	r0, r0, #15
 80117a6:	fa00 f00b 	lsl.w	r0, r0, fp
 80117aa:	4303      	orrs	r3, r0
 80117ac:	9301      	str	r3, [sp, #4]
 80117ae:	f10b 0b04 	add.w	fp, fp, #4
 80117b2:	9b05      	ldr	r3, [sp, #20]
 80117b4:	e00d      	b.n	80117d2 <__gethex+0x26e>
 80117b6:	9b05      	ldr	r3, [sp, #20]
 80117b8:	9a08      	ldr	r2, [sp, #32]
 80117ba:	4413      	add	r3, r2
 80117bc:	42bb      	cmp	r3, r7
 80117be:	d3e0      	bcc.n	8011782 <__gethex+0x21e>
 80117c0:	4618      	mov	r0, r3
 80117c2:	4652      	mov	r2, sl
 80117c4:	9903      	ldr	r1, [sp, #12]
 80117c6:	9309      	str	r3, [sp, #36]	; 0x24
 80117c8:	f001 f979 	bl	8012abe <strncmp>
 80117cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117ce:	2800      	cmp	r0, #0
 80117d0:	d1d7      	bne.n	8011782 <__gethex+0x21e>
 80117d2:	461e      	mov	r6, r3
 80117d4:	e78c      	b.n	80116f0 <__gethex+0x18c>
 80117d6:	f04f 0a03 	mov.w	sl, #3
 80117da:	e7b9      	b.n	8011750 <__gethex+0x1ec>
 80117dc:	da09      	bge.n	80117f2 <__gethex+0x28e>
 80117de:	1bf7      	subs	r7, r6, r7
 80117e0:	4621      	mov	r1, r4
 80117e2:	463a      	mov	r2, r7
 80117e4:	9802      	ldr	r0, [sp, #8]
 80117e6:	f000 fca7 	bl	8012138 <__lshift>
 80117ea:	4604      	mov	r4, r0
 80117ec:	1bed      	subs	r5, r5, r7
 80117ee:	f100 0914 	add.w	r9, r0, #20
 80117f2:	f04f 0a00 	mov.w	sl, #0
 80117f6:	e7b0      	b.n	801175a <__gethex+0x1f6>
 80117f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80117fc:	42a8      	cmp	r0, r5
 80117fe:	dd71      	ble.n	80118e4 <__gethex+0x380>
 8011800:	1b45      	subs	r5, r0, r5
 8011802:	42ae      	cmp	r6, r5
 8011804:	dc34      	bgt.n	8011870 <__gethex+0x30c>
 8011806:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801180a:	2b02      	cmp	r3, #2
 801180c:	d028      	beq.n	8011860 <__gethex+0x2fc>
 801180e:	2b03      	cmp	r3, #3
 8011810:	d02a      	beq.n	8011868 <__gethex+0x304>
 8011812:	2b01      	cmp	r3, #1
 8011814:	d115      	bne.n	8011842 <__gethex+0x2de>
 8011816:	42ae      	cmp	r6, r5
 8011818:	d113      	bne.n	8011842 <__gethex+0x2de>
 801181a:	2e01      	cmp	r6, #1
 801181c:	d10b      	bne.n	8011836 <__gethex+0x2d2>
 801181e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011822:	9a06      	ldr	r2, [sp, #24]
 8011824:	2762      	movs	r7, #98	; 0x62
 8011826:	6013      	str	r3, [r2, #0]
 8011828:	2301      	movs	r3, #1
 801182a:	6123      	str	r3, [r4, #16]
 801182c:	f8c9 3000 	str.w	r3, [r9]
 8011830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011832:	601c      	str	r4, [r3, #0]
 8011834:	e728      	b.n	8011688 <__gethex+0x124>
 8011836:	4620      	mov	r0, r4
 8011838:	1e71      	subs	r1, r6, #1
 801183a:	f000 febc 	bl	80125b6 <__any_on>
 801183e:	2800      	cmp	r0, #0
 8011840:	d1ed      	bne.n	801181e <__gethex+0x2ba>
 8011842:	4621      	mov	r1, r4
 8011844:	9802      	ldr	r0, [sp, #8]
 8011846:	f000 fa5f 	bl	8011d08 <_Bfree>
 801184a:	2300      	movs	r3, #0
 801184c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801184e:	2750      	movs	r7, #80	; 0x50
 8011850:	6013      	str	r3, [r2, #0]
 8011852:	e719      	b.n	8011688 <__gethex+0x124>
 8011854:	08014080 	.word	0x08014080
 8011858:	08013fa0 	.word	0x08013fa0
 801185c:	08014014 	.word	0x08014014
 8011860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1ed      	bne.n	8011842 <__gethex+0x2de>
 8011866:	e7da      	b.n	801181e <__gethex+0x2ba>
 8011868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1d7      	bne.n	801181e <__gethex+0x2ba>
 801186e:	e7e8      	b.n	8011842 <__gethex+0x2de>
 8011870:	1e6f      	subs	r7, r5, #1
 8011872:	f1ba 0f00 	cmp.w	sl, #0
 8011876:	d132      	bne.n	80118de <__gethex+0x37a>
 8011878:	b127      	cbz	r7, 8011884 <__gethex+0x320>
 801187a:	4639      	mov	r1, r7
 801187c:	4620      	mov	r0, r4
 801187e:	f000 fe9a 	bl	80125b6 <__any_on>
 8011882:	4682      	mov	sl, r0
 8011884:	2101      	movs	r1, #1
 8011886:	117b      	asrs	r3, r7, #5
 8011888:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801188c:	f007 071f 	and.w	r7, r7, #31
 8011890:	fa01 f707 	lsl.w	r7, r1, r7
 8011894:	421f      	tst	r7, r3
 8011896:	f04f 0702 	mov.w	r7, #2
 801189a:	4629      	mov	r1, r5
 801189c:	4620      	mov	r0, r4
 801189e:	bf18      	it	ne
 80118a0:	f04a 0a02 	orrne.w	sl, sl, #2
 80118a4:	1b76      	subs	r6, r6, r5
 80118a6:	f7ff fdf4 	bl	8011492 <rshift>
 80118aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80118ae:	f1ba 0f00 	cmp.w	sl, #0
 80118b2:	d048      	beq.n	8011946 <__gethex+0x3e2>
 80118b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80118b8:	2b02      	cmp	r3, #2
 80118ba:	d015      	beq.n	80118e8 <__gethex+0x384>
 80118bc:	2b03      	cmp	r3, #3
 80118be:	d017      	beq.n	80118f0 <__gethex+0x38c>
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d109      	bne.n	80118d8 <__gethex+0x374>
 80118c4:	f01a 0f02 	tst.w	sl, #2
 80118c8:	d006      	beq.n	80118d8 <__gethex+0x374>
 80118ca:	f8d9 0000 	ldr.w	r0, [r9]
 80118ce:	ea4a 0a00 	orr.w	sl, sl, r0
 80118d2:	f01a 0f01 	tst.w	sl, #1
 80118d6:	d10e      	bne.n	80118f6 <__gethex+0x392>
 80118d8:	f047 0710 	orr.w	r7, r7, #16
 80118dc:	e033      	b.n	8011946 <__gethex+0x3e2>
 80118de:	f04f 0a01 	mov.w	sl, #1
 80118e2:	e7cf      	b.n	8011884 <__gethex+0x320>
 80118e4:	2701      	movs	r7, #1
 80118e6:	e7e2      	b.n	80118ae <__gethex+0x34a>
 80118e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118ea:	f1c3 0301 	rsb	r3, r3, #1
 80118ee:	9315      	str	r3, [sp, #84]	; 0x54
 80118f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d0f0      	beq.n	80118d8 <__gethex+0x374>
 80118f6:	f04f 0c00 	mov.w	ip, #0
 80118fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80118fe:	f104 0314 	add.w	r3, r4, #20
 8011902:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011906:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801190a:	4618      	mov	r0, r3
 801190c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011910:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011914:	d01c      	beq.n	8011950 <__gethex+0x3ec>
 8011916:	3201      	adds	r2, #1
 8011918:	6002      	str	r2, [r0, #0]
 801191a:	2f02      	cmp	r7, #2
 801191c:	f104 0314 	add.w	r3, r4, #20
 8011920:	d13d      	bne.n	801199e <__gethex+0x43a>
 8011922:	f8d8 2000 	ldr.w	r2, [r8]
 8011926:	3a01      	subs	r2, #1
 8011928:	42b2      	cmp	r2, r6
 801192a:	d10a      	bne.n	8011942 <__gethex+0x3de>
 801192c:	2201      	movs	r2, #1
 801192e:	1171      	asrs	r1, r6, #5
 8011930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011934:	f006 061f 	and.w	r6, r6, #31
 8011938:	fa02 f606 	lsl.w	r6, r2, r6
 801193c:	421e      	tst	r6, r3
 801193e:	bf18      	it	ne
 8011940:	4617      	movne	r7, r2
 8011942:	f047 0720 	orr.w	r7, r7, #32
 8011946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011948:	601c      	str	r4, [r3, #0]
 801194a:	9b06      	ldr	r3, [sp, #24]
 801194c:	601d      	str	r5, [r3, #0]
 801194e:	e69b      	b.n	8011688 <__gethex+0x124>
 8011950:	4299      	cmp	r1, r3
 8011952:	f843 cc04 	str.w	ip, [r3, #-4]
 8011956:	d8d8      	bhi.n	801190a <__gethex+0x3a6>
 8011958:	68a3      	ldr	r3, [r4, #8]
 801195a:	459b      	cmp	fp, r3
 801195c:	db17      	blt.n	801198e <__gethex+0x42a>
 801195e:	6861      	ldr	r1, [r4, #4]
 8011960:	9802      	ldr	r0, [sp, #8]
 8011962:	3101      	adds	r1, #1
 8011964:	f000 f990 	bl	8011c88 <_Balloc>
 8011968:	4681      	mov	r9, r0
 801196a:	b918      	cbnz	r0, 8011974 <__gethex+0x410>
 801196c:	4602      	mov	r2, r0
 801196e:	2184      	movs	r1, #132	; 0x84
 8011970:	4b19      	ldr	r3, [pc, #100]	; (80119d8 <__gethex+0x474>)
 8011972:	e6ac      	b.n	80116ce <__gethex+0x16a>
 8011974:	6922      	ldr	r2, [r4, #16]
 8011976:	f104 010c 	add.w	r1, r4, #12
 801197a:	3202      	adds	r2, #2
 801197c:	0092      	lsls	r2, r2, #2
 801197e:	300c      	adds	r0, #12
 8011980:	f7fc fe8a 	bl	800e698 <memcpy>
 8011984:	4621      	mov	r1, r4
 8011986:	9802      	ldr	r0, [sp, #8]
 8011988:	f000 f9be 	bl	8011d08 <_Bfree>
 801198c:	464c      	mov	r4, r9
 801198e:	6923      	ldr	r3, [r4, #16]
 8011990:	1c5a      	adds	r2, r3, #1
 8011992:	6122      	str	r2, [r4, #16]
 8011994:	2201      	movs	r2, #1
 8011996:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801199a:	615a      	str	r2, [r3, #20]
 801199c:	e7bd      	b.n	801191a <__gethex+0x3b6>
 801199e:	6922      	ldr	r2, [r4, #16]
 80119a0:	455a      	cmp	r2, fp
 80119a2:	dd0b      	ble.n	80119bc <__gethex+0x458>
 80119a4:	2101      	movs	r1, #1
 80119a6:	4620      	mov	r0, r4
 80119a8:	f7ff fd73 	bl	8011492 <rshift>
 80119ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80119b0:	3501      	adds	r5, #1
 80119b2:	42ab      	cmp	r3, r5
 80119b4:	f6ff aed5 	blt.w	8011762 <__gethex+0x1fe>
 80119b8:	2701      	movs	r7, #1
 80119ba:	e7c2      	b.n	8011942 <__gethex+0x3de>
 80119bc:	f016 061f 	ands.w	r6, r6, #31
 80119c0:	d0fa      	beq.n	80119b8 <__gethex+0x454>
 80119c2:	449a      	add	sl, r3
 80119c4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80119c8:	f000 fa54 	bl	8011e74 <__hi0bits>
 80119cc:	f1c6 0620 	rsb	r6, r6, #32
 80119d0:	42b0      	cmp	r0, r6
 80119d2:	dbe7      	blt.n	80119a4 <__gethex+0x440>
 80119d4:	e7f0      	b.n	80119b8 <__gethex+0x454>
 80119d6:	bf00      	nop
 80119d8:	08013fa0 	.word	0x08013fa0

080119dc <L_shift>:
 80119dc:	f1c2 0208 	rsb	r2, r2, #8
 80119e0:	0092      	lsls	r2, r2, #2
 80119e2:	b570      	push	{r4, r5, r6, lr}
 80119e4:	f1c2 0620 	rsb	r6, r2, #32
 80119e8:	6843      	ldr	r3, [r0, #4]
 80119ea:	6804      	ldr	r4, [r0, #0]
 80119ec:	fa03 f506 	lsl.w	r5, r3, r6
 80119f0:	432c      	orrs	r4, r5
 80119f2:	40d3      	lsrs	r3, r2
 80119f4:	6004      	str	r4, [r0, #0]
 80119f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80119fa:	4288      	cmp	r0, r1
 80119fc:	d3f4      	bcc.n	80119e8 <L_shift+0xc>
 80119fe:	bd70      	pop	{r4, r5, r6, pc}

08011a00 <__match>:
 8011a00:	b530      	push	{r4, r5, lr}
 8011a02:	6803      	ldr	r3, [r0, #0]
 8011a04:	3301      	adds	r3, #1
 8011a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a0a:	b914      	cbnz	r4, 8011a12 <__match+0x12>
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	2001      	movs	r0, #1
 8011a10:	bd30      	pop	{r4, r5, pc}
 8011a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011a1a:	2d19      	cmp	r5, #25
 8011a1c:	bf98      	it	ls
 8011a1e:	3220      	addls	r2, #32
 8011a20:	42a2      	cmp	r2, r4
 8011a22:	d0f0      	beq.n	8011a06 <__match+0x6>
 8011a24:	2000      	movs	r0, #0
 8011a26:	e7f3      	b.n	8011a10 <__match+0x10>

08011a28 <__hexnan>:
 8011a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2c:	2500      	movs	r5, #0
 8011a2e:	680b      	ldr	r3, [r1, #0]
 8011a30:	4682      	mov	sl, r0
 8011a32:	115e      	asrs	r6, r3, #5
 8011a34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011a38:	f013 031f 	ands.w	r3, r3, #31
 8011a3c:	bf18      	it	ne
 8011a3e:	3604      	addne	r6, #4
 8011a40:	1f37      	subs	r7, r6, #4
 8011a42:	4690      	mov	r8, r2
 8011a44:	46b9      	mov	r9, r7
 8011a46:	463c      	mov	r4, r7
 8011a48:	46ab      	mov	fp, r5
 8011a4a:	b087      	sub	sp, #28
 8011a4c:	6801      	ldr	r1, [r0, #0]
 8011a4e:	9301      	str	r3, [sp, #4]
 8011a50:	f846 5c04 	str.w	r5, [r6, #-4]
 8011a54:	9502      	str	r5, [sp, #8]
 8011a56:	784a      	ldrb	r2, [r1, #1]
 8011a58:	1c4b      	adds	r3, r1, #1
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	b342      	cbz	r2, 8011ab0 <__hexnan+0x88>
 8011a5e:	4610      	mov	r0, r2
 8011a60:	9105      	str	r1, [sp, #20]
 8011a62:	9204      	str	r2, [sp, #16]
 8011a64:	f7ff fd68 	bl	8011538 <__hexdig_fun>
 8011a68:	2800      	cmp	r0, #0
 8011a6a:	d14f      	bne.n	8011b0c <__hexnan+0xe4>
 8011a6c:	9a04      	ldr	r2, [sp, #16]
 8011a6e:	9905      	ldr	r1, [sp, #20]
 8011a70:	2a20      	cmp	r2, #32
 8011a72:	d818      	bhi.n	8011aa6 <__hexnan+0x7e>
 8011a74:	9b02      	ldr	r3, [sp, #8]
 8011a76:	459b      	cmp	fp, r3
 8011a78:	dd13      	ble.n	8011aa2 <__hexnan+0x7a>
 8011a7a:	454c      	cmp	r4, r9
 8011a7c:	d206      	bcs.n	8011a8c <__hexnan+0x64>
 8011a7e:	2d07      	cmp	r5, #7
 8011a80:	dc04      	bgt.n	8011a8c <__hexnan+0x64>
 8011a82:	462a      	mov	r2, r5
 8011a84:	4649      	mov	r1, r9
 8011a86:	4620      	mov	r0, r4
 8011a88:	f7ff ffa8 	bl	80119dc <L_shift>
 8011a8c:	4544      	cmp	r4, r8
 8011a8e:	d950      	bls.n	8011b32 <__hexnan+0x10a>
 8011a90:	2300      	movs	r3, #0
 8011a92:	f1a4 0904 	sub.w	r9, r4, #4
 8011a96:	f844 3c04 	str.w	r3, [r4, #-4]
 8011a9a:	461d      	mov	r5, r3
 8011a9c:	464c      	mov	r4, r9
 8011a9e:	f8cd b008 	str.w	fp, [sp, #8]
 8011aa2:	9903      	ldr	r1, [sp, #12]
 8011aa4:	e7d7      	b.n	8011a56 <__hexnan+0x2e>
 8011aa6:	2a29      	cmp	r2, #41	; 0x29
 8011aa8:	d156      	bne.n	8011b58 <__hexnan+0x130>
 8011aaa:	3102      	adds	r1, #2
 8011aac:	f8ca 1000 	str.w	r1, [sl]
 8011ab0:	f1bb 0f00 	cmp.w	fp, #0
 8011ab4:	d050      	beq.n	8011b58 <__hexnan+0x130>
 8011ab6:	454c      	cmp	r4, r9
 8011ab8:	d206      	bcs.n	8011ac8 <__hexnan+0xa0>
 8011aba:	2d07      	cmp	r5, #7
 8011abc:	dc04      	bgt.n	8011ac8 <__hexnan+0xa0>
 8011abe:	462a      	mov	r2, r5
 8011ac0:	4649      	mov	r1, r9
 8011ac2:	4620      	mov	r0, r4
 8011ac4:	f7ff ff8a 	bl	80119dc <L_shift>
 8011ac8:	4544      	cmp	r4, r8
 8011aca:	d934      	bls.n	8011b36 <__hexnan+0x10e>
 8011acc:	4623      	mov	r3, r4
 8011ace:	f1a8 0204 	sub.w	r2, r8, #4
 8011ad2:	f853 1b04 	ldr.w	r1, [r3], #4
 8011ad6:	429f      	cmp	r7, r3
 8011ad8:	f842 1f04 	str.w	r1, [r2, #4]!
 8011adc:	d2f9      	bcs.n	8011ad2 <__hexnan+0xaa>
 8011ade:	1b3b      	subs	r3, r7, r4
 8011ae0:	f023 0303 	bic.w	r3, r3, #3
 8011ae4:	3304      	adds	r3, #4
 8011ae6:	3401      	adds	r4, #1
 8011ae8:	3e03      	subs	r6, #3
 8011aea:	42b4      	cmp	r4, r6
 8011aec:	bf88      	it	hi
 8011aee:	2304      	movhi	r3, #4
 8011af0:	2200      	movs	r2, #0
 8011af2:	4443      	add	r3, r8
 8011af4:	f843 2b04 	str.w	r2, [r3], #4
 8011af8:	429f      	cmp	r7, r3
 8011afa:	d2fb      	bcs.n	8011af4 <__hexnan+0xcc>
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	b91b      	cbnz	r3, 8011b08 <__hexnan+0xe0>
 8011b00:	4547      	cmp	r7, r8
 8011b02:	d127      	bne.n	8011b54 <__hexnan+0x12c>
 8011b04:	2301      	movs	r3, #1
 8011b06:	603b      	str	r3, [r7, #0]
 8011b08:	2005      	movs	r0, #5
 8011b0a:	e026      	b.n	8011b5a <__hexnan+0x132>
 8011b0c:	3501      	adds	r5, #1
 8011b0e:	2d08      	cmp	r5, #8
 8011b10:	f10b 0b01 	add.w	fp, fp, #1
 8011b14:	dd06      	ble.n	8011b24 <__hexnan+0xfc>
 8011b16:	4544      	cmp	r4, r8
 8011b18:	d9c3      	bls.n	8011aa2 <__hexnan+0x7a>
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	2501      	movs	r5, #1
 8011b1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011b22:	3c04      	subs	r4, #4
 8011b24:	6822      	ldr	r2, [r4, #0]
 8011b26:	f000 000f 	and.w	r0, r0, #15
 8011b2a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011b2e:	6022      	str	r2, [r4, #0]
 8011b30:	e7b7      	b.n	8011aa2 <__hexnan+0x7a>
 8011b32:	2508      	movs	r5, #8
 8011b34:	e7b5      	b.n	8011aa2 <__hexnan+0x7a>
 8011b36:	9b01      	ldr	r3, [sp, #4]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d0df      	beq.n	8011afc <__hexnan+0xd4>
 8011b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b40:	f1c3 0320 	rsb	r3, r3, #32
 8011b44:	fa22 f303 	lsr.w	r3, r2, r3
 8011b48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011b4c:	401a      	ands	r2, r3
 8011b4e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011b52:	e7d3      	b.n	8011afc <__hexnan+0xd4>
 8011b54:	3f04      	subs	r7, #4
 8011b56:	e7d1      	b.n	8011afc <__hexnan+0xd4>
 8011b58:	2004      	movs	r0, #4
 8011b5a:	b007      	add	sp, #28
 8011b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b60 <_localeconv_r>:
 8011b60:	4800      	ldr	r0, [pc, #0]	; (8011b64 <_localeconv_r+0x4>)
 8011b62:	4770      	bx	lr
 8011b64:	200001d4 	.word	0x200001d4

08011b68 <__retarget_lock_init_recursive>:
 8011b68:	4770      	bx	lr

08011b6a <__retarget_lock_acquire_recursive>:
 8011b6a:	4770      	bx	lr

08011b6c <__retarget_lock_release_recursive>:
 8011b6c:	4770      	bx	lr

08011b6e <__swhatbuf_r>:
 8011b6e:	b570      	push	{r4, r5, r6, lr}
 8011b70:	460e      	mov	r6, r1
 8011b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b76:	4614      	mov	r4, r2
 8011b78:	2900      	cmp	r1, #0
 8011b7a:	461d      	mov	r5, r3
 8011b7c:	b096      	sub	sp, #88	; 0x58
 8011b7e:	da07      	bge.n	8011b90 <__swhatbuf_r+0x22>
 8011b80:	2300      	movs	r3, #0
 8011b82:	602b      	str	r3, [r5, #0]
 8011b84:	89b3      	ldrh	r3, [r6, #12]
 8011b86:	061a      	lsls	r2, r3, #24
 8011b88:	d410      	bmi.n	8011bac <__swhatbuf_r+0x3e>
 8011b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b8e:	e00e      	b.n	8011bae <__swhatbuf_r+0x40>
 8011b90:	466a      	mov	r2, sp
 8011b92:	f001 f805 	bl	8012ba0 <_fstat_r>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	dbf2      	blt.n	8011b80 <__swhatbuf_r+0x12>
 8011b9a:	9a01      	ldr	r2, [sp, #4]
 8011b9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ba0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011ba4:	425a      	negs	r2, r3
 8011ba6:	415a      	adcs	r2, r3
 8011ba8:	602a      	str	r2, [r5, #0]
 8011baa:	e7ee      	b.n	8011b8a <__swhatbuf_r+0x1c>
 8011bac:	2340      	movs	r3, #64	; 0x40
 8011bae:	2000      	movs	r0, #0
 8011bb0:	6023      	str	r3, [r4, #0]
 8011bb2:	b016      	add	sp, #88	; 0x58
 8011bb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011bb8 <__smakebuf_r>:
 8011bb8:	898b      	ldrh	r3, [r1, #12]
 8011bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bbc:	079d      	lsls	r5, r3, #30
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	460c      	mov	r4, r1
 8011bc2:	d507      	bpl.n	8011bd4 <__smakebuf_r+0x1c>
 8011bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011bc8:	6023      	str	r3, [r4, #0]
 8011bca:	6123      	str	r3, [r4, #16]
 8011bcc:	2301      	movs	r3, #1
 8011bce:	6163      	str	r3, [r4, #20]
 8011bd0:	b002      	add	sp, #8
 8011bd2:	bd70      	pop	{r4, r5, r6, pc}
 8011bd4:	466a      	mov	r2, sp
 8011bd6:	ab01      	add	r3, sp, #4
 8011bd8:	f7ff ffc9 	bl	8011b6e <__swhatbuf_r>
 8011bdc:	9900      	ldr	r1, [sp, #0]
 8011bde:	4605      	mov	r5, r0
 8011be0:	4630      	mov	r0, r6
 8011be2:	f000 fd63 	bl	80126ac <_malloc_r>
 8011be6:	b948      	cbnz	r0, 8011bfc <__smakebuf_r+0x44>
 8011be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bec:	059a      	lsls	r2, r3, #22
 8011bee:	d4ef      	bmi.n	8011bd0 <__smakebuf_r+0x18>
 8011bf0:	f023 0303 	bic.w	r3, r3, #3
 8011bf4:	f043 0302 	orr.w	r3, r3, #2
 8011bf8:	81a3      	strh	r3, [r4, #12]
 8011bfa:	e7e3      	b.n	8011bc4 <__smakebuf_r+0xc>
 8011bfc:	4b0d      	ldr	r3, [pc, #52]	; (8011c34 <__smakebuf_r+0x7c>)
 8011bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011c00:	89a3      	ldrh	r3, [r4, #12]
 8011c02:	6020      	str	r0, [r4, #0]
 8011c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c08:	81a3      	strh	r3, [r4, #12]
 8011c0a:	9b00      	ldr	r3, [sp, #0]
 8011c0c:	6120      	str	r0, [r4, #16]
 8011c0e:	6163      	str	r3, [r4, #20]
 8011c10:	9b01      	ldr	r3, [sp, #4]
 8011c12:	b15b      	cbz	r3, 8011c2c <__smakebuf_r+0x74>
 8011c14:	4630      	mov	r0, r6
 8011c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c1a:	f000 ffd3 	bl	8012bc4 <_isatty_r>
 8011c1e:	b128      	cbz	r0, 8011c2c <__smakebuf_r+0x74>
 8011c20:	89a3      	ldrh	r3, [r4, #12]
 8011c22:	f023 0303 	bic.w	r3, r3, #3
 8011c26:	f043 0301 	orr.w	r3, r3, #1
 8011c2a:	81a3      	strh	r3, [r4, #12]
 8011c2c:	89a0      	ldrh	r0, [r4, #12]
 8011c2e:	4305      	orrs	r5, r0
 8011c30:	81a5      	strh	r5, [r4, #12]
 8011c32:	e7cd      	b.n	8011bd0 <__smakebuf_r+0x18>
 8011c34:	080112f1 	.word	0x080112f1

08011c38 <malloc>:
 8011c38:	4b02      	ldr	r3, [pc, #8]	; (8011c44 <malloc+0xc>)
 8011c3a:	4601      	mov	r1, r0
 8011c3c:	6818      	ldr	r0, [r3, #0]
 8011c3e:	f000 bd35 	b.w	80126ac <_malloc_r>
 8011c42:	bf00      	nop
 8011c44:	2000007c 	.word	0x2000007c

08011c48 <__ascii_mbtowc>:
 8011c48:	b082      	sub	sp, #8
 8011c4a:	b901      	cbnz	r1, 8011c4e <__ascii_mbtowc+0x6>
 8011c4c:	a901      	add	r1, sp, #4
 8011c4e:	b142      	cbz	r2, 8011c62 <__ascii_mbtowc+0x1a>
 8011c50:	b14b      	cbz	r3, 8011c66 <__ascii_mbtowc+0x1e>
 8011c52:	7813      	ldrb	r3, [r2, #0]
 8011c54:	600b      	str	r3, [r1, #0]
 8011c56:	7812      	ldrb	r2, [r2, #0]
 8011c58:	1e10      	subs	r0, r2, #0
 8011c5a:	bf18      	it	ne
 8011c5c:	2001      	movne	r0, #1
 8011c5e:	b002      	add	sp, #8
 8011c60:	4770      	bx	lr
 8011c62:	4610      	mov	r0, r2
 8011c64:	e7fb      	b.n	8011c5e <__ascii_mbtowc+0x16>
 8011c66:	f06f 0001 	mvn.w	r0, #1
 8011c6a:	e7f8      	b.n	8011c5e <__ascii_mbtowc+0x16>

08011c6c <memchr>:
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	b510      	push	{r4, lr}
 8011c70:	b2c9      	uxtb	r1, r1
 8011c72:	4402      	add	r2, r0
 8011c74:	4293      	cmp	r3, r2
 8011c76:	4618      	mov	r0, r3
 8011c78:	d101      	bne.n	8011c7e <memchr+0x12>
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	e003      	b.n	8011c86 <memchr+0x1a>
 8011c7e:	7804      	ldrb	r4, [r0, #0]
 8011c80:	3301      	adds	r3, #1
 8011c82:	428c      	cmp	r4, r1
 8011c84:	d1f6      	bne.n	8011c74 <memchr+0x8>
 8011c86:	bd10      	pop	{r4, pc}

08011c88 <_Balloc>:
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	460d      	mov	r5, r1
 8011c90:	b976      	cbnz	r6, 8011cb0 <_Balloc+0x28>
 8011c92:	2010      	movs	r0, #16
 8011c94:	f7ff ffd0 	bl	8011c38 <malloc>
 8011c98:	4602      	mov	r2, r0
 8011c9a:	6260      	str	r0, [r4, #36]	; 0x24
 8011c9c:	b920      	cbnz	r0, 8011ca8 <_Balloc+0x20>
 8011c9e:	2166      	movs	r1, #102	; 0x66
 8011ca0:	4b17      	ldr	r3, [pc, #92]	; (8011d00 <_Balloc+0x78>)
 8011ca2:	4818      	ldr	r0, [pc, #96]	; (8011d04 <_Balloc+0x7c>)
 8011ca4:	f000 ff3c 	bl	8012b20 <__assert_func>
 8011ca8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011cac:	6006      	str	r6, [r0, #0]
 8011cae:	60c6      	str	r6, [r0, #12]
 8011cb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011cb2:	68f3      	ldr	r3, [r6, #12]
 8011cb4:	b183      	cbz	r3, 8011cd8 <_Balloc+0x50>
 8011cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011cbe:	b9b8      	cbnz	r0, 8011cf0 <_Balloc+0x68>
 8011cc0:	2101      	movs	r1, #1
 8011cc2:	fa01 f605 	lsl.w	r6, r1, r5
 8011cc6:	1d72      	adds	r2, r6, #5
 8011cc8:	4620      	mov	r0, r4
 8011cca:	0092      	lsls	r2, r2, #2
 8011ccc:	f000 fc94 	bl	80125f8 <_calloc_r>
 8011cd0:	b160      	cbz	r0, 8011cec <_Balloc+0x64>
 8011cd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011cd6:	e00e      	b.n	8011cf6 <_Balloc+0x6e>
 8011cd8:	2221      	movs	r2, #33	; 0x21
 8011cda:	2104      	movs	r1, #4
 8011cdc:	4620      	mov	r0, r4
 8011cde:	f000 fc8b 	bl	80125f8 <_calloc_r>
 8011ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ce4:	60f0      	str	r0, [r6, #12]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d1e4      	bne.n	8011cb6 <_Balloc+0x2e>
 8011cec:	2000      	movs	r0, #0
 8011cee:	bd70      	pop	{r4, r5, r6, pc}
 8011cf0:	6802      	ldr	r2, [r0, #0]
 8011cf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011cfc:	e7f7      	b.n	8011cee <_Balloc+0x66>
 8011cfe:	bf00      	nop
 8011d00:	08013f2a 	.word	0x08013f2a
 8011d04:	08014094 	.word	0x08014094

08011d08 <_Bfree>:
 8011d08:	b570      	push	{r4, r5, r6, lr}
 8011d0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	460c      	mov	r4, r1
 8011d10:	b976      	cbnz	r6, 8011d30 <_Bfree+0x28>
 8011d12:	2010      	movs	r0, #16
 8011d14:	f7ff ff90 	bl	8011c38 <malloc>
 8011d18:	4602      	mov	r2, r0
 8011d1a:	6268      	str	r0, [r5, #36]	; 0x24
 8011d1c:	b920      	cbnz	r0, 8011d28 <_Bfree+0x20>
 8011d1e:	218a      	movs	r1, #138	; 0x8a
 8011d20:	4b08      	ldr	r3, [pc, #32]	; (8011d44 <_Bfree+0x3c>)
 8011d22:	4809      	ldr	r0, [pc, #36]	; (8011d48 <_Bfree+0x40>)
 8011d24:	f000 fefc 	bl	8012b20 <__assert_func>
 8011d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d2c:	6006      	str	r6, [r0, #0]
 8011d2e:	60c6      	str	r6, [r0, #12]
 8011d30:	b13c      	cbz	r4, 8011d42 <_Bfree+0x3a>
 8011d32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d34:	6862      	ldr	r2, [r4, #4]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011d3c:	6021      	str	r1, [r4, #0]
 8011d3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011d42:	bd70      	pop	{r4, r5, r6, pc}
 8011d44:	08013f2a 	.word	0x08013f2a
 8011d48:	08014094 	.word	0x08014094

08011d4c <__multadd>:
 8011d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d50:	4698      	mov	r8, r3
 8011d52:	460c      	mov	r4, r1
 8011d54:	2300      	movs	r3, #0
 8011d56:	690e      	ldr	r6, [r1, #16]
 8011d58:	4607      	mov	r7, r0
 8011d5a:	f101 0014 	add.w	r0, r1, #20
 8011d5e:	6805      	ldr	r5, [r0, #0]
 8011d60:	3301      	adds	r3, #1
 8011d62:	b2a9      	uxth	r1, r5
 8011d64:	fb02 8101 	mla	r1, r2, r1, r8
 8011d68:	0c2d      	lsrs	r5, r5, #16
 8011d6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011d6e:	fb02 c505 	mla	r5, r2, r5, ip
 8011d72:	b289      	uxth	r1, r1
 8011d74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011d78:	429e      	cmp	r6, r3
 8011d7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011d7e:	f840 1b04 	str.w	r1, [r0], #4
 8011d82:	dcec      	bgt.n	8011d5e <__multadd+0x12>
 8011d84:	f1b8 0f00 	cmp.w	r8, #0
 8011d88:	d022      	beq.n	8011dd0 <__multadd+0x84>
 8011d8a:	68a3      	ldr	r3, [r4, #8]
 8011d8c:	42b3      	cmp	r3, r6
 8011d8e:	dc19      	bgt.n	8011dc4 <__multadd+0x78>
 8011d90:	6861      	ldr	r1, [r4, #4]
 8011d92:	4638      	mov	r0, r7
 8011d94:	3101      	adds	r1, #1
 8011d96:	f7ff ff77 	bl	8011c88 <_Balloc>
 8011d9a:	4605      	mov	r5, r0
 8011d9c:	b928      	cbnz	r0, 8011daa <__multadd+0x5e>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	21b5      	movs	r1, #181	; 0xb5
 8011da2:	4b0d      	ldr	r3, [pc, #52]	; (8011dd8 <__multadd+0x8c>)
 8011da4:	480d      	ldr	r0, [pc, #52]	; (8011ddc <__multadd+0x90>)
 8011da6:	f000 febb 	bl	8012b20 <__assert_func>
 8011daa:	6922      	ldr	r2, [r4, #16]
 8011dac:	f104 010c 	add.w	r1, r4, #12
 8011db0:	3202      	adds	r2, #2
 8011db2:	0092      	lsls	r2, r2, #2
 8011db4:	300c      	adds	r0, #12
 8011db6:	f7fc fc6f 	bl	800e698 <memcpy>
 8011dba:	4621      	mov	r1, r4
 8011dbc:	4638      	mov	r0, r7
 8011dbe:	f7ff ffa3 	bl	8011d08 <_Bfree>
 8011dc2:	462c      	mov	r4, r5
 8011dc4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011dc8:	3601      	adds	r6, #1
 8011dca:	f8c3 8014 	str.w	r8, [r3, #20]
 8011dce:	6126      	str	r6, [r4, #16]
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd6:	bf00      	nop
 8011dd8:	08013fa0 	.word	0x08013fa0
 8011ddc:	08014094 	.word	0x08014094

08011de0 <__s2b>:
 8011de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011de4:	4615      	mov	r5, r2
 8011de6:	2209      	movs	r2, #9
 8011de8:	461f      	mov	r7, r3
 8011dea:	3308      	adds	r3, #8
 8011dec:	460c      	mov	r4, r1
 8011dee:	fb93 f3f2 	sdiv	r3, r3, r2
 8011df2:	4606      	mov	r6, r0
 8011df4:	2201      	movs	r2, #1
 8011df6:	2100      	movs	r1, #0
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	db09      	blt.n	8011e10 <__s2b+0x30>
 8011dfc:	4630      	mov	r0, r6
 8011dfe:	f7ff ff43 	bl	8011c88 <_Balloc>
 8011e02:	b940      	cbnz	r0, 8011e16 <__s2b+0x36>
 8011e04:	4602      	mov	r2, r0
 8011e06:	21ce      	movs	r1, #206	; 0xce
 8011e08:	4b18      	ldr	r3, [pc, #96]	; (8011e6c <__s2b+0x8c>)
 8011e0a:	4819      	ldr	r0, [pc, #100]	; (8011e70 <__s2b+0x90>)
 8011e0c:	f000 fe88 	bl	8012b20 <__assert_func>
 8011e10:	0052      	lsls	r2, r2, #1
 8011e12:	3101      	adds	r1, #1
 8011e14:	e7f0      	b.n	8011df8 <__s2b+0x18>
 8011e16:	9b08      	ldr	r3, [sp, #32]
 8011e18:	2d09      	cmp	r5, #9
 8011e1a:	6143      	str	r3, [r0, #20]
 8011e1c:	f04f 0301 	mov.w	r3, #1
 8011e20:	6103      	str	r3, [r0, #16]
 8011e22:	dd16      	ble.n	8011e52 <__s2b+0x72>
 8011e24:	f104 0909 	add.w	r9, r4, #9
 8011e28:	46c8      	mov	r8, r9
 8011e2a:	442c      	add	r4, r5
 8011e2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011e30:	4601      	mov	r1, r0
 8011e32:	220a      	movs	r2, #10
 8011e34:	4630      	mov	r0, r6
 8011e36:	3b30      	subs	r3, #48	; 0x30
 8011e38:	f7ff ff88 	bl	8011d4c <__multadd>
 8011e3c:	45a0      	cmp	r8, r4
 8011e3e:	d1f5      	bne.n	8011e2c <__s2b+0x4c>
 8011e40:	f1a5 0408 	sub.w	r4, r5, #8
 8011e44:	444c      	add	r4, r9
 8011e46:	1b2d      	subs	r5, r5, r4
 8011e48:	1963      	adds	r3, r4, r5
 8011e4a:	42bb      	cmp	r3, r7
 8011e4c:	db04      	blt.n	8011e58 <__s2b+0x78>
 8011e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e52:	2509      	movs	r5, #9
 8011e54:	340a      	adds	r4, #10
 8011e56:	e7f6      	b.n	8011e46 <__s2b+0x66>
 8011e58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011e5c:	4601      	mov	r1, r0
 8011e5e:	220a      	movs	r2, #10
 8011e60:	4630      	mov	r0, r6
 8011e62:	3b30      	subs	r3, #48	; 0x30
 8011e64:	f7ff ff72 	bl	8011d4c <__multadd>
 8011e68:	e7ee      	b.n	8011e48 <__s2b+0x68>
 8011e6a:	bf00      	nop
 8011e6c:	08013fa0 	.word	0x08013fa0
 8011e70:	08014094 	.word	0x08014094

08011e74 <__hi0bits>:
 8011e74:	0c02      	lsrs	r2, r0, #16
 8011e76:	0412      	lsls	r2, r2, #16
 8011e78:	4603      	mov	r3, r0
 8011e7a:	b9ca      	cbnz	r2, 8011eb0 <__hi0bits+0x3c>
 8011e7c:	0403      	lsls	r3, r0, #16
 8011e7e:	2010      	movs	r0, #16
 8011e80:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011e84:	bf04      	itt	eq
 8011e86:	021b      	lsleq	r3, r3, #8
 8011e88:	3008      	addeq	r0, #8
 8011e8a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011e8e:	bf04      	itt	eq
 8011e90:	011b      	lsleq	r3, r3, #4
 8011e92:	3004      	addeq	r0, #4
 8011e94:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011e98:	bf04      	itt	eq
 8011e9a:	009b      	lsleq	r3, r3, #2
 8011e9c:	3002      	addeq	r0, #2
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	db05      	blt.n	8011eae <__hi0bits+0x3a>
 8011ea2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8011ea6:	f100 0001 	add.w	r0, r0, #1
 8011eaa:	bf08      	it	eq
 8011eac:	2020      	moveq	r0, #32
 8011eae:	4770      	bx	lr
 8011eb0:	2000      	movs	r0, #0
 8011eb2:	e7e5      	b.n	8011e80 <__hi0bits+0xc>

08011eb4 <__lo0bits>:
 8011eb4:	6803      	ldr	r3, [r0, #0]
 8011eb6:	4602      	mov	r2, r0
 8011eb8:	f013 0007 	ands.w	r0, r3, #7
 8011ebc:	d00b      	beq.n	8011ed6 <__lo0bits+0x22>
 8011ebe:	07d9      	lsls	r1, r3, #31
 8011ec0:	d422      	bmi.n	8011f08 <__lo0bits+0x54>
 8011ec2:	0798      	lsls	r0, r3, #30
 8011ec4:	bf49      	itett	mi
 8011ec6:	085b      	lsrmi	r3, r3, #1
 8011ec8:	089b      	lsrpl	r3, r3, #2
 8011eca:	2001      	movmi	r0, #1
 8011ecc:	6013      	strmi	r3, [r2, #0]
 8011ece:	bf5c      	itt	pl
 8011ed0:	2002      	movpl	r0, #2
 8011ed2:	6013      	strpl	r3, [r2, #0]
 8011ed4:	4770      	bx	lr
 8011ed6:	b299      	uxth	r1, r3
 8011ed8:	b909      	cbnz	r1, 8011ede <__lo0bits+0x2a>
 8011eda:	2010      	movs	r0, #16
 8011edc:	0c1b      	lsrs	r3, r3, #16
 8011ede:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011ee2:	bf04      	itt	eq
 8011ee4:	0a1b      	lsreq	r3, r3, #8
 8011ee6:	3008      	addeq	r0, #8
 8011ee8:	0719      	lsls	r1, r3, #28
 8011eea:	bf04      	itt	eq
 8011eec:	091b      	lsreq	r3, r3, #4
 8011eee:	3004      	addeq	r0, #4
 8011ef0:	0799      	lsls	r1, r3, #30
 8011ef2:	bf04      	itt	eq
 8011ef4:	089b      	lsreq	r3, r3, #2
 8011ef6:	3002      	addeq	r0, #2
 8011ef8:	07d9      	lsls	r1, r3, #31
 8011efa:	d403      	bmi.n	8011f04 <__lo0bits+0x50>
 8011efc:	085b      	lsrs	r3, r3, #1
 8011efe:	f100 0001 	add.w	r0, r0, #1
 8011f02:	d003      	beq.n	8011f0c <__lo0bits+0x58>
 8011f04:	6013      	str	r3, [r2, #0]
 8011f06:	4770      	bx	lr
 8011f08:	2000      	movs	r0, #0
 8011f0a:	4770      	bx	lr
 8011f0c:	2020      	movs	r0, #32
 8011f0e:	4770      	bx	lr

08011f10 <__i2b>:
 8011f10:	b510      	push	{r4, lr}
 8011f12:	460c      	mov	r4, r1
 8011f14:	2101      	movs	r1, #1
 8011f16:	f7ff feb7 	bl	8011c88 <_Balloc>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	b928      	cbnz	r0, 8011f2a <__i2b+0x1a>
 8011f1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011f22:	4b04      	ldr	r3, [pc, #16]	; (8011f34 <__i2b+0x24>)
 8011f24:	4804      	ldr	r0, [pc, #16]	; (8011f38 <__i2b+0x28>)
 8011f26:	f000 fdfb 	bl	8012b20 <__assert_func>
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	6144      	str	r4, [r0, #20]
 8011f2e:	6103      	str	r3, [r0, #16]
 8011f30:	bd10      	pop	{r4, pc}
 8011f32:	bf00      	nop
 8011f34:	08013fa0 	.word	0x08013fa0
 8011f38:	08014094 	.word	0x08014094

08011f3c <__multiply>:
 8011f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f40:	4614      	mov	r4, r2
 8011f42:	690a      	ldr	r2, [r1, #16]
 8011f44:	6923      	ldr	r3, [r4, #16]
 8011f46:	460d      	mov	r5, r1
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	bfbe      	ittt	lt
 8011f4c:	460b      	movlt	r3, r1
 8011f4e:	4625      	movlt	r5, r4
 8011f50:	461c      	movlt	r4, r3
 8011f52:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011f56:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011f5a:	68ab      	ldr	r3, [r5, #8]
 8011f5c:	6869      	ldr	r1, [r5, #4]
 8011f5e:	eb0a 0709 	add.w	r7, sl, r9
 8011f62:	42bb      	cmp	r3, r7
 8011f64:	b085      	sub	sp, #20
 8011f66:	bfb8      	it	lt
 8011f68:	3101      	addlt	r1, #1
 8011f6a:	f7ff fe8d 	bl	8011c88 <_Balloc>
 8011f6e:	b930      	cbnz	r0, 8011f7e <__multiply+0x42>
 8011f70:	4602      	mov	r2, r0
 8011f72:	f240 115d 	movw	r1, #349	; 0x15d
 8011f76:	4b41      	ldr	r3, [pc, #260]	; (801207c <__multiply+0x140>)
 8011f78:	4841      	ldr	r0, [pc, #260]	; (8012080 <__multiply+0x144>)
 8011f7a:	f000 fdd1 	bl	8012b20 <__assert_func>
 8011f7e:	f100 0614 	add.w	r6, r0, #20
 8011f82:	4633      	mov	r3, r6
 8011f84:	2200      	movs	r2, #0
 8011f86:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011f8a:	4543      	cmp	r3, r8
 8011f8c:	d31e      	bcc.n	8011fcc <__multiply+0x90>
 8011f8e:	f105 0c14 	add.w	ip, r5, #20
 8011f92:	f104 0314 	add.w	r3, r4, #20
 8011f96:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011f9a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011f9e:	9202      	str	r2, [sp, #8]
 8011fa0:	ebac 0205 	sub.w	r2, ip, r5
 8011fa4:	3a15      	subs	r2, #21
 8011fa6:	f022 0203 	bic.w	r2, r2, #3
 8011faa:	3204      	adds	r2, #4
 8011fac:	f105 0115 	add.w	r1, r5, #21
 8011fb0:	458c      	cmp	ip, r1
 8011fb2:	bf38      	it	cc
 8011fb4:	2204      	movcc	r2, #4
 8011fb6:	9201      	str	r2, [sp, #4]
 8011fb8:	9a02      	ldr	r2, [sp, #8]
 8011fba:	9303      	str	r3, [sp, #12]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d808      	bhi.n	8011fd2 <__multiply+0x96>
 8011fc0:	2f00      	cmp	r7, #0
 8011fc2:	dc55      	bgt.n	8012070 <__multiply+0x134>
 8011fc4:	6107      	str	r7, [r0, #16]
 8011fc6:	b005      	add	sp, #20
 8011fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fcc:	f843 2b04 	str.w	r2, [r3], #4
 8011fd0:	e7db      	b.n	8011f8a <__multiply+0x4e>
 8011fd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8011fd6:	f1ba 0f00 	cmp.w	sl, #0
 8011fda:	d020      	beq.n	801201e <__multiply+0xe2>
 8011fdc:	46b1      	mov	r9, r6
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f105 0e14 	add.w	lr, r5, #20
 8011fe4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011fe8:	f8d9 b000 	ldr.w	fp, [r9]
 8011fec:	b2a1      	uxth	r1, r4
 8011fee:	fa1f fb8b 	uxth.w	fp, fp
 8011ff2:	fb0a b101 	mla	r1, sl, r1, fp
 8011ff6:	4411      	add	r1, r2
 8011ff8:	f8d9 2000 	ldr.w	r2, [r9]
 8011ffc:	0c24      	lsrs	r4, r4, #16
 8011ffe:	0c12      	lsrs	r2, r2, #16
 8012000:	fb0a 2404 	mla	r4, sl, r4, r2
 8012004:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012008:	b289      	uxth	r1, r1
 801200a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801200e:	45f4      	cmp	ip, lr
 8012010:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012014:	f849 1b04 	str.w	r1, [r9], #4
 8012018:	d8e4      	bhi.n	8011fe4 <__multiply+0xa8>
 801201a:	9901      	ldr	r1, [sp, #4]
 801201c:	5072      	str	r2, [r6, r1]
 801201e:	9a03      	ldr	r2, [sp, #12]
 8012020:	3304      	adds	r3, #4
 8012022:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012026:	f1b9 0f00 	cmp.w	r9, #0
 801202a:	d01f      	beq.n	801206c <__multiply+0x130>
 801202c:	46b6      	mov	lr, r6
 801202e:	f04f 0a00 	mov.w	sl, #0
 8012032:	6834      	ldr	r4, [r6, #0]
 8012034:	f105 0114 	add.w	r1, r5, #20
 8012038:	880a      	ldrh	r2, [r1, #0]
 801203a:	f8be b002 	ldrh.w	fp, [lr, #2]
 801203e:	b2a4      	uxth	r4, r4
 8012040:	fb09 b202 	mla	r2, r9, r2, fp
 8012044:	4492      	add	sl, r2
 8012046:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801204a:	f84e 4b04 	str.w	r4, [lr], #4
 801204e:	f851 4b04 	ldr.w	r4, [r1], #4
 8012052:	f8be 2000 	ldrh.w	r2, [lr]
 8012056:	0c24      	lsrs	r4, r4, #16
 8012058:	fb09 2404 	mla	r4, r9, r4, r2
 801205c:	458c      	cmp	ip, r1
 801205e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012062:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012066:	d8e7      	bhi.n	8012038 <__multiply+0xfc>
 8012068:	9a01      	ldr	r2, [sp, #4]
 801206a:	50b4      	str	r4, [r6, r2]
 801206c:	3604      	adds	r6, #4
 801206e:	e7a3      	b.n	8011fb8 <__multiply+0x7c>
 8012070:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012074:	2b00      	cmp	r3, #0
 8012076:	d1a5      	bne.n	8011fc4 <__multiply+0x88>
 8012078:	3f01      	subs	r7, #1
 801207a:	e7a1      	b.n	8011fc0 <__multiply+0x84>
 801207c:	08013fa0 	.word	0x08013fa0
 8012080:	08014094 	.word	0x08014094

08012084 <__pow5mult>:
 8012084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012088:	4615      	mov	r5, r2
 801208a:	f012 0203 	ands.w	r2, r2, #3
 801208e:	4606      	mov	r6, r0
 8012090:	460f      	mov	r7, r1
 8012092:	d007      	beq.n	80120a4 <__pow5mult+0x20>
 8012094:	4c25      	ldr	r4, [pc, #148]	; (801212c <__pow5mult+0xa8>)
 8012096:	3a01      	subs	r2, #1
 8012098:	2300      	movs	r3, #0
 801209a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801209e:	f7ff fe55 	bl	8011d4c <__multadd>
 80120a2:	4607      	mov	r7, r0
 80120a4:	10ad      	asrs	r5, r5, #2
 80120a6:	d03d      	beq.n	8012124 <__pow5mult+0xa0>
 80120a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120aa:	b97c      	cbnz	r4, 80120cc <__pow5mult+0x48>
 80120ac:	2010      	movs	r0, #16
 80120ae:	f7ff fdc3 	bl	8011c38 <malloc>
 80120b2:	4602      	mov	r2, r0
 80120b4:	6270      	str	r0, [r6, #36]	; 0x24
 80120b6:	b928      	cbnz	r0, 80120c4 <__pow5mult+0x40>
 80120b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80120bc:	4b1c      	ldr	r3, [pc, #112]	; (8012130 <__pow5mult+0xac>)
 80120be:	481d      	ldr	r0, [pc, #116]	; (8012134 <__pow5mult+0xb0>)
 80120c0:	f000 fd2e 	bl	8012b20 <__assert_func>
 80120c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80120c8:	6004      	str	r4, [r0, #0]
 80120ca:	60c4      	str	r4, [r0, #12]
 80120cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80120d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80120d4:	b94c      	cbnz	r4, 80120ea <__pow5mult+0x66>
 80120d6:	f240 2171 	movw	r1, #625	; 0x271
 80120da:	4630      	mov	r0, r6
 80120dc:	f7ff ff18 	bl	8011f10 <__i2b>
 80120e0:	2300      	movs	r3, #0
 80120e2:	4604      	mov	r4, r0
 80120e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80120e8:	6003      	str	r3, [r0, #0]
 80120ea:	f04f 0900 	mov.w	r9, #0
 80120ee:	07eb      	lsls	r3, r5, #31
 80120f0:	d50a      	bpl.n	8012108 <__pow5mult+0x84>
 80120f2:	4639      	mov	r1, r7
 80120f4:	4622      	mov	r2, r4
 80120f6:	4630      	mov	r0, r6
 80120f8:	f7ff ff20 	bl	8011f3c <__multiply>
 80120fc:	4680      	mov	r8, r0
 80120fe:	4639      	mov	r1, r7
 8012100:	4630      	mov	r0, r6
 8012102:	f7ff fe01 	bl	8011d08 <_Bfree>
 8012106:	4647      	mov	r7, r8
 8012108:	106d      	asrs	r5, r5, #1
 801210a:	d00b      	beq.n	8012124 <__pow5mult+0xa0>
 801210c:	6820      	ldr	r0, [r4, #0]
 801210e:	b938      	cbnz	r0, 8012120 <__pow5mult+0x9c>
 8012110:	4622      	mov	r2, r4
 8012112:	4621      	mov	r1, r4
 8012114:	4630      	mov	r0, r6
 8012116:	f7ff ff11 	bl	8011f3c <__multiply>
 801211a:	6020      	str	r0, [r4, #0]
 801211c:	f8c0 9000 	str.w	r9, [r0]
 8012120:	4604      	mov	r4, r0
 8012122:	e7e4      	b.n	80120ee <__pow5mult+0x6a>
 8012124:	4638      	mov	r0, r7
 8012126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801212a:	bf00      	nop
 801212c:	080141e8 	.word	0x080141e8
 8012130:	08013f2a 	.word	0x08013f2a
 8012134:	08014094 	.word	0x08014094

08012138 <__lshift>:
 8012138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801213c:	460c      	mov	r4, r1
 801213e:	4607      	mov	r7, r0
 8012140:	4691      	mov	r9, r2
 8012142:	6923      	ldr	r3, [r4, #16]
 8012144:	6849      	ldr	r1, [r1, #4]
 8012146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801214a:	68a3      	ldr	r3, [r4, #8]
 801214c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012150:	f108 0601 	add.w	r6, r8, #1
 8012154:	42b3      	cmp	r3, r6
 8012156:	db0b      	blt.n	8012170 <__lshift+0x38>
 8012158:	4638      	mov	r0, r7
 801215a:	f7ff fd95 	bl	8011c88 <_Balloc>
 801215e:	4605      	mov	r5, r0
 8012160:	b948      	cbnz	r0, 8012176 <__lshift+0x3e>
 8012162:	4602      	mov	r2, r0
 8012164:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012168:	4b27      	ldr	r3, [pc, #156]	; (8012208 <__lshift+0xd0>)
 801216a:	4828      	ldr	r0, [pc, #160]	; (801220c <__lshift+0xd4>)
 801216c:	f000 fcd8 	bl	8012b20 <__assert_func>
 8012170:	3101      	adds	r1, #1
 8012172:	005b      	lsls	r3, r3, #1
 8012174:	e7ee      	b.n	8012154 <__lshift+0x1c>
 8012176:	2300      	movs	r3, #0
 8012178:	f100 0114 	add.w	r1, r0, #20
 801217c:	f100 0210 	add.w	r2, r0, #16
 8012180:	4618      	mov	r0, r3
 8012182:	4553      	cmp	r3, sl
 8012184:	db33      	blt.n	80121ee <__lshift+0xb6>
 8012186:	6920      	ldr	r0, [r4, #16]
 8012188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801218c:	f104 0314 	add.w	r3, r4, #20
 8012190:	f019 091f 	ands.w	r9, r9, #31
 8012194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801219c:	d02b      	beq.n	80121f6 <__lshift+0xbe>
 801219e:	468a      	mov	sl, r1
 80121a0:	2200      	movs	r2, #0
 80121a2:	f1c9 0e20 	rsb	lr, r9, #32
 80121a6:	6818      	ldr	r0, [r3, #0]
 80121a8:	fa00 f009 	lsl.w	r0, r0, r9
 80121ac:	4302      	orrs	r2, r0
 80121ae:	f84a 2b04 	str.w	r2, [sl], #4
 80121b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80121b6:	459c      	cmp	ip, r3
 80121b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80121bc:	d8f3      	bhi.n	80121a6 <__lshift+0x6e>
 80121be:	ebac 0304 	sub.w	r3, ip, r4
 80121c2:	3b15      	subs	r3, #21
 80121c4:	f023 0303 	bic.w	r3, r3, #3
 80121c8:	3304      	adds	r3, #4
 80121ca:	f104 0015 	add.w	r0, r4, #21
 80121ce:	4584      	cmp	ip, r0
 80121d0:	bf38      	it	cc
 80121d2:	2304      	movcc	r3, #4
 80121d4:	50ca      	str	r2, [r1, r3]
 80121d6:	b10a      	cbz	r2, 80121dc <__lshift+0xa4>
 80121d8:	f108 0602 	add.w	r6, r8, #2
 80121dc:	3e01      	subs	r6, #1
 80121de:	4638      	mov	r0, r7
 80121e0:	4621      	mov	r1, r4
 80121e2:	612e      	str	r6, [r5, #16]
 80121e4:	f7ff fd90 	bl	8011d08 <_Bfree>
 80121e8:	4628      	mov	r0, r5
 80121ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80121f2:	3301      	adds	r3, #1
 80121f4:	e7c5      	b.n	8012182 <__lshift+0x4a>
 80121f6:	3904      	subs	r1, #4
 80121f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80121fc:	459c      	cmp	ip, r3
 80121fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8012202:	d8f9      	bhi.n	80121f8 <__lshift+0xc0>
 8012204:	e7ea      	b.n	80121dc <__lshift+0xa4>
 8012206:	bf00      	nop
 8012208:	08013fa0 	.word	0x08013fa0
 801220c:	08014094 	.word	0x08014094

08012210 <__mcmp>:
 8012210:	4603      	mov	r3, r0
 8012212:	690a      	ldr	r2, [r1, #16]
 8012214:	6900      	ldr	r0, [r0, #16]
 8012216:	b530      	push	{r4, r5, lr}
 8012218:	1a80      	subs	r0, r0, r2
 801221a:	d10d      	bne.n	8012238 <__mcmp+0x28>
 801221c:	3314      	adds	r3, #20
 801221e:	3114      	adds	r1, #20
 8012220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801222c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012230:	4295      	cmp	r5, r2
 8012232:	d002      	beq.n	801223a <__mcmp+0x2a>
 8012234:	d304      	bcc.n	8012240 <__mcmp+0x30>
 8012236:	2001      	movs	r0, #1
 8012238:	bd30      	pop	{r4, r5, pc}
 801223a:	42a3      	cmp	r3, r4
 801223c:	d3f4      	bcc.n	8012228 <__mcmp+0x18>
 801223e:	e7fb      	b.n	8012238 <__mcmp+0x28>
 8012240:	f04f 30ff 	mov.w	r0, #4294967295
 8012244:	e7f8      	b.n	8012238 <__mcmp+0x28>
	...

08012248 <__mdiff>:
 8012248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224c:	460c      	mov	r4, r1
 801224e:	4606      	mov	r6, r0
 8012250:	4611      	mov	r1, r2
 8012252:	4620      	mov	r0, r4
 8012254:	4692      	mov	sl, r2
 8012256:	f7ff ffdb 	bl	8012210 <__mcmp>
 801225a:	1e05      	subs	r5, r0, #0
 801225c:	d111      	bne.n	8012282 <__mdiff+0x3a>
 801225e:	4629      	mov	r1, r5
 8012260:	4630      	mov	r0, r6
 8012262:	f7ff fd11 	bl	8011c88 <_Balloc>
 8012266:	4602      	mov	r2, r0
 8012268:	b928      	cbnz	r0, 8012276 <__mdiff+0x2e>
 801226a:	f240 2132 	movw	r1, #562	; 0x232
 801226e:	4b3c      	ldr	r3, [pc, #240]	; (8012360 <__mdiff+0x118>)
 8012270:	483c      	ldr	r0, [pc, #240]	; (8012364 <__mdiff+0x11c>)
 8012272:	f000 fc55 	bl	8012b20 <__assert_func>
 8012276:	2301      	movs	r3, #1
 8012278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801227c:	4610      	mov	r0, r2
 801227e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012282:	bfa4      	itt	ge
 8012284:	4653      	movge	r3, sl
 8012286:	46a2      	movge	sl, r4
 8012288:	4630      	mov	r0, r6
 801228a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801228e:	bfa6      	itte	ge
 8012290:	461c      	movge	r4, r3
 8012292:	2500      	movge	r5, #0
 8012294:	2501      	movlt	r5, #1
 8012296:	f7ff fcf7 	bl	8011c88 <_Balloc>
 801229a:	4602      	mov	r2, r0
 801229c:	b918      	cbnz	r0, 80122a6 <__mdiff+0x5e>
 801229e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80122a2:	4b2f      	ldr	r3, [pc, #188]	; (8012360 <__mdiff+0x118>)
 80122a4:	e7e4      	b.n	8012270 <__mdiff+0x28>
 80122a6:	f100 0814 	add.w	r8, r0, #20
 80122aa:	f8da 7010 	ldr.w	r7, [sl, #16]
 80122ae:	60c5      	str	r5, [r0, #12]
 80122b0:	f04f 0c00 	mov.w	ip, #0
 80122b4:	f10a 0514 	add.w	r5, sl, #20
 80122b8:	f10a 0010 	add.w	r0, sl, #16
 80122bc:	46c2      	mov	sl, r8
 80122be:	6926      	ldr	r6, [r4, #16]
 80122c0:	f104 0914 	add.w	r9, r4, #20
 80122c4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80122c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80122cc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80122d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80122d4:	fa1f f18b 	uxth.w	r1, fp
 80122d8:	4461      	add	r1, ip
 80122da:	fa1f fc83 	uxth.w	ip, r3
 80122de:	0c1b      	lsrs	r3, r3, #16
 80122e0:	eba1 010c 	sub.w	r1, r1, ip
 80122e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80122e8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80122ec:	b289      	uxth	r1, r1
 80122ee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80122f2:	454e      	cmp	r6, r9
 80122f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80122f8:	f84a 3b04 	str.w	r3, [sl], #4
 80122fc:	d8e6      	bhi.n	80122cc <__mdiff+0x84>
 80122fe:	1b33      	subs	r3, r6, r4
 8012300:	3b15      	subs	r3, #21
 8012302:	f023 0303 	bic.w	r3, r3, #3
 8012306:	3415      	adds	r4, #21
 8012308:	3304      	adds	r3, #4
 801230a:	42a6      	cmp	r6, r4
 801230c:	bf38      	it	cc
 801230e:	2304      	movcc	r3, #4
 8012310:	441d      	add	r5, r3
 8012312:	4443      	add	r3, r8
 8012314:	461e      	mov	r6, r3
 8012316:	462c      	mov	r4, r5
 8012318:	4574      	cmp	r4, lr
 801231a:	d30e      	bcc.n	801233a <__mdiff+0xf2>
 801231c:	f10e 0103 	add.w	r1, lr, #3
 8012320:	1b49      	subs	r1, r1, r5
 8012322:	f021 0103 	bic.w	r1, r1, #3
 8012326:	3d03      	subs	r5, #3
 8012328:	45ae      	cmp	lr, r5
 801232a:	bf38      	it	cc
 801232c:	2100      	movcc	r1, #0
 801232e:	4419      	add	r1, r3
 8012330:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012334:	b18b      	cbz	r3, 801235a <__mdiff+0x112>
 8012336:	6117      	str	r7, [r2, #16]
 8012338:	e7a0      	b.n	801227c <__mdiff+0x34>
 801233a:	f854 8b04 	ldr.w	r8, [r4], #4
 801233e:	fa1f f188 	uxth.w	r1, r8
 8012342:	4461      	add	r1, ip
 8012344:	1408      	asrs	r0, r1, #16
 8012346:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 801234a:	b289      	uxth	r1, r1
 801234c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012350:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012354:	f846 1b04 	str.w	r1, [r6], #4
 8012358:	e7de      	b.n	8012318 <__mdiff+0xd0>
 801235a:	3f01      	subs	r7, #1
 801235c:	e7e8      	b.n	8012330 <__mdiff+0xe8>
 801235e:	bf00      	nop
 8012360:	08013fa0 	.word	0x08013fa0
 8012364:	08014094 	.word	0x08014094

08012368 <__ulp>:
 8012368:	4b11      	ldr	r3, [pc, #68]	; (80123b0 <__ulp+0x48>)
 801236a:	400b      	ands	r3, r1
 801236c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8012370:	2b00      	cmp	r3, #0
 8012372:	dd02      	ble.n	801237a <__ulp+0x12>
 8012374:	2000      	movs	r0, #0
 8012376:	4619      	mov	r1, r3
 8012378:	4770      	bx	lr
 801237a:	425b      	negs	r3, r3
 801237c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8012380:	f04f 0000 	mov.w	r0, #0
 8012384:	f04f 0100 	mov.w	r1, #0
 8012388:	ea4f 5223 	mov.w	r2, r3, asr #20
 801238c:	da04      	bge.n	8012398 <__ulp+0x30>
 801238e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012392:	fa43 f102 	asr.w	r1, r3, r2
 8012396:	4770      	bx	lr
 8012398:	f1a2 0314 	sub.w	r3, r2, #20
 801239c:	2b1e      	cmp	r3, #30
 801239e:	bfd6      	itet	le
 80123a0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80123a4:	2301      	movgt	r3, #1
 80123a6:	fa22 f303 	lsrle.w	r3, r2, r3
 80123aa:	4618      	mov	r0, r3
 80123ac:	4770      	bx	lr
 80123ae:	bf00      	nop
 80123b0:	7ff00000 	.word	0x7ff00000

080123b4 <__b2d>:
 80123b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123b8:	6907      	ldr	r7, [r0, #16]
 80123ba:	f100 0914 	add.w	r9, r0, #20
 80123be:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80123c2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80123c6:	f1a7 0804 	sub.w	r8, r7, #4
 80123ca:	4630      	mov	r0, r6
 80123cc:	f7ff fd52 	bl	8011e74 <__hi0bits>
 80123d0:	f1c0 0320 	rsb	r3, r0, #32
 80123d4:	280a      	cmp	r0, #10
 80123d6:	600b      	str	r3, [r1, #0]
 80123d8:	491f      	ldr	r1, [pc, #124]	; (8012458 <__b2d+0xa4>)
 80123da:	dc17      	bgt.n	801240c <__b2d+0x58>
 80123dc:	45c1      	cmp	r9, r8
 80123de:	bf28      	it	cs
 80123e0:	2200      	movcs	r2, #0
 80123e2:	f1c0 0c0b 	rsb	ip, r0, #11
 80123e6:	fa26 f30c 	lsr.w	r3, r6, ip
 80123ea:	bf38      	it	cc
 80123ec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80123f0:	ea43 0501 	orr.w	r5, r3, r1
 80123f4:	f100 0315 	add.w	r3, r0, #21
 80123f8:	fa06 f303 	lsl.w	r3, r6, r3
 80123fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8012400:	ea43 0402 	orr.w	r4, r3, r2
 8012404:	4620      	mov	r0, r4
 8012406:	4629      	mov	r1, r5
 8012408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801240c:	45c1      	cmp	r9, r8
 801240e:	bf2e      	itee	cs
 8012410:	2200      	movcs	r2, #0
 8012412:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8012416:	f1a7 0808 	subcc.w	r8, r7, #8
 801241a:	f1b0 030b 	subs.w	r3, r0, #11
 801241e:	d016      	beq.n	801244e <__b2d+0x9a>
 8012420:	f1c3 0720 	rsb	r7, r3, #32
 8012424:	fa22 f107 	lsr.w	r1, r2, r7
 8012428:	45c8      	cmp	r8, r9
 801242a:	fa06 f603 	lsl.w	r6, r6, r3
 801242e:	ea46 0601 	orr.w	r6, r6, r1
 8012432:	bf94      	ite	ls
 8012434:	2100      	movls	r1, #0
 8012436:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801243a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801243e:	fa02 f003 	lsl.w	r0, r2, r3
 8012442:	40f9      	lsrs	r1, r7
 8012444:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012448:	ea40 0401 	orr.w	r4, r0, r1
 801244c:	e7da      	b.n	8012404 <__b2d+0x50>
 801244e:	4614      	mov	r4, r2
 8012450:	ea46 0501 	orr.w	r5, r6, r1
 8012454:	e7d6      	b.n	8012404 <__b2d+0x50>
 8012456:	bf00      	nop
 8012458:	3ff00000 	.word	0x3ff00000

0801245c <__d2b>:
 801245c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012460:	2101      	movs	r1, #1
 8012462:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8012466:	4690      	mov	r8, r2
 8012468:	461d      	mov	r5, r3
 801246a:	f7ff fc0d 	bl	8011c88 <_Balloc>
 801246e:	4604      	mov	r4, r0
 8012470:	b930      	cbnz	r0, 8012480 <__d2b+0x24>
 8012472:	4602      	mov	r2, r0
 8012474:	f240 310a 	movw	r1, #778	; 0x30a
 8012478:	4b24      	ldr	r3, [pc, #144]	; (801250c <__d2b+0xb0>)
 801247a:	4825      	ldr	r0, [pc, #148]	; (8012510 <__d2b+0xb4>)
 801247c:	f000 fb50 	bl	8012b20 <__assert_func>
 8012480:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012484:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8012488:	bb2d      	cbnz	r5, 80124d6 <__d2b+0x7a>
 801248a:	9301      	str	r3, [sp, #4]
 801248c:	f1b8 0300 	subs.w	r3, r8, #0
 8012490:	d026      	beq.n	80124e0 <__d2b+0x84>
 8012492:	4668      	mov	r0, sp
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	f7ff fd0d 	bl	8011eb4 <__lo0bits>
 801249a:	9900      	ldr	r1, [sp, #0]
 801249c:	b1f0      	cbz	r0, 80124dc <__d2b+0x80>
 801249e:	9a01      	ldr	r2, [sp, #4]
 80124a0:	f1c0 0320 	rsb	r3, r0, #32
 80124a4:	fa02 f303 	lsl.w	r3, r2, r3
 80124a8:	430b      	orrs	r3, r1
 80124aa:	40c2      	lsrs	r2, r0
 80124ac:	6163      	str	r3, [r4, #20]
 80124ae:	9201      	str	r2, [sp, #4]
 80124b0:	9b01      	ldr	r3, [sp, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	bf14      	ite	ne
 80124b6:	2102      	movne	r1, #2
 80124b8:	2101      	moveq	r1, #1
 80124ba:	61a3      	str	r3, [r4, #24]
 80124bc:	6121      	str	r1, [r4, #16]
 80124be:	b1c5      	cbz	r5, 80124f2 <__d2b+0x96>
 80124c0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80124c4:	4405      	add	r5, r0
 80124c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80124ca:	603d      	str	r5, [r7, #0]
 80124cc:	6030      	str	r0, [r6, #0]
 80124ce:	4620      	mov	r0, r4
 80124d0:	b002      	add	sp, #8
 80124d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80124da:	e7d6      	b.n	801248a <__d2b+0x2e>
 80124dc:	6161      	str	r1, [r4, #20]
 80124de:	e7e7      	b.n	80124b0 <__d2b+0x54>
 80124e0:	a801      	add	r0, sp, #4
 80124e2:	f7ff fce7 	bl	8011eb4 <__lo0bits>
 80124e6:	2101      	movs	r1, #1
 80124e8:	9b01      	ldr	r3, [sp, #4]
 80124ea:	6121      	str	r1, [r4, #16]
 80124ec:	6163      	str	r3, [r4, #20]
 80124ee:	3020      	adds	r0, #32
 80124f0:	e7e5      	b.n	80124be <__d2b+0x62>
 80124f2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80124f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80124fa:	6038      	str	r0, [r7, #0]
 80124fc:	6918      	ldr	r0, [r3, #16]
 80124fe:	f7ff fcb9 	bl	8011e74 <__hi0bits>
 8012502:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8012506:	6031      	str	r1, [r6, #0]
 8012508:	e7e1      	b.n	80124ce <__d2b+0x72>
 801250a:	bf00      	nop
 801250c:	08013fa0 	.word	0x08013fa0
 8012510:	08014094 	.word	0x08014094

08012514 <__ratio>:
 8012514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012518:	4688      	mov	r8, r1
 801251a:	4669      	mov	r1, sp
 801251c:	4681      	mov	r9, r0
 801251e:	f7ff ff49 	bl	80123b4 <__b2d>
 8012522:	460f      	mov	r7, r1
 8012524:	4604      	mov	r4, r0
 8012526:	460d      	mov	r5, r1
 8012528:	4640      	mov	r0, r8
 801252a:	a901      	add	r1, sp, #4
 801252c:	f7ff ff42 	bl	80123b4 <__b2d>
 8012530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012534:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012538:	468b      	mov	fp, r1
 801253a:	eba3 0c02 	sub.w	ip, r3, r2
 801253e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012542:	1a9b      	subs	r3, r3, r2
 8012544:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012548:	2b00      	cmp	r3, #0
 801254a:	bfd5      	itete	le
 801254c:	460a      	movle	r2, r1
 801254e:	462a      	movgt	r2, r5
 8012550:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012554:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012558:	bfd8      	it	le
 801255a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801255e:	465b      	mov	r3, fp
 8012560:	4602      	mov	r2, r0
 8012562:	4639      	mov	r1, r7
 8012564:	4620      	mov	r0, r4
 8012566:	f7ee f94d 	bl	8000804 <__aeabi_ddiv>
 801256a:	b003      	add	sp, #12
 801256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012570 <__copybits>:
 8012570:	3901      	subs	r1, #1
 8012572:	b570      	push	{r4, r5, r6, lr}
 8012574:	1149      	asrs	r1, r1, #5
 8012576:	6914      	ldr	r4, [r2, #16]
 8012578:	3101      	adds	r1, #1
 801257a:	f102 0314 	add.w	r3, r2, #20
 801257e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012582:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012586:	1f05      	subs	r5, r0, #4
 8012588:	42a3      	cmp	r3, r4
 801258a:	d30c      	bcc.n	80125a6 <__copybits+0x36>
 801258c:	1aa3      	subs	r3, r4, r2
 801258e:	3b11      	subs	r3, #17
 8012590:	f023 0303 	bic.w	r3, r3, #3
 8012594:	3211      	adds	r2, #17
 8012596:	42a2      	cmp	r2, r4
 8012598:	bf88      	it	hi
 801259a:	2300      	movhi	r3, #0
 801259c:	4418      	add	r0, r3
 801259e:	2300      	movs	r3, #0
 80125a0:	4288      	cmp	r0, r1
 80125a2:	d305      	bcc.n	80125b0 <__copybits+0x40>
 80125a4:	bd70      	pop	{r4, r5, r6, pc}
 80125a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80125aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80125ae:	e7eb      	b.n	8012588 <__copybits+0x18>
 80125b0:	f840 3b04 	str.w	r3, [r0], #4
 80125b4:	e7f4      	b.n	80125a0 <__copybits+0x30>

080125b6 <__any_on>:
 80125b6:	f100 0214 	add.w	r2, r0, #20
 80125ba:	6900      	ldr	r0, [r0, #16]
 80125bc:	114b      	asrs	r3, r1, #5
 80125be:	4298      	cmp	r0, r3
 80125c0:	b510      	push	{r4, lr}
 80125c2:	db11      	blt.n	80125e8 <__any_on+0x32>
 80125c4:	dd0a      	ble.n	80125dc <__any_on+0x26>
 80125c6:	f011 011f 	ands.w	r1, r1, #31
 80125ca:	d007      	beq.n	80125dc <__any_on+0x26>
 80125cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80125d0:	fa24 f001 	lsr.w	r0, r4, r1
 80125d4:	fa00 f101 	lsl.w	r1, r0, r1
 80125d8:	428c      	cmp	r4, r1
 80125da:	d10b      	bne.n	80125f4 <__any_on+0x3e>
 80125dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80125e0:	4293      	cmp	r3, r2
 80125e2:	d803      	bhi.n	80125ec <__any_on+0x36>
 80125e4:	2000      	movs	r0, #0
 80125e6:	bd10      	pop	{r4, pc}
 80125e8:	4603      	mov	r3, r0
 80125ea:	e7f7      	b.n	80125dc <__any_on+0x26>
 80125ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80125f0:	2900      	cmp	r1, #0
 80125f2:	d0f5      	beq.n	80125e0 <__any_on+0x2a>
 80125f4:	2001      	movs	r0, #1
 80125f6:	e7f6      	b.n	80125e6 <__any_on+0x30>

080125f8 <_calloc_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	fb02 f501 	mul.w	r5, r2, r1
 80125fe:	4629      	mov	r1, r5
 8012600:	f000 f854 	bl	80126ac <_malloc_r>
 8012604:	4604      	mov	r4, r0
 8012606:	b118      	cbz	r0, 8012610 <_calloc_r+0x18>
 8012608:	462a      	mov	r2, r5
 801260a:	2100      	movs	r1, #0
 801260c:	f7fc f852 	bl	800e6b4 <memset>
 8012610:	4620      	mov	r0, r4
 8012612:	bd38      	pop	{r3, r4, r5, pc}

08012614 <_free_r>:
 8012614:	b538      	push	{r3, r4, r5, lr}
 8012616:	4605      	mov	r5, r0
 8012618:	2900      	cmp	r1, #0
 801261a:	d043      	beq.n	80126a4 <_free_r+0x90>
 801261c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012620:	1f0c      	subs	r4, r1, #4
 8012622:	2b00      	cmp	r3, #0
 8012624:	bfb8      	it	lt
 8012626:	18e4      	addlt	r4, r4, r3
 8012628:	f000 fb08 	bl	8012c3c <__malloc_lock>
 801262c:	4a1e      	ldr	r2, [pc, #120]	; (80126a8 <_free_r+0x94>)
 801262e:	6813      	ldr	r3, [r2, #0]
 8012630:	4610      	mov	r0, r2
 8012632:	b933      	cbnz	r3, 8012642 <_free_r+0x2e>
 8012634:	6063      	str	r3, [r4, #4]
 8012636:	6014      	str	r4, [r2, #0]
 8012638:	4628      	mov	r0, r5
 801263a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801263e:	f000 bb03 	b.w	8012c48 <__malloc_unlock>
 8012642:	42a3      	cmp	r3, r4
 8012644:	d90a      	bls.n	801265c <_free_r+0x48>
 8012646:	6821      	ldr	r1, [r4, #0]
 8012648:	1862      	adds	r2, r4, r1
 801264a:	4293      	cmp	r3, r2
 801264c:	bf01      	itttt	eq
 801264e:	681a      	ldreq	r2, [r3, #0]
 8012650:	685b      	ldreq	r3, [r3, #4]
 8012652:	1852      	addeq	r2, r2, r1
 8012654:	6022      	streq	r2, [r4, #0]
 8012656:	6063      	str	r3, [r4, #4]
 8012658:	6004      	str	r4, [r0, #0]
 801265a:	e7ed      	b.n	8012638 <_free_r+0x24>
 801265c:	461a      	mov	r2, r3
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	b10b      	cbz	r3, 8012666 <_free_r+0x52>
 8012662:	42a3      	cmp	r3, r4
 8012664:	d9fa      	bls.n	801265c <_free_r+0x48>
 8012666:	6811      	ldr	r1, [r2, #0]
 8012668:	1850      	adds	r0, r2, r1
 801266a:	42a0      	cmp	r0, r4
 801266c:	d10b      	bne.n	8012686 <_free_r+0x72>
 801266e:	6820      	ldr	r0, [r4, #0]
 8012670:	4401      	add	r1, r0
 8012672:	1850      	adds	r0, r2, r1
 8012674:	4283      	cmp	r3, r0
 8012676:	6011      	str	r1, [r2, #0]
 8012678:	d1de      	bne.n	8012638 <_free_r+0x24>
 801267a:	6818      	ldr	r0, [r3, #0]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	4401      	add	r1, r0
 8012680:	6011      	str	r1, [r2, #0]
 8012682:	6053      	str	r3, [r2, #4]
 8012684:	e7d8      	b.n	8012638 <_free_r+0x24>
 8012686:	d902      	bls.n	801268e <_free_r+0x7a>
 8012688:	230c      	movs	r3, #12
 801268a:	602b      	str	r3, [r5, #0]
 801268c:	e7d4      	b.n	8012638 <_free_r+0x24>
 801268e:	6820      	ldr	r0, [r4, #0]
 8012690:	1821      	adds	r1, r4, r0
 8012692:	428b      	cmp	r3, r1
 8012694:	bf01      	itttt	eq
 8012696:	6819      	ldreq	r1, [r3, #0]
 8012698:	685b      	ldreq	r3, [r3, #4]
 801269a:	1809      	addeq	r1, r1, r0
 801269c:	6021      	streq	r1, [r4, #0]
 801269e:	6063      	str	r3, [r4, #4]
 80126a0:	6054      	str	r4, [r2, #4]
 80126a2:	e7c9      	b.n	8012638 <_free_r+0x24>
 80126a4:	bd38      	pop	{r3, r4, r5, pc}
 80126a6:	bf00      	nop
 80126a8:	2000077c 	.word	0x2000077c

080126ac <_malloc_r>:
 80126ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ae:	1ccd      	adds	r5, r1, #3
 80126b0:	f025 0503 	bic.w	r5, r5, #3
 80126b4:	3508      	adds	r5, #8
 80126b6:	2d0c      	cmp	r5, #12
 80126b8:	bf38      	it	cc
 80126ba:	250c      	movcc	r5, #12
 80126bc:	2d00      	cmp	r5, #0
 80126be:	4606      	mov	r6, r0
 80126c0:	db01      	blt.n	80126c6 <_malloc_r+0x1a>
 80126c2:	42a9      	cmp	r1, r5
 80126c4:	d903      	bls.n	80126ce <_malloc_r+0x22>
 80126c6:	230c      	movs	r3, #12
 80126c8:	6033      	str	r3, [r6, #0]
 80126ca:	2000      	movs	r0, #0
 80126cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126ce:	f000 fab5 	bl	8012c3c <__malloc_lock>
 80126d2:	4921      	ldr	r1, [pc, #132]	; (8012758 <_malloc_r+0xac>)
 80126d4:	680a      	ldr	r2, [r1, #0]
 80126d6:	4614      	mov	r4, r2
 80126d8:	b99c      	cbnz	r4, 8012702 <_malloc_r+0x56>
 80126da:	4f20      	ldr	r7, [pc, #128]	; (801275c <_malloc_r+0xb0>)
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	b923      	cbnz	r3, 80126ea <_malloc_r+0x3e>
 80126e0:	4621      	mov	r1, r4
 80126e2:	4630      	mov	r0, r6
 80126e4:	f000 f998 	bl	8012a18 <_sbrk_r>
 80126e8:	6038      	str	r0, [r7, #0]
 80126ea:	4629      	mov	r1, r5
 80126ec:	4630      	mov	r0, r6
 80126ee:	f000 f993 	bl	8012a18 <_sbrk_r>
 80126f2:	1c43      	adds	r3, r0, #1
 80126f4:	d123      	bne.n	801273e <_malloc_r+0x92>
 80126f6:	230c      	movs	r3, #12
 80126f8:	4630      	mov	r0, r6
 80126fa:	6033      	str	r3, [r6, #0]
 80126fc:	f000 faa4 	bl	8012c48 <__malloc_unlock>
 8012700:	e7e3      	b.n	80126ca <_malloc_r+0x1e>
 8012702:	6823      	ldr	r3, [r4, #0]
 8012704:	1b5b      	subs	r3, r3, r5
 8012706:	d417      	bmi.n	8012738 <_malloc_r+0x8c>
 8012708:	2b0b      	cmp	r3, #11
 801270a:	d903      	bls.n	8012714 <_malloc_r+0x68>
 801270c:	6023      	str	r3, [r4, #0]
 801270e:	441c      	add	r4, r3
 8012710:	6025      	str	r5, [r4, #0]
 8012712:	e004      	b.n	801271e <_malloc_r+0x72>
 8012714:	6863      	ldr	r3, [r4, #4]
 8012716:	42a2      	cmp	r2, r4
 8012718:	bf0c      	ite	eq
 801271a:	600b      	streq	r3, [r1, #0]
 801271c:	6053      	strne	r3, [r2, #4]
 801271e:	4630      	mov	r0, r6
 8012720:	f000 fa92 	bl	8012c48 <__malloc_unlock>
 8012724:	f104 000b 	add.w	r0, r4, #11
 8012728:	1d23      	adds	r3, r4, #4
 801272a:	f020 0007 	bic.w	r0, r0, #7
 801272e:	1ac2      	subs	r2, r0, r3
 8012730:	d0cc      	beq.n	80126cc <_malloc_r+0x20>
 8012732:	1a1b      	subs	r3, r3, r0
 8012734:	50a3      	str	r3, [r4, r2]
 8012736:	e7c9      	b.n	80126cc <_malloc_r+0x20>
 8012738:	4622      	mov	r2, r4
 801273a:	6864      	ldr	r4, [r4, #4]
 801273c:	e7cc      	b.n	80126d8 <_malloc_r+0x2c>
 801273e:	1cc4      	adds	r4, r0, #3
 8012740:	f024 0403 	bic.w	r4, r4, #3
 8012744:	42a0      	cmp	r0, r4
 8012746:	d0e3      	beq.n	8012710 <_malloc_r+0x64>
 8012748:	1a21      	subs	r1, r4, r0
 801274a:	4630      	mov	r0, r6
 801274c:	f000 f964 	bl	8012a18 <_sbrk_r>
 8012750:	3001      	adds	r0, #1
 8012752:	d1dd      	bne.n	8012710 <_malloc_r+0x64>
 8012754:	e7cf      	b.n	80126f6 <_malloc_r+0x4a>
 8012756:	bf00      	nop
 8012758:	2000077c 	.word	0x2000077c
 801275c:	20000780 	.word	0x20000780

08012760 <__ssputs_r>:
 8012760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012764:	688e      	ldr	r6, [r1, #8]
 8012766:	4682      	mov	sl, r0
 8012768:	429e      	cmp	r6, r3
 801276a:	460c      	mov	r4, r1
 801276c:	4690      	mov	r8, r2
 801276e:	461f      	mov	r7, r3
 8012770:	d838      	bhi.n	80127e4 <__ssputs_r+0x84>
 8012772:	898a      	ldrh	r2, [r1, #12]
 8012774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012778:	d032      	beq.n	80127e0 <__ssputs_r+0x80>
 801277a:	6825      	ldr	r5, [r4, #0]
 801277c:	6909      	ldr	r1, [r1, #16]
 801277e:	3301      	adds	r3, #1
 8012780:	eba5 0901 	sub.w	r9, r5, r1
 8012784:	6965      	ldr	r5, [r4, #20]
 8012786:	444b      	add	r3, r9
 8012788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801278c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012790:	106d      	asrs	r5, r5, #1
 8012792:	429d      	cmp	r5, r3
 8012794:	bf38      	it	cc
 8012796:	461d      	movcc	r5, r3
 8012798:	0553      	lsls	r3, r2, #21
 801279a:	d531      	bpl.n	8012800 <__ssputs_r+0xa0>
 801279c:	4629      	mov	r1, r5
 801279e:	f7ff ff85 	bl	80126ac <_malloc_r>
 80127a2:	4606      	mov	r6, r0
 80127a4:	b950      	cbnz	r0, 80127bc <__ssputs_r+0x5c>
 80127a6:	230c      	movs	r3, #12
 80127a8:	f04f 30ff 	mov.w	r0, #4294967295
 80127ac:	f8ca 3000 	str.w	r3, [sl]
 80127b0:	89a3      	ldrh	r3, [r4, #12]
 80127b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b6:	81a3      	strh	r3, [r4, #12]
 80127b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127bc:	464a      	mov	r2, r9
 80127be:	6921      	ldr	r1, [r4, #16]
 80127c0:	f7fb ff6a 	bl	800e698 <memcpy>
 80127c4:	89a3      	ldrh	r3, [r4, #12]
 80127c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127ce:	81a3      	strh	r3, [r4, #12]
 80127d0:	6126      	str	r6, [r4, #16]
 80127d2:	444e      	add	r6, r9
 80127d4:	6026      	str	r6, [r4, #0]
 80127d6:	463e      	mov	r6, r7
 80127d8:	6165      	str	r5, [r4, #20]
 80127da:	eba5 0509 	sub.w	r5, r5, r9
 80127de:	60a5      	str	r5, [r4, #8]
 80127e0:	42be      	cmp	r6, r7
 80127e2:	d900      	bls.n	80127e6 <__ssputs_r+0x86>
 80127e4:	463e      	mov	r6, r7
 80127e6:	4632      	mov	r2, r6
 80127e8:	4641      	mov	r1, r8
 80127ea:	6820      	ldr	r0, [r4, #0]
 80127ec:	f000 fa0c 	bl	8012c08 <memmove>
 80127f0:	68a3      	ldr	r3, [r4, #8]
 80127f2:	6822      	ldr	r2, [r4, #0]
 80127f4:	1b9b      	subs	r3, r3, r6
 80127f6:	4432      	add	r2, r6
 80127f8:	2000      	movs	r0, #0
 80127fa:	60a3      	str	r3, [r4, #8]
 80127fc:	6022      	str	r2, [r4, #0]
 80127fe:	e7db      	b.n	80127b8 <__ssputs_r+0x58>
 8012800:	462a      	mov	r2, r5
 8012802:	f000 fa27 	bl	8012c54 <_realloc_r>
 8012806:	4606      	mov	r6, r0
 8012808:	2800      	cmp	r0, #0
 801280a:	d1e1      	bne.n	80127d0 <__ssputs_r+0x70>
 801280c:	4650      	mov	r0, sl
 801280e:	6921      	ldr	r1, [r4, #16]
 8012810:	f7ff ff00 	bl	8012614 <_free_r>
 8012814:	e7c7      	b.n	80127a6 <__ssputs_r+0x46>
	...

08012818 <_svfiprintf_r>:
 8012818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281c:	4698      	mov	r8, r3
 801281e:	898b      	ldrh	r3, [r1, #12]
 8012820:	4607      	mov	r7, r0
 8012822:	061b      	lsls	r3, r3, #24
 8012824:	460d      	mov	r5, r1
 8012826:	4614      	mov	r4, r2
 8012828:	b09d      	sub	sp, #116	; 0x74
 801282a:	d50e      	bpl.n	801284a <_svfiprintf_r+0x32>
 801282c:	690b      	ldr	r3, [r1, #16]
 801282e:	b963      	cbnz	r3, 801284a <_svfiprintf_r+0x32>
 8012830:	2140      	movs	r1, #64	; 0x40
 8012832:	f7ff ff3b 	bl	80126ac <_malloc_r>
 8012836:	6028      	str	r0, [r5, #0]
 8012838:	6128      	str	r0, [r5, #16]
 801283a:	b920      	cbnz	r0, 8012846 <_svfiprintf_r+0x2e>
 801283c:	230c      	movs	r3, #12
 801283e:	603b      	str	r3, [r7, #0]
 8012840:	f04f 30ff 	mov.w	r0, #4294967295
 8012844:	e0d1      	b.n	80129ea <_svfiprintf_r+0x1d2>
 8012846:	2340      	movs	r3, #64	; 0x40
 8012848:	616b      	str	r3, [r5, #20]
 801284a:	2300      	movs	r3, #0
 801284c:	9309      	str	r3, [sp, #36]	; 0x24
 801284e:	2320      	movs	r3, #32
 8012850:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012854:	2330      	movs	r3, #48	; 0x30
 8012856:	f04f 0901 	mov.w	r9, #1
 801285a:	f8cd 800c 	str.w	r8, [sp, #12]
 801285e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012a04 <_svfiprintf_r+0x1ec>
 8012862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012866:	4623      	mov	r3, r4
 8012868:	469a      	mov	sl, r3
 801286a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801286e:	b10a      	cbz	r2, 8012874 <_svfiprintf_r+0x5c>
 8012870:	2a25      	cmp	r2, #37	; 0x25
 8012872:	d1f9      	bne.n	8012868 <_svfiprintf_r+0x50>
 8012874:	ebba 0b04 	subs.w	fp, sl, r4
 8012878:	d00b      	beq.n	8012892 <_svfiprintf_r+0x7a>
 801287a:	465b      	mov	r3, fp
 801287c:	4622      	mov	r2, r4
 801287e:	4629      	mov	r1, r5
 8012880:	4638      	mov	r0, r7
 8012882:	f7ff ff6d 	bl	8012760 <__ssputs_r>
 8012886:	3001      	adds	r0, #1
 8012888:	f000 80aa 	beq.w	80129e0 <_svfiprintf_r+0x1c8>
 801288c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801288e:	445a      	add	r2, fp
 8012890:	9209      	str	r2, [sp, #36]	; 0x24
 8012892:	f89a 3000 	ldrb.w	r3, [sl]
 8012896:	2b00      	cmp	r3, #0
 8012898:	f000 80a2 	beq.w	80129e0 <_svfiprintf_r+0x1c8>
 801289c:	2300      	movs	r3, #0
 801289e:	f04f 32ff 	mov.w	r2, #4294967295
 80128a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128a6:	f10a 0a01 	add.w	sl, sl, #1
 80128aa:	9304      	str	r3, [sp, #16]
 80128ac:	9307      	str	r3, [sp, #28]
 80128ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128b2:	931a      	str	r3, [sp, #104]	; 0x68
 80128b4:	4654      	mov	r4, sl
 80128b6:	2205      	movs	r2, #5
 80128b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128bc:	4851      	ldr	r0, [pc, #324]	; (8012a04 <_svfiprintf_r+0x1ec>)
 80128be:	f7ff f9d5 	bl	8011c6c <memchr>
 80128c2:	9a04      	ldr	r2, [sp, #16]
 80128c4:	b9d8      	cbnz	r0, 80128fe <_svfiprintf_r+0xe6>
 80128c6:	06d0      	lsls	r0, r2, #27
 80128c8:	bf44      	itt	mi
 80128ca:	2320      	movmi	r3, #32
 80128cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128d0:	0711      	lsls	r1, r2, #28
 80128d2:	bf44      	itt	mi
 80128d4:	232b      	movmi	r3, #43	; 0x2b
 80128d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128da:	f89a 3000 	ldrb.w	r3, [sl]
 80128de:	2b2a      	cmp	r3, #42	; 0x2a
 80128e0:	d015      	beq.n	801290e <_svfiprintf_r+0xf6>
 80128e2:	4654      	mov	r4, sl
 80128e4:	2000      	movs	r0, #0
 80128e6:	f04f 0c0a 	mov.w	ip, #10
 80128ea:	9a07      	ldr	r2, [sp, #28]
 80128ec:	4621      	mov	r1, r4
 80128ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128f2:	3b30      	subs	r3, #48	; 0x30
 80128f4:	2b09      	cmp	r3, #9
 80128f6:	d94e      	bls.n	8012996 <_svfiprintf_r+0x17e>
 80128f8:	b1b0      	cbz	r0, 8012928 <_svfiprintf_r+0x110>
 80128fa:	9207      	str	r2, [sp, #28]
 80128fc:	e014      	b.n	8012928 <_svfiprintf_r+0x110>
 80128fe:	eba0 0308 	sub.w	r3, r0, r8
 8012902:	fa09 f303 	lsl.w	r3, r9, r3
 8012906:	4313      	orrs	r3, r2
 8012908:	46a2      	mov	sl, r4
 801290a:	9304      	str	r3, [sp, #16]
 801290c:	e7d2      	b.n	80128b4 <_svfiprintf_r+0x9c>
 801290e:	9b03      	ldr	r3, [sp, #12]
 8012910:	1d19      	adds	r1, r3, #4
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	9103      	str	r1, [sp, #12]
 8012916:	2b00      	cmp	r3, #0
 8012918:	bfbb      	ittet	lt
 801291a:	425b      	neglt	r3, r3
 801291c:	f042 0202 	orrlt.w	r2, r2, #2
 8012920:	9307      	strge	r3, [sp, #28]
 8012922:	9307      	strlt	r3, [sp, #28]
 8012924:	bfb8      	it	lt
 8012926:	9204      	strlt	r2, [sp, #16]
 8012928:	7823      	ldrb	r3, [r4, #0]
 801292a:	2b2e      	cmp	r3, #46	; 0x2e
 801292c:	d10c      	bne.n	8012948 <_svfiprintf_r+0x130>
 801292e:	7863      	ldrb	r3, [r4, #1]
 8012930:	2b2a      	cmp	r3, #42	; 0x2a
 8012932:	d135      	bne.n	80129a0 <_svfiprintf_r+0x188>
 8012934:	9b03      	ldr	r3, [sp, #12]
 8012936:	3402      	adds	r4, #2
 8012938:	1d1a      	adds	r2, r3, #4
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	9203      	str	r2, [sp, #12]
 801293e:	2b00      	cmp	r3, #0
 8012940:	bfb8      	it	lt
 8012942:	f04f 33ff 	movlt.w	r3, #4294967295
 8012946:	9305      	str	r3, [sp, #20]
 8012948:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012a14 <_svfiprintf_r+0x1fc>
 801294c:	2203      	movs	r2, #3
 801294e:	4650      	mov	r0, sl
 8012950:	7821      	ldrb	r1, [r4, #0]
 8012952:	f7ff f98b 	bl	8011c6c <memchr>
 8012956:	b140      	cbz	r0, 801296a <_svfiprintf_r+0x152>
 8012958:	2340      	movs	r3, #64	; 0x40
 801295a:	eba0 000a 	sub.w	r0, r0, sl
 801295e:	fa03 f000 	lsl.w	r0, r3, r0
 8012962:	9b04      	ldr	r3, [sp, #16]
 8012964:	3401      	adds	r4, #1
 8012966:	4303      	orrs	r3, r0
 8012968:	9304      	str	r3, [sp, #16]
 801296a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801296e:	2206      	movs	r2, #6
 8012970:	4825      	ldr	r0, [pc, #148]	; (8012a08 <_svfiprintf_r+0x1f0>)
 8012972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012976:	f7ff f979 	bl	8011c6c <memchr>
 801297a:	2800      	cmp	r0, #0
 801297c:	d038      	beq.n	80129f0 <_svfiprintf_r+0x1d8>
 801297e:	4b23      	ldr	r3, [pc, #140]	; (8012a0c <_svfiprintf_r+0x1f4>)
 8012980:	bb1b      	cbnz	r3, 80129ca <_svfiprintf_r+0x1b2>
 8012982:	9b03      	ldr	r3, [sp, #12]
 8012984:	3307      	adds	r3, #7
 8012986:	f023 0307 	bic.w	r3, r3, #7
 801298a:	3308      	adds	r3, #8
 801298c:	9303      	str	r3, [sp, #12]
 801298e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012990:	4433      	add	r3, r6
 8012992:	9309      	str	r3, [sp, #36]	; 0x24
 8012994:	e767      	b.n	8012866 <_svfiprintf_r+0x4e>
 8012996:	460c      	mov	r4, r1
 8012998:	2001      	movs	r0, #1
 801299a:	fb0c 3202 	mla	r2, ip, r2, r3
 801299e:	e7a5      	b.n	80128ec <_svfiprintf_r+0xd4>
 80129a0:	2300      	movs	r3, #0
 80129a2:	f04f 0c0a 	mov.w	ip, #10
 80129a6:	4619      	mov	r1, r3
 80129a8:	3401      	adds	r4, #1
 80129aa:	9305      	str	r3, [sp, #20]
 80129ac:	4620      	mov	r0, r4
 80129ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129b2:	3a30      	subs	r2, #48	; 0x30
 80129b4:	2a09      	cmp	r2, #9
 80129b6:	d903      	bls.n	80129c0 <_svfiprintf_r+0x1a8>
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d0c5      	beq.n	8012948 <_svfiprintf_r+0x130>
 80129bc:	9105      	str	r1, [sp, #20]
 80129be:	e7c3      	b.n	8012948 <_svfiprintf_r+0x130>
 80129c0:	4604      	mov	r4, r0
 80129c2:	2301      	movs	r3, #1
 80129c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80129c8:	e7f0      	b.n	80129ac <_svfiprintf_r+0x194>
 80129ca:	ab03      	add	r3, sp, #12
 80129cc:	9300      	str	r3, [sp, #0]
 80129ce:	462a      	mov	r2, r5
 80129d0:	4638      	mov	r0, r7
 80129d2:	4b0f      	ldr	r3, [pc, #60]	; (8012a10 <_svfiprintf_r+0x1f8>)
 80129d4:	a904      	add	r1, sp, #16
 80129d6:	f7fb ff13 	bl	800e800 <_printf_float>
 80129da:	1c42      	adds	r2, r0, #1
 80129dc:	4606      	mov	r6, r0
 80129de:	d1d6      	bne.n	801298e <_svfiprintf_r+0x176>
 80129e0:	89ab      	ldrh	r3, [r5, #12]
 80129e2:	065b      	lsls	r3, r3, #25
 80129e4:	f53f af2c 	bmi.w	8012840 <_svfiprintf_r+0x28>
 80129e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129ea:	b01d      	add	sp, #116	; 0x74
 80129ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f0:	ab03      	add	r3, sp, #12
 80129f2:	9300      	str	r3, [sp, #0]
 80129f4:	462a      	mov	r2, r5
 80129f6:	4638      	mov	r0, r7
 80129f8:	4b05      	ldr	r3, [pc, #20]	; (8012a10 <_svfiprintf_r+0x1f8>)
 80129fa:	a904      	add	r1, sp, #16
 80129fc:	f7fc f99c 	bl	800ed38 <_printf_i>
 8012a00:	e7eb      	b.n	80129da <_svfiprintf_r+0x1c2>
 8012a02:	bf00      	nop
 8012a04:	080141f4 	.word	0x080141f4
 8012a08:	080141fe 	.word	0x080141fe
 8012a0c:	0800e801 	.word	0x0800e801
 8012a10:	08012761 	.word	0x08012761
 8012a14:	080141fa 	.word	0x080141fa

08012a18 <_sbrk_r>:
 8012a18:	b538      	push	{r3, r4, r5, lr}
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	4d05      	ldr	r5, [pc, #20]	; (8012a34 <_sbrk_r+0x1c>)
 8012a1e:	4604      	mov	r4, r0
 8012a20:	4608      	mov	r0, r1
 8012a22:	602b      	str	r3, [r5, #0]
 8012a24:	f7f3 ffea 	bl	80069fc <_sbrk>
 8012a28:	1c43      	adds	r3, r0, #1
 8012a2a:	d102      	bne.n	8012a32 <_sbrk_r+0x1a>
 8012a2c:	682b      	ldr	r3, [r5, #0]
 8012a2e:	b103      	cbz	r3, 8012a32 <_sbrk_r+0x1a>
 8012a30:	6023      	str	r3, [r4, #0]
 8012a32:	bd38      	pop	{r3, r4, r5, pc}
 8012a34:	20000b3c 	.word	0x20000b3c

08012a38 <__sread>:
 8012a38:	b510      	push	{r4, lr}
 8012a3a:	460c      	mov	r4, r1
 8012a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a40:	f000 fa86 	bl	8012f50 <_read_r>
 8012a44:	2800      	cmp	r0, #0
 8012a46:	bfab      	itete	ge
 8012a48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a4a:	89a3      	ldrhlt	r3, [r4, #12]
 8012a4c:	181b      	addge	r3, r3, r0
 8012a4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a52:	bfac      	ite	ge
 8012a54:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a56:	81a3      	strhlt	r3, [r4, #12]
 8012a58:	bd10      	pop	{r4, pc}

08012a5a <__swrite>:
 8012a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a5e:	461f      	mov	r7, r3
 8012a60:	898b      	ldrh	r3, [r1, #12]
 8012a62:	4605      	mov	r5, r0
 8012a64:	05db      	lsls	r3, r3, #23
 8012a66:	460c      	mov	r4, r1
 8012a68:	4616      	mov	r6, r2
 8012a6a:	d505      	bpl.n	8012a78 <__swrite+0x1e>
 8012a6c:	2302      	movs	r3, #2
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a74:	f000 f8b6 	bl	8012be4 <_lseek_r>
 8012a78:	89a3      	ldrh	r3, [r4, #12]
 8012a7a:	4632      	mov	r2, r6
 8012a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a80:	81a3      	strh	r3, [r4, #12]
 8012a82:	4628      	mov	r0, r5
 8012a84:	463b      	mov	r3, r7
 8012a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8e:	f000 b835 	b.w	8012afc <_write_r>

08012a92 <__sseek>:
 8012a92:	b510      	push	{r4, lr}
 8012a94:	460c      	mov	r4, r1
 8012a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a9a:	f000 f8a3 	bl	8012be4 <_lseek_r>
 8012a9e:	1c43      	adds	r3, r0, #1
 8012aa0:	89a3      	ldrh	r3, [r4, #12]
 8012aa2:	bf15      	itete	ne
 8012aa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012aa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012aaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012aae:	81a3      	strheq	r3, [r4, #12]
 8012ab0:	bf18      	it	ne
 8012ab2:	81a3      	strhne	r3, [r4, #12]
 8012ab4:	bd10      	pop	{r4, pc}

08012ab6 <__sclose>:
 8012ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aba:	f000 b84f 	b.w	8012b5c <_close_r>

08012abe <strncmp>:
 8012abe:	b510      	push	{r4, lr}
 8012ac0:	b16a      	cbz	r2, 8012ade <strncmp+0x20>
 8012ac2:	3901      	subs	r1, #1
 8012ac4:	1884      	adds	r4, r0, r2
 8012ac6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012aca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012ace:	4293      	cmp	r3, r2
 8012ad0:	d103      	bne.n	8012ada <strncmp+0x1c>
 8012ad2:	42a0      	cmp	r0, r4
 8012ad4:	d001      	beq.n	8012ada <strncmp+0x1c>
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1f5      	bne.n	8012ac6 <strncmp+0x8>
 8012ada:	1a98      	subs	r0, r3, r2
 8012adc:	bd10      	pop	{r4, pc}
 8012ade:	4610      	mov	r0, r2
 8012ae0:	e7fc      	b.n	8012adc <strncmp+0x1e>

08012ae2 <__ascii_wctomb>:
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	4608      	mov	r0, r1
 8012ae6:	b141      	cbz	r1, 8012afa <__ascii_wctomb+0x18>
 8012ae8:	2aff      	cmp	r2, #255	; 0xff
 8012aea:	d904      	bls.n	8012af6 <__ascii_wctomb+0x14>
 8012aec:	228a      	movs	r2, #138	; 0x8a
 8012aee:	f04f 30ff 	mov.w	r0, #4294967295
 8012af2:	601a      	str	r2, [r3, #0]
 8012af4:	4770      	bx	lr
 8012af6:	2001      	movs	r0, #1
 8012af8:	700a      	strb	r2, [r1, #0]
 8012afa:	4770      	bx	lr

08012afc <_write_r>:
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	4604      	mov	r4, r0
 8012b00:	4608      	mov	r0, r1
 8012b02:	4611      	mov	r1, r2
 8012b04:	2200      	movs	r2, #0
 8012b06:	4d05      	ldr	r5, [pc, #20]	; (8012b1c <_write_r+0x20>)
 8012b08:	602a      	str	r2, [r5, #0]
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	f7f3 ff2a 	bl	8006964 <_write>
 8012b10:	1c43      	adds	r3, r0, #1
 8012b12:	d102      	bne.n	8012b1a <_write_r+0x1e>
 8012b14:	682b      	ldr	r3, [r5, #0]
 8012b16:	b103      	cbz	r3, 8012b1a <_write_r+0x1e>
 8012b18:	6023      	str	r3, [r4, #0]
 8012b1a:	bd38      	pop	{r3, r4, r5, pc}
 8012b1c:	20000b3c 	.word	0x20000b3c

08012b20 <__assert_func>:
 8012b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012b22:	4614      	mov	r4, r2
 8012b24:	461a      	mov	r2, r3
 8012b26:	4b09      	ldr	r3, [pc, #36]	; (8012b4c <__assert_func+0x2c>)
 8012b28:	4605      	mov	r5, r0
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	68d8      	ldr	r0, [r3, #12]
 8012b2e:	b14c      	cbz	r4, 8012b44 <__assert_func+0x24>
 8012b30:	4b07      	ldr	r3, [pc, #28]	; (8012b50 <__assert_func+0x30>)
 8012b32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012b36:	9100      	str	r1, [sp, #0]
 8012b38:	462b      	mov	r3, r5
 8012b3a:	4906      	ldr	r1, [pc, #24]	; (8012b54 <__assert_func+0x34>)
 8012b3c:	f000 f81e 	bl	8012b7c <fiprintf>
 8012b40:	f000 fa18 	bl	8012f74 <abort>
 8012b44:	4b04      	ldr	r3, [pc, #16]	; (8012b58 <__assert_func+0x38>)
 8012b46:	461c      	mov	r4, r3
 8012b48:	e7f3      	b.n	8012b32 <__assert_func+0x12>
 8012b4a:	bf00      	nop
 8012b4c:	2000007c 	.word	0x2000007c
 8012b50:	08014205 	.word	0x08014205
 8012b54:	08014212 	.word	0x08014212
 8012b58:	08014240 	.word	0x08014240

08012b5c <_close_r>:
 8012b5c:	b538      	push	{r3, r4, r5, lr}
 8012b5e:	2300      	movs	r3, #0
 8012b60:	4d05      	ldr	r5, [pc, #20]	; (8012b78 <_close_r+0x1c>)
 8012b62:	4604      	mov	r4, r0
 8012b64:	4608      	mov	r0, r1
 8012b66:	602b      	str	r3, [r5, #0]
 8012b68:	f7f3 ff18 	bl	800699c <_close>
 8012b6c:	1c43      	adds	r3, r0, #1
 8012b6e:	d102      	bne.n	8012b76 <_close_r+0x1a>
 8012b70:	682b      	ldr	r3, [r5, #0]
 8012b72:	b103      	cbz	r3, 8012b76 <_close_r+0x1a>
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	bd38      	pop	{r3, r4, r5, pc}
 8012b78:	20000b3c 	.word	0x20000b3c

08012b7c <fiprintf>:
 8012b7c:	b40e      	push	{r1, r2, r3}
 8012b7e:	b503      	push	{r0, r1, lr}
 8012b80:	4601      	mov	r1, r0
 8012b82:	ab03      	add	r3, sp, #12
 8012b84:	4805      	ldr	r0, [pc, #20]	; (8012b9c <fiprintf+0x20>)
 8012b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b8a:	6800      	ldr	r0, [r0, #0]
 8012b8c:	9301      	str	r3, [sp, #4]
 8012b8e:	f000 f8af 	bl	8012cf0 <_vfiprintf_r>
 8012b92:	b002      	add	sp, #8
 8012b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b98:	b003      	add	sp, #12
 8012b9a:	4770      	bx	lr
 8012b9c:	2000007c 	.word	0x2000007c

08012ba0 <_fstat_r>:
 8012ba0:	b538      	push	{r3, r4, r5, lr}
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	4d06      	ldr	r5, [pc, #24]	; (8012bc0 <_fstat_r+0x20>)
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	4608      	mov	r0, r1
 8012baa:	4611      	mov	r1, r2
 8012bac:	602b      	str	r3, [r5, #0]
 8012bae:	f7f3 ff00 	bl	80069b2 <_fstat>
 8012bb2:	1c43      	adds	r3, r0, #1
 8012bb4:	d102      	bne.n	8012bbc <_fstat_r+0x1c>
 8012bb6:	682b      	ldr	r3, [r5, #0]
 8012bb8:	b103      	cbz	r3, 8012bbc <_fstat_r+0x1c>
 8012bba:	6023      	str	r3, [r4, #0]
 8012bbc:	bd38      	pop	{r3, r4, r5, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20000b3c 	.word	0x20000b3c

08012bc4 <_isatty_r>:
 8012bc4:	b538      	push	{r3, r4, r5, lr}
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	4d05      	ldr	r5, [pc, #20]	; (8012be0 <_isatty_r+0x1c>)
 8012bca:	4604      	mov	r4, r0
 8012bcc:	4608      	mov	r0, r1
 8012bce:	602b      	str	r3, [r5, #0]
 8012bd0:	f7f3 fefe 	bl	80069d0 <_isatty>
 8012bd4:	1c43      	adds	r3, r0, #1
 8012bd6:	d102      	bne.n	8012bde <_isatty_r+0x1a>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	b103      	cbz	r3, 8012bde <_isatty_r+0x1a>
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	bd38      	pop	{r3, r4, r5, pc}
 8012be0:	20000b3c 	.word	0x20000b3c

08012be4 <_lseek_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4604      	mov	r4, r0
 8012be8:	4608      	mov	r0, r1
 8012bea:	4611      	mov	r1, r2
 8012bec:	2200      	movs	r2, #0
 8012bee:	4d05      	ldr	r5, [pc, #20]	; (8012c04 <_lseek_r+0x20>)
 8012bf0:	602a      	str	r2, [r5, #0]
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	f7f3 fef6 	bl	80069e4 <_lseek>
 8012bf8:	1c43      	adds	r3, r0, #1
 8012bfa:	d102      	bne.n	8012c02 <_lseek_r+0x1e>
 8012bfc:	682b      	ldr	r3, [r5, #0]
 8012bfe:	b103      	cbz	r3, 8012c02 <_lseek_r+0x1e>
 8012c00:	6023      	str	r3, [r4, #0]
 8012c02:	bd38      	pop	{r3, r4, r5, pc}
 8012c04:	20000b3c 	.word	0x20000b3c

08012c08 <memmove>:
 8012c08:	4288      	cmp	r0, r1
 8012c0a:	b510      	push	{r4, lr}
 8012c0c:	eb01 0402 	add.w	r4, r1, r2
 8012c10:	d902      	bls.n	8012c18 <memmove+0x10>
 8012c12:	4284      	cmp	r4, r0
 8012c14:	4623      	mov	r3, r4
 8012c16:	d807      	bhi.n	8012c28 <memmove+0x20>
 8012c18:	1e43      	subs	r3, r0, #1
 8012c1a:	42a1      	cmp	r1, r4
 8012c1c:	d008      	beq.n	8012c30 <memmove+0x28>
 8012c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c26:	e7f8      	b.n	8012c1a <memmove+0x12>
 8012c28:	4601      	mov	r1, r0
 8012c2a:	4402      	add	r2, r0
 8012c2c:	428a      	cmp	r2, r1
 8012c2e:	d100      	bne.n	8012c32 <memmove+0x2a>
 8012c30:	bd10      	pop	{r4, pc}
 8012c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c3a:	e7f7      	b.n	8012c2c <memmove+0x24>

08012c3c <__malloc_lock>:
 8012c3c:	4801      	ldr	r0, [pc, #4]	; (8012c44 <__malloc_lock+0x8>)
 8012c3e:	f7fe bf94 	b.w	8011b6a <__retarget_lock_acquire_recursive>
 8012c42:	bf00      	nop
 8012c44:	20000b34 	.word	0x20000b34

08012c48 <__malloc_unlock>:
 8012c48:	4801      	ldr	r0, [pc, #4]	; (8012c50 <__malloc_unlock+0x8>)
 8012c4a:	f7fe bf8f 	b.w	8011b6c <__retarget_lock_release_recursive>
 8012c4e:	bf00      	nop
 8012c50:	20000b34 	.word	0x20000b34

08012c54 <_realloc_r>:
 8012c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c56:	4607      	mov	r7, r0
 8012c58:	4614      	mov	r4, r2
 8012c5a:	460e      	mov	r6, r1
 8012c5c:	b921      	cbnz	r1, 8012c68 <_realloc_r+0x14>
 8012c5e:	4611      	mov	r1, r2
 8012c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012c64:	f7ff bd22 	b.w	80126ac <_malloc_r>
 8012c68:	b922      	cbnz	r2, 8012c74 <_realloc_r+0x20>
 8012c6a:	f7ff fcd3 	bl	8012614 <_free_r>
 8012c6e:	4625      	mov	r5, r4
 8012c70:	4628      	mov	r0, r5
 8012c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c74:	f000 f985 	bl	8012f82 <_malloc_usable_size_r>
 8012c78:	42a0      	cmp	r0, r4
 8012c7a:	d20f      	bcs.n	8012c9c <_realloc_r+0x48>
 8012c7c:	4621      	mov	r1, r4
 8012c7e:	4638      	mov	r0, r7
 8012c80:	f7ff fd14 	bl	80126ac <_malloc_r>
 8012c84:	4605      	mov	r5, r0
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d0f2      	beq.n	8012c70 <_realloc_r+0x1c>
 8012c8a:	4631      	mov	r1, r6
 8012c8c:	4622      	mov	r2, r4
 8012c8e:	f7fb fd03 	bl	800e698 <memcpy>
 8012c92:	4631      	mov	r1, r6
 8012c94:	4638      	mov	r0, r7
 8012c96:	f7ff fcbd 	bl	8012614 <_free_r>
 8012c9a:	e7e9      	b.n	8012c70 <_realloc_r+0x1c>
 8012c9c:	4635      	mov	r5, r6
 8012c9e:	e7e7      	b.n	8012c70 <_realloc_r+0x1c>

08012ca0 <__sfputc_r>:
 8012ca0:	6893      	ldr	r3, [r2, #8]
 8012ca2:	b410      	push	{r4}
 8012ca4:	3b01      	subs	r3, #1
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	6093      	str	r3, [r2, #8]
 8012caa:	da07      	bge.n	8012cbc <__sfputc_r+0x1c>
 8012cac:	6994      	ldr	r4, [r2, #24]
 8012cae:	42a3      	cmp	r3, r4
 8012cb0:	db01      	blt.n	8012cb6 <__sfputc_r+0x16>
 8012cb2:	290a      	cmp	r1, #10
 8012cb4:	d102      	bne.n	8012cbc <__sfputc_r+0x1c>
 8012cb6:	bc10      	pop	{r4}
 8012cb8:	f7fd baf6 	b.w	80102a8 <__swbuf_r>
 8012cbc:	6813      	ldr	r3, [r2, #0]
 8012cbe:	1c58      	adds	r0, r3, #1
 8012cc0:	6010      	str	r0, [r2, #0]
 8012cc2:	7019      	strb	r1, [r3, #0]
 8012cc4:	4608      	mov	r0, r1
 8012cc6:	bc10      	pop	{r4}
 8012cc8:	4770      	bx	lr

08012cca <__sfputs_r>:
 8012cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ccc:	4606      	mov	r6, r0
 8012cce:	460f      	mov	r7, r1
 8012cd0:	4614      	mov	r4, r2
 8012cd2:	18d5      	adds	r5, r2, r3
 8012cd4:	42ac      	cmp	r4, r5
 8012cd6:	d101      	bne.n	8012cdc <__sfputs_r+0x12>
 8012cd8:	2000      	movs	r0, #0
 8012cda:	e007      	b.n	8012cec <__sfputs_r+0x22>
 8012cdc:	463a      	mov	r2, r7
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ce4:	f7ff ffdc 	bl	8012ca0 <__sfputc_r>
 8012ce8:	1c43      	adds	r3, r0, #1
 8012cea:	d1f3      	bne.n	8012cd4 <__sfputs_r+0xa>
 8012cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012cf0 <_vfiprintf_r>:
 8012cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf4:	460d      	mov	r5, r1
 8012cf6:	4614      	mov	r4, r2
 8012cf8:	4698      	mov	r8, r3
 8012cfa:	4606      	mov	r6, r0
 8012cfc:	b09d      	sub	sp, #116	; 0x74
 8012cfe:	b118      	cbz	r0, 8012d08 <_vfiprintf_r+0x18>
 8012d00:	6983      	ldr	r3, [r0, #24]
 8012d02:	b90b      	cbnz	r3, 8012d08 <_vfiprintf_r+0x18>
 8012d04:	f7fe fb28 	bl	8011358 <__sinit>
 8012d08:	4b89      	ldr	r3, [pc, #548]	; (8012f30 <_vfiprintf_r+0x240>)
 8012d0a:	429d      	cmp	r5, r3
 8012d0c:	d11b      	bne.n	8012d46 <_vfiprintf_r+0x56>
 8012d0e:	6875      	ldr	r5, [r6, #4]
 8012d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d12:	07d9      	lsls	r1, r3, #31
 8012d14:	d405      	bmi.n	8012d22 <_vfiprintf_r+0x32>
 8012d16:	89ab      	ldrh	r3, [r5, #12]
 8012d18:	059a      	lsls	r2, r3, #22
 8012d1a:	d402      	bmi.n	8012d22 <_vfiprintf_r+0x32>
 8012d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d1e:	f7fe ff24 	bl	8011b6a <__retarget_lock_acquire_recursive>
 8012d22:	89ab      	ldrh	r3, [r5, #12]
 8012d24:	071b      	lsls	r3, r3, #28
 8012d26:	d501      	bpl.n	8012d2c <_vfiprintf_r+0x3c>
 8012d28:	692b      	ldr	r3, [r5, #16]
 8012d2a:	b9eb      	cbnz	r3, 8012d68 <_vfiprintf_r+0x78>
 8012d2c:	4629      	mov	r1, r5
 8012d2e:	4630      	mov	r0, r6
 8012d30:	f7fd fb0c 	bl	801034c <__swsetup_r>
 8012d34:	b1c0      	cbz	r0, 8012d68 <_vfiprintf_r+0x78>
 8012d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d38:	07dc      	lsls	r4, r3, #31
 8012d3a:	d50e      	bpl.n	8012d5a <_vfiprintf_r+0x6a>
 8012d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d40:	b01d      	add	sp, #116	; 0x74
 8012d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d46:	4b7b      	ldr	r3, [pc, #492]	; (8012f34 <_vfiprintf_r+0x244>)
 8012d48:	429d      	cmp	r5, r3
 8012d4a:	d101      	bne.n	8012d50 <_vfiprintf_r+0x60>
 8012d4c:	68b5      	ldr	r5, [r6, #8]
 8012d4e:	e7df      	b.n	8012d10 <_vfiprintf_r+0x20>
 8012d50:	4b79      	ldr	r3, [pc, #484]	; (8012f38 <_vfiprintf_r+0x248>)
 8012d52:	429d      	cmp	r5, r3
 8012d54:	bf08      	it	eq
 8012d56:	68f5      	ldreq	r5, [r6, #12]
 8012d58:	e7da      	b.n	8012d10 <_vfiprintf_r+0x20>
 8012d5a:	89ab      	ldrh	r3, [r5, #12]
 8012d5c:	0598      	lsls	r0, r3, #22
 8012d5e:	d4ed      	bmi.n	8012d3c <_vfiprintf_r+0x4c>
 8012d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d62:	f7fe ff03 	bl	8011b6c <__retarget_lock_release_recursive>
 8012d66:	e7e9      	b.n	8012d3c <_vfiprintf_r+0x4c>
 8012d68:	2300      	movs	r3, #0
 8012d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d6c:	2320      	movs	r3, #32
 8012d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d72:	2330      	movs	r3, #48	; 0x30
 8012d74:	f04f 0901 	mov.w	r9, #1
 8012d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012f3c <_vfiprintf_r+0x24c>
 8012d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d84:	4623      	mov	r3, r4
 8012d86:	469a      	mov	sl, r3
 8012d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d8c:	b10a      	cbz	r2, 8012d92 <_vfiprintf_r+0xa2>
 8012d8e:	2a25      	cmp	r2, #37	; 0x25
 8012d90:	d1f9      	bne.n	8012d86 <_vfiprintf_r+0x96>
 8012d92:	ebba 0b04 	subs.w	fp, sl, r4
 8012d96:	d00b      	beq.n	8012db0 <_vfiprintf_r+0xc0>
 8012d98:	465b      	mov	r3, fp
 8012d9a:	4622      	mov	r2, r4
 8012d9c:	4629      	mov	r1, r5
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f7ff ff93 	bl	8012cca <__sfputs_r>
 8012da4:	3001      	adds	r0, #1
 8012da6:	f000 80aa 	beq.w	8012efe <_vfiprintf_r+0x20e>
 8012daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dac:	445a      	add	r2, fp
 8012dae:	9209      	str	r2, [sp, #36]	; 0x24
 8012db0:	f89a 3000 	ldrb.w	r3, [sl]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	f000 80a2 	beq.w	8012efe <_vfiprintf_r+0x20e>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012dc4:	f10a 0a01 	add.w	sl, sl, #1
 8012dc8:	9304      	str	r3, [sp, #16]
 8012dca:	9307      	str	r3, [sp, #28]
 8012dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8012dd2:	4654      	mov	r4, sl
 8012dd4:	2205      	movs	r2, #5
 8012dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dda:	4858      	ldr	r0, [pc, #352]	; (8012f3c <_vfiprintf_r+0x24c>)
 8012ddc:	f7fe ff46 	bl	8011c6c <memchr>
 8012de0:	9a04      	ldr	r2, [sp, #16]
 8012de2:	b9d8      	cbnz	r0, 8012e1c <_vfiprintf_r+0x12c>
 8012de4:	06d1      	lsls	r1, r2, #27
 8012de6:	bf44      	itt	mi
 8012de8:	2320      	movmi	r3, #32
 8012dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dee:	0713      	lsls	r3, r2, #28
 8012df0:	bf44      	itt	mi
 8012df2:	232b      	movmi	r3, #43	; 0x2b
 8012df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012df8:	f89a 3000 	ldrb.w	r3, [sl]
 8012dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8012dfe:	d015      	beq.n	8012e2c <_vfiprintf_r+0x13c>
 8012e00:	4654      	mov	r4, sl
 8012e02:	2000      	movs	r0, #0
 8012e04:	f04f 0c0a 	mov.w	ip, #10
 8012e08:	9a07      	ldr	r2, [sp, #28]
 8012e0a:	4621      	mov	r1, r4
 8012e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e10:	3b30      	subs	r3, #48	; 0x30
 8012e12:	2b09      	cmp	r3, #9
 8012e14:	d94e      	bls.n	8012eb4 <_vfiprintf_r+0x1c4>
 8012e16:	b1b0      	cbz	r0, 8012e46 <_vfiprintf_r+0x156>
 8012e18:	9207      	str	r2, [sp, #28]
 8012e1a:	e014      	b.n	8012e46 <_vfiprintf_r+0x156>
 8012e1c:	eba0 0308 	sub.w	r3, r0, r8
 8012e20:	fa09 f303 	lsl.w	r3, r9, r3
 8012e24:	4313      	orrs	r3, r2
 8012e26:	46a2      	mov	sl, r4
 8012e28:	9304      	str	r3, [sp, #16]
 8012e2a:	e7d2      	b.n	8012dd2 <_vfiprintf_r+0xe2>
 8012e2c:	9b03      	ldr	r3, [sp, #12]
 8012e2e:	1d19      	adds	r1, r3, #4
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	9103      	str	r1, [sp, #12]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	bfbb      	ittet	lt
 8012e38:	425b      	neglt	r3, r3
 8012e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8012e3e:	9307      	strge	r3, [sp, #28]
 8012e40:	9307      	strlt	r3, [sp, #28]
 8012e42:	bfb8      	it	lt
 8012e44:	9204      	strlt	r2, [sp, #16]
 8012e46:	7823      	ldrb	r3, [r4, #0]
 8012e48:	2b2e      	cmp	r3, #46	; 0x2e
 8012e4a:	d10c      	bne.n	8012e66 <_vfiprintf_r+0x176>
 8012e4c:	7863      	ldrb	r3, [r4, #1]
 8012e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8012e50:	d135      	bne.n	8012ebe <_vfiprintf_r+0x1ce>
 8012e52:	9b03      	ldr	r3, [sp, #12]
 8012e54:	3402      	adds	r4, #2
 8012e56:	1d1a      	adds	r2, r3, #4
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	9203      	str	r2, [sp, #12]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	bfb8      	it	lt
 8012e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e64:	9305      	str	r3, [sp, #20]
 8012e66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012f4c <_vfiprintf_r+0x25c>
 8012e6a:	2203      	movs	r2, #3
 8012e6c:	4650      	mov	r0, sl
 8012e6e:	7821      	ldrb	r1, [r4, #0]
 8012e70:	f7fe fefc 	bl	8011c6c <memchr>
 8012e74:	b140      	cbz	r0, 8012e88 <_vfiprintf_r+0x198>
 8012e76:	2340      	movs	r3, #64	; 0x40
 8012e78:	eba0 000a 	sub.w	r0, r0, sl
 8012e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8012e80:	9b04      	ldr	r3, [sp, #16]
 8012e82:	3401      	adds	r4, #1
 8012e84:	4303      	orrs	r3, r0
 8012e86:	9304      	str	r3, [sp, #16]
 8012e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e8c:	2206      	movs	r2, #6
 8012e8e:	482c      	ldr	r0, [pc, #176]	; (8012f40 <_vfiprintf_r+0x250>)
 8012e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e94:	f7fe feea 	bl	8011c6c <memchr>
 8012e98:	2800      	cmp	r0, #0
 8012e9a:	d03f      	beq.n	8012f1c <_vfiprintf_r+0x22c>
 8012e9c:	4b29      	ldr	r3, [pc, #164]	; (8012f44 <_vfiprintf_r+0x254>)
 8012e9e:	bb1b      	cbnz	r3, 8012ee8 <_vfiprintf_r+0x1f8>
 8012ea0:	9b03      	ldr	r3, [sp, #12]
 8012ea2:	3307      	adds	r3, #7
 8012ea4:	f023 0307 	bic.w	r3, r3, #7
 8012ea8:	3308      	adds	r3, #8
 8012eaa:	9303      	str	r3, [sp, #12]
 8012eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eae:	443b      	add	r3, r7
 8012eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8012eb2:	e767      	b.n	8012d84 <_vfiprintf_r+0x94>
 8012eb4:	460c      	mov	r4, r1
 8012eb6:	2001      	movs	r0, #1
 8012eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ebc:	e7a5      	b.n	8012e0a <_vfiprintf_r+0x11a>
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	f04f 0c0a 	mov.w	ip, #10
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	3401      	adds	r4, #1
 8012ec8:	9305      	str	r3, [sp, #20]
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ed0:	3a30      	subs	r2, #48	; 0x30
 8012ed2:	2a09      	cmp	r2, #9
 8012ed4:	d903      	bls.n	8012ede <_vfiprintf_r+0x1ee>
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d0c5      	beq.n	8012e66 <_vfiprintf_r+0x176>
 8012eda:	9105      	str	r1, [sp, #20]
 8012edc:	e7c3      	b.n	8012e66 <_vfiprintf_r+0x176>
 8012ede:	4604      	mov	r4, r0
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ee6:	e7f0      	b.n	8012eca <_vfiprintf_r+0x1da>
 8012ee8:	ab03      	add	r3, sp, #12
 8012eea:	9300      	str	r3, [sp, #0]
 8012eec:	462a      	mov	r2, r5
 8012eee:	4630      	mov	r0, r6
 8012ef0:	4b15      	ldr	r3, [pc, #84]	; (8012f48 <_vfiprintf_r+0x258>)
 8012ef2:	a904      	add	r1, sp, #16
 8012ef4:	f7fb fc84 	bl	800e800 <_printf_float>
 8012ef8:	4607      	mov	r7, r0
 8012efa:	1c78      	adds	r0, r7, #1
 8012efc:	d1d6      	bne.n	8012eac <_vfiprintf_r+0x1bc>
 8012efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f00:	07d9      	lsls	r1, r3, #31
 8012f02:	d405      	bmi.n	8012f10 <_vfiprintf_r+0x220>
 8012f04:	89ab      	ldrh	r3, [r5, #12]
 8012f06:	059a      	lsls	r2, r3, #22
 8012f08:	d402      	bmi.n	8012f10 <_vfiprintf_r+0x220>
 8012f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f0c:	f7fe fe2e 	bl	8011b6c <__retarget_lock_release_recursive>
 8012f10:	89ab      	ldrh	r3, [r5, #12]
 8012f12:	065b      	lsls	r3, r3, #25
 8012f14:	f53f af12 	bmi.w	8012d3c <_vfiprintf_r+0x4c>
 8012f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f1a:	e711      	b.n	8012d40 <_vfiprintf_r+0x50>
 8012f1c:	ab03      	add	r3, sp, #12
 8012f1e:	9300      	str	r3, [sp, #0]
 8012f20:	462a      	mov	r2, r5
 8012f22:	4630      	mov	r0, r6
 8012f24:	4b08      	ldr	r3, [pc, #32]	; (8012f48 <_vfiprintf_r+0x258>)
 8012f26:	a904      	add	r1, sp, #16
 8012f28:	f7fb ff06 	bl	800ed38 <_printf_i>
 8012f2c:	e7e4      	b.n	8012ef8 <_vfiprintf_r+0x208>
 8012f2e:	bf00      	nop
 8012f30:	08013fd4 	.word	0x08013fd4
 8012f34:	08013ff4 	.word	0x08013ff4
 8012f38:	08013fb4 	.word	0x08013fb4
 8012f3c:	080141f4 	.word	0x080141f4
 8012f40:	080141fe 	.word	0x080141fe
 8012f44:	0800e801 	.word	0x0800e801
 8012f48:	08012ccb 	.word	0x08012ccb
 8012f4c:	080141fa 	.word	0x080141fa

08012f50 <_read_r>:
 8012f50:	b538      	push	{r3, r4, r5, lr}
 8012f52:	4604      	mov	r4, r0
 8012f54:	4608      	mov	r0, r1
 8012f56:	4611      	mov	r1, r2
 8012f58:	2200      	movs	r2, #0
 8012f5a:	4d05      	ldr	r5, [pc, #20]	; (8012f70 <_read_r+0x20>)
 8012f5c:	602a      	str	r2, [r5, #0]
 8012f5e:	461a      	mov	r2, r3
 8012f60:	f7f3 fce3 	bl	800692a <_read>
 8012f64:	1c43      	adds	r3, r0, #1
 8012f66:	d102      	bne.n	8012f6e <_read_r+0x1e>
 8012f68:	682b      	ldr	r3, [r5, #0]
 8012f6a:	b103      	cbz	r3, 8012f6e <_read_r+0x1e>
 8012f6c:	6023      	str	r3, [r4, #0]
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	20000b3c 	.word	0x20000b3c

08012f74 <abort>:
 8012f74:	2006      	movs	r0, #6
 8012f76:	b508      	push	{r3, lr}
 8012f78:	f000 f834 	bl	8012fe4 <raise>
 8012f7c:	2001      	movs	r0, #1
 8012f7e:	f7f3 fcca 	bl	8006916 <_exit>

08012f82 <_malloc_usable_size_r>:
 8012f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f86:	1f18      	subs	r0, r3, #4
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	bfbc      	itt	lt
 8012f8c:	580b      	ldrlt	r3, [r1, r0]
 8012f8e:	18c0      	addlt	r0, r0, r3
 8012f90:	4770      	bx	lr

08012f92 <_raise_r>:
 8012f92:	291f      	cmp	r1, #31
 8012f94:	b538      	push	{r3, r4, r5, lr}
 8012f96:	4604      	mov	r4, r0
 8012f98:	460d      	mov	r5, r1
 8012f9a:	d904      	bls.n	8012fa6 <_raise_r+0x14>
 8012f9c:	2316      	movs	r3, #22
 8012f9e:	6003      	str	r3, [r0, #0]
 8012fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8012fa4:	bd38      	pop	{r3, r4, r5, pc}
 8012fa6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012fa8:	b112      	cbz	r2, 8012fb0 <_raise_r+0x1e>
 8012faa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012fae:	b94b      	cbnz	r3, 8012fc4 <_raise_r+0x32>
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f000 f831 	bl	8013018 <_getpid_r>
 8012fb6:	462a      	mov	r2, r5
 8012fb8:	4601      	mov	r1, r0
 8012fba:	4620      	mov	r0, r4
 8012fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fc0:	f000 b818 	b.w	8012ff4 <_kill_r>
 8012fc4:	2b01      	cmp	r3, #1
 8012fc6:	d00a      	beq.n	8012fde <_raise_r+0x4c>
 8012fc8:	1c59      	adds	r1, r3, #1
 8012fca:	d103      	bne.n	8012fd4 <_raise_r+0x42>
 8012fcc:	2316      	movs	r3, #22
 8012fce:	6003      	str	r3, [r0, #0]
 8012fd0:	2001      	movs	r0, #1
 8012fd2:	e7e7      	b.n	8012fa4 <_raise_r+0x12>
 8012fd4:	2400      	movs	r4, #0
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012fdc:	4798      	blx	r3
 8012fde:	2000      	movs	r0, #0
 8012fe0:	e7e0      	b.n	8012fa4 <_raise_r+0x12>
	...

08012fe4 <raise>:
 8012fe4:	4b02      	ldr	r3, [pc, #8]	; (8012ff0 <raise+0xc>)
 8012fe6:	4601      	mov	r1, r0
 8012fe8:	6818      	ldr	r0, [r3, #0]
 8012fea:	f7ff bfd2 	b.w	8012f92 <_raise_r>
 8012fee:	bf00      	nop
 8012ff0:	2000007c 	.word	0x2000007c

08012ff4 <_kill_r>:
 8012ff4:	b538      	push	{r3, r4, r5, lr}
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	4d06      	ldr	r5, [pc, #24]	; (8013014 <_kill_r+0x20>)
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	4608      	mov	r0, r1
 8012ffe:	4611      	mov	r1, r2
 8013000:	602b      	str	r3, [r5, #0]
 8013002:	f7f3 fc78 	bl	80068f6 <_kill>
 8013006:	1c43      	adds	r3, r0, #1
 8013008:	d102      	bne.n	8013010 <_kill_r+0x1c>
 801300a:	682b      	ldr	r3, [r5, #0]
 801300c:	b103      	cbz	r3, 8013010 <_kill_r+0x1c>
 801300e:	6023      	str	r3, [r4, #0]
 8013010:	bd38      	pop	{r3, r4, r5, pc}
 8013012:	bf00      	nop
 8013014:	20000b3c 	.word	0x20000b3c

08013018 <_getpid_r>:
 8013018:	f7f3 bc66 	b.w	80068e8 <_getpid>

0801301c <_init>:
 801301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801301e:	bf00      	nop
 8013020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013022:	bc08      	pop	{r3}
 8013024:	469e      	mov	lr, r3
 8013026:	4770      	bx	lr

08013028 <_fini>:
 8013028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801302a:	bf00      	nop
 801302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801302e:	bc08      	pop	{r3}
 8013030:	469e      	mov	lr, r3
 8013032:	4770      	bx	lr
